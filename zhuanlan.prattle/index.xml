<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>迷思</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/</link>
<description>我的博客及微信公众号里的精华内容都会放在这里。 我的博客及微信公众号里的精华内容都会放在这里。</description>
<language>zh-cn</language>
<lastBuildDate>Wed, 25 Dec 2019 06:58:25 +0800</lastBuildDate>
<item>
<title>如何安全地保存密码？</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-12-23-99014061.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/99014061&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6046ceb2b18e0d5744663f30db44d671_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;如今的互联网生活，让每个人都离不开密码 — 操作系统有开机密码（用户密码），各种应用有登录密码，甚至还有交易密码。形形色色的密码让用户头皮发麻，要么使用重复的不那么健壮的密码，要么不得不依赖于各种密码保存服务，比如 1password。我常常在想，有没有一种方式，可以让所有的密码从一个主密码中派生出来，就像比特币 BIP44 钱包派生那样？&lt;/p&gt;&lt;p&gt;正巧，今早看了 Signal（一个加密通讯工具）的一篇博文 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//localhost%3A8000/2019/w51/%255Bhttps%3A//signal.org/blog/secure-value-recovery/%255D%28https%3A//signal.org/blog/secure-value-recovery/%29&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Technology Preview for secure value recovery&lt;/a&gt;，介绍了他们用 intel 的 SGX 技术来创建一个 &amp;#34;secure enclave&amp;#34; 进行安全地密码保护的工具。文中介绍了一种派生密码的手段：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用 Argon2 算法将用户密码延展成一个 32 字节的密钥 stretch_key&lt;/li&gt;&lt;li&gt;通过 stretch_key 为密钥，&amp;#34;auth key&amp;#34; 为内容，用 HMAC-SHA256 派生出一个临时的加密密钥 auth_key&lt;/li&gt;&lt;li&gt;通过 stretch_key  为密钥，&amp;#34;master key&amp;#34; 为内容，用 HMAC-SHA256派生出主密钥的一部分 partial_key&lt;/li&gt;&lt;li&gt;使用加密算法级别的随机数生成器生成 32 字节的 seed&lt;/li&gt;&lt;li&gt;以 partial_key 为密钥，seed 为内容用 HMAC-SHA256 派生出主密钥 master_key&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;有了 master_key 后，对于任意的应用程序，可以用类似的方式派生出应用程序所需要的密钥。这样，我们从一个简单的用户密码，生成一系列安全密钥，最终得到一个安全的主密钥，以此就可以类似 BIP44 那样，通过主密钥和一个描述应用程序的字符串，派生出应用程序所需要的密码。&lt;/p&gt;&lt;p&gt;这个过程中，生成主密钥的随机数 seed 很重要，需要保存起来，因为任何应用程序的密码的创建和恢复都需要这个 seed 和用户密码才能得到主密钥。所以我们需要将其保存起来，但明文保存安全性大打折扣，所以我们需要用 auth_key 来加密 seed，然后将其存储到磁盘上，随时使用。通过用户密码可以得到 auth_key，就可以解密加密后的 seed。Signal 博客的原文主要精力放在了如何使用 SGX 技术来防止暴力破解，对我而言，可操作性不强，而密码派生的方法，让我很受启发，于是我把原来的算法稍作更改：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;除了随机生成 seed，还随机生成 Argon2 需要的 salt，salt 和加密后的 seed 一起存储到磁盘上&lt;/li&gt;&lt;li&gt;所有的 HMAC 都是用 Blake2s（Blake2s 有 Sha3 的安全性，性能还非常优秀，且直接内置 HMAC 支持）&lt;/li&gt;&lt;li&gt;用 auth_key 加密 seed 使用了 ChaCha20 算法（TLS 1.3 的推荐算法之一，提供 256 位的安全性）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;然后手痒用 rust 实现了一个简单的小工具：cellar。&lt;/p&gt;&lt;p&gt;cellar 的用法很简单，首先初始化一个 cellar：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cellar init
Creating cellar &lt;span class=&quot;s2&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cellar/default.toml&amp;#34;&lt;/span&gt;
Password: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hidden&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
Your cellar &lt;span class=&quot;s2&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cellar/default.toml&amp;#34;&lt;/span&gt; is created! Feel free to use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cellar generate&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to create or display your application password.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会在你的根目录下创建一个 &lt;code&gt;~/.cellar/default.toml&lt;/code&gt;，记录随机生成的 salt 和加密后的 seed：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat ~/.cellar/default.toml
&lt;span class=&quot;nv&quot;&gt;salt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;C6TQW8joYp2XoIkvaCNfo0ihJ3OacxlTbx68_oW8pF4&amp;#34;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;encrypted_seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;bHn5Lu3yX0g68rRJ4lTOwAvx_uMDFaBnZ_WMkJSU8TM&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，你就可以用 &lt;code&gt;cellar generate&lt;/code&gt; 来派生应用程序的密码了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cellar generate --app-info &lt;span class=&quot;s2&quot;&gt;&amp;#34;user@gmail.com&amp;#34;&lt;/span&gt;
Password: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hidden&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
Password &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; user@gmail.com: FLugCDPDQ5NP_Nb0whUMwY2YD3wMWqoGcoywqqZ_JSU&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;整个代码才 220 行，花了我不到三个小时（时间主要都花在熟悉几个库的文档上）。大家感兴趣可以去我的 github repo 看看：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/tyrchen/cellar&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/tyrchen/cellar&lt;/a&gt;&lt;p&gt;目前的代码只是一个 MVP，虽然安全性没有问题，但可用性还很低，以后有功夫慢慢完善吧。如果想立即试用，可以 &lt;code&gt;cargo install&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo install cellar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，机器上没有 rust 工具链的，需要先安装一下 rust 工具链：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl --proto &lt;span class=&quot;s1&quot;&gt;&amp;#39;=https&amp;#39;&lt;/span&gt; --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前 cellar 只在 osx 和 centos 上测试过，其它平台应该也能工作，不过我不太确定。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;使用 Rust 的感受&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;大概五六月的时候我领着团队系统地学习了一下 rust 语言，后来就有一搭没一搭的写点随手就扔的一次性代码。看到 Signal 的这篇文章后，我按捺不住心头的激情 —— 终于可以用 rust 做一个似乎有点什么用的工具了！写下来总体感觉，rust 有可以媲美 ruby 的表现力，又有可以媲美 C++ 的性能（如果使用正确了），加上略逊于 haskell，但可以秒杀大部分主流语言的类型系统，使得用 rust 写代码是一种享受（除了编译速度慢）。这样一个小工具 200 来行代码（包括单元测试，生成式测试以及一个简单的 benchmark）就可以完成，估计用 python，elixir 和 nodejs 都不那么容易达到。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-12-23-99014061</guid>
<pubDate>Mon, 23 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Noise 框架：构建安全协议的蓝图</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-12-12-96944134.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/96944134&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-288c7bbc1a24ba23d3359dc4f560cda8_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;Noise Protocol Framework（以下简称 Noise）是一个用于构建安全协议的框架。与 TLS，IPSec 这样的有完整实现的协议不同，Noise 更多像是一个蓝图，它为那些想创建自己的安全协议的开发者提供了一套模板。就好像元编程之于编程，Noise 是协议的元协议（meta-protocol）。&lt;/p&gt;&lt;p&gt;诸君也许会问：既然有了 TLS，我们为何还需要创建自己的安全协议？&lt;/p&gt;&lt;p&gt;虽然 TLS 1.3 相对于前作，已经放弃了很多对老旧的算法的支持，整个协议栈也更加清爽更加「现代」，握手的过程只需要 1-RTT（甚至 0-RTT），这些观点都和 Noise 倡导的方向不谋而合，但使用 TLS 必然牵扯 PKI，需要服务器端证书和客户端证书（可选），而证书需要 CA（无论是公共的 CA 还是私有的 CA） 发放，整个协议栈还是非常复杂，且很难应用到非中心化的 p2p 网络中。&lt;/p&gt;&lt;p&gt;所以，当我们想开发一些直接基于 TCP 或者 UDP 的私有协议时，TLS 颇为笨重，并不是最好的选择，而自己开发的安全协议不一定靠谱，这时，Noise 就是一个安全灵活的选择。&lt;/p&gt;&lt;p&gt;我们在之前讲 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828356%26idx%3D1%26sn%3D0cfcf0de0a6a3c1fe9d1fc8d9e7df5f1%26chksm%3D8704ae18b073270e2e7ced09f29846ebc38affed8cb023410f995ee829ceedaddaa7b80cadbe%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WireGuard 的文章&lt;/a&gt; 中提到过安全信道建立的基石是 DH 算法，即协商安全信道的双方，持有一个私密的随机数，然后交换公开的随机数，通过同余算法两端独立计算出相同的密钥，从而达到不传输密钥就可以协商出相同密钥的方式。DH 算法的一个高效安全的变种是 ECDH：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;721&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;721&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果我们要开发自己的安全协议，DH/ECDH 是几乎无法避免的。协商出来密钥之后，我们需要考虑使用什么样的对称加密算法和哈希算法，如何验证双方的身份，如何保证前向安全性（现在使用的密钥泄露不会导致过去使用的密钥泄露），如何在收发两个方向上 rekey（密钥使用一段时间后重新生成新的密钥）等等。这些令人头疼的问题，Noise 协议都做了严格的规定。&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;鸟瞰 Noise 协议&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们先要明确一件事情：Noise 协议虽然其初衷是为网络协议提供安全信道，但它并没有规定使用什么样的通讯协议 — TCP / UDP 甚至是任何满足 read / write 接口的子系统，比如文件，管道（pipe），都可以使用 Noise 协议。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-114ca53c5960833a60321730e40f8685_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;201&quot; data-rawheight=&quot;287&quot; class=&quot;content_image&quot; width=&quot;201&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-114ca53c5960833a60321730e40f8685_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;201&quot; data-rawheight=&quot;287&quot; class=&quot;content_image lazy&quot; width=&quot;201&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-114ca53c5960833a60321730e40f8685_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Noise 协议原文除去附录，有 41 页之多，这里面有大量的概念和协议细节的描述，在深入细节之前，我们从用户的角度，或者说产品的角度，看看如何使用一个 Noise 协议做出来的系统。&lt;/p&gt;&lt;p&gt;首先是协议的握手。在握手阶段，发起者和应答者（initiator / responder，注意 Noise 没有使用 Client / Server，但我们可以简单认为 initiator 是 client，而 responder 是 server）通过交换信息对使用何种算法，密钥是什么达成一致。&lt;/p&gt;&lt;p&gt;握手阶段双方需要使用同样的协议变量 —— 和 TLS 不同的是，Noise 把协议变量设计为静态而非协商出来的。这是一个很大的简化，而从用户的角度，用户写出来的使用 Noise 的应用往往是自己的节点跟自己的节点通讯，因而无需协商。我们上次讲到的 WireGuard 使用的是这样的变量：Noise_IKpsk2_25519_ChaChaPoly_BLAKE2s。稍微解释一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I：发起者的固定公钥未加密就直接发给应答者&lt;/li&gt;&lt;li&gt;K：应答者的公钥发起者预先就知道&lt;/li&gt;&lt;li&gt;psk2：把预设的密码（Pre-Shared-Key ）放在第 2 个握手包之后&lt;/li&gt;&lt;li&gt;ChaChaPoly：对称加密算法&lt;/li&gt;&lt;li&gt;BLAKE2s：哈希算法&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;协议变量各个部分是这样规定的：Noise &lt;i&gt; &amp;lt;握手的模式&amp;gt; &lt;/i&gt; &amp;lt;公钥算法&amp;gt; &lt;i&gt; &amp;lt;对称加密算法&amp;gt; &lt;/i&gt; &amp;lt;哈希算法&amp;gt;。其中握手模式有很多种，适用于各种不同的场合。其中IK 模式的握手方式是这样的，只需要 1-RTT，我们随后细讲：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;477&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;477&quot; data-original=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;477&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;477&quot; data-original=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;握手的过程中，Noise 会生成一个 HandshakeState，它用来记录当前收到的对端传来的固定公钥和临时公钥，以及通过 ECDH 算法算出来的临时数据。当整个握手结束后，双方都有对等的信息，可以生成一致的密钥。于是发起者和应答者对于它们各自的接收端和发送端生成密钥对。&lt;/p&gt;&lt;p&gt;之后，Noise 允许用户将协议状态切换成传输模式（Transport Mode）。切换过程中，HandshakeState 转换成 CipherState，然后就可以用 encrypt / decrypt 来加密和解密应用的数据了。&lt;/p&gt;&lt;p&gt;理论上讲，Noise 的用户接口可以就这么几个：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;build&lt;/code&gt;：根据协议变量和固定私钥，初始化 HandshakeState。&lt;/li&gt;&lt;li&gt;&lt;code&gt;write(msg, buf)&lt;/code&gt;: 根据当前的状态，撰写协议报文或者把用户传入的 buffer 加密&lt;/li&gt;&lt;li&gt;&lt;code&gt;read(buf, msg)&lt;/code&gt;：根据当前的状态，读取用户传入的 buffer，处理握手状态机或者把用户传入的 buffer 解密&lt;/li&gt;&lt;li&gt;&lt;code&gt;into_transport_mode&lt;/code&gt;：将 HandshakeState 转为 CipherState&lt;/li&gt;&lt;li&gt;&lt;code&gt;rekey&lt;/code&gt;：在传输模式下，用户可以调用 rekey 来更新密钥&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对于用户的应用程序来说，这个接口无比简单，很容易和现有的系统串联起来。从产品的角度，简单不仅仅意味着美，还意味着很难用错。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Noise 协议握手细节&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Noise 协议的核心部分是握手协议，它总共支持 12 种不同的协商的模式。这些模式可以进一步和 PSK，非对称加密算法，对称加密算法，哈希算法排列组合出数百种不同的协议变量。当然，核心就是这 12 种。每个模式都由两个字母标识，第一个字母代表发起者，第二个字母代表应答者：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;585&quot; data-rawheight=&quot;718&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;585&quot; data-original=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;585&quot; data-rawheight=&quot;718&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;585&quot; data-original=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;其中：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;N：表示自己没有固定公私钥&lt;/li&gt;&lt;li&gt;K：表示自己的固定公钥对方预先知道（通过其他途径）&lt;/li&gt;&lt;li&gt;X：表示自己的固定公钥通过网络加密传输给对方（用于身份隐藏）&lt;/li&gt;&lt;li&gt;I：表示自己的固定公钥明文传输给对方（不考虑身份隐藏），I 状态只会出现在发起端&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有了这些概念，我们就好理解每种模式的含义 —— 比如：KX。接收者预先知道发起者的固定公钥，而接收者的固定公钥通过网络加密传输给发起者。因为接收者预先知道发起者的固定公钥，意味着发起者通过某个渠道将其固定公钥 s 在握手之前就发送给了接收者。这就是上图中 &lt;code&gt;...&lt;/code&gt; 前面的 &lt;code&gt;-&amp;gt; s&lt;/code&gt; 的意思。&lt;code&gt;...&lt;/code&gt; 之前的动作都代表预先发送，并不包含在握手之中。&lt;/p&gt;&lt;p&gt;我们接着看 &lt;code&gt;e, ee&lt;/code&gt; 这些字符代表什么。如果是单个字符，代表箭头方向接收到对方传来的公钥。&lt;code&gt;s&lt;/code&gt; 是固定公钥，&lt;code&gt;e&lt;/code&gt; 是临时公钥；如果是两个字符，则代表做 DH 运算 —— 第一个字符代表自己的公钥，第二代表对方的公钥。我们来解释一下 XK（为了便于区分，我们把对端的公钥前面加一个 r，表示 remote）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;- s&lt;/code&gt;：接收方的固定公钥预先提供给了发送方&lt;/li&gt;&lt;li&gt;&lt;code&gt;...&lt;/code&gt;：之前的消息是握手阶段就已经完成的消息，属于先验知识&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&amp;gt; e, es&lt;/code&gt;：发送方发送自己临时生成的公钥 e，然后用自己的临时公钥 e 和对方的固定公钥 s 做 DH(e, rs)。接收方收到 e 之后，也可以做 DH(re, s)。&lt;/li&gt;&lt;li&gt;&lt;code&gt;&amp;lt;- e, ee&lt;/code&gt;：接收方发送自己临时生成的公钥 e，然后做 DH(e, re)；发送方收到对方发来的 e 之后，做 DH(re, e)。&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&amp;gt; s, se&lt;/code&gt;：此刻双方已经可以生成一个临时的密钥，发送方用其加密发送自己的固定公钥，然后再做 DH(s, re)；接收方收到对方的 s 后，做 DH(rs, e)。&lt;/li&gt;&lt;li&gt;至此，协商结束&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;XK 是 Noise 里面路径最长的握手模式，其它模式都是 1-RTT。关于 XK（或者其他模式）的安全性分析，可以在 Noise Explorer 里探索，这里就不详述：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//noiseexplorer.com/patterns/XK/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Noise Explorer: XK&lt;/a&gt;&lt;p&gt;Noise 整个握手的过程每次 DH 并不是孤立的事件。从建立 HandshakeState 那一刻起，Noise 就维护一个 chaining key，每次运算的结果都会反映到 chaining key 之中。至于握手过程中 chaining key 是如何计算的，协议的状态机是如何维护的，可以参考 Noise Spec，我就不重复解释了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Noise 协议的应用&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;WireGuard 算是目前最成功的公开的应用。因为 Noise 协议主要应用在提升私有协议的安全能力上，所以很多应用并不为公众所知。根据 官方的 WhatsApp Encryption Overview 文档，Whatsapp 端到端的消息加密使用了 Noise 协议。比特币的闪电网络也使用了 Noise 协议。rust-libp2p 应用了 Noise 协议，这也意味着，polkadot，substrate 以及 facebook 的 libra 也（潜在）使用 Noise 协议。&lt;/p&gt;&lt;p&gt;此外，Noise 协议还可以用于加密文件 —— 只要我有你的公钥，我可以使用单向握手（Noise Spec 7.4）加密某个文件（附带握手时发送的消息），然后传输到某个不安全的位置（比如网盘，FTP，IPFS，甚至区块链中），该文件只有拥有私钥的人才能解密。这种应用很有意思，因为它具备非对称加密的安全性，同时又具备对称加密的加解密速度。&lt;/p&gt;&lt;p&gt;如果你对 noise 协议感兴趣，rust 下的 snow crate（程序君验证过），golang 下的 libdisco（未验证） 和 flynn/noise（已经两年未更新）看上去都不错。尤其是 rust 下的 snow，实现精巧，很容易和其它模块如底层的 tokio/async-std，以及上层的 yamux 结合使用。snow 在不少开源项目中，尤其是区块链和 IoT 的项目中得到广泛使用。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-12-12-96944134</guid>
<pubDate>Thu, 12 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>我们随手做的 git stash，究竟干了什么？</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-28-94216223.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/94216223&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7923a827cfed24e1951f026e1ec7f990_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; 是程序员的至宝。老板 biangbiang 甩来一个 case，说这个要下班之前 hot fix，咋办，stash，切到 release 对应的分支，缝缝补补；产品 kuangkuang 砸来一个需求更新，说这个简单，小哥哥帮帮我先做了，咋办，stash 切一个新的 feature 分支，撸袖子干。如果没有 &lt;code&gt;git stash&lt;/code&gt;，人生至少要灰暗一半。&lt;/p&gt;&lt;p&gt;git 执拗，如果你手头上的活没提交，它拒绝切换分支的请求 —— 这挺合情合理，因为切换分支（其实就是切换到历史上的某个 commit，如果 &lt;code&gt;git checkout -b&lt;/code&gt; 就建立一个 ref 指向当前 &lt;code&gt;HEAD&lt;/code&gt;）涉及到工作目录的更新，以及 git 索引的重建，如果当前的工作目录修改了，git 总不能将你辛辛苦苦的成果抹去吧。&lt;/p&gt;&lt;p&gt;所以 &lt;code&gt;git stash&lt;/code&gt; 显得格外亲切。它帮你把手头未完成还不好提交（提交必然牵扯 commit-hook，又是运行单元测试又是静态检查的）的活收拢到一个暂存区，等新任务完成了可以再 &lt;code&gt;git stash pop&lt;/code&gt; 恢复之前的工作。它的产品机理，像极了 CPU 的 exception，所以说程序员来来回回就那么几出戏，只不过在不同的场景下粉饰一下改头换面上演而已。&lt;/p&gt;&lt;p&gt;那么，&lt;code&gt;git stash&lt;/code&gt; 背后究竟干了什么？这其实是我在推进 gitrocks 需要探索的。来来来，动次打次，动次打次，敲起你的茶柚，抖起你的肩儿，我们一起 type（wow, you can really type~）。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;第一遍尝试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;建立一个新的 repo，&lt;code&gt;git add hello.txt&lt;/code&gt; (内容：&lt;code&gt;hello world!\n&lt;/code&gt;)，然后 &lt;code&gt;git commit -a -m &amp;#34;init commit&amp;#34;&lt;/code&gt;。之后再 &lt;code&gt;git ad goodbye.txt&lt;/code&gt; (内容：goodbye world!)。这些操作依次完成后，整个 objects / logs / refs 目录长这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;logs
          HEAD
          refs
              heads
                  master
    objects
          &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;
                a295f9eedc7635bce94d7d2f82328fa5032ed1
          &lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;
                b909b4a7cad81fe818b364959775188bfccf3d
          &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
                09101760644963fee389fc730acc4c437edc8f
          a0
                423896973644771497bdc03eb99d5281615b51
          info
          pack
    refs
        heads
              master
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们查看一下 init commit：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p 11a2
tree 6009101760644963fee389fc730acc4c437edc8f
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787652 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787652 -0800
gpgsig -----BEGIN PGP SIGNATURE-----

 iQB1BAAWCAAdFiEEDAfXiyARvxtLDYya/74NqNQekKwFAl3dWksACgkQ/74NqNQekKzqAgD9HCMmZOL6JRNZZd1jKoDXR8d65q0/aIgeOFQ5SHcdFzUBAMcQypPkhC9dSmV3PydpnddnIp03I6Fja1d2O+bF3nsP
 =VDnV
 -----END PGP SIGNATURE-----


init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着我们试着 &lt;code&gt;git stash&lt;/code&gt; 一下，神奇的事情发生了！&lt;code&gt;logs/refs&lt;/code&gt; 下多了 &lt;code&gt;stash&lt;/code&gt; 引用，而 &lt;code&gt;objects&lt;/code&gt; 下哐哐哐整出来三个新的对象：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;logs
          HEAD
          refs
              heads
                    master
              stash
    objects
          11
                a295f9eedc7635bce94d7d2f82328fa5032ed1
          55
                b909b4a7cad81fe818b364959775188bfccf3d
          60
                09101760644963fee389fc730acc4c437edc8f
          68
                0c79419d0067c90c1103329d9e1effef0fd216
          a0
                423896973644771497bdc03eb99d5281615b51
          de
                8fcd1649da1ab5a6694622508c0e95178ddd02
          e8
                c012220c2e1116ffa1de1264773bd92d31f36b
          info
          pack
    refs
        heads
              master
        stash
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看看这几个新的对象是什么东东。&lt;/p&gt;&lt;p&gt;&lt;code&gt;680c&lt;/code&gt; 是一棵包含了 &lt;code&gt;hello.txt&lt;/code&gt; 和 &lt;code&gt;goodbye.txt&lt;/code&gt; 的树。正常来说，只有当 commit 时，这棵树才会产生：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p 680c
100644 blob 55b909b4a7cad81fe818b364959775188bfccf3d    goodbye.txt
100644 blob a0423896973644771497bdc03eb99d5281615b51    hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;de8f&lt;/code&gt; 有点意思，它是一个 commit，commit 消息是 &lt;code&gt;WIP on master: 11a295f init commit&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p de8f
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
parent e8c012220c2e1116ffa1de1264773bd92d31f36b
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800

WIP on master: 11a295f init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;11a295f&lt;/code&gt; 就是上文 &lt;code&gt;git cat-file -p 11a2&lt;/code&gt; 那个 commit。可以看到，这个 commit 并没有我的 GPG 签名。&lt;/p&gt;&lt;p&gt;&lt;code&gt;e8c0&lt;/code&gt; 让有有点摸不着头脑，它也是一个 commit：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p e8c0
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800

index on master: 11a295f init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;仔细比较 &lt;code&gt;de8f&lt;/code&gt; 和 &lt;code&gt;e8c0&lt;/code&gt;，我们发现，除了 commit 消息不同之外，&lt;code&gt;de8f&lt;/code&gt; 还多了一个 &lt;code&gt;parent&lt;/code&gt; 指向 &lt;code&gt;e8c0&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;我们再看新增的 &lt;code&gt;.git/logs/refs/stash&lt;/code&gt; 里存了什么：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cat .git/logs/refs/stash
0000000000000000000000000000000000000000 de8fcd1649da1ab5a6694622508c0e95178ddd02 Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800    WIP on master: 11a295f init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及 &lt;code&gt;.git/refs/stash&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cat .git/refs/stash
de8fcd1649da1ab5a6694622508c0e95178ddd02&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后看看 master 指向哪里：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cat .git/HEAD
ref: refs/heads/master
$ cat .git/refs/heads/master
11a295f9eedc7635bce94d7d2f82328fa5032ed1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这下子整个脉络就清晰了。各个对象之间的关系是：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;598&quot; data-rawheight=&quot;737&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;598&quot; data-original=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;598&quot; data-rawheight=&quot;737&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;598&quot; data-original=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们再看看 &lt;code&gt;git stash pop&lt;/code&gt; 会发生什么：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;logs
          HEAD
          refs
              heads
                  master
    objects
      jec 11
                a295f9eedc7635bce94d7d2f82328fa5032ed1
          55
                b909b4a7cad81fe818b364959775188bfccf3d
          60
                09101760644963fee389fc730acc4c437edc8f
          68
                0c79419d0067c90c1103329d9e1effef0fd216
          a0
                423896973644771497bdc03eb99d5281615b51
          de
                8fcd1649da1ab5a6694622508c0e95178ddd02
          e8
                c012220c2e1116ffa1de1264773bd92d31f36b
          info
          pack
    refs
    ref heads
          ads master
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;.git/logs/refs/stash&lt;/code&gt; 和 &lt;code&gt;.git/refs/stash&lt;/code&gt;没了。其它没有变化。&lt;/p&gt;&lt;p&gt;作为一个较真的程序员，我们继续 &lt;code&gt;git stash&lt;/code&gt;，照理来说，新的 stash 应该只产生新的 &lt;code&gt;.git/logs/refs/stash&lt;/code&gt; 和 &lt;code&gt;.git/refs/stash&lt;/code&gt; 文件，不会再产生新的 commit 了，然而，git 依旧固执地同样产生了两个新的 commit：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p 9a06
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
parent 7bb55ed97e4d922a2e2ae04bf2f2f7e04807f5de
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800

WIP on master: 11a295f init commit

$ git cat-file -p 7bb5
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800

index on master: 11a295f init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这次我们驾轻就熟：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cat .git/logs/refs/stash
0000000000000000000000000000000000000000 9a063baa8146a819548b0a59e27180ac6951ba3c Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800    WIP on master: 11a295f init commit

$ cat .git/refs/stash
9a063baa8146a819548b0a59e27180ac6951ba3c

$ cat .git/refs/heads/master
11a295f9eedc7635bce94d7d2f82328fa5032ed1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了这些信息，我们再次梳理一下现在 DAG 的样子：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;638&quot; data-rawheight=&quot;759&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;638&quot; data-original=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;638&quot; data-rawheight=&quot;759&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;638&quot; data-original=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们把 &lt;code&gt;goodbye.txt&lt;/code&gt; &lt;code&gt;stash pop&lt;/code&gt; 出来，然后 &lt;code&gt;git commit -m &amp;#34;second commit&amp;#34;&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p b139
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574789596 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574789596 -0800
gpgsig -----BEGIN PGP SIGNATURE-----

 iQB1BAAWCAAdFiEEDAfXiyARvxtLDYya/74NqNQekKwFAl3dYeMACgkQ/74NqNQekKzuEQEAnpcMk/EBPhARtgKU+EplxhMUuJJOaFdka9bk2c22nL8BALaFzvsUlUdSwvZjFRrjW623Z0CktaIumyHpFefcGbME
 =vT0q
 -----END PGP SIGNATURE-----


second commit

$ cat .git/refs/heads/master
b1390fc37a960f97e9e637c3f82315da94120167&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，新生成了 &lt;code&gt;b139&lt;/code&gt; 这个 commit。master 指向了它。&lt;/p&gt;&lt;p&gt;最后，我们来看看如今的 DAG：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;673&quot; data-rawheight=&quot;751&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;673&quot; data-original=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;673&quot; data-rawheight=&quot;751&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;673&quot; data-original=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;为什么 &lt;code&gt;git stash&lt;/code&gt; 会生成两个 commit 呢？我们继续探索。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;第二遍尝试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;由于之前的 repo 对象结构已经足够复杂，我们换个目录生成一个新的 git 仓库。然后我们还是重复刚才的动作：添加 hello.txt，commit，然后添加 goodbye.txt。这时数据库长这个样子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;logs
          HEAD
          refs
              heads
                  master
    objects
          55
                b909b4a7cad81fe818b364959775188bfccf3d
          60
                09101760644963fee389fc730acc4c437edc8f
          a0
                423896973644771497bdc03eb99d5281615b51
          c6
                2f16377b077275eace0239f24504becc359763
          info
          pack
    refs
        heads
              master
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们修改一下 &lt;code&gt;hello.txt&lt;/code&gt;，使其变成：&lt;code&gt;hello tyr!&lt;/code&gt;。&lt;code&gt;git status&lt;/code&gt; 会告诉我们一个文件在 staging 一个没有：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git status
On branch master
Changes to be committed:
  (use &amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34; to unstage)
    new file:   goodbye.txt

Changes not staged for commit:
  (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed)
  (use &amp;#34;git restore &amp;lt;file&amp;gt;...&amp;#34; to discard changes in working directory)
    modified:   hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们深吸一口气，&lt;code&gt;git stash&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;logs
          HEAD
          refs
              heads
                    master
              stash
    objects
          27
                8efbd09a21dbd2b443bd7a879013abfee434ca
          55
                b909b4a7cad81fe818b364959775188bfccf3d
          60
                09101760644963fee389fc730acc4c437edc8f
          62
                d7bceb43b713c838ce04075fa23fb263aa01f5
          68
                0c79419d0067c90c1103329d9e1effef0fd216
          a0
                423896973644771497bdc03eb99d5281615b51
          a4
                f7a95ef0b8dcbb8d89af09a488f7cb3166fadc
          c3
                efe55f18835756842af5f53a64d1d78dc5ed6c
          c6
                2f16377b077275eace0239f24504becc359763
          info
          pack
    refs
        heads
              master
        stash
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多了五个对象！我们探索一下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p 278e
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent c62f16377b077275eace0239f24504becc359763
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800

index on master: c62f163 init commit

$ git cat-file -p 62d7
100644 blob 55b909b4a7cad81fe818b364959775188bfccf3d    goodbye.txt
100644 blob c3efe55f18835756842af5f53a64d1d78dc5ed6c    hello.txt

$ git cat-file -p 680c
100644 blob 55b909b4a7cad81fe818b364959775188bfccf3d    goodbye.txt
100644 blob a0423896973644771497bdc03eb99d5281615b51    hello.txt

$ git cat-file -p c3ef
hello tyr!

$ git cat-file -p a4f7
tree 62d7bceb43b713c838ce04075fa23fb263aa01f5
parent c62f16377b077275eace0239f24504becc359763
parent 278efbd09a21dbd2b443bd7a879013abfee434ca
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800

WIP on master: c62f163 init commit

$ cat .git/refs/stash
a4f7a95ef0b8dcbb8d89af09a488f7cb3166fadc

$ cat .git/logs/refs/stash
0000000000000000000000000000000000000000 a4f7a95ef0b8dcbb8d89af09a488f7cb3166fadc Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800    WIP on master: c62f163 init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这下清楚了，commit &lt;code&gt;a4f7&lt;/code&gt; 使用了 &lt;code&gt;62d7&lt;/code&gt; 这棵树，而 commit &lt;code&gt;278e&lt;/code&gt; 使用了 &lt;code&gt;680c&lt;/code&gt; 这棵树。&lt;code&gt;62d7&lt;/code&gt; 里面包含的是更改过的 hello.txt，stash 引用指向了 &lt;code&gt;a4f7&lt;/code&gt;。我们看图更直观：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;587&quot; data-rawheight=&quot;693&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;587&quot; data-original=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;587&quot; data-rawheight=&quot;693&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;587&quot; data-original=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;也就是说，当我们做 &lt;code&gt;git stash&lt;/code&gt; 时，stash 了两类数据：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;staging 区域内的数据（goodbye.txt）&lt;/li&gt;&lt;li&gt;working 区域内的数据（修改了的 hello.txt）&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;为什么这么设计？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;开始我对此非常不解，这种还未完成的工作，就这样了咣咣塞到了不可修改的对象数据库中，不浪费资源么？为什么不直接放在一个 stash 目录中了事呢？在做 gitrocks 里，我探索过一些「聪明」的方案，比如放在一个目录中，扔在 sqlite 里等等，结果越深入，越发现 git 是对的。git 的用户可能像你我一样一天在若干个分支中天马行空恣意妄为，如果所到之处都 &lt;code&gt;git stash&lt;/code&gt; 一下到此一游，那么，势必要记录 parent commit，要为 stash 生成一颗树来保存目录结构，要把修改的文件存入某处 —— 而所有这一切，其实 commit 的代码已经很好地实现了，用一套代码解决两个问题，简单中透着美。此外，生成的 commit 虽然最后没有用，但中间的树和子树很大机会可以被复用，那么，之前的运算并没有白费功夫。最后，git 还提供 gc，把 &lt;code&gt;git stash pop&lt;/code&gt; 之后「绕树三匝，无枝可依」的孤儿们回收掉，节省空间。&lt;/p&gt;&lt;p&gt;花了将近两个小时探索，我平静地接受了这样一个事实：你大爷还是你大爷。git 设计上的精巧还需要认真琢磨。子曾经曰过：「吾有知乎哉？无知也」。连夫子都这么谦恭，我还得努力啊。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;也许你对我上一篇文章会感兴趣：&lt;/p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/93950349&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-a39ae0f396fbeb1984575016809ed02d_180x120.jpg&quot; data-image-width=&quot;1280&quot; data-image-height=&quot;960&quot; class=&quot;internal&quot;&gt;陈天：10 分钟重新认识 GIT&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-28-94216223</guid>
<pubDate>Thu, 28 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>10 分钟重新认识 GIT</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-27-93950349.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/93950349&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a39ae0f396fbeb1984575016809ed02d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;最近对 git 的底层实现异常迷恋，周末抽空用 rust 和 rocksdb 实现了一个乞丐版的 object store - 可以存储 blob，tree，commit 三种对象。之所以用 rocksdb，是因为我不太喜欢文件系统里的那些细碎的 git 对象，我也没太研究 packfile 是如何进行差分编码的，rocksdb 恰好解决了这两个不爽。本来想写篇文章讲讲我在实现过程中踩过的坑，但考虑可能大部分读者虽然每天都在用 git，却并不真正了解 git，所以我觉得有必要先通过一些例子回顾一下 git 的思想和主要的对象类型。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Git 的起源和基础知识&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;git 是十多年前 Linus 不爽现有的版本控制软件，花了大概 10 天功夫做出来的一个工具（初代）— 大佬就是这么牛逼，不爽就撸袖子干，哪儿那么多废话。相比于 cvs/svn 这些「中心化」的，以 diff 为基础存储更新的传统版本控制软件不同的是，git 认为每个文件一旦写入对象数据库中都是不可更改的（immutable），任何微小的修改，都会在数据库中形成一个新的对象。对象的 id 就是其 sha1 哈希。有了这个基础，文件对象（blob）可以被组织成树（更确切地说是默克尔树），一次 提交（commit）就是根据更改的文件的信息生成新的树的过程，新树和老树共享相同的子树，只有变化的部分才会分叉。在漫长的操作之后，对象数据库中有无数棵树，这些树构成了一个默克尔图（merkle DAG）。通过使用引用（ref），比如 HEAD, heads/master，tags/v0.1，git 可以很方便地追踪用户关心的每一棵树的确切状态。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;533&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;533&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;500&quot; data-original=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;OK，文字部分就这些，我们稍稍动手来了解 git 的一些实现细节。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;探索 git 的对象数据库&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;首先我们在 &lt;code&gt;/tmp/test&lt;/code&gt; 下 &lt;code&gt;git init&lt;/code&gt; 生成一个新的仓库。git 会自动创建如下目录：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.git/
├── HEAD
├── config
├── description
├── hooks
├── info
│   └── exclude
├── objects
│   ├── info
│   └── pack
└── refs
    ├── heads
    └── tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对当前的 terminal 做分屏处理，然后在右半边的窗口运行：&lt;code&gt;watch -n .5 tree .git&lt;/code&gt; 监控 .git 目录。当我们 &lt;code&gt;git add README.md&lt;/code&gt; 后（README.md 是一个空文件）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.git
    HEAD
    config
    description
    hooks
    index
    info
          exclude
    objects
          e6
                9de29bb2d1d6434b8b29ae775ad8c2e48c5391
          info
          pack
    refs
        heads
        tags

9 directories, 17 files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到，在 git 的对象数据库中，创建了一个新的文件。这个文件的内容是 README.md 的内容，文件名是其 sha1 后 base16 编码的字符串。注意这里用了两层目录结构，这样在有很多对象的时候不至于目录内容太多而过载。这样的设计模式在很多系统中都可以见到，比如 nginx cache。&lt;/p&gt;&lt;p&gt;通过 &lt;code&gt;git show -p e69d&lt;/code&gt; 可以看到这是一个空的文件。&lt;/p&gt;&lt;p&gt;git 内部主要有四种对象：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;blob：存储实际的文件&lt;/li&gt;&lt;li&gt;tree：存储文件的目录结构&lt;/li&gt;&lt;li&gt;commit：存储提交信息（主要是当前的树根和上一棵树的树根）&lt;/li&gt;&lt;li&gt;tag：存储版本信息，相当于对对象库中的某个 commit 显式标记了一下&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;git 的对象数据库会以相同的方式存储所有这些对象类型，单单通过一个 base16 的对象 id，你无法知道其背后是个什么数据。&lt;/p&gt;&lt;p&gt;我们来提交现在的改动。当我们做 &lt;code&gt;git commit -m &amp;#39;create empty readme&amp;#39;&lt;/code&gt; 后：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.git
    COMMIT_EDITMSG
    HEAD
    config
    description
    hooks
    index
    info
          exclude
    logs
          HEAD
          refs
              heads
                  master
    objects
          66
                d70e87e9fd27f086ebf88c9a725dcd3658d27d
          e6
                9de29bb2d1d6434b8b29ae775ad8c2e48c5391
          f9
                3e3a1a1525fb5b91020da86e44810c87a2d7bc
          info
          pack
    refs
        heads
              master
        tags

14 directories, 23 files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对象数据库中多了两个新的对象。我们看看他们都是什么。&lt;/p&gt;&lt;p&gt;f93e 是一个 tree object：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git show --pretty=raw f93e
tree f93e

README.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们也可以看关于 tree 更详细的信息：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git ls-tree f93e
100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    README.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件的文件名并没有存在 blob 对象中，而是存储在 tree 里。这样有两个好处：1) 相同内容的文件，即便拷贝多份，依然只存储一份数据 — 这多见于二进制文件，比如图片；2) 更改文件名只是生成一个新的 tree，并不需要生成新的 blb。&lt;/p&gt;&lt;p&gt;由此可以看出 git 关心的是项目的 snapshot，并不关心单个文件。&lt;/p&gt;&lt;p&gt;如果你严格按照我之前的步骤操作，至此你的文件 blob 和 tree 两个对象的 sha1 哈希应该和我的一样。这是 git 的伟大之处：任何人，在任何硬件环境下，相同的内容都会生成相同的对象（区块链在此之上加入了计算）。&lt;/p&gt;&lt;p&gt;在 commit 这里，我们的数据会产生分叉。在我的机器上，commit 是 &lt;code&gt;66d7&lt;/code&gt;，你的可能是另外一个哈希值。这是因为我设置的作者名，邮件，以及我的 PGP key 肯定都和你的不同。因而我的 PGP 签名和你的不同，哈希自然不同。&lt;/p&gt;&lt;p&gt;66d7 是一个 commit object:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git show --pretty=raw 66d7
commit 66d70e87e9fd27f086ebf88c9a725dcd3658d27d
tree f93e3a1a1525fb5b91020da86e44810c87a2d7bc
author Tyr Chen &amp;lt;xxxx@gmail.com&amp;gt; 1573839165 -0800
committer Tyr Chen &amp;lt;xxxx@gmail.com&amp;gt; 1573839165 -0800
gpgsig -----BEGIN PGP SIGNATURE-----

 iQB1BAAWCAAdFiEEDAfXiyARvxtLDYya/74NqNQekKwFAl3O4T0ACgkQ/74NqNQekKxdmgD+Nw+1JNrV148xIkqfrLLGrFNAJdESu1h+StYVCGAbtLgA/R56Za+ABgLAM/IRGxYXRlZ0MwTmlfCwsznYCPdKyC8E
 =6QP9
 -----END PGP SIGNATURE-----


    create empty readme

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..e69de29&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们把这个文件删除，并 &lt;code&gt;git commit -a -m &amp;#34;deleted README.md&amp;#34;&lt;/code&gt; 会发生什么事情呢？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.git
    COMMIT_EDITMSG
    HEAD
    config
    description
    hooks
    index
    info
          exclude
    logs
          HEAD
          refs
              heads
                  master
    objects
          4b
                825dc642cb6eb9a060e54bf8d69288fbee4904
          66
                d70e87e9fd27f086ebf88c9a725dcd3658d27d
          e6
                9de29bb2d1d6434b8b29ae775ad8c2e48c5391
          f9
                3e3a1a1525fb5b91020da86e44810c87a2d7bc
          fd
                03a139f6b861be4d54247888213a723c24eb99
          info
          pack
    refs
        heads
              master
        tags

16 directories, 25 files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到，新生成了两个文件，猜测一下，一个是 commit 对象，一个是 tree 对象：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git show --pretty=raw fd03
commit fd03a139f6b861be4d54247888213a723c24eb99
tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
parent 66d70e87e9fd27f086ebf88c9a725dcd3658d27d
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1573840228 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1573840228 -0800
gpgsig -----BEGIN PGP SIGNATURE-----

 iQB1BAAWCAAdFiEEDAfXiyARvxtLDYya/74NqNQekKwFAl3O5WQACgkQ/74NqNQekKznZwEA+tFOIwzcEAt+j8FD0Sv3722Gfi21ZT56feOHktD1K9gA/3GNilWvdloA4t4mS1kX8HMc1Kr5zvA0iF9F54t3FV4B
 =NGh7
 -----END PGP SIGNATURE-----


    deleted README.md

diff --git a/README.md b/README.md
deleted file mode 100644
index e69de29..0000000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git show --pretty=raw 4b82
tree 4b82&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，在 &lt;code&gt;4b82&lt;/code&gt; 这个 tree 里，没有任何文件了。&lt;/p&gt;&lt;p&gt;希望这样一个简单的介绍，你对 git 有了更深的了解。这周晚点时间，我们介绍用 rust 实现一个乞丐版 git 踩过的坑。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-27-93950349</guid>
<pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>长日无痕(五): 天叔奇谈</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-14-91761475.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/91761475&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-eaf108ca7f9ea1ecf70f5e62df55047b_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;（一）&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在孩子们的成长过程中，我大部分时候都是个甩手掌柜的角色。之前小宝的课业，无论钢琴滑冰舞蹈绘画，还是读书写作算术科学，都是妈妈在操心，更别说小贝。我白天忙工作，早上出门时孩子们还在酣睡，晚上回到家时已是夜幕降临，一家人等着我晚餐。饭前我例行公事似的抱抱孩子们，玩耍几分钟；饭后我就把自己关在书房，忙自己的工作，看自己的书，写自己的文章。孩儿们偶尔冲进来寻求我的关注，大多被我三言两语打发走。等孩子要休息了，我在床边陪着讲个睡前故事，或者一起算道数学题，反而成了一天之中陪孩子最长的时光。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;老婆体谅我忙不完的工作和闲事，恳求我一天能抽出半个小时陪孩子读书；我应承着，煞有介事做了几天后便故态复萌。后来她放宽了最低标准，要求我每周至少抽一天晚上花上半小时到一小时教小宝学 scratch，结果这也成了镜中月水中花。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;转眼间小宝就要 7 岁，而小贝也 3 岁。老婆周旋于两个孩子之间，已渐渐力不从心。小宝还没形成自律的习惯，离开妈妈的陪伴，钢琴，数学，阅读等一塌糊涂；小贝心底的小怪兽开始觉醒，时刻都想争抢妈妈的注意力。两个孩子各不相让，也没道理可讲，得势的一方洋洋自得，失势的那位便打滚撒泼嚎啕大哭。由于小贝是老二，打自娘胎出来心眼就比小宝多，也比小宝懂得察言观色，讨父母欢心，所以在「抢夺妈妈关注」这块，失势的多是小宝。小宝偏又是赤子之心，本色自然，既不肯服软，又不愿意说好话哄人，生气时怼天怼地，常常惹得妈妈气上加气。老婆被折腾得心力交瘁，常跟我诉苦，我嘴上表示同情，却还是没有任何行动。后来有一日，母女俩因为练琴的事情几近反目，互相之间说了很多气头上的，本不该说出口的狠话。晚上睡觉的时候老婆哭着对我说：你看着办吧，再这样下去，等孩子青春期，我们母女的关系恐怕就要彻底破裂了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;我心里咯噔一下。我想起了有次小宝央求我陪她玩不成，摔门而出留下的那句：「工作，就知道工作！你是一个不管孩子的老爹！」&lt;/p&gt;&lt;p&gt;&lt;br/&gt;第二天晚上，一年级新学期的家长会，我破天荒第一次参加。说来惭愧，小宝在 Sunny Hills 上了一年学，我却连之前的老师 Miss Wolfe 长啥样都不知道。美国的公校是一年一届老师，新学年的老师是 Mrs. Dunn。家长会上我虽然带着耳朵听，心头挥之不去的是「在孩子的成长中，怎样尽一个爸爸的责任，来减轻妈妈的压力？」。在反思的过程中，我意识到我有两个问题：1) 我空有一身的知识，愿意花时间通过写文章，做讲座把知识和技能传递给别人，却吝于培养自己的孩子。2) 我自诩有很强的学习能力，能够掌握任何我想掌握的知识，却懒得在如何教育孩子身上下功夫，学相关的知识。思来想去，决定先从解决问题 1) 入手，投入时间来培养孩子；之后，再处理 2)，不断学习来让自己 &lt;b&gt;有资格&lt;/b&gt; 教育孩子。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;于是我在教室 —— 小宝平日里白天上课的教室里，用她平日里学习用的纸和笔，庄重地写下了如下计划：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;每晚 8 点 30 - 9 点 10 分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;周一：历史故事（和小宝一起探索二十四史中的有趣故事，加深小宝对中华文化认同，以及她对汉字和语文的喜爱）&lt;/li&gt;&lt;li&gt;周二：数学（我们一起探索数字的奥妙，培养她的数感）&lt;/li&gt;&lt;li&gt;周三：Scratch（小宝对编程非常喜爱，我们一起做些有趣的开发，来培养她的逻辑能力，以及把复杂问题拆分的能力）&lt;/li&gt;&lt;li&gt;周四：探索（平日里小宝总问我很多为什么，这些「为什么」我解答得非常肤浅，通过「探索」环节，来更多激发她的好奇心和寻找深度答案的能力）&lt;/li&gt;&lt;li&gt;周五：纪录片（深度讲解一部纪录片，让小宝开拓视野，触及那些「未知的未知」）&lt;/li&gt;&lt;li&gt;周六：几何（其实还是数学，只不过我不想小宝觉得怎么一周会两次数学，几何是从另一个维度解释数学的有力武器）&lt;/li&gt;&lt;li&gt;周日：掷色子或者小宝来选择额外学习哪个内容&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;从长期可行性来说，这个计划能执行到什么程度，我自己心里没底 —— 我自己是否能坚持另说，小宝会不会过了一开始的兴奋期，觉得「一天净在学习都没有玩的时间」而抵触？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;从内容可行性来说，我更是没底。我知道我肚子里的货 —— 周一，周三和周五是最轻松的，我只需要简单准备即可对付；周二和周六，恐怕一段时间之后我得恶补数学 —— 尤其是怎么把枯燥的数学能生动地教给一个不满七岁的孩子；周四，就像薛定谔的猫，不到小宝揭秘她的问题前，我是无法知道这将会是场什么样的挑战。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;家长会后，我把我的计划告诉了老婆。她很开心，因为这样能够让她每天轻松近一个小时，只需要面对一个熊孩子。但她也有担忧，怕我方法不当，拔苗助长，反而把孩子的学习兴趣毁了。我说我们先试试，大纲内的知识，还是你继续教；我就负责开拓她的视野，培养她对探索知识的兴趣。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;（二）&lt;/p&gt;&lt;p&gt;&lt;br/&gt;借着家长会的东风，次日，也就是 9 月 12 日，我和小宝开始了第一次尝试。那一天是周四，所以我们的话题是「探索」。小宝抛出的问题是：世界上现在有多少人？哪些国家人口比较多？人口会减少么？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;为了让课堂的效果足够好，我花了些时间备课，找到了一些可以和她一起观看的视频。我是一个笃信 build-measure-learn 的人，一件事如果我要认真去做，我便会详细记录（尤其是自己的感知），以便于不断提升，于是我开了一个新的公众号「天叔奇谈」，把自己备课和上课的碎碎念放了上去。在授课和记录的迭代中，我开始不停思考一件事情：怎么样让孩子能够迷上每天晚上的课程？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;使人「着迷」既容易又困难。游戏很容易让人沉迷，所以还需要所谓的「防沉迷系统」来解救沉溺于其中的人；但学习新的事物，如果方法不对，不但不能让人着迷，还可能会引发排斥效应。究其原因，是游戏通过视觉听觉触觉等多种感官建立起吸引力，激发我们的好奇心。有了好奇心，我们愿意尝试和体验，而一旦尝试，很快就能得到反馈，我们就会依据反馈不断调整策略（这个策略往往是简单易行的，或者可以通过单纯的训练变得更好的），从而得到更好的反馈（过关，更高的分数，回血，加命，升级，榜上有名），达到身心的满足感，同时自己（游戏中）的能力得到提升，解锁更多的未知世界。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;如果我们把这个模式抽取出来，就是：&lt;b&gt;建立吸引力 - 诱发好奇心 - 促进尝试 - 立即反馈 - 促进进一步尝试 - 提升成就感和满足感 - 赋能&lt;/b&gt;。我打算把这个模式应用在每日的课程中。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;在 9 月 14 日的课程中，这个建立吸引力诱发好奇心的策略就得到了充分的验证。这天是几何课，我跟小宝探索 π。我从宝妈那里觅得一个线团，然后教小宝用圆规画了一个半径 10cm 的圆，然后我们用线一点点量出圆的周长，最后算出来不那么精确的周长和直径之比：π=3.135。这个简单的动手过程大大激发了小宝对 π 的兴趣，以至后来她自己问 Siri π 的值，记录下来，然后一点点把它背了下来 —— 这可是小数点后 50 位！&lt;/p&gt;&lt;p&gt;&lt;br/&gt;随着这个模式的不断推进和演化，我们的「课堂」越来越生动活泼。我们把她的儿童自行车倒置，观看脚蹬转动时链条的传动；我们趴在车屁股后面观察排气口，打开钢琴观察琴弦的振动；我们用围棋子儿来进行加减乘除，学习进制系统；我们用「运动」app 来学习统计和各种图表。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;（三）&lt;/p&gt;&lt;p&gt;&lt;br/&gt;在这里所有的课程中，我最在意的是数学。数学是科学之母，我们生活之中，大到东风快递，小到运动 app，都和数学有关。孩子的认知能力，抽象能力的提升来自于对数学的深刻掌握，而国内或者新加坡的数学教育偏重于对知识点的掌握和训练，略为枯燥，美国的 common core 虽然注重不同的方法和思路，还是摆脱不了枯燥，这让孩子学习的时候往往耽于枯燥的重复，容易对数学敬而远之。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;但数学本身不该枯燥。它美丽灵动，就像曹植梦中的洛神 —— 翩若惊鸿，婉若游龙。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。无论是美妙的黄金分割率，奇幻的杨辉三角形，鬼斧神工般的素数，还是优雅的几何，严谨的逻辑，烧脑的代数，让世事洞明的微积分，抑或那一个个凝结着先贤们智慧结晶却让人望而生畏的公式，定理，都让人如饮醇醪，心旷神怡。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;然而我们的数学教材，无论中美，都几乎是公式手册，而老师的作用是将这些公式固化在孩子们的脑袋里，以便让孩子在应该的年龄掌握大纲里要求的内容。怎样掌握？日复一日的练习 —— 就像健身房里的枯燥的肌肉训练。然而它剥夺了孩子们户外登山的乐趣 —— 那种逢山铺路遇水架桥，在实战中解决问题的乐趣 —— 这是学习数学本该享有的乐趣，也是高斯，欧拉，笛卡尔，莱布尼茨，拉马努金们走过的路。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;所以我们需要的是大量的探索性的学习 —— 把教科书里用公式构筑的精美殿堂敲碎，引导孩子们重新搭上脚手架，顺着先贤们的思路一点点还原他们探索过的路径，甚至走出他们没有走过的路，这样的学习才更有意义，学到的才是真正的解决问题的能力，而非背公式，套题型的能力。当然，我不否认训练的重要性 —— 学而时习之 —— 在探索的基础上辅以适量的训练加以巩固。但我们不能舍本逐末。动物园里的大猩猩经过训练，也能掌握工具的使用，而我们与它们的不同之处在于：我们通过探索和思考，能够发现规律，总结规律。&lt;br/&gt;高斯说：我们需要的是想法，不是符号（What we need are notions，not notations）。我非常赞同。任何一种心智的成长，都来源于自已解决问题，而不是被训练按照既定的方式和步骤去解决。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;无奈的是，学校的老师没有义务，更没有动力去因材施教，引导孩子一点点探索出数学家们走过的路，解决他们解决过的问题。对于一个现代社会而言，基础教育必须是普惠的。因而师范学院流水线上产出的数学老师，其工作的动机首先是保证升学率，让更多的孩子能够在适当的年龄达到适当的认知水平，而非努力培养孩子们的解决问题的能力。这是其一。此外，无论在什么国度，社会都是金字塔的结构，越往上，通道越狭窄，为了避免拥挤，自然需要一个过滤器 —— 而考试成绩，就是规模化选拔的最容易实现也最相对公平的入场券。所以，当数学被列入考试科目的那一刻起，大纲选定的知识体系必定是最容易出题的内容，老师所教的内容必定也朝着这个方向强化。这两者决定了面向大纲的内容，以及面向考试的训练是学校教育的主流。于是，数学的历史不再重要，数学家的生平没人关心，他们是怎么一步步构建出如今这华美的大厦也无人问津，就连数学本身的美也同样被扔在了一旁。因为要传递「美」，需要有知识的沉淀，需要有辨析的能力，需要欣赏美的眼光，而唯独不需要的是大纲。对于数学老师来说，除非真心爱好，他们大概不太会读 Richard Courant 的通俗著作《什么是数学：对思想和方法的基本研究》，更不可能费劲去挑战 Serge Lang 的《代数》了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;这便是我想花时间解决的问题 —— 至少对于我的孩子们而言。我并不是想挑战这种教育体制 —— 相反我认为其足够公平。我的孩子也必然需要通过「千军万马过独木桥」的厮杀。我想做的是去弥补学校教育无法顾及的部分，像至圣先师孔夫子那样，真正做到「因材施教」，就我的两个孩子来说，这是个挑战，但不是个无法企及的目标。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;所以我跟小宝的数学课的基调就是把数学当成一门艺术去探索，让她深度参与其中，提出问题，探索解决问题的方向，尝试，失败，再尝试。我让她感受斐波那契数列不仅仅是一堆数字和几个公式，它还有很多奇妙的属性；我让她感受连分数的美，以及连分数和数列之间微妙的联系；我们用用一支圆珠笔走过白板上的多边形，通过圆珠笔翻转的次数得出内角和公式；我们在地球仪上「走」出一个三角形，探索三角形内角和是 180° 这个命题的限定条件；我们一起背诵 π，一起玩丢番图方程，一起看跑步之后的统计图表，探索各种统计方法的意义；我们循着 π 认识了祖冲之和割圆术，在勾股定理和根号二的有理数危机中了解了毕达哥拉斯和他的学派，通过几何的公理体系认识了欧几里得，因为 0 和 1 的逻辑运算了解了布尔和他愚蠢的妻子。小学初中高中那些泾渭分明的数学内容变得界限模糊起来，数学也不再仅仅是书上那些琳琅满目的公式和符号。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;在这个过程中，我渐渐发现，按照年龄划分数学学习的内容可能是不明智的，各种数学方法之间是连续的，不是断代的 —— 我们没法谈算术的时候就完全不碰数论，讲几何的时候不涉及代数，讲初等代数的时候刨除排列组合，讲任何话题的时候避开微积分。数学课堂上的小心翼翼是不必要的，代数放在初中教授，微积分放在高中和大学学习，并不意味着代数和微积分的思想就不能出现在一个小孩子的头脑里。&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;贤者时刻&lt;/h2&gt;&lt;blockquote&gt;It is not worth an intelligent man’s time to be in the majority. By definition, there are already enough people to do that.&lt;br/&gt;&lt;br/&gt;G. H. Hardy&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;有天周六，小宝上完溜冰课，妈妈带她来我公司休息，准备参加半小时之后的在我公司附近的舞蹈课。在我办公室的白板上，小宝画了一个数轴：&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;她说：爸爸，你看，这是一个数轴。√22 在这里，π 在这里，我要发明一个数叫 Lindsey，我告诉你它的值：6.5657，你要把这个数记好，因为它跟 π 一样重要。&lt;br/&gt;&lt;br/&gt;祝你即将到来的 7 岁生日快乐，宝贝！&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;br/&gt;如果大家对我的天叔奇谈感兴趣，可以扫码关注：&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0ac10c0f94644ad2ad8d2a04b0befcf3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;344&quot; data-rawheight=&quot;344&quot; class=&quot;content_image&quot; width=&quot;344&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0ac10c0f94644ad2ad8d2a04b0befcf3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;344&quot; data-rawheight=&quot;344&quot; class=&quot;content_image lazy&quot; width=&quot;344&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0ac10c0f94644ad2ad8d2a04b0befcf3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;更早的《长日无痕》系列文章：&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828233%26idx%3D1%26sn%3Da31666f3a1563302b4a002ef7ccdb65d%26chksm%3D8704a995b073208323e17330529c2e6073ff26c49885cb469a259c81d69f97db4f8c2470ce69%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长日无痕（四）&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827437%26idx%3D1%26sn%3D816d53775282cb31d65c7f3947737110%26chksm%3D8704aa71b07323678f3858aa2e35a3594f44521e606ccd8e4efa705df7fc67efe6548769d008%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长日无痕（三）&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D401790638%26idx%3D1%26sn%3D090edc5546fc699d65bf5b43e9eb3adf%26chksm%3D0d0754b23a70dda4bbed5f9edb7131e357ee91c59c11b449f912c69614b13901c52725470b29%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长日无痕（二）&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D402251568%26idx%3D1%26sn%3Dc4fd5992187b720f199d16bc6766c558%26chksm%3D0d0c5d2c3a7bd43a1665108752e6dd5564aef050a9d529aaac3fc9a7bd8728192b0652e6bb1a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长日无痕（一）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-14-91761475</guid>
<pubDate>Thu, 14 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Wireguard：简约之美</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-12-91383212.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/91383212&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e1a5672bc7496a5a7205aee95718fcaf_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;本文共 4500 字，普通阅读需要 10 分钟，精读需要 30 分钟。&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最近团队内部的 BBL，我分享了 Wireguard。Wireguard（以下简称 WG）作为新一代的 VPN 的代表，可能很多做技术的同学都不陌生。和其它 VPN 技术一样，我们可以使用它在家庭网络和公司网络之间搭建一条安全的信道，由此可以访问「内网」的数据和应用。&lt;/p&gt;&lt;p&gt;在具体讲 WG 之前， 我们先来把 VPN 的通用需求抽象一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;安全性（security）：保证两个私有网络间的数据可以在不安全的网络（比如互联网）上安全地传输&lt;/li&gt;&lt;li&gt;真实性（authenticity）：访问者是合法的用户，访问者访问的是正确的网络&lt;/li&gt;&lt;li&gt;高效性（efficiency）：开启 VPN 并不会让访问网络明显变慢，且建立隧道的速度要快&lt;/li&gt;&lt;li&gt;隐秘性（stealthiness）：第三方并不能轻易嗅探到网关的存在&lt;/li&gt;&lt;li&gt;易用性（accessibility）：很容易配置，很容易开启和关闭&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在不安全的网络上安全地传输数据这件事，我们必须感谢 Martin E Hellman，Bailey W Diffie 和 Ralph C. Merkle。他们的专利 Cryptographic apparatus and method 提出了后来广为流传的 DH 算法，用于交换密钥。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9c70edec4c08de7854a32d7648e44675_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;391&quot; data-rawheight=&quot;655&quot; class=&quot;content_image&quot; width=&quot;391&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9c70edec4c08de7854a32d7648e44675_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;391&quot; data-rawheight=&quot;655&quot; class=&quot;content_image lazy&quot; width=&quot;391&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-9c70edec4c08de7854a32d7648e44675_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这个算法本身使用了同余和乘法交换律的性质，过程很简单，大家感兴趣可以看 wikipedia。WG 使用的 ECDH 则是 DH 算法的变种，使用了椭圆曲线来增强性能和安全性：&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;721&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;721&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;通过 DH 算法，网络的两端可以在不安全的网络中协商出来用来加密要传输的数据的密钥。之后，数据流就可以用这个密钥进行高效地做对称加密。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;安全性解决了，那么，如何解决网络两端身份验证的问题？这个问题目前的通解是两个：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;共享密钥（pre-shared key）&lt;/li&gt;&lt;li&gt;证书（certificate）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;比如我们访问招商银行的网站，浏览器通过验证招行的证书来确保我们要访问的网络的确是我们要访问的网络。而当一家公司的总部的网络和分支机构的网络要通讯时，可以预先配置彼此的公钥然后通过数字签名来验证彼此，这是共享密钥的一种变体（纯粹的共享密钥不满足前向安全，几乎不应该被使用在通讯中）。&lt;/p&gt;&lt;p&gt;安全性和身份的真实性问题解决了，VPN 最重要的问题也就解决了。我们现在使用的 VPN 解决方案，无论是工作在网络层的 IPSec VPN，还是工作在会话层的 SSL/TLS/OpenVPN，在密钥交换和身份验证都并没有跳脱出前面讲述的算法。它们之所以那么复杂，很大程度在于配置的处理，加密算法的协商和各种兼容性问题上。而本文的主角 WG，虽然从算法的角度并没有太多创新，但通过巧妙地组织需求和另辟蹊跷地实现，产生出一种让人窒息的简洁。&lt;/p&gt;&lt;p&gt;以下是代码量的对比：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;WG 仅有 4k 的内核代码实现！精巧得简直不能再精巧！虽然这么说有些不敬，但对比下来，仿佛 OpenVPN 或者 StrongSwan 是按行收费的印度外包公司的产品，而 WG 是真正的程序员的杰作！Linus 本尊对 WG 赞不绝口，他在 18 年 8 月 2 日的 一封邮件 这么写到：&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;Btw, on an unrelated issue: I see that Jason actually made the pull request to have wireguard included in the kernel.&lt;br/&gt;Can I just once again state my love for it and hope it gets merged soon? Maybe the code isn’t perfect, but I’ve skimmed it, and compared to the horrors that are OpenVPN and IPSec, it’s a work of art.&lt;br/&gt;Linus&lt;/blockquote&gt;&lt;p&gt;要知道，Linus 平日来评论代码的画风是这样的（Mauro 是一个 Kernel maintainer）：&lt;/p&gt;&lt;blockquote&gt;&amp;#34;It’s a bug alright – in the kernel. How long have you been a maintainer? And you &lt;i&gt;still&lt;/i&gt; haven’t learnt the first rule of kernel maintenance?&lt;br/&gt;&amp;#34;Shut up, Mauro. And I don’t &lt;i&gt;ever&lt;/i&gt; want to hear that kind of obvious garbage and idiocy from a kernel maintainer again. Seriously.&lt;/blockquote&gt;&lt;p&gt;所以能让 Linus “state my love” 比登天还难。所以让我们怀着朝圣的心情，跪着学习 WG 是怎么做到的 —— 这样做产品写代码的思路值得我们潜心研习！&lt;/p&gt;&lt;h2&gt;&lt;b&gt;WG 接口的概念&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;首先从概念说起。&lt;/p&gt;&lt;p&gt;很多人做产品并不太在意去清晰地解释产品中存在的诸多新老概念，尤其是不敢创建新的概念。这是非常错误的做法。我们在开始架构设计的时候，就应该把产品的所有概念梳理清楚，并且当现有的概念不能很好地描述产品的某部分时，要勇于创建新的概念来使其描述足够完备。概念是工程师之间，以及工程师和外界沟通的基础，通过大家一致认可的概念去沟通，更精确，更高效。比如当我上文赋予 ECDH 是 DH 算法使用椭圆双曲线的一种变体这样一个概念后，我再提及 ECDH，就不必费劲重新解释一下。当我们产生一个新的概念后，我们可以将很多属性附着于这个概念之上，使其区别于其它概念。&lt;/p&gt;&lt;p&gt;WG 先定义了一个很重要的概念 —— WireGuard Interface（以下简称 wgi）。为什么要有 wgi？为什么现有的 tunnel 接口不适合？一个 wgi 是这么一个特殊的接口：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;有一个自己的私钥（curve25519）&lt;/li&gt;&lt;li&gt;有一个用于监听数据的 UDP 端口&lt;/li&gt;&lt;li&gt;有一组 peer（peer 是另一个重要的概念），每个 peer 通过该 peer 的公钥确认身份&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过定义这样一个新的接口，wgi 把它和一般的 tunnel 接口区分开。有了这样一个接口的定义，其它数据结构的挂载，以及数据的收发都很清晰明了了。&lt;/p&gt;&lt;p&gt;我们看 WG 的接口配置：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[Interface]
Address = 10.1.1.1/24
ListenPort = 12345
PrivateKey = blablabla

[Peer]
PublicKey = IWNVZYx0EacOpmWJq6lE8RfcFBd8EeUliOi+uYKQfG8=
AllowedIPs = 0.0.0.0/0,::/0
Endpoint = 1.1.1.1:54321&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;WG 的 VPN 隧道的发起者（initiator）/ 接收者（responder）是对等的，所以也没有一般 VPN 的客户端/服务器端或者 spoke/hub 的区别。因而配置也是对等的。&lt;/p&gt;&lt;p&gt;在这个配置中，我们进一步了解了 peer 这个概念：它是 WG 节点的对端，有静态配置的公钥，peer 背后的网络的白名单（AllowedIPs），以及 peer 的地址和端口（这个并不一定需要，并且随着网络的漫游，可能会自动更改）。&lt;/p&gt;&lt;p&gt;仅仅 9 行配置，我们就描述了一个最简单的 VPN 网络。这个配置里没有没完没了的证书的配置，没有非常复杂，长达上百行不知所云的内容，也不用设置 CA。如果你不幸配置过 IPSec VPN 或者 OpenVPN，那你该感慨简洁真的是第一生产力。&lt;/p&gt;&lt;p&gt;从数据结构的角度来看，wgi 下面挂一张 peer 的哈希表，和一张密钥索引（key_index）的哈希表。通过接收到的数据报文中的 key_index，我们可以立刻定位到 peer，而每个 peer 下面存储 endpoint 的状态，协议握手的状态，以及 keypairs（三组：当前正在使用的密钥，上一次 rekey 前使用过的密钥，rekey 后下一次即将要用的密钥），而每组 keypair 又包含接收和发送两个方向的 keypair。&lt;/p&gt;&lt;p&gt;在 wgi 接口使能的情况下（wg-quick up wg0），wgi 会被初始化，进而其相关的 peers 也都会被创建出来；反之（wg-quick down wg0），wgi 会被停止运行，相关的 peers 会被删除。数据结构的脉络非常清晰明了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;加密信道协商的过程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;WG 的简洁设计还体现在加密隧道的协商上。它使用了 Noise Protocol Framework 来构建协议的协商过程。Noise Protocol Framework 是一个设计精巧的用来构建安全协议的框架，这里我们就不展开来讨论，之后我会撰文另行介绍。WG 使用了 Noise_IKpsk2_25519_ChaChaPoly_BLAKE2s，从协议名字你大概能猜到它选取 curve 25519 做 ECDH，ChaChaPoly 做对称加密，Blake2s 做哈希，在 IKE/SSL/TLS 协议中，这些算法都是两端协商出来的，WG 觉得没必要，直接将其固定在协议中，所以大大减少了需要支持的加密算法，以及节省了加密算法的协商过程。因为网络的两端都配置了对方的公钥，因而它可以仅仅使用 1-RTT（一组来回的报文），2 个报文，就完成隧道的建立。看看 IPSec 使用的 IKE 协议，main mode 下 6 个报文（3-RTT），aggressive mode 下也需要 3 个报文（2-RTT）。北京到西雅图，1-RTT 大概 175ms (&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//cloudping.info&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cloudping.info&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;)，2-RTT 就会有非常明显的延迟。对于任何协议来说，减少协商隧道的 RTT，可以大大增强协议的性能。&lt;/p&gt;&lt;p&gt;1-RTT 也意味着无连接（connection-less），因为相互之间没有确认。大家可以对比有连接的 TCP（三次握手确认眼神连接）和无连接的 UDP。有连接的网络有无数好处，但无连接胜在简洁，就像一条记忆只有七秒钟的鱼，没有过去，现在和未来的负担。&lt;/p&gt;&lt;p&gt;对于有连接的协议，一般来说，需要有个状态表存储之前协议进行到哪里了。这个状态表是动态生成的，很容易成为 DoS 的标的。比如 TCP，从诞生之初就饱受 SYN-flood 之苦。而无连接，则没有这个负担 —— 服务器不必为了客户端的握手请求而特定做些什么，也不用考虑丢包（丢包就重新握手好了，反正就 1-RTT），不用起定时器管理连接表中的半开连接（因为压根没有）等等。&lt;/p&gt;&lt;p&gt;WG 的握手报文中会携带：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;unencrypted_ephemeral：发送方为这次握手临时生成的公钥（未加密，用于 ECDH）&lt;/li&gt;&lt;li&gt;encrypted_static：用对端公钥和临时生成的私钥 ECDH 出的临时密钥 key1 对称加密对方的公钥&lt;/li&gt;&lt;li&gt;encrypted_timestamp：用对端公钥和自己的私钥 ECDH 出 key2，key2 混淆进 key1，来加密当前的时间戳&lt;/li&gt;&lt;li&gt;mac1：对端公钥加上整个报文内容后的哈希&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;接收方先校验 mac1（简单的身份验证 - 一般的黑客在这一步就跪了），如果不对，直接丢弃；之后验证 encrypted_static（确认眼神 - 除非有私钥，否则黑客在这一步也跪了），验证 encrypted_timestamp（防止重放，所以重放攻击也跪了）。当接收方校验一切 OK 后，它可以生成自己的临时密钥对。此时，接收方因为有了对端的临时公钥，已经可以计算出此次协商后加密数据要用的密钥。但它还需要发送一个握手的回复报文来把自己的临时公钥给发送方以便于发送方可以算出同样的密钥：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;unencrypted_ephemeral：接收方为这次握手临时生成的公钥（未加密，用于 ECDH）&lt;/li&gt;&lt;li&gt;mac1：对端公钥加上整个报文内容后的哈希&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这样两端都有对方临时生成的公钥，加上自己临时生成的私钥，就可以 ECDH + HKDF（一种把 DH 结果转成对称加密密钥的方法）得到这次握手的两个方向的对称加密的密钥。&lt;/p&gt;&lt;p&gt;如果这个过程有丢包，比如接收方没有收到发送方的握手请求，或者发送方没有接收到握手回复，那么整个过程重来就好了。反正怎么着都是 1-RTT，不浪费。&lt;/p&gt;&lt;p&gt;这个过程 WG 还充分考虑了隐秘性，接收端只要是收到不合法的握手（比如 peer 我不认识，重传等），就直接丢弃。在发送方看来，握手的报文就像进入了一个黑洞，因而除非黑客能够得到 WG 网关的授权将其公钥添加为 peer，否则几乎没办法嗅探到接收端的存在。而其它 VPN 协议的隧道建立阶段，比如 IPSec 的 IKE 协议，OpenVPN 的 SSL/TLS 协议，都可以被嗅探到。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;数据报文的发送和接收&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;有了密钥之后，用户的数据报文就很好处理了。处理的逻辑非常简单清晰，以至于寥寥数行就可以涵盖：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;发送：&lt;/li&gt;&lt;ul&gt;&lt;li&gt;用户态：应用程序发送目标地址是 VPN 对端网络的数据报文&lt;/li&gt;&lt;li&gt;内核：内核通过路由表发现应该由 wg0 接口发出，所以交给 WG 处理&lt;/li&gt;&lt;li&gt;WG：通过目标地址，在接口的配置中可以反查出要发往哪个 peer，然后用之前和该 peer 协商好的密钥（如果没有协商或者密钥过期，则重新协商）加密报文，并将报文封装在目标地址和目标端口是 peer 的 endpoint 的 UDP 报文中（报文中包含 key_index）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;接收：&lt;/li&gt;&lt;ul&gt;&lt;li&gt;内核：数据报文的 UDP 端口是 WG 在监听，将其送给 WG 处理（WG 的 recv 得到该报文）&lt;/li&gt;&lt;li&gt;WG：从报文的 key_index 找到哈希表中对应的密钥，解密（这里不是直接解密，而是放入一个解密队列中，这是设计上网络系统的一个小诀窍）&lt;/li&gt;&lt;li&gt;WG：查看解密出来的原始报文是否在 peer 允许的 IP 列表中，如果是，就把原始报文交给内核处理。注意，这里这个报文属于哪个 peer，也是从 key_index 中获得&lt;/li&gt;&lt;li&gt;内核：根据原始报文的目标地址查路由表将报文送出&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;406&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;406&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;太干了，来点湿的？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在 BBL 里，我做了这样一个演示：用我本机和 DigitalOcean 上的一台机器建立 WG VPN，然后发一个 HTTP GET，服务器端返回一个带有 hello world 的文本。以下是 wireshark 的抓包，我稍作注释：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;227&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;227&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1027&quot; data-rawheight=&quot;675&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1027&quot; data-original=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1027&quot; data-rawheight=&quot;675&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1027&quot; data-original=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;延伸阅读&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;WireGuard Protocol: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.wireguard.com/protocol/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wireguard.com/protocol/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Noise Protocol: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//noiseprotocol.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;noiseprotocol.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Authenticated Encryption with Associated Data (AEAD) algorithm - RFC7539&lt;/li&gt;&lt;li&gt;HKDF: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc5869&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;tools.ietf.org/html/rfc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;5869&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;DH 算法的专利：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//patents.google.com/patent/US4200770&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;patents.google.com/pate&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;nt/US4200770&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;WireGuard 源码：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/WireGuard/WireGuard&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/WireGuard/Wi&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;reGuard&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Linus 的邮件：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//lists.openwall.net/netdev/2018/08/02/124&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;lists.openwall.net/netd&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ev/2018/08/02/124&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;贤者时刻&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;作为一个曾经常年混迹网络及安全协议的老兵，WireGuard 带给我的震撼是全方位的。它就像一记重锤，狠狠地砸在我头上：如果懂得合理取舍，简化各种繁文缛节，复杂如 VPN 协议，也可以如此清丽脱俗；简单的，考虑周到的用户接口（配置）意味着易用的产品和大智若愚的设计；由此带来的简洁会让很多接下来随之发生的很多事情变得简单：因为接口简单清晰，所以几乎一切数据结构都可以预先生成，因为协议本身简单（1-RTT），所以任意一段发起重新协商也很简单；握手过程丢包？丢就丢吧，反正握手很快很方便；最终，因为简单，所以代码量少，没有那些个弯弯绕绕，一个对 C 和 linux 开发比较熟悉的工程师，随便花上一个下午就能把主流程看个明白 —— 这也就意味着代码更容易审核，写测试代码花费的时间更少还更容易做到更高的测试覆盖率，更难出错，bug 更少，解 bug 的时间更少，留给程序员深思熟虑展望未来的时间也就更多，当然也就无需 996，节约下来的时间或陪老婆孩子愉快玩耍，或找三五知己一起读读书，听听音乐会，聊聊天，都是很好的。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-12-91383212</guid>
<pubDate>Tue, 12 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>程序员圣诞节烧脑谈</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-01-89713510.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/89713510&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-20c9a048fa20ca459030e5a4290712eb_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;今天不光是万圣节，31 OCT，也就是 25 DEC，所以也是程序员圣诞节。&lt;/p&gt;&lt;p&gt;。。。&lt;/p&gt;&lt;p&gt;好吧，OCT 代表八进制，八进制的 31，是十进制的 25，而十进制是 DEC。嗯，标准的程序员冷笑话，认真你就输了。&lt;/p&gt;&lt;p&gt;（我仿佛听到了郭德纲的相声在我耳边想起：你有病吧，你有药啊）&lt;/p&gt;&lt;p&gt;进制这个东西，很有意思。我们要感谢进化过程中，人类进化出的是五根手指，如果是 7 根手指，那么我们日常生活的进制就是 14 进制，小学数学的难度大概率要陡增 —— 因为要背 13x13 乘法表。&lt;/p&gt;&lt;p&gt;平日生活中，除了占绝对优势的十进制外，我们还使用十二进制（买袜子鸡蛋什么的），六十进制（计时以及角度的分和秒），三百六十进制（角度），三百六十五进制（计日）。有些文化中会使用二十进制，比如 84 非要说成四个二十和一个四，自己给自己找麻烦。在程序员的生活中，十进制不是主流，二进制，十六进制和八进制才是王道。衍生出来的 64 进制，二十六个字母大小写加十个数字再加两个符号，也堂而皇之出现在主流圈子里，之后，为了解决 IlO0 傻傻分不清的问题，比特币又从 64 进制中衍生出来 58 进制。&lt;/p&gt;&lt;p&gt;我们讲进制，比如二进制，是逢二进一，所以自最低位起，往上是 21，22，一路走上去。对于一个 x 进制数，我们以此类推：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;254&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;254&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这就有意思了，原来一个多项式代表的是一个进制未知的数！那么我们是否可以把多项式的乘除用我们惯用的十进制乘除来表述呢？&lt;/p&gt;&lt;p&gt;比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E3%E2%80%85%2B%E2%80%853x%5E2%E2%80%85%2B%E2%80%855%5Ex%E2%80%85%2B%E2%80%8515&quot; alt=&quot;x^3 + 3x^2 + 5^x + 15&quot; eeimg=&quot;1&quot;/&gt; 除以 &lt;i&gt;x&lt;/i&gt; + 3 怎么算？在初高中的时候，我们需要对这个多项式进行因式分解，分解起来并不容易。而我们将其看做十进制的数字，就是 135(15)，也就是 1365，除以13，得 105，再把 10 进制转换成 x 进制，得到： &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E2%E2%80%85%2B%E2%80%855&quot; alt=&quot;x^2 + 5&quot; eeimg=&quot;1&quot;/&gt; 。完美。乘法也是如此 —— 只是要注意进位写成 135(15) 的形式，不要往上进。&lt;/p&gt;&lt;p&gt;列位可能要问了，那 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E2%E2%80%85%E2%88%92%E2%80%851&quot; alt=&quot;x^2 − 1&quot; eeimg=&quot;1&quot;/&gt; 这样含有负数的多项式除以 &lt;i&gt;x&lt;/i&gt; − 1 怎么办？ &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E2%E2%80%85%E2%88%92%E2%80%851&quot; alt=&quot;x^2 − 1&quot; eeimg=&quot;1&quot;/&gt; 放成十进制来看，是 (100-1)，而 &lt;i&gt;x&lt;/i&gt; − 1 是 (10-1)，除出来的结果是 11，换算回来是 &lt;i&gt;x&lt;/i&gt; + 1。轻松搞定！注意这里有借有还，比如 &lt;i&gt;x&lt;/i&gt; − 1 乘以 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E3%E2%80%85%2B%E2%80%85x%5E2%E2%80%85%2B%E2%80%85x%E2%80%85%2B%E2%80%851&quot; alt=&quot;x^3 + x^2 + x + 1&quot; eeimg=&quot;1&quot;/&gt; ，是 (10-1) 乘以 1111，得 9999，我们需要将其还原成 (10000-1)，也就是 &lt;i&gt;x&lt;/i&gt;4 − 1。&lt;/p&gt;&lt;p&gt;既然进位系统可以是 2，3，5，10，60，365，那么可不可以是 0.5 呢？哈，0.5 进位意味着个位数置一，十位数就进二，然后百位数进四，一路无穷下去。这是个奇怪的进位系统，任何数都无穷无尽。&lt;/p&gt;&lt;p&gt;那么 1.5 进制呢？也就是说逢三进二？1.5 进制的 20 代表十进制 3，2100 代表十进制的 9。这个进制写成表达式是 2 × 1.53 + 1.52。&lt;/p&gt;&lt;p&gt;所以逢 x 进 y 的进制的一个数 1234，代表 (&lt;i&gt;x&lt;/i&gt;/&lt;i&gt;y&lt;/i&gt;)3 + 2 × (&lt;i&gt;x&lt;/i&gt;/&lt;i&gt;y&lt;/i&gt;)2 + 3 × (&lt;i&gt;x&lt;/i&gt;/&lt;i&gt;y&lt;/i&gt;) + 4。很好很奇葩。有什么用？似乎没用。数学上的东西就是这样，就像庄子所谓「有用之无用」：今子有大树，患其无用，何不树之於无何有之乡，广莫之野？&lt;/p&gt;&lt;p&gt;扯了一堆有的没的，有些是给小宝讲数学时她傻乎乎问的，有些是我看了网上的视频琢磨的。程序员圣诞节本不该扯这些玩意的，伤脑。还是给大家看今晚万圣节我拍的 10 张图吧：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1439&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1439&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;祝大家节日快乐！&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-01-89713510</guid>
<pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>我的冥想盆</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-10-23-88189139.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/88189139&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-45083cd94fd11c9ab8aafdc3ad10bb05_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;有次在和同事 1:1 的时候，被提到了这样一个问题：你是如何能写出内容如此丰富的文字呢？&lt;/p&gt;&lt;p&gt;这个问题问得我有些楞。我虽然这两年来文章更新的频率断崖式下跌，但平胸而论，我要是想写，要是有时间去写，一天一篇文字，并不在话下。最近我给我们家小宝开课，顺手开启了一个比较私人的公众号，把课堂上的流水账记录下来（主要是想以后教小贝的时候可以直接捡现成的），一个月来，已经写下了三十多篇（质量参差不齐的）文章。&lt;/p&gt;&lt;p&gt;所以关键是「有野講」。&lt;/p&gt;&lt;p&gt;那问题来了，大家一天都是二十四小时，刨去工作睡觉，吃喝拉撒，剩下的时间都不多，如果努力的程度也差不多，凭什么我能输出更多的思想？&lt;/p&gt;&lt;p&gt;我想了又想，发现这和两件事有关。&lt;/p&gt;&lt;p&gt;第一是目的。这个我最近一个月感触最深。以前我也看李永乐老师，看妈咪说，看 3blue1brown，但都是抱着猎奇的心态，45° 斜躺在沙发上懒洋洋 1.5 倍速下看完视频，各种恍然大悟，各种哇靠牛逼，信息在头脑里打一圈转，丢失掉不少，剩下的就浅浅驻扎着。要说懂吧，是懂了，可真要我把同样的内容像他们那样讲给别人听，那几乎不可能。现在因为要给小宝上课，再看这些视频的时候，虽然还是 1.5 倍速，但我是正襟危坐，聚精会神，放在键盘上的双手随时准备按下暂停，cmd+shift+4 截图，然后在早已打开好的 vscode 中记录笔记。所以目的不一样，吸纳信息的质量就不一样，大脑全速运转，反复咂摸，没能充分理解的部分停下来思考，思考的同时还在想如果我要将其换个更通俗的说法讲给小宝听，该如何如何，就这么把信息拆解成知识，烙在脑海中。后来我想啊，那些我「看进去了」的视频，比如 Rich Hickey 的 Simple made easy，Scott Wlaschin 的 Railway oriented programming，Bret Victor 的 Inventing on Principle，Spotify Engineering culture 等，无不是我要写文章的时候发现的，我带着目的去看，脑子里清晰地知道我希望从中得到什么，所以看得认真，思考地认真，最后自然能将别人的思想和自己的思想融会贯通，输出的时候一切便自然地在笔尖流淌。&lt;/p&gt;&lt;p&gt;第二是笔记。所谓好记性不如烂笔头，流过大脑的信息，被手指这么一截胡，有价值的内容就不会白白流走。于是我们需要有个随时能记录知识，思考以及灵感的地方。我自己用的笔记系统经历了若干代，从 windows 时代的某个我已经忘记名字的笔记软件，到短暂尝试了 Trelby，到 scrivener，再到 evernote，都不尽如人意，最后到我自己的独家武器 —— 我称之为 pensieve 的工具集。pensieve 是邓布利多的冥想盆，用在这里恰如恰如其分。&lt;/p&gt;&lt;p&gt;我的 pensieve 工具集历经演进，目前包含这些组件：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;vscode + markdown all in one + markdown math + marp for vscode + plantuml。编辑和预览工具。&lt;/li&gt;&lt;li&gt;pandoc + Makefile + chrome-headless-render-pdf。编译系统，用于表现层 —— 任何我记录的内容可以被输出成 html，epub 和 pdf。&lt;/li&gt;&lt;li&gt;git + github。版本控制和存储系统。所有的内容我自己拥有，且随时随地可以在我的任何设备上访问。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这套工具组合起来威力强大，且几乎不需要写什么代码 —— 嗯，仅仅需要少量的 Makefile 代码充当胶水，把一切粘合起来。它有良好的可伸缩性，小到随笔，大到写书，都能应付得过来。如果非要说缺点，就是对非程序员不够友好，毕竟不是每个人都懂 git 和 Makefile。&lt;/p&gt;&lt;p&gt;于是我的硬盘里的一个个冥想盆开始自发增长。我早期的公众号文章（以 2016 年为分水岭）和书（途客圈创业记，奇博士的管理课等），在一个叫 craftsman 的 repo 里，后来的公众号文章在 book_wechat 的 repo 里。我的天叔奇谈，在 book_tianshu 中，而我准备写给我孩子们的数学书，则放在 book_math 中：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5706f2180c8c551d58f41cefffd13c78_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;146&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-5706f2180c8c551d58f41cefffd13c78_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5706f2180c8c551d58f41cefffd13c78_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;146&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-5706f2180c8c551d58f41cefffd13c78_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5706f2180c8c551d58f41cefffd13c78_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这样，当我看 StrangeLoop 新上的视频，如 “Performance Matters” by Emery Berger，我就可以打开 book_wechat，开上一篇 md 开始记录有趣的内容，并思考，如果我写一篇关于 performance 的文章，我该从什么角度，选取什么内容来写；而当我跟着 Eddie Woo 学习初中数学的时候，我就打开 book_math 在合适的目录下（比如 algebra）揉进学到的知识，一边揉一边想如果把同样的内容教给小宝，如何简化，如何用图像辅助才能教得更好。就这样了，我边思考边写，想到什么写什么，不太管格式（偶尔用 ## 区隔跨度太大的内容），遇到引人深思的内容，不容易用语言表达清楚，就干脆截图，把拷下来的屏幕存贮到 repo 的 assets 下，然后在 md 中引用。如此这般。最后，在我需要回顾和对外输出内容的时候，我可以将其一气儿输出成 pdf，装在手机/ ipad 里，随时翻阅。有些内容，pdf 并不是最方便的形式（比如我做的《资治通鉴》胶片），且不太有隐私的问题，我就将其设置好 travis，每次 commit 就构建 html，然后自动部署到 netlify，于是有网络的地方就可以访问。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;当信息被转储成知识后，我再以我的方式，融合我的阅历，我的思考，将其表达出来，这便是我的知识。&lt;/p&gt;&lt;p&gt;所以，看上去并不是很难，对吧？&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/tyrchen/unchained/tree/master/books&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;附上《天叔奇谈》的 PDF&lt;/a&gt;（现在已经有近一百五十页碎碎念，大概率对你无用），无他，就是秀一下有一个好的「冥想盆」+ 日拱一卒，会带来怎样的威力。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-10-23-88189139</guid>
<pubDate>Wed, 23 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>就酱，在波特兰跑完人生第三个正式的马拉松</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-10-10-86015814.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86015814&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-eaf108ca7f9ea1ecf70f5e62df55047b_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;报名&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;和波特兰马拉松结缘纯属偶然。&lt;/p&gt;&lt;p&gt;2014 年跑完北马，兴奋之余，想感受一下六大赛，结果报名芝加哥马拉松和纽约马拉松先后失败，只好退而求其次，报了波特兰马拉松。没想到，波特兰马拉松别具一格，全程跑下来，我的感觉是「波特兰马拉松，其实是以马拉松的名义，举办了一场全民音乐会」，于是深深地爱上了在这里比赛的感觉。&lt;/p&gt;&lt;p&gt;2016 年，我继续报名了波特兰马拉松，后来因为出差的缘故，提前取消了；2017 年，死心不改，报了名，也勉力训练着（有段时间几乎天天中午在旧金山的海边跑个四十来分钟），但因为自己觉得身体还没到可以参赛的水准，没去；2018 年，迁居西雅图地区，虽然离得更近了，可乱七八糟的事情太多，干脆没报名；2019 年，在镜子里看着自己日渐丰腴的身体，突然有了皇叔「慨然流涕」那样的心境：「吾常身不离鞍，髀肉皆消。今不复骑，髀里肉生。日月若驰，老将至矣」，于是便重新报名，重新训练，决意哪怕排除万难，也要跑上一跑。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;训练&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;对于马拉松来说，训练是比赛的一部分，比赛是训练的尾声。就像《英雄交响曲》中的英雄一样，在雄壮豪迈地迎接最终的胜利之前，要经历从踌躇满志，到万念俱灭，再到凤凰涅槃的三个阶段。这也是我在训练中经历的过程。&lt;/p&gt;&lt;p&gt;报名之后，大概是五月份的样子，我开始了第一次训练。公司门前有条小路，一路跑到头再折回来大概是 3.6km，我便拿这段距离重拾对跑步的感觉。虽然许久未跑，可我正处于曹刿口中「一鼓作气」的阶段，凭着对跑马的激情，就这么每天中午跑着，一点点加量。慢慢的，3.6km 升级到了 5km，停留了许久，在七月初的时候，升级到了 7km。随后小腿开始不适，每次跑完小腿侧面会有凸起的鼓包。恰好那时间前后，无意中看到了李永乐老师讲静脉曲张的视频，吓了我一大跳，因为我真有些静脉曲张早期的症状。随后，我跑得谨慎了许多，每次跑完后吃午饭的同时都要按摩小腿达半个小时，直至症状消退才作罢。就这样收着跑了一个多月，静脉曲张的症状没有好转的迹象。&lt;/p&gt;&lt;p&gt;所谓祸不单行，8 月 12 日风和日丽，我吃着火锅唱着歌，啊不，听着 podcast 跑着步，一不留神，脚磕在马路牙子上，重重摔倒，为了保护我手上握着的那来之不易的 P30 Pro（主要是怕回家跪搓板），我没有用双手缓冲一下，反而是用手臂和手背生生扛了下来，和水泥地来了个亲密接触。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-028ef49ee7d0c7747e1ba957e0b6fcad_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1023&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-028ef49ee7d0c7747e1ba957e0b6fcad_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-028ef49ee7d0c7747e1ba957e0b6fcad_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1023&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-028ef49ee7d0c7747e1ba957e0b6fcad_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-028ef49ee7d0c7747e1ba957e0b6fcad_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;周围经过的车都吓了一大跳。有司机探出头来表示关切。我摆摆手，就那么趴在地上，喘着粗气，又好气又好笑，任凭擦伤的好几块地方火辣辣的。说来也巧，兴许真的是否极泰来，自打那次跌了一跤，我小腿上的鼓包似乎有消亡的迹象。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那周周末，我放开跑了个三小时的 LSD (Long Slow Distance)，不但并无大碍，还自我感觉良好。我觉得，这次马拉松稳了。&lt;/p&gt;&lt;p&gt;9 月份，我刻意练了很多上坡下坡 —— 反正公司附近到处都是起起伏伏的丘陵。2015 年那次跑马，大概 27 公里处的大坡我还记忆犹新，我希望这次我能够跑着上去，而非散步散过去。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;参赛&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;10 月 6 日的波特兰清晨，天气异常阴冷。跑前半小时，把外套寄存后，我在寒风中瑟瑟发抖，只能靠不断吃糖丸和热身来抵御冷风。枪响后大概四五分钟，我紧跟着 440 的兔子，迈过了起点。我觉得我能跟住这只兔子，从而有机会冲击我北马的最好成绩：4:48。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8813b0b06d94c4f2b47356b5e6d2ab2f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1410&quot; data-rawheight=&quot;1826&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1410&quot; data-original=&quot;https://pic4.zhimg.com/v2-8813b0b06d94c4f2b47356b5e6d2ab2f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8813b0b06d94c4f2b47356b5e6d2ab2f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1410&quot; data-rawheight=&quot;1826&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1410&quot; data-original=&quot;https://pic4.zhimg.com/v2-8813b0b06d94c4f2b47356b5e6d2ab2f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8813b0b06d94c4f2b47356b5e6d2ab2f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;头几公里，440 的兔子配速几乎锁在 6’25，上坡时，降到大约 6’45。这次马拉松的线路和上回我参加的截然不同，几乎全程都是上上下下的，还好我针对上坡好好练习过，不然还真不好适应。跑了六七公里后，我觉得 440 的兔子速度压得有些过分 —— 或者是我自己自我感觉太好 —— 我就在第一个水站处，超了她。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;之后，几乎每个上坡，我都能超出一大票散步的人，然而，我始终连 420 的兔子的尾巴都没见着。反而，跑完半马之后（大约 15 mile 处）的一座桥上，我看到了迎面跑来的 340 的兔子。我当时手头没有地图，并不知道我们间实际有八公里的差距（5 miles），心中窃喜：难道我离四小时竟然不太远？&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-88efafbcee9303ce51a166042462571f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1730&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-88efafbcee9303ce51a166042462571f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-88efafbcee9303ce51a166042462571f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1730&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-88efafbcee9303ce51a166042462571f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-88efafbcee9303ce51a166042462571f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;原来这一切都是假象，还有很多路程要跑。过了桥，绕过一个居民区，大部队就进入大名鼎鼎的 Reed College。这是乔布斯的母校 —— 虽然他没上多久就退学了。我深深地记得，乔布斯在斯坦福的毕业典礼上那著名的 connecting the dots —— 乔布斯在 Reed College 学习的不知道有什么用的衬线字体，却阴差阳错被应用在了 Mac 上。Reed College 校园很美很安详，我们的到来打乱了学校的宁静，路边的学生们怪叫着给我们鼓劲。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;过了 Reed College，前面两个老爷爷引起了我的注意。老爷爷 A 追上老爷爷 B 后，和他并肩跑着，问：您多大了？老爷爷 B 洪亮地回答：65 了！您呢？老爷爷 A 自豪地说：69！比您痴长了几岁！随后两人爽朗地笑了。我看着两人的背影，羡慕得不得了 —— 要是我六十好几，还能有这样的体格参加马拉松，让一个后生感慨「都难以望其项背」，多好！&lt;/p&gt;&lt;p&gt;趁着又一个上坡，老爷爷们的速度下来了，我便超过他们，继续我自己的征途。也许是之前几个月训练的功效，也许是此次全马每 5km 我就补一包糖浆的作用，总之过了 32km，我还是游刃有余。老婆发来信息说她们已经停好车，在终点附近的河边玩耍等待我到来。我把沿途的景致发给她们先睹为快。这次波特兰马拉松，组织得相当不错，每个人都像顺丰快递的一件包裹，有一个 tracking url，于是家人可以打开这个 url，随时了解我的动态 —— 老婆对于我每个 mile 的配速，平均速度，预计到达终点的时间，比我自己感知到的还要精确。&lt;/p&gt;&lt;p&gt;一路上，我的配速，除去上厕所和大上坡这种不可抗力导致往下掉一掉，大多保持在 6’20 - 6’40 之间，稳得连我自己都感到吃惊。最后两三个 mile，我虽然一切安好，没有像上次那样，腿部抽筋，但脚底板生疼，有些忍无可忍。「停下来走走」的念头萦绕在我脑海中，不过很快另一个声音将它按了下去：这可能是我有史以来第一次全程都几乎稳在一个速度跑下来的马拉松啊！就差几公里了！我回想起之前在跑过一个居民区的时候，地上插的标语：“If it doesn’t challenge you, it doesn’t change you”，当时我咂摸了很久，此刻这句话化作鸡汤，沁人心扉。&lt;/p&gt;&lt;p&gt;这时老婆打来电话问最后三百米小宝想跟我跑，可不可以？&lt;/p&gt;&lt;p&gt;我说有何不可？先上车再买票，试试呗。&lt;/p&gt;&lt;p&gt;最后的一公里，华为的健康 app 已经在恭喜我完成了全马，可我离终点还有大概 600 米。我在欢呼的人群中疯狂搜索老婆孩子，终于，在不远处找到了。小宝和小贝兴奋地「爸爸」「爸爸」吼个不停，我冲过去，抄起两个娃一顿猛亲。抱着小贝，牵着小宝合了个影之后，我拉起小宝，做最后的冲刺。围观的群众看到我们两个手拉手跑向重点，喝彩声连绵不绝，到处都是向我竖起的大拇指。小宝兴奋极了，这样热烈的氛围，她也是第一次经历。当我们手拉手即将冲过终点时，主持人热情洋溢地播报：Here comes Tian Chen, from Issaquah! And his lovely daughter!（具体的词儿我也记不清楚了）&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b9998093893e247a475b73d786039ba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;3075&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-b9998093893e247a475b73d786039ba7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b9998093893e247a475b73d786039ba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;3075&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-b9998093893e247a475b73d786039ba7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-b9998093893e247a475b73d786039ba7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-29e6872e3660174b388e5d5430fb99e3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1723&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-29e6872e3660174b388e5d5430fb99e3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-29e6872e3660174b388e5d5430fb99e3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1723&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-29e6872e3660174b388e5d5430fb99e3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-29e6872e3660174b388e5d5430fb99e3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;小宝既开心又不解地问：爸爸，为什么人家会说你的名字，还知道你来自 Issaquah，却不提我的名字？&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我笑着说：因为爸爸报名参赛了，你看我的胸牌：1707，人家一看这个就能查到我的报名信息，知道我的全名，以及我住在哪里。&lt;/p&gt;&lt;p&gt;她恍然大悟：我说嘛，那我下次也要报名，我想冲过终点的时候听到我的名字！&lt;/p&gt;&lt;p&gt;跨过终点的时候，我望了一眼记分牌，上面赫然写着 4:36。我知道，我的净成绩肯定要更好一些，说不定进入 4:30 呢！在休息区，小宝和我大快朵颐，有什么吃什么。我一遍绕着休息区走，一边吃吃喝喝，在连喝了两瓶水，确保轻微脱水的情况有所好转后，才做了些简单的拉伸，然后冲出去，和家人汇合。&lt;/p&gt;&lt;p&gt;后来我拿到了成绩，4:32！天道酬勤，我开心地像个一百斤的瘦子。毕竟，三十七岁的自己，终于追上了三十二岁的自己的脚步。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4aae01eadaea21bdff00329639c49cb1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;729&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-4aae01eadaea21bdff00329639c49cb1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4aae01eadaea21bdff00329639c49cb1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;729&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-4aae01eadaea21bdff00329639c49cb1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-4aae01eadaea21bdff00329639c49cb1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;当我跑步的时候…&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;好像谈到跑步，就免不了谈村上春树 —— 唉，他大概今年也拿不了诺奖吧。&lt;/p&gt;&lt;p&gt;我之前和跑步有关的几篇，变着法子总要摘抄他的文字：“Pain is inevitable, suffering is optional”，进行自我鼓励。今年整个过程没有多少 pain，更谈不上 suffering。不过我还是很喜欢这碗鸡汤，时不时反刍回来让它的滋味在舌尖打个转。&lt;/p&gt;&lt;p&gt;当我跑步的时候，我总是任由思想天马行空。平日的中午跑步时，我脑海里时而冒出数学题 —— 比如根号二如何用连分数表示 —— 这是在准备未来给小宝的数学课；时而冒出吴王夫差为何不解决卧榻之患而急于黄池争霸的疑问 —— 这是我自己的十万个为什么。&lt;/p&gt;&lt;p&gt;这次波特兰马拉松，我全程都在回顾并思考一件事：究竟做什么事情让我感到最为快乐？或者说，我的人生的终极快乐是什么？&lt;/p&gt;&lt;p&gt;在我懂事的时候，哈雷彗星和神秘的太空是少儿科学画报的常客。那时候无论是在新疆还是酒泉，夏季的夜空，一条白带子裹着数不尽的星星，美轮美奂。长辈们对着夜空给我指点：这是北斗七星，那是织女星…夏天晚上在户外乘着凉，啃着西瓜，数着天上的星星，是我儿时享不尽的快乐。所以，打小我就有一颗成为天文学家的心。&lt;/p&gt;&lt;p&gt;长大以后，跟随父母南下广东，在珠三角灯红酒绿的城市群中，天上的星星日渐模糊起来。初高中同学聚会，大排档里懒散地抠着田螺聊着天，我的目光已经从远处的星星转向了近在咫尺穿着班尼路T恤真维斯仔裤的女同学 —— 情窦初开的小男生，跟自己心仪的女孩儿聊上几句天，还有什么比这更快乐的事情？&lt;/p&gt;&lt;p&gt;大学四年，打游戏和写代码是两大快乐。打游戏自己真不是那块料，所以后来热情消退；写代码不客气地说我算是系里执牛耳者，大二就开始周末出去凭着手艺赚钱 —— 那时领「工钱」的方式非常魔幻，每个月三十来张百元大钞扎个捆就那么递给我 —— 我感受到了钱攥在手心中的快乐。&lt;/p&gt;&lt;p&gt;大学毕业后，工作是快乐的源泉。负责的每件事，遇上的每个人，都是一个美丽新世界。就算自己住的窝连厕所都要轮流使用，刷牙的时候还能想着在 OSPF（一种路由协议）里优化路由表结构的方案，“Eureka”，“Eureka” 到乐开花。&lt;/p&gt;&lt;p&gt;工作一段时间，觉得充实的人生才是快乐的。于是，读书，充电，甚至在繁忙的工作中抽出时间读个学位，累成狗，但一天结束时合上日记，深吸一口气，感受每个毛孔散发出来的成长的喜悦，那是真的痛并快乐着。&lt;/p&gt;&lt;p&gt;之后人生的快乐，像走马灯似的换个不停，比当时日本首相换届还勤，我把它归成几类：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;积极向上的，成长的快乐：职场的成长，收入的成长，资产的成长，社交圈的成长，阅历的成长等&lt;/li&gt;&lt;li&gt;冒险和挑战自我的快乐：初尝禁果，初为人夫，初为人父，第一次管理团队，第一次创业，第一次出书，第一次跑马拉松，第一次出国，第一次出国定居，第一次成为两个娃的父亲等&lt;/li&gt;&lt;li&gt;放松心情，重塑活力的快乐：家庭生活的快乐，写代码的快乐，解决问题的快乐，分享知识的快乐，探索未知世界的快乐，写作的快乐，读书的快乐，跑步的快乐等&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;成长的快乐和挑战自我的快乐，有其保质期。在巅峰体验（peak experience）或者是目标达成后，快乐是逐渐衰退的。所以除非用鞭子不断地驱使自己，否则激情过去，是空洞的贤者时间。&lt;/p&gt;&lt;p&gt;那些并非为了达成某个目标，仅仅是单纯地放松心情的快乐，可以持续地非常久远。比如疲惫了一天之后投入家庭的怀抱，在饭桌上谈论各种有趣的话题；写一些和工作无关，仅仅为了好玩，或者「它应该存在」的代码和工具；还有，学到点什么东西，将其嚼碎了，形成自己的解读，再分享出去。&lt;/p&gt;&lt;p&gt;前些日子，我为了读《资治通鉴》方便，制作了资治通鉴的胶片版，可供我随时随地读上一个片段。其实我不止做了那一个 repo，后来我照葫芦画瓢，陆陆续续做了《史记》，《左传》，《孟子》，《论语》，《荀子》，《韩非子》，《老子》和《庄子》（&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//laozhuang.qiaopang.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;laozhuang.qiaopang.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;），《诗经》，《唐诗三百首》和《宋词三百曲》（&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//shici.qiaopang.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;shici.qiaopang.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;），算是自己的厕所读物。这些代码，这些花去的精力，与我开发能力上的精进并无任何帮助，好像也算不上像样的产品，但却是令我快乐的源泉，每每坐在马桶上，听着不解其意的《诗经》，回顾小时候全篇背下的《琵琶行》，听听韩非子解读《老子》，别有一番滋味。&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//shijing.qiaopang.com/16.html%235&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;小雅 鹿鸣之什&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//shici.qiaopang.com/01.html%2373&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;唐诗三百首&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hanfeizi.qiaopang.com/21.html%2310&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;喻老&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;然而这还不算是我的终极快乐。很多次，不同的朋友们问我：如果有一天你退休了，你最想干什么？每次我的回答都差不多：教书育人。如果有大学看得起我，让我去当讲师，那再好不过；如果没有，也许我会自个儿讲点什么。那时我并没有意识到，这件我最想做的事情，其实就是我的终极快乐。&lt;/p&gt;&lt;p&gt;早在 Juniper 的时候，我就在我们北京的团队中，努力开展 BBL（Brown Bag Lecture）这种知识经验分享的活动；后来自己创业，在途客圈，类似的午间分享就几乎没有断过；随后我把它带入了 Tubi，带入了 ArcBlock，成为它们各自文化中的一部分。这样的活动，初期总是非常吃力的，没有人上的时候我会自己欣然顶上，分享我自己的知识。在我经历的一家家公司里，我一次次勉力打造一个知识和技能分享的氛围，说明这绝不是偶然，是因为我自己就深爱着这件事情，分享知识对我来说，是一个无比快乐的过程。&lt;/p&gt;&lt;p&gt;如今，我每天晚上跟小宝分享我的知识，比我忙乎自己的工作，忙乎个人的成长，还要不亦乐乎，这不恰恰说明了我能够从中获取更大的快乐么？&lt;/p&gt;&lt;p&gt;这难道不是我的终极快乐？&lt;/p&gt;&lt;p&gt;跑步的路上，整理着这样的思绪，我突然「顿悟」，仿佛聆听到了神谕。很多人喜欢引用村上春树描写他如何步入写作这条不归路时说的这句话：「我还清晰地记得那晴朗的天空，刚刚恢复了绿色的草坪的触感，以及棒球发出的悦耳声响。在那一刻，有什么东西静静地从天空中飘然落下，我明白无误地接受了它」。&lt;/p&gt;&lt;p&gt;我的感觉几乎一模一样。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;其它有关我跑步的文章：&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D202217285%26idx%3D1%26sn%3D03f5a8c6e5ffb106d805cc374f7bff27%26chksm%3D16f81559218f9c4f7adb1fa20b8f958aa91f0bb033b4cc03080881bc6427f59aa400c4b868b4%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2014-06-30：&lt;/a&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D202217285%26idx%3D1%26sn%3D03f5a8c6e5ffb106d805cc374f7bff27%26chksm%3D16f81559218f9c4f7adb1fa20b8f958aa91f0bb033b4cc03080881bc6427f59aa400c4b868b4%26scene%3D21%23wechat_redirect&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-124276f3b47c9fe994899a81a95ada78_180x120.jpg&quot; data-image-width=&quot;640&quot; data-image-height=&quot;360&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;谈谈跑步&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D202355912%26idx%3D1%26sn%3Dc003319e4c2ad30d21aec952605fef60%26chksm%3D16fa36d4218dbfc21f88093ce01e5231cfea953220a23897c6380dc7b7bb46d461ab0d76c0ad%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2014-07-29：&lt;/a&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D202355912%26idx%3D1%26sn%3Dc003319e4c2ad30d21aec952605fef60%26chksm%3D16fa36d4218dbfc21f88093ce01e5231cfea953220a23897c6380dc7b7bb46d461ab0d76c0ad%26scene%3D21%23wechat_redirect&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-b68c31f654b63855b52a8b919b53f7a5_180x120.jpg&quot; data-image-width=&quot;800&quot; data-image-height=&quot;500&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;马拉松，突然变成一件严肃的事&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D202599201%26idx%3D1%26sn%3D34f906dbc2fc91de821e261693ea978a%26chksm%3D16e6e93d2191602b5dceb7696153a5e1562d8a7290d2fbc1172039f81bd009148f0790091ba2%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2014-08-24：&lt;/a&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D202599201%26idx%3D1%26sn%3D34f906dbc2fc91de821e261693ea978a%26chksm%3D16e6e93d2191602b5dceb7696153a5e1562d8a7290d2fbc1172039f81bd009148f0790091ba2%26scene%3D21%23wechat_redirect&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-7109e603e33e0c220ff3ac823e82123f_180x120.jpg&quot; data-image-width=&quot;800&quot; data-image-height=&quot;450&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;就酱紫跑了人生第一个马拉松&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D203056585%26idx%3D1%26sn%3D486e024a833e0289cc7c08dd5b048f39%26chksm%3D16efe7d521986ec37f8e1903a5d2eadfbfe37ac33202e504f47173fcd7555752e000d444ffc0%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2014-10-21：&lt;/a&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D203056585%26idx%3D1%26sn%3D486e024a833e0289cc7c08dd5b048f39%26chksm%3D16efe7d521986ec37f8e1903a5d2eadfbfe37ac33202e504f47173fcd7555752e000d444ffc0%26scene%3D21%23wechat_redirect&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-235f74e80c99f66cf0a1834fdc8ea0ac_180x120.jpg&quot; data-image-width=&quot;800&quot; data-image-height=&quot;446&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;我就是那个跑了北马的SB&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D211373609%26idx%3D1%26sn%3D8e8029d5f757b1c185e31fc43b493c7e%26chksm%3D166ccc35211b4523475c233b45506d4957f9eda3aa913992f3206fbd8eb5860991002801ea8e%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2015-10-08：&lt;/a&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D211373609%26idx%3D1%26sn%3D8e8029d5f757b1c185e31fc43b493c7e%26chksm%3D166ccc35211b4523475c233b45506d4957f9eda3aa913992f3206fbd8eb5860991002801ea8e%26scene%3D21%23wechat_redirect&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-d18ee9e853afa450c0726e040716421f_180x120.jpg&quot; data-image-width=&quot;670&quot; data-image-height=&quot;360&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;就这样，在波特兰跑完了人生第二个马拉松&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-10-10-86015814</guid>
<pubDate>Thu, 10 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>换个姿势读《资治通鉴》？</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-09-08-81203463.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/81203463&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d4c0e4d1c740883aae48ecffb9371a4d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;起屠维大渊献。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;读过《通鉴》的朋友看到这个起手式会会心一笑。这就跟「地振高冈，一派溪山千古秀」一样，是《通鉴》里的黑话。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;作为一个通读过《史记》（《书》《表》除外）的程序员，《资治通鉴》这样的大部头我读起来还是觉得非常不方便。首先是时间上的开销很大 —— 一页纸往往要读上半小时到一小时，其中免不了查阅词典，了解生僻字词的读音和释义；其次是难以深度阅读 —— 大量的地名人名和时间的关系，无法很快厘清，因而对错综复杂的历史事件读之依旧是懵懵懂懂；再次，无论是实体书的阅读，还是电子书的阅读，笔记都很难处理，比如人物的图像，事件（主要是战争）的地图，无法和原文很好地一一对照。最后，三百万字，二百九十四卷的内容，往往令读者还未开始阅读便自我放弃了。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可惜啊！隽美的文字，生动的典故，博大精深的出世入世之道，可以让人知兴替，明是非，鉴未来的浩瀚巨著，因为各种「不方便」便被我们放弃了！&lt;br/&gt;&lt;/p&gt;&lt;p&gt;于是我便萌生了制作《资治通鉴》胶片版的念头。我可阅读的时间往往比较碎片化，所以希望闲暇时可以读上一小段，这样不必抱着大部头望而兴叹；我希望文档本身是活的，帮助理解内容的佐料（注释，图片，地图等）可以不断以一种简单轻量的方式被添加进来；此外，文档本身应该是精美的，看着舒服。这便是这个胶片版的最初的目标。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;程序员干这种事情一定是效率为先：能用代码搞定的，一定不用蛮力。于是这个目标被细化成：&lt;br/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;选取质量上乘的《资治通鉴》 txt 版本&lt;/li&gt;&lt;li&gt;将文档切分成 294 卷，每卷一个胶片&lt;/li&gt;&lt;li&gt;自动生成符合 marp 格式的胶片，做一些格式上的处理&lt;/li&gt;&lt;li&gt;为引文生成不同的格式&lt;/li&gt;&lt;li&gt;每页胶片都自动放置一个 audio tag，可以播放本页的语音素材，比如：臣光曰&lt;/li&gt;&lt;li&gt;找相熟的小伙伴们创作每一张胶片的语音素材为每一张胶片自动生成语音素材&lt;/li&gt;&lt;li&gt;通读之，添加注释，相关图片和地图&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;切分文档这种活，&lt;code&gt;csplit&lt;/code&gt; 可以很好胜任，连代码都不用写；为了进一步把文字做成语音素材和胶片，需要花些心思 —— 得写个简单的 script 把切出来的一卷卷内容转成一个 JSON 数组，供后续生成胶片或生成语音素材之用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;这个 JSON 数组长这个样子，除了内容本身，还有是否生成 audio 素材的字段：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4ab5c479298564f3e5c6d33dfdae2a17_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;658&quot; data-rawheight=&quot;183&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;658&quot; data-original=&quot;https://pic4.zhimg.com/v2-4ab5c479298564f3e5c6d33dfdae2a17_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4ab5c479298564f3e5c6d33dfdae2a17_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;658&quot; data-rawheight=&quot;183&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;658&quot; data-original=&quot;https://pic4.zhimg.com/v2-4ab5c479298564f3e5c6d33dfdae2a17_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4ab5c479298564f3e5c6d33dfdae2a17_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;语音素材我一开始考虑集网友之力来做，后来发现科大讯飞的 TTS 质量已属不错，几乎绝大多数的场景读音和断词都是对的，就决定自动生成。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;胶片用一个叫 marp 的工具制作 —— 因其支持丰富的 markdown 语法和扩展，满足我对图片排版，注释和脚注等的需求。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;最终做出来的 slides 效果如下：&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7d98568328d770142efa3ce988a1f074_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;612&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-7d98568328d770142efa3ce988a1f074_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7d98568328d770142efa3ce988a1f074_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;612&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-7d98568328d770142efa3ce988a1f074_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7d98568328d770142efa3ce988a1f074_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a450782ea98719585c7ae8940a3b2139_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;607&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-a450782ea98719585c7ae8940a3b2139_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a450782ea98719585c7ae8940a3b2139_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;607&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-a450782ea98719585c7ae8940a3b2139_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a450782ea98719585c7ae8940a3b2139_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-04b4a2dc6902eaa3aebc3f0d0deb1b48_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;606&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-04b4a2dc6902eaa3aebc3f0d0deb1b48_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-04b4a2dc6902eaa3aebc3f0d0deb1b48_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;606&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-04b4a2dc6902eaa3aebc3f0d0deb1b48_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-04b4a2dc6902eaa3aebc3f0d0deb1b48_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt;手机上横屏观看的效果：&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-863cffeea79799f6e889826fd74ffb58_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;498&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-863cffeea79799f6e889826fd74ffb58_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-863cffeea79799f6e889826fd74ffb58_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;498&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-863cffeea79799f6e889826fd74ffb58_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-863cffeea79799f6e889826fd74ffb58_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;TTS 生成的语音效果也还是不错的，如定陶之战：&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;a class=&quot;video-box&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1152733522413346816&quot; target=&quot;_blank&quot; data-video-id=&quot;&quot; data-video-playable=&quot;true&quot; data-name=&quot;&quot; data-poster=&quot;https://pic3.zhimg.com/v2-82eb176ec72dc2ba4d0838e99604bbba.jpg&quot; data-lens-id=&quot;1152733522413346816&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;https://pic3.zhimg.com/v2-82eb176ec72dc2ba4d0838e99604bbba.jpg&quot;/&gt;&lt;span class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;&lt;span class=&quot;z-ico-extern-gray&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-ico-extern-blue&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;url&quot;&gt;&lt;span class=&quot;z-ico-video&quot;&gt;&lt;/span&gt;https://www.zhihu.com/video/1152733522413346816&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt;目前前十卷的整理工作已经初步完成，大家可以自行翻阅。语音的生成因为有 API 数量的限制，目前仅完成到一百卷。欢迎大家边贡献边阅读，贡献可参考：&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//github.com/tyrchen/tongjian&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/tyrchen/tongjian&lt;/a&gt;；阅读可直接点击（注：原来的 github pages 链接坏了，因为这个 repo 渐渐变得太大，github pages 每次 build 都会 timeout，所以我切到 netlify 了）：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tongjian.qiaopang.com&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;资治通鉴&lt;/a&gt;&lt;p&gt;&lt;br/&gt;未来我会一卷卷往下翻阅，顺手整理相关笔记。itunes 和 google play 的 podcast 的自动生成也在计划之中，大家看了之后有什么想法可以和我分享。毕竟，独乐乐，不如众乐乐。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;b&gt;禅定时刻&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d7687aa4f0c0e65ae40bced16b33e791_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;605&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-d7687aa4f0c0e65ae40bced16b33e791_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d7687aa4f0c0e65ae40bced16b33e791_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;605&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-d7687aa4f0c0e65ae40bced16b33e791_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d7687aa4f0c0e65ae40bced16b33e791_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-09-08-81203463</guid>
<pubDate>Sun, 08 Sep 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
