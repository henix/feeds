<div class="title-image"><img src="https://pic1.zhimg.com/v2-13aa2b7979c0ca3681c91c2a8afb51c1_b.jpg" alt=""></div><blockquote>也许这个故事可以给你一些启示，帮助你在公司内推广Rust<br/>原文： <a href="https://link.zhihu.com/?target=https%3A//jobs.zalando.com/tech/blog/story-rust/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">jobs.zalando.com/tech/b</span><span class="invisible">log/story-rust/</span><span class="ellipsis"></span></a>  <br/>说明：本文为摘要描述。</blockquote><p class="ztext-empty-paragraph"><br/></p><p>本文描述了zalando公司从Scala转向Rust的成功故事。<br/><br/><b>缘起：</b><br/><br/>2016年该文作者作为Scala开发者加入了Zalando公司。半年后，他们打算开始做一个新的应用，与此同时，团队内商量该使用什么新技术，Rust就在这时被提及，同时他们也用Rust快速实现了原型，但是最后这个新应用被取消了。但Rust却成为了该团队的一门候选语言。<br/><br/><b>碰壁：</b><br/><br/>不久之后，Zalando的主要服务（Scala Web）出现了一些问题。在高负载情况下，应用程序出现了大量的内存占用，有时也会耗尽内存。所以他们起了一个念头：用Rust重写整个服务会怎么样？经过几天的实验，重写了该服务，测试以后发现比之前的scala程序有更好的延迟，内存和CPU也占用更少。而且可以处理更多的负载。这时，他们的领导友情提醒，Rust并不是团队的「官方」技术，如果要将此Rust程序正式上线到生产环境，可能会出现严重的风险。最后经过Zalando技术团队内部协商，Rust最终被决定为「评估」状态，所以这件事就又就此作罢了。<br/><br/><b>破竹：</b><br/><br/>事情在2017年中期实施新的服务产生了转机。他们准备实现一个简单的流服务，就是执行一些RESTful调用再将数据写入redis。领导再次对他们表示了关切：是否可以真的上生产环境？新人来了以后如何接手Rust？于是他们在接下来的几周内，重点分析了应用程序中可能出现的问题，并找出了如何使用Rust来避免这些问题，核心原因是Rust的安全性和生产力，而且使用Rust可以有效地利用资源。他们有计划使用k8s来运行pods节省成本。就这样和领导「推杯换盏」持续说服花了半年时间，接近年底的时候他们都不知道到底Rust能不能上生产。<br/><br/>在2017年年底的时候，为了应对需求变化而对团队进行了重组。作者本来是6人团队，减少到4人。然后领导说：你们这是一个Rust团队。这真的是出乎了作者的意料。事情就这么落地了。他们从一个简单的CRUD项目开始逐步将旧的系统替换为Rust实现的新系统。最后，他们实现了最初的目标，将Rust引入了团队成为了「官方技术」。</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>