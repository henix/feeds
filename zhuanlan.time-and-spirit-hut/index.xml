<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description>编程、读书、学习、境界提升</description>
<language>zh-cn</language>
<lastBuildDate>Wed, 29 May 2019 19:04:23 +0800</lastBuildDate>
<item>
<title>Rust I18N 方案梳理</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-29-67402361.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/67402361&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0fa226d3612f254ff9b1e8d1a2b2b1ea_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;借着为Rust官网翻译的这次机会，仔细看了下Rust官网项目的I18N方案，发现这个方案很不错的。也顺便梳理了一些Rust生态中的其他方案，做了一个脑图分享，供有需要者参考。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-01b267665d80cbcbce47ce428a9a65c2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2718&quot; data-rawheight=&quot;4096&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2718&quot; data-original=&quot;https://pic3.zhimg.com/v2-01b267665d80cbcbce47ce428a9a65c2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-01b267665d80cbcbce47ce428a9a65c2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2718&quot; data-rawheight=&quot;4096&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2718&quot; data-original=&quot;https://pic3.zhimg.com/v2-01b267665d80cbcbce47ce428a9a65c2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-01b267665d80cbcbce47ce428a9a65c2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-29-67402361</guid>
<pubDate>Wed, 29 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第十七期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-27-67120477.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/67120477&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br/&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust日报已经成为了Rust社区群大家每天必看的内容。&lt;br/&gt;从2019年开始，日报小组成立，目前的动态由：@Chaos、 @Mike、 @Damody(台湾)轮番为大家播报。也欢迎感兴趣的朋友加入小组。&lt;br/&gt;每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br/&gt;独立日报订阅地址： - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Telgram Channel&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿里云语雀订阅&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;&lt;br/&gt;社区学习交流平台订阅： - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.cc论坛&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustforce.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust Force&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Ded7c9379-d681-47cb-9532-0db97d883f62&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;微信公众号：Rust语言学习交流&lt;/a&gt;&lt;br/&gt;2019-05-26&lt;/blockquote&gt;&lt;hr/&gt;&lt;h2&gt;官方新闻&lt;/h2&gt;&lt;h3&gt;「官方」Rust 2019年活动记录&lt;/h3&gt;&lt;p&gt;记录了从2018年12月到未来12月的一些活动。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/05/20/The-2019-Rust-Event-Lineup.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust 1.35 稳定版预发布&lt;/h3&gt;&lt;p&gt;1.35增加的一些特性摘要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;为&lt;code&gt;Box&amp;lt;FnOnce&amp;gt;&lt;/code&gt;, &lt;code&gt;Box&amp;lt;FnMut&amp;gt;&lt;/code&gt;, 和&lt;code&gt;Box&amp;lt;Fn&amp;gt;&lt;/code&gt;实现了FnOnce/FnMut/Fn。（来自社区 @crlf0710的贡献 ），相关PR：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/59500&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;#59500&lt;/a&gt;&lt;/li&gt;&lt;li&gt;支持将闭包转换为usnafe的函数指针。&lt;/li&gt;&lt;li&gt;增加了&lt;code&gt;wasm32-unknown-wasi&lt;/code&gt; Target。&lt;/li&gt;&lt;li&gt;线程在Debug模式下将显示ID。&lt;/li&gt;&lt;li&gt;&lt;code&gt;alloc::System&lt;/code&gt;实现了&lt;code&gt;Default&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;&lt;code&gt;dbg!()&lt;/code&gt;支持无参数调用。&lt;/li&gt;&lt;li&gt;ASCII转换速度提升了4倍速。&lt;/li&gt;&lt;li&gt;稳定了一些API。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/blob/stable/RELEASES.md%23version-1350-2019-05-23&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust 1.35 release note&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「官方」Unsafe Rust安全检查：栈借用模型 2.1&lt;/h3&gt;&lt;p&gt;ralfj比较高产，他负责Unsafe下内存模型相关的工作，目的是用miri来检测unsafe中的UB行为。为了达成这个目标，他陆续研究出以下一些借用模型：&lt;/p&gt;&lt;p&gt;栈借用模型1：&lt;/p&gt;&lt;p&gt;他在去年引入了栈借用模型1用于定义在unsafe内存模型中允许哪种别名。建立合理的别名规则，才能基于miri来检查unsafe下的UB行为。&lt;/p&gt;&lt;p&gt;该模型的核心思想是： 对于一个内存位置，逐步建立可跟踪的引用，形成一个栈结构。比如有一个&amp;amp;mut i32，可以对其重新借用获得一个新引用。这个新引用是必须用于此位置的引用，建立在旧引用之上。当新引用过期的时候，旧引用会被激活，就好像是栈结构push和pop。&lt;/p&gt;&lt;p&gt;在Safe Rust中，通常有借用检查来保护内存。但是在编写Unsafe代码的时候，借用检查就无法提供帮助了。所以，Rust核心团队就必须要定义一组规则，即使对于Unsafe代码来说也是非常有意义的。&lt;/p&gt;&lt;p&gt;栈借用模型2:&lt;/p&gt;&lt;p&gt;在上一篇文章中，ralfj又带来了栈借用模型的升级，栈借用2。&lt;/p&gt;&lt;p&gt;在栈借用1模型中，有一个概念叫做「frozen」，处于frozen位置的指针，只能读取，不能写入。它允许可变借用也能读取（检查粒度比较粗，把可变指针和共享指针同一化处理）。但是现在该模型被发现一个问题：当使用可变借用的时候，在该模型下可能会把某些未定义行为判断为合法。为了改进这个问题，栈借用模型2将精确跟踪允许访问的原生指针（更细粒度的检查，区分了共享指针和可变指针），而不是「frozen」。检查粒度比模型1更细。&lt;/p&gt;&lt;p&gt;栈借用模型2还有很多已知的问题，比如其实并没有真正使用到「栈」，反而更像「树」。但这还不是最后的结论。本文比较长，去原文阅读更多信息。&lt;/p&gt;&lt;p&gt;栈借用模型2.1:&lt;/p&gt;&lt;p&gt;在今天这篇文章中，ralfj又发现了上次的栈借用2模型存在一些问题：结合内部可变性，行为并不总是他们想要的。在模型2.0中，说到其实没有真正使用「栈结构」是在读取访问的时候，事实上进行「写访问」的时候，还是可以维护一个「栈结构」。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnsafeCell&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnsafeCell&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_uniq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// stack: [c: SharedReadWrite, inner_uniq: Unique]
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_shr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// adds a SharedReadWrite
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// stack: [c: SharedReadWrite, inner_uniq: Unique, inner_shr: SharedReadWrite]
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnsafeCell&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// invalidates inner_shr
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// stack: [c: SharedReadWrite]
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_val&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_shr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// error because the tag is not on the stack any more
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于这段代码，之前是「合法的」，但是用栈模型2.1来处理的话，就是UB。UnsafeCell是一个内部可变性容器，栈借用模型2.1会在栈中维护SharedReadWrite指针。像上面代码第4行，如果在设置了inner_shr之后，又重置了c变量容器内的值，栈借用结构就会改变，最后一行再使用inner_shr指针就可以检测到非法了，它是一个UB。但是在栈借用模式2.0中，最后代码执行的时候，堆栈将改为[c：SharedReadWrite，inner_shr：SharedReadWrite]，从而允许最终访问，这就是问题所在。&lt;/p&gt;&lt;p&gt;这样一来，相当于是栈模型1.0和栈模型2.0的结合？还可以在Unsafe代码导读中看到栈借用模型2.1的完整描述。&lt;/p&gt;&lt;p&gt;后续：ralfj将会写一篇关于栈借用模型的完整论文，当然，可能还是他自己的博士论文更重要吧，毕业最重要了。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Unsafe代码导读：wip/stacked-borrows&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Rust Nightly 1.36.0中已经弃用了&lt;code&gt;mem::uninitialized&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Rust的臭名昭著的&lt;code&gt;mem::uninitialized&lt;/code&gt;方法在今天的每晚构建中已被弃用。它的替代品&lt;code&gt;MaybeUninit&lt;/code&gt;已经开始稳定。如果你正在使用前者，则应尽快迁移到使用后者（可能在6周内达到稳定）。因为这是一个break change的修改。&lt;/p&gt;&lt;p&gt;这篇文章主要讨论了未初始化内存的性质以及如何在Rust中使用它。并且探讨了&lt;code&gt;mem::uninitialized&lt;/code&gt;为什么会被弃用，以及&lt;code&gt;MaybeUninit&lt;/code&gt;是什么。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gankro.github.io/blah/initialize-me-maybe/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/brek0w/heres_my_type_so_initialize_me_maybe/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;h2&gt;社区新闻&lt;/h2&gt;&lt;h3&gt;github 推出了beta 版的sponsor功能&lt;/h3&gt;&lt;p&gt;第一批里面就有diesel(Rust的ORM框架)的作者 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/users/sgrif/sponsorship&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sgrif/sponsorship&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;经过3年零8个月的工作，WebRender将向稳定的用户发货！&lt;/h3&gt;&lt;p&gt;今年5月21日，5％的稳定用户将开始启用WebRender。 &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bqmyzm/after_3_years_and_8_months_of_work_webrender_will/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;WebRender使用与游戏相同的基于GPU的加速技术重写了Firefox渲染架构，现在适用于一些选定的Win10设备。WebRender使用的现代架构主要是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;合成器中页面的表示不再是一组栅格化图层，而是现在的一个未经过图形化的显示列表。&lt;/li&gt;&lt;li&gt;合成和光栅化步骤已加入到单个GPU驱动的渲染步骤中。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有关更多详细信息，请参阅Lin Clark的Hacks系列文章。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mozillagfx.wordpress.com/2019/05/21/graphics-team-ships-webrender-mvp/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lin Clark的Hacks系列文章：WebRender如何摆脱jank&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/servo/webrender&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;webrender&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;actix-web已经发布了1.0 rc版本&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/actix-web/tree/web-v1.0.0-rc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;web-v1.0.0-rc&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;为什么选择Rust - 一个视频&lt;/h3&gt;&lt;p&gt;Buoyant CTO Oliver Gould (@olix0r) 和他的一个同事，参加了 The Open Source Show，大谈为什么选择Rust。&lt;/p&gt;&lt;p&gt;Buoyant 就是开发 Linkerd 这个 service mesh 产品的那个公司，懂了吧。&lt;/p&gt;&lt;p&gt;00:51 哪种类型的程序员使用Rust？ 02:29 为什么Linkerd使用Rust? 03:12 Rust的历史 04:24 Oliver使用Rust的经历&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//channel9.msdn.com/Shows/The-Open-Source-Show/All-About-Rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;俄罗斯的一家计算机夜校的Rust课程回顾记录&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//matklad.github.io/2019/05/19/rust-course-retrospective.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.youtube.com/playlist%3Flist%3DPLlb7e2G7aSpTfhiECYNI2EZ1uAluUqE_e&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;视频&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/matklad/rust-course&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Cargo 5730号issues的解决办法&lt;/h3&gt;&lt;p&gt;Cargo无法处理启用了不同feature的不同类型的依赖项，这对于no_std项目来说是一个大问题。所以有人写了一个cargo-5730库，来帮助解决此问题。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/cargo/issues/5730&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;#5730&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/auxoncorp/cargo-5730&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-5730&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「学术」gbdt-rs: 用纯Safe Rust编写的梯度提升决策树库&lt;/h3&gt;&lt;p&gt;gbdt-rs提供训练和推理功能。 它可以使用xgboost训练的模型来完成推理任务。gbdt-rs论文已被IEEE S＆P&amp;#39;19接受！&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/mesalock-linux/gbdt-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;gbdt-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/mesalock-linux/gbdt-rs/blob/master/gbdt.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相关论文&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「Rust编写命令行应用」是悲剧？&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1323bd359788b6a77401b20417557620_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1323bd359788b6a77401b20417557620_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-1323bd359788b6a77401b20417557620_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;他说的很对，Rust近两年确实是开启了一场轰轰烈烈的命令行大替换运动。但是不是悲剧呢？&lt;/p&gt;&lt;p&gt;按他的说法：Rust产出的这个命令行工具大小基本是4MB以上，性能要59ms，所以，这个太悲剧了。&lt;/p&gt;&lt;p&gt;拿Rust编写的替代ls命令的exa来说，brew安装大小是1.4MB，其实也没超过2MB。9012年了，你的磁盘空间就这么不够用吗，都干啥了？运行一次的时间我没测过，但我觉得就算真的是59ms我也是可以接受的，因为在我的反应时间之外，并没有多卡。我在本地尝试用exa列出TiKV（算得上一个大型项目了）的树形列表，也没有感觉到有卡顿。所以悲剧在哪？&lt;/p&gt;&lt;p&gt;软件写出来是让人用的吧？&lt;/p&gt;&lt;p&gt;exa的介绍第一句话就是： You list files hundreds of times a day. Why spend your time squinting at black and white text? 你每天列出数百次文件，为什么你要花时间眯着眼睛看黑白文字？&lt;/p&gt;&lt;p&gt;exa提供了很多功能，其中，高亮显示文本（区分各种元数据、文件、目录、或其他格式，比如symlinks），是大多数Rust编写的命令行工具的底线。这是Rust社区，Rust文化的体现，就是让大家感受到更好的「人体工程学」。除了高亮显示，还有很多功能，比如支持git、扩展属性等。&lt;/p&gt;&lt;p&gt;所以，为什么要重写exa呢？是为了给大家节省时间，提升工作效率啊，同志们！&lt;/p&gt;&lt;p&gt;同样，有很多优秀的Rust重写的命令行工具，比如ripgrep，你怎么不说说它的搜索性能呢？ &lt;/p&gt;&lt;p&gt;说了这么多，主要是想说明：&lt;/p&gt;&lt;p&gt;用Rust重写或者新开发的命令行App，是为了让咱们这个世界更加安全、美好。这个重写，并不是盲目的。在需要安全、需要性能的地方，也不会含糊。大家都试试新工具吧。&lt;/p&gt;&lt;p&gt;所以，到底什么是悲剧呢？大家想一想吧。  &lt;/p&gt;&lt;h3&gt;「讨论」对于单人主力维护的项目如何看待&lt;/h3&gt;&lt;p&gt;楼主覺得 actix 和 rust-postgres 很棒&lt;/p&gt;&lt;p&gt;但發現這兩個庫都只有一個大佬在當主力開發，他覺得庫只有一人維護對大公司來說不是問題&lt;/p&gt;&lt;p&gt;但對無力繼續維護的小客戶來說是個問題，大家覺得呢？&lt;/p&gt;&lt;p&gt;（其实很多项目都是单人在撑）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bsdnih/concerns_about_some_major_libs_being_onemanshows/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;在 Mac 下面调优 TiKV&lt;/h3&gt;&lt;p&gt;该文介绍了如何在Mac下对TiKV进行了性能测试。&lt;/p&gt;&lt;p&gt;里面介绍了一个工具：DTrace，可以方便在Mac下对Rust项目进行性能测试，并可以支持生成火焰图等报告。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/a80010878def&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;学习资源&lt;/h2&gt;&lt;h3&gt;case-studies: Rust实例探究&lt;/h3&gt;&lt;p&gt;该库展示了一些棘手的Rust代码示例，这些代码是dtolnay（syn作者，Rust宏的高手）在使用Rust（他自己和其他人）中的各种高级宏库时遇到的问题集合。该项目致力于对Rust宏开发的一个深刻洞察：擅长使用宏的人和宏专家之间的区别主要与他们擅长“宏”的程度是无关的。&lt;/p&gt;&lt;p&gt;这也许是学习Rust宏的一个非常好的案例。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/dtolnay/case-studies&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;case-studies&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;多语言混合项目的一些经验&lt;/h3&gt;&lt;p&gt;长文预警！作者在写自己的库bitvec的时候，开始考虑，如何将其用于其他语言，比如他如果在一个C++程序中想用bitvec怎么办？所以他开始设计一套针对为Rust crate编写FFI的惯用法。这篇文章记录了他从API设计到实现的一些经验，值得一读。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//myrrlyn.net/blog/misc/polyglot-projects&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/myrrlyn/bitvec&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bitvec&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/myrrlyn/bitvec/tree/feature/ffi&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bitvec ffi branch&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;一篇好文，教你如何在编程的过程中避免克隆&lt;/h3&gt;&lt;p&gt;作者分享了一些技巧和经验，推荐阅读。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//thenewwazoo.github.io/clone.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;用Rust写编译器&lt;/h3&gt;&lt;p&gt;其实用Rust尝试和玩儿写编译器的已经很多了。这篇文章讲得很详细。作者发现用Rust写编译器很舒服。他个人编码只花了大约 60 个小时。&lt;/p&gt;&lt;p&gt;做编译方面工作的朋友推荐阅读。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//thume.ca/2019/04/18/writing-a-compiler-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「小技巧」操作数组应该使用Chain而非Concat&lt;/h3&gt;&lt;p&gt;当应用程序需要迭代来自不同源的大量数组，那么具有C/C++背景的人可能会将所有数组复制到单个Vec中并迭代此Vec。在为连续Vec缓冲区分配堆内存方面，此策略将导致高成本。相反，将数据保留在原来的位置，使用Chain将它们链在一起去迭代会省不少成本。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//frehberg.com/2019/05/rust-arrays-make-chains-no-concat/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;交叉编译和静态链接Rust库&lt;/h3&gt;&lt;p&gt;该文作者的团队几年前用Rust重写了Python的特定后端服务，取得了巨大的成功。 现在，为了便于开发和测试，正在探索将部分C/C++代码库移动到Rust的想法。作为第一步尝试，他们先将Rust集成到现有代码中，而不是一次性重写所有项目。所以他们做了一系列实验，在C/C++中调用Rust。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/csis-techblog/cross-compiling-and-statically-linking-against-rust-libraries-2c02ee2c01af&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列」Rust for OOP系列 ：项目管理&lt;/h3&gt;&lt;p&gt;这位博主打算写一系列主题是Rust for OOP的文章，主要是针对有一定OOP语言开发经验的人来学习。这是第一篇，介绍了Cargo和crate、模块等知识。初学者可以看看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//oribenshir.github.io/afternoon_rusting/blog/project-management&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「异步Explained系列」Rust异步如何工作&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//levelup.gitconnected.com/explained-how-does-async-work-in-rust-c406f411b2e2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Explained: How does async work in Rust&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//itnext.io/explained-rust-futures-for-web-development-b1d0632490e7%3Fsk%3D9962ac666e1a56bc4fe53afc902008fa&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Explained: Futures in Rust for Web Development&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;使用Rust加速Ruby MRI&lt;/h3&gt;&lt;p&gt;一个使用Rust加速Ruby程序的案例，以i18n gem为示例讲述。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/swlh/speeding-up-ruby-mri-with-rust-a7c914d2f9d0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;切片索引检查导致的3倍性能下降问题一例&lt;/h3&gt;&lt;p&gt;作者发现下面这两片代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub fn insertion_sort(data: &amp;amp;mut [i32]) {
    for sorted in 0..data.len() {
        let min = (sorted..data.len()).min_by_key(|&amp;amp;i| &amp;amp;data[i]).unwrap();
        data.swap(sorted, min);
    }
}

pub fn insertion_sort_fast(data: &amp;amp;mut [i32]) {
    unsafe {
        for sorted in 0..data.len() {
            let min = (sorted..data.len())
                .min_by_key(|&amp;amp;i| data.get_unchecked(i))
                .unwrap();
            std::ptr::swap(data.get_unchecked_mut(sorted), data.get_unchecked_mut(min));
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;性能有3倍左右的差距&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;insertions sort          time:   [551.79 us 553.24 us 555.71 us]                               
insertions sort (fast)   time:   [187.75 us 188.15 us 188.84 us]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很奇怪。于是很多人给他建议。&lt;/p&gt;&lt;p&gt;换种写法，跟unsafe差不多快。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub fn insertion_sort(data: &amp;amp;mut [i32]) {
    for sorted in 0..data.len() {
        let min = data
            .iter()
            .enumerate().skip(sorted)
            .min_by_key(|(i, e)| *e)
            .unwrap()
            .0;
        data.swap(sorted, min);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开 &lt;code&gt;-C opt-level=z&lt;/code&gt; 编译标志，按下面方式写：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub fn insertion_sort_fast(data: &amp;amp;mut [i32]) {
    let mut data = data;
    while data.len() &amp;gt; 1 {
        let (head, tail) = data.split_first_mut().unwrap();
        let tailmin = tail.iter_mut().min().unwrap();
        if head &amp;gt; tailmin {
            std::mem::swap(head, tailmin);
        }
        data = tail;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有一种写法：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub fn insertion_sort_iter(data: &amp;amp;mut [i32]) {
    for sorted in 0..data.len() {
        let min = data[sorted..].iter().enumerate().min_by_key(|&amp;amp;(_, e)| e).unwrap().0;
        data.swap(sorted, min + sorted);
    }
}

insertions sort (fast) time:  [187.05 us 187.37 us 187.84 us]
insertions sort (iter) time:  [186.87 us 187.30 us 188.00 us]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;跟 unsafe 差不多。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bsvup3/300_performance_penalty_for_slice_index_checks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;项目、工具与库&lt;/h2&gt;&lt;h3&gt;cargo-permissions: 检测篡改依赖的Cargo权限&lt;/h3&gt;&lt;p&gt;为了在&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;中保持健康安全的包（crate），需要尽可能多地强制检测任何类型的漏洞。随着软件包之间依赖关系的使用增加，漏洞传播的风险也会增加。在NPM等其他平台上，我们已经看到了很多这样的安全问题。Rust开发人员需要一个工具来回答有关其依赖关系的问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;为什么png库使用网络层？&lt;/li&gt;&lt;li&gt;为什么http库使用文件系统层？&lt;/li&gt;&lt;li&gt;可能的场景（Possible scenarios）&lt;/li&gt;&lt;li&gt;读取未授权文件&lt;/li&gt;&lt;li&gt;请求不可信域名&lt;/li&gt;&lt;li&gt;执行未授权代码&lt;/li&gt;&lt;li&gt;盗取信息&lt;/li&gt;&lt;li&gt;盗用CPU资源&lt;/li&gt;&lt;li&gt;不安全地执行代码&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;cargo-permissions是一个概念证明的库（PoC），基于通过查找代码中的特定路径来检测恶意代码的想法，来保证crate的安全。此项目的主要思想是拥有一组与某些特定标准包列表相关联的权限。另一方面，通过AST分析，检查crate中使用的标准库。例如，如果包A开始使用&lt;code&gt;std::net&lt;/code&gt;库，则将获得net权限。所有使用包A作为依赖的crate都会间接获得net权限。遵循此方法，可以构建具有所有获取权限的依赖关系树。通过这组权限可以获取「超出控制范围的crate」尽可能多的信息。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/cargo-permissions-to-detect-tampered-dependecies/10236&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/fcsonline/cargo-permissions&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-permissions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;sauron ： Web 前端开发框架发布0.7 发布&lt;/h3&gt;&lt;h2&gt;frontend&lt;/h2&gt;&lt;p&gt;仿 elm 的风格做的。其实，也是基于 yew 之上的封装。目标是易用，好用。&lt;/p&gt;&lt;p&gt;作者：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ivanceras&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ivanceras&lt;/a&gt;，是一位有趣的开发者。&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ivanceras/svgbob&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;svgbob&lt;/a&gt;，&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ivanceras/spongedown&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;spongedown&lt;/a&gt;等，都是他的作品。&lt;/p&gt;&lt;h3&gt;「嵌入式Rust」erkos: 用Rust编写嵌入式操作系统&lt;/h3&gt;&lt;p&gt;erkos是日本的一名Rust开发者编写的嵌入式操作系统原型项目，目标架构是Arm Cortex-M系列。他也写了一篇文章介绍该项目。感兴趣的可以看看。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/garasubo/erkos&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;erkos&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40garasubo/my-project-to-write-embedded-os-in-rust-eadf83f5ee37&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;mini-aio: 新的异步IO库&lt;/h3&gt;&lt;p&gt;AdGear公司（一家实时广告平台）开源的库。这个库采用了与Rust中大多数其他异步IO库完全不同的方法：它实际上受到了Pony编程语言的启发。 因此，它不使用Futures，它不使用async/await，它只提供简单的trait。&lt;/p&gt;&lt;p&gt;比如，你想要实现HTTP server，只需要实现TcpListenNotify trait。该trait包含了listening、connected等方法。然后按正常的方式使用就可以，最终使用该库提供的event loop中执行：&lt;code&gt;event_loop.run()&lt;/code&gt;&lt;/p&gt;&lt;p&gt;之前日报里介绍过Pony的并发特点：引用能力（Reference Capabilities），Pony 语言中每种变量的类型都包含了有关如何在 actor 之间分享数据的信息。有点像Rust的借用检查器，同样保证数据安全性。所以Pony的异步是actor模型，和actix差不多。坊间有这样的说法，「Pony，当Rust遇上Erlang」。&lt;/p&gt;&lt;p&gt;所以，mini-aio也提供Handler trait，该trait允许接收从代码任何地方发来的消息并处理。&lt;/p&gt;&lt;p&gt;但要注意，此库处于alpha阶段。该库作者也写了不少Rust项目，可以看看他的个人仓库。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//antoyo.ml/mini-aio-new-async-io-library&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/FTP-rs/ftp-server-mini-aio&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;一个用mini-aio实现的FTP服务器：ftp-server-mini-aio&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/adgear/mini-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mini-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/antoyo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;作者antoyo GitHub仓库&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;coreutils: 为Unix和类Unix系统编写的Rust核心工具集&lt;/h3&gt;&lt;p&gt;该项目无意与GNU的coreutils 100％兼容，如Uutils的coreutils。瞄准最小但完整的实用程序集，只添加实用程序的几个实现和真正有用的函数之间通用的功能。目前该项目在寻求Review、贡献者、和建议。想要学习Rust的朋友，也可以从此项目入手。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/GrayJack/coreutils&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;coreutils&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;pyo3-file: pyo3的辅助库，方便处理类Python文件的对象&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/omerbenamram/pyo3-file/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pyo3-file&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rendy 0.2发布&lt;/h3&gt;&lt;p&gt;Rendy是基于gfx-hal的一个渲染引擎，属于Amethyst的项目。提供各种工具，如内存分配，资源管理，渲染图执行等。gfx-hal是99％的Vulkan API。 这就是Rendy存在的原因。而不是解决内存分配和纹理上传等低级任务，用户可以专注于创建令人敬畏的高性能渲染器。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/amethyst/rendy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rendy&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;强悍性能的 blake2b_simd 和 blake2s_simd 姐妹花&lt;/h3&gt;&lt;p&gt;BLAKE 和 BLAKE2 是密码学哈希函数，来源于 Dan Bernstein 的 ChaCha。特点是在64位机上，性能比 SHA-3, SHA-2, SHA-1, 和 MD5 等都高。属于目前最高性能的哈希函数之一。而这两个库的实现，也在追求性能的极致。&lt;/p&gt;&lt;p&gt;以下是一些性能评测数据：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;╭─────────────────────────┬────────────╮
│ blake2s_simd many::hash │ 2.454 GB/s │
│ blake2s_simd BLAKE2sp   │ 2.421 GB/s │
│ sneves BLAKE2sp         │ 2.316 GB/s │
│ blake2b_simd many::hash │ 2.223 GB/s │
│ blake2b_simd BLAKE2bp   │ 2.211 GB/s │
│ sneves BLAKE2bp         │ 2.150 GB/s │
│ blake2b_simd BLAKE2b    │ 1.008 GB/s │
│ OpenSSL SHA-1           │ 0.971 GB/s │
│ sneves BLAKE2b          │ 0.949 GB/s │
│ libsodium BLAKE2b       │ 0.940 GB/s │
│ OpenSSL SHA-512         │ 0.666 GB/s │
│ blake2s_simd BLAKE2s    │ 0.647 GB/s │
╰─────────────────────────┴────────────╯&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与 &lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;╭─────────────────────┬────────────╮
│ b2sum --blake2sp    │ 1.727 GB/s │
│ b2sum --blake2bp    │ 1.618 GB/s │
│ b2sum --blake2b     │ 0.887 GB/s │
│ coreutils sha1sum   │ 0.854 GB/s │
│ coreutils b2sum     │ 0.713 GB/s │
│ coreutils md5sum    │ 0.632 GB/s │
│ coreutils sha512sum │ 0.620 GB/s │
│ b2sum --blake2s     │ 0.603 GB/s │
╰─────────────────────┴────────────╯&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;评测的环境和对比请进下面的 Repo 查看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/BLAKE_%28hash_function%29&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Blake&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blake2.net/blake2.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;论文&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/oconnor663/blake2_simd%23performance&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;cargo-play&lt;/h3&gt;&lt;p&gt;一個好用的工具，讓你可以快速的編譯執行单个rust文件，并且可以支持第三方crate。不再需要把整個編譯项目目錄创建好&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/fanzeyi/cargo-play&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Into The Wild&lt;/h3&gt;&lt;p&gt;有人用rust寫了一個很像lf2(Little Fighter 2)的2.5D動作遊戲&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//azriel.im/will/2019/05/24/into-the-wild/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;hors 0.3.0&lt;/h3&gt;&lt;p&gt;一個類似 google search 找解答的工具&lt;/p&gt;&lt;p&gt;howdoi 的 rust 實作版本&lt;/p&gt;&lt;p&gt;比如你有個問題叫 &amp;#34;how to parse json in rust&amp;#34;&lt;/p&gt;&lt;p&gt;使用下列指令&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;hors &amp;#34;how to parse json in rust&amp;#34; -a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到解答&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;- Answer from https://stackoverflow.com/questions/30292752/how-do-i-parse-a-json-file

Solved by the many helpful members of the Rust community:

extern crate rustc_serialize;
use rustc_serialize::json::Json;
use std::fs::File;
use std::io::Read;

fn main() {
    let mut file = File::open(&amp;#34;text.json&amp;#34;).unwrap();
    let mut data = String::new();
    file.read_to_string(&amp;amp;mut data).unwrap();

    let json = Json::from_str(&amp;amp;data).unwrap();
    println!(&amp;#34;{}&amp;#34;, json.find_path(&amp;amp;[&amp;#34;Address&amp;#34;, &amp;#34;Street&amp;#34;]).unwrap());
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bsg9w4/hors_030_is_released_it_supports_google_search/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Mockiato ：一個嚴格友好的Mock測試庫&lt;/h3&gt;&lt;p&gt;對測試有需求的同學可以試試看&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#[cfg(test)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockiato&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;mockable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[cfg_attr(test, mockable)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[cfg(test)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;::&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[test]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet_the_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GreeterMock&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expect_greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial_eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;Hello world&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;Hello world&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bshn0f/announcing_mockiato_a_strict_yet_friendly_mocking/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;cargo-cache 0.2.1&lt;/h3&gt;&lt;p&gt;這個工具可以幫助你管理 ~/.cargo/ 或 ${CARGO_HOME}&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Cargo cache &amp;#39;/home/matthias/.cargo&amp;#39;:

Total size:                             7.22 GB
Size of 101 installed binaries:           909.51 MB
Size of registry:                         1.46 GB
Size of registry index:                     63.65 MB
Size of 3082 crate archives:                435.72 MB
Size of 2038 crate source checkouts:        963.10 MB
Size of git db:                           4.84 GB
Size of 107 bare git repos:                 980.81 MB
Size of 100 git repo checkouts:             3.86 GB
cargo cache query &amp;#34;^serde*&amp;#34;

Registry cache sorted by name:
    serde-0.6.15: 16988
    serde-0.7.15: 22719
    serde-0.8.23: 25824
[...]

Registry source cache sorted by name:
    serde-0.8.23: 168461
    serde-1.0.80: 477759
    serde-1.0.82: 485084&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bspb17/cargocache_021_released_conquer_your_cargo_home/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;漫游 Tox-rs，第一部分&lt;/h3&gt;&lt;p&gt;长文预警。&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/tox-rs/tox&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tox&lt;/a&gt; 是一个安全的P2P核心服务，加密传输，易于使用的基于DHT的网络。是toxcore的Rust实现，toxcore目前被用来做P2P安全IM服务核心。&lt;/p&gt;&lt;p&gt;Tox 原来是个C项目，作者用Rust通过审视发现，实现里面有不少漏洞，易被攻击。所以他用Rust重写了它。就是上面那个项目地址。现在作者，开始整理这几年的工作，开始生成文档。&lt;/p&gt;&lt;p&gt;有很多客户端可以使用，比如qTox。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//habr.com/ru/post/447994/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;ccl - 据说是目前为止性能最高的并发哈希库&lt;/h3&gt;&lt;p&gt;ccl 目前包含一个并发hashmap和一个并发时限缓存，初步的评测很强力。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;20k inserts + 20k mut lookups with replace 16C/32T Xeon 2.1Ghz Hetzner CXX51

hashbrown_rwlock        time:   [64.199 ms 64.234 ms 64.266 ms]                              

chashmap                time:   [15.190 ms 15.220 ms 15.251 ms]                      

dhashmap_ccl            time:   [1.0199 ms 1.0244 ms 1.0303 ms]     

concache                time:   [126.15 ms 126.61 ms 127.03 ms]   

crossbeam-skiplist      time:   [10.648 ms 10.681 ms 10.713 ms]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitlab.nebulanet.cc/xacrimon/rs-hm-bench&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitlab.nebulanet.cc/xacrimon/ccl&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-27-67120477</guid>
<pubDate>Mon, 27 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第十六期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-21-66310889.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/66310889&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br/&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust日报已经成为了Rust社区群大家每天必看的内容。&lt;br/&gt;从2019年开始，日报小组成立，目前的动态由：@Chaos、 @Mike、 @Damody(台湾)轮番为大家播报。也欢迎感兴趣的朋友加入小组。&lt;br/&gt;每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br/&gt;独立日报订阅地址： - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Telgram Channel&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿里云语雀订阅&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;&lt;br/&gt;社区学习交流平台订阅： - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.cc论坛&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustforce.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust Force&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Ded7c9379-d681-47cb-9532-0db97d883f62&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;微信公众号：Rust语言学习交流&lt;/a&gt;&lt;br/&gt;2019-05-19&lt;/blockquote&gt;&lt;hr/&gt;&lt;h2&gt;官方新闻&lt;/h2&gt;&lt;h3&gt;「官宣」Rust四周年&lt;/h3&gt;&lt;p&gt;从2015年5月15日Rust 1.0版发布至今，取得了如下成绩：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;连续四年StackOverflow的“最受喜爱的编程语言” （日报君感慨：近一年半看了很多社区内的各种动态，大家形容Rust用的最多的一个词是：Amazing，如果非要翻译成中文，我觉得「赞叹」比较好。）&lt;/li&gt;&lt;li&gt;稳定了嵌入式Rust&lt;/li&gt;&lt;li&gt;rustc成为第一个专注于支持WASM的编译器&lt;/li&gt;&lt;li&gt;Rust 2018 edition发布&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//Crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;Crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;通过了10亿次下载，拥有超过25,000个crate&lt;/li&gt;&lt;li&gt;现在全世界有超过100个聚会，分布在42个国家&lt;/li&gt;&lt;li&gt;6场新的大会在世界各地涌现（RustRush，RustCon Asia，Oxidize，Rust LATAM，Colorado Gold Rust，RustLab Italy）&lt;/li&gt;&lt;li&gt;很多大公司大平台陆续引入了Rust&lt;/li&gt;&lt;li&gt;也涌现了不少优秀的开源项目和产品&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这个清单如果继续写下去会很长，Rust已经在众多领域陆续开花了。Rust社区感谢有你！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/05/15/4-Years-Of-Rust.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;稳定cargo 离线模式 pr合并了&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/cargo/pull/6934&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Pr&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这个的意思是，以后可以指示 cargo 去本地找依赖包缓存。而不是每次都检查网络了。非常实用的进展。&lt;/p&gt;&lt;p&gt;等等稳定版的发布，到时有使用说明。&lt;/p&gt;&lt;h3&gt;Rust 1.34.2发布&lt;/h3&gt;&lt;p&gt;该版本属于紧急发布，主要是修复CVE-2019-12083的安全问题：&lt;/p&gt;&lt;p&gt;Error类型提供了一个向下转换函数(downcast_ref)，可以将指定的类型转换为&lt;code&gt;Error::type_id&lt;/code&gt;对应的类型。 问题是，如果你自己的类型实现Error，并让type_id返回与实际类型不同的东西。然后，当有人在你的类型上调用downcast时，它将完全通过安全代码转换为你想要的任何东西。&lt;/p&gt;&lt;p&gt;在Safe Rust中出现内存不安全的问题是无法容忍的。新版本的发布主要是将已经稳定的&lt;code&gt;Error::type_id&lt;/code&gt;紧急改为了Unstable。后续再慢慢考虑&lt;code&gt;Error::type_id&lt;/code&gt;的重新稳定化方案。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cve.mitre.org/cgi-bin/cvename.cgi%3Fname%3DCVE-2019-12083&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CVE-2019-12083&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/05/14/Rust-1.34.2.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//play.rust-lang.org/%3Fversion%3Dstable%26mode%3Ddebug%26edition%3D2018%26gist%3D90a7a46a265ac5cf46d51bd71d2e98e6&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;安全问题演示demo：Playground&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;wasm-bindgen v0.2.44 开始支持futures 0.3和async/await&lt;/h3&gt;&lt;p&gt;wasm 已經可以使用 async了，快看看怎麼用吧&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bphw68/wasmbindgen_v0244_has_support_for_futures_03_and/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rustwasm/wasm-bindgen/blob/master/CHANGELOG.md%230244&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;rust 1.36.0 加入了Cargo流水線加速編譯技術&lt;/h3&gt;&lt;p&gt;利用下圖的方式加速&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[-libA----|--------]
          [-libB----|--------]
                             [-binary-----------]
0s        5s       10s       15s                25s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cargo在内部构建了一个DAG来表示crate之间的依赖关系，通常需要等待crate依赖关系构建完成才会启动编译，但是现在对Cargo进行了优化，现在只要得到编译器为了开始下一次编译而生成的“元数据”即可开始编译，这就是所谓的「流水线（pipeline，就像工厂流水线一样，节省加工时间）」加速编译技术。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bpucwt/evaluating_pipelined_rustc_compilation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/evaluating-pipelined-rustc-compilation/10199&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;安全代码工作组正在为创建可重现的构建和构建时间沙盒化而努力&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-secure-code/wg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust 安全代码工作组&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-secure-code/cargo-repro&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-repro&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-secure-code/cargo-sandbox&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-sandbox&lt;/a&gt;&lt;/p&gt;&lt;p&gt;相关博文：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64586315&quot; class=&quot;internal&quot;&gt;「警惕」存在于crate中的安全风险&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;社区新闻&lt;/h2&gt;&lt;h3&gt;「论文」从理论到系统：编程语言教育的基础方法&lt;/h3&gt;&lt;p&gt;来自斯坦福大学CS242课程的设计者Will Crichton发表的关于将Rust和WebAssembly应用于编程教育的论文。&lt;/p&gt;&lt;p&gt;国内外高等学府，比如清华大学、斯坦福都在陆续开始将Rust应用于学生的编程教育中，国内最早教授Rust的大学没记错的话，还有新兴的上海科技大学。为什么呢？因为他们看到了Rust的教育价值。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//cs242.stanford.edu/f18/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CS242&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1904.06750&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;论文pdf&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Rust 职位：东京，机器人创业公司&lt;/h3&gt;&lt;p&gt;用 Rust 开发机器人？好诱惑。 这个职位在日本可能比较新鲜，创业公司，（估计）没有祖传代码，并且可以帮助办理签证，英语交流也可以，不强制要求日语。感兴趣的可以看看。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7cef0c56c72348e076a374bf130e0d63_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1590&quot; data-rawheight=&quot;2408&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1590&quot; data-original=&quot;https://pic4.zhimg.com/v2-7cef0c56c72348e076a374bf130e0d63_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7cef0c56c72348e076a374bf130e0d63_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1590&quot; data-rawheight=&quot;2408&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1590&quot; data-original=&quot;https://pic4.zhimg.com/v2-7cef0c56c72348e076a374bf130e0d63_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-7cef0c56c72348e076a374bf130e0d63_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.linkedin.com/jobs/cap/view/1162802661&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;job link&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用 Rust 來加速 Elixir 服務1100萬用戶&lt;/h3&gt;&lt;p&gt;discord過去一直使用erlang來做為主要服務的程式語言現在他們使用了rustler讓rust為 elixir 加速。去年他们的业务有了一项新的变化，就是更新会员列表的方式：只发送更新的部分，而不是给每个会员发送更新。这个变化给服务器端造成了一个大问题：我们需要一个能够容纳数十万个条目的数据结构，以特定的方式排序，可以接受和处理大量的变动，并且可以报告添加和删除事物的位置索引。&lt;/p&gt;&lt;p&gt;Elixir是一种函数式语言;它的数据结构是不可变的。这非常适合在编写elixir对代码进行正确性论证以及并可以享受的大量并发性。不可变数据结构的双刃剑是通过采用现有数据结构和操作以及创建全新数据结构来对变动建模。这意味着当有人加入服务器（内部称为公会）并拥有100,000名成员的成员列表时，他们必须构建一个包含100,001名成员的新列表。 BEAM VM非常快，并且每天都在变得更快。它试图在可能的情况下利用持久性数据结构，但在我们运营的规模上，这些大型列表无法足够快地更新。&lt;/p&gt;&lt;p&gt;因此团队在erlang和elixir提供的各种高性能数据结构中寻找解决办法，试过MapSet、List、OrderedSet到他们自己实现的SortedSet，终于找到了一个解决方案，但是在超过250,000名成员的公会时性能达到了上限。于是Discord团队准备尝试使用Rust来加速。&lt;/p&gt;&lt;p&gt;这不是Discord团队第一次使用Rust了，在他们的游戏商城里也大量用到了Rust，但Discord的核心服务是Elixir，主要是因为Elixir比较适合他们的场景。为了为Elixir加速，他们预留了一周时间使用Rustler（提供了安全的NIF绑定，方便为elixir编写rust扩展）进行概念验证，最终发现，Rust支持的NIF提供了巨大的性能优势，而无需牺牲易用性或内存（可以支持100w名成员）。&lt;/p&gt;&lt;p&gt;从此以后，Discord团队便快乐地享受着Rust带给他们的「快感」。Discord也开源了他们的SortedSet库，点击原文看更多详细。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bpw1aw/using_rust_to_scale_elixir_for_11_million/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.discordapp.com/using-rust-to-scale-elixir-for-11-million-concurrent-users-c6f19fc029d3%3Fgi%3Df41b3f0ac2b3&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rusterlium/rustler&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rustler&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;使用BinaryAST快速加载脚本&lt;/h3&gt;&lt;p&gt;关于JavaScript二进制AST&lt;/p&gt;&lt;p&gt;随着网站变得越来越复杂，JavaScript源代码的数量不断增加。依赖于大型JavaScript代码库会导致网站启动缓慢 - 通常速度慢得令人无法接受。这是因为存在两个瓶颈：解析和字节码编译JavaScript。不幸的是，浏览器几乎达到了两种操作的效率峰值。&lt;/p&gt;&lt;p&gt;我们（Mozilla，Bloomberg，Facebook，CloudFlare）目前正致力于针对JavaScript的特定领域编码，称为“BinAST”（“JavaScript二进制AST”的缩写）。 JavaScript二进制AST旨在打破瓶颈。当前的高级原型已经在所有最常见的框架上显示了JS解析改进了30％-50％，只需更改格式，我们相信我们可以进一步提高这一改进。编码可以构建为webdev工具链的一部分，或者由代理或CDN注入，因此可以在不更改原始网站的情况下自动提高最终用户的性能。&lt;/p&gt;&lt;p&gt;此编码目前在JavaScript TC39标准化过程中。它可以与现有的压缩技术（gzip，brotli等）一起使用，目前有cloudflare的一个Rust实现：binjs-ref。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/binast/binjs-ref&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;binjs-ref&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.cloudflare.com/binary-ast/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「视频」ChromeOS使用Rust为在Chromebook上运行的Linux应用构建安全的Linux环境&lt;/h3&gt;&lt;p&gt;本演讲视频将解释Linux for Chromebooks的架构以及使其易于使用的设计决策，包括使用Rust来构建安全的Linux沙箱环境。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bokgxr/chromeos_uses_rust_to_build_a_secure_linux/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust之父Graydon Hoare 在一个讲座中叙述了编译器的历史&lt;/h3&gt;&lt;p&gt;是给不列颠哥伦比亚大学（在加拿大）的学生开的讲座。&lt;/p&gt;&lt;p&gt;分别讲了 clang, swiftc, rustc, 和 gcc 等。文章有意思。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//venge.net/graydon/talks/CompilerTalk-2019.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Slide&lt;/a&gt; 在这里。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//thenewstack.io/rust-creator-graydon-hoare-recounts-the-history-of-compilers/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;一个查看编程语言发展趋势的方法：Wikipedia Pageviews Analysis&lt;/h3&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c19ea3dacd937ee6c5ccd947321613fd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;680&quot; data-rawheight=&quot;412&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;680&quot; data-original=&quot;https://pic2.zhimg.com/v2-c19ea3dacd937ee6c5ccd947321613fd_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c19ea3dacd937ee6c5ccd947321613fd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;680&quot; data-rawheight=&quot;412&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;680&quot; data-original=&quot;https://pic2.zhimg.com/v2-c19ea3dacd937ee6c5ccd947321613fd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c19ea3dacd937ee6c5ccd947321613fd_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tools.wmflabs.org/pageviews/%3Fproject%3Den.wikipedia.org%26platform%3Dall-access%26agent%3Duser%26start%3D2015-07%26end%3D2019-04%26pages%3DRust_%28programming_language%29%257CPython%257CC%252B%252B%257CC%252B%252B11%257CC%252B%252B20%257CC&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「视频」Rust：后40年的语言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DA3AdN7U24iU&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Are we await!(yet)?&lt;/h3&gt;&lt;p&gt;有人做了个网页，可以实时关注async/await的动态，特别是await。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//await.pietroalbini.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust在demoscene圈子中开始流行&lt;/h3&gt;&lt;p&gt;demoscene是一个国际计算机艺术亚文化，专注于制作演示：自成一体，有时甚至是极小的计算机程序，产生视听演示。 演示的目的是展示编程，视觉艺术和音乐技巧。 演示和其他demoscene制作在称为demoparties的节日上分享，由参加者投票并在线发布。&lt;/p&gt;&lt;p&gt;引用一段文章里提到的谈话：&lt;/p&gt;&lt;blockquote&gt; It&amp;#39;s a pretty good language. Better than C++, worse than C... Fucking awful learning curve, at least for me, but I&amp;#39;m having tons of fun with it, it kind of forces you to write better code, instead of crappy single use code.&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;看来Rust很受这群极客的喜爱。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.pouet.net/topic.php%3Fwhich%3D11664&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Manticore: 一个用Rust编写的研究性操作系统&lt;/h3&gt;&lt;p&gt;旨在探索parakernel OS架构。&lt;/p&gt;&lt;blockquote&gt; 对于希望最大限度利用硬件的服务器应用程序而言，操作系统越来越成为瓶颈。当I/O明显慢于CPU时，设计了许多传统的内核接口（例如POSIX）。但是，今天I/O变得越来越快，但单线程CPU性能却停滞不前。例如，40 GbE NIC可以比CPU访问其最后一级缓存（LLC）更快地接收缓存行大小的数据包，这使得操作系统跟上来自网络的数据包变得棘手。类似地，非易失性存储器（NVM）访问速度越来越接近DRAM速度，这对存储器的OS抽象提出了挑战。&lt;br/&gt; 为解决此操作系统瓶颈，服务器应用程序越来越多地采用内核旁路技术。例如，Seastar框架是在用户空间中实现的操作系统，它实现了自己的CPU和I/O调度程序，并尽可能地绕过Linux内核。 Parakernel是一种OS体系结构，它消除了许多操作系统抽象（类似于exokernel）并分区硬件资源（类似于多内核），以便通过增加应用程序级并行性和可预测的尾部延迟来促进高性能服务器应用程序。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/manticoreos/manticore&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;manticore&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;一个视频，从 Node.js 到 Deno(v8+Rust)&lt;/h3&gt;&lt;p&gt;Deno 是一个 JavaScript/TypeScript 运行时，作者其实就是 Node.js 作者。他觉得 nodejs 生态已经没办法再提高质量了，就创建了这个新项目 deno。下面是 Rafał Pocztarski 的视频分享。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bo0zk0/rafa%25C5%2582_pocztarski_from_nodejs_to_deno/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitpitch.com/rsp/ntd/ntd%23/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;一篇博文：Rust语言目前在机器学习领域的状态&lt;/h3&gt;&lt;p&gt;这篇文章作者非常喜欢 Rust，分析了一下目前 Rust 中的机器学习生态的情况。比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;const-generics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//crates.io/crates/generic-array&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;generic-array&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang-nursery/packed_simd&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;packed_simd&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/bheisler/RustaCUDA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RustaCUDA&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/bsteinb/rsmpi&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rsmpi&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rayon-rs/rayon&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rayon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-ndarray/ndarray&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ndarray&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//crates.io/crates/ndarray-linalg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ndarray-linalg&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//crates.io/crates/ndarray-stats&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ndarray-stats&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最后，作者打赌 Rust 在 ML/DL 领域能大展宏图。进一步的讨论可以进 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-ml&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-ml&lt;/a&gt; 进行。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ehsanmkermani.com/2019/05/13/state-of-machine-learning-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;为什么越来越多的知名项目用Rust来开发？&lt;/h3&gt;&lt;p&gt;社区@Mike写的一篇文章，侧重分享了为什么Rust适合区块链开发。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/DjQlyQeushrXM7QNxbY-cA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「比原生更快：在 Linux 内核中运行 WebAssembly」&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/F6yAE3-l_LI8l1ls5yLHqw&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;中文&lt;/a&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/wasmer/running-webassembly-on-the-kernel-8e04761f1d8e&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;英文&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;学习资源&lt;/h2&gt;&lt;h3&gt;「中文」Rust Async: 标准库futures api解析&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/66028983&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;如何使用纯Rust实现命令行自动补全&lt;/h3&gt;&lt;p&gt;命令行自动补全可深可浅，深的可以对子命令，参数项等，都自动补全。文章可以借鉴。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.joshmcguigan.com/blog/shell-completions-pure-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列」Rust for OOP系列介绍&lt;/h3&gt;&lt;p&gt;这位博主打算写一系列主题是Rust for OOP的文章，主要是针对有一定OOP语言开发经验的人来学习。可以先关注下。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//oribenshir.github.io/afternoon_rusting/blog/rust-for-oop&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;在Rust中创建C/C++ API&lt;/h3&gt;&lt;p&gt;这篇文章介绍了一些可以帮助自动生成C/C++ API的优秀工具。比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;bindgen， 可以根据给定的头文件自动创建Rust绑定代码。对C语言比较友好，但是对C++来说，用途有限。因为C++的继承处理比较麻烦。&lt;/li&gt;&lt;li&gt;cbindgen，可以方便地为Rust项目生成C API。它还支持以C++风格输出数据类型和模板等。&lt;/li&gt;&lt;li&gt;cpp，这是一个Rust crate，可以帮忙编写C++ API。它提供了一个&lt;code&gt;cpp!&lt;/code&gt;宏，可以在其中嵌入c++代码。它可以方便和cbindgen搭配使用。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;作者还总结了一些在Rust中创建C/C++API的准则：核心逻辑和FFI层之间应该明确分离，最好把FFI代码置于一个单独的crate中，这样做的好处是设计Rust API不会受到FFI的太多影响。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//karroffel.gitlab.io/post/2019-05-15-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;[教程]如何用rust为redis写一个client&lt;/h3&gt;&lt;p&gt;主要讲解了如何通过RESP实现一个redis client，并用rust实现了一个简单的demo，目前只实现了set和get命令，可以很方便的添加命令，项目地址如下redis-simple-rs欢迎大家完善。&lt;/p&gt;&lt;p&gt;@readlnh 投稿 &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/readlnh/redis-simple-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「小技巧」利用&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;和From实现可选参数&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//blog.keiruaprod.fr/2019/05/11/optional-parameters-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;一个很有价值的问题：Rust中哪些特性是零开销抽象的&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bo13qq/what_specifically_are_all_the_zerocost/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;link&lt;/a&gt; 在这里讨论的，现在我来整理一下，下面的都是零开销的抽象：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;tuple&lt;/li&gt;&lt;li&gt;gererics&lt;/li&gt;&lt;li&gt;traits&lt;/li&gt;&lt;li&gt;Option - 编译器最后（视情况）会把这一层包装优化掉&lt;/li&gt;&lt;li&gt;Vec&lt;/li&gt;&lt;li&gt;Box&lt;/li&gt;&lt;li&gt;Range&lt;/li&gt;&lt;li&gt;for-loops&lt;/li&gt;&lt;li&gt;mod&lt;/li&gt;&lt;li&gt;zero-sized types (C++ can&amp;#39;t do that because every value needs to have an address)&lt;/li&gt;&lt;li&gt;enum discriminant optimizations which I hope are done for Option and friends (storing None as 0)&lt;/li&gt;&lt;li&gt;链式迭代器可以产生更快的代码，有时比for循环还快&lt;/li&gt;&lt;li&gt;await和Futures的实现估计也会比C++的实现消耗更少的内存分配，await不是零开销的，但是会保持很少&lt;/li&gt;&lt;li&gt;宏、构建脚本和常量初始化可以输出结构化的值，也是零开销&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不是零开销的部分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&amp;amp;dyn Trait&lt;/li&gt;&lt;li&gt;..&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有人总结得好：&lt;/p&gt;&lt;p&gt;&lt;b&gt;零开销不是指没有开销，而是指与不用（Rust给出的）抽象而用手动直接模拟实现相比，没有额外的开销。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;通常来讲：当 Rust 有一个特性 F，它实现了一个编程的方面（解决了那样一种问题） A，现在你的程序要实现方面 A（解决那样一种问题），一般来说，只需要直接拿起 F 使用就对了，你手动重新实现（用 Rust 或 C 或其它语言），并不能带来更好的性能。&lt;/p&gt;&lt;p&gt;&lt;b&gt;C++的实现遵从零开销原则：你用不到的东西，不会为其付出代价。更进一步：对于你用到的东西，你没法再做得更好。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;对于Rust的情况来说，编译器会承担大部分的优化工作，所以在这方面（相对于C++来说）走得更远。换句话说，&lt;b&gt;实践中往往更容易写出慢的C++代码，而不是慢的Rust代码&lt;/b&gt;。对于你描述的情况，元组慢是因为它们实现在编译器的上面一层，因此优化工作留给了程序员来做。而在Rust中，元组是一等公民，它们会被编译器自动优化掉。&lt;/p&gt;&lt;h3&gt;零成本抽象&lt;/h3&gt;&lt;p&gt;官方核心团队无船同志的新博文，探讨了「零成本抽象」。&lt;/p&gt;&lt;p&gt;零成本抽象在C++跟Rust是一個很重要的概念&lt;/p&gt;&lt;p&gt;簡單來說就是：不希望有很大很重的runtime，並且可以在編譯時被優化。&lt;/p&gt;&lt;p&gt;作者覺得 rust 有幾個很棒的 零成本抽象&lt;/p&gt;&lt;ol&gt;&lt;li&gt;所有權、借用&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;保證内存的正確使用&lt;/p&gt;&lt;ol&gt;&lt;li&gt;迭代器、閉包函數&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以輕鬆的串接 map, filter 等函數做處理&lt;/p&gt;&lt;ol&gt;&lt;li&gt;await 异步函數&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;當前的await語法雖然還沒有確定，但使用pinning 做到零成本抽象是確定的&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Unsafe 函數、模块邊界&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;由於rust的語法複雜性，有很多實作會需要Unsafe的底層實作&lt;/p&gt;&lt;p&gt;這些Unsafe函數實作了零成本抽象的底層&lt;/p&gt;&lt;p&gt;讓我們在上層能安全的使用這些模块&lt;/p&gt;&lt;p&gt;另外无船同志还表示：trait对象目前不是零成本抽象，他想花点时间（至少需要18个月）去研究这个问题，然而总是有更优先的事情。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bpep6h/zero_cost_abstractions/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/zero-cost-abstractions/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「讨论」mio异步計時器如何使用？&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.rs/mio-extras/2.0.5/mio_extras/timer/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;官方說明文件&lt;/a&gt;&lt;/p&gt;&lt;p&gt;沒有範例程式碼，其實很難了解怎麼用&lt;/p&gt;&lt;p&gt;回覆中有人給出了答案&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bpbrux/could_someone_explain_to_me_how_mio_asynchronous/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;开发Rust的最佳IDE是什么？&lt;/h3&gt;&lt;p&gt;本文是网络里的各种意见汇总，尝试阐明利弊，供大家参考：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;IntelliJ IDEA 中使用IntelliJ Rust插件。褒贬各一。&lt;/li&gt;&lt;li&gt;CLion中使用Rust插件。 官方评论：可能是最接近「Rust专用IDE」的IDE。&lt;/li&gt;&lt;li&gt;VSCode中使用Rust插件。好评比例比较多。&lt;/li&gt;&lt;li&gt;(Neo)vim使用Rust插件。喜欢VIM的人用吧，也够用了。&lt;/li&gt;&lt;li&gt;Sublime。 抱怨比例比较多。&lt;/li&gt;&lt;li&gt;Atom。没啥评论。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;你推荐哪个？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/cloud-native-the-gathering/whats-the-best-ide-for-developing-in-rust-5087d46006f5&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;cerebrallib - 使用Rust写的brainfuck语言的虚拟机库&lt;/h3&gt;&lt;p&gt;练手项目&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// src/main.rs code
use cerebrallib::cerebral;
use std::io
fn main() {
    let code = String::from(&amp;#34;++++&amp;#34;);
    let mut vm = cerebral::CerebralVM::new(code, io::stdin(), io::stdout());
    vm.execute();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/dsouzadyn/cerebrallib&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;项目、工具与库&lt;/h2&gt;&lt;h3&gt;zemeroth - 一个六边形回合制游戏&lt;/h3&gt;&lt;p&gt;可以在线玩儿：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ozkriff.itch.io/zemeroth&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Online Play&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;这篇文章详细讲述了这个游戏的技术选型发展过程。目前，它综合使用了：ggez, WASM, itch.io, visuals, AI, campaign, tests 等技术。文章写得非常好，强烈推荐阅读。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ozkriff/zemeroth&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;zemeroth源码&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Couchbase Rust SDK 1.0 alpha.1 发布&lt;/h3&gt;&lt;p&gt;这是官方的 Rust SDK。Couchbase 是一个商业的 NOSQL 数据库。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/couchbaselabs/couchbase-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;ggez制作的小游戏：ggezFlappyCrabby&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DcPF41tl3-3c%26feature%3Dyoutu.be&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;视频&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/AndrewJakubowicz/ggezFlappyCrabby&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ggezFlappyCrabby&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Jazz：又一个用Rust实现的编程语言&lt;/h3&gt;&lt;p&gt;（可能是个人玩票的语言）&lt;/p&gt;&lt;p&gt;特点是使用了GCCJIT的静态语言，也就是libgccjit库，它提供了C接口，社区里也有它的Rust绑定库。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jazz-lang/Jazz&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Jazz&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;google-apis-rs: 适用于所有Google API的绑定和CLI生成器&lt;/h3&gt;&lt;p&gt;这个项目的gen目录下包含了很多相关组件&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Byron/google-apis-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;google-apis-rs&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;pegcel: syn风格的PEG解析器生成器&lt;/h3&gt;&lt;p&gt;可以创建syn风格的语法树，配合syn库使用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/CAD97/pegcel&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pegcel&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;wgpu-rs: wgpu的进一步封装&lt;/h3&gt;&lt;p&gt;适用于Rust社区的通用图形和计算需求，未来还会支持wasm和emscripten。wgpu是WebGPU的Rust实现，基于&lt;code&gt;gfx-hal&lt;/code&gt;。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/gfx-rs/wgpu-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wgpu-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/gfx-rs/wgpu&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wgpu&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;multiqueue2 - 支持广播能力的 mpmc 管道&lt;/h3&gt;&lt;p&gt;MultiQueue是由Sam Schetterer开发的mpmc库，但有一段时间没有更新。MultiQueue2是另外一个人觉得它非常有用，就接手开发了，修复了一些过时的API和bug，并且升级到2018 edition。基于crossbeam和futures 0.1实现。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/abbychau/multiqueue&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;使用gir crate生成GNOME库&lt;/h3&gt;&lt;p&gt;gir是一个用于为基于glib的库生成Rust绑定和用户API的工具，可以生成sys级的crate和安全API。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gtk-rs.org/docs-src/tutorial/gir_tutorial&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;cloud-hypervisor： 一个在KVM上运行的开源虚拟机监视器（VMM）&lt;/h3&gt;&lt;p&gt;intel又一个开源项目，目前还是实验性项目，基于rust-vmm实现。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/intel/cloud-hypervisor&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cloud-hypervisor&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;meta: 用于解析人类可读性文本的DSL解析库&lt;/h3&gt;&lt;p&gt;可用于语言设计，自定义格式和数据驱动开发。该库提供了一种叫做「meta语言」的规则，用来告诉程序如何阅读要解析的文档。这些文档都是人类可读格式的。&lt;/p&gt;&lt;p&gt;最小化示例：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;piston_meta&lt;/span&gt;::&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r#&amp;#34;hi James!&amp;#34;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&amp;#34;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_hi&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;:&lt;span class=&quot;s&quot;&gt;&amp;#34;james&amp;#34;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;Peter&amp;#34;&lt;/span&gt;:&lt;span class=&quot;s&quot;&gt;&amp;#34;peter&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say_hi&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#34;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Parse rules with meta language and convert to rules for parsing text.
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syntax_errstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_errstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;code&gt;&amp;#34;james&amp;#34;:true&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/pistondevelopers/meta&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;meta&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「嵌入式Rust」一个通用型嵌入式芯片烧录软件&lt;/h3&gt;&lt;p&gt;目前还只支持windows和st-link，长远目标是代替OpenOCD。目前比竞品好的地方是可以同时烧两个芯片，这样做双机通讯测试就不用插拔dongle了&lt;/p&gt;&lt;p&gt;来自 @洛佳&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/luojia65/nihao&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;serde-wasm-bindgen：让wasm-bindgen支持serde&lt;/h3&gt;&lt;p&gt;cloudflare出品&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/cloudflare/serde-wasm-bindgen&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;serde-wasm-bindgen&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;【嵌入式】为ESP32构建Rust开发环境&lt;/h3&gt;&lt;p&gt;文章在&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//quickhack.net/nom/blog/2019-05-14-build-rust-environment-for-esp32.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这里&lt;/a&gt;，不复杂。&lt;/p&gt;&lt;h3&gt;diesel-factories - 为测试要构建 factory_bot 的库&lt;/h3&gt;&lt;p&gt;在单元测试/集成测试中，你经常会需要插入一些数据到数据库中。而 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/thoughtbot/factory_bot&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;factory_bot&lt;/a&gt; 就是这样一种库，diesel-factories  是它基于 diesel 的实现。 如果你来自Ruby社区，肯定听说过factory_girl，理念相似。&lt;/p&gt;&lt;p&gt;这个库像下面一样使用。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// A normal Diesel model
#[derive(Clone, Queryable)]
struct Country {
    pub id: i32,
    pub name: String,
}

// Our factory
#[derive(Clone, Factory)]
#[factory(model = &amp;#34;Country&amp;#34;, table = &amp;#34;crate::schema::countries&amp;#34;)]
struct CountryFactory {
    pub name: String,
}

// Setting up what the default values are
impl Default for CountryFactory {
    fn default() -&amp;gt; Self {
        Self {
            name: &amp;#34;Denmark&amp;#34;.into(),
        }
    }
}

#[test]
fn some_test() {
    let con = establish_connection();

    // Using all the defaults
    let denmark = CountryFactory::default().insert(&amp;amp;con);
    assert_eq!(&amp;#34;Denmark&amp;#34;, denmark.name);

    // Defaults can be changed through builder methods
    let netherlands = CountryFactory::default()
        .name(&amp;#34;Netherlands&amp;#34;)
        .insert(&amp;amp;con);
    assert_eq!(&amp;#34;Netherlands&amp;#34;, netherlands.name);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/davidpdrsn/diesel-factories&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;memory-profiler - Nokia 用 Rust 写了一个 Linux 内存调优工具&lt;/h3&gt;&lt;p&gt;内存调优工具，主要用来分析内存泄漏什么的。当然，还有很多其它更详细的特性。我们来先睹为快。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7639fecd833ea385091c85749a0a2768_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1300&quot; data-rawheight=&quot;611&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1300&quot; data-original=&quot;https://pic1.zhimg.com/v2-7639fecd833ea385091c85749a0a2768_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7639fecd833ea385091c85749a0a2768_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1300&quot; data-rawheight=&quot;611&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1300&quot; data-original=&quot;https://pic1.zhimg.com/v2-7639fecd833ea385091c85749a0a2768_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7639fecd833ea385091c85749a0a2768_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/nokia/memory-profiler&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-21-66310889</guid>
<pubDate>Tue, 21 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第十五期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-12-65509043.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/65509043&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br/&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust日报已经成为了Rust社区群大家每天必看的内容。&lt;br/&gt;从2019年开始，日报小组成立，目前的动态由：@Chaos、 @Mike、 @Damody(台湾)轮番为大家播报。也欢迎感兴趣的朋友加入小组。&lt;br/&gt;每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br/&gt;独立日报订阅地址： - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Telgram Channel&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿里云语雀订阅&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;&lt;br/&gt;社区学习交流平台订阅： - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.cc论坛&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustforce.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust Force&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Ded7c9379-d681-47cb-9532-0db97d883f62&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;微信公众号：Rust语言学习交流&lt;/a&gt;&lt;br/&gt;2019-05-12 &lt;/blockquote&gt;&lt;hr/&gt;&lt;h2&gt;官方新闻&lt;/h2&gt;&lt;h3&gt;Await 语法预告&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64916694&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;await语法，官方代码里已经安排上了&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3516815c6b0b84b1ec359ae06fbd33e8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1708&quot; data-rawheight=&quot;1082&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1708&quot; data-original=&quot;https://pic1.zhimg.com/v2-3516815c6b0b84b1ec359ae06fbd33e8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3516815c6b0b84b1ec359ae06fbd33e8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1708&quot; data-rawheight=&quot;1082&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1708&quot; data-original=&quot;https://pic1.zhimg.com/v2-3516815c6b0b84b1ec359ae06fbd33e8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-3516815c6b0b84b1ec359ae06fbd33e8_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这里，还有一个工具 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/taiki-e/replace-await&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;replace-await&lt;/a&gt; 用于把之前的 await!(xxx) 这种宏代码迁移到 xxx.await 的写法。&lt;/p&gt;&lt;h3&gt;Cargo Vender 子命令即将登陆Cargo&lt;/h3&gt;&lt;p&gt;cargo vender支持将&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;中的依赖项保存到你本地目录下。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/cargo/pull/6869&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「嵌入式工作组」μAMP: 微控制器上的非对称多处理&lt;/h3&gt;&lt;p&gt;microamp（就是μAMP）是用于构建针对AMP系统的裸机应用程序，它是Real Time For the Masses（RTFM）多核版本的核心基础。&lt;/p&gt;&lt;p&gt;从历史上看，微控制器被设计为单核系统（SoC），但较新的设计越来越多地选择异构多核架构。例如，恩智浦的LPC43xx系列将Cortex-M4处理器与一个（或多个）Cortex-M0协处理器配对在一个封装中。这些设计的目标通常是优化功耗：例如，较低功率M0可以处理所有I/O，而M4内核仅被激活以执行昂贵的浮点/ DSP计算。&lt;/p&gt;&lt;p&gt;μAMP模型让我们可以针对这类系统，但也可以应用于同类多核系统，如Zynq UltraScale+EG或LPC55S69（2 ARM Cortex）上的双核实时处理器（2个ARM Cortex-R5内核）微控制器。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.japaric.io/microamp/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/japaric/microamp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;microamp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「Rust Wasm工作组」：wasm-tracing-allocator&lt;/h3&gt;&lt;p&gt;一個全局的分配器追踨器，可以追到wasm内存分配的情況&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rustwasm/wasm-tracing-allocator&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wasm-tracing-allocator&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「官方文档」Rust API 指南(api-guidelines)&lt;/h3&gt;&lt;p&gt;今天有个Reddit讨论贴，有人指出每个发布到&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;的crate都应该加上Readme说明和Repository地址（GitHub、GitLab等），以方便用户。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cargo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toml&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readme&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;README.md&amp;#34;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;https://github.com/user/my_awesome_crate&amp;#34;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;评论中有人提到Rust官方出品的「Rust API 指南(api-guidelines)」， Rust crate作者应该将它们视为开发Rust库时的一组重要参考因素（非必须遵守）。该指南还在完善中。该指南包含两部分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Checklist，用于发布crate时快速检查&lt;/li&gt;&lt;li&gt; 详细说明，对checklist中的内容做详细的说明&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bngvml/psa_please_put_readme_and_repository_links_in/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust-lang-nursery.github.io/api-guidelines/about.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;api-guidelines&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「Cli工作组」新工具：paw&lt;/h3&gt;&lt;p&gt;为了使Rust开发Cli应用的体验更加一流，更方便地解析命令行参数，官方Cli工作组开发了这个Paw库，目前还是WIP状态。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#[paw::main]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;paw&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;{:?}&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;paw::main&lt;/code&gt;宏允许&lt;code&gt;fn main&lt;/code&gt;接受任何实现&lt;code&gt;paw::ParseArgs trait&lt;/code&gt;的参数，所以，支持将&lt;code&gt;std::env::Args&lt;/code&gt;传递给&lt;code&gt;main&lt;/code&gt;，还允许传递&lt;code&gt;structopt&lt;/code&gt;实例。&lt;/p&gt;&lt;p&gt;假如paw的反响比较好，官方还将走RFC流程，将它引入标准库中。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.yoshuawuyts.com/paw/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-cli/paw&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;paw&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;h2&gt;社区新闻&lt;/h2&gt;&lt;h3&gt;Snip开源神经网络推理引擎Tract&lt;/h3&gt;&lt;p&gt;tract是Snips.ai公司嵌入式自然语言语音处理系统SnipFlow中的重要组件。该公司两年前在TensorFlow Lite出现之前打算将TensorFlow嵌入到库中方便他们执行模型，但是后来因为TensorFlow太过庞大复杂，不得不更改了计划。&lt;/p&gt;&lt;p&gt;新的计划就是使用Rust作为SnipFlow的主要语言，两年过去了，团队已经非常享受现代化软件环境带来的舒适感，而且比TensorFlow更容易交叉编译。&lt;/p&gt;&lt;p&gt;(其实tract上个月就开源了，只是这篇文章最近几天才发布)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/snips-ai/snips-open-sources-tract-cdc50f437ef2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/snipsco/tract&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tract&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//snips.ai/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;snips.ai&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;JavaScript二进制AST格式的参考实现&lt;/h3&gt;&lt;p&gt;关于JavaScript二进制AST&lt;/p&gt;&lt;p&gt;随着网站变得越来越复杂，JavaScript源代码的数量不断增加。依赖于大型JavaScript代码库会导致网站启动缓慢 - 通常速度慢得令人无法接受。这是因为存在两个瓶颈：解析和字节码编译JavaScript。不幸的是，浏览器几乎达到了两种操作的效率峰值。&lt;/p&gt;&lt;p&gt;我们（Mozilla，Bloomberg，Facebook，CloudFlare）目前正致力于针对JavaScript的特定领域编码，称为“BinAST”（“JavaScript二进制AST”的缩写）。 JavaScript二进制AST旨在打破瓶颈。当前的高级原型已经在所有最常见的框架上显示了JS解析改进了30％-50％，只需更改格式，我们相信我们可以进一步提高这一改进。编码可以构建为webdev工具链的一部分，或者由代理或CDN注入，因此可以在不更改原始网站的情况下自动提高最终用户的性能。&lt;/p&gt;&lt;p&gt;此编码目前在JavaScript TC39标准化过程中。它可以与现有的压缩技术（gzip，brotli等）一起使用&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/binast/binjs-ref&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;binjs-ref&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;柏林都举行了 100 场 Rust 碰面聚会了&lt;/h3&gt;&lt;p&gt;欧洲人很爱 Rust？大家都爱嘛。他们从 2014 年起就开始进行Rust聚会了。国内要更多点才好。不仅是大会，各个城市的小会也搞起来。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//berline.rs/2019/05/15/rust-hack-and-learn.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;RubyGems将支持带有Rust内置扩展的gem&lt;/h3&gt;&lt;p&gt;将添加一个新的构建器CargoBuilder，它将检测Cargo.toml文件并使用Cargo构建gem原生扩展。这减轻了为Ruby用户开发和发布Rust扩展的负担。现在希望找寻贡献者来落实这项计划。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rubygems/rubygems/issues/2726%23issuecomment-491482467&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rubygems/issues/2726&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;尝试在Cloudsmith上发布你的crate&lt;/h3&gt;&lt;p&gt;Cloudsmith是Puppet Labs旗下的DevOps平台，目前支持Cargo。你可以把Cloudsmith作为&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;之外的私人registry。&lt;/p&gt;&lt;p&gt;本文介绍了如何使用cloudsmith-cli工具将你的crate发布到它的平台上。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.cloudsmith.io/2019/05/01/worlds-first-private-cargo-registry/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/cargo/reference/registries.html%23using-an-alternate-registry&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo registry 相关文档&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64917441&quot; class=&quot;internal&quot;&gt;通过此文了解下Cargo Registry： 乱谈Cargo Registry &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「论文」Rust并发的实践研究&lt;/h3&gt;&lt;p&gt;该论文通过实现一个并发无锁HashMap来研究Rust类型系统如何影响并发数据结构的开发和改进。他们的代码库concache在GitHub上公开，是Rust语言中最快的并发HashMap之一，可以帮助降低并发程序中的瓶颈。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1904.12210&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1904.12210&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Paper pdf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/saligrama/concache&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;concache&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;combine-4.0.0-alpha.1 发布&lt;/h3&gt;&lt;p&gt;combine和nom的功能类似，但它的特点是建立在Rust的trait和类型系统之上，而不是宏。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Marwes/combine/blob/master/CHANGELOG.md%23400-alpha1-2019-05-07&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;完整的更新列表&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Xi-Editor作者新博文：现代GPU上的2D图形&lt;/h3&gt;&lt;p&gt;该作者花了一周的时间对「传统2D成像模型在现代图形世界中的未来」做了深入思考。2D图形建立在GPU之上是否是未来？作者认为是可行的，并且阐述了他的研究。感兴趣可以看看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//raphlinus.github.io/rust/graphics/gpu/2019/05/08/modern-2d.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「社区讨论」命名异步函数的返回类型&lt;/h3&gt;&lt;p&gt;该贴的作者认为，在async趋于稳定之前，还有个重要的讨论，就是支持异步函数的返回类型的自定义命名。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// or even to make the return type nameable
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooReturn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;FooReturn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/naming-the-return-type-of-an-async-function/10085&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;学习资源&lt;/h2&gt;&lt;h3&gt;使用Chrome对Rust进行全自动单元测试&lt;/h3&gt;&lt;p&gt;stretch的作者写的一篇博客。stretch是一个跨平台的FlexBox引擎。在Visly公司，该作者正参与一个为前端工程师构建的设计工具，其中用到FlexBox，需要在不使用WebView的情况下保持Web、iOS和Android三端保持相同的布局。意味着在移动设备上复制Web的布局。&lt;/p&gt;&lt;p&gt;这篇文章里，作者介绍了使用stretch的单元测试方案，是一套自动编写自动化测试的方案，他们称其为gentest系统。大概原理如下图：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5fceb421ee21786bf3df64c00edfe45b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1184&quot; data-rawheight=&quot;954&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1184&quot; data-original=&quot;https://pic4.zhimg.com/v2-5fceb421ee21786bf3df64c00edfe45b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5fceb421ee21786bf3df64c00edfe45b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1184&quot; data-rawheight=&quot;954&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1184&quot; data-original=&quot;https://pic4.zhimg.com/v2-5fceb421ee21786bf3df64c00edfe45b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-5fceb421ee21786bf3df64c00edfe45b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所有的测试用例都用html文件来描述，并且包含&lt;code&gt;id =“test-root”&lt;/code&gt;的布局。然后gentest使用WebDriver将此文件加载到Chrome head-less浏览器中。加载后，gentest将通过WebDriver向浏览器询问每个DOM节点的样式，大小和位置等信息，然后利用此信息，gentest再生成Rust单元测试，用于构建三端等效的FlexBox树给stretch api使用。最后可以统一通过&lt;code&gt;cargo test&lt;/code&gt;来完成测试。&lt;/p&gt;&lt;p&gt;gentest的另一个好处是，因为每个测试只是一个html文件，只需打开文件就可以在浏览器中显示它。并且他们还利用gentest生成一套基准测试，确保性能不会退化。&lt;/p&gt;&lt;p&gt;gentest有什么黑科技吗？&lt;/p&gt;&lt;p&gt;它也是开源的，我翻了一下源码，主要是三步：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用quote!来构建待生成测试代码的模板（TokenSteam）&lt;/li&gt;&lt;li&gt;将这些模板填充以后从TokenSteam转称字符串。&lt;/li&gt;&lt;li&gt; 使用&lt;code&gt;fs::write&lt;/code&gt;写到指定的目录文件中。&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/visly/unit-testing-rust-using-chrome-b8b93572a91d&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//vislyhq.github.io/stretch/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;stretch&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.w3.org/TR/webdriver/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;webdriver&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/vislyhq/stretch/blob/master/scripts/gentest&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;gentest&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;使用sccache在CircleCI上进行Rust缓存&lt;/h3&gt;&lt;p&gt;如果你的crates有很多依赖项，你可能已经注意到Rust编译阶段与实际运行测试相比需要花费很多时间。&lt;/p&gt;&lt;p&gt;缓解该问题的一种方法是缓存Rust编译的中间对象：大多数博客文章建议缓存Rust目标文件夹以减少编译时间。这种方法有一个主要问题，这个缓存文件会越来越大。&lt;/p&gt;&lt;p&gt;因此你需要定时清理这个缓存目录。该文推荐Mozilla的这个库sccache。该库的一个优点是可以配置文件夹的最大大小，当大小超过该限制时，会启动LRU清除算法（和Redis的差不多），清理掉部分缓存。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/mozilla/sccache&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sccache&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40edouard.oger/rust-caching-on-circleci-using-sccache-c996344f0115&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「Handmade Rust系列」Part 4 : 创建Vulkan绑定&lt;/h3&gt;&lt;p&gt;该系列将以Rust手工制作方式开发Vulkan渲染引擎，这是第四篇博文。该项目的特点是，不使用标准库，只使用核心库。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//stevenlr.com/posts/handmade-rust-4-vulkan-bindings/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/stevenlr/HandmadeRust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HandmadeRust&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Graphlib v0.3.0已经发布！&lt;/h3&gt;&lt;p&gt;Graphlib，用于Rust编程语言的简单而强大的图库。提供了图数据结构的一些API。比如BFS/DFS等迭代器。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/purpleprotocol/graphlib&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;graphlib&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust并发模式：通过共享sender通信&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-re-visited-9d42e6dfecfa&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用Usher和Hyper构建简单的API&lt;/h3&gt;&lt;p&gt;Usher是在基于Hyper实现的一个简单的库，用于开发简单的HTTP API服务。Usher的特色是提供了一些方便从URL中提取参数的方法，类似于actix的提取器，但是它更加轻量。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//whitfin.io/building-simple-apis-with-hyper-and-usher/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列文章：WebAssembly」Part II： 开始Rust&lt;/h3&gt;&lt;p&gt;该系列文章旨在使用Rust和WASM构建一个生产级的Web应用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/tech-lah/webassembly-part-ii-a-wasm-with-rust-2356dbc6526e&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用自定义工具链解决Rust和Glibc的问题&lt;/h3&gt;&lt;p&gt;Rust和Glibc在动态链接的时候可能会失效，该文作者建议使用自定义工具链来解决此问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//redbeardlab.com/2019/05/07/rust-and-glibc-version/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「视频」用Rust实现TCP Part3&lt;/h3&gt;&lt;p&gt;我们的老朋友Jon Gjengset，他的视频通常都是5小时左右。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D8GE6ltLRJA4&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列」使用Rust创建静态HTTP服务 Part I&lt;/h3&gt;&lt;p&gt;该教程没有使用http等基础crate，而是从零开始构建http 1.0服务，可供学习使用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//concisecoder.io/2019/05/11/creating-a-static-http-server-with-rust-part-1/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;项目、工具与库&lt;/h2&gt;&lt;h3&gt;swirlr-wasm：Swirlr的wasm版本&lt;/h3&gt;&lt;h2&gt;wasm&lt;/h2&gt;&lt;p&gt;日报Chaos君向你问好：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-880d0af74be099813075df60c752150c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;996&quot; data-rawheight=&quot;944&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;996&quot; data-original=&quot;https://pic1.zhimg.com/v2-880d0af74be099813075df60c752150c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-880d0af74be099813075df60c752150c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;996&quot; data-rawheight=&quot;944&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;996&quot; data-original=&quot;https://pic1.zhimg.com/v2-880d0af74be099813075df60c752150c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-880d0af74be099813075df60c752150c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;(很有意思，小图可以展示的比较清晰，但是放大以后就模糊了，感觉可以用来保护头像隐私)&lt;/p&gt;&lt;p&gt;swirlr可以将采集的图像沿阿基米德螺线路径的采样点渲染SVG。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//willdady.github.io/swirlr-wasm/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;demo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/willdady/swirlr-wasm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;swirlr-wasm&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;muscli ： 基于Pandora和音乐播放器实现的Tui&lt;/h3&gt;&lt;p&gt;音乐数据来自于Pandora流媒体平台&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/CMatri/muscli&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;muscli&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;stevenarella: 用Rust编写的多协议兼容Minecraft客户端&lt;/h3&gt;&lt;p&gt;作者声明：just doing this for fun。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/iceiix/stevenarella&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;stevenarella&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;ifmt - 插值式格式化宏库&lt;/h3&gt;&lt;p&gt;其实其它语言很多都有了。Rust一直显得比较生硬，格式化一个带变量值的字符串，要这样写：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;println!(&amp;#34;x: {x}, y: {y}, x + y: {sum}&amp;#34;, x=x, y=y, sum=x+y);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用这个库，可以这么写了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;let four = 4;
iprintln!(&amp;#34;four plus four is: {four + 4}&amp;#34;);
// four plus four is: 8
iprintln!(&amp;#34;here&amp;#39;s a hex number: 0x{0xb0bi64 * 1321517i64 :x}&amp;#34;);
// here&amp;#39;s a hex number: 0xdeadbeef
iprintln!(&amp;#34;here&amp;#39;s a debugging value: {Some(four):?}&amp;#34;);
// here&amp;#39;s a debugging value: Some(4)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作者把一套宏全部“升级”了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;format!      -&amp;gt; iformat!
print!       -&amp;gt; iprint!
println!     -&amp;gt; iprintln!
eprint!      -&amp;gt; ieprint!
eprintln!    -&amp;gt; ieprintln!
write!       -&amp;gt; iwrite!
writeln!     -&amp;gt; iwriteln!
format_args! -&amp;gt; iformat_args!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ct-austin/ifmt&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ifmt&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;ansi-parser - ANSI转义序列解析库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/ANSI%25E8%25BD%25AC%25E4%25B9%2589%25E5%25BA%258F%25E5%2588%2597&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ANSI转义序列&lt;/a&gt; 就是这种 &amp;#34;This is \u{1b}[3Asome text!&amp;#34;，我们平时在终端下看到的文字的色彩啊，一些特效格式啊什么的，都是按这个标准来做的。&lt;/p&gt;&lt;p&gt;相似的库还有 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jwilm/vte&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vte&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitlab.com/davidbittner/ansi-parser&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;test-exec - 用于测试命令行工具的库&lt;/h3&gt;&lt;p&gt;作者也是写命令行工具的时候，觉得测试很不舒服，于是写了这个方便测试的工具。很不错。&lt;/p&gt;&lt;p&gt;比如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;let output = exec!{
    &amp;#34;my_bin&amp;#34;,
    args: [&amp;#34;-p&amp;#34;, &amp;#34;/&amp;#34;],
    cwd: &amp;#34;/tmp&amp;#34;,
    env: {
        THREADS: &amp;#34;4&amp;#34;
    },
    stdin: b&amp;#34;show-hidden&amp;#34;,
    timeout: 60000,
    log: true,

    code: 0,
    stdout: b&amp;#34;Started program... Done.&amp;#34;,
    stderr: []
};

// output can be used here like a normal process::Output&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Draphar/test-exec&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;dystopia - 匿名防追踪的网络代理&lt;/h3&gt;&lt;p&gt;用了Tor技术，其貌似是要提供一种匿名服务。比如要访问&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//google.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;google.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;curl https://google.com -x 54.95.171.65:2888 -L&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;项目还在早期阶段，值得关注。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/tbrand/dystopia&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust与sed命令不得不说的故事&lt;/h3&gt;&lt;p&gt;x12pp是用Rust实现的可以漂亮地打印X12 EDI格式的Cli工具。作者写了一篇博文，阐述了他使用sed命令处理X12的问题，这些问题促使他使用Rust来写x12pp。并且写出来的工具性能上可以轻松击败sed这样的通用工具。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/clarkema/x12pp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;x12pp&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.lambdafunctions.com/articles/racing-sed-with-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;finshir - 一种 Low&amp;amp;Slow 流量产生器&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.cloudflare.com/learning/ddos/ddos-low-and-slow-attack/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Low&amp;amp;Slow&lt;/a&gt; 是一种DDos攻击方法，利用产生大量的慢请求来保持住对服务器资源的消耗，从而影响正常请求的访问。finshir 就是这样一种用Rust写的工具。有两点高光：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用了 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Xudong-Huang/may&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;may&lt;/a&gt;，对，就是黄旭东大佬的May协程库&lt;/li&gt;&lt;li&gt;可以配合 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Tor_%2528anonymity_network%2529&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tor&lt;/a&gt; 使用，实现匿名性&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Gymmasssorla/finshir&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;riv - 图片查看工具&lt;/h3&gt;&lt;p&gt;这是一个命令行工具。其使用 SDL2 来渲染图片显示。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/davejkane/riv&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列」使用 Rust 实现一种新语言 Part I&lt;/h3&gt;&lt;p&gt;作者正在练习实现一种语言 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/epellis/esta&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;esta&lt;/a&gt;。第一步就是生成 AST（Abstract Syntax Tree 抽象语法树）。作者详尽地记录了怎样从头开始撸一门语言，这个文章是一个系列文章，想要自己设计语言和学习编译原理的同学强烈推荐阅读。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//nedellis.com/2019/05/08/esta_1/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;rust-hypervisor-firmware: 一個簡單的 kvm firmware&lt;/h3&gt;&lt;p&gt;intel出品，代码不多，看上去确实简单，可以学习如何用rust实现一个kvm。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bn1b47/simple_kvm_firmware_written_in_rust_from_intel/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/intel/rust-hypervisor-firmware&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;intel/rust-hypervisor-firmware&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;wasm-flate: 使用WASM对客户端文件进行超快压缩的工具&lt;/h3&gt;&lt;p&gt;支持GZIP，ZLIB和DEFLATE压缩和解压缩&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/drbh/wasm-flate&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wasm-flate&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;hors: howdoi的Rust实现&lt;/h3&gt;&lt;p&gt;Howdoi是Go实现的通过命令行获取即时的编程问题解答的工具，hors是它的Rust实现版本。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-22373089579b211685fc3a38517d289e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;680&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;680&quot; data-original=&quot;https://pic3.zhimg.com/v2-22373089579b211685fc3a38517d289e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-22373089579b211685fc3a38517d289e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;680&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;680&quot; data-original=&quot;https://pic3.zhimg.com/v2-22373089579b211685fc3a38517d289e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-22373089579b211685fc3a38517d289e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/WindSoilder/hors&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hors&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-12-65509043</guid>
<pubDate>Sun, 12 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Await语法预告</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-08-64916694.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64916694&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ad959a51cfee54f1e092290bb75fdda3_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;今天看了withoutboats发的博文，是关于Rust await语法的最后讨论结果，也许会有变化，但应该差不多了。  &lt;br/&gt;这我看完文章后总结的一张脑图，分享一下。&lt;br/&gt;原文： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/await-decision/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;boats.gitlab.io/blog/po&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;st/await-decision/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot; data-rawwidth=&quot;4096&quot; data-rawheight=&quot;2319&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;4096&quot; data-original=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot; data-rawwidth=&quot;4096&quot; data-rawheight=&quot;2319&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;4096&quot; data-original=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;今天刚发现，其实Rust团队已经默默的安排上了&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f6eb30f556c72782c9ef8cd787e3db03_b.jpg&quot; data-rawwidth=&quot;1708&quot; data-rawheight=&quot;1082&quot; data-size=&quot;normal&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1708&quot; data-original=&quot;https://pic4.zhimg.com/v2-f6eb30f556c72782c9ef8cd787e3db03_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f6eb30f556c72782c9ef8cd787e3db03_b.jpg&quot; data-rawwidth=&quot;1708&quot; data-rawheight=&quot;1082&quot; data-size=&quot;normal&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1708&quot; data-original=&quot;https://pic4.zhimg.com/v2-f6eb30f556c72782c9ef8cd787e3db03_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f6eb30f556c72782c9ef8cd787e3db03_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-08-64916694</guid>
<pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Await语法预告</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-07-64916694.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64916694&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ad959a51cfee54f1e092290bb75fdda3_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;今天看了withoutboats发的博文，是关于Rust await语法的最后讨论结果，也许会有变化，但应该差不多了。  &lt;br/&gt;这我看完文章后总结的一张脑图，分享一下。&lt;br/&gt;原文： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/await-decision/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;boats.gitlab.io/blog/po&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;st/await-decision/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;4096&quot; data-rawheight=&quot;2319&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;4096&quot; data-original=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;4096&quot; data-rawheight=&quot;2319&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;4096&quot; data-original=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-2d1e5c7e407e5735abd3f888c81fac43_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-07-64916694</guid>
<pubDate>Tue, 07 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第十四期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-05-64722695.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64722695&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br/&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust日报已经成为了Rust社区群大家每天必看的内容。&lt;br/&gt;从2019年开始，日报小组成立，目前的动态由：@Chaos、 @Mike、 @Damody(台湾)轮番为大家播报。也欢迎感兴趣的朋友加入小组。&lt;br/&gt;每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br/&gt;独立日报订阅地址： - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Telgram Channel&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿里云语雀订阅&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;&lt;br/&gt;社区学习交流平台订阅： - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.cc论坛&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustforce.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust Force&lt;/a&gt; - &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Ded7c9379-d681-47cb-9532-0db97d883f62&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;微信公众号：Rust语言学习交流&lt;/a&gt;&lt;br/&gt;2019-05-05&lt;/blockquote&gt;&lt;hr/&gt;&lt;h2&gt;官方新闻&lt;/h2&gt;&lt;h3&gt;「官方」Unsafe Rust安全检查：栈借用模型 2&lt;/h3&gt;&lt;p&gt;ralfj比较高产，他负责Unsafe下内存模型相关的工作，目的是用miri来检测unsafe中的UB行为。&lt;/p&gt;&lt;p&gt;他在去年引入了栈借用模型1用于定义在unsafe内存模型中允许哪种别名。建立合理的别名规则，才能基于miri来检查unsafe下的UB行为。&lt;/p&gt;&lt;p&gt;该模型的核心思想是： 对于一个内存位置，逐步建立可跟踪的引用，形成一个栈结构。比如有一个&amp;amp;mut i32，可以对其重新借用获得一个新引用。这个新引用是必须用于此位置的引用，建立在旧引用之上。当新引用过期的时候，旧引用会被激活，就好像是栈结构push和pop。&lt;/p&gt;&lt;p&gt;在Safe Rust中，通常有借用检查来保护内存。但是在编写Unsafe代码的时候，借用检查就无法提供帮助了。所以，Rust核心团队就必须要定义一组规则，即使对于Unsafe代码来说也是非常有意义的。&lt;/p&gt;&lt;p&gt;在今天这篇文章中，ralfj又带来了栈借用模型的升级，栈借用2。&lt;/p&gt;&lt;p&gt;在栈借用1模型中，有一个概念叫做「frozen」，处于frozen位置的指针，只能读取，不能写入。它允许可变借用也能读取（检查粒度比较粗，把可变指针和共享指针同一化处理）。但是现在该模型被发现一个问题：当使用可变借用的时候，在该模型下可能会把某些未定义行为判断为合法。为了改进这个问题，栈借用模型2将精确跟踪允许访问的原生指针（更细粒度的检查，区分了共享指针和可变指针），而不是「frozen」。&lt;/p&gt;&lt;p&gt;栈借用模型2还有很多已知的问题，比如其实并没有真正使用到「栈」，反而更像「树」。但这还不是最后的结论。本文比较长，去原文阅读更多信息。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Cargo 2019 Roadmap&lt;/h3&gt;&lt;p&gt;nrc在他的博客上发布了Cargo 2019的目标：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;交叉编译。希望支持更多的目标。&lt;/li&gt;&lt;li&gt;插件。也称自定义命令、任务或工作流程。希望使插件更加强大、可靠和实用。&lt;/li&gt;&lt;li&gt;编译时间。这个目标是为Rust的目标服务。虽然这主要是rustc的问题，但是cargo也可以给予一些辅助。目前一个想法是：允许用户构建主crate而无需等待其他crate依赖。另一个想法是：目前只能是依赖的第一个crate构建完成才能开始第二个crate，但实际上还可以改进，比如第一个依赖的crate的元数据生成以后就可以开始构建第二个的元数据。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这是Cargo在2019年要努力的重点。另外还有两个小目标：解决技术债务和完成即将完成的工作（比如Cargo features的长期改善计划）。&lt;/p&gt;&lt;p&gt;目前将近完成的一些工作：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;自定义crate注册机构（私有的&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;）（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/cargo/issues/6589&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;custom registries&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;离线模式（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/cargo/issues/4686&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;offline mode&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;配置文件依赖（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/blob/master/text/2282-profile-dependencies.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;profile dependencies&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;公共/私有依赖（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/44663&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;public &amp;amp; private dependencies&lt;/a&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.ncameron.org/blog/cargo-in-2019/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;const generics 當前進度報告&lt;/h3&gt;&lt;p&gt;目前還在实现中&lt;/p&gt;&lt;p&gt;&lt;code&gt;ConstEvaluatable(expr)&lt;/code&gt; 已經做好，現在一定要传入expr&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/44580%23issuecomment-488819344%3Ftdsourcetag%3Ds_pctim_aiomsg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bkcgmp/const_generics_a_summary_of_progress_so_far/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;社区新闻&lt;/h2&gt;&lt;h3&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;的crate下载总数达到了10亿&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ec8791cce23712dd46c15e2e61e84170_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1704&quot; data-rawheight=&quot;627&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1704&quot; data-original=&quot;https://pic1.zhimg.com/v2-ec8791cce23712dd46c15e2e61e84170_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ec8791cce23712dd46c15e2e61e84170_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1704&quot; data-rawheight=&quot;627&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1704&quot; data-original=&quot;https://pic1.zhimg.com/v2-ec8791cce23712dd46c15e2e61e84170_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ec8791cce23712dd46c15e2e61e84170_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3&gt;建立 Rust 私有仓库&lt;/h3&gt;&lt;p&gt;Rust 1.34.1 版本，推出了一项新功能，允许用户建立自己的私有仓库。这篇作者建立了世界上第一个 Rust 私有仓库。请参考。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.cloudsmith.io/2019/05/01/worlds-first-private-cargo-registry/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;清华大学陈渝副教授：尝试将Rust/Risc-V等新技术用于系统类课程教学&lt;/h3&gt;&lt;p&gt;看看对学生有啥帮助。这里陈教授给出了一些学习资料：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/LearningOS/rcore_step_by_step&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;面向初学者的代码/文档信息&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rcore-os/rCore&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;面向对rust比较熟悉的同学的信息&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/oscourse-tsinghua/rcore_plus/wiki&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;以及&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有兴趣学习/参与开发 rust-based os kernel的朋友，欢迎与陈教授联系和交流（他也在Rust社区微信群和Rust编程之道的读者群里）。&lt;/p&gt;&lt;h3&gt;Sonic：用Rust编写的Elasticsearch的极简替代品&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/63963140&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;想不想在机器学习领域用上 Rust？&lt;/h3&gt;&lt;p&gt;这是 Rust 的痛。从最早的 leaf，到后来的 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/AtheMathmo/rusty-machine&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rusty-machine&lt;/a&gt;, &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/maciejkula/rustlearn&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rustlearn&lt;/a&gt;，再到 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/spearow/juice&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;juice&lt;/a&gt; 。没有一个活得好的。只怪没有一个好爹？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/LukeMathWalker&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;LukeMathWalker&lt;/a&gt; （ndarray 和 ndarray-stats 的重要参与者）仔细分析了这一现状。他认为 Rust 在这一领域其实是非常有潜力的。一个 ML 生态的基础有三个基石：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;n维数组运算库&lt;/li&gt;&lt;li&gt;dataframes&lt;/li&gt;&lt;li&gt;ML 模型接口&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ndarray 已经初具成效了。现在作者准备在后面两个上做一些努力，现在他正在做一些讨论和调查。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-ml/discussion/issues/1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;讨论1&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-dataframe/discussion/issues/1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;讨论2&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.google.com/presentation/d/1dOqqosLPtBixIVSvNy5-vLVAapfFUMm3sV4TR9v-Fkw/edit%23slide%3Did.g58df242dc9_0_8&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;slide&lt;/a&gt;&lt;/p&gt;&lt;p&gt;有兴趣者可以参与讨论。&lt;/p&gt;&lt;h3&gt;「警惕」存在于crate中的安全风险&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64586315&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;VS Code Remote 開發新天地&lt;/h3&gt;&lt;p&gt;未來可以有更多應用&lt;/p&gt;&lt;ul&gt;&lt;li&gt;開啟五排開黑寫程式&lt;/li&gt;&lt;li&gt;有了rank之後，大家寫程式更有競爭動力&lt;/li&gt;&lt;li&gt;自動依rank配對等級相同的開發者&lt;/li&gt;&lt;li&gt;坐等各地區rank第一的程式寫手pk&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64505333&quot; class=&quot;internal&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用Rust和Synthesizing进行3D模型合成展示&lt;/h3&gt;&lt;p&gt;Synthesizing是一個歷史悠久的图形学技术，過去常用來製作背景修改、去除臉部痘痘、雀斑等&lt;/p&gt;&lt;p&gt;現在有人將他用來做在3D模型上&lt;/p&gt;&lt;p&gt;有興趣的可以來看看他怎麼做的&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bk4i59/synthesizing_3d_structures_with_rust_in_immense/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;重磅：DataFusion 性能评测，性能展露头角，内存占用少得惊人&lt;/h3&gt;&lt;p&gt;DataFusion 的作者 Andy Grove 最近在项目 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/andygrove/datafusion-benchmarks&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;datafusion-benchmarks&lt;/a&gt; 仔细评测了 DataFusion 的性能。对手是大名鼎鼎的 Apache Spark。&lt;/p&gt;&lt;p&gt;简单查询 DataFusion 在某些地方速度已经领先了，但是涉及到 GROUP BY 这种复杂一点的，DataFusion的性能还是不够，需要改进。作者已经着手在改进了。&lt;/p&gt;&lt;p&gt;令人惊喜的是，DataFusion 的内存占用，几乎只是 Spark 的 1/100 （Spark 8G，DataFusion 80M）！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//andygrove.io/2019/04/datafusion-0.13.0-benchmarks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;整个社区都在热烈讨论 await 语法问题&lt;/h3&gt;&lt;p&gt;闹翻天了。await 这个关键字没问题，现在最大的问题是：await 如何与 ? . 号这些操作符配合，而不产生歧义，代码层面上，又要直观，好看。整个社区，包括大佬们都分成几派。目前大体分成 4 派：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Order of Operations Solution&lt;/li&gt;&lt;li&gt;Syntactic Sugar Solution&lt;/li&gt;&lt;li&gt;Postfix Keyword Solution&lt;/li&gt;&lt;li&gt;Postfix Sigil Solution&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;大的派别分为前缀派和后缀派。&lt;/p&gt;&lt;p&gt;这个问题，可以说是 19 年最大的问题了。很多人的东西都卡在这个问题上，所以官方压力也很大，想尽快定下来。&lt;/p&gt;&lt;p&gt;无船同志说希望在 1.37 版本（7月4号）把async-await稳定下来（不过只是开始，后续还有大量工作要做，比如 trait 中的异步函数，大量优化工作等）。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//paper.dropbox.com/doc/Await-Syntax-Write-Up-t9NlOSeI4RQ8AINsaSSyJ%23%3Auid%3D096894980756621041377818%26h2%3DErgonomic-%26-Readability-Consid&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/for-await-i/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More 2&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/await-syntax-discussion-summary/9914&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More 3&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/57640%23issuecomment-487758650&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More 4&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;放弃wlroots-rs项目&lt;/h3&gt;&lt;p&gt;wlroots-rs项目的作者宣布放弃该项目。原因是因为它碰到的问题，无法用Safe Rust去处理。他认为Safe Rust才是Rust存在的意义，不太想用Unsafe Rust来处理问题，所以就选择回到了C语言。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//way-cooler.org/blog/2019/04/29/rewriting-way-cooler-in-c.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在该话题的Reddit讨论区，rlua的作者深有同感，也写下了自己的感受：&lt;/p&gt;&lt;blockquote&gt; rlua 让他身心疲惫，也经历了类似的失败。但是，他又说了：如果有Rust无法表达的模式，那么我想我们应该努力使Rust更好，或者找到新的模式？我认为Rust的最大优势是可以把全局不安全的东西变成局部不安全的东西。我知道这对于所有任务来说都不是100％可能，但我正在努力找出剩余问题的答案。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;同样也有人指出：&lt;/p&gt;&lt;blockquote&gt; 当你认为Rust的全部意义仅仅是安全的时候，那么你就错失了Rust的好处。这并不是Rust的全部观点。Rust是让你在不安全的基础上抽象安全。如果那个C库本来就不安全了，那么Rust允许你公开那个接口，而不是非得把它包装为安全的。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;很多人也产生了共鸣。&lt;/p&gt;&lt;blockquote&gt; C和Rust之间的映射，确实比较困难。可能需要总结一些最佳的模式。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/biq864/giving_up_on_wlrootsrs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论区&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「手工」自制Rust吉祥物Ferris布偶&lt;/h3&gt;&lt;p&gt;喜欢Ferris的朋友可以按这个教材手工制作一个。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//edunham.net/2019/04/06/rustacean_hat_pattern.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;学习资源&lt;/h2&gt;&lt;h3&gt;指南：Rust Web开发中的Futures&lt;/h3&gt;&lt;p&gt;本文以HTTP请求为示例，比较系统地介绍了Futures。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//dev.to/gruberb/explained-rust-futures-for-web-development-a10&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust和Windows不得不说的事儿&lt;/h3&gt;&lt;p&gt;感谢社区 @Matrix 的分享&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64344775&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;如何快速实践actix和actix-web&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64457544&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列视频」从头开始写一个简单的x86-64 C编译器&lt;/h3&gt;&lt;p&gt;這是一個系列影片的第一部， 有興趣的朋友可以看看。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bjvfwu/practical_video_tutorial_write_a_simple_c_to/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/onehr/crust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;（作者好像是国人，这个ID有意思： One HR） 源码：onehr/crust&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「系列文章」Rust：如何使用私有Cargo依赖项构建Docker镜像&lt;/h3&gt;&lt;p&gt;本文展示了如何在构建Docker镜像时获取私有Cargo依赖项并获取它们。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40c_ameron/rust-how-to-build-a-docker-image-with-private-cargo-dependencies-ab91c25c4301&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列文章」Rust如何发送邮件 三篇&lt;/h3&gt;&lt;p&gt;作者将通过三篇文章来讲解如何用Rust编写邮件发送的代码。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.1aim.com/post/002-mail-1-intro/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Part I&lt;/a&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.1aim.com/post/003-mail-2-crate/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Part II&lt;/a&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.1aim.com/post/004-mail-3-example/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Part III&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;xv: 命令行16进制查看器&lt;/h3&gt;&lt;p&gt;彩色输出不同类别的字节。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//chrisvest.github.io/xv/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;同类工具： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/sharkdp/hexyl&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hexyl&lt;/a&gt;&lt;/p&gt;&lt;p&gt;作者分享： XV中如何使用panic&lt;/p&gt;&lt;p&gt;XV是一个终端16进制查看器，作者之前是Java开发者，XV是他的第一个Rust项目。他在本文主要介绍了UX中使用panic的一些经验。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;作者认为Rust里的panic等价于Java里的异常，所以他在XV中大量使用Unwrap。（日报君友情提醒：这一条谨慎看待，不是指滥用）&lt;/li&gt;&lt;li&gt;当然，作者也是针对具体的情况来使用unwrap，在预期操作总是会成功的情况下会unwrap。所以，如果程序运行崩溃了，说明代码里有问题。&lt;/li&gt;&lt;li&gt;类型转换。在确定安全的情况下使用From，在不太安全的情况下使用TryFrom。&lt;/li&gt;&lt;li&gt;在Release模式下开启默认检查算术溢出。Rust在Debug模式下如果算术计算溢出会报错，但是在Release模型下会静默生成错误的结果。需要在Cargo.toml中设置&lt;code&gt;overflow-checks = true&lt;/code&gt;来开启溢出检查。&lt;/li&gt;&lt;li&gt; 自定义了一个panic处理程序，类似于&lt;code&gt;HumanPanic&lt;/code&gt;库。它会捕获回溯信息，当崩溃后再次启动XV，它还会显示一条错误信息，提醒人们在GitHub上提交错误报告。&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40chrisvest/how-xv-uses-panics-ba22bd6152a5&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「嵌入式Rust」一些资料介绍&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-embedded/book&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;嵌入式book ，最近有一些更新&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust-embedded.github.io/book/intro/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;嵌入式book在线阅读，介绍如何使用Rust为裸机编写固件&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust-embedded.github.io/discovery/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Discovery book,基于微控制器的嵌入式系统的入门课程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-embedded/awesome-embedded-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;官方维护的 awesome-embedded-rust&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Rust Web Developer Roadmap 2019&lt;/h3&gt;&lt;p&gt;哇，第三方整理的，非常好。对于一个新人来讲，怎么快速清楚如果想用 Rust 做 Web 开发的话，要学习什么，涉及哪些模块，组织结构如何。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-05db6426fca7124bdc319073e240676d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;887&quot; data-rawheight=&quot;2086&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;887&quot; data-original=&quot;https://pic2.zhimg.com/v2-05db6426fca7124bdc319073e240676d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-05db6426fca7124bdc319073e240676d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;887&quot; data-rawheight=&quot;2086&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;887&quot; data-original=&quot;https://pic2.zhimg.com/v2-05db6426fca7124bdc319073e240676d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-05db6426fca7124bdc319073e240676d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/csharad/rust-web-developer-roadmap&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;制作落沙游戏&lt;/h3&gt;&lt;p&gt;该文作者制作过一款落沙游戏（falling sand game）Sandspiel，这种游戏允许玩家选择不同的材质（沙子、水、石头、冰块等）放到游戏中，自然下落，形成各种造型，比较艺术。&lt;/p&gt;&lt;p&gt;作者在这篇文章里，介绍了他为什么要做这款游戏，以及这款游戏的架构等技术资料。&lt;/p&gt;&lt;p&gt;架构：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;粒子模拟代码：Rust/WASM&lt;/li&gt;&lt;li&gt;流体模拟：JS和GLSL&lt;/li&gt;&lt;li&gt;React和JS编写界面&lt;/li&gt;&lt;li&gt; TypeScript和Postgresql编写CRUD后端&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//sandspiel.club/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线试玩&lt;/a&gt;&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//maxbittker.com/making-sandspiel&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/MaxBittker/sandspiel&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sandspiel源码&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Sled代码评审 Part III&lt;/h3&gt;&lt;p&gt;Sled 是一个 Rust 写的嵌入式数据库，质量相当不错。作者用了一段时间后，想了解里面的实现，就开始了这个学习和审阅过程。这是第三篇。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ayende.com/blog/187073-C/reviewing-sled-part-iii&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用Sonr构建pub/sub服务器 Part II&lt;/h3&gt;&lt;p&gt;sonr建立在mio之上的网络库，相比于Tokio来说，更加轻量。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hagsteel.com/posts/building-a-pub-sub-with-sonr-part-2/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;給「非C++開發者」的Rust并行计算教程&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/nearprotocol/rust-parallelism-for-non-c-c-developers-ec23f48b7e56&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust图形库指南&lt;/h3&gt;&lt;p&gt;该指南主要为那些想要使用Rust编写图形内容（视频游戏，动画，炫酷可视化等）并且不知道从哪里开始的人提供上下文。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//wiki.alopex.li/AGuideToRustGraphicsLibraries2019&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;项目、工具与库&lt;/h2&gt;&lt;h3&gt;Hawk：基于Rust和AWS Services的图像识别应用&lt;/h3&gt;&lt;p&gt;用于人脸识别门禁系统的一个原型项目。&lt;/p&gt;&lt;p&gt;架构设计图&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f6a852179e045c01249a0574b268af95_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1636&quot; data-rawheight=&quot;1396&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1636&quot; data-original=&quot;https://pic2.zhimg.com/v2-f6a852179e045c01249a0574b268af95_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f6a852179e045c01249a0574b268af95_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1636&quot; data-rawheight=&quot;1396&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1636&quot; data-original=&quot;https://pic2.zhimg.com/v2-f6a852179e045c01249a0574b268af95_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-f6a852179e045c01249a0574b268af95_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.knoldus.com/hawk-image-recognition-project-using-rust-and-aws-services/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/knoldus/hawk&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hawk&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;用Rust和K8S交互&lt;/h3&gt;&lt;p&gt;虽然通常使用Go和kubernetes交互，这豪无争议。但是现在随着客户端的进化，再加上Rust的泛型和过程宏，现在完全有可能使用Rust来编写一个成熟的k8s客户端了。&lt;/p&gt;&lt;p&gt;该文作者意见编写了好几个Rust的K8S工具，包括：k8s-openapi。并且他们也提交了新的工具：kube-rs，纯Rust实现的k8s客户端。&lt;/p&gt;&lt;p&gt;更多内容请阅读原文。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Arnavion/k8s-openapi&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;k8s-openapi&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/clux/kube-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;kube-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/clux/operator-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;operator-rs: kube-rs使用示例项目&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//clux.github.io/probes/post/2019-04-29-rust-on-kubernetes/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Terminal Redox：一些用Rust编写的开发工具&lt;/h3&gt;&lt;p&gt;该文介绍了一些终端工具，包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Alacritty，跨平台、GPU加速的终端&lt;/li&gt;&lt;li&gt;exa，Rust实现的&lt;code&gt;ls&lt;/code&gt;命令&lt;/li&gt;&lt;li&gt;dust，du (disk usage)工具的Rust版本&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;等等&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//sts10.github.io//2019/04/08/terminal-redox-alacritty.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;webrtc-unreliable：用于编写具有多个基于WebRTC的Web客户端和类似UDP的网络的Rust服务器库&lt;/h3&gt;&lt;p&gt;作者最近想基于wasm做一些网络游戏相关的实验，但是发现像 WebSocket 这种协议并不能满足他的要求：不可靠，无序包，需要面向具体的业务在上层做定制，不通用。而目前在Web层面，是不能直接发 UDP 包的。只有 WebRTC 这套协议里面提供了这种可能性，于是作者就开干了。&lt;/p&gt;&lt;p&gt;这个想法并不是他独创的，比如有一个叫 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/seemk/WebUdp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WebUDP&lt;/a&gt; 的项目。他用 Rust 实现了这个想法。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bihg1b/webrtcunreliable_a_library_for_writing_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/kyren/webrtc-unreliable&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;webrtc-unreliable&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;RustPlayground: 用于Mac平台的Playground桌面软件&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/cmyr/RustPlayground&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RustPlayground&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust 3D引擎 kiss3d 0.20发布&lt;/h3&gt;&lt;p&gt;Kiss3d是一个跨平台（包括WASM）2D和3D图形引擎，旨在简单地用于编写演示和原型的渲染部分。 此版本增加了对基于conrod的即时模式GUI的支持。 &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/sebcrozet/kiss3d&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;kiss3d&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;rendy-pbr: 用rendy编写的小型实时基于物理的渲染器&lt;/h3&gt;&lt;p&gt;PBR全称(Physicallly-BasedRendering)。笼统的说，就字面含义可以看出，这是一种基于物理规律模拟的一种渲染技术。它构建在gfx-hal上。该项目是rendy和Amethyst的试验场; 这里实现的大部分或全部内容最终将以某种形式添加到Amethyst渲染器中。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/termhn/rendy-pbr&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rendy-pbr&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;SideFuzz：寻找时序旁路攻击漏洞的模糊测试库&lt;/h3&gt;&lt;p&gt;它的工作原理是将模糊测试目标编译到WebAssembly，然后在修改后的wasmi解释器中对wasm目标进行模糊测试，该解释器计算单个指令的执行次数。&lt;/p&gt;&lt;p&gt;旁路攻击的一个案例：&lt;/p&gt;&lt;blockquote&gt; 举一个最简单的计时攻击的例子，某个函数负责比较用户输入的密码和存放在系统内密码是否相同，如果该函数是从第一位开始比较，发现不同就立即返回，那么通过计算返回的速度就知道了大概是哪一位开始不同的，这样就实现了电影中经常出现的按位破解密码的场景。密码破解复杂度成千上万倍甚至百万千万倍的下降。 来源： &lt;a href=&quot;https://www.zhihu.com/question/20156213/answer/43377769&quot; class=&quot;internal&quot;&gt;知乎：如何通俗地解释时序攻击(timing attack)?&lt;/a&gt;&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/phayes/sidefuzz&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sidefuzz&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;watchrs: 使用Rust监控AWS批量Jobs&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/rusted/monitoring-aws-batch-jobs-with-rust-8f1ef6115871&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/itsHabib/watchrs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;watchrs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;ruby-ext-wasm：Ruby 中执行 wasm 二进制码的扩展&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//wasmer.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wasmer.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;继推出 php-ext-wasm 和 python-ext-wasm 后，又马不停蹄做出了面向 ruby 的扩展。这个扩展用来在 Ruby 中执行 wasm 二进制码。&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//wasmer.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wasmer.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; 是 wasm 平台化的先驱，其理念是要推动 wasm 成为一个通用的计算平台。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/wasmerio/ruby-ext-wasm/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;dpar：神经网络过渡依赖解析器&lt;/h3&gt;&lt;p&gt;这个估计懂深度学习的同学看得懂一些。是 go 版本的重写，原来的版本可以在同一仓库中找到。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/danieldk/dpar&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;rclc - 又一个命令行计算器&lt;/h3&gt;&lt;p&gt;这个计算器可以执行大数计算、浮点、分数和复数运算，看起来好用。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; sqrt(-2)  // square root of negative number
= 0.0+1.4142135623730952i
&amp;gt; sqr(ans) // square root of a complex number may produce real number
= -2.0000000000000006
&amp;gt; 345**12 // big integer in action
= 2843342266303054544082275390625
&amp;gt; 1\2 + 3\5  // one half and three fifth is one and one tenth
= 1\1\10
&amp;gt; sqr(3\5)  // square of a rational number is a rational number
= 9\25
&amp;gt; sin(90°) == sin(pi/2) // degrees and radians mixed in one expression, &amp;#39;°&amp;#39; can be replaced with &amp;#39;d&amp;#39; for easier typing 
= 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cargo install rclc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可安装。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/VladimirMarkelov/rclc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;fui - 为你的终端命令行添加表单功能和界面&lt;/h3&gt;&lt;p&gt;先来看看截图效果：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-aac95ff9a6a840ca02559aa101c86513_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;930&quot; data-rawheight=&quot;442&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;930&quot; data-original=&quot;https://pic4.zhimg.com/v2-aac95ff9a6a840ca02559aa101c86513_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-aac95ff9a6a840ca02559aa101c86513_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;930&quot; data-rawheight=&quot;442&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;930&quot; data-original=&quot;https://pic4.zhimg.com/v2-aac95ff9a6a840ca02559aa101c86513_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-aac95ff9a6a840ca02559aa101c86513_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这个库刚刚发布了 1.0。现在支持 clap 集成了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/xliiv/fui&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Luster 使用rust实现的實驗性質的lua VM&lt;/h3&gt;&lt;p&gt;目前產業界還是以 luajit 為大宗，希望 luster 的速度能超越 luajit 為 lua 帶來新氣象&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bjvt3i/luster_an_experimental_lua_vm_implemented_in_pure/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;spruce： 硬盘空间可视化&lt;/h3&gt;&lt;p&gt;這是他第一個發佈的 crate，歡迎大家給作者友善的建議&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bjx734/my_first_published_crate/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Risp (Lisp (in (Rust)))&lt;/h3&gt;&lt;p&gt;這位仁兄腦洞大開&lt;/p&gt;&lt;p&gt;想要使用rust執行lisp&lt;/p&gt;&lt;p&gt;大家可以看看他怎麼做的&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//m.stopa.io/risp-lisp-in-rust-90a0dad5b116&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bjy3y9/risp_lisp_in_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit讨论&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Viu：支持在命令行查看图片&lt;/h3&gt;&lt;p&gt;命令列無法看圖片一直是個大問題&lt;/p&gt;&lt;p&gt;但這位大佬做到了！在命令列看图！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/atanunq/viu&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;bardecoder 一個 QRCode 加密解碼庫&lt;/h3&gt;&lt;p&gt;看起來簡單好用&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/piderman314/bardecoder&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「嵌入式Rust」micromath 0.3发布&lt;/h3&gt;&lt;p&gt;micromath是一个嵌入式的Rust数学库，支持快速安全的浮点数近似计算、常用的算术运算、2D/3D向量类型、统计分析和四元数等。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/NeoBirth/micromath&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;micromath&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;pkg-version: 可在编译时获取Cargo包版本&lt;/h3&gt;&lt;p&gt;一般情况下可以通过&lt;code&gt;CARGO_PKG_VERSION_MAJOR&lt;/code&gt;环境变量来获取包的版本号，但是这种方式总是会产生字符串，只能在运行时将其解析为数字。所以这个库提供了一个&lt;code&gt;pkg_version_major!&lt;/code&gt;过程宏在编译期解决这个问题。&lt;/p&gt;&lt;p&gt;（看源码发现依赖dtolnay的proc-macro-hack，它是一个支持表达式位置过程宏的库)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jonas-schievink/pkg-version&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pkg-version&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/dtolnay/proc-macro-hack&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;proc-macro-hack&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Plotka： 轻松可视化浏览器中的数据&lt;/h3&gt;&lt;p&gt;Plotka可以从stdin获取数据，解析它（作为JSON或CSV）并通过websockets进行广播。 还可以托管静态文件，可以完全通过它在浏览器中绘制数据，它可以用作Matplotlib等的替代品。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/micouy/plotka&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;plotka&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;rudolfs: 基于AWS S3的高性能缓存Git LFS服务器&lt;/h3&gt;&lt;p&gt;LFS，Large File Storage, 大文件存储&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jasonwhite/rudolfs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rudolfs&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-05-64722695</guid>
<pubDate>Sun, 05 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Sonic：用Rust编写的Elasticsearch的极简替代品</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-05-63963140.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/63963140&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-babf6b4f71148ae9c0cf2b39d8c78f9d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;本文是对Sonic的创建者Valerian Saliou的采访，也可以帮助我们对Sonic有一个比较全面的了解。&lt;br/&gt;原文 ： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//notamonadtutorial.com/sonic-a-minimalist-alternative-to-elasticsearch-written-in-rust-7f3612ecb47b&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;notamonadtutorial.com/s&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;onic-a-minimalist-alternative-to-elasticsearch-written-in-rust-7f3612ecb47b&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;br/&gt;Sonic源码： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/valeriansaliou/sonic&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/valeriansali&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ou/sonic&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;br/&gt;本文只是重点摘要&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;什么是Sonic？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Sonic是一个开源搜索索引服务器，用Rust编写。它构建简单，高性能且轻量级。 Sonic接受用户查询，并返回标识符。这些标识符指的是关系数据库中的实际文档（例如，在我们的案例中：消息，文章，CRM联系人等）。 Sonic不存储文档，这使得整个系统在存储方面简单而有效，因为从Sonic获取搜索结果的应用程序必须从另一个数据库（例如，MongoDB，MySQL等）提取实际结果数据，因为搜索结果返回的是ID）。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;为什么要创造一个除Solr、ElasticSearch之外的新选择？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;我（sonic作者）经营一家名为Crisp的公司，为100,000名用户提供客户支持软件。用户想要搜索他们的消息，我们的一些用户有很多消息。事实证明，使用传统的开源搜索索引软件（例如Elasticsearch等）对我们的免费增值商业模型来说太贵了，因为这些系统很重，因此需要巨大的服务器CPU和RAM。&lt;br/&gt;&lt;br/&gt;作为开发人员和系统管理员，我非常喜欢Redis的简单性和速度。在计算机软件中，简单性通常提供速度，这在规模上是一件好事。我将Sonic打造成“可搜索的Redis”：简单的功能，简单的网络协议。&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;你为什么决定使用Rust？使用Rust创建Sonic是一种什么样的体验？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Rust使整个开发体验更加顺畅。语言的约束（例如，借用检查器，没有NULL值的事实）保证在生产中运行项目时不会遇到某些类型的错误（例如，NULL指针异常和分段错误，这些是在C，C ++或Go等编程语言中不可避免; 是人就会犯错误）。&lt;br/&gt;&lt;br/&gt;我过去已经构建了其他Rust项目来大规模支持Crisp基础架构，例如Bloom，Vigil和Constellation（它们也已经在GitHub上开源）。 Rust对我来说不是什么新鲜事;总的来说，我喜欢使用这种语言。我2年前的第一个Rust项目有点粗糙，因为你必须花很多时间借助借助检查器“无缘无故”阻挡你。一旦你了解它的工作机制，你就会变得更有效率，并且Rust借用检查器错误也会逐渐变得更加罕见。&lt;br/&gt;&lt;br/&gt;总的来说，我可以说在Rust中编写Sonic的经历非常棒。我爱Rust。它也使我成为一个更好的程序员。（同感）&lt;br/&gt;&lt;br/&gt;&lt;b&gt;什么是Sonic Channel？这个功能的灵感是来自Redis吗？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Sonic Channel用于通过网络与Sonic通信的协议。由于当今大多数应用程序基础结构都通过网络分布在多台计算机上，因此需要一种基于TCP的协议来将新文本数据推送到索引并查询索引。出于性能原因，我不想像Elasticsearch那样编写基于HTTP的协议。&lt;br/&gt;&lt;br/&gt;在发布Sonic之后，我从社区中获得了很多贡献，为最流行的编程语言构建Sonic Channel库（集成）：Go，Python，Ruby，Java，PHP和JavaScript（仅在NodeJS上运行）。这使开发人员能够以他们喜欢的编程语言从他们的应用程序中推送数据并搜索Sonic中的项目。它使整个Sonic集成过程更容易调用REST API，更简洁。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;您使用哪些数据结构来支持创建索引和自动完成？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;索引存储在LSM（Log-Structured Merge-tree）中，底层使用了RocksDB。为了自动完成，Sonic使用FST (Finite-State Transducer，有穷状态转换器），BurntSushi在他的博客上的一篇文章中详细解释了这一点。&lt;br/&gt;&lt;br/&gt;FST存储在磁盘上，用于每个Sonic（集合，存储桶）对，并且是内存映射的，这意味着实际的FST数据不会加载到RAM中，但访问速度仍然很快。我正在使用的Rust FST实现的缺点是任何构建的FST都是不可变的。如果Sonic存储桶中出现一个新的词，则需要将其推送到FST，因此需要重新构建新的FST。 Sonic定期为变异的FST运行合并任务，并在磁盘上添加或删除它们的词。&lt;br/&gt;&lt;br/&gt;FST结构不仅用于自动完成，还用于拼写错误校正（例如，它能够将“Englich”校正为“English”）。它使用Levenshtein自动机来实现这一点（给定最大Levenshtein距离相对于单词的长度;即，单词越长，允许的拼写错误越多）。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;你为什么选择RocksDB作为存储？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;RocksDB（来自Facebook）建立在LevelDB（来自Google）上。&lt;br/&gt;&lt;br/&gt;它非常擅长在巨大的密钥空间保持性能稳定，并通过压缩旧数据来最小化磁盘使用（它具有分层数据存储架构，旧数据处于较低级别，可以通过较高但较慢的比率进行压缩或压缩）。&lt;br/&gt;&lt;br/&gt;RocksDB改进了LevelDB，并且非常易于配置。这意味着Sonic用户可以通过Sonic配置调整RocksDB的内部结构，以便在服务器硬件的情况下充分利用其设置。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sonic现在有什么文档？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;我写了一篇博文，总结了Sonic的工作原理。后续还打算写大量的文档来解释Sonic的内部工作原理，这个可以在GitHub issues上跟踪。&lt;br/&gt;&lt;br/&gt;总的来说，阅读Sonic代码应该有助于理解它的运作方式。我花了很多时间注释我的代码并使其尽可能清晰。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;为什么要用jemalloc ？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;jemalloc是一个最初为FreeBSD编写的内存分配器。它专为现代CPU架构而设计，在管理多核架构上的内存方面要好得多。但它在单核架构上没有任何好处，但在单CPU的情况下已被证明与旧的分配器一样好。所以在最坏的情况下，它与传统的分配器一样好，最多可以在多核CPU上提供更好的性能并减少内存碎片。&lt;br/&gt;&lt;br/&gt;Rust先前使用jemalloc作为其默认分配器，并且最近由于性能以外的原因而移至系统分配器。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;你之前写过数据库吗？如果别人想构建Sonic这样的工具，你有什么建议？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;我已经构建了大量的服务器软件，但我从未编写过数据库。数据库可能很难，因为它们涉及大量的锁定策略以防止竞争条件，因此数据库开发人员必须一丝不苟。锁是很难正确的;生产中的锁更难：编写死锁的代码很容易，同时找到发生死锁的原因是痛苦的。&lt;br/&gt;&lt;br/&gt;自己创造新事物的最佳方式是了解其他人过去是如何做到的。所以我建议大家可以先看看Snoic的源码实现。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sonic现在状态如何？还有什么想改进的？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;是的，看起来Sonic到目前为止工作得很好。搜索很快，用户很高兴。&lt;br/&gt;&lt;br/&gt;我们的Sonic实例索引了5亿个对象（消息，文章，联系人）。压缩索引为20GB，负载下的CPU使用率为1 Intel Xeon核心的10％。 Sonic在最差的情况下使用~200MB的RAM用于如此大的索引，而在冷启动时使用20MB的RAM。搜索延迟低于1毫秒。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-05-63963140</guid>
<pubDate>Sun, 05 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「警惕」存在于crate中的安全风险</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-04-64586315.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64586315&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1fcfe1faf796c560af7494590c777f2f_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;本文基于最近两天在推上和社区的朋友互动而引发的思考。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;起因&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Rust Tg群的群主在2号发推，说他看到有人在Rust的过程宏中下载文件。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d99b142cf1fb440f18389a8dd5b67068_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1284&quot; data-rawheight=&quot;1108&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1284&quot; data-original=&quot;https://pic1.zhimg.com/v2-d99b142cf1fb440f18389a8dd5b67068_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d99b142cf1fb440f18389a8dd5b67068_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1284&quot; data-rawheight=&quot;1108&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1284&quot; data-original=&quot;https://pic1.zhimg.com/v2-d99b142cf1fb440f18389a8dd5b67068_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d99b142cf1fb440f18389a8dd5b67068_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我询问以后发现是这个crate：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/addr-rs/addr&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/addr-rs/addr&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;我仔细查看后发现，该库是用来做电子邮件域名有效性验证的。它使用了Mozilla的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//publicsuffix.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;公共后缀列表（Public Suffix List）&lt;/a&gt;可靠地解析Rust中的域名和电子邮件地址。&lt;/p&gt;&lt;p&gt;该库在Readme里写道：&lt;/p&gt;&lt;blockquote&gt;可以通过设置环境变量PSL_URL或PSL_PATH来提供自己的列表。如果您不提供自己的列表，将在构建期间从官方站点下载一个列表。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;重点&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;重点在于文档里说的「构建期间」是在一个过程宏中完成的下载，它会从Mozilla下载了一个207k的邮件域名后缀文件，也就是PSL。&lt;/p&gt;&lt;p&gt;查看其源码：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7321ff26022333acbc408e4a58fe08ce_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3182&quot; data-rawheight=&quot;1528&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3182&quot; data-original=&quot;https://pic3.zhimg.com/v2-7321ff26022333acbc408e4a58fe08ce_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7321ff26022333acbc408e4a58fe08ce_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3182&quot; data-rawheight=&quot;1528&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3182&quot; data-original=&quot;https://pic3.zhimg.com/v2-7321ff26022333acbc408e4a58fe08ce_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-7321ff26022333acbc408e4a58fe08ce_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这个codegen就是定义过程宏的crate，其中的process方法中就调用了在lexer包中封装好的fetch方法开始下载文件（如果没有本地列表的话）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a0d7ea8aab6e4ce5faad69121c07c214_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3266&quot; data-rawheight=&quot;1430&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3266&quot; data-original=&quot;https://pic1.zhimg.com/v2-a0d7ea8aab6e4ce5faad69121c07c214_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a0d7ea8aab6e4ce5faad69121c07c214_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3266&quot; data-rawheight=&quot;1430&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3266&quot; data-original=&quot;https://pic1.zhimg.com/v2-a0d7ea8aab6e4ce5faad69121c07c214_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a0d7ea8aab6e4ce5faad69121c07c214_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;然后在lexer包中查看fetch的定义，看到的是调用了另一个封装好的from_url方法发起具体的下载请求。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;反思&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;这代码写的还不错，组件职责分离，逻辑清晰，封装到位，很符合Rust的最佳实践。&lt;/p&gt;&lt;p&gt;就这个库而言，作者是想让用户有更完善的体验。在本地没有现成的PSL列表，就从官方帮助你下载一个。并且下载获取的数据，在宏里面也是需要用到的。这个可能不方便使用build script。&lt;/p&gt;&lt;p&gt;但是话说回来，在宏里下载文件，这样的脑洞，恐怕是打开了「潘多拉魔盒」。&lt;/p&gt;&lt;p&gt;这个addr crate的作者并没有恶意，并且很明确地在Readme里告诉你这个库的行为是什么样的。&lt;/p&gt;&lt;p&gt;但是，万一换个其他人呢？&lt;/p&gt;&lt;p&gt;能下载一个简单的文件，就可以下载其他更复杂的文件，或者是恶意文件。能下载，意味着也可以上传，意味着你可以执行某些设计好的指令（假如某些服务器的安全权限没设置好）。只要想象力丰富，在Rust的过程宏里，也许可以做出更多坏事。&lt;/p&gt;&lt;p&gt;不是我们要恶意揣测别人，而是，这个世界就是这么危险。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;对策&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;所以，我们在使用Rust第三方库的时候，需要一些安全建议：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;尽可能地使用知名的库。更多的人star，更多的人参与贡献。这样的库比较安全。&lt;/li&gt;&lt;li&gt;在使用像Addr这种star数很少的库时，需要仔细审查它的源码。（查看宏展开，推荐cargo expand插件，也有其他的插件）&lt;/li&gt;&lt;li&gt;然而，你可以查看一个crate的安全性，但是你很难查看它依赖的crate是否安全。这个时候就推荐使用&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/dpc/crev&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo crev&lt;/a&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;重点介绍一下Crev工具。该工具可以判断你项目中依赖crate的安全性、质量和发现的问题。可以在公共的git仓库里发布可验证的review信息。通过这种方式期望在Rust生态系统中构建可信任的网络。将不会有人再受到未经审查和不受信任代码的困扰。&lt;br/&gt;&lt;br/&gt;想想npm因为依赖包出了多少次安全事故。这个工具貌似不错，现在维护也非常积极。&lt;br/&gt;&lt;br/&gt;使用方法：&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depedencies&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proof&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;everything&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trust&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trust&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someone&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CrevId&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trust&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;again&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crev&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;see&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;其中id是可以通过 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitter.im/dpc/crev&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;crev gitter channel&lt;/a&gt; 来共享给大家的，形成信任网络。然后可以通过  &lt;code&gt;cargo crev trust &amp;lt;id&amp;gt; &lt;/code&gt;命令从你信任的人那里获取依赖crate。&lt;br/&gt;&lt;br/&gt;当然，这世界上没有绝对的安全，但也无法阻碍人们追求它的脚步。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-04-64586315</guid>
<pubDate>Sat, 04 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「路线」如何快速实践actix和actix-web</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-05-02-64457544.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64457544&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3ebd004a6c299b615d2ff5782ae68d89_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;看到《Rust编程之道》读者群里有人咨询actix相关的学习资源，我就顺手做了一个简单的学习路线分享给需要的人。&lt;/blockquote&gt;&lt;hr/&gt;&lt;h2&gt;&lt;b&gt;学习要求：&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;有Rust基础&lt;/li&gt;&lt;li&gt;有Web基础&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;建议学习顺序：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;一、首先，从我这次RustConAsia大会的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/actix-workshop-rustconasia2019&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Workshop&lt;/a&gt;  入手&lt;/p&gt;&lt;p&gt;1  你先看 concept_to_guide里面的概念导读，概念导读是一个脑图，其中记录了actix相关的关键概念。可以按其自行搜索相关概念的更详细的内容学习。 2   然后再看看代码。代码很简单，就是一个个简单的api。这个workshop的重点是想让大家系统理解actix和actix-web （1.0 ）。 &lt;/p&gt;&lt;p&gt;二、然后，再结合 PingCAP的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/rust-prometheus-workshop&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Workshop&lt;/a&gt;  继续训练，这个workshop是给actix-web的应用（内存数据库demo）加个promeheus metrix 接口。  我fork过来一份，加了一个p8模块，实现了一个宏，重构代码（那个宏没有考虑性能，Just for Fun）。 按p1 -  p8顺序实践就好了。&lt;/p&gt;&lt;p&gt;学习完这两个workshop，应该差不多可以上手写一个actix-web的简单微服务了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;如何进阶&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;actix-web进阶的话，可以参考一些开源项目：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Aardwolf-Social/aardwolf&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/Aardwolf-Soc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ial/aardwolf&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;  ，推荐该项目的理由， 是因为它的一些实践非常好： 项目结构组织、代码复用抽象（泛型、trait和宏）都值得学习&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/dessalines/lemmy&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/dessalines/l&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;emmy&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; ，使用actix-web和TypeScript仿reddit站点，推荐理由，它的功能比较完善，还包括websocket。 &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;但它们目前都是actix 0.7的，建议，可以帮助lemmy升级到actix 1.0 来实践。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-05-02-64457544</guid>
<pubDate>Thu, 02 May 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
