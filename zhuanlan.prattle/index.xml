<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>迷思</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/</link>
<description>我的博客及微信公众号里的精华内容都会放在这里。 我的博客及微信公众号里的精华内容都会放在这里。</description>
<language>zh-cn</language>
<lastBuildDate>Tue, 28 Jan 2020 10:32:17 +0800</lastBuildDate>
<item>
<title>新年快乐！</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2020-01-24-103914413.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103914413&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2ad980aa0c2a05c4c570a2dbbbc852ff_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;一晃 2020 年快过完 1/12 了。你的新年计划是否也如期进行了 1/12？过去的这一个月来让人心里堵得慌，先后几起伤医案，令人发指；接着武汉的疫情愈演愈烈，令人揪心。我好些在北京的朋友，大过年的，有家不能回，只能在遥祝家里的亲人；在武汉的朋友，反倒豁达，终于可以清净一下，不用走亲访友的，做个快乐的死肥宅。我跟朋友聊起来，都觉得相对于疫情的可怕，人心的崩溃才是最大的风险。我想起有次送我父亲去机场，后来得知他的航班要延误大半天，我在微信里急得团团转，他却优哉游哉地在航站楼里刷步，还跟家人说：好久没锻炼了，正好趁这个机会锻炼锻炼。我没记错的话，那天他走了两万多步。很多时候，&lt;b&gt;信息本身并不重要，重要的是我们怎么去解读&lt;/b&gt;。疫情这事，对每个人，每个公司（尤其是还在生死线挣扎的创业公司），每个行业都会有不同的影响。与其焦虑，我们不如去想：事已至此，我们如何让它带来的影响朝着好的方向发展？或者，最坏的预期是什么？我们如果不能扭转局势，如何让结果比最坏的预期要好？&lt;/p&gt;&lt;p&gt;好。闲话不多说。今天的文章除了给大家拜年，还想顺带帮忙参与梳理一个大家年年都要遇到的春节难题：&lt;b&gt;大长假该怎么度过我才不后悔？&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;读书篇&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;首先隆重推荐的是微信读书里的《几何原本》。这本书我看了一阵子了，在 travis build 的漫长等待里，它陪着我度过那些几乎凝滞的时光。我读《几何原本》起初完全是为了应付越来越难缠的娃儿的几何教学；没想到读着读着读进去了。古典几何学的大厦在欧几里得的妙笔下通过五条公理一点点建立起来，实在令人叹为观止（我初中数学为什么就没有这种感觉呢，反而是觉得几何真是无趣，就是在不断背定理，证明定理）。现在很多人言必称「第一性原理」，如获至宝，却不知第一性原理的精髓在《几何原本》里体现得淋漓尽致。&lt;/p&gt;&lt;p&gt;为啥读微信读书里的《原本》？因为《原本》这样的大部头，也就是零散时间翻翻，休养一下脑子，它每个命题自成一节，两三分钟看完，几分钟十几分钟证明，正好赶上一次 travis build 结束。用微信 mac 端打开微信读书公众号，在网页里看，方便地很。&lt;/p&gt;&lt;p&gt;另外推荐的一本数学书是 &amp;#34;Math with Bad Drawings&amp;#34;。这本书不知道国内有没有，有的话可以看看，美国的读者可以在图书馆借到，还挺抢手。去年年底，我借到了，读完前两章，到期发现已经被别人 hold 无法续借，赶紧 hold，再拿到手已经是年三十了。这本书是这个风格：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3d4dd53fcea01d65460a9e2a16b1449b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3648&quot; data-rawheight=&quot;2736&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3648&quot; data-original=&quot;https://pic4.zhimg.com/v2-3d4dd53fcea01d65460a9e2a16b1449b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3d4dd53fcea01d65460a9e2a16b1449b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3648&quot; data-rawheight=&quot;2736&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3648&quot; data-original=&quot;https://pic4.zhimg.com/v2-3d4dd53fcea01d65460a9e2a16b1449b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-3d4dd53fcea01d65460a9e2a16b1449b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我喜欢它的一大原因是里面提出来的问题都很有趣又很有挑战性。比如开篇的 tic-tac-toe 游戏，九宫格的每一格又是一个九宫格，每个九宫格是一个 tic-tac-toe，你要赢得局部的战争，才有机会赢得全局的战争；但过分着眼于局部，又会丢失全局。&lt;/p&gt;&lt;p&gt;这本书适合有大片时间慢慢读，旁边备好 A4 纸。里面的很多问题很烧脑，要好好琢磨一番。我也在学习作者的写作方式和技巧，希望能够领会如何把一本枯燥的数学书写得精彩。&lt;/p&gt;&lt;p&gt;最后一本是鼎鼎大名的 &amp;#34;Algorithms to Live By&amp;#34;，我是一年前买的，有一搭没一搭地看，还没有看完。国内翻译版本叫《算法之美》。这本书的美妙之处是把计算机的算法和生活结合起来，引导我们在生活中选择更好的策略，做出明智的选择。大家都熟知的 LRU 算法，是缓存策略大部分情况下最佳的选择，而生活中整理衣柜，处理桌上的文件，要「断离舍」扔掉不用的东西，都可以用这个策略。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;编程篇&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;不想读书，或者读过上述推荐书籍的孩纸，可以花点时间来玩玩编程打怪升级的游戏。&lt;/p&gt;&lt;p&gt;游戏一：学习 rust。&lt;/p&gt;&lt;p&gt;游戏二：用 rust 开发 webassembly 程序。&lt;/p&gt;&lt;p&gt;上述两个「游戏」是不是目标感不足，难以推动真实有效的学习？那么请听题：&lt;/p&gt;&lt;p&gt;游戏一：用 rust 实现 base32 和 base58 的编码。看看两者的性能差异。提示：base32 正向编码可以通过查表，逆向编码如何设计，也可以通过查表完成？&lt;/p&gt;&lt;p&gt;游戏二：用 rust 实现通过一个用户密码派生出 root ca 的密钥，生成 root ca，然后再派生出 server key，用 root ca 签发 server 的 certificate。整个过程不在磁盘上留下任何密钥的痕迹。benchmark 一下看看性能。注：可能用到的库有：argon2（密码哈希），blake2s / blake3（HMAC），pkcs8（密钥格式），yasna（ASN.1），ring（加密库）等。&lt;/p&gt;&lt;p&gt;游戏三：用 prost / tonic / tokio 重写某个使用 grpc 的微服务。&lt;/p&gt;&lt;p&gt;为啥 rust？这货一不小心连拿了四年 stackoverflow 用户最喜欢的编程语言，你就不想了解一下？新年穿新衣裳，也试试对自己而言的一门新语言嘛。&lt;/p&gt;&lt;p&gt;未来几年的软件开发，protable binary（平台无关的受控可执行代码）会越来越重要，而 webassembly 似乎是目前唯一受到几大厂商全力支持的方向。webassembly 的应用场景不仅仅是 web（比如大型游戏的 web 化），更是服务端虚拟化的一个新的，也许是更优的解决方案。Solumon Kykes，Docker 的创始人和 CTO 说：&lt;/p&gt;&lt;blockquote&gt;If WASM+WASI existed in 2008, we wouldn&amp;#39;t have needed to created Docker. That&amp;#39;s how important it is. Webassembly on the server is the future of computing. A standardized system interface was the missing link. Let&amp;#39;s hope WASI is up to the task!&lt;/blockquote&gt;&lt;p&gt;你看 fastly 的 lucet 把 serverless 的冷启动速度提高到一个什么样的级别（对比：aws lambda 通常 200ms 的启动时间）：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-37533328fdbdcf3a1efe91ca541436c1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2048&quot; data-rawheight=&quot;1534&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2048&quot; data-original=&quot;https://pic2.zhimg.com/v2-37533328fdbdcf3a1efe91ca541436c1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-37533328fdbdcf3a1efe91ca541436c1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2048&quot; data-rawheight=&quot;1534&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2048&quot; data-original=&quot;https://pic2.zhimg.com/v2-37533328fdbdcf3a1efe91ca541436c1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-37533328fdbdcf3a1efe91ca541436c1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;（关于 lucet 和 aws 的 firecracker 的对比，后续有功夫我再撰文）&lt;/p&gt;&lt;p&gt;随着 5G 时代的到来，高带宽会带来网络边界的模糊：数据变得灵动起来，从而带动计算会时而发生在客户端，时而发生在服务端。当越来越多的计算可以直接发生在客户端时，一个平台无关的，安全的代码运行环境就变得至关重要，这也是 webassembly 的机会。&lt;/p&gt;&lt;p&gt;而 webassebmly 目前支持最好的语言是什么？Rust。所以学习 rust 至少可以带来如下好处：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;新的范式（paramdigm）。子曾经曰过：如果一门编程语言没有带给你新的 paradigm，就不一定值得学，就好像学了 .net 再去学 java，或者学了 python 再学 ruby，从拓宽边界的角度，意义不大。&lt;/li&gt;&lt;li&gt;可以编译成 webassembly —— 未来的也许会真正实现「一次编译到处运行」的可执行体：浏览器内，IoT 设备，各种服务器，手机等。&lt;/li&gt;&lt;li&gt;接近于 C/C++ 性能，不输于 ruby / elixir 表现力的语言。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以，趁着假期没有「你妈逼你结婚了么」这样的烦扰，抄起心爱的 vscode，写代码去。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;亲子篇&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;这是写给中老年程序员的。0 娃 0 狗的青年程序员朋友可以跳到文末点「在看」了。&lt;/p&gt;&lt;p&gt;昨天晚上忙到快 9 点回到家（这一整天我是 69 式 —— 早六点晚九点），小宝把我拉到三楼，说她是今年家庭春晚的总导演，让我跟她排练一个舞蹈。她给我安排的舞蹈是这样的：先是她独舞半天，然后招呼我上台。我上台扮演一枝荷花 —— 动作倒是简单 —— 左脚挪到右脚前点一下，身子面向斜右方，双手合拢然后展开成荷叶状，放在下巴处（敢情我脑袋是花骨朵？），然后右脚挪到右脚前点一下，身子面向斜右方，屁股向后撅着，双手合拢然后展开成荷叶状，放在下巴处，不断重复。你可以自己试验一下便可知这个动作有多骚气外露。&lt;/p&gt;&lt;p&gt;我按照小宝导演的要求努力把动作做标准。这时候导演发话：爸爸，你要演得卖力一些，像是一朵要吸引我注意力的假荷花。然后我慢慢发现你是假的，我就做出推的动作，你就往前倾，当我做出用力推的动作，你就倒下去，然后滚出舞台。&lt;/p&gt;&lt;p&gt;妈呀，原来我这个假荷花要演一个真的假荷花。。。结局还是正义战胜邪恶，我滚了。&lt;/p&gt;&lt;p&gt;对于中老年程序员来说，假期是个难得的放松机会，平日里 996 劳心劳力的，这时候不敢满世界旅游了，窝在家里既不想读书又不想写代码，正好花些时间，和娃儿们增进感情。搭乐高，读故事书，一起看动画片，抽老牛，甚至，跳皮筋。让紧绷的弦松一下，毕竟，只需要在家受一周的罪，熬过去就可以愉快地滚回办公室 996 式养生了。&lt;/p&gt;&lt;p&gt;嗯，就这么多，大家对于怎么愉快不失优雅不会后悔地过节心里有谱了么？祝大家新春快乐！平安健康！我们一直在一起，彼此思念。&lt;/p&gt;&lt;p&gt;爱你们的程序君。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4c25decf54bcc8018851dbdbd7c917af_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1064&quot; data-rawheight=&quot;839&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1064&quot; data-original=&quot;https://pic4.zhimg.com/v2-4c25decf54bcc8018851dbdbd7c917af_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4c25decf54bcc8018851dbdbd7c917af_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1064&quot; data-rawheight=&quot;839&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1064&quot; data-original=&quot;https://pic4.zhimg.com/v2-4c25decf54bcc8018851dbdbd7c917af_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4c25decf54bcc8018851dbdbd7c917af_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;贤者时刻&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;蟋蟀在堂，岁聿其莫。今我不乐，日月其除。无已大康，职思其居。好乐无荒，良士瞿瞿。&lt;br/&gt;&lt;br/&gt;蟋蟀在堂，岁聿其逝。今我不乐，日月其迈。无已大康，职思其外。好乐无荒，良士蹶蹶。&lt;br/&gt;&lt;br/&gt;蟋蟀在堂，役车其休。今我不乐，日月其慆。无已大康，职思其忧。好乐无荒，良士休休。&lt;br/&gt;&lt;br/&gt;诗经 国风&lt;/blockquote&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2020-01-24-103914413</guid>
<pubDate>Fri, 24 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>暴走的程序员</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2020-01-18-103395428.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103395428&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0966181556a4e09679540af9023dbc72_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;昨天一篇 &amp;#34;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//words.steveklabnik.com/a-sad-day-for-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;a sad day for rust&lt;/a&gt;&amp;#34; 霸榜了 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//news.ycombinator.com/item%3Fid%3D22075076&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hacker news&lt;/a&gt;。&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/actix-web&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;actix-web&lt;/a&gt; 的作者 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/fafhrd91&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fafhrd91&lt;/a&gt; 在无法忍受 &amp;#34;unsafe shitstorm&amp;#34; 之后，决绝地将这个在各大评测网站名列第一的 web 框架下线了。一时间社区叫苦不迭，所有使用了 actix-web 作为依赖的项目，都受到（潜在的）影响。这件事的威力虽然不如之前让&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;半个互联网瘫痪的 leftpad 事件&lt;/a&gt;，但也够开源社区喝一壶的。&lt;/p&gt;&lt;p&gt;让我先为各位吃瓜群众简单介绍一下前因后果。&lt;/p&gt;&lt;p&gt;actix-web 是 rust 语言下的一个很有影响力的 web 开源框架，常年在 TechEmpower 排行榜雄踞第一（目前作者已经移除了 actix-web）：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a1f1c92018316ea2c77e39d3154fc490_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1191&quot; data-rawheight=&quot;405&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1191&quot; data-original=&quot;https://pic1.zhimg.com/v2-a1f1c92018316ea2c77e39d3154fc490_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a1f1c92018316ea2c77e39d3154fc490_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1191&quot; data-rawheight=&quot;405&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1191&quot; data-original=&quot;https://pic1.zhimg.com/v2-a1f1c92018316ea2c77e39d3154fc490_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a1f1c92018316ea2c77e39d3154fc490_b.jpg&quot;/&gt;&lt;figcaption&gt;https://www.techempower.com/benchmarks/&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;它这么快是有原因的 —— fafhrd91 使用了大量的 &lt;code&gt;unsafe&lt;/code&gt;（rust 关键字，用来标注那些绕过编译器检查，作者来保证内存安全的代码）来尽可能榨取性能。这些大量使用的 &lt;code&gt;unsafe&lt;/code&gt; 引发了了一轮又一轮使用 actix-web，却又憎恶不安全代码的用户的讨论，也就是作者口中的 &amp;#34;unsafe shitsotrm&amp;#34;，最终在精神上压垮了作者。在移走 actix-web 后，fafhrd91 写了一篇 &amp;#34;postmortem&amp;#34;，不无悲哀地说：&lt;/p&gt;&lt;blockquote&gt;Each of this projects was rewritten from scratch at least 4-5 time. I hope I expanded some boundaries and found few new patterns, I hope other developers will check source code and find inspiration to move even further. Nowadays supporting actix project is not fun, and be part of rust community is not fun as well.&lt;br/&gt;I am done with open source.&lt;/blockquote&gt;&lt;p&gt;fafhrd91 有他的道理。他想把对 rust 的使用 &amp;#34;push to its limit&amp;#34;，看看性能上究竟能走多远。在这点上，他无疑是成功的。然而，如果他做的是个更偏底层的项目，比如操作系统，人们也许会理解他。但将这些普通程序员尚未掌握，心生恐惧的奇淫技巧用在一个 web 项目上，大家的心里总是有疙瘩。人们对于他们不能理解的事物总是会心生畏惧。&amp;#34;a sad day for rust&amp;#34; 的作者说：&lt;/p&gt;&lt;blockquote&gt;有人翻看了 actix-web 的源码，发现里面使用了大量的不安全的代码。这并不算什么事 —— 但问题是，很多不安全的代码没有必要。于是事情开始往糟糕的方向发展。&lt;br/&gt;&lt;br/&gt;actix-web 的作者强硬回复说：那些不安全代码没问题。这简直是程序员「不安全代码焦虑症」的完美模型：一个大型的，重要的，有影响力的库，却包含大量不安全代码，并且作者对此态度消极。&lt;br/&gt;&lt;br/&gt;需要注意的是，这群人是程序员，他们不仅仅抱怨，他们会写代码。不管是打着开源软件精神的旗号还是真心想贡献，他们用代码来回应。无奈，提交的补丁被作者驳回。这也并没有什么大不了的：项目的维护者有权利决定是否要接受提交的补丁。&lt;br/&gt;&lt;br/&gt;于是，reddit 上开始了热火朝天的争论。言论开始擦枪走火，滑向丑陋的一面。更多的问题被提交，关闭，以及锁定。最终，作者接受了一些补丁，把不安全代码大大降低。&lt;br/&gt;&lt;br/&gt;人们还是不够满意，更多的争论，更多的补丁，更多的口水战，以及嫌隙（bad blood）。&lt;/blockquote&gt;&lt;p&gt;其实我一直觉得 rust 里 unsafe 这个关键字用得不好，其实叫 &amp;#34;unchecked&amp;#34; 更贴切，且显得没那么极端。你看，unsafe code 翻译过来是「不安全代码」，是不是看着就立刻产生不安全的感觉？&lt;/p&gt;&lt;p&gt;我稍稍翻阅了一下 actix-web 的问题单，发现争论还算温和，并且大多还算就事论事 —— 和国内的论坛的撕逼相比，这样的口水战简直是学前班的水平。但这还是伤害了作者的心：本来写代码是为了找乐子，现在成了负担：在坚持自己理念和大众的责难中他两头都不是人，于是干脆像韦爵爷一样，大吼一声：老子不干了！&lt;/p&gt;&lt;p&gt;留给开源界的是，一地鸡毛。&lt;/p&gt;&lt;p&gt;投入巨大精力长期维护一个开源项目，靠的是热情。这热情需要持续的浇筑。本来，开源软件强调的是 no warranty，as is。你不喜欢，大可不用，或者选择其他项目，甚至 fork 一份按你的意愿来运作。但这个世界偏有那么一撮人：他们对现状不满，却逼迫你做出改变，来符合他们期待的样子。你若妥协，他们将其视作「正义」的胜利；你若不妥协，他们会步步紧逼，直到你妥协为止。&lt;/p&gt;&lt;p&gt;很久前 reddit 上有个帖子（原文找不到了），号召大家不要用 ring（rust 下用 google 的 boringssl 构建的一个加密库），理由是作者不愿意接受 pull request，除非付费。我顺着帖子给出的链接看过去，发现作者的诉求也很合理：他并不打算做某些小众的平台的支持，如果对方迫切需要的话，那么就赞助。这是多么正常的诉求啊。享用着别人免费提供的软件还嫌人家想靠这个赚钱 —— 难不成开源软件的作者就活该努力过成一个穷逼？&lt;/p&gt;&lt;p&gt;我是个不太愿意在社区讨论的人，这几年尤其严重。早年我在知乎也曾广泛回答过问题，在专栏连载过文章，和键盘侠们撕过。后来我渐渐不回答问题了，偶尔犯了傻逼回答一两个，我都不去看评论。其实里面有有营养的评论，但它们被无意义的抖机灵，晒优越，鸡蛋里挑骨头以及言语中透着轻蔑的引战给淹没了。何必呢？我写文章是为了开心，而键盘侠耗费几分钟的精力就可以贬低我几个小时甚至更长时间的努力，就像 syn flood 攻击一样。对此，我选择不回应 —— 我为什么要让键盘侠们利用我的不开心成为他们开心的源泉呢？&lt;/p&gt;&lt;p&gt;所以从道义上，我是支持 farfhrd91 的 —— 虽然我自己也不喜欢 actix-web 的代码 —— 但我依然支持作者使用他自己的权利。相对于 leftpad 那位不计后果的作者，farfhrd91 并没有 unpublish 他创建的包，代码库只是转到了&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/fafhrd91/actix-web&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;他个人名下&lt;/a&gt;，给那些的确需要访问的人留有 fork 的余地。&lt;/p&gt;&lt;p&gt;哀莫大于心死。这是我从一个暴走的程序员身上看到的。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2020-01-18-103395428</guid>
<pubDate>Sat, 18 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>致敬时间的价值：一品十年</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-12-31-100357148.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/100357148&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0a2876c35e2be55472c5d0082823fb95_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;江汉曾为客， 相逢每醉还。&lt;br/&gt;浮云一别后，流水十年间。&lt;br/&gt;欢笑情如旧，萧疏鬓已斑。&lt;br/&gt;何因不归去？淮上有秋山。&lt;br/&gt;—— 韦应物《淮上喜会梁州故人》&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;引子&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;对我而言，2010 年是个奇妙的起点。一次不经意的饭局，就像洛伦兹那扇着翅膀的蝴蝶，把我卷入了波澜壮阔的互联网时代。如果说之前的十年，是互联网在泡沫之后自我救赎逐渐重生的十年，这个十年就是金戈铁马气吞万里如虎的十年。我有幸亲历其中，入局，出局，再入局，期间从北京到旧金山，从旧金山到西雅图，浮浮沉沉，走出了一条自己的道路。我曾经在我的&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D402251568%26idx%3D1%26sn%3Dc4fd5992187b720f199d16bc6766c558%26chksm%3D0d0c5d2c3a7bd43a1665108752e6dd5564aef050a9d529aaac3fc9a7bd8728192b0652e6bb1a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「长日无痕」&lt;/a&gt;系列文章的开篇写道：&lt;/p&gt;&lt;blockquote&gt;总而言之，现在完全不可能让时钟倒转了。你不能永远总是对过去也许会发生的事耿耿于怀。你应该认识到你与大多数人一样地过得很好，或许还要好得多，那就应该心满意足了。&lt;br/&gt;十年前我根本无法想象十年后我能如此幸运而又意外地拥有她（小宝），正如十年后我无法预料她会变成什么样子。我可以为我的职业生涯，还有她的人生做&amp;#34;deliberate&amp;#34;的打算，但我无法控制结果。过去的十年，我遇到了很多很多十字路口。重要的是，我做出了选择。我很高兴我的人生经历与大多数人一样丰富，或许还要丰富得多，我很高兴我有很多很多故事讲给我的孩子们听。&lt;/blockquote&gt;&lt;p&gt;以下是我过去这十年发生的大事记。当我把这些点点滴滴串联起来的时候，我深深地感受到了时间的价值。离十年之交的钟声还有几十个小时，希望这篇文章能够触发你也回顾一下自己的经历，把点点滴滴串联起来，然后憧憬未来美好的，新的十年。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;回顾&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在 Juniper 工作了六年之后，我萌生了出去闯荡一番的想法。我一边参加创业竞赛，一边把想法化作代码，最终在 2011 年 —— 中国移动互联网元年 —— 和 Alex / Kent 一起合伙创建了途客圈，开始了一段跌宕起伏的创业历程（详情见我的书：&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D400315517%26idx%3D1%26sn%3Dbbfccb3b1fa90b8207573f345b0eeb0c%26chksm%3D0d29d6613a5e5f774baf0b0b3862b6972ae01b270c69b0dd477f56baf2cf0009d91922a0a3e2%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《途客圈创业记不疯魔不成活》&lt;/a&gt;，在此感谢人民邮电出版社和杨海玲老师）。&lt;/p&gt;&lt;p&gt;2012 年，在创业最艰难的时刻，我的第一个小天使 —— 小宝出生了。她给我带来了&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D202925685%26idx%3D1%26sn%3Ddad96510cda735ece87fd276810edfeb%26chksm%3D16ede469219a6d7ffc5332c84cce0312b543bba6b8be92ec1dc7b5200d102fc8c28815eb70e9%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;无穷的快乐&lt;/a&gt;，也让我一点点学会了如何做一个&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828358%26idx%3D1%26sn%3D9c35df6fb442c9b67bb1cb05a93a2c18%26chksm%3D8704ae1ab073270c578f3aee5b8010477e9408ee763b5561ec976e1dc456863fd9e06d314148%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;合格的父亲&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;2013 年 4 月，我的第一次创业以公司被惨淡收购而告终。感谢我的老板 Shalang 的大力提携，我回到阔别两年多的 Juniper。在体验了国内的创业环境之后，我心中有一个强烈的愿望：有朝一日可以去硅谷感受美国的工作和创业环境。&lt;/p&gt;&lt;p&gt;2014 年 12 月底，先后在好几个老板 Shalang，AK，Gilbert，Bob，Rakesh 的帮助下，经历了&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D204170923%26idx%3D1%26sn%3D1bece1f94419a4384e4fea7f3339aec9%26chksm%3D16dee4b721a96da10a1243e856dccaf6c2fb871af2bd5db890e2a012b2632c5351e9dfc27f06%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;多番折腾&lt;/a&gt;，我和家人终于幸运地拿着 L1/L2 签证，飞抵旧金山。&lt;/p&gt;&lt;p&gt;2015 年 3 月，经老板 Bob 同意，我离开了安逸的 Juniper 总部，来到旧金山的一个略显孤单的做 web 安全的办公室 —— 这是 Juniper 收购的一家创业公司。&lt;/p&gt;&lt;p&gt;2015 年 8 月，在朋友 haofei 大力举荐下，我接受了 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D400531816%26idx%3D1%26sn%3D029b1ef56ebd3ad7fdaa643913ba2513%26chksm%3D0d2a23743a5daa6252e04141c95dd06256a39c951c3cb0f35387d2e144e1d95c04dc66adcca5%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tubi 的工作机会&lt;/a&gt;。随后惴惴不安地等待 O1 签证的结果。在美国工作，&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D204951948%26idx%3D1%26sn%3D0259aa9a1f67a88d00490508f2bf4294%26chksm%3D16c2d39021b55a867bed5a8e3e58b3a7ed4ea707ece2add98ce59988d2b745ace2f18e6527a8%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;必须要有一个合适的身份&lt;/a&gt;：我没抽中 H1b，L1 不能换工作，O1 就是我唯一的机会。&lt;/p&gt;&lt;p&gt;2015 年 11 月，年初 H1b 没有抽中的尴尬变成了年末拿到 O1 的喜悦；我终于可以跳槽到 Tubi，在一个纯互联网的环境中大展拳脚。在我的第一次 all-hands meeting 上，我跟整个团队分享了我的目标，我希望引入的工程师文化，以及 Shlemiel the painter’s algorithm 和 4-minute mile 两个有趣的小故事。在 Tubi，我做的第一个改变，就是把之前在 Juniper 和途客圈都行之有效的午间分享（BBL）引入到 Tubi，为工程团队，甚至整个公司，拓展知识面。我给团队做了 ES6 的培训，引入了 promise 和 observable 的思想，我的同事 Zhiye 分享了 ava，ops 团队的 Tim 给大家讲了 HLS / MPEG4 等编码方式，等等。&lt;/p&gt;&lt;p&gt;2016 年我的同事 Marios（大家亲切称他马老师）作为 CTO 加入 Tubi，我们一起带领着 Tubi 的工程团队，把服务端的老旧的 php 和 es5 javascript 的代码一点点换做 es6 javascript，并且跑在了我新做的一套 API 系统 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D401902529%26idx%3D1%26sn%3D575ae8fdf163afa30604d712a73079fd%26chksm%3D0d0109dd3a7680cbdebdc84a762500d5e7a237946becfe94041d5718e86aabadec8ee0ceb87f%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;UAPI&lt;/a&gt; 上。UAPI 和之前的遗留系统并行运行了一段时间后，最终，所有 API 顺利迁移完毕，遗留系统淡出历史舞台。这次迁移之后，服务速度上升了一个量级，而代码量极度降低（很多重复的逻辑都用更好的编程思想封装和处理），代码质量大大提高。&lt;/p&gt;&lt;p&gt;2016 年 6 月，我排了半年之久的 EB1A 总算开始处理，回美证一到手，我便飞回北京，创建了 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827333%26idx%3D1%26sn%3D84d94dacc06dd3ddf4d5dc60fc896f20%26chksm%3D8704aa19b073230f1b4d70fefbb36665aac85ff496a5bf43c4cb04eb03b03057e8b78ee9f8ab%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tubi 的中国团队&lt;/a&gt;。我跟公司 CEO/CTO/COO 达成的共识是：这支团队不是美国团队的补充或者延伸，而是和美国团队同等「待遇」的核心团队。随后经过不到一年的发展，这支团队迅速成长为 Tubi 工程团队中最得力的团队，承载了大量的核心的研发任务和产品。&lt;/p&gt;&lt;p&gt;2016 年 9 年，我生命中的第二个小天使 —— 小贝呱呱落地。为了小贝和小宝有个良好的生活环境，我们咬牙，在南湾紧邻 Cupertino 的 West San Jose 购置了房产，好让两个小天使能够得到最好的教育。&lt;/p&gt;&lt;p&gt;2017 年初，我尝试把 Elixir 引入 Tubi —— 不光是 Elixir，还有很多软件开发的思维方式。我用 Elixir 写的 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827567%26idx%3D1%26sn%3Da001443824781ee8fa02ebd0d9b6d289%26chksm%3D8704aaf3b07323e5dc9b29ed954aff78482de9dd7192917daea06e1619afc0de392c6eefd206%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Policy Engine&lt;/a&gt; 把我用 Jison（一个 javascript 版本的 Flex/Bison） 写的 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D210542047%26idx%3D1%26sn%3D9c813595c727c0fa028651b9dcdbab12%26chksm%3D16791fc3210e96d551dcac64e432c38bf353193a89798f9389cf5cf0aa437cb8385fb270e248%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rule parser&lt;/a&gt; 效率提升了两个量级，从而奠定了在团队中推广 Elixir 的基础。随后我们在后端逐渐增加 Elixir 和 Scala 的占比：Elixir 做服务端开发，而 Scala 用来开发广告系统。&lt;/p&gt;&lt;p&gt;2017 年整一年是我 devOps 能力大跃进的一年 —— 之前只系统写过 ansible 的我，逐渐演进成 ansible 和 terraform 的小能手。在 Tubi，工程师要对自己的服务负责到底：从服务的撰写，到部署上线，到监控和后续的迭代。我们还将全部服务一点点 GRPC 化 —— 让 GRPC 像血管一样注入和连接各个服务。在此基础上我们引入了 sidecar，负责流量管理，复杂均衡和断路器等功能。&lt;/p&gt;&lt;p&gt;2018 年初，我们集大部分工程团队的力量，把所有的服务从 aws 的一个数据中心迁移到另一个数据中心。迁移的主要目标是把 devOps 全部脚本化，实现「基础架构即代码」（Infrastructure as Code）。一个季度的辛劳换来了巨大的成果，这个项目为公司未来两三年甚至更久的扩容奠定了坚实的基础。与此同时，我们开发了高并发的转码工具 —— 一个视频文件可以被拆分成任意多的片段，分别转码，然后重新组装。在业界，似乎只有 netflix 具备这个能力。&lt;/p&gt;&lt;p&gt;在 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827983%26idx%3D1%26sn%3D2a484ef76354f9ca10f7a49c28594bc4%26chksm%3D8704a893b073218560be4b52bd6431cbb8c17b004e3d55a2296c89af09f901ed842ebd81da7b%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tubi 度过了美妙的两年半&lt;/a&gt;后，2018 年 5 月，我追随老冒加入 ArcBlock，&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828233%26idx%3D1%26sn%3Da31666f3a1563302b4a002ef7ccdb65d%26chksm%3D8704a995b073208323e17330529c2e6073ff26c49885cb469a259c81d69f97db4f8c2470ce69%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;迁居西雅图&lt;/a&gt;，开始了在&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827999%26idx%3D1%26sn%3D5374d71f1baa677ffe6805d36fac2af0%26chksm%3D8704a883b07321953c6e713bb86a08ca546a18f661522bbbf89a8832fbdb897f82babdc7a11e%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;区块链技术&lt;/a&gt;上的&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828141%26idx%3D1%26sn%3D76d2381d82d734949b5182d9a7101727%26chksm%3D8704a931b0732027212347c957fcac12a57cdc9a59b14a5f28d0cbaa6a82929653d7b3f4b07a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;漫长探索&lt;/a&gt;。受限于团队的规模，从一开始，我就&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828040%26idx%3D1%26sn%3Df92d9e17f993668b05bc1ab1c84e153b%26chksm%3D8704a8d4b07321c24ea7947680432a99d43da4f5d0c6dadd941bc244bdeef2ae3ec75fac753b%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;把自动化做到极致&lt;/a&gt;来减少人力成本 —— 我做了一套 Elixir 下的 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827238%26idx%3D1%26sn%3D52af226e93893b3d6508567522f49c89%26chksm%3D8704a5bab0732cac7bcf64cfdb47e298b1b3a6033f2115b7c77da4395d7a2a5b19b2d479be3a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;DSL&lt;/a&gt;，可以从 protobuf 的定义文件起，生成 GraphQL 的接口（可选），GRPC 的接口，数据库的 schema 代码（可选），以及文档。通过这套 DSL，我们的工程师可以快速迭代 API，并在 API 稳定后，只需要实现一套逻辑，就可以同时拥有内部接口，服务间的 GRPC 接口，以及对外的 GraphQL 接口。由于没有 devOps 工程师，我用 gruntworks 的模块一手搭建了我们整个 devOps 的平台 —— 这是我第一次尝试在 AWS 上使用三层子网以及多 VPC 搭建整个云端的架构 —— 我吸取了从 Tubi 学到的很多经验教训，让这个平台在自动化，安全和可用性上达到了一个不错的平衡。&lt;/p&gt;&lt;p&gt;2018 年年底，带着对区块链逐渐成熟的认知，我带领团队开始从一个 PoC 慢慢演进我们自己的应用开发框架 —— Forge 框架，日以继夜地，直至 2019 年 3 月，有了一个像样的版本。&lt;/p&gt;&lt;p&gt;工作和家庭，就像跷跷板的两头，一头扎下去，另一头就翘起来。原本2018 年 9 月，小宝幸运地抽到了南湾非常棒，在加州都名列前茅的一所实验性质的小学 Murdock-Portal，但是因为我工作的关系，老婆不得不带着两个孩子在年底迁居西雅图。当然，有失必有得 —— 她们很快爱上了有山有水有温哥华的大西雅图地区。更重要的是，小宝遇上了她最喜爱的钢琴老师，Mrs. Olga，一位对小宝非常严格却又钟爱有加的，桃李满天下的俄罗斯老太太。&lt;/p&gt;&lt;p&gt;2019 年是起起伏伏的一年。在区块链项目上做得越久，我越欣赏 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828365%26idx%3D1%26sn%3De2c7ed8fd57773b9b3a10db06da5b585%26chksm%3D8704ae11b07327077c6cebc11be70f8ec248e21ea8309373b76a28db3b2a015e29d3a1d8c481%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;git 的优雅&lt;/a&gt;，质朴和包容。我构思了一本并没有开始撰写的关于区块链的技术书籍 —— 大部分内容都在介绍那些不起眼的，但是奠定了区块链基础的技术：比如密码学，p2p 网络，网络安全，各种数据结构和算法（如默克尔树，沙米尔算法），Paxos/Raft 共识算法等等。我觉得相对于那些花里胡哨的激励机制和扑朔迷离的共识算法，这些才是真正有生命力的技术。人们总是错误地将手段当做目标，回归比特币最初的那些目标，相关的手段才显得有意义；而如果目标不同，却强行应用相同的手段（比如说矿工），就舍本逐末了。&lt;/p&gt;&lt;p&gt;9 月份，一次家长会，让我把对孩子的愧疚转化成动力，开始了每晚匀出半个小时到一个小时时间给小宝上课的尝试。三个月下来，小宝已非吴下阿蒙，我也非吴下阿蒙。我暗自赞叹「每个孩子都有成为天才的潜力，就看这潜力如何在成长中兑付」。&lt;/p&gt;&lt;p&gt;10 月份，我跑出了人生&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828312%26idx%3D1%26sn%3Db98f8ecaea8fca19dff5181c200038df%26chksm%3D8704a9c4b07320d24df4d4bfbbd07d26e85d1331315a3af954ab7ec27c918aa812ebb59a0ee5%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;最完美的一次马拉松&lt;/a&gt;，用时 4 小时 32 分。三十七岁的自己，终于超越了三十二岁的自己的脚步。随后我成功影响了孩子们，她们纷纷爱上了跑步。现在每周末早上 7 点半我们都一起跑步 —— 我记得我自己初高中体育课跑个一千五百米自己都要累得吐血，现在小宝可以一口气跑 4km，小贝在我的帮助下，可以跑 2km。跑步不光锻炼身体，还能磨炼毅力，心性，更重要的是，它是父女独处聊天的绝佳时刻。&lt;/p&gt;&lt;p&gt;2019 年最后的日子我还干了一件自以为了不起的「大事」—— 因为 Github 慷慨的代码永久保存计划「arctic code vault」，我开始把之前散落在三四个 repo 里的所有我曾经发表过的近四百篇文章精选出来值得保留的一百多篇集结到目前正在使用的 book_next repo 中，然后将其开源。这个 repo 编译出来的 pdf，有 900 页之多，我将其编译成三个 PDF，分成「技术篇」，「成长篇」和「杂谈篇」，算是对我过去六年人生的一个回顾和总结。&lt;/p&gt;&lt;p&gt;感兴趣的同学，可以去&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/tyrchen/book_next&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-113693d8037e661d79718312e510499f_ipico.jpg&quot; data-image-width=&quot;400&quot; data-image-height=&quot;400&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tyrchen/book_next&lt;/a&gt;&lt;p&gt;下载（记得给我 star 哦）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a6caf18e5f7cdca116ce59fc21db104d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2185&quot; data-rawheight=&quot;1576&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2185&quot; data-original=&quot;https://pic2.zhimg.com/v2-a6caf18e5f7cdca116ce59fc21db104d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a6caf18e5f7cdca116ce59fc21db104d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2185&quot; data-rawheight=&quot;1576&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2185&quot; data-original=&quot;https://pic2.zhimg.com/v2-a6caf18e5f7cdca116ce59fc21db104d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a6caf18e5f7cdca116ce59fc21db104d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;展望&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;人的一生应该这样度过：当回忆往事时，他不会因为虚度年华而后悔，也不会因为碌碌无为而羞愧。- 《钢铁是怎样炼成的》&lt;/blockquote&gt;&lt;p&gt;2019 年最后一个周末和小宝跑步的时候，我们展望了下一个十年。十年后，小宝将年满 17 岁，成为一名大学生。&lt;/p&gt;&lt;p&gt;记得有一次小宝问我：如果我去清华当老师，教钱三一这样的学生，是不是要学到博士啊？我说是。她说：爸爸，等我高中了，要不我们回北京吧，我要考清华，然后一直在清华读到博士，那样就可以在清华教书了。我乐了，告诉她：大学为了防止近亲繁殖（我给她的解释在此略过），自己学校培养的博士是不能留校任教的。所以你到清华任教，不能是清华博士毕业。她说：那我就上斯坦福，读到博士，清华会要我么？我哈哈大笑：如果那样，除了斯坦福，你想去哪个学校任教都没问题啦！&lt;/p&gt;&lt;p&gt;跑步过程中我跟小宝重提了这个话题，问她有多想上斯坦福？她说非常想。我告诉她去斯坦福读书是一个看上去遥不可及，但只要我们共同努力，还是有一些机会的目标。她说那爸爸你就努力赚钱，我就努力学习。我乐了：光是好好学习是远远不够的，你还是要找到你真正喜爱的，吃饭睡觉都会想着的，愿意付出一辈子时光的事情。她问：就像&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D210608109%26idx%3D1%26sn%3D4ce678dd25b95cdc23d4735b5a50a227%26chksm%3D16781df1210f94e7b364dc99716858a88ff687059c492c17c60e8d7f4d60827e5ba0229c7d54%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;爸爸喜欢编程这样&lt;/a&gt;？我点点头，告诉她：接下来的十年是奠定你人生的下限的十年 —— 没人能预测一个人的上限，但往往经过十年二十年，一个人的下限是确定的。所以你要在下一个十年争取尽早找到你真正喜爱的事情 —— 在不断寻找的过程中，我们要&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828291%26idx%3D1%26sn%3Dfe88863007464113018279df8e45a5f3%26chksm%3D8704a9dfb07320c91ea41d408558b205e2f7c674415709bd477d4a17cc864f88b4bf837b8b86%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;广泛地涉猎知识&lt;/a&gt;，理解和掌握那些伟大的先贤们 —— 欧几里得，祖冲之，牛顿，迪卡尔，欧拉，爱因斯坦等穷尽一生发现的真理。十年的时间不算长，但也不短，争取十年后，你读过的书，掌握的知识 —— 比如数学，物理，历史这些知识 —— 比爸爸还要丰富，还要扎实；你拥有独立思考和解决复杂问题的能力；拥有强大的意志力，可以克服各种困难，就像跑步一样，咬着牙完成目标；同时拥有强健的身体和成熟的心智。小宝吐了吐舌头，点点头。&lt;/p&gt;&lt;p&gt;对我而言，下一个十年，家庭是首位。自从我发现小宝对数学的独特兴趣以及超出同龄人的思考问题的方式后，我就有种深深的责任感，不要因为自己的不作为埋没了孩子的这份潜力。只要她还愿意学（只要我还有本事勾得住她的兴趣），我就会继续给她晚间授课。除了目前的内容（中国历史，代数，编程，探索，纪录片，几何）外，也许还会加上计算机相关的内容：从发展历史，工作原理到各种有趣的算法。如果她数学的基础打得牢靠，我们还会涉猎更多科学（物理）的话题。&lt;/p&gt;&lt;p&gt;家庭和工作之外，我个人有这样一些大的目标：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2020：出版一本有趣且不失严谨，把数学和生活联系起来的数学书。目标受众：爸爸们&lt;/li&gt;&lt;ul&gt;&lt;li&gt;2020-2029：如果可能，把《天叔奇谈》其它部分整理成册，出一个系列。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;2020-2029：做一个拥抱 GIT 思想的分布式账本服务（账本，而非区块链）&lt;/li&gt;&lt;li&gt;2020-2024：出版至少两本中文技术书籍（内容待定）。目标受众：程序员&lt;/li&gt;&lt;li&gt;2020-2024：出版一本英文技术书籍（内容待定）。目标受众：程序员&lt;/li&gt;&lt;li&gt;2020-2024：读两遍《资治通鉴》和再读一遍《毛选》&lt;/li&gt;&lt;li&gt;2025-2029：申请一所家附近的学校，读一个 PhD（意味着要考托福，GRE...）&lt;/li&gt;&lt;li&gt;2020-2029：六大马拉松至少跑一个（哼，我就不信年年抽，柏林，伦敦，纽约，东京，芝加哥我就一个抽不到？）&lt;/li&gt;&lt;li&gt;2020-2029：和小宝/小贝携手跑至少一个半马，一个全马&lt;/li&gt;&lt;li&gt;2020-2029：写五百篇文章（基本上，保持一周一篇的节奏）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我和老婆有每年末做下一年计划的习惯，我们建了一个 repo，叫：&lt;b&gt;pursuit-of-happyness&lt;/b&gt;，里面有我们 2017 年到 2020 年的年度计划（更早的计划在 google docs 里）。2019 年最后的这个周末，我们从这几个方面，详尽计划了 2020 年：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;小宝和小贝的培养计划&lt;/li&gt;&lt;li&gt;家庭计划&lt;/li&gt;&lt;li&gt;财务计划&lt;/li&gt;&lt;li&gt;健康计划&lt;/li&gt;&lt;li&gt;旅行计划&lt;/li&gt;&lt;li&gt;读书计划&lt;/li&gt;&lt;li&gt;学习计划&lt;/li&gt;&lt;li&gt;写作计划&lt;/li&gt;&lt;li&gt;工作计划&lt;/li&gt;&lt;li&gt;老婆的 LLC 公司计划&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-59b866ce67a8ec7649212169bb00a314_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1074&quot; data-rawheight=&quot;637&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1074&quot; data-original=&quot;https://pic1.zhimg.com/v2-59b866ce67a8ec7649212169bb00a314_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-59b866ce67a8ec7649212169bb00a314_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1074&quot; data-rawheight=&quot;637&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1074&quot; data-original=&quot;https://pic1.zhimg.com/v2-59b866ce67a8ec7649212169bb00a314_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-59b866ce67a8ec7649212169bb00a314_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;和往年最大的不同是，我们在计划中加入了不少新的元素，试图把&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D203185155%26idx%3D1%26sn%3D47d11db5ea75498eecd7848d7f359ce0%26chksm%3D16e9de1f219e5709f75206e358676428989c7d2351940ecb903bec769fcb128c6942db32a6cd%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;项目管理&lt;/a&gt;的一些思路运用到家庭生活中。我们打算每个月有一次家庭的回顾会议，总结上个月的成就和要改进的地方；我们还加入了合家欢电影，合家欢写作和合家欢读书会。比如说读书会，我们打算每月一次，大家聚在一起讨论过去一个月看过的一本书，学到的内容，有意思的句子，记忆深刻的故事。。。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;至于未来十年的计划，我们还在寻找时间来思考和筹划。有句话说得好：今天的生活是由三、五年前选择决定的；而三、五年后的生活是由今天决定。未来的十年，小宝将和我们远离，逐渐拥抱自己的生活，而小贝也很快会走同样的道路。我们希望这个十年，我们能够筚路蓝缕，共同成长，在奔向下下个十年的时候，能够彼此珍惜，彼此感激。&lt;/p&gt;&lt;p&gt;我也衷心地希望，在屏幕前的你，无论是父亲，母亲，丈夫，妻子，孩子，还是什么旁的角色，也能够在下一个十年即将来临之前，和你最亲密的人一起，计划一下未来的生活。毕竟，时钟是不可倒转的。时间的价值，只有真正懂它，愿意追随它，把控它的人，才能品味。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-12-31-100357148</guid>
<pubDate>Tue, 31 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何安全地保存密码？</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-12-23-99014061.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/99014061&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6046ceb2b18e0d5744663f30db44d671_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;如今的互联网生活，让每个人都离不开密码 — 操作系统有开机密码（用户密码），各种应用有登录密码，甚至还有交易密码。形形色色的密码让用户头皮发麻，要么使用重复的不那么健壮的密码，要么不得不依赖于各种密码保存服务，比如 1password。我常常在想，有没有一种方式，可以让所有的密码从一个主密码中派生出来，就像比特币 BIP44 钱包派生那样？&lt;/p&gt;&lt;p&gt;正巧，今早看了 Signal（一个加密通讯工具）的一篇博文 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//localhost%3A8000/2019/w51/%255Bhttps%3A//signal.org/blog/secure-value-recovery/%255D%28https%3A//signal.org/blog/secure-value-recovery/%29&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Technology Preview for secure value recovery&lt;/a&gt;，介绍了他们用 intel 的 SGX 技术来创建一个 &amp;#34;secure enclave&amp;#34; 进行安全地密码保护的工具。文中介绍了一种派生密码的手段：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用 Argon2 算法将用户密码延展成一个 32 字节的密钥 stretch_key&lt;/li&gt;&lt;li&gt;通过 stretch_key 为密钥，&amp;#34;auth key&amp;#34; 为内容，用 HMAC-SHA256 派生出一个临时的加密密钥 auth_key&lt;/li&gt;&lt;li&gt;通过 stretch_key  为密钥，&amp;#34;master key&amp;#34; 为内容，用 HMAC-SHA256派生出主密钥的一部分 partial_key&lt;/li&gt;&lt;li&gt;使用加密算法级别的随机数生成器生成 32 字节的 seed&lt;/li&gt;&lt;li&gt;以 partial_key 为密钥，seed 为内容用 HMAC-SHA256 派生出主密钥 master_key&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;有了 master_key 后，对于任意的应用程序，可以用类似的方式派生出应用程序所需要的密钥。这样，我们从一个简单的用户密码，生成一系列安全密钥，最终得到一个安全的主密钥，以此就可以类似 BIP44 那样，通过主密钥和一个描述应用程序的字符串，派生出应用程序所需要的密码。&lt;/p&gt;&lt;p&gt;这个过程中，生成主密钥的随机数 seed 很重要，需要保存起来，因为任何应用程序的密码的创建和恢复都需要这个 seed 和用户密码才能得到主密钥。所以我们需要将其保存起来，但明文保存安全性大打折扣，所以我们需要用 auth_key 来加密 seed，然后将其存储到磁盘上，随时使用。通过用户密码可以得到 auth_key，就可以解密加密后的 seed。Signal 博客的原文主要精力放在了如何使用 SGX 技术来防止暴力破解，对我而言，可操作性不强，而密码派生的方法，让我很受启发，于是我把原来的算法稍作更改：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;除了随机生成 seed，还随机生成 Argon2 需要的 salt，salt 和加密后的 seed 一起存储到磁盘上&lt;/li&gt;&lt;li&gt;所有的 HMAC 都是用 Blake2s（Blake2s 有 Sha3 的安全性，性能还非常优秀，且直接内置 HMAC 支持）&lt;/li&gt;&lt;li&gt;用 auth_key 加密 seed 使用了 ChaCha20 算法（TLS 1.3 的推荐算法之一，提供 256 位的安全性）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;然后手痒用 rust 实现了一个简单的小工具：cellar。&lt;/p&gt;&lt;p&gt;cellar 的用法很简单，首先初始化一个 cellar：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cellar init
Creating cellar &lt;span class=&quot;s2&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cellar/default.toml&amp;#34;&lt;/span&gt;
Password: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hidden&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
Your cellar &lt;span class=&quot;s2&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cellar/default.toml&amp;#34;&lt;/span&gt; is created! Feel free to use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cellar generate&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to create or display your application password.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会在你的根目录下创建一个 &lt;code&gt;~/.cellar/default.toml&lt;/code&gt;，记录随机生成的 salt 和加密后的 seed：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat ~/.cellar/default.toml
&lt;span class=&quot;nv&quot;&gt;salt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;C6TQW8joYp2XoIkvaCNfo0ihJ3OacxlTbx68_oW8pF4&amp;#34;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;encrypted_seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;bHn5Lu3yX0g68rRJ4lTOwAvx_uMDFaBnZ_WMkJSU8TM&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，你就可以用 &lt;code&gt;cellar generate&lt;/code&gt; 来派生应用程序的密码了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cellar generate --app-info &lt;span class=&quot;s2&quot;&gt;&amp;#34;user@gmail.com&amp;#34;&lt;/span&gt;
Password: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hidden&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
Password &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; user@gmail.com: FLugCDPDQ5NP_Nb0whUMwY2YD3wMWqoGcoywqqZ_JSU&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;整个代码才 220 行，花了我不到三个小时（时间主要都花在熟悉几个库的文档上）。大家感兴趣可以去我的 github repo 看看：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/tyrchen/cellar&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;github.com/tyrchen/cellar&lt;/a&gt;&lt;p&gt;目前的代码只是一个 MVP，虽然安全性没有问题，但可用性还很低，以后有功夫慢慢完善吧。如果想立即试用，可以 &lt;code&gt;cargo install&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cargo install cellar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，机器上没有 rust 工具链的，需要先安装一下 rust 工具链：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl --proto &lt;span class=&quot;s1&quot;&gt;&amp;#39;=https&amp;#39;&lt;/span&gt; --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前 cellar 只在 osx 和 centos 上测试过，其它平台应该也能工作，不过我不太确定。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;使用 Rust 的感受&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;大概五六月的时候我领着团队系统地学习了一下 rust 语言，后来就有一搭没一搭的写点随手就扔的一次性代码。看到 Signal 的这篇文章后，我按捺不住心头的激情 —— 终于可以用 rust 做一个似乎有点什么用的工具了！写下来总体感觉，rust 有可以媲美 ruby 的表现力，又有可以媲美 C++ 的性能（如果使用正确了），加上略逊于 haskell，但可以秒杀大部分主流语言的类型系统，使得用 rust 写代码是一种享受（除了编译速度慢）。这样一个小工具 200 来行代码（包括单元测试，生成式测试以及一个简单的 benchmark）就可以完成，估计用 python，elixir 和 nodejs 都不那么容易达到。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-12-23-99014061</guid>
<pubDate>Mon, 23 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Noise 框架：构建安全协议的蓝图</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-12-12-96944134.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/96944134&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-288c7bbc1a24ba23d3359dc4f560cda8_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;Noise Protocol Framework（以下简称 Noise）是一个用于构建安全协议的框架。与 TLS，IPSec 这样的有完整实现的协议不同，Noise 更多像是一个蓝图，它为那些想创建自己的安全协议的开发者提供了一套模板。就好像元编程之于编程，Noise 是协议的元协议（meta-protocol）。&lt;/p&gt;&lt;p&gt;诸君也许会问：既然有了 TLS，我们为何还需要创建自己的安全协议？&lt;/p&gt;&lt;p&gt;虽然 TLS 1.3 相对于前作，已经放弃了很多对老旧的算法的支持，整个协议栈也更加清爽更加「现代」，握手的过程只需要 1-RTT（甚至 0-RTT），这些观点都和 Noise 倡导的方向不谋而合，但使用 TLS 必然牵扯 PKI，需要服务器端证书和客户端证书（可选），而证书需要 CA（无论是公共的 CA 还是私有的 CA） 发放，整个协议栈还是非常复杂，且很难应用到非中心化的 p2p 网络中。&lt;/p&gt;&lt;p&gt;所以，当我们想开发一些直接基于 TCP 或者 UDP 的私有协议时，TLS 颇为笨重，并不是最好的选择，而自己开发的安全协议不一定靠谱，这时，Noise 就是一个安全灵活的选择。&lt;/p&gt;&lt;p&gt;我们在之前讲 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828356%26idx%3D1%26sn%3D0cfcf0de0a6a3c1fe9d1fc8d9e7df5f1%26chksm%3D8704ae18b073270e2e7ced09f29846ebc38affed8cb023410f995ee829ceedaddaa7b80cadbe%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WireGuard 的文章&lt;/a&gt; 中提到过安全信道建立的基石是 DH 算法，即协商安全信道的双方，持有一个私密的随机数，然后交换公开的随机数，通过同余算法两端独立计算出相同的密钥，从而达到不传输密钥就可以协商出相同密钥的方式。DH 算法的一个高效安全的变种是 ECDH：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;721&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;721&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;如果我们要开发自己的安全协议，DH/ECDH 是几乎无法避免的。协商出来密钥之后，我们需要考虑使用什么样的对称加密算法和哈希算法，如何验证双方的身份，如何保证前向安全性（现在使用的密钥泄露不会导致过去使用的密钥泄露），如何在收发两个方向上 rekey（密钥使用一段时间后重新生成新的密钥）等等。这些令人头疼的问题，Noise 协议都做了严格的规定。&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;鸟瞰 Noise 协议&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们先要明确一件事情：Noise 协议虽然其初衷是为网络协议提供安全信道，但它并没有规定使用什么样的通讯协议 — TCP / UDP 甚至是任何满足 read / write 接口的子系统，比如文件，管道（pipe），都可以使用 Noise 协议。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-114ca53c5960833a60321730e40f8685_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;201&quot; data-rawheight=&quot;287&quot; class=&quot;content_image&quot; width=&quot;201&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-114ca53c5960833a60321730e40f8685_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;201&quot; data-rawheight=&quot;287&quot; class=&quot;content_image lazy&quot; width=&quot;201&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-114ca53c5960833a60321730e40f8685_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Noise 协议原文除去附录，有 41 页之多，这里面有大量的概念和协议细节的描述，在深入细节之前，我们从用户的角度，或者说产品的角度，看看如何使用一个 Noise 协议做出来的系统。&lt;/p&gt;&lt;p&gt;首先是协议的握手。在握手阶段，发起者和应答者（initiator / responder，注意 Noise 没有使用 Client / Server，但我们可以简单认为 initiator 是 client，而 responder 是 server）通过交换信息对使用何种算法，密钥是什么达成一致。&lt;/p&gt;&lt;p&gt;握手阶段双方需要使用同样的协议变量 —— 和 TLS 不同的是，Noise 把协议变量设计为静态而非协商出来的。这是一个很大的简化，而从用户的角度，用户写出来的使用 Noise 的应用往往是自己的节点跟自己的节点通讯，因而无需协商。我们上次讲到的 WireGuard 使用的是这样的变量：Noise_IKpsk2_25519_ChaChaPoly_BLAKE2s。稍微解释一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I：发起者的固定公钥未加密就直接发给应答者&lt;/li&gt;&lt;li&gt;K：应答者的公钥发起者预先就知道&lt;/li&gt;&lt;li&gt;psk2：把预设的密码（Pre-Shared-Key ）放在第 2 个握手包之后&lt;/li&gt;&lt;li&gt;ChaChaPoly：对称加密算法&lt;/li&gt;&lt;li&gt;BLAKE2s：哈希算法&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;协议变量各个部分是这样规定的：Noise &lt;i&gt; &amp;lt;握手的模式&amp;gt; &lt;/i&gt; &amp;lt;公钥算法&amp;gt; &lt;i&gt; &amp;lt;对称加密算法&amp;gt; &lt;/i&gt; &amp;lt;哈希算法&amp;gt;。其中握手模式有很多种，适用于各种不同的场合。其中IK 模式的握手方式是这样的，只需要 1-RTT，我们随后细讲：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;477&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;477&quot; data-original=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;477&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;477&quot; data-original=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0413fed4b9e64ad8f5298a0caa178650_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;握手的过程中，Noise 会生成一个 HandshakeState，它用来记录当前收到的对端传来的固定公钥和临时公钥，以及通过 ECDH 算法算出来的临时数据。当整个握手结束后，双方都有对等的信息，可以生成一致的密钥。于是发起者和应答者对于它们各自的接收端和发送端生成密钥对。&lt;/p&gt;&lt;p&gt;之后，Noise 允许用户将协议状态切换成传输模式（Transport Mode）。切换过程中，HandshakeState 转换成 CipherState，然后就可以用 encrypt / decrypt 来加密和解密应用的数据了。&lt;/p&gt;&lt;p&gt;理论上讲，Noise 的用户接口可以就这么几个：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;build&lt;/code&gt;：根据协议变量和固定私钥，初始化 HandshakeState。&lt;/li&gt;&lt;li&gt;&lt;code&gt;write(msg, buf)&lt;/code&gt;: 根据当前的状态，撰写协议报文或者把用户传入的 buffer 加密&lt;/li&gt;&lt;li&gt;&lt;code&gt;read(buf, msg)&lt;/code&gt;：根据当前的状态，读取用户传入的 buffer，处理握手状态机或者把用户传入的 buffer 解密&lt;/li&gt;&lt;li&gt;&lt;code&gt;into_transport_mode&lt;/code&gt;：将 HandshakeState 转为 CipherState&lt;/li&gt;&lt;li&gt;&lt;code&gt;rekey&lt;/code&gt;：在传输模式下，用户可以调用 rekey 来更新密钥&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对于用户的应用程序来说，这个接口无比简单，很容易和现有的系统串联起来。从产品的角度，简单不仅仅意味着美，还意味着很难用错。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Noise 协议握手细节&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Noise 协议的核心部分是握手协议，它总共支持 12 种不同的协商的模式。这些模式可以进一步和 PSK，非对称加密算法，对称加密算法，哈希算法排列组合出数百种不同的协议变量。当然，核心就是这 12 种。每个模式都由两个字母标识，第一个字母代表发起者，第二个字母代表应答者：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;585&quot; data-rawheight=&quot;718&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;585&quot; data-original=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;585&quot; data-rawheight=&quot;718&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;585&quot; data-original=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-abd95bf10a8cc240d66ad4d48508e73d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;其中：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;N：表示自己没有固定公私钥&lt;/li&gt;&lt;li&gt;K：表示自己的固定公钥对方预先知道（通过其他途径）&lt;/li&gt;&lt;li&gt;X：表示自己的固定公钥通过网络加密传输给对方（用于身份隐藏）&lt;/li&gt;&lt;li&gt;I：表示自己的固定公钥明文传输给对方（不考虑身份隐藏），I 状态只会出现在发起端&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有了这些概念，我们就好理解每种模式的含义 —— 比如：KX。接收者预先知道发起者的固定公钥，而接收者的固定公钥通过网络加密传输给发起者。因为接收者预先知道发起者的固定公钥，意味着发起者通过某个渠道将其固定公钥 s 在握手之前就发送给了接收者。这就是上图中 &lt;code&gt;...&lt;/code&gt; 前面的 &lt;code&gt;-&amp;gt; s&lt;/code&gt; 的意思。&lt;code&gt;...&lt;/code&gt; 之前的动作都代表预先发送，并不包含在握手之中。&lt;/p&gt;&lt;p&gt;我们接着看 &lt;code&gt;e, ee&lt;/code&gt; 这些字符代表什么。如果是单个字符，代表箭头方向接收到对方传来的公钥。&lt;code&gt;s&lt;/code&gt; 是固定公钥，&lt;code&gt;e&lt;/code&gt; 是临时公钥；如果是两个字符，则代表做 DH 运算 —— 第一个字符代表自己的公钥，第二代表对方的公钥。我们来解释一下 XK（为了便于区分，我们把对端的公钥前面加一个 r，表示 remote）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;- s&lt;/code&gt;：接收方的固定公钥预先提供给了发送方&lt;/li&gt;&lt;li&gt;&lt;code&gt;...&lt;/code&gt;：之前的消息是握手阶段就已经完成的消息，属于先验知识&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&amp;gt; e, es&lt;/code&gt;：发送方发送自己临时生成的公钥 e，然后用自己的临时公钥 e 和对方的固定公钥 s 做 DH(e, rs)。接收方收到 e 之后，也可以做 DH(re, s)。&lt;/li&gt;&lt;li&gt;&lt;code&gt;&amp;lt;- e, ee&lt;/code&gt;：接收方发送自己临时生成的公钥 e，然后做 DH(e, re)；发送方收到对方发来的 e 之后，做 DH(re, e)。&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&amp;gt; s, se&lt;/code&gt;：此刻双方已经可以生成一个临时的密钥，发送方用其加密发送自己的固定公钥，然后再做 DH(s, re)；接收方收到对方的 s 后，做 DH(rs, e)。&lt;/li&gt;&lt;li&gt;至此，协商结束&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;XK 是 Noise 里面路径最长的握手模式，其它模式都是 1-RTT。关于 XK（或者其他模式）的安全性分析，可以在 Noise Explorer 里探索，这里就不详述：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//noiseexplorer.com/patterns/XK/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Noise Explorer: XK&lt;/a&gt;&lt;p&gt;Noise 整个握手的过程每次 DH 并不是孤立的事件。从建立 HandshakeState 那一刻起，Noise 就维护一个 chaining key，每次运算的结果都会反映到 chaining key 之中。至于握手过程中 chaining key 是如何计算的，协议的状态机是如何维护的，可以参考 Noise Spec，我就不重复解释了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Noise 协议的应用&lt;/b&gt;&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;WireGuard 算是目前最成功的公开的应用。因为 Noise 协议主要应用在提升私有协议的安全能力上，所以很多应用并不为公众所知。根据 官方的 WhatsApp Encryption Overview 文档，Whatsapp 端到端的消息加密使用了 Noise 协议。比特币的闪电网络也使用了 Noise 协议。rust-libp2p 应用了 Noise 协议，这也意味着，polkadot，substrate 以及 facebook 的 libra 也（潜在）使用 Noise 协议。&lt;/p&gt;&lt;p&gt;此外，Noise 协议还可以用于加密文件 —— 只要我有你的公钥，我可以使用单向握手（Noise Spec 7.4）加密某个文件（附带握手时发送的消息），然后传输到某个不安全的位置（比如网盘，FTP，IPFS，甚至区块链中），该文件只有拥有私钥的人才能解密。这种应用很有意思，因为它具备非对称加密的安全性，同时又具备对称加密的加解密速度。&lt;/p&gt;&lt;p&gt;如果你对 noise 协议感兴趣，rust 下的 snow crate（程序君验证过），golang 下的 libdisco（未验证） 和 flynn/noise（已经两年未更新）看上去都不错。尤其是 rust 下的 snow，实现精巧，很容易和其它模块如底层的 tokio/async-std，以及上层的 yamux 结合使用。snow 在不少开源项目中，尤其是区块链和 IoT 的项目中得到广泛使用。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-12-12-96944134</guid>
<pubDate>Thu, 12 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>我们随手做的 git stash，究竟干了什么？</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-28-94216223.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/94216223&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7923a827cfed24e1951f026e1ec7f990_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; 是程序员的至宝。老板 biangbiang 甩来一个 case，说这个要下班之前 hot fix，咋办，stash，切到 release 对应的分支，缝缝补补；产品 kuangkuang 砸来一个需求更新，说这个简单，小哥哥帮帮我先做了，咋办，stash 切一个新的 feature 分支，撸袖子干。如果没有 &lt;code&gt;git stash&lt;/code&gt;，人生至少要灰暗一半。&lt;/p&gt;&lt;p&gt;git 执拗，如果你手头上的活没提交，它拒绝切换分支的请求 —— 这挺合情合理，因为切换分支（其实就是切换到历史上的某个 commit，如果 &lt;code&gt;git checkout -b&lt;/code&gt; 就建立一个 ref 指向当前 &lt;code&gt;HEAD&lt;/code&gt;）涉及到工作目录的更新，以及 git 索引的重建，如果当前的工作目录修改了，git 总不能将你辛辛苦苦的成果抹去吧。&lt;/p&gt;&lt;p&gt;所以 &lt;code&gt;git stash&lt;/code&gt; 显得格外亲切。它帮你把手头未完成还不好提交（提交必然牵扯 commit-hook，又是运行单元测试又是静态检查的）的活收拢到一个暂存区，等新任务完成了可以再 &lt;code&gt;git stash pop&lt;/code&gt; 恢复之前的工作。它的产品机理，像极了 CPU 的 exception，所以说程序员来来回回就那么几出戏，只不过在不同的场景下粉饰一下改头换面上演而已。&lt;/p&gt;&lt;p&gt;那么，&lt;code&gt;git stash&lt;/code&gt; 背后究竟干了什么？这其实是我在推进 gitrocks 需要探索的。来来来，动次打次，动次打次，敲起你的茶柚，抖起你的肩儿，我们一起 type（wow, you can really type~）。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;第一遍尝试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;建立一个新的 repo，&lt;code&gt;git add hello.txt&lt;/code&gt; (内容：&lt;code&gt;hello world!\n&lt;/code&gt;)，然后 &lt;code&gt;git commit -a -m &amp;#34;init commit&amp;#34;&lt;/code&gt;。之后再 &lt;code&gt;git ad goodbye.txt&lt;/code&gt; (内容：goodbye world!)。这些操作依次完成后，整个 objects / logs / refs 目录长这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;logs
          HEAD
          refs
              heads
                  master
    objects
          &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;
                a295f9eedc7635bce94d7d2f82328fa5032ed1
          &lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;
                b909b4a7cad81fe818b364959775188bfccf3d
          &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
                09101760644963fee389fc730acc4c437edc8f
          a0
                423896973644771497bdc03eb99d5281615b51
          info
          pack
    refs
        heads
              master
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们查看一下 init commit：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p 11a2
tree 6009101760644963fee389fc730acc4c437edc8f
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787652 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787652 -0800
gpgsig -----BEGIN PGP SIGNATURE-----

 iQB1BAAWCAAdFiEEDAfXiyARvxtLDYya/74NqNQekKwFAl3dWksACgkQ/74NqNQekKzqAgD9HCMmZOL6JRNZZd1jKoDXR8d65q0/aIgeOFQ5SHcdFzUBAMcQypPkhC9dSmV3PydpnddnIp03I6Fja1d2O+bF3nsP
 =VDnV
 -----END PGP SIGNATURE-----


init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着我们试着 &lt;code&gt;git stash&lt;/code&gt; 一下，神奇的事情发生了！&lt;code&gt;logs/refs&lt;/code&gt; 下多了 &lt;code&gt;stash&lt;/code&gt; 引用，而 &lt;code&gt;objects&lt;/code&gt; 下哐哐哐整出来三个新的对象：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;logs
          HEAD
          refs
              heads
                    master
              stash
    objects
          11
                a295f9eedc7635bce94d7d2f82328fa5032ed1
          55
                b909b4a7cad81fe818b364959775188bfccf3d
          60
                09101760644963fee389fc730acc4c437edc8f
          68
                0c79419d0067c90c1103329d9e1effef0fd216
          a0
                423896973644771497bdc03eb99d5281615b51
          de
                8fcd1649da1ab5a6694622508c0e95178ddd02
          e8
                c012220c2e1116ffa1de1264773bd92d31f36b
          info
          pack
    refs
        heads
              master
        stash
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看看这几个新的对象是什么东东。&lt;/p&gt;&lt;p&gt;&lt;code&gt;680c&lt;/code&gt; 是一棵包含了 &lt;code&gt;hello.txt&lt;/code&gt; 和 &lt;code&gt;goodbye.txt&lt;/code&gt; 的树。正常来说，只有当 commit 时，这棵树才会产生：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p 680c
100644 blob 55b909b4a7cad81fe818b364959775188bfccf3d    goodbye.txt
100644 blob a0423896973644771497bdc03eb99d5281615b51    hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;de8f&lt;/code&gt; 有点意思，它是一个 commit，commit 消息是 &lt;code&gt;WIP on master: 11a295f init commit&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p de8f
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
parent e8c012220c2e1116ffa1de1264773bd92d31f36b
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800

WIP on master: 11a295f init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;11a295f&lt;/code&gt; 就是上文 &lt;code&gt;git cat-file -p 11a2&lt;/code&gt; 那个 commit。可以看到，这个 commit 并没有我的 GPG 签名。&lt;/p&gt;&lt;p&gt;&lt;code&gt;e8c0&lt;/code&gt; 让有有点摸不着头脑，它也是一个 commit：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p e8c0
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800

index on master: 11a295f init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;仔细比较 &lt;code&gt;de8f&lt;/code&gt; 和 &lt;code&gt;e8c0&lt;/code&gt;，我们发现，除了 commit 消息不同之外，&lt;code&gt;de8f&lt;/code&gt; 还多了一个 &lt;code&gt;parent&lt;/code&gt; 指向 &lt;code&gt;e8c0&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;我们再看新增的 &lt;code&gt;.git/logs/refs/stash&lt;/code&gt; 里存了什么：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cat .git/logs/refs/stash
0000000000000000000000000000000000000000 de8fcd1649da1ab5a6694622508c0e95178ddd02 Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574787769 -0800    WIP on master: 11a295f init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及 &lt;code&gt;.git/refs/stash&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cat .git/refs/stash
de8fcd1649da1ab5a6694622508c0e95178ddd02&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后看看 master 指向哪里：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cat .git/HEAD
ref: refs/heads/master
$ cat .git/refs/heads/master
11a295f9eedc7635bce94d7d2f82328fa5032ed1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这下子整个脉络就清晰了。各个对象之间的关系是：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;598&quot; data-rawheight=&quot;737&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;598&quot; data-original=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;598&quot; data-rawheight=&quot;737&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;598&quot; data-original=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f9ed66b29b6fa739684abb0773b6113a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们再看看 &lt;code&gt;git stash pop&lt;/code&gt; 会发生什么：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;logs
          HEAD
          refs
              heads
                  master
    objects
      jec 11
                a295f9eedc7635bce94d7d2f82328fa5032ed1
          55
                b909b4a7cad81fe818b364959775188bfccf3d
          60
                09101760644963fee389fc730acc4c437edc8f
          68
                0c79419d0067c90c1103329d9e1effef0fd216
          a0
                423896973644771497bdc03eb99d5281615b51
          de
                8fcd1649da1ab5a6694622508c0e95178ddd02
          e8
                c012220c2e1116ffa1de1264773bd92d31f36b
          info
          pack
    refs
    ref heads
          ads master
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;.git/logs/refs/stash&lt;/code&gt; 和 &lt;code&gt;.git/refs/stash&lt;/code&gt;没了。其它没有变化。&lt;/p&gt;&lt;p&gt;作为一个较真的程序员，我们继续 &lt;code&gt;git stash&lt;/code&gt;，照理来说，新的 stash 应该只产生新的 &lt;code&gt;.git/logs/refs/stash&lt;/code&gt; 和 &lt;code&gt;.git/refs/stash&lt;/code&gt; 文件，不会再产生新的 commit 了，然而，git 依旧固执地同样产生了两个新的 commit：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p 9a06
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
parent 7bb55ed97e4d922a2e2ae04bf2f2f7e04807f5de
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800

WIP on master: 11a295f init commit

$ git cat-file -p 7bb5
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800

index on master: 11a295f init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这次我们驾轻就熟：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cat .git/logs/refs/stash
0000000000000000000000000000000000000000 9a063baa8146a819548b0a59e27180ac6951ba3c Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574788382 -0800    WIP on master: 11a295f init commit

$ cat .git/refs/stash
9a063baa8146a819548b0a59e27180ac6951ba3c

$ cat .git/refs/heads/master
11a295f9eedc7635bce94d7d2f82328fa5032ed1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了这些信息，我们再次梳理一下现在 DAG 的样子：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;638&quot; data-rawheight=&quot;759&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;638&quot; data-original=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;638&quot; data-rawheight=&quot;759&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;638&quot; data-original=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-fdbc7c04fa866d99bb634a732fdfb2aa_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们把 &lt;code&gt;goodbye.txt&lt;/code&gt; &lt;code&gt;stash pop&lt;/code&gt; 出来，然后 &lt;code&gt;git commit -m &amp;#34;second commit&amp;#34;&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p b139
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent 11a295f9eedc7635bce94d7d2f82328fa5032ed1
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574789596 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574789596 -0800
gpgsig -----BEGIN PGP SIGNATURE-----

 iQB1BAAWCAAdFiEEDAfXiyARvxtLDYya/74NqNQekKwFAl3dYeMACgkQ/74NqNQekKzuEQEAnpcMk/EBPhARtgKU+EplxhMUuJJOaFdka9bk2c22nL8BALaFzvsUlUdSwvZjFRrjW623Z0CktaIumyHpFefcGbME
 =vT0q
 -----END PGP SIGNATURE-----


second commit

$ cat .git/refs/heads/master
b1390fc37a960f97e9e637c3f82315da94120167&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，新生成了 &lt;code&gt;b139&lt;/code&gt; 这个 commit。master 指向了它。&lt;/p&gt;&lt;p&gt;最后，我们来看看如今的 DAG：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;673&quot; data-rawheight=&quot;751&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;673&quot; data-original=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;673&quot; data-rawheight=&quot;751&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;673&quot; data-original=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-225573cd5bb747e2d378c4de247064f6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;为什么 &lt;code&gt;git stash&lt;/code&gt; 会生成两个 commit 呢？我们继续探索。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;第二遍尝试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;由于之前的 repo 对象结构已经足够复杂，我们换个目录生成一个新的 git 仓库。然后我们还是重复刚才的动作：添加 hello.txt，commit，然后添加 goodbye.txt。这时数据库长这个样子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;logs
          HEAD
          refs
              heads
                  master
    objects
          55
                b909b4a7cad81fe818b364959775188bfccf3d
          60
                09101760644963fee389fc730acc4c437edc8f
          a0
                423896973644771497bdc03eb99d5281615b51
          c6
                2f16377b077275eace0239f24504becc359763
          info
          pack
    refs
        heads
              master
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们修改一下 &lt;code&gt;hello.txt&lt;/code&gt;，使其变成：&lt;code&gt;hello tyr!&lt;/code&gt;。&lt;code&gt;git status&lt;/code&gt; 会告诉我们一个文件在 staging 一个没有：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git status
On branch master
Changes to be committed:
  (use &amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34; to unstage)
    new file:   goodbye.txt

Changes not staged for commit:
  (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed)
  (use &amp;#34;git restore &amp;lt;file&amp;gt;...&amp;#34; to discard changes in working directory)
    modified:   hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们深吸一口气，&lt;code&gt;git stash&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;logs
          HEAD
          refs
              heads
                    master
              stash
    objects
          27
                8efbd09a21dbd2b443bd7a879013abfee434ca
          55
                b909b4a7cad81fe818b364959775188bfccf3d
          60
                09101760644963fee389fc730acc4c437edc8f
          62
                d7bceb43b713c838ce04075fa23fb263aa01f5
          68
                0c79419d0067c90c1103329d9e1effef0fd216
          a0
                423896973644771497bdc03eb99d5281615b51
          a4
                f7a95ef0b8dcbb8d89af09a488f7cb3166fadc
          c3
                efe55f18835756842af5f53a64d1d78dc5ed6c
          c6
                2f16377b077275eace0239f24504becc359763
          info
          pack
    refs
        heads
              master
        stash
        tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多了五个对象！我们探索一下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git cat-file -p 278e
tree 680c79419d0067c90c1103329d9e1effef0fd216
parent c62f16377b077275eace0239f24504becc359763
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800

index on master: c62f163 init commit

$ git cat-file -p 62d7
100644 blob 55b909b4a7cad81fe818b364959775188bfccf3d    goodbye.txt
100644 blob c3efe55f18835756842af5f53a64d1d78dc5ed6c    hello.txt

$ git cat-file -p 680c
100644 blob 55b909b4a7cad81fe818b364959775188bfccf3d    goodbye.txt
100644 blob a0423896973644771497bdc03eb99d5281615b51    hello.txt

$ git cat-file -p c3ef
hello tyr!

$ git cat-file -p a4f7
tree 62d7bceb43b713c838ce04075fa23fb263aa01f5
parent c62f16377b077275eace0239f24504becc359763
parent 278efbd09a21dbd2b443bd7a879013abfee434ca
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800

WIP on master: c62f163 init commit

$ cat .git/refs/stash
a4f7a95ef0b8dcbb8d89af09a488f7cb3166fadc

$ cat .git/logs/refs/stash
0000000000000000000000000000000000000000 a4f7a95ef0b8dcbb8d89af09a488f7cb3166fadc Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1574791207 -0800    WIP on master: c62f163 init commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这下清楚了，commit &lt;code&gt;a4f7&lt;/code&gt; 使用了 &lt;code&gt;62d7&lt;/code&gt; 这棵树，而 commit &lt;code&gt;278e&lt;/code&gt; 使用了 &lt;code&gt;680c&lt;/code&gt; 这棵树。&lt;code&gt;62d7&lt;/code&gt; 里面包含的是更改过的 hello.txt，stash 引用指向了 &lt;code&gt;a4f7&lt;/code&gt;。我们看图更直观：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;587&quot; data-rawheight=&quot;693&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;587&quot; data-original=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;587&quot; data-rawheight=&quot;693&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;587&quot; data-original=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-2c90522fb60a0ea4e9019694bd171d13_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;也就是说，当我们做 &lt;code&gt;git stash&lt;/code&gt; 时，stash 了两类数据：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;staging 区域内的数据（goodbye.txt）&lt;/li&gt;&lt;li&gt;working 区域内的数据（修改了的 hello.txt）&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;为什么这么设计？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;开始我对此非常不解，这种还未完成的工作，就这样了咣咣塞到了不可修改的对象数据库中，不浪费资源么？为什么不直接放在一个 stash 目录中了事呢？在做 gitrocks 里，我探索过一些「聪明」的方案，比如放在一个目录中，扔在 sqlite 里等等，结果越深入，越发现 git 是对的。git 的用户可能像你我一样一天在若干个分支中天马行空恣意妄为，如果所到之处都 &lt;code&gt;git stash&lt;/code&gt; 一下到此一游，那么，势必要记录 parent commit，要为 stash 生成一颗树来保存目录结构，要把修改的文件存入某处 —— 而所有这一切，其实 commit 的代码已经很好地实现了，用一套代码解决两个问题，简单中透着美。此外，生成的 commit 虽然最后没有用，但中间的树和子树很大机会可以被复用，那么，之前的运算并没有白费功夫。最后，git 还提供 gc，把 &lt;code&gt;git stash pop&lt;/code&gt; 之后「绕树三匝，无枝可依」的孤儿们回收掉，节省空间。&lt;/p&gt;&lt;p&gt;花了将近两个小时探索，我平静地接受了这样一个事实：你大爷还是你大爷。git 设计上的精巧还需要认真琢磨。子曾经曰过：「吾有知乎哉？无知也」。连夫子都这么谦恭，我还得努力啊。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;也许你对我上一篇文章会感兴趣：&lt;/p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/93950349&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-a39ae0f396fbeb1984575016809ed02d_180x120.jpg&quot; data-image-width=&quot;1280&quot; data-image-height=&quot;960&quot; class=&quot;internal&quot;&gt;陈天：10 分钟重新认识 GIT&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-28-94216223</guid>
<pubDate>Thu, 28 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>10 分钟重新认识 GIT</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-27-93950349.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/93950349&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a39ae0f396fbeb1984575016809ed02d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;最近对 git 的底层实现异常迷恋，周末抽空用 rust 和 rocksdb 实现了一个乞丐版的 object store - 可以存储 blob，tree，commit 三种对象。之所以用 rocksdb，是因为我不太喜欢文件系统里的那些细碎的 git 对象，我也没太研究 packfile 是如何进行差分编码的，rocksdb 恰好解决了这两个不爽。本来想写篇文章讲讲我在实现过程中踩过的坑，但考虑可能大部分读者虽然每天都在用 git，却并不真正了解 git，所以我觉得有必要先通过一些例子回顾一下 git 的思想和主要的对象类型。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Git 的起源和基础知识&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;git 是十多年前 Linus 不爽现有的版本控制软件，花了大概 10 天功夫做出来的一个工具（初代）— 大佬就是这么牛逼，不爽就撸袖子干，哪儿那么多废话。相比于 cvs/svn 这些「中心化」的，以 diff 为基础存储更新的传统版本控制软件不同的是，git 认为每个文件一旦写入对象数据库中都是不可更改的（immutable），任何微小的修改，都会在数据库中形成一个新的对象。对象的 id 就是其 sha1 哈希。有了这个基础，文件对象（blob）可以被组织成树（更确切地说是默克尔树），一次 提交（commit）就是根据更改的文件的信息生成新的树的过程，新树和老树共享相同的子树，只有变化的部分才会分叉。在漫长的操作之后，对象数据库中有无数棵树，这些树构成了一个默克尔图（merkle DAG）。通过使用引用（ref），比如 HEAD, heads/master，tags/v0.1，git 可以很方便地追踪用户关心的每一棵树的确切状态。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;533&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;533&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;500&quot; data-original=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-da4f382e06963f579fceedc13c391810_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;OK，文字部分就这些，我们稍稍动手来了解 git 的一些实现细节。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;探索 git 的对象数据库&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;首先我们在 &lt;code&gt;/tmp/test&lt;/code&gt; 下 &lt;code&gt;git init&lt;/code&gt; 生成一个新的仓库。git 会自动创建如下目录：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.git/
├── HEAD
├── config
├── description
├── hooks
├── info
│   └── exclude
├── objects
│   ├── info
│   └── pack
└── refs
    ├── heads
    └── tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对当前的 terminal 做分屏处理，然后在右半边的窗口运行：&lt;code&gt;watch -n .5 tree .git&lt;/code&gt; 监控 .git 目录。当我们 &lt;code&gt;git add README.md&lt;/code&gt; 后（README.md 是一个空文件）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.git
    HEAD
    config
    description
    hooks
    index
    info
          exclude
    objects
          e6
                9de29bb2d1d6434b8b29ae775ad8c2e48c5391
          info
          pack
    refs
        heads
        tags

9 directories, 17 files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到，在 git 的对象数据库中，创建了一个新的文件。这个文件的内容是 README.md 的内容，文件名是其 sha1 后 base16 编码的字符串。注意这里用了两层目录结构，这样在有很多对象的时候不至于目录内容太多而过载。这样的设计模式在很多系统中都可以见到，比如 nginx cache。&lt;/p&gt;&lt;p&gt;通过 &lt;code&gt;git show -p e69d&lt;/code&gt; 可以看到这是一个空的文件。&lt;/p&gt;&lt;p&gt;git 内部主要有四种对象：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;blob：存储实际的文件&lt;/li&gt;&lt;li&gt;tree：存储文件的目录结构&lt;/li&gt;&lt;li&gt;commit：存储提交信息（主要是当前的树根和上一棵树的树根）&lt;/li&gt;&lt;li&gt;tag：存储版本信息，相当于对对象库中的某个 commit 显式标记了一下&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;git 的对象数据库会以相同的方式存储所有这些对象类型，单单通过一个 base16 的对象 id，你无法知道其背后是个什么数据。&lt;/p&gt;&lt;p&gt;我们来提交现在的改动。当我们做 &lt;code&gt;git commit -m &amp;#39;create empty readme&amp;#39;&lt;/code&gt; 后：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.git
    COMMIT_EDITMSG
    HEAD
    config
    description
    hooks
    index
    info
          exclude
    logs
          HEAD
          refs
              heads
                  master
    objects
          66
                d70e87e9fd27f086ebf88c9a725dcd3658d27d
          e6
                9de29bb2d1d6434b8b29ae775ad8c2e48c5391
          f9
                3e3a1a1525fb5b91020da86e44810c87a2d7bc
          info
          pack
    refs
        heads
              master
        tags

14 directories, 23 files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对象数据库中多了两个新的对象。我们看看他们都是什么。&lt;/p&gt;&lt;p&gt;f93e 是一个 tree object：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git show --pretty=raw f93e
tree f93e

README.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们也可以看关于 tree 更详细的信息：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git ls-tree f93e
100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    README.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件的文件名并没有存在 blob 对象中，而是存储在 tree 里。这样有两个好处：1) 相同内容的文件，即便拷贝多份，依然只存储一份数据 — 这多见于二进制文件，比如图片；2) 更改文件名只是生成一个新的 tree，并不需要生成新的 blb。&lt;/p&gt;&lt;p&gt;由此可以看出 git 关心的是项目的 snapshot，并不关心单个文件。&lt;/p&gt;&lt;p&gt;如果你严格按照我之前的步骤操作，至此你的文件 blob 和 tree 两个对象的 sha1 哈希应该和我的一样。这是 git 的伟大之处：任何人，在任何硬件环境下，相同的内容都会生成相同的对象（区块链在此之上加入了计算）。&lt;/p&gt;&lt;p&gt;在 commit 这里，我们的数据会产生分叉。在我的机器上，commit 是 &lt;code&gt;66d7&lt;/code&gt;，你的可能是另外一个哈希值。这是因为我设置的作者名，邮件，以及我的 PGP key 肯定都和你的不同。因而我的 PGP 签名和你的不同，哈希自然不同。&lt;/p&gt;&lt;p&gt;66d7 是一个 commit object:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git show --pretty=raw 66d7
commit 66d70e87e9fd27f086ebf88c9a725dcd3658d27d
tree f93e3a1a1525fb5b91020da86e44810c87a2d7bc
author Tyr Chen &amp;lt;xxxx@gmail.com&amp;gt; 1573839165 -0800
committer Tyr Chen &amp;lt;xxxx@gmail.com&amp;gt; 1573839165 -0800
gpgsig -----BEGIN PGP SIGNATURE-----

 iQB1BAAWCAAdFiEEDAfXiyARvxtLDYya/74NqNQekKwFAl3O4T0ACgkQ/74NqNQekKxdmgD+Nw+1JNrV148xIkqfrLLGrFNAJdESu1h+StYVCGAbtLgA/R56Za+ABgLAM/IRGxYXRlZ0MwTmlfCwsznYCPdKyC8E
 =6QP9
 -----END PGP SIGNATURE-----


    create empty readme

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..e69de29&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们把这个文件删除，并 &lt;code&gt;git commit -a -m &amp;#34;deleted README.md&amp;#34;&lt;/code&gt; 会发生什么事情呢？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.git
    COMMIT_EDITMSG
    HEAD
    config
    description
    hooks
    index
    info
          exclude
    logs
          HEAD
          refs
              heads
                  master
    objects
          4b
                825dc642cb6eb9a060e54bf8d69288fbee4904
          66
                d70e87e9fd27f086ebf88c9a725dcd3658d27d
          e6
                9de29bb2d1d6434b8b29ae775ad8c2e48c5391
          f9
                3e3a1a1525fb5b91020da86e44810c87a2d7bc
          fd
                03a139f6b861be4d54247888213a723c24eb99
          info
          pack
    refs
        heads
              master
        tags

16 directories, 25 files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到，新生成了两个文件，猜测一下，一个是 commit 对象，一个是 tree 对象：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git show --pretty=raw fd03
commit fd03a139f6b861be4d54247888213a723c24eb99
tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
parent 66d70e87e9fd27f086ebf88c9a725dcd3658d27d
author Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1573840228 -0800
committer Tyr Chen &amp;lt;tyr.chen@gmail.com&amp;gt; 1573840228 -0800
gpgsig -----BEGIN PGP SIGNATURE-----

 iQB1BAAWCAAdFiEEDAfXiyARvxtLDYya/74NqNQekKwFAl3O5WQACgkQ/74NqNQekKznZwEA+tFOIwzcEAt+j8FD0Sv3722Gfi21ZT56feOHktD1K9gA/3GNilWvdloA4t4mS1kX8HMc1Kr5zvA0iF9F54t3FV4B
 =NGh7
 -----END PGP SIGNATURE-----


    deleted README.md

diff --git a/README.md b/README.md
deleted file mode 100644
index e69de29..0000000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ git show --pretty=raw 4b82
tree 4b82&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，在 &lt;code&gt;4b82&lt;/code&gt; 这个 tree 里，没有任何文件了。&lt;/p&gt;&lt;p&gt;希望这样一个简单的介绍，你对 git 有了更深的了解。这周晚点时间，我们介绍用 rust 实现一个乞丐版 git 踩过的坑。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-27-93950349</guid>
<pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>长日无痕(五): 天叔奇谈</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-14-91761475.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/91761475&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-eaf108ca7f9ea1ecf70f5e62df55047b_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;（一）&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在孩子们的成长过程中，我大部分时候都是个甩手掌柜的角色。之前小宝的课业，无论钢琴滑冰舞蹈绘画，还是读书写作算术科学，都是妈妈在操心，更别说小贝。我白天忙工作，早上出门时孩子们还在酣睡，晚上回到家时已是夜幕降临，一家人等着我晚餐。饭前我例行公事似的抱抱孩子们，玩耍几分钟；饭后我就把自己关在书房，忙自己的工作，看自己的书，写自己的文章。孩儿们偶尔冲进来寻求我的关注，大多被我三言两语打发走。等孩子要休息了，我在床边陪着讲个睡前故事，或者一起算道数学题，反而成了一天之中陪孩子最长的时光。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;老婆体谅我忙不完的工作和闲事，恳求我一天能抽出半个小时陪孩子读书；我应承着，煞有介事做了几天后便故态复萌。后来她放宽了最低标准，要求我每周至少抽一天晚上花上半小时到一小时教小宝学 scratch，结果这也成了镜中月水中花。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;转眼间小宝就要 7 岁，而小贝也 3 岁。老婆周旋于两个孩子之间，已渐渐力不从心。小宝还没形成自律的习惯，离开妈妈的陪伴，钢琴，数学，阅读等一塌糊涂；小贝心底的小怪兽开始觉醒，时刻都想争抢妈妈的注意力。两个孩子各不相让，也没道理可讲，得势的一方洋洋自得，失势的那位便打滚撒泼嚎啕大哭。由于小贝是老二，打自娘胎出来心眼就比小宝多，也比小宝懂得察言观色，讨父母欢心，所以在「抢夺妈妈关注」这块，失势的多是小宝。小宝偏又是赤子之心，本色自然，既不肯服软，又不愿意说好话哄人，生气时怼天怼地，常常惹得妈妈气上加气。老婆被折腾得心力交瘁，常跟我诉苦，我嘴上表示同情，却还是没有任何行动。后来有一日，母女俩因为练琴的事情几近反目，互相之间说了很多气头上的，本不该说出口的狠话。晚上睡觉的时候老婆哭着对我说：你看着办吧，再这样下去，等孩子青春期，我们母女的关系恐怕就要彻底破裂了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;我心里咯噔一下。我想起了有次小宝央求我陪她玩不成，摔门而出留下的那句：「工作，就知道工作！你是一个不管孩子的老爹！」&lt;/p&gt;&lt;p&gt;&lt;br/&gt;第二天晚上，一年级新学期的家长会，我破天荒第一次参加。说来惭愧，小宝在 Sunny Hills 上了一年学，我却连之前的老师 Miss Wolfe 长啥样都不知道。美国的公校是一年一届老师，新学年的老师是 Mrs. Dunn。家长会上我虽然带着耳朵听，心头挥之不去的是「在孩子的成长中，怎样尽一个爸爸的责任，来减轻妈妈的压力？」。在反思的过程中，我意识到我有两个问题：1) 我空有一身的知识，愿意花时间通过写文章，做讲座把知识和技能传递给别人，却吝于培养自己的孩子。2) 我自诩有很强的学习能力，能够掌握任何我想掌握的知识，却懒得在如何教育孩子身上下功夫，学相关的知识。思来想去，决定先从解决问题 1) 入手，投入时间来培养孩子；之后，再处理 2)，不断学习来让自己 &lt;b&gt;有资格&lt;/b&gt; 教育孩子。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;于是我在教室 —— 小宝平日里白天上课的教室里，用她平日里学习用的纸和笔，庄重地写下了如下计划：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;每晚 8 点 30 - 9 点 10 分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;周一：历史故事（和小宝一起探索二十四史中的有趣故事，加深小宝对中华文化认同，以及她对汉字和语文的喜爱）&lt;/li&gt;&lt;li&gt;周二：数学（我们一起探索数字的奥妙，培养她的数感）&lt;/li&gt;&lt;li&gt;周三：Scratch（小宝对编程非常喜爱，我们一起做些有趣的开发，来培养她的逻辑能力，以及把复杂问题拆分的能力）&lt;/li&gt;&lt;li&gt;周四：探索（平日里小宝总问我很多为什么，这些「为什么」我解答得非常肤浅，通过「探索」环节，来更多激发她的好奇心和寻找深度答案的能力）&lt;/li&gt;&lt;li&gt;周五：纪录片（深度讲解一部纪录片，让小宝开拓视野，触及那些「未知的未知」）&lt;/li&gt;&lt;li&gt;周六：几何（其实还是数学，只不过我不想小宝觉得怎么一周会两次数学，几何是从另一个维度解释数学的有力武器）&lt;/li&gt;&lt;li&gt;周日：掷色子或者小宝来选择额外学习哪个内容&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;从长期可行性来说，这个计划能执行到什么程度，我自己心里没底 —— 我自己是否能坚持另说，小宝会不会过了一开始的兴奋期，觉得「一天净在学习都没有玩的时间」而抵触？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;从内容可行性来说，我更是没底。我知道我肚子里的货 —— 周一，周三和周五是最轻松的，我只需要简单准备即可对付；周二和周六，恐怕一段时间之后我得恶补数学 —— 尤其是怎么把枯燥的数学能生动地教给一个不满七岁的孩子；周四，就像薛定谔的猫，不到小宝揭秘她的问题前，我是无法知道这将会是场什么样的挑战。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;家长会后，我把我的计划告诉了老婆。她很开心，因为这样能够让她每天轻松近一个小时，只需要面对一个熊孩子。但她也有担忧，怕我方法不当，拔苗助长，反而把孩子的学习兴趣毁了。我说我们先试试，大纲内的知识，还是你继续教；我就负责开拓她的视野，培养她对探索知识的兴趣。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;（二）&lt;/p&gt;&lt;p&gt;&lt;br/&gt;借着家长会的东风，次日，也就是 9 月 12 日，我和小宝开始了第一次尝试。那一天是周四，所以我们的话题是「探索」。小宝抛出的问题是：世界上现在有多少人？哪些国家人口比较多？人口会减少么？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;为了让课堂的效果足够好，我花了些时间备课，找到了一些可以和她一起观看的视频。我是一个笃信 build-measure-learn 的人，一件事如果我要认真去做，我便会详细记录（尤其是自己的感知），以便于不断提升，于是我开了一个新的公众号「天叔奇谈」，把自己备课和上课的碎碎念放了上去。在授课和记录的迭代中，我开始不停思考一件事情：怎么样让孩子能够迷上每天晚上的课程？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;使人「着迷」既容易又困难。游戏很容易让人沉迷，所以还需要所谓的「防沉迷系统」来解救沉溺于其中的人；但学习新的事物，如果方法不对，不但不能让人着迷，还可能会引发排斥效应。究其原因，是游戏通过视觉听觉触觉等多种感官建立起吸引力，激发我们的好奇心。有了好奇心，我们愿意尝试和体验，而一旦尝试，很快就能得到反馈，我们就会依据反馈不断调整策略（这个策略往往是简单易行的，或者可以通过单纯的训练变得更好的），从而得到更好的反馈（过关，更高的分数，回血，加命，升级，榜上有名），达到身心的满足感，同时自己（游戏中）的能力得到提升，解锁更多的未知世界。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;如果我们把这个模式抽取出来，就是：&lt;b&gt;建立吸引力 - 诱发好奇心 - 促进尝试 - 立即反馈 - 促进进一步尝试 - 提升成就感和满足感 - 赋能&lt;/b&gt;。我打算把这个模式应用在每日的课程中。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;在 9 月 14 日的课程中，这个建立吸引力诱发好奇心的策略就得到了充分的验证。这天是几何课，我跟小宝探索 π。我从宝妈那里觅得一个线团，然后教小宝用圆规画了一个半径 10cm 的圆，然后我们用线一点点量出圆的周长，最后算出来不那么精确的周长和直径之比：π=3.135。这个简单的动手过程大大激发了小宝对 π 的兴趣，以至后来她自己问 Siri π 的值，记录下来，然后一点点把它背了下来 —— 这可是小数点后 50 位！&lt;/p&gt;&lt;p&gt;&lt;br/&gt;随着这个模式的不断推进和演化，我们的「课堂」越来越生动活泼。我们把她的儿童自行车倒置，观看脚蹬转动时链条的传动；我们趴在车屁股后面观察排气口，打开钢琴观察琴弦的振动；我们用围棋子儿来进行加减乘除，学习进制系统；我们用「运动」app 来学习统计和各种图表。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;（三）&lt;/p&gt;&lt;p&gt;&lt;br/&gt;在这里所有的课程中，我最在意的是数学。数学是科学之母，我们生活之中，大到东风快递，小到运动 app，都和数学有关。孩子的认知能力，抽象能力的提升来自于对数学的深刻掌握，而国内或者新加坡的数学教育偏重于对知识点的掌握和训练，略为枯燥，美国的 common core 虽然注重不同的方法和思路，还是摆脱不了枯燥，这让孩子学习的时候往往耽于枯燥的重复，容易对数学敬而远之。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;但数学本身不该枯燥。它美丽灵动，就像曹植梦中的洛神 —— 翩若惊鸿，婉若游龙。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。无论是美妙的黄金分割率，奇幻的杨辉三角形，鬼斧神工般的素数，还是优雅的几何，严谨的逻辑，烧脑的代数，让世事洞明的微积分，抑或那一个个凝结着先贤们智慧结晶却让人望而生畏的公式，定理，都让人如饮醇醪，心旷神怡。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;然而我们的数学教材，无论中美，都几乎是公式手册，而老师的作用是将这些公式固化在孩子们的脑袋里，以便让孩子在应该的年龄掌握大纲里要求的内容。怎样掌握？日复一日的练习 —— 就像健身房里的枯燥的肌肉训练。然而它剥夺了孩子们户外登山的乐趣 —— 那种逢山铺路遇水架桥，在实战中解决问题的乐趣 —— 这是学习数学本该享有的乐趣，也是高斯，欧拉，笛卡尔，莱布尼茨，拉马努金们走过的路。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;所以我们需要的是大量的探索性的学习 —— 把教科书里用公式构筑的精美殿堂敲碎，引导孩子们重新搭上脚手架，顺着先贤们的思路一点点还原他们探索过的路径，甚至走出他们没有走过的路，这样的学习才更有意义，学到的才是真正的解决问题的能力，而非背公式，套题型的能力。当然，我不否认训练的重要性 —— 学而时习之 —— 在探索的基础上辅以适量的训练加以巩固。但我们不能舍本逐末。动物园里的大猩猩经过训练，也能掌握工具的使用，而我们与它们的不同之处在于：我们通过探索和思考，能够发现规律，总结规律。&lt;br/&gt;高斯说：我们需要的是想法，不是符号（What we need are notions，not notations）。我非常赞同。任何一种心智的成长，都来源于自已解决问题，而不是被训练按照既定的方式和步骤去解决。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;无奈的是，学校的老师没有义务，更没有动力去因材施教，引导孩子一点点探索出数学家们走过的路，解决他们解决过的问题。对于一个现代社会而言，基础教育必须是普惠的。因而师范学院流水线上产出的数学老师，其工作的动机首先是保证升学率，让更多的孩子能够在适当的年龄达到适当的认知水平，而非努力培养孩子们的解决问题的能力。这是其一。此外，无论在什么国度，社会都是金字塔的结构，越往上，通道越狭窄，为了避免拥挤，自然需要一个过滤器 —— 而考试成绩，就是规模化选拔的最容易实现也最相对公平的入场券。所以，当数学被列入考试科目的那一刻起，大纲选定的知识体系必定是最容易出题的内容，老师所教的内容必定也朝着这个方向强化。这两者决定了面向大纲的内容，以及面向考试的训练是学校教育的主流。于是，数学的历史不再重要，数学家的生平没人关心，他们是怎么一步步构建出如今这华美的大厦也无人问津，就连数学本身的美也同样被扔在了一旁。因为要传递「美」，需要有知识的沉淀，需要有辨析的能力，需要欣赏美的眼光，而唯独不需要的是大纲。对于数学老师来说，除非真心爱好，他们大概不太会读 Richard Courant 的通俗著作《什么是数学：对思想和方法的基本研究》，更不可能费劲去挑战 Serge Lang 的《代数》了。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;这便是我想花时间解决的问题 —— 至少对于我的孩子们而言。我并不是想挑战这种教育体制 —— 相反我认为其足够公平。我的孩子也必然需要通过「千军万马过独木桥」的厮杀。我想做的是去弥补学校教育无法顾及的部分，像至圣先师孔夫子那样，真正做到「因材施教」，就我的两个孩子来说，这是个挑战，但不是个无法企及的目标。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;所以我跟小宝的数学课的基调就是把数学当成一门艺术去探索，让她深度参与其中，提出问题，探索解决问题的方向，尝试，失败，再尝试。我让她感受斐波那契数列不仅仅是一堆数字和几个公式，它还有很多奇妙的属性；我让她感受连分数的美，以及连分数和数列之间微妙的联系；我们用用一支圆珠笔走过白板上的多边形，通过圆珠笔翻转的次数得出内角和公式；我们在地球仪上「走」出一个三角形，探索三角形内角和是 180° 这个命题的限定条件；我们一起背诵 π，一起玩丢番图方程，一起看跑步之后的统计图表，探索各种统计方法的意义；我们循着 π 认识了祖冲之和割圆术，在勾股定理和根号二的有理数危机中了解了毕达哥拉斯和他的学派，通过几何的公理体系认识了欧几里得，因为 0 和 1 的逻辑运算了解了布尔和他愚蠢的妻子。小学初中高中那些泾渭分明的数学内容变得界限模糊起来，数学也不再仅仅是书上那些琳琅满目的公式和符号。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;在这个过程中，我渐渐发现，按照年龄划分数学学习的内容可能是不明智的，各种数学方法之间是连续的，不是断代的 —— 我们没法谈算术的时候就完全不碰数论，讲几何的时候不涉及代数，讲初等代数的时候刨除排列组合，讲任何话题的时候避开微积分。数学课堂上的小心翼翼是不必要的，代数放在初中教授，微积分放在高中和大学学习，并不意味着代数和微积分的思想就不能出现在一个小孩子的头脑里。&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;贤者时刻&lt;/h2&gt;&lt;blockquote&gt;It is not worth an intelligent man’s time to be in the majority. By definition, there are already enough people to do that.&lt;br/&gt;&lt;br/&gt;G. H. Hardy&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;有天周六，小宝上完溜冰课，妈妈带她来我公司休息，准备参加半小时之后的在我公司附近的舞蹈课。在我办公室的白板上，小宝画了一个数轴：&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-3ad7af032d0b9e8e4377ac3adaef42cc_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;她说：爸爸，你看，这是一个数轴。√22 在这里，π 在这里，我要发明一个数叫 Lindsey，我告诉你它的值：6.5657，你要把这个数记好，因为它跟 π 一样重要。&lt;br/&gt;&lt;br/&gt;祝你即将到来的 7 岁生日快乐，宝贝！&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;br/&gt;如果大家对我的天叔奇谈感兴趣，可以扫码关注：&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0ac10c0f94644ad2ad8d2a04b0befcf3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;344&quot; data-rawheight=&quot;344&quot; class=&quot;content_image&quot; width=&quot;344&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0ac10c0f94644ad2ad8d2a04b0befcf3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;344&quot; data-rawheight=&quot;344&quot; class=&quot;content_image lazy&quot; width=&quot;344&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0ac10c0f94644ad2ad8d2a04b0befcf3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;更早的《长日无痕》系列文章：&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828233%26idx%3D1%26sn%3Da31666f3a1563302b4a002ef7ccdb65d%26chksm%3D8704a995b073208323e17330529c2e6073ff26c49885cb469a259c81d69f97db4f8c2470ce69%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长日无痕（四）&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827437%26idx%3D1%26sn%3D816d53775282cb31d65c7f3947737110%26chksm%3D8704aa71b07323678f3858aa2e35a3594f44521e606ccd8e4efa705df7fc67efe6548769d008%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长日无痕（三）&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D401790638%26idx%3D1%26sn%3D090edc5546fc699d65bf5b43e9eb3adf%26chksm%3D0d0754b23a70dda4bbed5f9edb7131e357ee91c59c11b449f912c69614b13901c52725470b29%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长日无痕（二）&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D402251568%26idx%3D1%26sn%3Dc4fd5992187b720f199d16bc6766c558%26chksm%3D0d0c5d2c3a7bd43a1665108752e6dd5564aef050a9d529aaac3fc9a7bd8728192b0652e6bb1a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长日无痕（一）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-14-91761475</guid>
<pubDate>Thu, 14 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Wireguard：简约之美</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-12-91383212.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/91383212&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e1a5672bc7496a5a7205aee95718fcaf_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;本文共 4500 字，普通阅读需要 10 分钟，精读需要 30 分钟。&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最近团队内部的 BBL，我分享了 Wireguard。Wireguard（以下简称 WG）作为新一代的 VPN 的代表，可能很多做技术的同学都不陌生。和其它 VPN 技术一样，我们可以使用它在家庭网络和公司网络之间搭建一条安全的信道，由此可以访问「内网」的数据和应用。&lt;/p&gt;&lt;p&gt;在具体讲 WG 之前， 我们先来把 VPN 的通用需求抽象一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;安全性（security）：保证两个私有网络间的数据可以在不安全的网络（比如互联网）上安全地传输&lt;/li&gt;&lt;li&gt;真实性（authenticity）：访问者是合法的用户，访问者访问的是正确的网络&lt;/li&gt;&lt;li&gt;高效性（efficiency）：开启 VPN 并不会让访问网络明显变慢，且建立隧道的速度要快&lt;/li&gt;&lt;li&gt;隐秘性（stealthiness）：第三方并不能轻易嗅探到网关的存在&lt;/li&gt;&lt;li&gt;易用性（accessibility）：很容易配置，很容易开启和关闭&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在不安全的网络上安全地传输数据这件事，我们必须感谢 Martin E Hellman，Bailey W Diffie 和 Ralph C. Merkle。他们的专利 Cryptographic apparatus and method 提出了后来广为流传的 DH 算法，用于交换密钥。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9c70edec4c08de7854a32d7648e44675_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;391&quot; data-rawheight=&quot;655&quot; class=&quot;content_image&quot; width=&quot;391&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9c70edec4c08de7854a32d7648e44675_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;391&quot; data-rawheight=&quot;655&quot; class=&quot;content_image lazy&quot; width=&quot;391&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-9c70edec4c08de7854a32d7648e44675_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这个算法本身使用了同余和乘法交换律的性质，过程很简单，大家感兴趣可以看 wikipedia。WG 使用的 ECDH 则是 DH 算法的变种，使用了椭圆曲线来增强性能和安全性：&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;721&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;721&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1ded6bb72691e763a015bc1ce2069c5f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;通过 DH 算法，网络的两端可以在不安全的网络中协商出来用来加密要传输的数据的密钥。之后，数据流就可以用这个密钥进行高效地做对称加密。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;安全性解决了，那么，如何解决网络两端身份验证的问题？这个问题目前的通解是两个：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;共享密钥（pre-shared key）&lt;/li&gt;&lt;li&gt;证书（certificate）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;比如我们访问招商银行的网站，浏览器通过验证招行的证书来确保我们要访问的网络的确是我们要访问的网络。而当一家公司的总部的网络和分支机构的网络要通讯时，可以预先配置彼此的公钥然后通过数字签名来验证彼此，这是共享密钥的一种变体（纯粹的共享密钥不满足前向安全，几乎不应该被使用在通讯中）。&lt;/p&gt;&lt;p&gt;安全性和身份的真实性问题解决了，VPN 最重要的问题也就解决了。我们现在使用的 VPN 解决方案，无论是工作在网络层的 IPSec VPN，还是工作在会话层的 SSL/TLS/OpenVPN，在密钥交换和身份验证都并没有跳脱出前面讲述的算法。它们之所以那么复杂，很大程度在于配置的处理，加密算法的协商和各种兼容性问题上。而本文的主角 WG，虽然从算法的角度并没有太多创新，但通过巧妙地组织需求和另辟蹊跷地实现，产生出一种让人窒息的简洁。&lt;/p&gt;&lt;p&gt;以下是代码量的对比：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3c40829a650f96ab57be6975d78f8601_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;WG 仅有 4k 的内核代码实现！精巧得简直不能再精巧！虽然这么说有些不敬，但对比下来，仿佛 OpenVPN 或者 StrongSwan 是按行收费的印度外包公司的产品，而 WG 是真正的程序员的杰作！Linus 本尊对 WG 赞不绝口，他在 18 年 8 月 2 日的 一封邮件 这么写到：&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;Btw, on an unrelated issue: I see that Jason actually made the pull request to have wireguard included in the kernel.&lt;br/&gt;Can I just once again state my love for it and hope it gets merged soon? Maybe the code isn’t perfect, but I’ve skimmed it, and compared to the horrors that are OpenVPN and IPSec, it’s a work of art.&lt;br/&gt;Linus&lt;/blockquote&gt;&lt;p&gt;要知道，Linus 平日来评论代码的画风是这样的（Mauro 是一个 Kernel maintainer）：&lt;/p&gt;&lt;blockquote&gt;&amp;#34;It’s a bug alright – in the kernel. How long have you been a maintainer? And you &lt;i&gt;still&lt;/i&gt; haven’t learnt the first rule of kernel maintenance?&lt;br/&gt;&amp;#34;Shut up, Mauro. And I don’t &lt;i&gt;ever&lt;/i&gt; want to hear that kind of obvious garbage and idiocy from a kernel maintainer again. Seriously.&lt;/blockquote&gt;&lt;p&gt;所以能让 Linus “state my love” 比登天还难。所以让我们怀着朝圣的心情，跪着学习 WG 是怎么做到的 —— 这样做产品写代码的思路值得我们潜心研习！&lt;/p&gt;&lt;h2&gt;&lt;b&gt;WG 接口的概念&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;首先从概念说起。&lt;/p&gt;&lt;p&gt;很多人做产品并不太在意去清晰地解释产品中存在的诸多新老概念，尤其是不敢创建新的概念。这是非常错误的做法。我们在开始架构设计的时候，就应该把产品的所有概念梳理清楚，并且当现有的概念不能很好地描述产品的某部分时，要勇于创建新的概念来使其描述足够完备。概念是工程师之间，以及工程师和外界沟通的基础，通过大家一致认可的概念去沟通，更精确，更高效。比如当我上文赋予 ECDH 是 DH 算法使用椭圆双曲线的一种变体这样一个概念后，我再提及 ECDH，就不必费劲重新解释一下。当我们产生一个新的概念后，我们可以将很多属性附着于这个概念之上，使其区别于其它概念。&lt;/p&gt;&lt;p&gt;WG 先定义了一个很重要的概念 —— WireGuard Interface（以下简称 wgi）。为什么要有 wgi？为什么现有的 tunnel 接口不适合？一个 wgi 是这么一个特殊的接口：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;有一个自己的私钥（curve25519）&lt;/li&gt;&lt;li&gt;有一个用于监听数据的 UDP 端口&lt;/li&gt;&lt;li&gt;有一组 peer（peer 是另一个重要的概念），每个 peer 通过该 peer 的公钥确认身份&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过定义这样一个新的接口，wgi 把它和一般的 tunnel 接口区分开。有了这样一个接口的定义，其它数据结构的挂载，以及数据的收发都很清晰明了了。&lt;/p&gt;&lt;p&gt;我们看 WG 的接口配置：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[Interface]
Address = 10.1.1.1/24
ListenPort = 12345
PrivateKey = blablabla

[Peer]
PublicKey = IWNVZYx0EacOpmWJq6lE8RfcFBd8EeUliOi+uYKQfG8=
AllowedIPs = 0.0.0.0/0,::/0
Endpoint = 1.1.1.1:54321&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;WG 的 VPN 隧道的发起者（initiator）/ 接收者（responder）是对等的，所以也没有一般 VPN 的客户端/服务器端或者 spoke/hub 的区别。因而配置也是对等的。&lt;/p&gt;&lt;p&gt;在这个配置中，我们进一步了解了 peer 这个概念：它是 WG 节点的对端，有静态配置的公钥，peer 背后的网络的白名单（AllowedIPs），以及 peer 的地址和端口（这个并不一定需要，并且随着网络的漫游，可能会自动更改）。&lt;/p&gt;&lt;p&gt;仅仅 9 行配置，我们就描述了一个最简单的 VPN 网络。这个配置里没有没完没了的证书的配置，没有非常复杂，长达上百行不知所云的内容，也不用设置 CA。如果你不幸配置过 IPSec VPN 或者 OpenVPN，那你该感慨简洁真的是第一生产力。&lt;/p&gt;&lt;p&gt;从数据结构的角度来看，wgi 下面挂一张 peer 的哈希表，和一张密钥索引（key_index）的哈希表。通过接收到的数据报文中的 key_index，我们可以立刻定位到 peer，而每个 peer 下面存储 endpoint 的状态，协议握手的状态，以及 keypairs（三组：当前正在使用的密钥，上一次 rekey 前使用过的密钥，rekey 后下一次即将要用的密钥），而每组 keypair 又包含接收和发送两个方向的 keypair。&lt;/p&gt;&lt;p&gt;在 wgi 接口使能的情况下（wg-quick up wg0），wgi 会被初始化，进而其相关的 peers 也都会被创建出来；反之（wg-quick down wg0），wgi 会被停止运行，相关的 peers 会被删除。数据结构的脉络非常清晰明了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;加密信道协商的过程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;WG 的简洁设计还体现在加密隧道的协商上。它使用了 Noise Protocol Framework 来构建协议的协商过程。Noise Protocol Framework 是一个设计精巧的用来构建安全协议的框架，这里我们就不展开来讨论，之后我会撰文另行介绍。WG 使用了 Noise_IKpsk2_25519_ChaChaPoly_BLAKE2s，从协议名字你大概能猜到它选取 curve 25519 做 ECDH，ChaChaPoly 做对称加密，Blake2s 做哈希，在 IKE/SSL/TLS 协议中，这些算法都是两端协商出来的，WG 觉得没必要，直接将其固定在协议中，所以大大减少了需要支持的加密算法，以及节省了加密算法的协商过程。因为网络的两端都配置了对方的公钥，因而它可以仅仅使用 1-RTT（一组来回的报文），2 个报文，就完成隧道的建立。看看 IPSec 使用的 IKE 协议，main mode 下 6 个报文（3-RTT），aggressive mode 下也需要 3 个报文（2-RTT）。北京到西雅图，1-RTT 大概 175ms (&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//cloudping.info&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cloudping.info&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;)，2-RTT 就会有非常明显的延迟。对于任何协议来说，减少协商隧道的 RTT，可以大大增强协议的性能。&lt;/p&gt;&lt;p&gt;1-RTT 也意味着无连接（connection-less），因为相互之间没有确认。大家可以对比有连接的 TCP（三次握手确认眼神连接）和无连接的 UDP。有连接的网络有无数好处，但无连接胜在简洁，就像一条记忆只有七秒钟的鱼，没有过去，现在和未来的负担。&lt;/p&gt;&lt;p&gt;对于有连接的协议，一般来说，需要有个状态表存储之前协议进行到哪里了。这个状态表是动态生成的，很容易成为 DoS 的标的。比如 TCP，从诞生之初就饱受 SYN-flood 之苦。而无连接，则没有这个负担 —— 服务器不必为了客户端的握手请求而特定做些什么，也不用考虑丢包（丢包就重新握手好了，反正就 1-RTT），不用起定时器管理连接表中的半开连接（因为压根没有）等等。&lt;/p&gt;&lt;p&gt;WG 的握手报文中会携带：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;unencrypted_ephemeral：发送方为这次握手临时生成的公钥（未加密，用于 ECDH）&lt;/li&gt;&lt;li&gt;encrypted_static：用对端公钥和临时生成的私钥 ECDH 出的临时密钥 key1 对称加密对方的公钥&lt;/li&gt;&lt;li&gt;encrypted_timestamp：用对端公钥和自己的私钥 ECDH 出 key2，key2 混淆进 key1，来加密当前的时间戳&lt;/li&gt;&lt;li&gt;mac1：对端公钥加上整个报文内容后的哈希&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;接收方先校验 mac1（简单的身份验证 - 一般的黑客在这一步就跪了），如果不对，直接丢弃；之后验证 encrypted_static（确认眼神 - 除非有私钥，否则黑客在这一步也跪了），验证 encrypted_timestamp（防止重放，所以重放攻击也跪了）。当接收方校验一切 OK 后，它可以生成自己的临时密钥对。此时，接收方因为有了对端的临时公钥，已经可以计算出此次协商后加密数据要用的密钥。但它还需要发送一个握手的回复报文来把自己的临时公钥给发送方以便于发送方可以算出同样的密钥：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;unencrypted_ephemeral：接收方为这次握手临时生成的公钥（未加密，用于 ECDH）&lt;/li&gt;&lt;li&gt;mac1：对端公钥加上整个报文内容后的哈希&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这样两端都有对方临时生成的公钥，加上自己临时生成的私钥，就可以 ECDH + HKDF（一种把 DH 结果转成对称加密密钥的方法）得到这次握手的两个方向的对称加密的密钥。&lt;/p&gt;&lt;p&gt;如果这个过程有丢包，比如接收方没有收到发送方的握手请求，或者发送方没有接收到握手回复，那么整个过程重来就好了。反正怎么着都是 1-RTT，不浪费。&lt;/p&gt;&lt;p&gt;这个过程 WG 还充分考虑了隐秘性，接收端只要是收到不合法的握手（比如 peer 我不认识，重传等），就直接丢弃。在发送方看来，握手的报文就像进入了一个黑洞，因而除非黑客能够得到 WG 网关的授权将其公钥添加为 peer，否则几乎没办法嗅探到接收端的存在。而其它 VPN 协议的隧道建立阶段，比如 IPSec 的 IKE 协议，OpenVPN 的 SSL/TLS 协议，都可以被嗅探到。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;数据报文的发送和接收&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;有了密钥之后，用户的数据报文就很好处理了。处理的逻辑非常简单清晰，以至于寥寥数行就可以涵盖：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;发送：&lt;/li&gt;&lt;ul&gt;&lt;li&gt;用户态：应用程序发送目标地址是 VPN 对端网络的数据报文&lt;/li&gt;&lt;li&gt;内核：内核通过路由表发现应该由 wg0 接口发出，所以交给 WG 处理&lt;/li&gt;&lt;li&gt;WG：通过目标地址，在接口的配置中可以反查出要发往哪个 peer，然后用之前和该 peer 协商好的密钥（如果没有协商或者密钥过期，则重新协商）加密报文，并将报文封装在目标地址和目标端口是 peer 的 endpoint 的 UDP 报文中（报文中包含 key_index）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;接收：&lt;/li&gt;&lt;ul&gt;&lt;li&gt;内核：数据报文的 UDP 端口是 WG 在监听，将其送给 WG 处理（WG 的 recv 得到该报文）&lt;/li&gt;&lt;li&gt;WG：从报文的 key_index 找到哈希表中对应的密钥，解密（这里不是直接解密，而是放入一个解密队列中，这是设计上网络系统的一个小诀窍）&lt;/li&gt;&lt;li&gt;WG：查看解密出来的原始报文是否在 peer 允许的 IP 列表中，如果是，就把原始报文交给内核处理。注意，这里这个报文属于哪个 peer，也是从 key_index 中获得&lt;/li&gt;&lt;li&gt;内核：根据原始报文的目标地址查路由表将报文送出&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;406&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;406&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-277db81fad3b7b1824bec93536791ea1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;太干了，来点湿的？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在 BBL 里，我做了这样一个演示：用我本机和 DigitalOcean 上的一台机器建立 WG VPN，然后发一个 HTTP GET，服务器端返回一个带有 hello world 的文本。以下是 wireshark 的抓包，我稍作注释：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;227&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;227&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-43d73de913b07871aa258d0f5fa350c7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1027&quot; data-rawheight=&quot;675&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1027&quot; data-original=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1027&quot; data-rawheight=&quot;675&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1027&quot; data-original=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-f8a1451a131ce2276e1cbcb046a79a5d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;延伸阅读&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;WireGuard Protocol: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.wireguard.com/protocol/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wireguard.com/protocol/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Noise Protocol: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//noiseprotocol.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;noiseprotocol.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Authenticated Encryption with Associated Data (AEAD) algorithm - RFC7539&lt;/li&gt;&lt;li&gt;HKDF: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc5869&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;tools.ietf.org/html/rfc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;5869&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;DH 算法的专利：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//patents.google.com/patent/US4200770&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;patents.google.com/pate&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;nt/US4200770&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;WireGuard 源码：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/WireGuard/WireGuard&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/WireGuard/Wi&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;reGuard&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Linus 的邮件：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//lists.openwall.net/netdev/2018/08/02/124&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;lists.openwall.net/netd&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ev/2018/08/02/124&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;贤者时刻&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;作为一个曾经常年混迹网络及安全协议的老兵，WireGuard 带给我的震撼是全方位的。它就像一记重锤，狠狠地砸在我头上：如果懂得合理取舍，简化各种繁文缛节，复杂如 VPN 协议，也可以如此清丽脱俗；简单的，考虑周到的用户接口（配置）意味着易用的产品和大智若愚的设计；由此带来的简洁会让很多接下来随之发生的很多事情变得简单：因为接口简单清晰，所以几乎一切数据结构都可以预先生成，因为协议本身简单（1-RTT），所以任意一段发起重新协商也很简单；握手过程丢包？丢就丢吧，反正握手很快很方便；最终，因为简单，所以代码量少，没有那些个弯弯绕绕，一个对 C 和 linux 开发比较熟悉的工程师，随便花上一个下午就能把主流程看个明白 —— 这也就意味着代码更容易审核，写测试代码花费的时间更少还更容易做到更高的测试覆盖率，更难出错，bug 更少，解 bug 的时间更少，留给程序员深思熟虑展望未来的时间也就更多，当然也就无需 996，节约下来的时间或陪老婆孩子愉快玩耍，或找三五知己一起读读书，听听音乐会，聊聊天，都是很好的。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-12-91383212</guid>
<pubDate>Tue, 12 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>程序员圣诞节烧脑谈</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-11-01-89713510.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/89713510&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-20c9a048fa20ca459030e5a4290712eb_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;今天不光是万圣节，31 OCT，也就是 25 DEC，所以也是程序员圣诞节。&lt;/p&gt;&lt;p&gt;。。。&lt;/p&gt;&lt;p&gt;好吧，OCT 代表八进制，八进制的 31，是十进制的 25，而十进制是 DEC。嗯，标准的程序员冷笑话，认真你就输了。&lt;/p&gt;&lt;p&gt;（我仿佛听到了郭德纲的相声在我耳边想起：你有病吧，你有药啊）&lt;/p&gt;&lt;p&gt;进制这个东西，很有意思。我们要感谢进化过程中，人类进化出的是五根手指，如果是 7 根手指，那么我们日常生活的进制就是 14 进制，小学数学的难度大概率要陡增 —— 因为要背 13x13 乘法表。&lt;/p&gt;&lt;p&gt;平日生活中，除了占绝对优势的十进制外，我们还使用十二进制（买袜子鸡蛋什么的），六十进制（计时以及角度的分和秒），三百六十进制（角度），三百六十五进制（计日）。有些文化中会使用二十进制，比如 84 非要说成四个二十和一个四，自己给自己找麻烦。在程序员的生活中，十进制不是主流，二进制，十六进制和八进制才是王道。衍生出来的 64 进制，二十六个字母大小写加十个数字再加两个符号，也堂而皇之出现在主流圈子里，之后，为了解决 IlO0 傻傻分不清的问题，比特币又从 64 进制中衍生出来 58 进制。&lt;/p&gt;&lt;p&gt;我们讲进制，比如二进制，是逢二进一，所以自最低位起，往上是 21，22，一路走上去。对于一个 x 进制数，我们以此类推：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;254&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;254&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-0ac89ce3a3526f74a6227a52edaa4476_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这就有意思了，原来一个多项式代表的是一个进制未知的数！那么我们是否可以把多项式的乘除用我们惯用的十进制乘除来表述呢？&lt;/p&gt;&lt;p&gt;比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E3%E2%80%85%2B%E2%80%853x%5E2%E2%80%85%2B%E2%80%855%5Ex%E2%80%85%2B%E2%80%8515&quot; alt=&quot;x^3 + 3x^2 + 5^x + 15&quot; eeimg=&quot;1&quot;/&gt; 除以 &lt;i&gt;x&lt;/i&gt; + 3 怎么算？在初高中的时候，我们需要对这个多项式进行因式分解，分解起来并不容易。而我们将其看做十进制的数字，就是 135(15)，也就是 1365，除以13，得 105，再把 10 进制转换成 x 进制，得到： &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E2%E2%80%85%2B%E2%80%855&quot; alt=&quot;x^2 + 5&quot; eeimg=&quot;1&quot;/&gt; 。完美。乘法也是如此 —— 只是要注意进位写成 135(15) 的形式，不要往上进。&lt;/p&gt;&lt;p&gt;列位可能要问了，那 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E2%E2%80%85%E2%88%92%E2%80%851&quot; alt=&quot;x^2 − 1&quot; eeimg=&quot;1&quot;/&gt; 这样含有负数的多项式除以 &lt;i&gt;x&lt;/i&gt; − 1 怎么办？ &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E2%E2%80%85%E2%88%92%E2%80%851&quot; alt=&quot;x^2 − 1&quot; eeimg=&quot;1&quot;/&gt; 放成十进制来看，是 (100-1)，而 &lt;i&gt;x&lt;/i&gt; − 1 是 (10-1)，除出来的结果是 11，换算回来是 &lt;i&gt;x&lt;/i&gt; + 1。轻松搞定！注意这里有借有还，比如 &lt;i&gt;x&lt;/i&gt; − 1 乘以 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x%5E3%E2%80%85%2B%E2%80%85x%5E2%E2%80%85%2B%E2%80%85x%E2%80%85%2B%E2%80%851&quot; alt=&quot;x^3 + x^2 + x + 1&quot; eeimg=&quot;1&quot;/&gt; ，是 (10-1) 乘以 1111，得 9999，我们需要将其还原成 (10000-1)，也就是 &lt;i&gt;x&lt;/i&gt;4 − 1。&lt;/p&gt;&lt;p&gt;既然进位系统可以是 2，3，5，10，60，365，那么可不可以是 0.5 呢？哈，0.5 进位意味着个位数置一，十位数就进二，然后百位数进四，一路无穷下去。这是个奇怪的进位系统，任何数都无穷无尽。&lt;/p&gt;&lt;p&gt;那么 1.5 进制呢？也就是说逢三进二？1.5 进制的 20 代表十进制 3，2100 代表十进制的 9。这个进制写成表达式是 2 × 1.53 + 1.52。&lt;/p&gt;&lt;p&gt;所以逢 x 进 y 的进制的一个数 1234，代表 (&lt;i&gt;x&lt;/i&gt;/&lt;i&gt;y&lt;/i&gt;)3 + 2 × (&lt;i&gt;x&lt;/i&gt;/&lt;i&gt;y&lt;/i&gt;)2 + 3 × (&lt;i&gt;x&lt;/i&gt;/&lt;i&gt;y&lt;/i&gt;) + 4。很好很奇葩。有什么用？似乎没用。数学上的东西就是这样，就像庄子所谓「有用之无用」：今子有大树，患其无用，何不树之於无何有之乡，广莫之野？&lt;/p&gt;&lt;p&gt;扯了一堆有的没的，有些是给小宝讲数学时她傻乎乎问的，有些是我看了网上的视频琢磨的。程序员圣诞节本不该扯这些玩意的，伤脑。还是给大家看今晚万圣节我拍的 10 张图吧：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;810&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a88004795b6ffa0fc2a15c6b63564fe1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1439&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1439&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8dc8670987daab5538e253421bdbd86f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;祝大家节日快乐！&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-11-01-89713510</guid>
<pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
