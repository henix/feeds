<blockquote> 原文: Green threads explained in 200 lines of rust language<br/> 地址: <a href="https://link.zhihu.com/?target=https%3A//cfsamson.gitbook.io/green-threads-explained-in-200-lines-of-rust/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">cfsamson.gitbook.io/gre</span><span class="invisible">en-threads-explained-in-200-lines-of-rust/</span><span class="ellipsis"></span></a>  <br/> 作者: Carl Fredrik Samson(cfsamson@Github)<br/> 翻译: 耿腾<br/> </blockquote><hr/><p>在我们开始之前，我得提醒你我们编写的代码非常不安全，并且这也不是编写 Rust 代码的 “最佳实践”。我希望在不引入很多不必要的复杂性的前提下使其尽可能安全，所以如果你发现了更安全方法，又不会让我们的代码过于复杂，那么我鼓励亲爱的你为该项目提一个 RP（Pull Request）。</p><h3>让我们开始吧</h3><p>我们要做的第一件事就是在 <code>main.rs</code> 中删除我们的示例。我们从头开始并添加以下内容：</p><div class="highlight"><pre><code class="language-rust"><span class="cp">#![feature(asm)]</span><span class="w">
</span><span class="w"></span><span class="cp">#![feature(naked_functions)]</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">ptr</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">MAX_THREADS</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">static</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">RUNTIME</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>我们启用了两个特性（feature），我们之前介绍过的 <code>asm</code> 功能，以及我们需要解释的 <code>naked_functions</code> 功能。</p><h3>naked_functions</h3><p>当 Rust 编译一个函数时，它会为每个函数添加一个小的序言和尾声，这会在我们切换上下文时给我们带来一些问题，因为我们最终得到了一个未对齐的栈。这在我们的第一个简单示例中运行良好，但是一旦我们需要再次切换回相同的栈，我们就会遇到麻烦。将某个函数标记为 <code>#[naked]</code> 会删除序言和结尾。此属性主要用于内联汇编。</p><blockquote> 如果你有兴趣，可以阅读 <a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/blob/master/text/1201-naked-fns.md" class=" wrap external" target="_blank" rel="nofollow noreferrer">RFC #1201</a> 中有关 <code>naked_functions</code> 功能的更多信息。<br/> </blockquote><p>我们的 <code>DEFAULT_STACK_SIZE</code> 设置为 2 MB，这足够我们使用。我们还将 <code>MAX_THREADS</code> 设置为 4，因为我们的示例不需要太大。</p><p>最后一个常量 <code>RUNTIME</code> 是一个指向我们运行时的指针（是的，我知道，一个可变的全局变量不是很好，但我们稍后需要它，我们只在运行时初始化时设置这个变量）。</p><p>我们开始填上一些代表数据的内容：</p><div class="highlight"><pre><code class="language-rust"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">threads</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">current</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(PartialEq, Eq, Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">enum</span> <span class="nc">State</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Available</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Running</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Ready</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">id</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">stack</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">state</span>: <span class="nc">State</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Debug, Default)]</span><span class="w">
</span><span class="w"></span><span class="cp">#[repr(C)]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">ThreadContext</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">rsp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r15</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r14</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r13</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r12</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">rbx</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">rbp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>Runtime</code> 将是我们的主要入口。我们会创建一个非常小的、简单的运行时来调度和切换我们的线程。运行时包含一个 <code>Thread</code> 的数组和一个 <code>current</code> 字段，以指示我们当前正在运行的线程。</p><p><code>Thread</code> 保存线程的数据。每个线程都有一个 <code>id</code>，这样我们就可以将不同的线程区分开。栈类似于我们在前面章节中的第一个示例中看到的内容。 <code>ctx</code> 字段是一个上下文，表示我们的 CPU 需要在栈上剩余的位置恢复的数据，以及一个 <code>state</code>，它是我们的线程状态。</p><blockquote> 译者注：这里的 “线程” 以及 <code>Thread</code> 指的就是我们要实现的 “绿色线程（Grean Thread）”，而不是操作系统线程。<br/> </blockquote><p><code>State</code> 是一个枚举，代表我们的线程所处的状态：</p><ul><li><code>Available</code> 表示线程可用，并且可以根据需要分配任务；<br/> </li><li><code>Running</code> 意味着线程正在运行；<br/> </li><li><code>Ready</code> 意味着线程已准备好继续前进和恢复执行。<br/> </li></ul><p><code>ThreadContext</code> 保存 CPU 需要在栈上恢复执行的寄存器的数据。</p><blockquote> 如果你不记得，请返回 <b>绪论及基本概念</b> 一章以了解寄存器。这些是 x86-64 体系结构规范中标记为 “callee saved” 的寄存器。<br/> </blockquote><p>让我们继续：</p><div class="highlight"><pre><code class="language-rust"><span class="k">impl</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">id</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">id</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">stack</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span>::<span class="n">default</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">state</span>: <span class="nc">State</span>::<span class="n">Available</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这部分很简单。新线程在 <code>Available</code> 状态下启动，表示已准备好为其分配任务。</p><p>需要注意的一点是我们在这里分配了栈内存。这不是必需的，也不是资源的最佳使用方法，因为我们没有在首次使用时分配,，而为一个只是可能需要的线程分配了内存。不过，这降低了我们代码的复杂性，而我们的代码有比为栈分配内存更重要的关注点。</p><blockquote> 需要着重注意的是，一旦分配了栈，它就不能移动（move）！不应使用数组的 <code>push()</code> 或任何方法触发内存重分配。如果要把这部分代码写的更好一些，我们可以创建自己的类型，只暴露那些我们认为可以安全使用的方法。 值得一提的是，<code>Vec&lt;T&gt;</code> 有一个名为 <code>into_boxed_slice()</code> 的方法，它返回一个堆分配的切片 <code>Box&lt;[T]&gt;</code>。切片不能增长，所以如果我们改为使用它，我们可以避免重新分配问题。<br/> </blockquote><h3>实现运行时</h3><p>此段中的所有代码都在 <code>impl Runtime</code> 代码块中，这意味着它们是 <code>Runtime</code> 结构上的方法。</p><div class="highlight"><pre><code class="language-rust"><span class="k">impl</span><span class="w"> </span><span class="n">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="c1">// 这将是我们的基本线程, 会被初始化为
</span><span class="c1"></span><span class="w">        </span><span class="c1">// Running 状态
</span><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">base_thread</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">id</span>: <span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">stack</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span>::<span class="n">default</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">state</span>: <span class="nc">State</span>::<span class="n">Running</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">threads</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">base_thread</span><span class="p">];</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">available_threads</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">..</span><span class="n">MAX_THREADS</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">i</span><span class="o">|</span><span class="w"> </span><span class="n">Thread</span>::<span class="n">new</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="n">collect</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">available_threads</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">threads</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">current</span>: <span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>当我们实例化 <code>Runtime</code> 时，我们创建了一个基础线程。此线程将设置为 <code>Running</code> 状态，并确保我们保持运行时运行，直到所有任务完成。</p><p>然后我们实例化其余的线程并将当前线程设置为 <code>0</code>，也就是我们的基本线程。</p><div class="highlight"><pre><code class="language-rust"><span class="sd">/// 这里有点作弊，但是我们需要一个指向存储的 Runtime 的指针
</span><span class="sd"></span><span class="w">    </span><span class="sd">/// 这样即便我们没有它的引用，
</span><span class="sd"></span><span class="w">    </span><span class="sd">/// 也可以对其调用 yield.
</span><span class="sd"></span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">init</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">r_ptr</span>: <span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">Runtime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">RUNTIME</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r_ptr</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>然后我们需要这样（译者注：为那个可变的全局变量赋值），正如我在定义常量时所提到的，我们需要以后能够调用 <code>yield</code>。代码有点难看，但我们知道只要有任何线程可以 <code>yield</code>，我们的运行时就会存活，只要我们不滥用它就可以安全地运行。</p><div class="highlight"><pre><code class="language-rust"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">t_yield</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">        </span><span class="n">std</span>::<span class="n">process</span>::<span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是我们开始启动运行时的地方。它将不断调用 <code>t_yield()</code> 直到返回 <code>false</code>，<code>false</code> 意味着没有工作要做了，我们可以退出进程。</p><div class="highlight"><pre><code class="language-rust"><span class="k">fn</span> <span class="nf">t_return</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">t_yield</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是我们在线程完成时调用的返回函数。 <code>return</code> 是 Rust 中的另一个保留关键字，因此我们将此命名为 <code>t_return()</code>。请注意我们的线程用户不会调用它，我们设置栈，以便在任务完成时调用它。 如果调用线程是 <code>base_thread</code>（即基础线程），我们什么都不做。我们的运行时将在基础线程上为我们调用 <code>yield</code>。如果从生成的线程中调用它，我们知道它已经完成，因为所有线程都在它们的栈顶部有一个 <code>guard</code> 函数（我们将下面进一步展示），并且这个 <code>t_return</code> 函数唯一被调用的地方就是我们的 <code>guard</code> 函数。 我们将当前线程状态设置为 <code>Available</code>，让运行时知道它已准备好接受新任务，然后立即调用 <code>t_yield</code>，它将调度新的线程运行。</p><p>接下来是我们的 <code>yield</code> 函数：</p><div class="highlight"><pre><code class="language-rust"><span class="k">fn</span> <span class="nf">t_yield</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">pos</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Running</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">old_pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pos</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">switch</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">old_pos</span><span class="p">].</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">ctx</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="c1">// 防止 Windows 的编译器优化我们的代码。
</span><span class="c1"></span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是我们运行时的核心。我们必须将此命名为 <code>t_yield</code>，因为 <code>yield</code> 是 Rust 中的保留关键字。 在这里，我们遍历所有线程，看看是否有线程处于 <code>Ready</code> 状态，<code>Ready</code> 表明它已准备好恢复执行。在现实世界的程序中，这可能是一个数据库调用的返回。</p><p>如果没有线程是 <code>Ready</code> 的，就直接返回。这是一个非常简单的调度程序，只使用轮询算法，真正的调度程序可能有更复杂的方法来决定下一个要运行的任务。</p><blockquote> 这是一个为我们的例子量身定制的非常简单的实现。如果我们的线程尚未准备好进行（未处于 <code>Ready</code> 状态）并仍在等待比如来自数据库的响应，会发生什么？<br/> 解决这个问题并不困难，当一个线程 <code>Ready</code>时，我们可以轮询它的状态，而不是直接运行我们的代码，。比如，如果它真的准备好运行它可以返回 <code>IsReady</code>，如果仍旧在等待某些操作完成它可以返回 <code>Pending</code>。在后一种情况下，我们可以直接它处于 <code>Ready</code> 状态，以便稍后再次进行轮询。是不是听起来很熟悉？如果您已经阅读了Future在Rust中的工作方式，那么我们将开始就它们如何组合在一起提供一些建议。<br/> </blockquote><p>如果我们找到一个准备运行的线程，那就将当前线程的状态从 <code>Running</code> 修改为 <code>Ready</code>。</p><p>然后我们调用 <code>switch</code> 来保存当前上下文（旧上下文）并将新上下文加载到 CPU 中。新上下文要么是新任务，要么是 CPU 在现有任务上恢复工作所需的所有信息。</p><p>最终的 <code>self.threads.len() &gt; 0</code> 的部分只是阻止编译器优化代码的一种方法。这种情况发生在 Windows 上，但不发生在 Linux 上，例如在运行性能测试时是一个常见问题。因此，我们可以使用 <code>std::hint::black_box</code> 来防止编译器为了更快地执行代码而走得太远并跳过我们需要的步骤。我选择了另外一种方法，只要是有注释的就应该没问题，无论如何代码永远不会执行到这里。</p><p>接下来是我们的 <code>spawn()</code> 函数：</p><div class="highlight"><pre><code class="language-rust"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">spawn</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="nc">fn</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">available</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">threads</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">iter_mut</span><span class="p">()</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="o">|</span><span class="n">t</span><span class="o">|</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;no available thread.&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">available</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">len</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">s_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">available</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">ptr</span>::<span class="n">write</span><span class="p">(</span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">((</span><span class="n">size</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">24</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">guard</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">ptr</span>::<span class="n">write</span><span class="p">(</span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">((</span><span class="n">size</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">available</span><span class="p">.</span><span class="n">ctx</span><span class="p">.</span><span class="n">rsp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">((</span><span class="n">size</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">available</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我认为 <code>t_yield</code> 在逻辑上是个很有趣的函数，而这个函数在技术上最有趣。</p><p>就像我们在前一章中所讨论的那样，我们要在这初始化栈，并且要确保我们的栈看起来像 psABI 栈布局中指定的栈。</p><p>当我们生成一个新线程时，我们首先要检查是否有任何可用线程（线程处于 <code>Available</code> 状态）。如果我们的线程耗尽，我们会在这种情况下使用恐慌（panic）机制，但有几种（更好的）方法可以解决这个问题。我们现在就保持这种简单的实现。</p><p>当我们找到一个可用的线程时，我们得到栈长度和指向我们的 u8 字节数组的指针。</p><p>接下来，我们必须使用一些不安全的功能。首先，我们确保指向堆栈底部的指针是16字节对齐的。然后，我们写入 <code>guard</code> 函数的地址，当我们提供的任务完成并且函数返回时，将调用该地址。然后我们将 <code>f</code> 的地址写入，这是我们通过参数传递进来想要运行的函数。</p><blockquote> 还记得我们在 <b>栈</b> 那一章解释的栈是如何工作的吗？我们希望 <code>f</code> 函数首先运行，因此我们将基指针设置为 <code>f</code> 并确保它是16字节对齐的。然后我们将 <code>guard</code> 函数的地址压入。它不是16字节对齐，但是当 <code>f</code> 返回时，CPU 将读取下一个地址作为 <code>f</code> 的返回地址并在那里继续执行。<br/> </blockquote><p>然后，我们设置 <code>rsp</code> 的值，它是指向我们提供的函数地址的栈指针，所以我们在计划运行时首先开始执行它。</p><p>最后，我们将状态设置为 <code>Ready</code>，这意味着我们有工作要做，并且我们已经准备好了。请记住，实际启动此线程取决于我们的“调度程序”。</p><p>我们现在已经完成了 <code>Runtime</code> 的实现，如果你掌握了所有这些，你基本上就能理解绿色线程是如何工作的。但是，实现它们仍然需要一些细节。</p><h3><code>guard</code> 和 <code>switch</code> 函数</h3><div class="highlight"><pre><code class="language-rust"><span class="k">fn</span> <span class="nf">guard</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">rt_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RUNTIME</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">Runtime</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">(</span><span class="o">*</span><span class="n">rt_ptr</span><span class="p">).</span><span class="n">t_return</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>该函数意味着我们传入的函数已经返回，这意味着我们的线程已完成运行其任务，因此我们取消引用我们的运行时并调用<code>t_return()</code>。我们本可以创建一个函数，在线程完成时执行一些额外的工作但是现在我们的 <code>t_return()</code> 函数已经可以满足我们的需要了。它将我们的线程标记为 <code>Available</code>（如果它不是我们的基本线程）和 <code>yield</code>，这样我们就可以在另外一个线程上恢复工作。</p><div class="highlight"><pre><code class="language-rust"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">yield_thread</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">rt_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RUNTIME</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">Runtime</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">(</span><span class="o">*</span><span class="n">rt_ptr</span><span class="p">).</span><span class="n">t_yield</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这只是一个辅助函数，它允许我们从代码中的任意位置调用 <code>yield</code>。不过这是非常不安全的，如果我们调用它并且我们的 <code>Runtime</code> 尚未初始化或运行时被删除，则会导致未定义的行为。然而，让这个更安全并不是我们的优先事项，我们只是为了让我们的例子启动并运行。</p><p>我们很快就到达终点了，还有最后一个函数。如果你已完成前面的章节，那么在没有很多评论的情况下应该可以理解这个：</p><div class="highlight"><pre><code class="language-rust"><span class="cp">#[naked]</span><span class="w">
</span><span class="w"></span><span class="cp">#[inline(never)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">fn</span> <span class="nf">switch</span><span class="p">(</span><span class="n">old</span>: <span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">ThreadContext</span><span class="p">,</span><span class="w"> </span><span class="n">new</span>: <span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">ThreadContext</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">asm</span><span class="o">!</span><span class="p">(</span><span class="err">&#34;</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rsp</span><span class="p">,</span><span class="w"> </span><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r15</span><span class="p">,</span><span class="w"> </span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r14</span><span class="p">,</span><span class="w"> </span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r13</span><span class="p">,</span><span class="w"> </span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r12</span><span class="p">,</span><span class="w"> </span><span class="mh">0x20</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="w"> </span><span class="mh">0x28</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rbp</span><span class="p">,</span><span class="w"> </span><span class="mh">0x30</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rsp</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r15</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r14</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r13</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x20</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r12</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x28</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rbx</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x30</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rbp</span><span class="w">
</span><span class="w">        </span><span class="n">ret</span><span class="w">
</span><span class="w">        </span><span class="err">&#34;</span><span class="w">
</span><span class="w">    </span>:
    :<span class="s">&#34;r&#34;</span><span class="p">(</span><span class="n">old</span><span class="p">),</span><span class="w"> </span><span class="s">&#34;r&#34;</span><span class="p">(</span><span class="n">new</span><span class="p">)</span><span class="w">
</span><span class="w">    </span>:
    : <span class="s">&#34;volatile&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;alignstack&#34;</span><span class="w">
</span><span class="w">    </span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这就是我们的内联汇编。正如第一个例子那样，我们首先读出我们需要的所有寄存器的值，然后将所有寄存器值设置为我们在“新”线程上暂停执行时保存的寄存器值。 这基本上是保存和恢复执行所需要做的全部工作。 这里我们看到使用的 <code>#[naked]</code> 属性。我们不希望Rust为我们的函数生成序言和结语，因为这就是所有的汇编代码，我们希望自己处理所有事情。如果我们不加上这个，我们将无法再次切换回我们的栈。</p><blockquote> 大多数内联汇编都在 <b>一个能跑通的例子</b> 一章的末尾解释了，如果这看起来很陌生，请阅读那章的相关部分再回来。<br/> </blockquote><p>这个函数有两处与我们的第一个函数不同：</p><p>第一个是属性 <code>#[inline(never)]</code>，该属性阻止编译器内联此函数。我花了一些时间来解决这个问题，但是如果我们不包含它，那么在使用 <code>--release</code> 模式编译时代码将会运行失败。</p><p>“volatile” 选项是新加的。正如我之前警告的那样，内联汇编可能有些粗糙，但这也表明我们的汇编有副作用。当我们提供参数作为输入时，我们需要确保编译器知道我们正在修改其中一个传入参数而不仅仅是读取它们。</p><div class="highlight"><pre><code class="language-rust"><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="err">#</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w"></span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="err">#</span><span class="w"> </span><span class="mi">8</span><span class="w">
</span><span class="w"></span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="err">#</span><span class="w"> </span><span class="mi">16</span><span class="w">
</span><span class="w"></span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="err">#</span><span class="w"> </span><span class="mi">24</span><span class="w">
</span></code></pre></div><p>我简要地提到过这一点，但在这里你能看到它的实际效果。这些是十六进制数字，表示从我们想要读/写的内存指针的偏移量。我在旁边加了十进制的注释，因此你看到我们只以 8 字节步长偏移指针，这与 <code>ThreadContext</code> 结构中的 <code>u64</code> 字段大小相同。</p><p>这也是为什么用 <code>#[repr(C)]</code> 注释 <code>ThreadContext</code> 很重要的原因，所以我们知道数据将以这种方式在内存中表示，我们写入正确的字段。 Rust ABI 不保证它们在内存中以相同的顺序表示，但是 C-ABI 可以保证这一点。</p><h3><code>main</code> 函数</h3><div class="highlight"><pre><code class="language-rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">runtime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Runtime</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">init</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 1 STARTING&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;thread: {} counter: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">yield_thread</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 1 FINISHED&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 2 STARTING&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">15</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;thread: {} counter: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">yield_thread</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 2 FINISHED&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">run</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>正如你在这里看到的那样，我们初始化我们的运行时并创建两个线程，一个计数到 <code>10</code>，一个计数到 <code>15</code>，每两次计数之间都会执行 <code>yield</code>。当我们使用 <code>cargo run</code> 命令运行工程时，我们应该会得到以下输出：</p><div class="highlight"><pre><code class="language-text">Finished dev [unoptimized + debuginfo] target(s) in 2.17s
Running `target/debug/green_threads`
THREAD 1 STARTING
thread: 1 counter: 0
THREAD 2 STARTING
thread: 2 counter: 0
thread: 1 counter: 1
thread: 2 counter: 1
thread: 1 counter: 2
thread: 2 counter: 2
thread: 1 counter: 3
thread: 2 counter: 3
thread: 1 counter: 4
thread: 2 counter: 4
thread: 1 counter: 5
thread: 2 counter: 5
thread: 1 counter: 6
thread: 2 counter: 6
thread: 1 counter: 7
thread: 2 counter: 7
thread: 1 counter: 8
thread: 2 counter: 8
thread: 1 counter: 9
thread: 2 counter: 9
THREAD 1 FINISHED.
thread: 2 counter: 10
thread: 2 counter: 11
thread: 2 counter: 12
thread: 2 counter: 13
thread: 2 counter: 14
THREAD 2 FINISHED.</code></pre></div><p>漂亮！！我们的线程交替执行，因为它们对每个计数产生控制，直到线程 1 完成并且线程 2 在完成任务之前数到最后一个数字。</p><h3>恭喜</h3><p>你现在已经实现了一个非常简单但可用的绿色线程示例。这是我们探索它的必经之路，但如果你已经走了这么远并通读了所有内容，你值得休息一下。谢谢阅读！</p><blockquote> 译者注：原书的后一章就是单纯的200行完整代码，我直接就放在本章里了:<br/> </blockquote><div class="highlight"><pre><code class="language-rust"><span class="cp">#![feature(asm)]</span><span class="w">
</span><span class="w"></span><span class="cp">#![feature(naked_functions)]</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">ptr</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">MAX_THREADS</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">static</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">RUNTIME</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">threads</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">current</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(PartialEq, Eq, Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">enum</span> <span class="nc">State</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Available</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Running</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Ready</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">id</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">stack</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">state</span>: <span class="nc">State</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Debug, Default)]</span><span class="w">
</span><span class="w"></span><span class="cp">#[repr(C)]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">ThreadContext</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">rsp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r15</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r14</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r13</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r12</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">rbx</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">rbp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">id</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">id</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">stack</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span>::<span class="n">default</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">state</span>: <span class="nc">State</span>::<span class="n">Available</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">base_thread</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">id</span>: <span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">stack</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span>::<span class="n">default</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">state</span>: <span class="nc">State</span>::<span class="n">Running</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">threads</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">base_thread</span><span class="p">];</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">available_threads</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">..</span><span class="n">MAX_THREADS</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">i</span><span class="o">|</span><span class="w"> </span><span class="n">Thread</span>::<span class="n">new</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="n">collect</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">available_threads</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">threads</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">current</span>: <span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">init</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">r_ptr</span>: <span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">Runtime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">RUNTIME</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r_ptr</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">t_yield</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">        </span><span class="n">std</span>::<span class="n">process</span>::<span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">t_return</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">t_yield</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">t_yield</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">pos</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Running</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">old_pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pos</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">switch</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">old_pos</span><span class="p">].</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">ctx</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">spawn</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="nc">fn</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">available</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">threads</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">iter_mut</span><span class="p">()</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="o">|</span><span class="n">t</span><span class="o">|</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;no available thread.&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">available</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">len</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">s_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">available</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">().</span><span class="n">offset</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">s_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">s_ptr</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="o">!</span><span class="mi">15</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">ptr</span>::<span class="n">write</span><span class="p">(</span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">24</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">guard</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">ptr</span>::<span class="n">write</span><span class="p">(</span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">available</span><span class="p">.</span><span class="n">ctx</span><span class="p">.</span><span class="n">rsp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">available</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">guard</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">rt_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RUNTIME</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">Runtime</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">(</span><span class="o">*</span><span class="n">rt_ptr</span><span class="p">).</span><span class="n">t_return</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">yield_thread</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">rt_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RUNTIME</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">Runtime</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">(</span><span class="o">*</span><span class="n">rt_ptr</span><span class="p">).</span><span class="n">t_yield</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[naked]</span><span class="w">
</span><span class="w"></span><span class="cp">#[inline(never)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">fn</span> <span class="nf">switch</span><span class="p">(</span><span class="n">old</span>: <span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">ThreadContext</span><span class="p">,</span><span class="w"> </span><span class="n">new</span>: <span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">ThreadContext</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">asm</span><span class="o">!</span><span class="p">(</span><span class="err">&#34;</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rsp</span><span class="p">,</span><span class="w"> </span><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r15</span><span class="p">,</span><span class="w"> </span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r14</span><span class="p">,</span><span class="w"> </span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r13</span><span class="p">,</span><span class="w"> </span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r12</span><span class="p">,</span><span class="w"> </span><span class="mh">0x20</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="w"> </span><span class="mh">0x28</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rbp</span><span class="p">,</span><span class="w"> </span><span class="mh">0x30</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rsp</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r15</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r14</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r13</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x20</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r12</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x28</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rbx</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x30</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rbp</span><span class="w">
</span><span class="w">        </span><span class="n">ret</span><span class="w">
</span><span class="w">        </span><span class="err">&#34;</span><span class="w">
</span><span class="w">    </span>:
    :<span class="s">&#34;r&#34;</span><span class="p">(</span><span class="n">old</span><span class="p">),</span><span class="w"> </span><span class="s">&#34;r&#34;</span><span class="p">(</span><span class="n">new</span><span class="p">)</span><span class="w">
</span><span class="w">    </span>:
    : <span class="s">&#34;volatile&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;alignstack&#34;</span><span class="w">
</span><span class="w">    </span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">runtime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Runtime</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">init</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 1 STARTING&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;thread: {} counter: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">yield_thread</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 1 FINISHED&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 2 STARTING&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">15</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;thread: {} counter: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">yield_thread</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 2 FINISHED&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">run</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><blockquote> 原文: Green threads explained in 200 lines of rust language<br/> 地址: <a href="https://link.zhihu.com/?target=https%3A//cfsamson.gitbook.io/green-threads-explained-in-200-lines-of-rust/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">cfsamson.gitbook.io/gre</span><span class="invisible">en-threads-explained-in-200-lines-of-rust/</span><span class="ellipsis"></span></a>  <br/> 作者: Carl Fredrik Samson(cfsamson@Github)<br/> 翻译: 耿腾<br/> </blockquote><hr/><p>在我们开始之前，我得提醒你我们编写的代码非常不安全，并且这也不是编写 Rust 代码的 “最佳实践”。我希望在不引入很多不必要的复杂性的前提下使其尽可能安全，所以如果你发现了更安全方法，又不会让我们的代码过于复杂，那么我鼓励亲爱的你为该项目提一个 RP（Pull Request）。</p><h3>让我们开始吧</h3><p>我们要做的第一件事就是在 <code>main.rs</code> 中删除我们的示例。我们从头开始并添加以下内容：</p><div class="highlight"><pre><code class="language-rust"><span class="cp">#![feature(asm)]</span><span class="w">
</span><span class="w"></span><span class="cp">#![feature(naked_functions)]</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">ptr</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">MAX_THREADS</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">static</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">RUNTIME</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>我们启用了两个特性（feature），我们之前介绍过的 <code>asm</code> 功能，以及我们需要解释的 <code>naked_functions</code> 功能。</p><h3>naked_functions</h3><p>当 Rust 编译一个函数时，它会为每个函数添加一个小的序言和尾声，这会在我们切换上下文时给我们带来一些问题，因为我们最终得到了一个未对齐的栈。这在我们的第一个简单示例中运行良好，但是一旦我们需要再次切换回相同的栈，我们就会遇到麻烦。将某个函数标记为 <code>#[naked]</code> 会删除序言和结尾。此属性主要用于内联汇编。</p><blockquote> 如果你有兴趣，可以阅读 <a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/blob/master/text/1201-naked-fns.md" class=" wrap external" target="_blank" rel="nofollow noreferrer">RFC #1201</a> 中有关 <code>naked_functions</code> 功能的更多信息。<br/> </blockquote><p>我们的 <code>DEFAULT_STACK_SIZE</code> 设置为 2 MB，这足够我们使用。我们还将 <code>MAX_THREADS</code> 设置为 4，因为我们的示例不需要太大。</p><p>最后一个常量 <code>RUNTIME</code> 是一个指向我们运行时的指针（是的，我知道，一个可变的全局变量不是很好，但我们稍后需要它，我们只在运行时初始化时设置这个变量）。</p><p>我们开始填上一些代表数据的内容：</p><div class="highlight"><pre><code class="language-rust"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">threads</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">current</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(PartialEq, Eq, Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">enum</span> <span class="nc">State</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Available</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Running</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Ready</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">id</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">stack</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">state</span>: <span class="nc">State</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Debug, Default)]</span><span class="w">
</span><span class="w"></span><span class="cp">#[repr(C)]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">ThreadContext</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">rsp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r15</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r14</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r13</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r12</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">rbx</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">rbp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>Runtime</code> 将是我们的主要入口。我们会创建一个非常小的、简单的运行时来调度和切换我们的线程。运行时包含一个 <code>Thread</code> 的数组和一个 <code>current</code> 字段，以指示我们当前正在运行的线程。</p><p><code>Thread</code> 保存线程的数据。每个线程都有一个 <code>id</code>，这样我们就可以将不同的线程区分开。栈类似于我们在前面章节中的第一个示例中看到的内容。 <code>ctx</code> 字段是一个上下文，表示我们的 CPU 需要在栈上剩余的位置恢复的数据，以及一个 <code>state</code>，它是我们的线程状态。</p><blockquote> 译者注：这里的 “线程” 以及 <code>Thread</code> 指的就是我们要实现的 “绿色线程（Grean Thread）”，而不是操作系统线程。<br/> </blockquote><p><code>State</code> 是一个枚举，代表我们的线程所处的状态：</p><ul><li><code>Available</code> 表示线程可用，并且可以根据需要分配任务；<br/> </li><li><code>Running</code> 意味着线程正在运行；<br/> </li><li><code>Ready</code> 意味着线程已准备好继续前进和恢复执行。<br/> </li></ul><p><code>ThreadContext</code> 保存 CPU 需要在栈上恢复执行的寄存器的数据。</p><blockquote> 如果你不记得，请返回 <b>绪论及基本概念</b> 一章以了解寄存器。这些是 x86-64 体系结构规范中标记为 “callee saved” 的寄存器。<br/> </blockquote><p>让我们继续：</p><div class="highlight"><pre><code class="language-rust"><span class="k">impl</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">id</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">id</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">stack</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span>::<span class="n">default</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">state</span>: <span class="nc">State</span>::<span class="n">Available</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这部分很简单。新线程在 <code>Available</code> 状态下启动，表示已准备好为其分配任务。</p><p>需要注意的一点是我们在这里分配了栈内存。这不是必需的，也不是资源的最佳使用方法，因为我们没有在首次使用时分配,，而为一个只是可能需要的线程分配了内存。不过，这降低了我们代码的复杂性，而我们的代码有比为栈分配内存更重要的关注点。</p><blockquote> 需要着重注意的是，一旦分配了栈，它就不能移动（move）！不应使用数组的 <code>push()</code> 或任何方法触发内存重分配。如果要把这部分代码写的更好一些，我们可以创建自己的类型，只暴露那些我们认为可以安全使用的方法。 值得一提的是，<code>Vec&lt;T&gt;</code> 有一个名为 <code>into_boxed_slice()</code> 的方法，它返回一个堆分配的切片 <code>Box&lt;[T]&gt;</code>。切片不能增长，所以如果我们改为使用它，我们可以避免重新分配问题。<br/> </blockquote><h3>实现运行时</h3><p>此段中的所有代码都在 <code>impl Runtime</code> 代码块中，这意味着它们是 <code>Runtime</code> 结构上的方法。</p><div class="highlight"><pre><code class="language-rust"><span class="k">impl</span><span class="w"> </span><span class="n">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="c1">// 这将是我们的基本线程, 会被初始化为
</span><span class="c1"></span><span class="w">        </span><span class="c1">// Running 状态
</span><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">base_thread</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">id</span>: <span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">stack</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span>::<span class="n">default</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">state</span>: <span class="nc">State</span>::<span class="n">Running</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">threads</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">base_thread</span><span class="p">];</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">available_threads</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">..</span><span class="n">MAX_THREADS</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">i</span><span class="o">|</span><span class="w"> </span><span class="n">Thread</span>::<span class="n">new</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="n">collect</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">available_threads</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">threads</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">current</span>: <span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>当我们实例化 <code>Runtime</code> 时，我们创建了一个基础线程。此线程将设置为 <code>Running</code> 状态，并确保我们保持运行时运行，直到所有任务完成。</p><p>然后我们实例化其余的线程并将当前线程设置为 <code>0</code>，也就是我们的基本线程。</p><div class="highlight"><pre><code class="language-rust"><span class="sd">/// 这里有点作弊，但是我们需要一个指向存储的 Runtime 的指针
</span><span class="sd"></span><span class="w">    </span><span class="sd">/// 这样即便我们没有它的引用，
</span><span class="sd"></span><span class="w">    </span><span class="sd">/// 也可以对其调用 yield.
</span><span class="sd"></span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">init</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">r_ptr</span>: <span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">Runtime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">RUNTIME</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r_ptr</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>然后我们需要这样（译者注：为那个可变的全局变量赋值），正如我在定义常量时所提到的，我们需要以后能够调用 <code>yield</code>。代码有点难看，但我们知道只要有任何线程可以 <code>yield</code>，我们的运行时就会存活，只要我们不滥用它就可以安全地运行。</p><div class="highlight"><pre><code class="language-rust"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">t_yield</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">        </span><span class="n">std</span>::<span class="n">process</span>::<span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是我们开始启动运行时的地方。它将不断调用 <code>t_yield()</code> 直到返回 <code>false</code>，<code>false</code> 意味着没有工作要做了，我们可以退出进程。</p><div class="highlight"><pre><code class="language-rust"><span class="k">fn</span> <span class="nf">t_return</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">t_yield</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是我们在线程完成时调用的返回函数。 <code>return</code> 是 Rust 中的另一个保留关键字，因此我们将此命名为 <code>t_return()</code>。请注意我们的线程用户不会调用它，我们设置栈，以便在任务完成时调用它。 如果调用线程是 <code>base_thread</code>（即基础线程），我们什么都不做。我们的运行时将在基础线程上为我们调用 <code>yield</code>。如果从生成的线程中调用它，我们知道它已经完成，因为所有线程都在它们的栈顶部有一个 <code>guard</code> 函数（我们将下面进一步展示），并且这个 <code>t_return</code> 函数唯一被调用的地方就是我们的 <code>guard</code> 函数。 我们将当前线程状态设置为 <code>Available</code>，让运行时知道它已准备好接受新任务，然后立即调用 <code>t_yield</code>，它将调度新的线程运行。</p><p>接下来是我们的 <code>yield</code> 函数：</p><div class="highlight"><pre><code class="language-rust"><span class="k">fn</span> <span class="nf">t_yield</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">pos</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Running</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">old_pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pos</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">switch</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">old_pos</span><span class="p">].</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">ctx</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="c1">// 防止 Windows 的编译器优化我们的代码。
</span><span class="c1"></span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这是我们运行时的核心。我们必须将此命名为 <code>t_yield</code>，因为 <code>yield</code> 是 Rust 中的保留关键字。 在这里，我们遍历所有线程，看看是否有线程处于 <code>Ready</code> 状态，<code>Ready</code> 表明它已准备好恢复执行。在现实世界的程序中，这可能是一个数据库调用的返回。</p><p>如果没有线程是 <code>Ready</code> 的，就直接返回。这是一个非常简单的调度程序，只使用轮询算法，真正的调度程序可能有更复杂的方法来决定下一个要运行的任务。</p><blockquote> 这是一个为我们的例子量身定制的非常简单的实现。如果我们的线程尚未准备好进行（未处于 <code>Ready</code> 状态）并仍在等待比如来自数据库的响应，会发生什么？<br/> 解决这个问题并不困难，当一个线程 <code>Ready</code>时，我们可以轮询它的状态，而不是直接运行我们的代码，。比如，如果它真的准备好运行它可以返回 <code>IsReady</code>，如果仍旧在等待某些操作完成它可以返回 <code>Pending</code>。在后一种情况下，我们可以直接它处于 <code>Ready</code> 状态，以便稍后再次进行轮询。是不是听起来很熟悉？如果您已经阅读了Future在Rust中的工作方式，那么我们将开始就它们如何组合在一起提供一些建议。<br/> </blockquote><p>如果我们找到一个准备运行的线程，那就将当前线程的状态从 <code>Running</code> 修改为 <code>Ready</code>。</p><p>然后我们调用 <code>switch</code> 来保存当前上下文（旧上下文）并将新上下文加载到 CPU 中。新上下文要么是新任务，要么是 CPU 在现有任务上恢复工作所需的所有信息。</p><p>最终的 <code>self.threads.len() &gt; 0</code> 的部分只是阻止编译器优化代码的一种方法。这种情况发生在 Windows 上，但不发生在 Linux 上，例如在运行性能测试时是一个常见问题。因此，我们可以使用 <code>std::hint::black_box</code> 来防止编译器为了更快地执行代码而走得太远并跳过我们需要的步骤。我选择了另外一种方法，只要是有注释的就应该没问题，无论如何代码永远不会执行到这里。</p><p>接下来是我们的 <code>spawn()</code> 函数：</p><div class="highlight"><pre><code class="language-rust"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">spawn</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="nc">fn</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">available</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">threads</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">iter_mut</span><span class="p">()</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="o">|</span><span class="n">t</span><span class="o">|</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;no available thread.&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">available</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">len</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">s_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">available</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">ptr</span>::<span class="n">write</span><span class="p">(</span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">((</span><span class="n">size</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">24</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">guard</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">ptr</span>::<span class="n">write</span><span class="p">(</span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">((</span><span class="n">size</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">available</span><span class="p">.</span><span class="n">ctx</span><span class="p">.</span><span class="n">rsp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">((</span><span class="n">size</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">available</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>我认为 <code>t_yield</code> 在逻辑上是个很有趣的函数，而这个函数在技术上最有趣。</p><p>就像我们在前一章中所讨论的那样，我们要在这初始化栈，并且要确保我们的栈看起来像 psABI 栈布局中指定的栈。</p><p>当我们生成一个新线程时，我们首先要检查是否有任何可用线程（线程处于 <code>Available</code> 状态）。如果我们的线程耗尽，我们会在这种情况下使用恐慌（panic）机制，但有几种（更好的）方法可以解决这个问题。我们现在就保持这种简单的实现。</p><p>当我们找到一个可用的线程时，我们得到栈长度和指向我们的 u8 字节数组的指针。</p><p>接下来，我们必须使用一些不安全的功能。首先，我们确保指向堆栈底部的指针是16字节对齐的。然后，我们写入 <code>guard</code> 函数的地址，当我们提供的任务完成并且函数返回时，将调用该地址。然后我们将 <code>f</code> 的地址写入，这是我们通过参数传递进来想要运行的函数。</p><blockquote> 还记得我们在 <b>栈</b> 那一章解释的栈是如何工作的吗？我们希望 <code>f</code> 函数首先运行，因此我们将基指针设置为 <code>f</code> 并确保它是16字节对齐的。然后我们将 <code>guard</code> 函数的地址压入。它不是16字节对齐，但是当 <code>f</code> 返回时，CPU 将读取下一个地址作为 <code>f</code> 的返回地址并在那里继续执行。<br/> </blockquote><p>然后，我们设置 <code>rsp</code> 的值，它是指向我们提供的函数地址的栈指针，所以我们在计划运行时首先开始执行它。</p><p>最后，我们将状态设置为 <code>Ready</code>，这意味着我们有工作要做，并且我们已经准备好了。请记住，实际启动此线程取决于我们的“调度程序”。</p><p>我们现在已经完成了 <code>Runtime</code> 的实现，如果你掌握了所有这些，你基本上就能理解绿色线程是如何工作的。但是，实现它们仍然需要一些细节。</p><h3><code>guard</code> 和 <code>switch</code> 函数</h3><div class="highlight"><pre><code class="language-rust"><span class="k">fn</span> <span class="nf">guard</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">rt_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RUNTIME</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">Runtime</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">(</span><span class="o">*</span><span class="n">rt_ptr</span><span class="p">).</span><span class="n">t_return</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>该函数意味着我们传入的函数已经返回，这意味着我们的线程已完成运行其任务，因此我们取消引用我们的运行时并调用<code>t_return()</code>。我们本可以创建一个函数，在线程完成时执行一些额外的工作但是现在我们的 <code>t_return()</code> 函数已经可以满足我们的需要了。它将我们的线程标记为 <code>Available</code>（如果它不是我们的基本线程）和 <code>yield</code>，这样我们就可以在另外一个线程上恢复工作。</p><div class="highlight"><pre><code class="language-rust"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">yield_thread</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">rt_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RUNTIME</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">Runtime</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">(</span><span class="o">*</span><span class="n">rt_ptr</span><span class="p">).</span><span class="n">t_yield</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这只是一个辅助函数，它允许我们从代码中的任意位置调用 <code>yield</code>。不过这是非常不安全的，如果我们调用它并且我们的 <code>Runtime</code> 尚未初始化或运行时被删除，则会导致未定义的行为。然而，让这个更安全并不是我们的优先事项，我们只是为了让我们的例子启动并运行。</p><p>我们很快就到达终点了，还有最后一个函数。如果你已完成前面的章节，那么在没有很多评论的情况下应该可以理解这个：</p><div class="highlight"><pre><code class="language-rust"><span class="cp">#[naked]</span><span class="w">
</span><span class="w"></span><span class="cp">#[inline(never)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">fn</span> <span class="nf">switch</span><span class="p">(</span><span class="n">old</span>: <span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">ThreadContext</span><span class="p">,</span><span class="w"> </span><span class="n">new</span>: <span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">ThreadContext</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">asm</span><span class="o">!</span><span class="p">(</span><span class="err">&#34;</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rsp</span><span class="p">,</span><span class="w"> </span><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r15</span><span class="p">,</span><span class="w"> </span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r14</span><span class="p">,</span><span class="w"> </span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r13</span><span class="p">,</span><span class="w"> </span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r12</span><span class="p">,</span><span class="w"> </span><span class="mh">0x20</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="w"> </span><span class="mh">0x28</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rbp</span><span class="p">,</span><span class="w"> </span><span class="mh">0x30</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rsp</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r15</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r14</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r13</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x20</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r12</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x28</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rbx</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x30</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rbp</span><span class="w">
</span><span class="w">        </span><span class="n">ret</span><span class="w">
</span><span class="w">        </span><span class="err">&#34;</span><span class="w">
</span><span class="w">    </span>:
    :<span class="s">&#34;r&#34;</span><span class="p">(</span><span class="n">old</span><span class="p">),</span><span class="w"> </span><span class="s">&#34;r&#34;</span><span class="p">(</span><span class="n">new</span><span class="p">)</span><span class="w">
</span><span class="w">    </span>:
    : <span class="s">&#34;volatile&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;alignstack&#34;</span><span class="w">
</span><span class="w">    </span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这就是我们的内联汇编。正如第一个例子那样，我们首先读出我们需要的所有寄存器的值，然后将所有寄存器值设置为我们在“新”线程上暂停执行时保存的寄存器值。 这基本上是保存和恢复执行所需要做的全部工作。 这里我们看到使用的 <code>#[naked]</code> 属性。我们不希望Rust为我们的函数生成序言和结语，因为这就是所有的汇编代码，我们希望自己处理所有事情。如果我们不加上这个，我们将无法再次切换回我们的栈。</p><blockquote> 大多数内联汇编都在 <b>一个能跑通的例子</b> 一章的末尾解释了，如果这看起来很陌生，请阅读那章的相关部分再回来。<br/> </blockquote><p>这个函数有两处与我们的第一个函数不同：</p><p>第一个是属性 <code>#[inline(never)]</code>，该属性阻止编译器内联此函数。我花了一些时间来解决这个问题，但是如果我们不包含它，那么在使用 <code>--release</code> 模式编译时代码将会运行失败。</p><p>“volatile” 选项是新加的。正如我之前警告的那样，内联汇编可能有些粗糙，但这也表明我们的汇编有副作用。当我们提供参数作为输入时，我们需要确保编译器知道我们正在修改其中一个传入参数而不仅仅是读取它们。</p><div class="highlight"><pre><code class="language-rust"><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="err">#</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w"></span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="err">#</span><span class="w"> </span><span class="mi">8</span><span class="w">
</span><span class="w"></span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="err">#</span><span class="w"> </span><span class="mi">16</span><span class="w">
</span><span class="w"></span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="err">#</span><span class="w"> </span><span class="mi">24</span><span class="w">
</span></code></pre></div><p>我简要地提到过这一点，但在这里你能看到它的实际效果。这些是十六进制数字，表示从我们想要读/写的内存指针的偏移量。我在旁边加了十进制的注释，因此你看到我们只以 8 字节步长偏移指针，这与 <code>ThreadContext</code> 结构中的 <code>u64</code> 字段大小相同。</p><p>这也是为什么用 <code>#[repr(C)]</code> 注释 <code>ThreadContext</code> 很重要的原因，所以我们知道数据将以这种方式在内存中表示，我们写入正确的字段。 Rust ABI 不保证它们在内存中以相同的顺序表示，但是 C-ABI 可以保证这一点。</p><h3><code>main</code> 函数</h3><div class="highlight"><pre><code class="language-rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">runtime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Runtime</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">init</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 1 STARTING&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;thread: {} counter: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">yield_thread</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 1 FINISHED&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 2 STARTING&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">15</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;thread: {} counter: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">yield_thread</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 2 FINISHED&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">run</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>正如你在这里看到的那样，我们初始化我们的运行时并创建两个线程，一个计数到 <code>10</code>，一个计数到 <code>15</code>，每两次计数之间都会执行 <code>yield</code>。当我们使用 <code>cargo run</code> 命令运行工程时，我们应该会得到以下输出：</p><div class="highlight"><pre><code class="language-text">Finished dev [unoptimized + debuginfo] target(s) in 2.17s
Running `target/debug/green_threads`
THREAD 1 STARTING
thread: 1 counter: 0
THREAD 2 STARTING
thread: 2 counter: 0
thread: 1 counter: 1
thread: 2 counter: 1
thread: 1 counter: 2
thread: 2 counter: 2
thread: 1 counter: 3
thread: 2 counter: 3
thread: 1 counter: 4
thread: 2 counter: 4
thread: 1 counter: 5
thread: 2 counter: 5
thread: 1 counter: 6
thread: 2 counter: 6
thread: 1 counter: 7
thread: 2 counter: 7
thread: 1 counter: 8
thread: 2 counter: 8
thread: 1 counter: 9
thread: 2 counter: 9
THREAD 1 FINISHED.
thread: 2 counter: 10
thread: 2 counter: 11
thread: 2 counter: 12
thread: 2 counter: 13
thread: 2 counter: 14
THREAD 2 FINISHED.</code></pre></div><p>漂亮！！我们的线程交替执行，因为它们对每个计数产生控制，直到线程 1 完成并且线程 2 在完成任务之前数到最后一个数字。</p><h3>恭喜</h3><p>你现在已经实现了一个非常简单但可用的绿色线程示例。这是我们探索它的必经之路，但如果你已经走了这么远并通读了所有内容，你值得休息一下。谢谢阅读！</p><blockquote> 译者注：原书的后一章就是单纯的200行完整代码，我直接就放在本章里了:<br/> </blockquote><div class="highlight"><pre><code class="language-rust"><span class="cp">#![feature(asm)]</span><span class="w">
</span><span class="w"></span><span class="cp">#![feature(naked_functions)]</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">ptr</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">MAX_THREADS</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">static</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">RUNTIME</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">threads</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">current</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(PartialEq, Eq, Debug)]</span><span class="w">
</span><span class="w"></span><span class="k">enum</span> <span class="nc">State</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">Available</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Running</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">Ready</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">id</span>: <span class="kt">usize</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">stack</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">state</span>: <span class="nc">State</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[derive(Debug, Default)]</span><span class="w">
</span><span class="w"></span><span class="cp">#[repr(C)]</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">ThreadContext</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">rsp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r15</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r14</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r13</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">r12</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">rbx</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">rbp</span>: <span class="kt">u64</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">id</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">id</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">stack</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span>::<span class="n">default</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">state</span>: <span class="nc">State</span>::<span class="n">Available</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">Self</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">base_thread</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Thread</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">id</span>: <span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">stack</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">0_</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="n">DEFAULT_STACK_SIZE</span><span class="p">],</span><span class="w">
</span><span class="w">            </span><span class="n">ctx</span>: <span class="nc">ThreadContext</span>::<span class="n">default</span><span class="p">(),</span><span class="w">
</span><span class="w">            </span><span class="n">state</span>: <span class="nc">State</span>::<span class="n">Running</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">threads</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">base_thread</span><span class="p">];</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">available_threads</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Thread</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">..</span><span class="n">MAX_THREADS</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">i</span><span class="o">|</span><span class="w"> </span><span class="n">Thread</span>::<span class="n">new</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="n">collect</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">threads</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">available_threads</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">Runtime</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">threads</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="n">current</span>: <span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">init</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">r_ptr</span>: <span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">Runtime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">RUNTIME</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r_ptr</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="o">!</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">t_yield</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">        </span><span class="n">std</span>::<span class="n">process</span>::<span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">t_return</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">t_yield</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">t_yield</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">bool</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">pos</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">pos</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Running</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">old_pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pos</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">switch</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">old_pos</span><span class="p">].</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">[</span><span class="n">pos</span><span class="p">].</span><span class="n">ctx</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">spawn</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="nc">fn</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">available</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">threads</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">iter_mut</span><span class="p">()</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="o">|</span><span class="n">t</span><span class="o">|</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">State</span>::<span class="n">Available</span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;no available thread.&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">available</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">len</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">s_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">available</span><span class="p">.</span><span class="n">stack</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">().</span><span class="n">offset</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">s_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">s_ptr</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="o">!</span><span class="mi">15</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">ptr</span>::<span class="n">write</span><span class="p">(</span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">24</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">guard</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">ptr</span>::<span class="n">write</span><span class="p">(</span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">available</span><span class="p">.</span><span class="n">ctx</span><span class="p">.</span><span class="n">rsp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s_ptr</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">u64</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">available</span><span class="p">.</span><span class="n">state</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">State</span>::<span class="n">Ready</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">guard</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">rt_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RUNTIME</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">Runtime</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">(</span><span class="o">*</span><span class="n">rt_ptr</span><span class="p">).</span><span class="n">t_return</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">yield_thread</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">rt_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RUNTIME</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">Runtime</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">(</span><span class="o">*</span><span class="n">rt_ptr</span><span class="p">).</span><span class="n">t_yield</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[naked]</span><span class="w">
</span><span class="w"></span><span class="cp">#[inline(never)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">fn</span> <span class="nf">switch</span><span class="p">(</span><span class="n">old</span>: <span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">ThreadContext</span><span class="p">,</span><span class="w"> </span><span class="n">new</span>: <span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">ThreadContext</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">asm</span><span class="o">!</span><span class="p">(</span><span class="err">&#34;</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rsp</span><span class="p">,</span><span class="w"> </span><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r15</span><span class="p">,</span><span class="w"> </span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r14</span><span class="p">,</span><span class="w"> </span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r13</span><span class="p">,</span><span class="w"> </span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">r12</span><span class="p">,</span><span class="w"> </span><span class="mh">0x20</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="w"> </span><span class="mh">0x28</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="o">%</span><span class="n">rbp</span><span class="p">,</span><span class="w"> </span><span class="mh">0x30</span><span class="p">(</span><span class="cp">$</span><span class="mi">0</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x00</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rsp</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x08</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r15</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x10</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r14</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x18</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r13</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x20</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">r12</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x28</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rbx</span><span class="w">
</span><span class="w">        </span><span class="n">mov</span><span class="w">     </span><span class="mh">0x30</span><span class="p">(</span><span class="cp">$</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="o">%</span><span class="n">rbp</span><span class="w">
</span><span class="w">        </span><span class="n">ret</span><span class="w">
</span><span class="w">        </span><span class="err">&#34;</span><span class="w">
</span><span class="w">    </span>:
    :<span class="s">&#34;r&#34;</span><span class="p">(</span><span class="n">old</span><span class="p">),</span><span class="w"> </span><span class="s">&#34;r&#34;</span><span class="p">(</span><span class="n">new</span><span class="p">)</span><span class="w">
</span><span class="w">    </span>:
    : <span class="s">&#34;volatile&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;alignstack&#34;</span><span class="w">
</span><span class="w">    </span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">runtime</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Runtime</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">init</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 1 STARTING&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;thread: {} counter: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">yield_thread</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 1 FINISHED&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 2 STARTING&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="p">..</span><span class="mi">15</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;thread: {} counter: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">yield_thread</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;THREAD 2 FINISHED&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">runtime</span><span class="p">.</span><span class="n">run</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p></p>