<a href="https://link.zhihu.com/?target=https%3A//hexilee.me/2019/05/05/how-to-understand-sync-and-send-in-rust/" data-draft-node="block" data-draft-type="link-card" class=" wrap external" target="_blank" rel="nofollow noreferrer">原文链接</a><h3>如何理解 Sync、Send？</h3><p><code>Sync</code> 和 <code>Send</code> 是 rust 安全并发中两个至关重要的 <code>marker</code>，但绝大多数的文档或书籍每当谈到它们就只是直接抛出它们的语义：</p><ul><li> 实现了 <code>Send</code> 的类型，可以安全地在线程间传递所有权。也就是说， 可以跨线程移动。<br/> </li><li> 实现了 <code>Sync</code> 的类型， 可以安全地在线程间传递不可变借用。也就是说，可以跨线程共享。<br/> </li></ul><p>这两句话的确很重要（没看过的读者可以多看几遍再继续阅读下文）。但如果只把这个拿出来，像我这样不熟练的 rust 用户可能会觉得似懂非懂，很多概念混杂在一起 —— rust 中关于可变不可变的讨论太多了。</p><h3>导火索 RwLock</h3><p>我之所以决定彻底搞清楚这两个东西是因为我使用标准库中的 <code>RwLock</code> 遇到了一些问题，查看源码之后发现这两行（先不管 <code>Send</code>）：</p><div class="highlight"><pre><code class="language-rust"><span class="cp">#[stable(feature = </span><span class="s">&#34;rust1&#34;</span><span class="cp">, since = </span><span class="s">&#34;1.0.0&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">RwLock</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="cp">#[stable(feature = </span><span class="s">&#34;rust1&#34;</span><span class="cp">, since = </span><span class="s">&#34;1.0.0&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Sync</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">RwLock</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>稍懂 rust 的同学应该就可以看懂，这代码的意思是，只有当类型 <code>T</code> 实现了 <code>Sync</code>，<code>RwLock&lt;T&gt;</code> 才会实现 <code>Sync</code>。</p><p>欸！？我就纳闷了，读写锁读写锁，怎么说也是个锁。锁不就是把不 <code>Sync</code> 的类型变 <code>Sync</code> 的存在吗？</p><p>我马上又去看了一下 <code>Mutex</code>，果然不出我所料：</p><div class="highlight"><pre><code class="language-rust"><span class="cp">#[stable(feature = </span><span class="s">&#34;rust1&#34;</span><span class="cp">, since = </span><span class="s">&#34;1.0.0&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Mutex</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="cp">#[stable(feature = </span><span class="s">&#34;rust1&#34;</span><span class="cp">, since = </span><span class="s">&#34;1.0.0&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Sync</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Mutex</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>这 <code>Mutex</code> 看起来才像锁，<code>RwLock</code> 根本不符合我对锁的印象。但我又仔细想想，互斥锁和读写锁到底差在哪儿，导致了这种情况呢？—— 读写锁允许并行地读。</p><p>所以答案很明了了，如果 <code>T</code> 不 <code>Sync</code>，就不能让多个线程同时拿到 <code>T</code> 类型对象的<b>不可变引用</b>。</p><h3>并行读？内存不安全？</h3><p>所以，并行只读会导致内存不安全吗？这似乎不符合直觉。那到底是啥原因呢？ 这里可以思考一下，rust 的不可变引用真的“只读”吗？当然不是了，大家耳熟能详的 <code>Cell</code>、<code>RefCell</code> 就是拿不可变引用改变内部数据的典型用例。</p><p>所以，这个问题的本质是，rust 的不可变引用并没有对内部可变性做过强的约束。当然我最初期望的是完全内部不可变的，而事实也如此，当你完全使用 “safe rust” 的时候。</p><p>比如像这样：</p><div class="highlight"><pre><code class="language-rust"><span class="k">struct</span> <span class="nc">A</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">data</span>: <span class="kt">i32</span>
<span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">B</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">a</span>: <span class="nc">A</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">set_data</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">data</span>: <span class="kt">i32</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">.</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">data</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>是 rust 类型系统不允许的，你永远不能从不可变的 <code>B</code> 对象上<b>安全地</b>借到一个可变的 <code>data</code> 引用。</p><p>当然, 你使用 <code>unsafe</code> 就可以达到目的。</p><div class="highlight"><pre><code class="language-rust"><span class="k">struct</span> <span class="nc">A</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">data</span>: <span class="kt">i32</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">struct</span> <span class="nc">B</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">a</span>: <span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">A</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">set_data</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">data</span>: <span class="kt">i32</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">).</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="p">};</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><blockquote> 在实际遇到这种场景时应该使用 <code>Cell</code>, <code>RefCell</code>, <code>RwLock</code> 等标准库封装好的结构（当然它们内部实现还得 <code>unsafe</code>）。<br/> </blockquote><p>所以只要 unsafe rust 还存在，你就不能假定不可变引用一定是“内部不可变”的。</p><h3>我们为什么需要使用 Unsafe</h3><p>这就是一个历史悠久的问题了，答案可以分很多方面，比如要 <code>ffi</code>，再比如在某些场景使用 dirty 操作减少拷贝提升性能。但回到我们的前文，我们为什么要让不可变引用“内部可变”呢？</p><p>我们先思考另一个问题，如果我们不使用 <code>unsafe</code>，在 rust 类型系统中，一个对象的可变引用永远只能同时存在一个，这样的话我们如果想在多个线程中使用可变引用要怎么写呢？</p><p>只能像踢球一样把可变引用在线程间传来传去，当然因为引用的生命周期问题我们一般选择把所有权在线程间传递。那怎么传呢？如果用 <code>channel</code> 的话，<code>sender</code>、<code>receiver</code> 本身是不是就得<b>共享</b>可变引用呢？</p><p>最后的结论就是我们不得不用，我们迫真地需要让不可变引用“内部可变”的操作。那既然这个需求不可避免，我们又要怎样保证 rust 的内存安全呢？</p><h3>Sync: make unsafe rust safe</h3><p>我们再回到 <code>Sync</code> 的定义：</p><ul><li>实现了 <code>Sync</code> 的类型， 可以安全地在线程间传递不可变借用。也就是说，可以跨线程共享。</li></ul><p>所以，符合这个要求的类型有两种：</p><p>第一种类型你永远不能通过它的不可变引用改变它的内部，它所有的 <code>pub field</code> 都是 <code>Sync</code> 的，然后所有的以 <code>&amp;self</code> 作为 <code>receiver</code> 的 <code>pub method</code> 也都不改变自身（或返回内部可变引用）。</p><p>第二种类型当然所有的 <code>pub field</code> 都得是 <code>Sync</code> 的，但它可能存在以 <code>&amp;self</code> 作为 <code>receiver</code> 的 <code>pub method</code> 能改变自身（或返回内部可变引用），只不过这些方法本身得自己保证多线程访问的安全性，比如使用锁或者原子。</p><p>其它的类型都是 <code>!Sync</code> 的。</p><p>我们可以举几个栗子看看：</p><ul><li>自然实现 <code>Sync</code> 的类型，即 <code>field</code> 全部 <code>Sync</code>，那它所有的 <code>pub field</code> 显然都是 <code>Sync</code> 的。其以 <code>&amp;self</code> 为 <code>receiver</code> 的 <code>pub method</code> 也只能使用 <code>field</code> 的 <code>pub method</code>，显然都是不可变的。</li><li>上文中的 <code>B</code> 类型，如果让 <code>set_data</code> 方法 <code>pub</code> 的话它就不应该 <code>Sync</code> （即不应该 <code>unsafe impl Sync for B {}</code>）。</li><li><code>RefCell&lt;T&gt;</code>，多个线程可以同时通过其不可变引用持有 <code>T</code> 的“可变引用”（当然这会导致 panic），进而改变其内部，<code>!Sync</code>。</li><li><code>RwLock&lt;T&gt;</code>，多个线程不能同时通过其不可变引用持有 <code>T</code> 的“可变引用”，也不可能同时持有“可变引用”和“不可变引用”，但可以同时持有“不可变引用”。所以：</li><ul><li>如果 <code>T: Sync</code>，则<code>RwLock&lt;T&gt;: Sync</code></li><li>如果 <code>T: !Sync</code>，则<code>RwLock&lt;T&gt;: !Sync</code> </li></ul></ul><p>所以，如果你自己写了一个并不天然实现 <code>Sync</code> 的类型，不妨对照这两条要求考虑要不要给它实现一个 <code>Sync</code>。</p><h3>Send: 安全共享</h3><p>关于 <code>Send</code> 和 <code>Sync</code> 的联系，大多数文档都会说 “只要实现了 <code>Sync</code> 的类型，其不可变借用就可以 安全地在线程间共享”。相信看到这里的读者肯定就能理解，为什么 <code>&amp;T: Send</code> 的要求是 <code>T: Sync</code>；而 <code>&amp;mut T: Send</code> 的要求却更宽松，只需要 <code>T: Send</code>。</p><p>因为 <code>&amp;mut T</code> 的 <code>Send</code> 意味着 <code>move</code>，而 <code>&amp;T</code> 的 <code>Send</code> 意味着 <code>share</code>。要想多线程共享 <code>&amp;T</code>， <code>T</code> 就必须 <code>Sync</code>。</p><p>包括像 <code>Arc&lt;T&gt;</code> 这样的 &#34;<code>shared_pointer</code>&#34; 也是如此：</p><div class="highlight"><pre><code class="language-rust"><span class="cp">#[stable(feature = </span><span class="s">&#34;rust1&#34;</span><span class="cp">, since = </span><span class="s">&#34;1.0.0&#34;</span><span class="cp">)]</span><span class="w">
</span><span class="w"></span><span class="k">unsafe</span><span class="w"> </span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span>: <span class="o">?</span><span class="nb">Sized</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Sync</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">Send</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Send</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Arc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span></code></pre></div><p>当然，对于所有的非引用类型来说，大部分情况下并不需要开发者考虑它是否应该实现 <code>Send</code>，除非你要写智能指针之类的东西，不然你只需要考虑给它实现一个 <code>Sync</code> 从而让它的引用类型实现 <code>Send</code>。</p><h3>总结</h3><p>所以，我之所以觉得 <code>RwLock</code> 应该把 <code>!Sync</code> 的类型包装成 <code>Sync</code> 的类型本质上是因为我错误地理解了 <code>Sync</code> 的语义。rust 的可变引用要求过于严苛导致我们很多时候必须使用不可变引用来改变自身，所以 <code>Sync</code> 是用来标记不可变借用可线程安全地访问的。</p><p>至于可变引用，因为永远只同时存在一个可变引用，且其不与不可变引用共存，所以以可变引用为 <code>receiver</code> 的方法永远是线程安全的，无需其它的约束。</p><p>对于 <code>RwLock&lt;T&gt;</code>， 你应该保证 <code>T</code> 是 Sync 的，否则它就和 <code>RefCell&lt;T&gt;</code> 没啥区别。只不过原本因为 <code>RefCell</code> 会 panic 的逻辑现在会因为 <code>RwLock</code> 死锁。</p>