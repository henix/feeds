<div class="title-image"><img src="https://pic4.zhimg.com/v2-9588129d54beb9d0453920510a3318e4_b.jpg" alt=""></div><p></p><a href="https://zhuanlan.zhihu.com/p/50995405" data-draft-node="block" data-draft-type="link-card" class="internal">Data Visualization With Bokeh: Part II</a><a href="https://zhuanlan.zhihu.com/p/53032803" data-draft-node="block" data-draft-type="link-card" data-image="https://pic4.zhimg.com/v2-4e37ba0ae005e61b81940845b835f14f_180x120.jpg" data-image-width="900" data-image-height="540" class="internal">Fitz Hoo：Data Visualization With Bokeh: Part III</a><p>Bokeh是一个以Web浏览器为展示平台的交互式可视化Python库，它可以帮助人们轻松快速地创建交互式图表，仪表板以及数据应用程序。</p><p>在平时的工作或学习中，我们接触到的大多是静态图表，其与可交互式图表相比，总感觉缺少了一些对数据的探索意味。本文以构建自己的行情界面为切入点，来实地探索bokeh在数据展示方面的优势以及如何生成一个可运行的bokeh app。</p><a class="video-box" href="https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1050180584848007168" target="_blank" data-video-id="" data-video-playable="true" data-name="Bokeh App GUI" data-poster="https://pic2.zhimg.com/v2-09f3fcdd2d9f8ef990512326d5e4acc9.png" data-lens-id="1050180584848007168"><img class="thumbnail" src="https://pic2.zhimg.com/v2-09f3fcdd2d9f8ef990512326d5e4acc9.png"/><span class="content"><span class="title">Bokeh App GUI<span class="z-ico-extern-gray"></span><span class="z-ico-extern-blue"></span></span><span class="url"><span class="z-ico-video"></span>https://www.zhihu.com/video/1050180584848007168</span></span></a><p>在使用bokeh的过程中，我们主要依赖以下几个API，分别是：</p><ul><li>bokeh.models</li><ul><li>在构建图像或者应用程序的过程中使用到的工具、控制命令、图层，数据源等都属于bokeh模型类。模型的配置则通过对不同属性设置不同的值实现。</li></ul><li>bokeh.plotting</li><ul><li>plotting API是围绕figure()命令来开发的，它支持多种不同形式的图像绘制，如line、 quad、step等。</li></ul><li>bokeh.layouts</li><ul><li>layouts，顾名思义，是围绕图像之间的排版而开发的功能，常用的有row, column, widgetbox, gridplot等</li></ul><li><a href="https://link.zhihu.com/?target=http%3A//bokeh.io/" class=" wrap external" target="_blank" rel="nofollow noreferrer">bokeh.io</a> </li><ul><li>负责图像的输出形式，目前支持notebook输出（output_notebook）和网页端输出（output_file）两种展示方式</li></ul><li>bokeh.palettes</li><ul><li>调色板，用户可根据自己的偏好进行可视化配色</li></ul></ul><p>具体的这些API用法大家可以参考官网<a href="https://link.zhihu.com/?target=https%3A//bokeh.pydata.org/en/latest/docs/reference.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Reference Guide - Bokeh 1.0.1 documentation</a></p><p class="ztext-empty-paragraph"><br/></p><p>bokeh的交互主要有两种类型，一种是被动式（passive）的Inspector，一种是主动式（active）的Widgets。以下简单列举本次构建的APP涉及到的交互工具，并做简单说明介绍。</p><ul><li>Inspector</li><ul><li><b>HoverTool</b>: 默认情况下，悬浮工具将生成“表格”类工具提示，其中每行包含标签及其关联信息。每个标签和对应信息构成一个元组，所有标签和信息构建成一个元组的列表作为参数进行传递。</li><li>...</li></ul><li>Widgets</li><ul><li>CheckBoxGroup: 标准的复选框，支持多个指标同时选定</li><li>DatePicker: 更新日期</li><li>Button: 按钮，点击触发运算</li><li>Select: 单个选择工具，选项之间互斥</li><li>...</li></ul></ul><p>检查器是基于当前光标位置对图像进行注释或报告图像信息的被动工具。</p><p>窗口小部件是可以添加到bokeh应用程序的交互式控件，以便为可视化提供前端用户界面。窗口小部件可以驱动程序进行新的运算，更新绘图，甚至连接到其他程序。</p><p>为了让HoverTool运行起来，我们需要为其提供相应的数据格式，在bokeh中通过ColumnDataSource可以获取我们需要的数据格式。ColumnDataSource是bokeh中的基础数据结构形式，其将列名映射为序列或数组。大部分的图像，数据表等都由ColumnDataSource所驱动。</p><p>ColumnDataSource接受三种数据传入形式，分别为：</p><ul><li>Dict </li></ul><div class="highlight"><pre><code class="language-text">data = {&#39;x&#39;: [1,2,3,4], &#39;y&#39;: np.ndarray([10.0, 20.0, 30.0, 40.0])}
source = ColumnDataSource(data)</code></pre></div><ul><li>DataFrame Object</li></ul><div class="highlight"><pre><code class="language-text">source = ColumnDataSource(df)</code></pre></div><ul><li>GroupBy Object</li></ul><div class="highlight"><pre><code class="language-text">group = df.groupby((&#39;colA&#39;, &#39;ColB&#39;))
source = ColumnDataSource(group)</code></pre></div><p>生成的数据可以通过source.data调取。以K线图的构建为例，首先我们提取相关数据，返回的数据格式为DataFrame，接着使用ColumnDataSource对返回数据进行处理生成source，在绘制图形的过程中，将source作为参数传入，此时通过列名便能获取到对应的数据。</p><div class="highlight"><pre><code class="language-python3"><span class="kn">from</span> <span class="nn">bokeh.models</span> <span class="k">import</span> <span class="n">ColumnDataSource</span><span class="p">,</span> <span class="n">HoverTool</span>
<span class="kn">from</span> <span class="nn">bokeh.plotting</span> <span class="k">import</span> <span class="n">figure</span>

<span class="c1"># load data</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">load_data</span><span class="p">(</span><span class="n">order_book_id</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">start_date</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">end_date</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>   <span class="c1"># 根据默认值提取数据</span>
<span class="n">source</span> <span class="o">=</span> <span class="n">ColumnDataSource</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="n">inc</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">close</span> <span class="o">&gt;=</span> <span class="n">data</span><span class="o">.</span><span class="nb">open</span>
<span class="n">dec</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="nb">open</span> <span class="o">&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">close</span>

<span class="n">inc_source</span> <span class="o">=</span> <span class="n">ColumnDataSource</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">inc</span><span class="p">])</span>
<span class="n">dec_source</span> <span class="o">=</span> <span class="n">ColumnDataSource</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">dec</span><span class="p">])</span>
    
<span class="n">p</span> <span class="o">=</span> <span class="n">figure</span><span class="p">(</span><span class="n">plot_height</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">plot_width</span><span class="o">=</span><span class="mi">800</span><span class="p">)</span>
<span class="n">hover</span> <span class="o">=</span> <span class="n">HoverTool</span><span class="p">(</span><span class="n">tooltips</span><span class="o">=</span><span class="p">[(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;@date&#39;</span><span class="p">),</span>
                            <span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="s1">&#39;@open&#39;</span><span class="p">),</span>
                            <span class="p">(</span><span class="s1">&#39;high&#39;</span><span class="p">,</span> <span class="s1">&#39;@high&#39;</span><span class="p">),</span>
                            <span class="p">(</span><span class="s1">&#39;low&#39;</span><span class="p">,</span> <span class="s1">&#39;@low&#39;</span><span class="p">),</span>
                            <span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">,</span> <span class="s1">&#39;@close&#39;</span><span class="p">),</span>
                            <span class="p">(</span><span class="s1">&#39;pct_change&#39;</span><span class="p">,</span> <span class="s2">&#34;@pct_change&#34;</span><span class="p">)</span>
                            <span class="p">]</span>
                  <span class="p">)</span>

<span class="n">p</span><span class="o">.</span><span class="n">segment</span><span class="p">(</span><span class="n">x0</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="n">y0</span><span class="o">=</span><span class="s1">&#39;high&#39;</span><span class="p">,</span> <span class="n">x1</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="s1">&#39;low&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="n">source</span><span class="o">=</span><span class="n">inc_source</span><span class="p">)</span>
<span class="n">p</span><span class="o">.</span><span class="n">segment</span><span class="p">(</span><span class="n">x0</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="n">y0</span><span class="o">=</span><span class="s1">&#39;high&#39;</span><span class="p">,</span> <span class="n">x1</span><span class="o">=</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="n">y1</span><span class="o">=</span><span class="s1">&#39;low&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="n">source</span><span class="o">=</span><span class="n">dec_source</span><span class="p">)</span>
<span class="n">p</span><span class="o">.</span><span class="n">vbar</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="s1">&#39;close&#39;</span><span class="p">,</span> <span class="n">fill_color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="n">source</span><span class="o">=</span><span class="n">inc_source</span><span class="p">,</span> <span class="n">hover_fill_alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">p</span><span class="o">.</span><span class="n">vbar</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="s1">&#39;close&#39;</span><span class="p">,</span> <span class="n">fill_color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="n">line_color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="n">source</span><span class="o">=</span><span class="n">dec_source</span><span class="p">,</span> <span class="n">hover_fill_alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># add hover tool</span>
<span class="n">p</span><span class="o">.</span><span class="n">add_tools</span><span class="p">(</span><span class="n">hover</span><span class="p">)</span></code></pre></div><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-4ac7ecc757f22e74cc0c5b6fcbca4206_b.jpg" data-size="normal" data-rawwidth="720" data-rawheight="498" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic3.zhimg.com/v2-4ac7ecc757f22e74cc0c5b6fcbca4206_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-4ac7ecc757f22e74cc0c5b6fcbca4206_b.jpg" data-size="normal" data-rawwidth="720" data-rawheight="498" class="origin_image zh-lightbox-thumb lazy" width="720" data-original="https://pic3.zhimg.com/v2-4ac7ecc757f22e74cc0c5b6fcbca4206_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-4ac7ecc757f22e74cc0c5b6fcbca4206_b.jpg"/><figcaption>图1：蜡烛图</figcaption></figure><p>我们希望在该行情界面中，不仅支持不同标的的开高低收的价格展示，而且还希望添加一些分析指标来丰富图形界面，比如不同时长的均线设置，技术指标之间切换展示以及时间范围的可选。不同股票或指数的切换通过文本形式（TextInput）传入进行更新，均线添加这里采用的是复选框（CheckBoxGroup）形式，支持多个同时选定，技术指标如CCI，OBV之间的切换，则采用的是下拉选择框（Select），每次仅支持展示一个技术指标，时间窗口的设置则依赖日期选取卡（DatePicker）。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-9d17194c15e5e4953860231ca9ebd98f_b.jpg" data-size="normal" data-rawwidth="1498" data-rawheight="474" class="origin_image zh-lightbox-thumb" width="1498" data-original="https://pic4.zhimg.com/v2-9d17194c15e5e4953860231ca9ebd98f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-9d17194c15e5e4953860231ca9ebd98f_b.jpg" data-size="normal" data-rawwidth="1498" data-rawheight="474" class="origin_image zh-lightbox-thumb lazy" width="1498" data-original="https://pic4.zhimg.com/v2-9d17194c15e5e4953860231ca9ebd98f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-9d17194c15e5e4953860231ca9ebd98f_b.jpg"/><figcaption>图2：Widget展示</figcaption></figure><div class="highlight"><pre><code class="language-text">today = datetime.today().date()

# Button
button = Button(label=&#34;ClickToChange&#34;, button_type=&#34;success&#34;)

# CheckBoxGroup
average_labels = [&#34;MA_5&#34;, &#34;MA_10&#34;, &#34;MA_20&#34;, &#39;MA_30&#39;, &#39;MA_60&#39;, &#39;MA_120&#39;]
average_selection = CheckboxGroup(labels=average_labels, active=[0, 1, 2, 3, 4, 5, 6])
average_selection.inline = True
average_selection.width = 500

# TextInput    
order_book_id = TextInput(title=&#39;StockCode&#39;, value=&#39;000300.XSHG&#39;)
symbol = instruments(order_book_id.value).symbol

# DatePicker
start_date = DatePicker(title=&#34;StartDate&#34;, value=&#39;2018-01-01&#39;, min_date=&#39;2015-01-01&#39;, max_date=today)
end_date = DatePicker(title=&#34;EndDate&#34;, value=today, min_date=start_date.value, max_date=today)
</code></pre></div><p>虽然我们已经完成了各种widgets的初始设置，但是到目前为止，还缺少回调函数来根据触发选项更新widgets的内容。一般而言，回调函数update一般有三个默认参数，分别是(attr, old, new)，attr表示变更属性的名称，old和new则表示属性更新前后的值，回调函数的触发通过 <b>.on_change</b>实现<i>。</i>部分widgets，如Button，DropDown，CheckBox，其更新方法通过<b> .on_click</b> 实现。以更新标的名称及时间戳为例进行说明：</p><div class="highlight"><pre><code class="language-python3"><span class="k">def</span> <span class="nf">update</span><span class="p">():</span>
    <span class="n">obid</span> <span class="o">=</span> <span class="n">order_book_id</span><span class="o">.</span><span class="n">value</span>  
    <span class="n">start</span> <span class="o">=</span> <span class="n">start_date</span><span class="o">.</span><span class="n">value</span>
    <span class="n">end</span> <span class="o">=</span> <span class="n">end_date</span><span class="o">.</span><span class="n">value</span>
    
    <span class="n">new_data</span> <span class="o">=</span> <span class="n">load_data</span><span class="p">(</span><span class="n">obid</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
    <span class="n">new_source</span> <span class="o">=</span> <span class="n">ColumnDataSource</span><span class="p">(</span><span class="n">new_data</span><span class="p">)</span>
    <span class="n">source</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">new_source</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>

<span class="n">button</span><span class="o">.</span><span class="n">on_click</span><span class="p">(</span><span class="n">update</span><span class="p">)</span></code></pre></div><p>只有在点击Button按钮（如图2）确认修改以后，行情数据才会更新，并生成新的图形。</p><p>值得注意的是，标的数据或区间范围的更改，会影响到均线和技术指标的具体数值，此时我们需要确保二者对应的source也随之更新，因此上面的代码需要更改为以下形式。</p><div class="highlight"><pre><code class="language-text">def update():
    obid = order_book_id.value  
    start = start_date.value
    end = end_date.value
    
    new_data = load_data(obid, start, end)
    new_data_1 = moving_average(new_data)
    new_data_2 = technical_indicator(new_data)

    new_source = ColumnDataSource(new_data)
    new_source_1 = ColumnDataSource(new_data_1)
    new_source_2 = ColumnDataSource(new_data_2)

    source.data.update(new_source.data)
    source_1.data.update(new_source_1.data)
    source_2.data.update(new_source_2.data)

button.on_click(update)</code></pre></div><p>截止到目前，我们只是简单介绍了如何利用不同的widgets以及HoverTool来实现图像的交互，实现的功能还比较初级和简单，但其实想写以及能写的内容还有好多，例如如何在同一个APP中实现不同图像之间的数据联动，从而使得数据之间的关联关系更容易被用户发现；如何将多个不同的分析模块集合成一个功能完善的应用程序，能够方便用户基于GUI进行操作；以及如何将实时数据流引入Bokeh App中，以帮助我们更好了解当前的市场状态，而不仅仅局限于对历史数据的结果展示。</p><p>希望自己在接下来的文章里慢慢实现这些功能，也能巩固、加深自己对bokeh用法的理解。</p><p>完整代码请戳：</p><a href="https://link.zhihu.com/?target=https%3A//github.com/FitzHoo/DataVisualization" data-draft-node="block" data-draft-type="link-card" data-image="https://pic3.zhimg.com/v2-6291d71b02cff96aaab6da62455d62aa_ipico.jpg" data-image-width="400" data-image-height="400" class=" wrap external" target="_blank" rel="nofollow noreferrer">FitzHoo/DataVisualization</a><p></p>