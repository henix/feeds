<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>全同态加密与区块链</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/</link>
<description>区块链与密文计算让数据可以自由的分享 全同态加密具有神奇的功能，在不解密的情况下能够对密文进行任意计算。区块链能够在去中心化的环境下，保证数据的不可篡改、可追溯等。区块链+全同态加密=让我的数据属于我掌控。</description>
<language>zh-cn</language>
<lastBuildDate>Sat, 09 Feb 2019 11:57:45 +0800</lastBuildDate>
<item>
<title>区块链用于空中交通管理安全，身份验证和隐私-Part 1</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-02-09-56365272.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56365272&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[摘要]&lt;/b&gt;目前基于雷达的空中交通服务提供商，可以通过程序性防止公开发布所选择的飞行计划，位置和状态数据来保护军队和公司运营的隐私。美国联邦航空局(Federal Aviation Administration,FAA)2020年在全国采用自动相关监视广播（ADS-B），任务授权不包括维护这些相同的飞机隐私选项的规定，也没有解决欺骗，拒绝服务和其他明确记录的风险的风险因素。本文介绍了一种工程原型，它体现了可用于缓解这些ADS-B安全问题的设计和方法。设计创新之处在于使用开源许可区块链框架来实现飞机隐私和匿名，同时提供与空中交通服务，运营支持或其他授权实体进行通信的安全有效方法。该框架具有证书授权，智能合约支持和用于私人信息的更高带宽通信渠道，可用于任何特定飞机与任何特定授权成员之间的安全通信，根据智能合约形式指定的条款共享数据。该原型演示了如何在可扩展的模块化环境中经济，快速地部署该方法。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;1.简介&lt;/b&gt;&lt;/p&gt;&lt;p&gt;虽然美国联邦航空局(FAA)已经规定，飞行在国家空域系统（NAS）的飞机必须在2020年之前配备自动相关监视系统（ADS-B），但通用航空和美国军方落后于其实施的时间。人们普遍认为，仍然存在尚未解决的问题，这让采用ADS-B变得复杂。利益相关者希望保持当前的隐私，匿名，身份验证以及抵御恶意干扰，包括欺骗和(或)服务攻击的等级。&lt;/p&gt;&lt;p&gt;虽然利益相关者没有接受能让ADS-B系统更加安全的很多建议，FAA目前并没有支持能解决这些问题的特定计划。该领域的现有技术通常分为两个区域：安全位置验证(secure location Verification)和安全广播授权(secure broadcast authorization)。安全位置验证的方法包括多点，距离边界，Kalman filtering ，群组验证，意图验证,数据融合和交通建模。安全广播授权的方法包括非加密方案，如指纹，而不是如公钥基础设施这样的显式加密方案。 &lt;/p&gt;&lt;p&gt;&lt;br&gt;本文对加密安全广播授权方法做出了贡献，通过一种新奇的基于区块链PKI实现来解决这些ADS-B的漏洞，呈现一个说明性原型软件的设计和描述。该设计支持ADS-B航空监视服务，该服务保持或超过当前的飞机隐私水平，这是目前NAS基于雷达的集中式服务的重要特征。本文介绍了一种“航空区块链基础设施”（ABI）设计，使飞机能够有效，安全，私密地与空中交通管理和其他经过正确授权的实体进行通信。下面描述的ABI的工程原型在广泛可用的开源许可区块链框架中的实现，代表了可扩展的架构，并说明了如何快速部署和经济地维护这种无服务器PKI基础架构。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2背景&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;A.ADS-B对空中交通安全和隐私的影响&lt;/b&gt;&lt;/p&gt;&lt;p&gt;目前, NAS 空中交通管制 (ATC) 在很大程度上依赖于地面雷达系统和 Mode-c 应答器系统来跟踪飞机。联邦航空局(FAA)独家拥有全部的空中交通监视数据, 使该机构能够建立行政程序, 以确保军队和(被批准的)民用飞机的飞行隐私 (他们对保持其活动的私密性有着有效的要求valid requirements)，然后才向公众公布这些数据的其余部分。从公众视野中 &quot;blocking&quot; 行动的行政程序 (见下文) 是有效的, 因为 nas 空中交通监视数据来源于联邦航空局(FAA)控制的基于雷达大的飞机监视系统。&lt;/p&gt;&lt;p&gt;但是, ADB-S数据不受独占掌控。正如ADS-B的名字, 它以明文形式向范围内的任何接收器全方位地广播数据。私人拥有的廉价听力站由业余爱好者和企业家经营, 以形成国际空中交通监视网络, 对这些监控数据进行汇总、记录, 并向全世界公众展示。美国联邦航空局普遍采用ADS-B系统的命令因为利益相关者担心该系统缺乏健壮的的安全模型而变得复杂。&lt;/p&gt;&lt;p&gt;据广泛报道, ads-b 受到第三方欺骗 (虚假的飞机位置报告) 例如, Greenberg (2012年) 写道: &quot;ads-b 欺骗的威胁是许多组织关注的问题, 并将现有和计划中的 ads-b 基础设施替换来防止这种欺骗行为需要在修订现有基础设施方面进行大量投资, 并在现有飞机上更换 ads-b 设备。&lt;/p&gt;&lt;p&gt; 虽然有一些建议采用技术来克服欺骗, 但没有一个既得到广泛接受又足够有效的缓解的行动计划。strohmeier 等人 (2015年) 的结论是: &quot; 目前正在审议的解决办法 (以及在实践中使用的多边化) 似乎只能是一种临时填补(空位), 迅速改善了目前系统的安全&quot;。&lt;/p&gt;&lt;p&gt;很多研究对 ads-b 未加密的 &quot;明文&quot; 广播的隐私和安全表示关心。一项研究表明: &quot;如果没有适当的对策, 关键的空中交通管制决策过程不应依赖 ads-b的 衍生数据&quot;。&lt;/p&gt;&lt;p&gt;联邦航空局(FAA)宣布, 到 2020年, 它将专门向配备 ads-b 的飞机提供空中交通管制服务, 不过这些条例将允许飞机以 &quot;匿名&quot; ads-b 模式运行。但是, 将不向试图以 &quot;匿名&quot; 模式操作 ads-b 或掩盖其身份的飞机提供空中交通服务。虽然一些军事任务可能不需要民用空中交通服务，但大多数其他军用飞机和绝大多数公司航班确实需要空中交通(ATC)管制服务。&lt;/p&gt;&lt;p&gt;这些未决问题使军队和公司飞机运营商采用 ads-b 的工作复杂化。这些利益攸关方很关心ads-b每秒钟以明文广播他们的位置, 从而损害了目前的业务(operational)隐私和安全水平。这些利益攸关方参与 ads-b 任务的不确定性直接影响到联邦航空局下一代空中交通管制现代化和自动化项目的广泛范围。许多下一代系统的前提是在 nas 中使用 ads-b, 因此下一代系统可能无法识别不采用ads-b的飞机, 而这种特殊形式的数据丢失往往会严重降低其性能。&lt;/p&gt;&lt;p&gt;例如, 2018年, 美国政府问责办公室报告说, 在联邦航空局(FAA)没有作出安全保证的情况下, 国防部(DOD): &quot;. 没有采取重大行动或充分执行,将下一代的要求纳入计划和政策, 没有将国防部与 ads-b 有关的组成部分的需要和要求纳入连贯一致的计划和政策, 以便纳入 nextgen 联合规划和发展，按照国防部副部长2007年的指示，国防部的中期 nextgen 行动构想和国防部的中期nextgen 实施计划不讨论 ads-b 输出要求的规划, 这对 nextgen 军用飞机跟踪至关重要&lt;/p&gt;&lt;p&gt; 虽然有一些关于强化 ads-b 系统的建议和设计, 但没有一个建议和设计被批准在 nas 中实施。使选择 ads-b 安全体系结构的决定复杂化的一些因素包括在建立普遍接受的客户端-服务器标准方面遇到的困难, 这些标准将支持相当于公共关键/私钥基础结构 (pki) 的标准。截至 (2018年11月), 航空业尚未为此采用任何标准方法, 联邦航空局和国防部也没有为这些安全和隐私问题开发程序或工程支持。美国问责办公室最近的报告强烈建议解决方案: &quot;解决行动、物理、网络攻击和电子战安全风险;以及与剥离雷达二次监视相关的风险。解决方案或缓解措施应尽快获得批准。&lt;/p&gt;&lt;p&gt;待续。。。。。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;===============================================================&lt;/p&gt;&lt;p&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;(二维码自动识别)&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-02-09-56365272</guid>
<pubDate>Sat, 09 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>深入浅出zkSNARKs-Part4</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-02-08-56338053.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56338053&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;QSP问题的SNARK&lt;/b&gt;&lt;/p&gt;&lt;p&gt;请记住，在QSP中，我们给出多项式v 0，...，v m，w 0，...，w m，目标多项式t（最高阶为d）和二进制输入字符串u。证明者找到a1，...，am ， b 1，...，b m（这些值都取决于u）和多项式h使得&lt;/p&gt;&lt;p&gt;th =（v 0 + a 1 v 1 + ... + a m v m）（w 0 + b 1 w 1 + ... + b m w m）。&lt;/p&gt;&lt;p&gt;在上一节中，我们已经解释了CRS如何生成。现在我们选择一个秘密号码s和α并公布公布出来：&lt;/p&gt;&lt;p&gt;E（S 0），E（S 1），...，E（S d）和E（αS 0），E（αS 1），...，E（αS d）&lt;/p&gt;&lt;p&gt;因为我们没有单个多项式，而是针对问题这一列多项式是固定的，我们需要把推出的多项式公布出来&lt;/p&gt;&lt;p&gt;E（t（s）），E（αt（s）），&lt;/p&gt;&lt;p&gt;E（V 0（S）），...，E（V m（S）），E（αv 0（S）），...，E（αv m（S）），&lt;/p&gt;&lt;p&gt;E（w0（S）），...，E（wm（S）），E（αw0（S）），...，E（αwm（S）），&lt;/p&gt;&lt;p&gt;我们还需要之后用的的秘密数字β v，β w ，γ（它们会被用来验那些多项式是推算出来的，而不是任意的多项式），然后把它们公布出来：&lt;/p&gt;&lt;p&gt;E（γ），E（β v γ），E（β w ^γ）&lt;/p&gt;&lt;p&gt;E（βv V 1（S）），...，E（βv V m（S））&lt;/p&gt;&lt;p&gt;E（βw W1（S）），...，E（βw Wm（S））&lt;/p&gt;&lt;p&gt;E（βv t（S）），E（βw t（S））&lt;/p&gt;&lt;p&gt;这是完整的CRS(公共引用字符串)。在实际实现中，CRS的一些元素并不是必须的，但这会使表达式复杂化。&lt;/p&gt;&lt;p&gt;现在证明者还需要做什么？她使用上面解释的还原函数来找到多项式h和值a 1，...，a m， b 1，...，b m。这里有一点非常重要，就是要使用一个 witness-preserving reduction（见上文）因为只有这样，值a 1，...，a m， b 1，...，b m可以与reduction一起计算出来，否则将会非常非常困难。为了描述证明者作为证据发送给验证者的内容，我们必须回到QSP的定义。&lt;/p&gt;&lt;p&gt;这里有一个限制  a 1，...，a m， b 1，...，b m这些值的单射函数 f：{（i，j）| 1≤i≤n，j∈{0,1}}→{1，...，m} 。因为相对来说 m 是比较大的，所以对于任何输入，函数 f 的输出的都不会包含这些数字。而这些下标没有被限制，然后基于Ifree中的所有下标 k 定义Vfree（X）=Σ ķaķ v ķ（X）， 。对于等式w（x）= b 1 w 1（x）+ ... + b m w m（x） 来说，我们的证明将由下面的式子构成：&lt;/p&gt;&lt;p&gt;V free：= E（V free（s）），W：= E（w（s）），H：= E（h（s）），&lt;/p&gt;&lt;p&gt;V&#39; free ：= E（αvfree(s))，W&#39;：= E（αw（s）），H&#39;：= E（αh（s）），&lt;/p&gt;&lt;p&gt;Y：= E（βv V free （S）+βww（S）））&lt;/p&gt;&lt;p&gt;最后一个等式用来检验是否使用了正确的多项式（这一部分还没有讲到，不过其他的例子会说到它）。要注意的是，我们所有的加密值，证明者只需要知道 CRS 就可以全部推算出来。&lt;/p&gt;&lt;p&gt;验证者还要做的有：&lt;/p&gt;&lt;p&gt;由于k的值（其中k不是“free”下标）可以直接从输入u计算（验证者也知道，这是要验证的值），验证者可以通过v计算出总和：&lt;/p&gt;&lt;p&gt;E（V’free（S））= E（Σ ķak v ķ（S）），其中k的范围在所有索引不是Ifree。&lt;/p&gt;&lt;p&gt;有了这个，验证者现在使用配对函数e确认以下等式（不要害怕）：&lt;/p&gt;&lt;p&gt;e（V &#39; free，g）= E（V free，gα）=，e（W&#39;，E（1））= e（W，E（α）），e（H’，E（1））= e（H，E（α））&lt;/p&gt;&lt;p&gt;e（E（γ），Y）= e（E（βv γ），V free）e（E（β w γ），W）&lt;/p&gt;&lt;p&gt;e（E（v 0（s））E（v in（s））V free，E（w 0（s））W）= e（H，E（t（s）））&lt;/p&gt;&lt;p&gt;要了解这里关键概念的知识，你必须要知道配对函数是允许我们在加密信息上进行一些有限的计算的：首先我们可以使用任意多次的加法，但是不能使用乘法。其次这个加法是来自加密方法本身的加同态，乘法则是通过配对函数的两个参数来实现的。所以  e（W&#39;，E（1））= e（W，E（α））基本上就是在加密空间中用 1 乘以 W’，然后和α乘以 W 做比较。回想一下上面的定义你就会发现 W 和 W’ 应该就是 E(w(s)) 和 E(α w(s)),如果证明者提供的是正确的证明.&lt;/p&gt;&lt;p&gt;如果你还记得上面关于如何在一个私密点上推算多项式的话，这三个首先要检查的点基本上就可以确认证明者确实知道一些用 CRS 中的部分构造的多项式。第二个条目往往是用来确保证明者使用的是正确的多项式 v 和 w，而不是任意的多项式。而它背后的逻辑则是除了从E(vfree(s)和E)w(s))中获取精确的值之外，证明者没办法计算出加密组合E（βvvfree（S）+βw w（S）））。因为 βv在 CRS 中是隔离的，并不是 CRS 中的一部分，只有在和多项式 w k（s） 组合起来的时候才知道w k（s） 的值。而将它们“混合”起来的唯一方法则是通过同样的加密 γ。&lt;/p&gt;&lt;p&gt;假设证明者提供了正确的证明，那么让我们检查一下是否正确。左边和右边分别是&lt;/p&gt;&lt;p&gt;e（E（γ），Y）= e（E（γ），E（β v vfree（S）+βww（S）））= e（g，g）γ（β v vfree（S ）+βw W（S））&lt;/p&gt;&lt;p&gt;e（E（β v γ），Vfree）e（E（βw γ），W）= e（E（β v γ），E（vfree（S）））e（E（βw γ） ，E（W（S）））= e（g，g）（β v γ）vfree（S） e（g，g）（β w γ）W（S） = e（g，g）γ（ βvVfree（S）+βw W（S））&lt;/p&gt;&lt;p&gt;第三项基本上就是检查了（v 0（s）+ a 1 v 1（s）+ ... + a m v m（s））（w 0（s）+ b 1 w 1（s）+ ... + b m w m（s））= h（s）t（s），这也是QSP问题的主要条件。需要注意的是，要将加密值的乘法转换为未加密值的加法，因为E（x）E（y）= g x g y = g x + y = E（x + y）。&lt;/p&gt;&lt;p&gt;&lt;b&gt;添加零知识&lt;/b&gt;&lt;/p&gt;&lt;p&gt;正如我在开始时所说的，关于zkSNARKS的显着特征是简洁而不是零知识部分。我们现在将看到如何添加零知识，下一节将简要介绍一下简洁性。&lt;/p&gt;&lt;p&gt;这个想法就是证明者现在通过一个随机私密的值来进行“移位”，然后再在其他的等式中“移位回来”以取得平衡。证明者会选择 δfree，δ w ，然后在证明中执行下面的替换：&lt;/p&gt;&lt;p&gt;用 Vfree(s)+δfree t(s)来替换 Vfree(s)&lt;/p&gt;&lt;p&gt;用w(s)+δw t(s )来替换  w(s)&lt;/p&gt;&lt;p&gt;通过这两个替换， Vfree 和 W 这两个包含 witness 因子编码的值基本上就变成了无法区别的随机值，因此要从 witness 中提取出来也不可能。大部分的等式检验对修改都是『免疫』的，而我们要确保正确的值就是 H 或者说是 h(s)。那我们就要确保&lt;i&gt;：&lt;/i&gt;&lt;/p&gt;&lt;p&gt;（v 0（s）+ a 1 v 1（s）+ ... + a m v m（s））（w 0（s）+ b 1 w 1（s）+ ... + b m w m（s））= h（s）t（s），或换句话说&lt;/p&gt;&lt;p&gt;（v 0（s）+ v in（s）+ v free（s））（w 0（s）+ w（s））= h（s）t（s）&lt;/p&gt;&lt;p&gt;这两个等式成立。通过修改，我们得到了&lt;/p&gt;&lt;p&gt;（V 0（S）+ V in（S）+ V free（S）+δfree t(S))（W 0（s）+ W（s）+δw t（S））&lt;/p&gt;&lt;p&gt;然后将结果展开，我们看到用h替换h（s）&lt;/p&gt;&lt;p&gt;h（S）+δfree（W 0（s）+ W（s））+δw（V 0（S）+ Vin（S）+ Vfree（S））+（δfreeδw）t（s）&lt;/p&gt;&lt;p&gt;。&lt;/p&gt;&lt;p&gt;在输入和 Witness 大小之间取一个折中的值&lt;/p&gt;&lt;p&gt;就像你在上面这些小节中看到的一样，我们的证明由一个群（就是一个椭圆曲线）的 7 个元素组成。而且验证者的工作就是检验一些配对函数的等式是否成立以及计算 E(Vin(s)) 这样一个跟随输入大小的线性任务。最主要的是，在这个验证过程中，既不需要  witness 字符串的大小，又不需要计算工作量来验证 QSP（没有 SNARKs）。这就意味着 SNARKs 的校验是个很复杂的问题，而简单的问题往往都是一样的。造成这个结果的主要原因则是，因为我们只在一个单独的点上面检验了多项式的一致性，而不是全部的点。多项式可以变的非常非常复杂，但是一个点始终是一个点。而唯一能影响到验证结果的参数就是安全性的等级（比如群的大小）和输入值的最大尺寸。&lt;/p&gt;&lt;p&gt;减小第二个参数是可行的，将输入值的一部分移动到 witness 中：&lt;/p&gt;&lt;p&gt;我们不验证函数 f(u, w)，u 是输入，w 是 witness，而是做一次 hash，然后验证：&lt;/p&gt;&lt;p&gt;f&#39;（H，（u，w））：= f（u，w）∧h（u）= H&lt;/p&gt;&lt;p&gt;这样就意味着我们可以用一个 hash 来代表输入 h(u) 了（这样就会变的更短），除了验证 f(x, w)，我们还需要验证某个值 x 的 hash 等于 H(u)（这样的话，那 x 极有可能就等于 u 了）。这样就将原始输入 u 移动到 witness 字符串中了，这样虽然会增大 witness 的大小，但是输入值的大小就减小为一个常数了。&lt;/p&gt;&lt;p&gt;这是非常了不起的，因为它允许我们在恒定时间内验证任意复杂的语句。&lt;/p&gt;&lt;p&gt;&lt;b&gt;这与以太坊有什么关系？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;因为验证计算是以太坊区块链的核心，所zkSNARK和以太坊关系紧密相连。有 zkSNARKs，我们不但可以完成任何人都可证实的私密的计算，而且还可以高效的完成。&lt;/p&gt;&lt;p&gt;虽然以太坊使用了一个图灵完备的虚拟机，但目前还无法在以太坊中实现zkSNARK验证。验证者任务在概念上看似简单，但配对函数实际上很难计算，而且在单个区块中还会消耗更多的 gas。椭圆曲线乘法已经相对复杂，而配对函数将这个复杂度又增加了一个级别。&lt;/p&gt;&lt;p&gt;像zCash这样的现有zkSNARK系统对每个任务都使用相同的问题/电路/计算。在zCash里，它是交易验证。在以太坊上，zkSNARKs不会局限于单一的计算问题，而是让所有的人都能够在不发布一个新的区块链的情况下构建他们自己的 zkSNARK 系统。添加到以太坊的每个新zkSNARK系统都需要一个新的私密的可信任的准备阶段（某些部分可以重复使用，但不是全部），即必须生成新的CRS。也可以为“通用虚拟机”添加zkSNARK系统。这样的话当你使用一个新的实例时，你就不需要重新设置了，因为你将不再需要为以太坊上新的智能合约发布一个新的区块链。&lt;/p&gt;&lt;p&gt;&lt;b&gt;将zkSNARKs结合到以太坊上&lt;/b&gt;&lt;/p&gt;&lt;p&gt;有多种方法可以为以太坊启用zkSNARK。所有这些都降低了配对函数和椭圆曲线操作的实际成本（其他所需的操作已经足够便宜），因此也可以降低这些操作的gas。&lt;/p&gt;&lt;p&gt;1.提高（保证）EVM的性能&lt;/p&gt;&lt;p&gt;2.仅针对某些配对函数和椭圆曲线乘法提高EVM的性能&lt;/p&gt;&lt;p&gt;第一种选择当然是从长远来看更好的回报，但更难实现。我们目前正致力于为EVM添加功能和限制，如这将更好的支持即时编译和在现存实现下最小改动的解释器的实现，而无需在现有实现中进行太多必需的更改。另一种可能性是完全换掉EVM并使用类似eWASM的东西。&lt;/p&gt;&lt;p&gt;第二个选项可以通过强制所有以太坊客户端执行现某个确定的配对函数和确定的椭圆曲线上的乘法作为所谓的预编译合约来实现。这样做的好处是可能更容易和更快地实现，缺点是我们固定在确定的配对函数和确定的椭圆曲线上。以太坊的任何新客户都必须重新实施这些预编译合约。此外，如果有什么新的进展并且有人找到更好的zkSNARK，更好的配对函数或更好的椭圆曲线，或者如果在椭圆曲线，配对函数或zkSNARK中发现缺陷，我们将不得不添加新的预编译合约。&lt;/p&gt;&lt;p&gt;全文结束。。。。。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;===============================================================&lt;/p&gt;&lt;p&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;(二维码自动识别)&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-02-08-56338053</guid>
<pubDate>Fri, 08 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>深入浅出zkSNARKs-part1</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-02-01-56118702.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56118702&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;zkSNARKs的成功性令人印象深刻，因为你可以在不执行，甚至不知道执行的具体内容是什么的情况下确定某个计算的结果是否正确 -- 而你唯一知道的信息就是它正确的完成了。不幸的是，zkSNARKs的大多数解释在某些时候都只是表面的，而且他们往往会留下一些“神奇的”东西，这表明只有最聪明的人才能理解他们的工作方式和原因。现实情况是，zkSNARKs可以简化为四种简单的技术，这篇博文旨在解释它们。任何能够理解RSA密码系统如何工作的人，也应该对当前使用的zkSNARKs有很好的理解。让我们拭目以待！&lt;/p&gt;&lt;p&gt;作为一个非常简短的总结，当前使用的zkSNARKs有4个主要成分（不用担心，我们将在后面的章节中解释所有术语）：&lt;/p&gt;&lt;p&gt;&lt;b&gt;A）编码为多项式问题&lt;/b&gt;&lt;/p&gt;&lt;p&gt;将需要检查的程序被编译成多项式的二次方程：t（x）h（x）= w（x）v（x），其中当且仅当程序被正确计算时，等式成立。证明者想要说服验证者这个等式成立。&lt;/p&gt;&lt;p&gt;&lt;b&gt;B）简单随机抽样&lt;/b&gt;&lt;/p&gt;&lt;p&gt;验证者会选择一个私密评估点 s 来将多项式乘法和验证多项式函数相等的问题简化成简单乘法和验证等式 t(s)h(s) = w(s)v(s) 的问题。&lt;/p&gt;&lt;p&gt;这极大地减少了证明大小和验证时间。&lt;/p&gt;&lt;p&gt;&lt;b&gt;C）同态编码/加密&lt;/b&gt;&lt;/p&gt;&lt;p&gt;使用具有一些同态属性的编码/加密函数E（但不是完全同态的，这是不可行的）。这允许证明者在不知道s的情况下计算E（t（s）），E（h（s）），E（w（s）），E（v（s）），她只知道E（s）和一些其他有用的加密值。&lt;/p&gt;&lt;p&gt;&lt;b&gt;D）零知识&lt;/b&gt;&lt;/p&gt;&lt;p&gt;证明者通过乘以一个数字来置换值E（t（s）），E（h（s）），E（w（s）），E（v（s）），以便验证者再不知道实际的编码值仍然可以检查它们的正确性结构。&lt;/p&gt;&lt;p&gt;有一个粗糙的想法是这样的，因为校验 t(s)h(s) = w(s)v(s) 和校验 t(s)h(s) k = w(s)v(s) k（对于一个不等于 0 的私密的随机数 k 来说）几乎是完全一样的，而不同的地方在于如果你只接收到了 (t(s)h(s) k) 和 (w(s)v(s) k) 那么从中获取到 t(s)h(s) 或者 w(s)v(s) 的值就几乎是不可能了。&lt;/p&gt;&lt;p&gt;这只是表面的部分，这样你就可以理解zkSNARKs的本质，现在我们深入了解细节。&lt;/p&gt;&lt;p&gt;&lt;b&gt;RSA和零知识证明&lt;/b&gt;&lt;/p&gt;&lt;p&gt;让我们首先快速回想一下RSA如何工作，省略一些琐碎的细节。请记住，我们经常使用一个数字对一些数字取模，而并不是所有的整数。这里的等式“a +b≡c（mod n）”，等价于“（a + b）％n = c％n”。注意，“（mod n）”部分不适用于右侧“c”，但实际上适用于“≡”和所有其他“≡”上面。这使得它很难阅读，但我保证会谨慎使用它。现在回到RSA：&lt;/p&gt;&lt;p&gt;证明者提出以下数字：&lt;/p&gt;&lt;p&gt;p，q：两个随机的私密素数n := p qd：1 &amp;amp;lt; d &amp;amp;lt; n – 1 的随机数e：d e ≡ 1 (mod (p-1)(q-1))&lt;/p&gt;&lt;p&gt;公钥是 (e, n)，私钥是 d。素数 p 和 q 可以丢弃，但是不能暴露。&lt;/p&gt;&lt;p&gt;消息m通过下面公式加密&lt;/p&gt;&lt;p&gt;E（m）：= m e％n&lt;/p&gt;&lt;p&gt;并且c = E（m）通过解密&lt;/p&gt;&lt;p&gt;D（c）：= c d％n。&lt;/p&gt;&lt;p&gt;因为cd ≡（me％N）d ≡med（mod n），m的指数就是对（P-1）（Q-1）这组数取模，我们得到med ≡m（mod n）。此外，RSA的安全性依赖于这样的假设：n不能轻易被因式分解，因此d不能从e计算（如果我们知道p和q，这将是容易的）。&lt;/p&gt;&lt;p&gt;RSA 的一个牛逼的特性是同态乘法。通常来讲，如果你可以交换两个操作的顺序而不影响计算结果，那么我们就说这两个操作是同态的。在同态加密中，这就是你可以对加密数据进行计算的一个属性。完全同态加密是存在的，但是现在还没有应用到实际中，它能够对任何基于加密数据的程序完成计算。在这里对于 RSA 来说，我们只讨论组乘法。更正式地：E（x）E（y）≡xe y e ≡（xy）e ≡E（xy）（mod n），文字描述就是：两个加密消息的的乘积等于两个信息乘机的加密。&lt;/p&gt;&lt;p&gt;这种同态性已经允许某种零知识的乘法证明：证明者知道一些秘密数字x和y并计算它们的乘积，但只发送加密版本a = E（x），b = E（y）和c = E（xy）到验证者。验证者现在检查（ab）％n≡c％n 是否成立，此时验证者只知道加密版的乘积以及乘积是否被正确的计算，但是她不知道两个乘数和真正的乘积。如果你用加法来替代乘法，那就是一个主要操作为添加余额的区块链方向了。&lt;/p&gt;&lt;p&gt;&lt;b&gt;交互验证&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们已经对零知识这个概念有了一定的了解了，让我们现在关注zkSNARKs的另一个主要特征，即简洁性。正如您稍后将看到的，简洁性是zkSNARKs中更为显着的部分，因为由于某种编码允许有限形式的同态编码，零知识部分将“免费”给出。&lt;/p&gt;&lt;p&gt;SNARKs 是 succinct non-interactive arguments of knowledge 的缩写。一般都通用设置之所以叫做交互式协议，是因为这里有一个证明者和一个验证者，证明者想要通过交换信息的方式让验证者相信一个表达式（比如 f(x) = y）。一般来说，没有证明者可以让验证者相信一个错误的表达式（可靠性），而且对于证明者来说一定存在一个确定的策略让验证者相信任何真实的表达式（完整性）。SNARKs 各个部分的的意义如下：&lt;/p&gt;&lt;p&gt;简洁：与实际计算的长度相比，消息的大小很小&lt;/p&gt;&lt;p&gt;非交互式：没有或者只有很少很少的交互。对于 zkSNARKs 来说就是在证明者向验证者发送一条信息之后的过程。此外，SNARKs 还常常拥有叫做『公共验证者』的属性，它的意思是在没有再次交互的情况下任何人都可以验证，这对于区块链来说是至关重要的。&lt;/p&gt;&lt;p&gt;参数：验证者仅受到计算限制的证明者的保护。具有足够计算能力的证明器可以创建关于错误语句的证明/参数（注意，如果具有足够的计算能力，则可以破坏任何公钥加密）。这也称为“计算可靠性”，而不是“完美可靠性”。&lt;/p&gt;&lt;p&gt;知识：对于证明者来说在不知道一个叫做证据（witness）（比如一个哈希函数的原象或者一个确定 Merkle-tree 节点的路径）的情况下，构造出一组参数和证明是不可能的。&lt;/p&gt;&lt;p&gt;如果你添加了零知识的前缀，那么在交互中你就需要一个性质，即验证者除了知道表达式的正确与否之外其他一无所知。尤其是验证者不能知道 见证字符串 稍后我们会详细解释这是什么。&lt;/p&gt;&lt;p&gt;举个例子，让我们考虑下面的交易验证计算：当且仅当 σ 1 和σ2 是账户默克树s（pre 和 post 状态）的根哈希，s 和 r 是发送者和接收者账户， PS和PR 是默克树 的证明（当 v 从 s 的余额中转移到 r 的余额的过程中，能够证明在 中 s 的余额至少是 v 并且他们的哈希结果是 而不是 ），这些条件都成立时，f（σ1，σ2，s ,r,v,ps,pr,v) 成立。&lt;/p&gt;&lt;p&gt;如果所有输入都已知，则验证f的计算相对容易。正因为如此，我们可以将F转换成一个zkSNARK，其中只有σ 1和σ 2是公开的和（s ,r,v,ps,pr,v）是witmess-string。零知识属性现在会使得验证者能够检查证明方是否知道一些见证，它可以将根哈希从σ 1转换至σ 2，而这样的转换又不影响正常的交易，但是验证者却不知道到底是谁发送了多少钱给谁。&lt;/p&gt;&lt;p&gt;关于零知识的部分相对正式的定义（仍然缺乏一些细节）就是：存在一个模拟器，它可以生成一些设置字段，但是却不知道私密的 证人，它还可以和验证者交互 -- 但是外部的观察者却不能分辨出哪个与验证者进行的交互，哪个是与证明者进行的交互。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;===============================================================&lt;/p&gt;&lt;p&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;(二维码自动识别)&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-02-01-56118702</guid>
<pubDate>Fri, 01 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>什么是加密，它是如何工作的？</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-01-28-55922612.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55922612&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3a99e092ff74f0b75688cc62b8f89cd6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1076&quot; data-rawheight=&quot;418&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1076&quot; data-original=&quot;https://pic3.zhimg.com/v2-3a99e092ff74f0b75688cc62b8f89cd6_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3a99e092ff74f0b75688cc62b8f89cd6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1076&quot; data-rawheight=&quot;418&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1076&quot; data-original=&quot;https://pic3.zhimg.com/v2-3a99e092ff74f0b75688cc62b8f89cd6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-3a99e092ff74f0b75688cc62b8f89cd6_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;加密历史悠久，可以追溯到古希腊人和罗马人通过替换只能用密钥破译的字母发送秘密信息。加入我们的快速历史课程，了解有关加密如何工作的更多信息。 &lt;/p&gt;&lt;p&gt;在今天的HTG解释版中，我们将向您简要介绍加密的历史，它是如何工作的，以及一些不同加密类型的示例—请确保您还查看了上一版本，在该版本中我们解释了为什么那么多极客讨厌Internet Explorer。&lt;/p&gt;&lt;p&gt;&lt;b&gt;早期的加密&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fc75dc2bacb30c13bd41ddfc4a97cb0b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;490&quot; data-rawheight=&quot;328&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;490&quot; data-original=&quot;https://pic4.zhimg.com/v2-fc75dc2bacb30c13bd41ddfc4a97cb0b_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fc75dc2bacb30c13bd41ddfc4a97cb0b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;490&quot; data-rawheight=&quot;328&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;490&quot; data-original=&quot;https://pic4.zhimg.com/v2-fc75dc2bacb30c13bd41ddfc4a97cb0b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-fc75dc2bacb30c13bd41ddfc4a97cb0b_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;古希腊人使用一种名为Scytale的工具来帮助使用换位密码更快地加密他们的信息——他们只需将羊皮纸条包裹在圆柱体周围，写出信息，然后当纸条处于解开的时候就没有含义了。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-dee0c7c4de49cc1a78d4cb692f5b1fcd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;248&quot; data-rawheight=&quot;160&quot; class=&quot;content_image&quot; width=&quot;248&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-dee0c7c4de49cc1a78d4cb692f5b1fcd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;248&quot; data-rawheight=&quot;160&quot; class=&quot;content_image lazy&quot; width=&quot;248&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-dee0c7c4de49cc1a78d4cb692f5b1fcd_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;当然，这种加密方法可能很容易被破解，但它实际上是在现实世界中使用的第一个加密示例之一。 &lt;/p&gt;&lt;p&gt;Julius Caesar在他的时代使用了一种类似的方法，将字母表中的每个字母向右或向左移动了许多位置 —— 一种称为Caesar密码的加密技术。例如，使用下面的示例密码，您将“GEEK”写为“JHHN”。 &lt;/p&gt;&lt;p&gt;Plain: ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/p&gt;&lt;p&gt;Cipher: DEFGHIJKLMNOPQRSTUVWXYZABC&lt;/p&gt;&lt;p&gt;由于只有消息的预期接收者知道密码，因此另一个人难以解码消息，这看起来像是胡言乱语，但拥有该密码的人可以很容易地解码和读取它。 &lt;/p&gt;&lt;p&gt;其他简单的加密密码，如Polybius square，使用多字母密码列出每个字母的顶部和侧面的相应数字位置，以确定字母的位置。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3c0fe6d6f05b3e6ff9646f09b497e92e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;352&quot; data-rawheight=&quot;246&quot; class=&quot;content_image&quot; width=&quot;352&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3c0fe6d6f05b3e6ff9646f09b497e92e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;352&quot; data-rawheight=&quot;246&quot; class=&quot;content_image lazy&quot; width=&quot;352&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-3c0fe6d6f05b3e6ff9646f09b497e92e_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;使用如上所示的表格，您可以将字母“G”写为“23”，或将“GEEK”写为“23 31 31 43”。 &lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-76d7b5f43ebb014fe3b5fa02730ef02f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;418&quot; data-rawheight=&quot;218&quot; class=&quot;content_image&quot; width=&quot;418&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-76d7b5f43ebb014fe3b5fa02730ef02f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;418&quot; data-rawheight=&quot;218&quot; class=&quot;content_image lazy&quot; width=&quot;418&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-76d7b5f43ebb014fe3b5fa02730ef02f_b.jpg&quot;&gt;&lt;figcaption&gt;恩尼格玛密码机&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;第二次世界大战期间，德国人使用恩尼格玛密码机来回传送加密的信息，波兰人花了好几年时间才破解了这些信息，并向盟军提供了解决方案，这对他们的胜利起到了关键作用。&lt;/p&gt;&lt;h2&gt;现代加密的历史&lt;/h2&gt;&lt;p&gt;让我们面对现实吧:现代加密技术可能是一个极其无聊的主题，所以我们不只是用文字来解释它们，而是根据杰夫·莫泽(Jeff Moser)的简笔画AES指南，创作了一部讲述加密历史的连环漫画。&lt;i&gt;注意:很明显，我们不能在漫画中传达加密历史的一切。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;在那些日子里，人们没有一种好的加密方法来保护他们的电子通信。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-825e1d2c1209e869bb9ab7cae3f2958b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;774&quot; data-rawheight=&quot;432&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;774&quot; data-original=&quot;https://pic4.zhimg.com/v2-825e1d2c1209e869bb9ab7cae3f2958b_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-825e1d2c1209e869bb9ab7cae3f2958b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;774&quot; data-rawheight=&quot;432&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;774&quot; data-original=&quot;https://pic4.zhimg.com/v2-825e1d2c1209e869bb9ab7cae3f2958b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-825e1d2c1209e869bb9ab7cae3f2958b_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;Once upon a time there was no good way for outside secret agencies to judge good crypto.&lt;/p&gt;&lt;p&gt;从前，对于外部的秘密机构来说，没有什么好的方法来评判什么是好的加密方式。&lt;/p&gt;&lt;p&gt;EBG13 is good. &lt;/p&gt;&lt;p&gt;EBG13是好的。&lt;/p&gt;&lt;p&gt;Double ROT13 is better. &lt;/p&gt;&lt;p&gt;Double ROT13更好。&lt;/p&gt;&lt;p&gt;A decree went throughout the land to find a good secure algorithm.&lt;/p&gt;&lt;p&gt;为了找到一种安全的算法，一项法令传遍了全国。&lt;/p&gt;&lt;p&gt;We need a good cipher!&lt;/p&gt;&lt;p&gt;我们需要一个好的加密方式!&lt;/p&gt;&lt;p&gt;路西法(Lucifer)是由霍斯特•费斯特尔(Horst Feistel)及其IBM同事开发的几种最早的民用分组密码的名字。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-34139fe02b80ef7896213bb68b2ddd57_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;728&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;728&quot; data-original=&quot;https://pic4.zhimg.com/v2-34139fe02b80ef7896213bb68b2ddd57_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-34139fe02b80ef7896213bb68b2ddd57_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;728&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;728&quot; data-original=&quot;https://pic4.zhimg.com/v2-34139fe02b80ef7896213bb68b2ddd57_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-34139fe02b80ef7896213bb68b2ddd57_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;One worthy competitor named Lucifer came forward.&lt;/p&gt;&lt;p&gt;一个名叫路西法(Lucifer)的优秀竞争者走上前来。&lt;/p&gt;&lt;p&gt;数据加密标准（DES）是一种分组密码（一种共享秘密加密形式），由美国国家标准局于1976年选择作为美国的官方联邦信息处理标准（FIPS），随后广泛被国际使用。 &lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b8fb306a846be1ce3916437df14d5588_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;656&quot; data-rawheight=&quot;364&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;656&quot; data-original=&quot;https://pic1.zhimg.com/v2-b8fb306a846be1ce3916437df14d5588_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b8fb306a846be1ce3916437df14d5588_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;656&quot; data-rawheight=&quot;364&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;656&quot; data-original=&quot;https://pic1.zhimg.com/v2-b8fb306a846be1ce3916437df14d5588_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-b8fb306a846be1ce3916437df14d5588_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;After being modified by NSA lucifer was anointed as the data encryption standard (DES).&lt;/p&gt;&lt;p&gt;经过NSA的修改，路西法(Lucifer)被指定为数据加密标准(DES)。&lt;/p&gt;&lt;p&gt;DES was widely througout the land for 20 years.Academics studied it intently .For the first time there was something specific to look at.The modern fild of cryptography was born.&lt;/p&gt;&lt;p&gt;DES在这片土地上流传了20年。学者们专注地研究它，第一次有了具体的研究对象。现代密码学诞生了。&lt;/p&gt;&lt;p&gt;...to the best of out knowledge,DES is free from any statiscal or mathematical weakness.&lt;/p&gt;&lt;p&gt;…据我们所知，DES没有任何统计或数学上的弱点。&lt;/p&gt;&lt;p&gt;对安全性的担忧以及DES在软件中相对较慢的运行促使研究人员提出了各种替代分组密码设计，这些设计开始出现在20世纪80年代末和90年代初期：例如RC5，Blowfish，IDEA，NewDES，SAFER，CAST5和FEAL.&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8c8fab8380a7d4b5c3535e9b24499773_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;706&quot; data-rawheight=&quot;398&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;706&quot; data-original=&quot;https://pic4.zhimg.com/v2-8c8fab8380a7d4b5c3535e9b24499773_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8c8fab8380a7d4b5c3535e9b24499773_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;706&quot; data-rawheight=&quot;398&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;706&quot; data-original=&quot;https://pic4.zhimg.com/v2-8c8fab8380a7d4b5c3535e9b24499773_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8c8fab8380a7d4b5c3535e9b24499773_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;Over the years many attackers challenged DES.DES was defeated in several battles.&lt;/p&gt;&lt;p&gt;多年以来，许多攻击者向DES发起挑战。DES在多场战役中被击败。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0558e651c9695bc81b99f77ea94c13b5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;766&quot; data-rawheight=&quot;424&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;766&quot; data-original=&quot;https://pic2.zhimg.com/v2-0558e651c9695bc81b99f77ea94c13b5_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0558e651c9695bc81b99f77ea94c13b5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;766&quot; data-rawheight=&quot;424&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;766&quot; data-original=&quot;https://pic2.zhimg.com/v2-0558e651c9695bc81b99f77ea94c13b5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-0558e651c9695bc81b99f77ea94c13b5_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;The rallied the crypt scientists to develop something better.&lt;/p&gt;&lt;p&gt;他们召集了密码加密专家来开发更好的东西。&lt;/p&gt;&lt;p&gt;We need some thing better &amp;amp; faster than DES.&lt;/p&gt;&lt;p&gt;我们需要比DES更好更快的东西。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-08af7786cd3629309a99ae4ba6cea79d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;660&quot; data-rawheight=&quot;488&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;660&quot; data-original=&quot;https://pic2.zhimg.com/v2-08af7786cd3629309a99ae4ba6cea79d_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-08af7786cd3629309a99ae4ba6cea79d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;660&quot; data-rawheight=&quot;488&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;660&quot; data-original=&quot;https://pic2.zhimg.com/v2-08af7786cd3629309a99ae4ba6cea79d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-08af7786cd3629309a99ae4ba6cea79d_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;Vincent Rijmen and Joan Daemen were among the crypto scientists who combined their last name and gave birth to a new encryption algorithm Rijndael (pronounced Rhine Dahl)&lt;/p&gt;&lt;p&gt;文森特·里吉曼和琼·达曼是密码科学家，他们将自己的姓氏组合在一起，产生了一种新的加密算法Rijndael(读作Rhine Dahl)&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-63c5adfe8c3c62763bb54d7212ae6420_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;642&quot; data-rawheight=&quot;478&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;642&quot; data-original=&quot;https://pic1.zhimg.com/v2-63c5adfe8c3c62763bb54d7212ae6420_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-63c5adfe8c3c62763bb54d7212ae6420_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;642&quot; data-rawheight=&quot;478&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;642&quot; data-original=&quot;https://pic1.zhimg.com/v2-63c5adfe8c3c62763bb54d7212ae6420_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-63c5adfe8c3c62763bb54d7212ae6420_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;We present you Rijndael!&lt;/p&gt;&lt;p&gt;我们赠送Rijndael给你！&lt;/p&gt;&lt;p&gt;Rijndael加密算法被美国政府采用为标准对称密钥加密或高级加密标准(Advanced encryption standard, AES)。AES于2001年11月26日被美国国家标准与技术研究所(NIST)宣布为美国FIPS PUB 197 (FIPS 197)，在此之前的5年的标准化过程中，在Rijndael被选为最合适的加密算法之前，有15个相互竞争的设计被提交和评估。&lt;/p&gt;&lt;h2&gt;加密算法性能&lt;/h2&gt;&lt;p&gt;现有许多加密算法，它们都适用于不同的目的——识别和区分一种加密算法和另一种加密算法的两个主要特征是它保护受保护数据不受攻击的能力，以及这样做的速度和效率。&lt;/p&gt;&lt;p&gt;作为不同类型加密之间速度差异的一个很好的例子，您可以使用TrueCrypt的卷创建向导中内置的基准测试实用程序——如您所见，AES是迄今为止最快的强加密类型。 &lt;/p&gt;&lt;p&gt;有更慢和更快的加密方法，它们都适用于不同的目的。如果您只是经常尝试解密一小块数据，您可以负担得起使用最强大的加密，甚至可以使用不同类型的加密对其进行两次加密。如果你需要速度，你可能想要使用AES。 &lt;/p&gt;&lt;p&gt;有关对不同类型加密进行基准测试的更多信息，请查看华盛顿圣路易斯大学的报告，在那里他们对不同的程序进行了大量测试，并在一篇非常令人讨厌的文章中对其进行了解释。 &lt;/p&gt;&lt;h2&gt;现代加密的类型&lt;/h2&gt;&lt;p&gt;我们之前讨论过的所有设想的加密算法主要用于两种不同类型的加密：&lt;/p&gt;&lt;p&gt;对称密钥算法使用相关或相同的加密密钥进行加密和解密。&lt;/p&gt;&lt;p&gt;非对称密钥算法使用不同的密钥进行加密和解密——这通常称为公钥加密。&lt;/p&gt;&lt;h2&gt;对称密钥加密&lt;/h2&gt;&lt;p&gt;为了解释这个概念，我们将使用维基百科中描述的邮政服务的比喻来理解对称密钥算法的工作原理。&lt;/p&gt;&lt;p&gt;Alice把她的秘密信息放在一个盒子里，然后用一把钥匙和锁把秘密信息锁在盒子里。然后，她通过普通邮件将盒子投递给Bob。当Bob接收到该盒子时，他使用相同的Alice的密钥副本（他之前以某种方式获得，可能通过面对面会议）打开该盒子，并阅读该消息。然后Bob可以使用相同的锁发送他的秘密回复。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4626903128732614153a0dec3f600e2f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;242&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;830&quot; data-original=&quot;https://pic4.zhimg.com/v2-4626903128732614153a0dec3f600e2f_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4626903128732614153a0dec3f600e2f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;242&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;830&quot; data-original=&quot;https://pic4.zhimg.com/v2-4626903128732614153a0dec3f600e2f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4626903128732614153a0dec3f600e2f_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;对称密钥算法可分为流密码和分组密码——流密码一次加密一个比特的消息，而分组密码占用多个比特，通常一次以64比特的块为单位，并将它们加密为一个单位。您可以选择许多不同的算法——更受欢迎和备受推崇的对称算法包括Twofish，Serpent，AES（Rijndael），Blowfish，CAST5，RC4，TDES和IDEA。&lt;/p&gt;&lt;h2&gt;非对称加密&lt;/h2&gt;&lt;p&gt;在非对称密钥系统中，Bob和Alice具有单独的锁，而不是具有来自对称加密算法例子中的多个密钥对应的单个锁。注意：这当然是一个非常简单的例子，说明它是如何工作的，实际上要复杂得多，但你会得到一个大致的想法。&lt;/p&gt;&lt;p&gt;首先，Alice要求Bob通过普通邮件向她发送打开的锁，并将钥匙留给Bob自己。当Alice收到它时，她使用它来锁上包含她的消息的盒子，并将锁好的盒子发送给Bob。然后，Bob可以用钥匙解锁盒子并阅读Alice发来的消息。要回复的时候，Bob必须用同样的方式，得到Alice打开着的挂锁来锁上盒子，然后再发回给她。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8c0b301800db1b528a7d9dda6ac8491c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;368&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;830&quot; data-original=&quot;https://pic1.zhimg.com/v2-8c0b301800db1b528a7d9dda6ac8491c_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8c0b301800db1b528a7d9dda6ac8491c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;368&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;830&quot; data-original=&quot;https://pic1.zhimg.com/v2-8c0b301800db1b528a7d9dda6ac8491c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-8c0b301800db1b528a7d9dda6ac8491c_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;非对称密钥系统的关键优势是Bob和Alice永远不需要将密钥的副本发送给对方。这可以防止第三方（在该示例中，可能是一个腐败的邮政工作者）在传输过程中复制密钥，从而让第三方监视Alice和Bob之间发送的所有未来的消息。此外，如果Bob粗心大意并且允许其他人复制他的密钥，那么Alice给Bob的消息会受到损害，但Alice给其他人的消息将保密，因为其他人会为Alice提供不同的锁来加密消息。&lt;/p&gt;&lt;p&gt;非对称加密使用不同的密钥进行加密和解密。邮件收件人创建私钥和公钥。公钥分发给消息发送者，他们使用公钥来加密消息。收件人使用其私钥来解密用收件人的公钥加密过的任何加密邮件。 &lt;/p&gt;&lt;p&gt;与对称加密相比，以这种方式进行加密有一个主要好处。我们永远不需要在不安全的渠道上发送任何秘密（例如我们的加密密钥或密码）。你的公钥传到了世界——这不是秘密，也不是必须的。您的私钥可以在您生成它的个人计算机上保持舒适——它不需要通过电子邮件发送到任何地方，也不会被攻击者所发现。&lt;/p&gt;&lt;h2&gt;加密如何保护网络上的通信 &lt;/h2&gt;&lt;p&gt;多年来，SSL（安全套接字层）协议一直在使用Web浏览器和Web服务器之间的加密来保护Web事务，从而保护您免受可能在中间窥探网络的任何人的攻击。&lt;/p&gt;&lt;p&gt;SSL本身在概念上非常简单。从浏览器请求安全页面开始（通常是https：//） &lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ff107307fa2523182f2f98b1414bc054_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;278&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;830&quot; data-original=&quot;https://pic1.zhimg.com/v2-ff107307fa2523182f2f98b1414bc054_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ff107307fa2523182f2f98b1414bc054_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;278&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;830&quot; data-original=&quot;https://pic1.zhimg.com/v2-ff107307fa2523182f2f98b1414bc054_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ff107307fa2523182f2f98b1414bc054_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;Web服务器使用它的证书来发送其公钥。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-37ff6d8c3501854a675543a9cea3b3f6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;274&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;830&quot; data-original=&quot;https://pic3.zhimg.com/v2-37ff6d8c3501854a675543a9cea3b3f6_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-37ff6d8c3501854a675543a9cea3b3f6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;274&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;830&quot; data-original=&quot;https://pic3.zhimg.com/v2-37ff6d8c3501854a675543a9cea3b3f6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-37ff6d8c3501854a675543a9cea3b3f6_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;浏览器检查证书是否由受信任方（通常是受信任的根CA）颁发，证书是否仍然有效以及证书是否与所联系的站点相关。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8a2292ef5692a6008fe443b0dfbadbdd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;698&quot; data-rawheight=&quot;508&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;698&quot; data-original=&quot;https://pic2.zhimg.com/v2-8a2292ef5692a6008fe443b0dfbadbdd_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8a2292ef5692a6008fe443b0dfbadbdd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;698&quot; data-rawheight=&quot;508&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;698&quot; data-original=&quot;https://pic2.zhimg.com/v2-8a2292ef5692a6008fe443b0dfbadbdd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-8a2292ef5692a6008fe443b0dfbadbdd_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;然后，浏览器使用公钥来加密随机对称加密密钥，并将其发送到具有所需加密URL以及其他加密http数据的服务器。 &lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7b65dc755e8e1b355f0d8e1dbf33994f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;276&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;830&quot; data-original=&quot;https://pic4.zhimg.com/v2-7b65dc755e8e1b355f0d8e1dbf33994f_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7b65dc755e8e1b355f0d8e1dbf33994f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;276&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;830&quot; data-original=&quot;https://pic4.zhimg.com/v2-7b65dc755e8e1b355f0d8e1dbf33994f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-7b65dc755e8e1b355f0d8e1dbf33994f_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;Web服务器使用其私钥解密对称加密密钥，并使用浏览器的对称密钥来解密其URL和http数据。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-89b5218dcc68e65e0c4b4ef9b326d299_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;312&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;830&quot; data-original=&quot;https://pic2.zhimg.com/v2-89b5218dcc68e65e0c4b4ef9b326d299_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-89b5218dcc68e65e0c4b4ef9b326d299_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;312&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;830&quot; data-original=&quot;https://pic2.zhimg.com/v2-89b5218dcc68e65e0c4b4ef9b326d299_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-89b5218dcc68e65e0c4b4ef9b326d299_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;Web服务器发送回请求的并且使用浏览器的对称密钥加密过的html文档和http数据。浏览器使用对称密钥解密http数据和html文档并显示信息。 &lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2319f70874165acf71df957292f6a485_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;276&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;830&quot; data-original=&quot;https://pic2.zhimg.com/v2-2319f70874165acf71df957292f6a485_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2319f70874165acf71df957292f6a485_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;276&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;830&quot; data-original=&quot;https://pic2.zhimg.com/v2-2319f70874165acf71df957292f6a485_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-2319f70874165acf71df957292f6a485_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;现在你可以安全地在eBay上购买你不是真正需要的东西了。&lt;/p&gt;&lt;h2&gt;你学到什么东西了吗？&lt;/h2&gt;&lt;p&gt;你做到这一点，我们正处于我们理解加密的漫长旅程的最后阶段，以及它的工作方式——从希腊和罗马人加密的早期开始，Lucifer的崛起，最后SSL如何使用非对称和对称加密来帮助您在eBay上购买蓬松的粉红色兔子。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;===============================================================&lt;br&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;(二维码自动识别)&lt;/b&gt;&lt;br&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;br&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-01-28-55922612</guid>
<pubDate>Mon, 28 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>从美国国家安全局到硅谷，新型加密技术正走向商业化</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-01-26-55765234.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55765234&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正如我们所知，加密技术取得重大进展:IBM、英特尔(Intel)、微软(Microsoft)和一系列初创公司的数学团队正在推进一项研究，这项研究可能会让科技公司在数据使用过程中对其进行加密。&lt;/p&gt;&lt;p&gt;这种类型的安全称为同态加密，它标志着当前加密形式的重大升级，当前加密形式是在存储数据或在连接中移动数据时保护数据。同态加密将更好地保护使用互联网搜索和访问存储的信用账号的用户，以及作为信息共享程序一部分共享专有数据的企业。 &lt;/p&gt;&lt;p&gt;该协议部分是由美国国家安全局(National Security Agency)的研究人员开发的，他们希望找到一种在不牺牲安全的情况下快速搜索或传输机密材料的方法。自那以后，它就成了有安全意识的投资者关注的焦点。 &lt;/p&gt;&lt;p&gt;市场研究公司高德纳(Gartner)的分析师马克霍瓦特(Mark Horvath)说，“我们认为，破解同态加密的人将锁定下一代加密技术。”“有很多人不太明白这意味着什么，或者认为这只是营销，不可能奏效。”但这些都是非常前沿的东西，但我们都知道我们正在接近。 &lt;/p&gt;&lt;p&gt;霍瓦特说，同态加密很快将帮助大公司在需要在多方计算环境中共享信息时保护它们的信息。 &lt;/p&gt;&lt;p&gt;他举例说，房地产开发商通过与其他开发商的价格进行比较来寻找最有效的钢材价格。这些专有费率是匿名的、加密的，并提交给第三方，由第三方共享信息，供更广泛的行业使用。&lt;/p&gt;&lt;p&gt;霍瓦特说:“同态加密技术允许公司从一开始就以加密的方式共享信息，从而有助于这一过程。”“它发生得更快，人们发现你为钢铁支付了多少钱的风险也更小。” &lt;/p&gt;&lt;p&gt;去年12月，微软发布了自己的简易加密算法库(Simple encryption algorithm Library, SEAL)，这是微软的密码学家开发的一个开源库。该公司表示，此举旨在保护个人数据的隐私，因为云计算使得访问更加方便。&lt;/p&gt;&lt;p&gt;微软在一篇博客文章中表示:“传统的加密方案无法对加密数据进行任何计算。”“因此，我们要么把加密的数据存储在云端，下载下来执行任何有用的操作，这在逻辑上可能不太方便;要么把解密密钥提供给服务提供商，这将危及我们的隐私。”同态加密允许对加密数据进行处理，使我们能够使用这些服务而不暴露我们的私人信息。&lt;/p&gt;&lt;p&gt;英特尔宣布它正在使用SEAL库。IBM去年表示也在开发自己的同态加密技术。根据Register的说法，IBM的大部分项目都致力于提高处理经过同态加密的数据的速度。 &lt;/p&gt;&lt;p&gt;霍瓦特称，各公司仍在努力了解细节，但同态加密可能在五年内被广泛采用。他说，其他用例可能包括更有效地传输个人的医疗记录，而无需经过加密和解密过程。 &lt;/p&gt;&lt;p&gt;这类加密研究不同于量子计算，量子计算在理论上可以帮助机器在未来比现在的计算机更有效地工作。研究人员认为量子计算可以迅速克服大多数现代密码体制。然而，霍瓦特说，早期实验表明，完美的同态加密方案可以抵抗量子解密。&lt;/p&gt;&lt;p&gt;首先，研究人员需要正确计算。霍瓦特说，同态加密在技术上是可行的，但是这个过程涉及复杂的乘法和加法过程，因此大多数解决方案都是不完整的。 &lt;/p&gt;&lt;p&gt;投资者在这一挑战中看到了机会。到目前为止，加密使用中的数据一直是许多技术人员的白日梦。现在，随着企业巨头对这项研究的投资，风险投资家们开始注意到这一点。&lt;/p&gt;&lt;p&gt;阿克曼(Bob Ackerman)是早期风险投资公司Allegis Cyber的创始人兼董事总经理，也是Data Tribe的董事会成员。他说“创新是主动思考如何构建设计安全的架构……我认为，以数据为中心的安全是我们正在摆脱被动方式的一个领域。”&lt;/p&gt;&lt;p&gt;Enveil是一家因承诺提供可伸缩同态加密而受到关注的公司。该公司由美国国家安全局(NSA)前研究员埃里森·安妮·威廉姆斯(Ellison Anne Williams)创立，已从In-Q-Tel (CIA的风险投资部门)、Bloomberg Beta、Thomson Reuters、Data Tribe和USAA等机构获得总计400万美元的资金。 &lt;/p&gt;&lt;p&gt;该公司的目标是创造新的收入机会来保护敏感信息。它正在与医疗保健和金融行业的公司合作。后者的一个用例是，帮助交易员秘密地找到有关可能的并购目标的信息，而不暴露他们的兴趣，也不会在交易中失去杠杆。&lt;/p&gt;&lt;p&gt;威廉姆斯说:“他们可以在自己的墙内对搜索交易进行加密，然后将其加密发送到数据聚合器，然后将信息返回给他们。”他补充说，自Enveil于2016年推出以来，人们对同态加密的兴趣迅速增长。&lt;/p&gt;&lt;p&gt;“如果你从未听说过它，听起来就像是来自月球，如果你听过，听起来就不可能了。”我们已经看到它变得很流行，并开始出现在投资报告和分析师报告中。…然后我们开始有这样的反应：“我们能投资于你吗？”&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;===============================================================&lt;br&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;(二维码自动识别)&lt;/b&gt;&lt;br&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;br&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-01-26-55765234</guid>
<pubDate>Sat, 26 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>区块链中的非对称密码学</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-01-25-55667170.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55667170&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;区块链技术使用非对称密钥加密（也称为公钥加密）。非对称密钥密码术使用一对密钥：公钥和私钥，它们在数学上彼此相关。在不降低进程安全性的情况下公开公钥，但如果数据要保留其加密保护，则私钥必须保密。即使在两个密钥之间存在关系，也不能基于公钥的知识有效地确定私钥。可以使用私钥加密，然后使用公钥解密。或者，可以使用公钥加密，然后使用私钥解密。&lt;/p&gt;&lt;p&gt;非对称密钥加密通过提供一种机制来验证交易的完整性和真实性，同时允许交易保持公开，从而在彼此不了解或彼此不信任的用户之间实现信任关系。为此，交易是“数字签名”。这意味着私钥用于加密事务，以便具有公钥的任何人都可以解密它。由于公钥是免费的，因此使用私钥加密事务证明了事务的签名者可以访问私钥。或者，可以使用用户的公钥对数据进行加密，以便只有具有私钥访问权限的用户才能对其进行解密。缺点是非对称密钥加密通常计算缓慢。&lt;/p&gt;&lt;p&gt;这与对称密钥加密形成对比，其中单个密钥用于加密和解密。使用对称密钥加密，用户必须已经建立了彼此建立的信任关系以交换预共享密钥。在对称系统中，可以使用预共享密钥解密的任何加密数据确认它是由具有对预共享密钥的访问权限的另一用户发送的; 没有访问预共享密钥的用户将无法查看解密数据。与非对称密钥密码术相比，对称密钥密码术的计算速度非常快。因此，当声称使用非对称密钥加密来加密某些内容时，通常使用对称密钥加密对数据进行加密，然后使用非对称密钥加密对对称密钥进行加密。&lt;/p&gt;&lt;p&gt;以下是在许多区块链网络中使用非对称密钥加密的总结：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;私钥用于对交易进行数字签名。&lt;/li&gt;&lt;li&gt;公钥用于派生地址。&lt;/li&gt;&lt;li&gt;公钥用于验证使用私钥生成的签名。&lt;/li&gt;&lt;li&gt;非对称密钥加密提供了验证向另一个用户传输值的用户是否拥有能够签署事务的私钥的能力。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;一些许可的区块链网络可以利用企业现有的公钥基础设施进行非对称密钥加密，以提供用户凭证 - 而不是让每个区块链网络用户管理自己的非对称密钥。这是通过利用现有的目录服务并在区块链网络中使用该信息来完成的。利用现有目录服务的区块链网络可以通过现有协议（如轻量级目录访问协议（LDAP）[10]）访问它，并本地利用目录中的信息，或将其导入区块链网络内的内部证书颁发机构。&lt;/p&gt;&lt;h2&gt;地址和地址推导&lt;/h2&gt;&lt;p&gt;一些区块链网络利用地址，该地址是使用加密散列函数从区块链网络用户的公钥导出的短的字母数字字符串，以及一些附加数据（例如，版本号，校验和）。大多数区块链实现都使用地址作为事务中的“到”和“从”端点。地址比公钥短，并不是秘密。生成地址的一种方法是创建公钥，对其应用加密哈希函数，并将哈希转换为文本：&lt;/p&gt;&lt;p&gt;公钥à哈希函数à地址&lt;/p&gt;&lt;p&gt;每个区块链实现可以通过不同的方法来导出地址。对于允许匿名帐户创建的无权限区块链网络，区块链网络用户可以生成尽可能多的非对称密钥对，并因此根据需要进行寻址，从而允许不同程度的伪匿名性。地址可以充当用户的区块链网络中面向公众的标识符，并且通常地址将被转换为QR码（快速响应代码，可以包含任意数据的二维条形码）以便于移动使用设备。&lt;/p&gt;&lt;p&gt;区块链网络用户可能不是区块链网络中唯一的地址来源。一旦在区块链网络中部署了智能合约，就必须提供一种访问智能合约的方法。对于以太坊，可通过称为合同账户的特殊地址访问智能合约。部署智能合约时会创建此帐户地址（合同帐户的地址是根据智能合约创建者的地址确定计算的）。该合同账户允许合同在收到交易时执行，并依次创建额外的智能合约。&lt;/p&gt;&lt;h2&gt;私钥存储&lt;/h2&gt;&lt;p&gt;对于一些区块链网络（特别是使用无权的区块链网络），用户必须管理并安全地存储他们自己的私钥。他们经常使用软件来安全地存储它们，而不是手动记录它们。该软件通常被称为钱包。钱包可以存储私钥，公钥和相关地址。它还可以执行其他功能，例如计算用户可能拥有的数字资产的总数。&lt;/p&gt;&lt;p&gt;如果用户丢失私钥，则与该密钥相关联的任何数字资产都将丢失，因为重新生成相同的私钥在计算上是不可行的。如果私钥被盗，攻击者将可以完全访问由该私钥控制的所有数字资产。私钥的安全性非常重要，许多用户使用特殊的安全硬件来存储它们。或者，用户可以利用新兴的私钥托管服务行业。除了存储私钥之外，这些密钥托管服务还可以满足KYC法律，因为用户在创建帐户时必须提供其身份证明。&lt;/p&gt;&lt;p&gt;私钥存储是区块链技术的一个极其重要的方面。当新闻中报道“加密货币XYZ从...中被盗”时，几乎可以肯定地发现一些私钥被用来签署将钱汇入新账户的交易，而不是区块链网络本身被泄露。请注意，由于区块链数据通常无法更改，一旦犯罪分子窃取私钥并将相关资金公开转移到另一个帐户，该交易通常无法撤消。&lt;/p&gt;&lt;p&gt;===============================================================&lt;/p&gt;&lt;p&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;(二维码自动识别)&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-01-25-55667170</guid>
<pubDate>Fri, 25 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>区块链中的哈希函数</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-01-22-55470186.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55470186&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;区块链技术的一个重要组件是将哈希函数用于许多操作。哈希是一种将哈希函数应用于数据的方法，其为几乎任何大小的输入（例如，文件，文本或图像）计算相对独特的输出（称为消息digest，或仅仅是digest）。它允许个人独立地获取输入数据、散列数据并得出相同的结果 - 证明数据没有变化。即使对输入的最小改变（例如，改变单个位）也将导致完全不同的输出。表1显示了这方面的简单例子。&lt;/p&gt;&lt;p&gt;哈希函数具有以下重要的安全属性：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;它们具有逆向抗性。这意味着它们是单向的; 在给定一些输出值的情况下计算正确的输入值在计算上是不可行的（例如，给定digest，找到x使得hash（x）=digest）。&lt;/li&gt;&lt;li&gt;它们具有第二逆向抗性。这意味着无法找到哈希到特定输出的输入。更具体地，设计哈希函数以便在给定特定输入的情况下，找到产生相同输出的第二输入（例如，给定x，找到y使得hash（x）=hash（y））在计算上是不可行的。可用的唯一方法是穷举搜索输入空间，但这没有任何成功的可能。&lt;/li&gt;&lt;li&gt;它们具有抗冲击性。这意味着找不到两个散列到同一输出的输入。更具体地，找到产生相同digest的任何两个输入在计算上是不可行的（例如，找到hash（x）=hash（y）的x和y）。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在许多区块链实现中使用的特定哈希函数是安全哈希算法（SHA），其输出大小为256位（SHA-256）。许多计算机在硬件中支持该算法，使其计算速度快。SHA-256的输出为32字节（1字节= 8位，32字节= 256位），通常显示为64字符的十六进制字符串（参见下面的表1）。&lt;/p&gt;&lt;p&gt;这意味着有2256≈1077，或115,792,089,237,316,195,423,570,985,008,687,907,853,269,984,665,640,564,039,457,584,007,913,129,639,936可能的digest值。SHA-256的算法以及其他算法在联邦信息处理标准（FIPS）180-4 [中规定。NIST Secure Hashing网站包含所有NIST批准的散列算法的FIPS规范。&lt;/p&gt;&lt;p&gt;&lt;b&gt;输入文本&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;SHA-256 digest结果&lt;/b&gt;&lt;/p&gt;&lt;p&gt;1&lt;/p&gt;&lt;p&gt;0x6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b&lt;/p&gt;&lt;p&gt;2&lt;/p&gt;&lt;p&gt;0xd4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35&lt;/p&gt;&lt;p&gt;Hello, World!&lt;/p&gt;&lt;p&gt;0xdffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f&lt;/p&gt;&lt;p&gt;由于存在无限数量的可能输入值和有限数量的可能输出digest值，因此很可能发生冲突，其中hash（x）= hash（y）（即两个不同的哈希值）输入产生相同的digest）。据说SHA-256具有抗冲突能力，因为要在SHA-256中发现碰撞，人们必须平均执行该算法大约2128次（即340次无衰减，或者更确切地说是340,282,366,920,938,463,463,374,607,431,768,211,456;大约3.402 x 1038） 。&lt;/p&gt;&lt;p&gt;从这个角度来看，2015年整个比特币网络的哈希率（每秒哈希值）为每秒300万亿哈希（300,000,000,000,000,000 / s）。按照这个速度，整个比特币网络需要大约35,942,991,748,521（大约3.6 x 1013）年来制造碰撞（注意宇宙估计为1.37 x 1010年）。即使产生相同digest的任何此类输入x和y，两个输入也很可能在区块链网络的上下文中无效（即，x和y都是有效的事务）。&lt;/p&gt;&lt;p&gt;在区块链网络中，哈希函数用于许多任务，例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;地址推导。&lt;/li&gt;&lt;li&gt;创建唯一标识符。&lt;/li&gt;&lt;li&gt;保护块数据 - 发布节点将对块数据进行哈希，创建将存储在块头中的digest。&lt;/li&gt;&lt;li&gt;保护块头 - 发布节点将对块头进行哈希。如果区块链网络使用工作证明共识模型，则发布节点将需要使用不同的随机数值对块头进行哈希，直到满足拼图要求为止。当前块头的散列digest将包含在下一个块的头中时，它将保护当前块头数据。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因为块头包括块数据的哈希表示，所以当块头digest存储在下一个块中时，块数据本身也是安全的。&lt;/p&gt;&lt;p&gt;区块链技术中使用了许多哈希函数族（SHA-256不是唯一的），例如Keccak（由NIST选择作为创建SHA-3哈希标准的竞赛的获胜者），以及作为RIPEMD-160。&lt;/p&gt;&lt;p&gt;===============================================================&lt;/p&gt;&lt;p&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;(二维码自动识别)&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-01-22-55470186</guid>
<pubDate>Tue, 22 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>美国宇航局(NASA)希望用区块链技术来保护飞行数据</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-01-20-55327582.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55327582&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;美国宇航局正在探索区块链技术的潜在用例, 来保障飞机(航空器)飞行数据的隐私和安全。 &lt;/p&gt;&lt;p&gt;航空计算机工程师ronald reisman 本周发表的一份研究论文，探讨了区块链网络和智能合同的可行性(活力), 来克服上述安全问题。 &lt;/p&gt;&lt;p&gt;目前基于雷达的空中交通服务提供商也许可以通过防止公开发布与选定航班、位置和国家数据有关的信息, 从而为军事和公司运营保护隐私。 &lt;/p&gt;&lt;p&gt;不过, 从 2 0 2 0年1月1日起, 美国将不得不使用一种名为 &quot;自动相关监控广播&quot; (ads-b) 的新监控系统, 该系统将公布飞机的身份、位置和信息。 &lt;/p&gt;&lt;p&gt;报道中说(the paper reads) ：&quot;创新的创新之处是使用开源许可的区块链框架, 提供一种安全、高效的方法实现了飞机与空中交通服务、运营支持或其他授权的方通信的隐私和匿名“。 &lt;/p&gt;&lt;p&gt;reisman 概述了一个原型--航空区块链基础结构 （ABI），它基于超分类账结构 (linux 基金会托管的项目之一) 和智能合同的), 允许控制（数据授权方分享的）公开的数据或秘密的数。 &lt;/p&gt;&lt;p&gt;正如研究中所概述的, 许多区块链系统实现赋予成员进行私人和机密交易的权力, 也与基于区块链的同一网络上的受限成员共存。 &lt;/p&gt;&lt;p&gt;报道继续说(the paper continues)：&quot;控制成员定义一个或多个通道, 以便将对等方隔离到子网中并创建专用(私有)分类帐。每个通道的分类帐只能由其成员的对等节点访问。通道的组织（管理机构） (实体) 必须批准每个对等方(对通道)的成员身份。客户端请求被路由到指定的通道, 以运行部署在该通道上的智能协定。结果得到认可和核实, 然后更新在该通道中的的分类账 &quot;。 &lt;/p&gt;&lt;p&gt;然后, 这些通道将用于完成机密交易, 这意味着, 比如, 飞机状态信息（如高度、经度和纬度） 可以通过私人(秘密)通道保持安全。 &lt;/p&gt;&lt;p&gt;相反, 与飞机飞行计划信息 (始发地、目的地、飞行路线) 有关的信息在所有经批准的成员都能进入的通道上发布。 美国宇航局去年还向Akron 大学的一位教授提供了3.3万美元, 以促进对基于以太的区块链网络如何自动检测太空中漂浮碎片的研究, 这还成为头条新闻。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;===============================================================&lt;br&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt; &lt;b&gt;(二维码自动识别)&lt;/b&gt;&lt;br&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;br&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-01-20-55327582</guid>
<pubDate>Sun, 20 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>区块链上交易传统资产的实例研究-part 4</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-01-15-54958423.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54958423&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;4.1区块链设计决策&lt;/b&gt;&lt;/p&gt;&lt;p&gt;基于表2中讨论的区块链设计决策（Xu et al.2016,2017），我们的概念验证原型利用Buterin (2013) and Wood (2017)引入的以太坊框架作为其底层基础设施。&lt;/p&gt;&lt;p&gt;&lt;br&gt;以太坊是一个分散的应用程序平台，提供准图灵完整的编程语言，支持基于智能合约的应用程序。这些分散的应用程序运行在区块链承载的虚拟机上（Buterin 2013; Wood 2017），可以创建无信任的系统，在多个交互代理之间建立一致的协议。在此范围内，以太坊允许用户在共享的全局基础架构上创建和部署程序，这些基础架构将根据收到的数据自动触发和执行（Glaser 2017）。利用这些功能，我们可以通过触发交易的智能合约促进自动化，最大限度地减少与数据库和注册管理机构（如DMR）的管理和维护相关的官僚和组织工作。&lt;/p&gt;&lt;p&gt;&lt;br&gt;以太坊还具有以下所需特性：首先，它通过集成加密散列算法提供安全性和弹性。其次，由于其分布式特性，数据不一致性暴露于所有用户的审查中，并且没有中心点的失败。此外，基于块和链接的数据结构使用户能够遍历整个数据库并检索过去的事务并重建每个车辆的历史记(Beck et al. 2016)。理论上，这种透明度减轻了逆向选择效应，而系统的开放性解决了第2节中引入的数据不一致问题。 &lt;/p&gt;&lt;p&gt;&lt;br&gt;总的来说，这些特征确立了我们的无信任交易系统的技术环境，允许具有着不同利益和信息的各方通过生成完整，透明和安全的交易记录来移动价值并管理所有权的转移，而无需中央机构。&lt;/p&gt;&lt;p&gt;&lt;b&gt;4.2软件架构和市场计划&lt;/b&gt;&lt;/p&gt;&lt;p&gt;为了满足第2节中描述的要求，我们构建一个强大框架。 我们选择面向对象的软件工程方法，并按层次(结构)构建基础智能合约。为此，我们首先定义一个跨结构框架的通用市场结构（如图2所示），而原型的实现继承其(跨结构框架的通用市场结构)核心功能。&lt;br&gt;&lt;/p&gt;&lt;p&gt;通用设计采用两层方法，将市场平台与可在此平台上交易的单个商品相结合。平台和交易对象都由智能合约表示，它们实现不同的方法，功能和变量。市场合约充当托管代理，组织交易活动并定义交易过程。可交易合约代表实物资产，跟踪其当前所有者，并允许所有权在成功交易后发生变化。&lt;br&gt;&lt;/p&gt;&lt;p&gt;  为了确保市场的可扩展性，我们采用了具有三个层次的层次结构，如图2所示：Marketplace合约定义了接口并设置了方法和相应事件的最低要求，以实现上面指定的基本功能。 StandardMarketplce实现了这些方法，构成了功能市场的基本实现。 IndexedMarketplace通过一系列便利方法扩展了市场，允许市场上的报价被迭代索引。这样，我们将接口，核心逻辑和便捷方法分开，增加框架的健壮性，使其适应不同的用例和场景，并确保不同模块的可测试性。&lt;br&gt;&lt;/p&gt;&lt;p&gt;此外，我们允许可交易合约的onTransferOwnership（）方法被覆盖，从而允许在交易过程中具有逻辑性。（PS: logic to happen during the transaction process.  令人费解）这样，我们的市场平台允许在交易汽车之前实施各种背景调查，如果某些条件，如没有获得足够的保险或足够的资金，或交易一方不符合或者不遵守先前商定的条款，则授予放弃交易的可能性。&lt;br&gt;&lt;br&gt;为了实现DMR市场（图3），我们利用图2所示的一般市场结构。DMR合同扩展了IndexedMarketplace，其中包含与DMR相关的业务逻辑，例如发布车辆，在此之后具有能跟踪他们的车辆所有权状态的能力。为此，DMR合同持有已发行车辆的登记册，其现有车主和各自的车牌。在市场上交易的汽车是通过车辆合同实施的，该合同扩展了车辆登记所需的可交易和补充属性，例如唯一的车辆识别号（VIN）和其他车辆特定的细节。&lt;br&gt;&lt;/p&gt;&lt;p&gt;我们使用基于令牌的传统法定货币代表（如丹麦克朗）作为支付手段，而不是以太币，以太币是以太坊区块链中使用的加密货币。这样，我们就可以排除任何汇率风险。&lt;/p&gt;&lt;p&gt;&lt;br&gt;但是，使用丹麦克朗需要第三方（例如中央银行，商业银行或信用卡公司）来支持或锁定分配给买方区块链账户的金额（Broadbent 2016; Raskin and Yermack 2016）。当卖方想要从系统中提取他的回报时，这同样适用。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c0162bd359472f39d2fbe40120fd0ba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;468&quot; data-rawheight=&quot;543&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;468&quot; data-original=&quot;https://pic4.zhimg.com/v2-c0162bd359472f39d2fbe40120fd0ba7_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c0162bd359472f39d2fbe40120fd0ba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;468&quot; data-rawheight=&quot;543&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;468&quot; data-original=&quot;https://pic4.zhimg.com/v2-c0162bd359472f39d2fbe40120fd0ba7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-c0162bd359472f39d2fbe40120fd0ba7_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;4.3原型&lt;/b&gt;&lt;/p&gt;&lt;p&gt;为了开发原型，我们使用整体部署框架（Truffle 2017）。Truffle（2017）支持开发过程的所有步骤，包括测试和部署，并负责在以太坊中使用智能合约所需的样板代码。&lt;br&gt;&lt;/p&gt;&lt;p&gt;为了便于访问，我们将原型实现为Web应用程序，可以通过任何启用了以太坊的浏览器（例如Mist（2017））通过URI访问，或者在访问URI时手动运行本地以太坊客户端。图4显示了在完成交易之前的Web应用程序的快照。为了改善隐私并提高可用性，我们为与系统交互的不同方提供特定的用户界面，即买方和卖方，政府机构和第三方。从实际角度来看，我们在Web应用程序中将接口实现为三个不同的视图：汽车注册视图，注册查找和个人视图，从中可以检索，提供和交易其拥有的汽车。&lt;/p&gt;&lt;p&gt;&lt;br&gt;为了降低交易风险，我们将交易流程分为以下四个步骤，并实施两个内置的保护机制：&lt;/p&gt;&lt;p&gt;第一步，我们匹配买卖双方，并协商他们的交易条款。为了降低复杂性并提高系统性能，原型中未实现买卖双方匹配和定价。相反，买家和卖家必须找到彼此，并在现实世界中进行谈判(off-chain链下谈判)。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2d9fdd9eb383a31a2e0391098a5d8170_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;468&quot; data-rawheight=&quot;184&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;468&quot; data-original=&quot;https://pic1.zhimg.com/v2-2d9fdd9eb383a31a2e0391098a5d8170_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2d9fdd9eb383a31a2e0391098a5d8170_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;468&quot; data-rawheight=&quot;184&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;468&quot; data-original=&quot;https://pic1.zhimg.com/v2-2d9fdd9eb383a31a2e0391098a5d8170_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-2d9fdd9eb383a31a2e0391098a5d8170_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;在第二步中，在他们成功达成协议后，卖方可以通过市场合约与买方联系，并通过调用extendOffer（）提供销售汽车的链上（on-chain）报价。为此，他或她通过网络界面登录DMR区块链系统，并通过指定买方的地址(他的公钥和价格)，向潜在买方发送一个要价（extendOffer（））。公钥是一个哈希值，其表示区块链上买家唯一的地址或帐号数字。在实际设置中，公钥将连接到个人或公司ID，使个人和公司实体一样能够买卖汽车。在卖方发起要约之后，买方有可能通过 唤起acceptOffer（）接受它或不做任何事情，即不接受要价。在接受的情况下，买方签订托管协议并且acceptOffer（）会检查他或她是否有足够的资金，从他或她的账户中提取约定的价格，将其存入市场，并通知卖方要价被接受。在第二种情况下，卖方可以通过revokeOffer（）方法撤销要价(offer)。这是防止提供与之前的脱链协议不同报价的第一个保障措施。&lt;br&gt;&lt;br&gt;在第三步中，交易双方亲自会面并脱链(off-chain)交换物品。然而，实际的所有权转让尚未发生。要进行此转移，买方和卖方必须通过调用completeTransaction（）来返回区块链以完成交易，在转移资产所有权的同时将之前存入的资金释放给卖方。更具体地说，completeTransaction（）同时将钱存入卖方的账户并将所有权证书转让给买方。根据该过程，车辆自动注销并重新注册DMR。&lt;br&gt;&lt;/p&gt;&lt;p&gt;如果在(见面)会议期间发生任何问题，例如，如果汽车不具有先前宣传的品质，那么abortTransaction（）可以中止交易，给买方赔偿钱，并取消交易。这是第二个保护机制，在第四个也是最后一个步骤中，各方都有办法取消交易并通过各自调用revokeOffer（）和abortTransaction（）来退出协议。中止或撤销交易将取消offer，将存入市场的资金转回买方，并停止转让所有权。值得注意的是，资产所有权的实际转移和支付包括两腿交易流程(two-legged transaction process)的最后一步，并最终解决了交易。在这两种情况下，offer都会在之后被删除。因此，双方都有机会通过使用第二步和第四步中的交易保护措施来中止不必要的，无意的或错误的交易（研究问题1）。&lt;br&gt;&lt;/p&gt;&lt;p&gt;为了更详细地说明交易过程，图5和6分别描述了在交易过程中成功交易的调用顺序和不同的系统状态。&lt;/p&gt;&lt;p&gt;最终，交易数据不可变地存储在区块链中，并且公开可见，执行透明（研究问题3），同时为交易方以及SKAT和其他相关利益相关者提供完整和一致的所有权记录（研究问题2） 。结合继承区块链的透明度，我们的市场设计可以全面了解已发行的车辆，其现有车主及其历史，从而有助于减少二手车市场中的信息不对称。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-be16cd12b29a40445d865c2cf701c177_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;468&quot; data-rawheight=&quot;366&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;468&quot; data-original=&quot;https://pic4.zhimg.com/v2-be16cd12b29a40445d865c2cf701c177_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-be16cd12b29a40445d865c2cf701c177_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;468&quot; data-rawheight=&quot;366&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;468&quot; data-original=&quot;https://pic4.zhimg.com/v2-be16cd12b29a40445d865c2cf701c177_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-be16cd12b29a40445d865c2cf701c177_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;===============================================================&lt;br&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt; &lt;b&gt;(二维码自动识别)&lt;/b&gt;&lt;br&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;br&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-01-15-54958423</guid>
<pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>区块链上交易传统资产的实例研究-part 6</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2019-01-15-54950289.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54950289&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除了技术限制外, 使用的 ethereum 框架等公共区块链也会对数据隐私产生负面影响。为了考虑到这些隐私问题, 我们提出了一个在链和脱链(on- and off- chain )储存模式 (Xu et al. 2016; Zyskind et al. 2015), 用于车辆专用和个人信息, 并建议以哈希为基础表示个人和公司身份证。此外, 市场参与者通过用户特定的接口访问数据库, 从而接收反映不同隐私级别的不同信息。结合允许的区块链权限设置, 限制了授权 id 要求的越权访问(the requirement of an authorized ID restricts unauthorized access), 并确保最低限度的数据保护。&lt;/p&gt;&lt;p&gt;由于其原型特性，比特币或其他加密货币以外的基于现实世界的区块链系统的缺乏, 以及已建立的 it 系统的多样性, 评估我们系统的实际大规模适用性仍然具有挑战性。然而, 为了提供一个总的方向, 我们提供了集中和分布式数据库的抽象和简短的区别, 并在以下段落中指出了区块链技术的优势。&lt;/p&gt;&lt;p&gt;在集中式数据库中, 数据存储在一个物理位置, 用户通过接口访问存储的数据。因此, 集中式数据库提供了轻松的数据管理和维护、高性能并保持可扩展性。另一方面, 集中化将安装和维护成本集中在数据库提供商身上, 增加了停机和数据丢失的风险, 并要求用户信任管理运营商(Elmasri&lt;/p&gt;&lt;p&gt;and Navathe 2015; Connolly and Begg 2015)。&lt;/p&gt;&lt;p&gt;在分布式数据库中, 存储和处理单元是单独保存的, 数据存储在多个位置并在相互联系, 用户通过网络访问数据库。若要更新节点和维护数据库, 数据在网上需要被重复复制。分布式数据库系统的核心优势是持续可用性和更高的可靠性、轻松的数据恢复以及模块化增长的灵活性。然而, 这些优势的代价是高度复杂、(不断)增加的处理开销以及数据完整性暴露在不一致之处 (Elmasri and Navathe 2015;Connolly and Begg 2015)。&lt;/p&gt;&lt;p&gt;基于区块链的系统结合了系统和数据库的特性，从而提供了一个具有弹性的分布式数据库, 通过所有节点的协商一致确保数据完整性, 从而为多方提供了一个可靠的数据库。特别是交易历史相互联系的各方和其他相关利益相关者的独立审查的开放性, 最大限度地降低了重复、错误和数据不一致的风险。在区块链基础设施上建立登记册系统利用了这些关键属性, 并满足了现代登记册的主要要求, 其中包括完整性、可用性、可访问性、高效读取和不可变性(Tran et al. 2017)。&lt;/p&gt;&lt;p&gt;为了提供一个超出登记册用例的方向, 我们还提出了三个先决条件, 可以说, 基于区块链的系统应该满足这些先决条件, 以可能构成对传统方法的改进。&lt;/p&gt;&lt;p&gt;首先, 由于其分布式性质和综合共识机制, 区块链技术提供了一种概念方法, 可以在公共和匿名设置中管理多方交易, 而无需中央(机构)的参与。因此, 这些系统具有缓和代理人之间冲突和利益能力。如果利益冲突为参与真相启示过程(the truth revelation process)提供了强烈的内在动机, 我们也可以抛弃加密货币中普遍存在的货币激励的观念。&lt;/p&gt;&lt;p&gt;其次, 我们建议利用区块链作为一种方法, 减少对不对称分布的信息的暴露, 并将其作为一个工具箱来感知和应用, 以促进提供、验证和传播交易历史。因此, 如果至少有一方与私人信息有关, 就无法从透明度的提高中获利, 那么, 基于区块链的系统的好处仍然有限。&lt;/p&gt;&lt;p&gt;第三, 作为分布式系统，区块链技术允许多方在不影响数据完整性的情况下对共享数据库进行书面访问。然而, 要使这些好处生效, 用例需要至少由两个具有对系统的书面访问权限的冲突方组成。如果只有一方有写入访问权, 就不需要达成共识, 因此, 有写入访问权的一方只是相当于中央机构。&lt;/p&gt;&lt;p&gt;如果我们将这些先决条件映射到 DMR用例中, 我们发现这三个条件都得到了满足: 第一, 买卖双方之间会出现利益冲突, 因为卖家不想透露他们的私人信息, 而买家则想了解关于市场上汽车的真正质量。此外, 多边市场环境和动态交易过程要求所有有关方，(要)向该系统提供数据。&lt;/p&gt;&lt;p&gt;&lt;b&gt;7结论&lt;/b&gt;&lt;/p&gt;&lt;p&gt;本研究中开发的概念验证原型旨在用替代办法取代官僚公共登记处, 并说明基于区块链的现实资产交易系统可能是什么样子。此外, 它还强调了区块链如何发挥透明度的作用, 以不完善的信息缓解市场的低效率。从技术角度来看, 我们提供了一个管理二手车所有权转让的平台, 并从本质上向交易方、政府机构和其他第三方提供可靠和完整的车辆历史记录。为了实现原型, 我们采用了面向对象的软件工程方法, 该方法便于理解, 并允许研究人员和从业人员超越交易汽车的用例, 将交易系统应用于其他资产,交易市场设置和注册系统。&lt;/p&gt;&lt;p&gt;除了其实际相关性外, 我们的研究对学术研究的贡献有三个方面: 第一, 我们引入了一种机制来降低基于区块链的交易不可逆转性所带来的交易风险。其次, 我们用一个无信任和自主的交易数据库系统取代了基于信任的、集中式和官僚式的登记册, 该系统提供了一个安全的注册和交易过程, 而不需要中央管理机构。第三, 我们提出了一个新的解决方案概念, 通过提供可靠、透明和完整的每个资产历史记录, 减少柠檬市场质量的不确定性和由导致的逆向选择效果。&lt;/p&gt;&lt;p&gt;为了降低复杂性并专注于手头的研究问题, 我们进一步放弃了第三方服务和官方流程的集成, 如汽车检查或重建许可。但是, 随着原型的成熟, 这些功能和其他功能可能会包含在未来的版本中。&lt;/p&gt;&lt;p&gt;除了上述优点外, 应用技术仍处于早期开发阶段, 并面临一些挑战, 如可有限的扩展性和隐私问题, 尚未完全掌握。此外, 用户需要信任操作算法 (lustig and nardi 2015) 的正确性和准确性, 受信任的第三方提供有关资产的信息仍然是一个重要的先决条件。但是, 这一规定仅限于在检查、修理、改装或事故后更新车辆特有的信息。交易过程完全在链上进行, 因此生成事务历史记录不需要任何第三方集成。在一定程度上, 这种信任问题可能会通过物联网的集成来解决--至少在汽车的情况下如此--传感器提供所需的数据(Gubbi et al. 2013)。&lt;/p&gt;&lt;p&gt;无论这些问题如何, 我们的原型都为将区块链技术应用于公共注册和交易系统领域提供了有效的第一步, 并说明了这种方法的机遇和挑战。&lt;/p&gt;&lt;p&gt;完结&lt;/p&gt;&lt;p&gt;大家对该文有任何问题，欢迎留言！&lt;/p&gt;&lt;p&gt;===============================================================&lt;br&gt;&lt;b&gt;文章首发在微信公众号：btc201800&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weixin.qq.com/r/GC8UDDj&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EjmXxrXxv93oK&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt; &lt;b&gt;(二维码自动识别)&lt;/b&gt;&lt;br&gt;&lt;b&gt;音频发布在喜马拉雅上“区块链杂谈 (第2季)“&lt;/b&gt;&lt;br&gt;&lt;b&gt;宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2019-01-15-54950289</guid>
<pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
