<div class="title-image"><img src="https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg" alt=""></div><blockquote>前言：<br/>从2018年开始，我每天会花1个小时关注Rust社区动态，并且分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust日报已经成为了Rust社区群大家每天必看的内容。<br/>从2019年开始，日报小组成立，目前的动态由：@Chaos、 @Mike、 @Damody(台湾)轮番为大家播报。也欢迎感兴趣的朋友加入小组。<br/>每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。<br/>独立日报订阅地址： - <a href="https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news" class=" wrap external" target="_blank" rel="nofollow noreferrer">Telgram Channel</a> - <a href="https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews" class=" wrap external" target="_blank" rel="nofollow noreferrer">阿里云语雀订阅</a> - <a href="https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger" class=" wrap external" target="_blank" rel="nofollow noreferrer">Steemit</a> - <a href="https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news" class=" wrap external" target="_blank" rel="nofollow noreferrer">GitHub</a><br/>社区学习交流平台订阅： - <a href="https://link.zhihu.com/?target=https%3A//rust.cc/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Rust.cc论坛</a> - <a href="https://link.zhihu.com/?target=https%3A//rustforce.net/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Rust Force</a> - <a href="https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Ded7c9379-d681-47cb-9532-0db97d883f62" class=" wrap external" target="_blank" rel="nofollow noreferrer">微信公众号：Rust语言学习交流</a><br/>截止 2019-06-02</blockquote><hr/><h2>官方新闻</h2><h3>异步await语法最终确定</h3><p>官方核心成员无船大佬在博客上披露，异步await语法的最终提议是继续推进后缀关键字语法： <code>future.await</code>。另外无船大佬还针对Rust语言设计给出了两点说明：</p><ol><li>Rust语言很少有绝对的情况出现。除了一些必须要做的事，比如类型系统必须健壮之外，其他绝大多数的问题都是权衡问题。也就是说，需要权衡不同种类的方案，选择团队认为优先的道路。这样做必然会带来很多正面或负面的想法，所以我们需要避免非黑即白的二分思想。</li><li>点关键字，只是一个方案的草图，并不带有某种角度的暗示或保证。它仍然需要走RFC流程。</li><li>引入<code>@await</code>语法，也是因为权衡成本的问题，因为引入新的符号会带来成本。</li></ol><p>下一步：</p><p>准备在Rust 1.37稳定版中引入async/await的最小稳定化版本， 1.37将于8月中旬发布，并于7月4日发布。这不会是async/await功能的结束 - 最小功能将会有很多扩展 - 但对于每个想要使用Rust进行高性能网络服务的人来说，这将是一个重要的里程碑。</p><p><a href="https://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/await-decision-ii/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Unsafe代码指南现在线上可用</h3><p><a href="https://link.zhihu.com/?target=https%3A//rust-lang.github.io/unsafe-code-guidelines/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Rust标准库已经开始尝试使用 Const Generics 进行重写数组的一些实现</h3><p>相关<a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/60466" class=" wrap external" target="_blank" rel="nofollow noreferrer">PR</a>。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md" class=" wrap external" target="_blank" rel="nofollow noreferrer">const generics</a> 就是“基于常量值的泛型”。简单来说，Rust 中的 <code>[T; LEN]</code>，它的很多特性在之前的版本中，只支持最多 [T; 32]，而且是人 [T; 0]，[T; 1], [T;2] ... 一直到 [T; 31] 这样，<a href="https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/std/primitive.array.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">纯手撸实现</a>的，丑不？</p><p>现在，有了 const generics，就可以把数组这种常用的类型从二等公民提升到一等公民来了。对于处女座来讲，简直要欢呼。</p><hr/><h2>社区新闻</h2><h3><a href="https://link.zhihu.com/?target=http%3A//rust.cc" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">rust.cc</span><span class="invisible"></span></a>社区提供了国内crates镜像</h3><p>快来试试</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/rustcc/lernaean-deploy/" class=" wrap external" target="_blank" rel="nofollow noreferrer">rustcc/lernaean-deploy</a></p><h3>知乎开源Rust实现的搜索引擎Rucene</h3><p>据了解，目前开源的部分只包括 lucene library 部分，搜索引擎的部分太多业务内容而且跟内部的一个分布式框架有强绑定就没开源，等后续弄好了应该还会出一篇文章，详细介绍这个项目。未来估计还会有一次代码重构，可能会带来break change的修改，想要贡献的朋友可以缓一缓。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/zhihu/rucene" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read more</a></p><h3>支持Rust的多种方式</h3><p>如果你想支持Rust的发展，有很多方法可以支持Rust：</p><ul><li>贡献代码。</li><li>写文档、书、博客、视频等。</li><li>在论坛，Stack Overflow，Reddit，Matrix或Discord上回答问题。</li><li>财务支持。</li></ul><p>尤其是财务支持，可以帮助补偿这些重点贡献人员的时间，使得开源更具可持续性。如果你愿意，可以查看Aaron发起的捐助人员列表。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//readrust.net/support.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=http%3A//aturon.github.io/sponsor/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Aaron发起的捐助人员列表</a></li></ul><h3>Rust官网简体中文翻译工作正在如火如荼地进行着</h3><p><a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang-cn/www.rust-lang.org" class=" wrap external" target="_blank" rel="nofollow noreferrer">rust-lang-cn/www.rust-lang.org</a></p><p>相关阅读 : <a href="https://zhuanlan.zhihu.com/p/67402361" class="internal">从官网挖掘的Rust I18N方案</a></p><h3>Rust Audio论坛 - 讨论和询问有关Rust中音频开发的问题的地方</h3><p><a href="https://link.zhihu.com/?target=https%3A//rust-audio.discourse.group/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>使用WASI对区块链进行通用计算</h3><p>本文来自于OasisLabs，介绍了WASI（Web Assembly System Interface ）在区块链上的应用。目前Oasis平台的技术架构目前正在围绕WASM、WASI和区块链来实施。</p><p>（OasisLabs是来自加州大学伯克利分校的Dawn Song教授和同事们创立的区块链项目，基于区块链和可信硬件想构建高性能的可信云平台。）</p><p>为什么他们想把WASI用于区块链？</p><p>WASI用于区块链的目标是利用围绕WASI快速发展的社区和基础设施。 与创建另一个Wasm接口的替代方法相比，WASI允许区块链开发人员利用更广泛的开发人员社区的资源。 通过这种方式，可以想象未来区块链将成为云开发人员工具箱中的另一个工具。</p><p>OasisLabs团队还专门提交了一个区块链WASI的RFC，想做成适合区块链上下文的WASI标注扩展。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//medium.com/oasislabs/blockchain-flavored-wasi-50e3612b8eba" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/oasislabs/rfcs/pull/1" class=" wrap external" target="_blank" rel="nofollow noreferrer">Blockchain WASI RFC</a></li></ul><h3>Rust vs C++ ： 基于36核CPU的并行性能测试</h3><h2>cpp #rayon</h2><p>有人针对Rust/Rayon（Rust实现的多线程并发库）和C++/OpenMP（c++的类似于rayon的库）在36核的机器上进行了性能测试。</p><p>Rust 36个线程：</p><div class="highlight"><pre><code class="language-rust"><span class="n">Running</span><span class="w"> </span><span class="n">on</span><span class="w"> </span><span class="mi">36</span><span class="w"> </span><span class="n">Threads</span><span class="w">
</span><span class="w"></span><span class="n">BabelStream</span><span class="w">
</span><span class="w"></span><span class="n">Version</span>: <span class="mf">0.5</span><span class="w">
</span><span class="w"></span><span class="n">Implmentation</span>: <span class="nc">Rust</span><span class="w">
</span><span class="w"></span><span class="n">Running</span><span class="w"> </span><span class="n">kernels</span><span class="w"> </span><span class="mi">100</span><span class="w"> </span><span class="n">times</span><span class="w">
</span><span class="w"></span><span class="n">Precision</span>: <span class="nc">double</span><span class="w">
</span><span class="w"></span><span class="n">Array</span><span class="w"> </span><span class="n">size</span>: <span class="mf">268.4</span><span class="w"> </span><span class="n">MB</span><span class="w"> </span><span class="p">(</span><span class="o">=</span><span class="mf">0.3</span><span class="w"> </span><span class="n">GB</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="n">Total</span><span class="w"> </span><span class="n">size</span>: <span class="mf">805.3</span><span class="w"> </span><span class="n">MB</span><span class="w"> </span><span class="p">(</span><span class="o">=</span><span class="mf">0.8</span><span class="w"> </span><span class="n">GB</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="n">Function</span><span class="w">    </span><span class="n">Mbytes</span><span class="o">/</span><span class="n">sec</span><span class="w">  </span><span class="n">Min</span><span class="w"> </span><span class="p">(</span><span class="n">sec</span><span class="p">)</span><span class="w">   </span><span class="n">Max</span><span class="w">     </span><span class="n">Average</span><span class="w">
</span><span class="w"></span><span class="nb">Copy</span><span class="w">        </span><span class="mf">50552.817</span><span class="w">   </span><span class="mf">0.01062</span><span class="w">     </span><span class="mf">0.02924</span><span class="w">     </span><span class="mf">0.01143</span><span class="w">
</span><span class="w"></span><span class="n">Mul</span><span class="w">     </span><span class="mf">39680.038</span><span class="w">   </span><span class="mf">0.01353</span><span class="w">     </span><span class="mf">0.01510</span><span class="w">     </span><span class="mf">0.01443</span><span class="w">
</span><span class="w"></span><span class="n">Add</span><span class="w">     </span><span class="mf">45828.953</span><span class="w">   </span><span class="mf">0.01757</span><span class="w">     </span><span class="mf">0.01874</span><span class="w">     </span><span class="mf">0.01820</span><span class="w">
</span><span class="w"></span><span class="n">Triad</span><span class="w">       </span><span class="mf">41769.002</span><span class="w">   </span><span class="mf">0.01928</span><span class="w">     </span><span class="mf">0.02206</span><span class="w">     </span><span class="mf">0.02029</span><span class="w">
</span><span class="w"></span><span class="n">Dot</span><span class="w">     </span><span class="mf">43584.260</span><span class="w">   </span><span class="mf">0.01232</span><span class="w">     </span><span class="mf">0.01327</span><span class="w">     </span><span class="mf">0.01273</span><span class="w">
</span></code></pre></div><p>CPP/OMP 36个线程：</p><div class="highlight"><pre><code class="language-cpp"><span class="n">Running</span> <span class="n">on</span> <span class="mi">36</span> <span class="n">Threads</span>
<span class="n">BabelStream</span>
<span class="nl">Version</span><span class="p">:</span> <span class="mf">3.4</span>
<span class="nl">Implementation</span><span class="p">:</span> <span class="n">OpenMP</span>
<span class="n">Running</span> <span class="n">kernels</span> <span class="mi">100</span> <span class="n">times</span>
<span class="nl">Precision</span><span class="p">:</span> <span class="kt">double</span>
<span class="n">Array</span> <span class="nl">size</span><span class="p">:</span> <span class="mf">268.4</span> <span class="n">MB</span> <span class="p">(</span><span class="o">=</span><span class="mf">0.3</span> <span class="n">GB</span><span class="p">)</span>
<span class="n">Total</span> <span class="nl">size</span><span class="p">:</span> <span class="mf">805.3</span> <span class="n">MB</span> <span class="p">(</span><span class="o">=</span><span class="mf">0.8</span> <span class="n">GB</span><span class="p">)</span>
<span class="n">Function</span>    <span class="n">MBytes</span><span class="o">/</span><span class="n">sec</span>  <span class="n">Min</span> <span class="p">(</span><span class="n">sec</span><span class="p">)</span>   <span class="n">Max</span>         <span class="n">Average</span>     
<span class="n">Copy</span>        <span class="mf">87745.870</span>   <span class="mf">0.00612</span>     <span class="mf">0.00710</span>     <span class="mf">0.00684</span>     
<span class="n">Mul</span>         <span class="mf">79315.382</span>   <span class="mf">0.00677</span>     <span class="mf">0.00762</span>     <span class="mf">0.00736</span>     
<span class="n">Add</span>         <span class="mf">89995.047</span>   <span class="mf">0.00895</span>     <span class="mf">0.01029</span>     <span class="mf">0.00992</span>     
<span class="n">Triad</span>       <span class="mf">91574.889</span>   <span class="mf">0.00879</span>     <span class="mf">0.01012</span>     <span class="mf">0.00975</span>     
<span class="n">Dot</span>         <span class="mf">118144.442</span>  <span class="mf">0.00454</span>     <span class="mf">0.00504</span>     <span class="mf">0.00490</span>
</code></pre></div><p>对于这个结果，可以看看Reddit讨论贴里的一些反馈。评论区有一半的人都认为Rust之所以慢，是因为rayon目前不支持NUMA感知（Numa aware）的原因。无论是Rust语言，还是Rayon目前都不支持该功能，除非等内存分配器稳定下来再做打算。</p><p>（NUMA 用于 x86 和 IBM® POWER® 体系结构平台上的多处理器系统。在具有 NUMA 特性的系统中，每个处理器都具有可用的本地内存，也可以访问分配给其他处理器的内存。对本地内存的内存访问速度更快。NUMA 节点是相互紧密联系的处理器和内存的集合。 在节点内的内存访问速度比在节点外更快。如果程序能够感知NUMA，那就相关计算资源，将会被放置到一个不同的物理NUMA节点。尽管仍旧在两个NUMA节点之间扩展，但资源使用将会得到优化。）</p><p>但未可知OpenMP的测试代码是否利用了NUMA感知来提升性能，但OpenMP好像是支持NUMA（不确定）。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bto10h/update_a_scaling_comparison_between_rustrayon_and/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Reddit 讨论</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/andrewpsuedonym/Dissertation-Project" class=" wrap external" target="_blank" rel="nofollow noreferrer">相关代码</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/rayon-rs/rayon/issues/319" class=" wrap external" target="_blank" rel="nofollow noreferrer">rayon issues: Schedulling should be NUMA aware</a></li><li><a href="https://link.zhihu.com/?target=http%3A//cenalulu.github.io/linux/numa/" class=" wrap external" target="_blank" rel="nofollow noreferrer">介绍NUMA的一篇文章</a></li></ul><h3>「讨论」ndarray vs nalgebra</h3><p>该贴针对此问题展开讨论：ndarray和nalgebra这两个库有什么区别？优缺点？哪个库更有机会被机器学习和科学计算领域应用？</p><p>评论摘要：</p><ol><li>Ndarray和nalgebra针对两个不同的问题域。</li><li>Ndarray和nalgebra重复的部分只是线性代数系统，而nalgebra更侧重于线性代数系统，但仅限于1D向量和2D矩阵。</li><li>Ndarray类似于numpy，适用于n维数据处理。</li><li>一旦Rust的const generics功能稳定以后，这两个库将深受影响，也许将来会有更多的功能重叠。</li><li>nalgebra是纯Rust的，ndarray有一个OpenBLAS后端。所以在性能上，一些程序可能ndarray执行的更好（纯Rust实现的有待优化）。</li><li>如果是用于工程和数学目的，nalgebra是迄今为止最好的选择。nalgebra的最佳功能是在编译时进行维度检查，这意味着错误数学运算的代码将无法通过编译。</li></ol><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/btn1cz/ndarray_vs_nalgebra/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Reddit讨论</a></p><h3>dotenv易主了</h3><p>dotenv易主了，之前是diesel作者维护的，但是有段时间不维护了，连仓库都删了，现在有人接手它了，并且准备发1.0了，</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/dotenv-rs/dotenv" class=" wrap external" target="_blank" rel="nofollow noreferrer">新仓库</a></p><h3>Rust和Blender</h3><p>Blender是一个免费的开源3D创作套件。该文作者曾经在Blender工作过，编写过Python API。为了探索Blender二进制文件格式并提供读取和使用它们的工具，该文作者创建了一个Rust项目</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//www.janwalter.org/jekyll/blender/rust/blendinfo/2019/05/28/blend_info.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//codeberg.org/wahn/rs_blender" class=" wrap external" target="_blank" rel="nofollow noreferrer">rs_blender</a></li></ul><h3>Steam 上有哪些游戏是用 Rust 实现的</h3><ul><li><a href="https://link.zhihu.com/?target=https%3A//store.steampowered.com/app/808160/UniverCity/" class=" wrap external" target="_blank" rel="nofollow noreferrer">城市模拟游戏 UniverCity</a></li><li><a href="https://link.zhihu.com/?target=https%3A//store.steampowered.com/app/1032170/Robo_Instructus/" class=" wrap external" target="_blank" rel="nofollow noreferrer">编程游戏 Robo Instructus（预计2019 Q3上线）</a></li></ul><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bvtfni/which_rust_games_have_made_it_to_steam/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><hr/><h2>学习资源</h2><h3>「异步系列文章」Part 2: Async/Await语法之外的挑战 : 取消（Cancellation）</h3><p>在这篇文章里，作者讨论了如果在应用中取消正在进行的异步任务，这非常有用，主要是因为对它们的结果不再有任何兴趣，所以继续操作就会成为资源占用。比如在超时范围内没有收到响应并且应该将错误发送回用户，则应该取消子操作。</p><p>先来看看在同步中如何取消任务：</p><p>例如</p><p>在C＃中，使用CancellationToken类型的变量传递给每个方法，该方法是可取消工作流的一部分。这些方法可以不时地检查CancellationToken.IsCancellationRequested，以便发现父任务是否已请求取消。在这种情况下，子任务可以提前返回（例如通过抛出异常）。</p><p>其他语言是这种方法的变体：</p><p>Go使用Context结构将取消请求传播到子任务。在Go中，取消请求通过Channel发出信号，因为它可以轻松地使程序等待取消请求或来自其他来源的状态更新。</p><p>Java利用线程局部中断状态。如果一个线程获得<code>.interrupted()</code>，那么如果不处理异常，某些操作将抛出并强制返回子任务。这可以被视为某种线程局部的CancellationToken，它在方法之间没有明确地传递。它具有不能在异步上下文中使用的缺点。</p><p>这些行为具有一组特定的共性:</p><ul><li>取消始终只是通过取消请求来完成，它无法执行，即使请求已发出，子进程也可能运行一段时间。</li><li>所有方法都可以观察是否发生了取消，如果子方法受到影响，并且能够对其做出反应</li></ul><p>在async/await异步中如何取消：</p><p>Rust之外的语言，和同步取消任务的模式类似：</p><ul><li>通过专用参数或隐式任务本地参数请求取消</li><li>需要方法来观察取消状态。</li><li>即使取消后，异步方法也会完成。</li></ul><p>比如，<code>C＃ async Tasks</code>通过CancellationToken发出取消信号。许多<code>.NET</code> core框架函数支持此参数以传播取消请求。Kotlin协程标准库识别取消请求并允许操作在取消时提前中止。Javascript没有取消的标准化类型，由于异步Javascript函数将始终运行完成，因此该机制还需要遵循上述所描述的模式。<code>C++</code>协程可以使用cppcoro库中定义的CancellationToken。</p><p>Rust对Cancellation的支持与其他支持async/await的语言有所不同。</p><ul><li>只需删除表示异步操作的Future即可触发取消</li><li>不需要方法来转发取消请求或取消能力（例如，通过传递CancellationToken）</li><li>取消是同步的 - 因为drop()是同步的</li><li>取消不包括单独的取消请求并等待操作完成的步骤。只有一个取消/删除步骤。</li><li>取消被强制执行 - 子方法不能忽视或推迟取消</li></ul><p>这些特性有优点也有缺点：</p><ul><li>取消任务将变得简单</li><li>主要缺点是底层操作必须支持同步取消，比如处理操作系统底层IO的时候，会比较麻烦。但该文章中也给出了一些解决办法。</li></ul><p>更多内容请查看原文。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//gist.github.com/Matthias247/ffc0f189742abf6aa41a226fe07398a8" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//gist.github.com/Matthias247" class=" wrap external" target="_blank" rel="nofollow noreferrer">文章列表</a></li></ul><h3>如何用Rust实现一个Chat App</h3><p>本文介绍了如何使用Rust和简单的JavaScript在本地机器上构建简单的聊天应用程序。主要的技术栈是Rocket/websocket/JavaScript（你也可以使用TypeScript）</p><p><a href="https://link.zhihu.com/?target=https%3A//medium.com/%40steadylearner/how-to-start-rust-chat-app-499a194d0820" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>禅与系统中移除阻塞（block）的艺术</h3><p>标题仿自《禅与摩托车维修的艺术》。该文是servo的某个贡献者写的文章，他介绍了如何从并行系统中删除阻塞逻辑。长文预警！</p><p><a href="https://link.zhihu.com/?target=https%3A//medium.com/%40polyglot_factotum/programming-servo-zen-and-the-art-of-removing-blocks-from-your-system-51c1b7d404e3" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>「系列」 使用Rust创建静态文件服务器 Part 2</h3><p><a href="https://link.zhihu.com/?target=http%3A//concisecoder.io/2019/05/27/creating-a-static-http-server-with-rust-part-2/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>小技巧：cargo clean的时候，不想重新编译依赖，怎么办？</h3><p><code>cargo clean</code> 之后，会重头开始编译，各种依赖会重新编译。那么如果只想重头编自己工程中的代码，不想把依赖全部重新编译呢？答案很简单：</p><div class="highlight"><pre><code class="language-text">cargo clean -p &lt;your_crate_name&gt;</code></pre></div><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bvo0j9/how_to_cargo_clean_without_cleaning_compiled/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Rust 中最好的 2D 游戏开发框架一览</h3><p>作者为了对比，用以下框架分别写了同一个小游戏，以做出对比。</p><ul><li>ggez</li><li>tetra</li><li>quicksilver</li><li>coffee</li><li>Piston</li><li>Amethyst</li></ul><p>文章比较长，内容非常详实，做游戏开发的同学值得一读。</p><p><a href="https://link.zhihu.com/?target=https%3A//wiki.alopex.li/AGuideToRustGameFrameworks2019" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><hr/><h2>项目与库</h2><h3>toast: 支持在docker容器中运行任务的工具</h3><div class="highlight"><pre><code class="language-yaml">image<span class="p">:</span><span class="w"> </span>ubuntu<span class="w">
</span><span class="w"></span>tasks<span class="p">:</span><span class="w">
</span><span class="w">  </span>greet<span class="p">:</span><span class="w">
</span><span class="w">    </span>command<span class="p">:</span><span class="w"> </span>echo<span class="w"> </span><span class="s1">&#39;Hello, World!&#39;</span><span class="w"> </span><span class="c"># Toast will run this in a container.</span></code></pre></div><p class="ztext-empty-paragraph"><br/></p><p>当然你还可以用它完成更多更复杂的任务：交叉编译、监控文件变化等等。但是Toast不会并行运行任务，而必须使用顺序执行计划，这是受Docker限制的，但是在单个任务中使用并行。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/stepchowfun/toast" class=" wrap external" target="_blank" rel="nofollow noreferrer">toast</a></p><h3>Plotters：Rust的绘图库</h3><p>虽然在大多数情况下渲染图形并不需要太多的计算能力，并且诸如Python和Javascript的编程语言用于可视化目的。有时我们需要根据大量数据制作一个数字，例如，渲染一些人类基因数据可能需要对数万亿个数据点进行下采样，这对于许多高级编程语言来说甚至都不可行。在这种情况下，Rust是渲染数字的完美候选者，因为它具有高级抽象能力，但运行速度非常快。</p><p>Plotter目前支持使用HTML5画布的后端，也支持wasm，在其项目demo里有plotters+wasm的示例。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-9f7f50111a7ab088739ddeb1c611ee5f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1024" data-rawheight="768" class="origin_image zh-lightbox-thumb" width="1024" data-original="https://pic4.zhimg.com/v2-9f7f50111a7ab088739ddeb1c611ee5f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-9f7f50111a7ab088739ddeb1c611ee5f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1024" data-rawheight="768" class="origin_image zh-lightbox-thumb lazy" width="1024" data-original="https://pic4.zhimg.com/v2-9f7f50111a7ab088739ddeb1c611ee5f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-9f7f50111a7ab088739ddeb1c611ee5f_b.jpg"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-0fa0e3be7e947292d0251eb54eac3067_b.jpg" data-caption="" data-size="normal" data-rawwidth="640" data-rawheight="480" class="origin_image zh-lightbox-thumb" width="640" data-original="https://pic4.zhimg.com/v2-0fa0e3be7e947292d0251eb54eac3067_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-0fa0e3be7e947292d0251eb54eac3067_b.jpg" data-caption="" data-size="normal" data-rawwidth="640" data-rawheight="480" class="origin_image zh-lightbox-thumb lazy" width="640" data-original="https://pic4.zhimg.com/v2-0fa0e3be7e947292d0251eb54eac3067_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-0fa0e3be7e947292d0251eb54eac3067_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/38/plotters" class=" wrap external" target="_blank" rel="nofollow noreferrer">plotters</a></p><h3>「物理模拟」Calcify 0.5.6 发布</h3><p>Calcify是用于3-D和4-D矢量和矩阵代数的crate，被设想用于物理模拟。它基于一个基本的ThreeVec结构构建，包括内置的最常用操作。它包括物理常量，3和4-D向量和矩阵以及许多相关的操作，集合，直方图和输出树，可以在json或MessagePack中序列化。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/JTPond/calcify" class=" wrap external" target="_blank" rel="nofollow noreferrer">calcify</a></p><h3>terminal-typeracer: 命令行打字游戏</h3><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-1f89d8206efee584bba8a0bd72c3765e_b.jpg" data-caption="" data-size="normal" data-rawwidth="1812" data-rawheight="400" class="origin_image zh-lightbox-thumb" width="1812" data-original="https://pic3.zhimg.com/v2-1f89d8206efee584bba8a0bd72c3765e_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-1f89d8206efee584bba8a0bd72c3765e_b.jpg" data-caption="" data-size="normal" data-rawwidth="1812" data-rawheight="400" class="origin_image zh-lightbox-thumb lazy" width="1812" data-original="https://pic3.zhimg.com/v2-1f89d8206efee584bba8a0bd72c3765e_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-1f89d8206efee584bba8a0bd72c3765e_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p><a href="https://link.zhihu.com/?target=https%3A//gitlab.com/DarrienG/terminal-typeracer" class=" wrap external" target="_blank" rel="nofollow noreferrer">terminal-typeracer</a></p><h3>pris:一种用于设计幻灯片和其他图形的特定领域语言</h3><p>特性：</p><ul><li>可以编译为PDF</li><li>完整的排版控制</li><li>一流的检查和操作支持</li></ul><p><a href="https://link.zhihu.com/?target=https%3A//github.com/ruuda/pris" class=" wrap external" target="_blank" rel="nofollow noreferrer">pris</a></p><h3>limber: 用于备份Elasticsearch文档的简单（但快速）工具</h3><p><a href="https://link.zhihu.com/?target=https%3A//github.com/whitfin/limber" class=" wrap external" target="_blank" rel="nofollow noreferrer">limber</a></p><h3>「嵌入式」Hawk-Rust系列：树莓派相机的驱动</h3><p>Raspberry Pi提供了一组GPIO（通用输入/输出）引脚，允许您控制用于物理计算的电子组件并探索物联网（IoT）。 相机模块是Raspberry Pi的绝佳配件，它允许用户拍摄静态照片并以全高清录制视频。</p><p>HAWK是一个基于Rust的图像识别项目，它通过使用RFID卡进行用户识别和Image进行用户验证来实现双因素身份验证。本文展示了如何使用Rust程序触发树莓派的摄像头。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//blog.knoldus.com/hawk-rust-series-actuation-of-raspberry-pi-camera/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/knoldus/hawk" class=" wrap external" target="_blank" rel="nofollow noreferrer">hawk</a></li></ul><h3>orkhon: 机器学习框架和运行时</h3><p>Orkhon是用于机器学习的Rust框架，用于运行/使用用Python编写的推理/预测代码，冻结模型和处理未知（unseen）数据。 </p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/vertexclique/orkhon" class=" wrap external" target="_blank" rel="nofollow noreferrer">orkhon</a></p><h3>metrics: 高性能metrics(性能指标)库</h3><p>基于trait抽象，提供稳定API，支持Prometheus</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/metrics-rs/metrics" class=" wrap external" target="_blank" rel="nofollow noreferrer">metrics</a></p><h3>leg: 用于美化命令行输出的库</h3><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-07327f4969b98f39da9270e418d33a1a_b.jpg" data-caption="" data-size="normal" data-rawwidth="555" data-rawheight="266" class="origin_image zh-lightbox-thumb" width="555" data-original="https://pic3.zhimg.com/v2-07327f4969b98f39da9270e418d33a1a_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-07327f4969b98f39da9270e418d33a1a_b.jpg" data-caption="" data-size="normal" data-rawwidth="555" data-rawheight="266" class="origin_image zh-lightbox-thumb lazy" width="555" data-original="https://pic3.zhimg.com/v2-07327f4969b98f39da9270e418d33a1a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-07327f4969b98f39da9270e418d33a1a_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/jesusprubio/leg" class=" wrap external" target="_blank" rel="nofollow noreferrer">leg</a></p><h3>nameof - 替代 stringify! 的一个宏</h3><p>设计这个库的目的是改进调试体验，对比 stringify!() 来说，有利于更方便地重构。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/SilentByte/nameof" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>j4rs 從rust调用java</h3><p>在rust裡面建立 JvmBuilder 再调用 java 函數</p><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bur020/announcing_j4rs_calling_java_code_from_rust/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read more</a></p><h3>一個乒乓球的遊戲使用WASM</h3><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bv41o9/a_pong_game_with_wasmbindgen_websys_and_jssys/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read more</a></p><h3>rust-battop: 交互式终端笔记本电池电量可视化工具</h3><p>基于Tui-rs实现。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/svartalf/rust-battop" class=" wrap external" target="_blank" rel="nofollow noreferrer">rust-battop</a></p><h3>从Rust调用Go库：使用SQIP进行案例研究</h3><p>SQIP 是基于SVG 的LQIO 方案，其能够用于生成可用的SVG格式。作者之前用Node.js中的SQIP包，但是不够稳定，然后又打算用Rust重新实现，又不打算重头编写，所以找到了SQIP的Go绑定库，想通过FFI在Rust中调用Go代码。但是和Cgo打交道，性能不知道如何。</p><p><a href="https://link.zhihu.com/?target=https%3A//blog.arranfrance.com/post/cgo-sqip-rust/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>dua - 并行的文件统计工具</h3><p>也就是 du 的翻版啦。这个用上了Rust的并行化技术。速度比原来的 du 更快，特别是在SSD下更快。比如像下面这样测试</p><div class="highlight"><pre><code class="language-text">time du -sh real 0m1.003s

time dua -t 8 real 0m0.378s

time dua -t 1 real 0m0.971s</code></pre></div><p><a href="https://link.zhihu.com/?target=https%3A//github.com/Byron/dua-cli" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>sunfish 国际象棋游戏</h3><p>是对之前的实现的Rust重写。可以在<a href="https://link.zhihu.com/?target=https%3A//lichess.org/%40/sunfish_rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">这里</a>试玩。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/Recursing/sunfish_rs/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>minisketch-rs - @sipa 的 minisketch 库的 Rust 绑定</h3><p>minisketch 是一种用于提升比特币网络的交易传输效率的技术。@sipa 是比特币开发者。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/eupn/minisketch-rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>Weave - 终端 http 路由/代理</h3><p>是一个命令行工具。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/jsdw/weave" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>wgpu - 用 Rust 实现 WebGPU 协议</h3><p>这个库基于 gfx-hal 来做。这个库会同时支持 WebGPU 和 WebGL。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/gfx-rs/wgpu/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>最近出现的Rust实现的新的语言</h3><ul><li><a href="https://link.zhihu.com/?target=https%3A//sites.google.com/view/lcore" class=" wrap external" target="_blank" rel="nofollow noreferrer">LambdaCore: Lisp家族又多了一员</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/ffwff/hana" class=" wrap external" target="_blank" rel="nofollow noreferrer">haha: 一个简单的动态脚本语言，受js和Ruby启发。使用C实现的VM，Rust来实现解析编译为特定字节码haru</a></li></ul>