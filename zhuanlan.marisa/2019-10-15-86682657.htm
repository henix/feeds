<div class="title-image"><img src="https://pic1.zhimg.com/v2-571f867e6b9708388f8023b102401d08_b.jpg" alt=""></div><p>看到一篇反映了一些多数人对 APL 的误解的 art，决定写点文章让更多人了解真正的 APL。</p><a href="https://zhuanlan.zhihu.com/p/21601402" data-draft-node="block" data-draft-type="link-card" class="internal">bhuztez：函数式-21天入门教程</a><blockquote>在原始APL里，求平均数，通常的写法是<br/> <img src="https://www.zhihu.com/equation?tex=avg%5Cleftarrow+%5C%7B%28%2B%5Comega%29%5Cdiv%5Cnot%5Cequiv+%5Comega%5C%7D" alt="avg\leftarrow \{(+\omega)\div\not\equiv \omega\}" eeimg="1"/> </blockquote><p>我不知道原始的 APL 指的是啥，不过 direct definition (用 {} 定义匿名函数， <img src="https://www.zhihu.com/equation?tex=%5Calpha%5C+%5Comega" alt="\alpha\ \omega" eeimg="1"/> 指代参数) 是 Dyalog 搞的，叫 D-function，后來改叫 dfns，然後其它如 GNU APL 仿了 Dyalog 的这个feature，而且这个实现的历史可沒那么早</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_b.jpg" data-caption="" data-size="normal" data-rawwidth="857" data-rawheight="621" class="origin_image zh-lightbox-thumb" width="857" data-original="https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_b.jpg" data-caption="" data-size="normal" data-rawwidth="857" data-rawheight="621" class="origin_image zh-lightbox-thumb lazy" width="857" data-original="https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_b.jpg"/></figure><p>你看，2010 年的 APLX<sup data-text="APLX" data-url="https://www.dyalog.com/aplx.htm" data-draft-node="inline" data-draft-type="reference" data-numero="1">[1]</sup> 都压根不支持 dfns。(APLX 是比較接近 APL2 的，不过 IBM 的 APL2<sup data-text="IBM APL2" data-url="https://www.ibm.com/us-en/marketplace/apl2" data-draft-node="inline" data-draft-type="reference" data-numero="2">[2]</sup> 当然是最标准的，可惜我沒有 mainframe 可以用)</p><p>可以查到的是 </p><blockquote>These ideas were first presented in the Dyadic Vendor Forum at APL96 where they appeared to meet with general approval. Dfns were introduced with APL/W version 8.1 release 1 in early 1997.<sup data-text="Vector, Vol. 13.2, 88 “Dynamic Functions in Dyalog APL”" data-url="https://www.dyalog.com/uploads/documents/Papers/dfns.pdf" data-draft-node="inline" data-draft-type="reference" data-numero="3">[3]</sup></blockquote><p>direct definition 设计的來源可以查到 Ken Iverson 的 Turing Award lecture<i> Notation as a Tool of Thought。</i>不过那时只有个很粗浅的 direct definition to header form 的 subroutine，并不能直接用 arrow 赋值，更沒有能让 dfsn 被称为 FP lang 的 lexical scope，guard。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1194" data-rawheight="598" class="origin_image zh-lightbox-thumb" width="1194" data-original="https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1194" data-rawheight="598" class="origin_image zh-lightbox-thumb lazy" width="1194" data-original="https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_b.jpg"/></figure><p>So，J 是什么时候的，</p><blockquote>The first line of code in the J implementation was<br/>written on Sunday, August 27, 1989<sup data-text="" data-url="http://jsoftware.com/pipermail/general/2002-March/010962.html" data-draft-node="inline" data-draft-type="reference" data-numero="4">[4]</sup></blockquote><p>但是保守一点，最晚 1991 年吧，这个时候 Ken Iverson 用 J 写的 Arithmetic<sup data-text=" Iverson, K.E., Arithmetic, Iverson Software Inc., 1991" data-url="http://www.jsoftware.com/books/pdf/arithmetic.zip" data-draft-node="inline" data-draft-type="reference" data-numero="5">[5]</sup>里己有用文章提到的 [ ] op 了。而且同书中 J 也有和 direct definition 相似但出奇鬼畜的 <a href="https://link.zhihu.com/?target=https%3A//www.jsoftware.com/help/dictionary/d310n.htm" class=" wrap external" target="_blank" rel="nofollow noreferrer">Explicit Definition</a>。</p><p>所以硬要用个更新的 feature 当成 legacy 和一个语言中不能起到 eliminate 更难用的同类功能作用的 feature 比较，这样的讲理说服力堪优啊。</p><blockquote>J使用了 [ 和 ] 这两个函数<br/><br/>x [ y = x<br/>x ] y = y</blockquote><p>这不就是 APL 的 <img src="https://www.zhihu.com/equation?tex=%5Cdashv%5C+%5Cvdash" alt="\dashv\ \vdash" eeimg="1"/> 么。</p><figure data-size="small"><noscript><img src="https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_b.jpg" data-caption="" data-size="small" data-rawwidth="790" data-rawheight="786" class="origin_image zh-lightbox-thumb" width="790" data-original="https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_b.jpg" data-caption="" data-size="small" data-rawwidth="790" data-rawheight="786" class="origin_image zh-lightbox-thumb lazy" width="790" data-original="https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_b.jpg"/></figure><figure data-size="small"><noscript><img src="https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_b.jpg" data-caption="" data-size="small" data-rawwidth="694" data-rawheight="790" class="origin_image zh-lightbox-thumb" width="694" data-original="https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_b.jpg" data-caption="" data-size="small" data-rawwidth="694" data-rawheight="790" class="origin_image zh-lightbox-thumb lazy" width="694" data-original="https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_b.jpg"/></figure><p>这个是 2000 年的 ISO 标准，咋了，太新了？那我给你们看看 1987 的 <a href="https://link.zhihu.com/?target=https%3A//www.jsoftware.com/papers/APLDictionary.htm" class=" wrap external" target="_blank" rel="nofollow noreferrer">A Dictionary of APL</a> 吧，(网页版字体不能显示，老夫 copy 进 emacs 截个图)</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_b.png" data-caption="" data-size="normal" data-rawwidth="1528" data-rawheight="224" class="origin_image zh-lightbox-thumb" width="1528" data-original="https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_b.png" data-caption="" data-size="normal" data-rawwidth="1528" data-rawheight="224" class="origin_image zh-lightbox-thumb lazy" width="1528" data-original="https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_b.png"/></figure><p>为什么会这样呢</p><blockquote>Roger and I then began a collaboration on the design and implementation of a dialect of APL(later named J by Roger), first deciding to roughly follow &#34;A Dictionary of APL&#34;<sup data-text="A Personal View of APL" data-url="https://web.archive.org/web/20040812193452/http://home1.gte.net/res057qw/APL_J/IversonAPL.htm" data-draft-node="inline" data-draft-type="reference" data-numero="6">[6]</sup></blockquote><p>于是就䃼正个了这样几个微妙的误解。</p><p>ps. Dyalog 有个 <a href="https://link.zhihu.com/?target=https%3A//dfns.dyalog.com/n_tacit.htm" class=" wrap external" target="_blank" rel="nofollow noreferrer">dfns to tacit 的 tut</a> ，不过只对 Dyalog 适用。GNU APL 用不來。</p><p>另外下一篇更正式的关于 APL 的介绍也在写呢</p><blockquote>APL 是四门语言，一是 A Programming Language 书设计的 elements of programming。<br/>二为 IBM Selectric 上的正交性非常的 symbol notation。<br/>三为据传來自 <i><a href="https://link.zhihu.com/?target=https%3A//www.jsoftware.com/jwiki/Doc/Elementary%2520Analysis" class=" wrap external" target="_blank" rel="nofollow noreferrer">Elementary Analysis</a></i> (这书太老找不到) 的 direct definition form，Dyalog 叫 dfns 的 FP language。<br/>四为 Ken Iverson 后來重新发明的 J。</blockquote><h2>FAQ:</h2><p>Q: J 比 APL 先进吗？</p><p>A: J 比 J 之前的 APL 先进。J 之后的包括 Dyalog 在內吸收了不少 J 的特性呢。</p><p>Q: J 和 APL 什么关系？</p><p>A: 两个都是加拿大数学家 K. E. Iverson 参与设计的。比較有意思的是 JSoftware 是 Ken Iversion 他儿子 Eric Iversion 的公司，也就是老子给儿子打工。</p><p>Q: 我能用 APL 找到工作吗？</p><p>A: 我听说过有个在 STSC 搞 APL 的离职以后被大学資助读了个数学 phd 教书的说。</p>