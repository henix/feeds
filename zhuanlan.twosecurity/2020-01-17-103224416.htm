<div class="title-image"><img src="https://pic1.zhimg.com/v2-8d9bc030ff73aa70931523b798ba619d_b.jpg" alt=""></div><p>说到 XSS 相信大家肯定都不陌生（都 2020 年了，还在讲 XSS 这种老掉牙的东西），有些人甚至看到输入框就想往里面输 &lt;script&gt;alert(1)&lt;/script&gt; ，今天我们就来学习 <b>怎样在 HTTP 头中进行 XSS ？</b></p><p>直奔主题，先几个 XSS 的经典案例：</p><ul><li>&lt;form action=&#34;/xss.php/&#34;&gt;&lt;svg onload=alert(1)&gt;&#34; method=&#34;POST&#34;&gt;</li><li>&lt;p&gt;&lt;svg onload=alert(1)&gt;&lt;/p&gt;</li><li>&lt;input type=&#34;text&#34; name=&#34;a&#34; value=&#34;&#34;&gt;&lt;svg onload=alert(1)&gt;&#34;&gt;</li><li>&lt;input type=&#34;text&#34; name=&#34;a&#34; value=&#34;&#34;&amp;gt;&gt;&lt;svg onload=alert(1)&amp;gt;&#34;&gt;</li><li>var test = &#39;&lt;/script&gt;&lt;svg onload=alert(1)&gt;&#39;;</li><li>...</li></ul><p>当然，远不止这些，枚不胜举。</p><p>其他关于 XSS 的知识就不多讲了，毕竟是老生常谈的东西，下面就来讲讲不一般的 XSS。</p><h2>HTTP头中的XSS</h2><p>开门见山，在某些情况下，没有清除应用程序 HTTP 头中传递的信息，并将其输出到请求页面的某个位置时，导致的 XSS 情况。</p><p><b>一种情况</b></p><p>我们可以控制 HTTP 头中的某些信息存储在数据库中，然后在同一页面中，应用程序中的其他任何地方甚至在另一个不可访问的系统中检索到。但是，由于 CDN 和 WAF 的存在，还存在另一种非常普遍的情况，无需进行数据库操作即可持续进行攻击：<b>Web 缓存中毒</b></p><h2>实践</h2><p>练习地址：<a href="https://link.zhihu.com/?target=https%3A//brutelogic.com.br/lab/header.php" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">brutelogic.com.br/lab/h</span><span class="invisible">eader.php</span><span class="ellipsis"></span></a></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-b82c6540b599044e291e72c7c2444afd_b.jpg" data-caption="" data-size="normal" data-rawwidth="1244" data-rawheight="288" class="origin_image zh-lightbox-thumb" width="1244" data-original="https://pic2.zhimg.com/v2-b82c6540b599044e291e72c7c2444afd_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-b82c6540b599044e291e72c7c2444afd_b.jpg" data-caption="" data-size="normal" data-rawwidth="1244" data-rawheight="288" class="origin_image zh-lightbox-thumb lazy" width="1244" data-original="https://pic2.zhimg.com/v2-b82c6540b599044e291e72c7c2444afd_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-b82c6540b599044e291e72c7c2444afd_b.jpg"/></figure><div class="highlight"><pre><code class="language-text">&lt;?=json_encode(getallheaders()).&#34;\n&#34;;</code></pre></div><p>在命令行中执行命令 curl -i，它向我们显示了响应的 HTTP 标头以及 JSON 格式的请求头。</p><blockquote>curl 是一种命令行工具，作用是发出网络请求，然后获取数据，显示在&#34;标准输出&#34;（stdout）上面，它支持多种协议。<br/>-i 参数可以显示 http response 的头信息，连同网页代码一起。</blockquote><figure data-size="small"><noscript><img src="https://pic1.zhimg.com/v2-aa4061a3796868454a93481d64b48d70_b.jpg" data-caption="" data-size="small" data-rawwidth="808" data-rawheight="291" class="origin_image zh-lightbox-thumb" width="808" data-original="https://pic1.zhimg.com/v2-aa4061a3796868454a93481d64b48d70_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-aa4061a3796868454a93481d64b48d70_b.jpg" data-caption="" data-size="small" data-rawwidth="808" data-rawheight="291" class="origin_image zh-lightbox-thumb lazy" width="808" data-original="https://pic1.zhimg.com/v2-aa4061a3796868454a93481d64b48d70_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-aa4061a3796868454a93481d64b48d70_b.jpg"/></figure><p>由于实验靶场的 WAF 提供了最后一个标头 x-sucuri-cache，因此我们需要在 URL 中添加一些内容来避免缓存，该标头的值为 HIT，意思就是它来着 WAF 的缓存。</p><figure data-size="small"><noscript><img src="https://pic4.zhimg.com/v2-d7011e7d8adf9b7b17fb300869ff47b3_b.jpg" data-caption="" data-size="small" data-rawwidth="808" data-rawheight="291" class="origin_image zh-lightbox-thumb" width="808" data-original="https://pic4.zhimg.com/v2-d7011e7d8adf9b7b17fb300869ff47b3_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-d7011e7d8adf9b7b17fb300869ff47b3_b.jpg" data-caption="" data-size="small" data-rawwidth="808" data-rawheight="291" class="origin_image zh-lightbox-thumb lazy" width="808" data-original="https://pic4.zhimg.com/v2-d7011e7d8adf9b7b17fb300869ff47b3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-d7011e7d8adf9b7b17fb300869ff47b3_b.jpg"/></figure><p>因此，访问带参数“lololol”的页面，我们能够得到页面的非缓存版本，标头 x-sucuri-cache 的标头值变成了 MISS 。再注入自己的标头（使用参数 -H），以检查它是否以响应的形式出现。</p><blockquote>-H --header 在 http request 之中，自行增加一个头信息。</blockquote><figure data-size="small"><noscript><img src="https://pic4.zhimg.com/v2-1f28a0d1e5b6e0ed7b968e4bbfb7eb6f_b.jpg" data-caption="" data-size="small" data-rawwidth="826" data-rawheight="309" class="origin_image zh-lightbox-thumb" width="826" data-original="https://pic4.zhimg.com/v2-1f28a0d1e5b6e0ed7b968e4bbfb7eb6f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-1f28a0d1e5b6e0ed7b968e4bbfb7eb6f_b.jpg" data-caption="" data-size="small" data-rawwidth="826" data-rawheight="309" class="origin_image zh-lightbox-thumb lazy" width="826" data-original="https://pic4.zhimg.com/v2-1f28a0d1e5b6e0ed7b968e4bbfb7eb6f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-1f28a0d1e5b6e0ed7b968e4bbfb7eb6f_b.jpg"/></figure><p>响应成功，得到带有 Test：myValue 的响应。再更改字符串为“kkkkk”发出另一个请求，不然将返回带有“ lololol”字符串的缓存响应。</p><figure data-size="small"><noscript><img src="https://pic3.zhimg.com/v2-46012439231177073cd5f04820655462_b.jpg" data-caption="" data-size="small" data-rawwidth="826" data-rawheight="327" class="origin_image zh-lightbox-thumb" width="826" data-original="https://pic3.zhimg.com/v2-46012439231177073cd5f04820655462_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-46012439231177073cd5f04820655462_b.jpg" data-caption="" data-size="small" data-rawwidth="826" data-rawheight="327" class="origin_image zh-lightbox-thumb lazy" width="826" data-original="https://pic3.zhimg.com/v2-46012439231177073cd5f04820655462_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-46012439231177073cd5f04820655462_b.jpg"/></figure><p>再使用“kkkkk”作为字符串来再次开始缓存处理。如上图所示，还带入了 XSS payload。但仅是对自己有用，因为只是本机终端发送该标头。payload 不会出现在其他的浏览器请求中。</p><figure data-size="small"><noscript><img src="https://pic4.zhimg.com/v2-0ddadd5204c80daf1cff10ac5ff91927_b.jpg" data-caption="" data-size="small" data-rawwidth="826" data-rawheight="327" class="origin_image zh-lightbox-thumb" width="826" data-original="https://pic4.zhimg.com/v2-0ddadd5204c80daf1cff10ac5ff91927_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-0ddadd5204c80daf1cff10ac5ff91927_b.jpg" data-caption="" data-size="small" data-rawwidth="826" data-rawheight="327" class="origin_image zh-lightbox-thumb lazy" width="826" data-original="https://pic4.zhimg.com/v2-0ddadd5204c80daf1cff10ac5ff91927_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-0ddadd5204c80daf1cff10ac5ff91927_b.jpg"/></figure><p>发另一个请求（注意看 data 时间不同），貌似没有什么区别。这是因为缓存机制是基于 MISS-MISS-HIT，因此下一个为 MISS。</p><figure data-size="small"><noscript><img src="https://pic3.zhimg.com/v2-97afb366e58be6e82485e0935e7a9c62_b.jpg" data-caption="" data-size="small" data-rawwidth="826" data-rawheight="327" class="origin_image zh-lightbox-thumb" width="826" data-original="https://pic3.zhimg.com/v2-97afb366e58be6e82485e0935e7a9c62_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-97afb366e58be6e82485e0935e7a9c62_b.jpg" data-caption="" data-size="small" data-rawwidth="826" data-rawheight="327" class="origin_image zh-lightbox-thumb lazy" width="826" data-original="https://pic3.zhimg.com/v2-97afb366e58be6e82485e0935e7a9c62_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-97afb366e58be6e82485e0935e7a9c62_b.jpg"/></figure><p>验证是否已经缓存，打开目标 URL</p><div class="highlight"><pre><code class="language-text">https://brutelogic.com.br/lab/header.php?kkkkk</code></pre></div><figure data-size="small"><noscript><img src="https://pic2.zhimg.com/v2-c361c13cc53344e2a2337ea340161de1_b.jpg" data-caption="" data-size="small" data-rawwidth="912" data-rawheight="273" class="origin_image zh-lightbox-thumb" width="912" data-original="https://pic2.zhimg.com/v2-c361c13cc53344e2a2337ea340161de1_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-c361c13cc53344e2a2337ea340161de1_b.jpg" data-caption="" data-size="small" data-rawwidth="912" data-rawheight="273" class="origin_image zh-lightbox-thumb lazy" width="912" data-original="https://pic2.zhimg.com/v2-c361c13cc53344e2a2337ea340161de1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-c361c13cc53344e2a2337ea340161de1_b.jpg"/></figure><p>该 URL 将保持中毒状态，直到缓存过期，这就是缓存投毒。</p><p>练习地址2：<a href="https://link.zhihu.com/?target=https%3A//brutelogic.com.br/lab/welcome.php" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">brutelogic.com.br/lab/w</span><span class="invisible">elcome.php</span><span class="ellipsis"></span></a></p><p>工作原理跟上面一样，不过没有了那么明显的输出点，执行 XSS 需要先找到输出点。页面的源代码如下：</p><div class="highlight"><pre><code class="language-text">&lt;!DOCTYPE html&gt;
&lt;body&gt;
&lt;?php
$name = $_COOKIE[&#34;name&#34;];
if($name){
    echo &#34;&lt;p&gt;Welcome, $name!&lt;/p&gt;\n&#34;;
}else{
    echo &#34;&lt;p&gt;Welcome, guest!&lt;/p&gt;\n&#34;;
}
?&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></div><p><b>尝试进行 XSS 吧，完成的同学，评论区欢迎:)</b></p><blockquote><b>来源：</b><a href="https://link.zhihu.com/?target=https%3A//brutelogic.com.br/blog/xss-via-http-headers/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">brutelogic.com.br/blog/</span><span class="invisible">xss-via-http-headers/</span><span class="ellipsis"></span></a></blockquote><p><a href="https://link.zhihu.com/?target=https%3A//www.baidu.com/link%3Furl%3DOcGTJIGtwpNYrGru7tSszpEf10ZQ0xIE7SvER9ejNcCar00KI-fG2lu214M4WKPc%26wd%3D%26eqid%3Da24dabb2002f492b000000065e13d46a" class=" wrap external" target="_blank" rel="nofollow noreferrer">二向箔安全</a>的网络安全技能包更新了！CISP-PTE 认证技能包，让你免费体验 CISP-PTE 认证内容。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-4dee42455568cb70950f0a0c75214d22_b.jpg" data-caption="" data-size="normal" data-rawwidth="3058" data-rawheight="1720" class="origin_image zh-lightbox-thumb" width="3058" data-original="https://pic3.zhimg.com/v2-4dee42455568cb70950f0a0c75214d22_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-4dee42455568cb70950f0a0c75214d22_b.jpg" data-caption="" data-size="normal" data-rawwidth="3058" data-rawheight="1720" class="origin_image zh-lightbox-thumb lazy" width="3058" data-original="https://pic3.zhimg.com/v2-4dee42455568cb70950f0a0c75214d22_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-4dee42455568cb70950f0a0c75214d22_b.jpg"/></figure><p>更多有关渗透测试的内容请前往<a href="https://link.zhihu.com/?target=https%3A//www.baidu.com/link%3Furl%3DOcGTJIGtwpNYrGru7tSszpEf10ZQ0xIE7SvER9ejNcCar00KI-fG2lu214M4WKPc%26wd%3D%26eqid%3Da24dabb2002f492b000000065e13d46a" class=" wrap external" target="_blank" rel="nofollow noreferrer">二向箔安全</a>进行学习，最近推出了“挖洞”班，想了解更多资讯的，可咨询客服微信 <b>twosecurity02</b></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_b.jpg" data-caption="" data-size="normal" data-rawwidth="3041" data-rawheight="2000" class="origin_image zh-lightbox-thumb" width="3041" data-original="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_b.jpg" data-caption="" data-size="normal" data-rawwidth="3041" data-rawheight="2000" class="origin_image zh-lightbox-thumb lazy" width="3041" data-original="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_b.jpg"/></figure>