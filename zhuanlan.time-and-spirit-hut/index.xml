<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description>编程、读书、学习、境界提升</description>
<language>zh-cn</language>
<lastBuildDate>Wed, 06 Feb 2019 00:33:20 +0800</lastBuildDate>
<item>
<title>「Rust日报」2019每周精选 • 第四期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-02-03-56215526.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56215526&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-02-03&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;全球Rust招聘信息&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「远程工作」丹麦Impero的一家正规公司招全栈Web Rust工程师&lt;/h2&gt;&lt;p&gt;要求全栈Web工程师，懂Rust。主要工作应该是后端API设计。可远程&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//impero.com/job/full-stack-web-developer-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;公司招聘页面&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/alzs83/rust_fullstack_developer_denmark_or_remote/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit讨论页&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Discord 招聘Rust工程师&lt;/h2&gt;&lt;p&gt;Discord游戏商店大量使用了Rust，它们现在开始招Rust工程师，来做一个顶级保密的新项目。没有看到支持远程。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//discordapp.com/jobs/4200751002&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;招聘页面&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「北京」移动端图形渲染开发工程师&lt;/h2&gt;&lt;p&gt;岗位描述：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;开发业界顶级跨平台(macOS/iOS/Android)渲染器。 &lt;/li&gt;&lt;li&gt;编写Shader解析器。&lt;/li&gt;&lt;li&gt; 优化Shader执行效率。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;岗位要求： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;熟悉Rust/C++语言，有一年以上Rust开发经验更好。  &lt;/li&gt;&lt;li&gt;熟练掌握OpenGL ES /Metal/Vulkan其中两项或以上，最好熟悉SPIR-V规范。 &lt;/li&gt;&lt;li&gt;拥有良好的工程意义，可编写高质量、简洁、易维护的代码。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;内推邮箱，请备注简历+姓名 ： zhoujianquan 「@」&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//kuaishou.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;kuaishou.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;。欢迎推荐，转发。&lt;/p&gt;&lt;h2&gt;系统工程师工作GitHub仓库&lt;/h2&gt;&lt;p&gt;有人在GitHub上专门建立了一个帐号，建立了四个仓库：C/Cpp/Rust/Swift，用于收集世界各地用这四个语言的系统工程师招聘职位信息。&lt;/p&gt;&lt;p&gt;是一个新库，可以关注下，没准有需要呢？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/systems-programming-jobs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;systems-programming-jobs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rustwasm 2019 Roadmap&lt;/h2&gt;&lt;p&gt;当前，Roadmap已经提交PR，但未合并。可以先关注。&lt;/p&gt;&lt;p&gt;总的来说，目标就是从「可用」到「稳定」：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;通过模块化的工具来继续培养rust wasm的生态系统&lt;/li&gt;&lt;li&gt;为Rust生成的wasm带来多线程支持&lt;/li&gt;&lt;li&gt;在工具链中集成最佳的调试工具&lt;/li&gt;&lt;li&gt;打磨工具链和发布流程，直到wasm-pack发布1.0版&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/fitzgen/rfcs-1/blob/2019-roadmap/text/000-2019-roadmap.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Cargo的长期计划&lt;/h2&gt;&lt;p&gt;Cargo负责人nrc发文&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2019年：交叉编译，包括wasm和embeddded / 改进cargo，让插件更易编写&lt;/li&gt;&lt;li&gt;2020：将Cargo嵌入到构建系统和IDE中。&lt;/li&gt;&lt;li&gt;2021：为最终用户定制工作流程。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.ncameron.org/blog/cargos-next-few-years/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方」Rust基础设施团队正在考虑停止使用Travis CI&lt;/h2&gt;&lt;p&gt;将在下周柏林举行的Rust All Hands会议上讨论更换到哪个CI平台上面。文章里还罗列了Rust基础设施团队在Travis CI碰到的诸多问题，感兴趣可以看看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/which-ci-platform-should-rust-use/9322&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;RFC：为log增加dbg!风格的宏&lt;/h2&gt;&lt;h2&gt;log #dbg #debug&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang-nursery/log/pull/317&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Crossbeam 2019: 无锁Rust&lt;/h2&gt;&lt;p&gt;文章从介绍Crossbeam开始，先后罗列了从Crossbeam库从2015走到2018期间经历的变化，并展望了接下来重点要完成的工作：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AtomicReference&lt;/li&gt;&lt;li&gt;ConcurrentHashMap&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;增加这两个并发数据结构的支持。另外还有一些优先级较低的零碎工作。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Salsa: 增量式重新编译&lt;/h2&gt;&lt;p&gt;Niko介绍了他的新库：salsa。该库是将rustc中的增量式重新编译技术提出来变成一个通用的框架。Salsa现在已经被用在了一些项目中，比如rust-analyzer。但rustc本身并没有使用该库。Niko还录制了两个使用Salsa的视频教程。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//smallcultfollowing.com/babysteps/blog/2019/01/29/salsa-incremental-recompilation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust在基准测试排行榜中上升到了第一&lt;/h2&gt;&lt;p&gt;在以下几个算法测试项目中，Rust都战胜了其他语言，排行上升到了第一&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//benchmarksgame-team.pages.debian.net/benchmarksgame/performance/nbody.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;N-Body&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//benchmarksgame-team.pages.debian.net/benchmarksgame/performance/spectralnorm.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;spectral-norm&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//benchmarksgame-team.pages.debian.net/benchmarksgame/performance/revcomp.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;reverse-complement&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/akgmef/rust_nbody_benchmark_ranks_1/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;另一个性能测试&lt;/h2&gt;&lt;p&gt;该作者制作了一个Ruby脚本，包括了多种语言的基准测试（C，C ++，Rust，Go，Java和C＃，但可以添加更多），重新标准化了平均值。&lt;/p&gt;&lt;p&gt;得出的结论是：Rust在基准测试游戏中的表现优于C++ 3％，比C慢4％。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/akluxx/rust_now_on_average_outperforms_c_in_the/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」实验：STM32 MCU 性能如何？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//nercury.github.io/rust/embedded/experiments/2019/01/27/rust-embedded-02-measuring-the-clock.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;在TiKV中使用tower-grpc&lt;/h2&gt;&lt;p&gt;TiKV负责人siddontang写的一篇文章。TiKV团队之前自己实现了一个grpc库，但问题是该库。不是纯Rust实现，在生产环境中遇到了一些panic，所以想彻底拥抱Rust社区，使用纯Rust的库。但是又不想发明轮子。所以从grpc-rust和tower-grpc中选择了tower-grpc。&lt;/p&gt;&lt;p&gt;tower-grpc并不稳定，但是它的好处也是比较明显的。比如作者是非常活跃且知名的，基于tokio等。&lt;/p&gt;&lt;p&gt;另外：TiKV已经升级到了Rust 2018 Edition&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40siddontang/use-tower-grpc-for-tikv-6109cf8c61&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;GNome中的流媒体广播应用Gradio将用Rust重构&lt;/h2&gt;&lt;p&gt;重构后的项目叫Shortwave&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.gnome.org/World/Shortwave&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Shortwave&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blogs.gnome.org/haeckerfelix/2019/01/26/hello-world/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;现代C++和游戏开发的一些思考&lt;/h2&gt;&lt;p&gt;这篇文章和Rust没关系，但是可以看看CPP的现状。&lt;/p&gt;&lt;p&gt;长文，但是作者总结了两个观点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;要么，你什么都不要做。也就是说，你可以继续使用Cpp，但不要用它的任何新功能。继续用C++98。但这不是一个长期的解决方案。&lt;/li&gt;&lt;li&gt;要么，参与到Cpp的变革中。来参见CppCon，来参与Cpp委员会的讨论和议程，发出你的声音。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其实还有第三个选择：看看Rust。（作者并没有说）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.elbeno.com/blog/%3Fp%3D1598&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Apple为Swift语言申请了专利&lt;/h2&gt;&lt;p&gt;该文作者阐述了对Apple为Swift语言申请专利的担忧。该专利覆盖了Swift语言的整体理念。比如：&lt;/p&gt;&lt;blockquote&gt; 该语言在某些领域提供C语言兼容性的功能，以提高用该语言编写的软件的固有安全性。新语言包括默认安全注意事项，例如边界和溢出检查。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;大家如何看待？不知道会对Rust带来何种影响。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.i-programmer.info/news/98-languages/12495-apple-patents-swift.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/al2xoy/apple_patents_a_programming_language_with/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「系列文章」WebAssembly算不上一个栈虚拟机 Part I&lt;/h2&gt;&lt;p&gt;本文作者指出了当前WebAssembly设计的缺陷，表面是一个栈虚拟机，但实际上在编译层面是一个性能不算好的（liveless，对变量没有活跃期分析，而导致重复计算）寄存器式虚拟机，只是在最后才表现的像一个栈虚拟机。这个缺陷是来自于之前的设计规范是基于进一步简化asm.js而导致的历史原因。所以现在出现wasmtime这样的流式WebAssembly编译器来解决这种问题。&lt;/p&gt;&lt;p&gt;作者在后续还会写几篇关于WebAssembly问题的文章。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//troubles.md/posts/wasm-is-not-a-stack-machine/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;GitHub Actions: 自动format代码格式&lt;/h2&gt;&lt;p&gt;这是一个GitHub Action，支持对多种语言的软件的代码进行自动格式化。支持Rustfmt和Clippy。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/bltavares/actions&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;actions&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「讨论」你认为Rust代码组织有哪些最佳实践或陷阱？&lt;/h2&gt;&lt;p&gt;我个人是一个代码组织的实践就是：组件化。这也是Rust所倡导的。在单个组件之内，进行模块化，分清层次结构。&lt;/p&gt;&lt;p&gt;讨论中，也有喜欢扁平化的结构，这样方便测试，直到找到足够的理由再分拆单个组件包。&lt;/p&gt;&lt;p&gt;大家有什么分享的？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/alsph9/rusts_modules_and_project_organization_best/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「讨论」读Rust代码比写Rust代码更容易&lt;/h2&gt;&lt;p&gt;我也同意，Rust的代码可读性很好，读代码比写代码更容易。并且还可以总结出一些高效阅读代码的技巧，这完全得益于Rust的高度一致性。&lt;/p&gt;&lt;p&gt;讨论中提到了Cpp、Python、JS等其他语言的可读性探讨。这种争论应该还算可以接受，感兴趣可以关注下。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aloxsz/reading_rust_should_be_easier_than_writing_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust「无悔」并发&lt;/h2&gt;&lt;p&gt;无畏（fearless）并发难道已经过时了？现在是要流行无悔（regretless）并发了吗？&lt;/p&gt;&lt;p&gt;作者认为，无畏并发并不意味着「没有后悔」的时候。作者在本文中主要探讨了event-loop并发建模的诸多好处，并且如何利用Rust多线程来进行event-loop建模。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40polyglot_factotum/rust-regret-less-concurrency-2238b9e53333&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust web框架比拼&lt;/h2&gt;&lt;p&gt;这个GitHub项目汇集了Rust各种web框架的相关资料，包括Rust实现的前端WASM框架、Websocket、Template等项目。&lt;/p&gt;&lt;p&gt;还包括了很多博客、项目demo等学习资源。相当全面了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/flosse/rust-web-framework-comparison&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-web-framework-comparison&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列文章」Rust如何发送邮件&lt;/h2&gt;&lt;p&gt;作者将通过三篇文章来讲解如何用Rust编写邮件发送的代码。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.1aim.com/post/002-mail-1-intro/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;1/3 Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.1aim.com/post/003-mail-2-crate/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2/3 Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Blog OS系列： 高级分页&lt;/h2&gt;&lt;p&gt;这是继上篇内存分页介绍之后，进一步介绍操作系统内核如何访问物理页的技术，通过这种技术可以实现虚拟地址到物理地址的转化，以及如何在页表内创建映射。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//os.phil-opp.com/advanced-paging/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;如何用Rust开发iOS应用&lt;/h2&gt;&lt;p&gt;该文章介绍了如何使用Rust开发iOS应用，里面也有一份Rust on Android的文章链接。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/visly/rust-on-ios-39f799b3c1dd&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust闭包的秘密&lt;/h2&gt;&lt;p&gt;作者总结了Rust闭包中的一些规则，可以看看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40earthengine/rust-closures-secret-life-70d2394c5827&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「视频」直播合集：构建WebAssembly/WebGL渲染器&lt;/h2&gt;&lt;p&gt;作者在油管做了一系列的直播，这个视频是这些直播的合集，所以比较长，大约3小时多。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D7_5DX_lH0kI%26list%3DPLkzdeKCVtKYshqmgngLSqRV4UVt4QjaZ5&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dakom/pure3d&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相关代码： pure3d&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;inferno: 火焰图工具移植为Rust&lt;/h2&gt;&lt;p&gt;上次介绍过油管开直播视频讲如何移植火焰图工具那位作者的库&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/jonhoo/inferno&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;inferno&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.brendangregg.com/flamegraphs.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;flamegraphs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「长文」Rust性能：match vs 表查找&lt;/h2&gt;&lt;p&gt;该文作者在研究生物信息学(bioinformatics)算法的过程中，发现将Rust的match改成表查找，算法的性能得到了很大的提升。&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/luizirber/nthash/pull/2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;参见&lt;/a&gt;&lt;/p&gt;&lt;p&gt;将下面的match代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;match4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;b&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;b&#39;B&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;b&#39;C&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;b&#39;D&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改为：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lazy_static&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;lazy_static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lazy_static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOOKUP4&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;b&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;b&#39;B&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;b&#39;C&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;b&#39;D&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOOKUP4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且使用了lazy_static。&lt;/p&gt;&lt;p&gt;作者好奇，为什么编译器没有为match表达式生成最佳代码。于是他开始了一系列的测试和挖掘，从生成的汇编到LLVM都进行了一番考究。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//kevinlynagh.com/notes/match-vs-lookup/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用systemd、配置文件和.deb二进制构建Linux Web服务器&lt;/h2&gt;&lt;p&gt;通过cargo-deb，将你的web项目生成.deb文件，并配合systemd和配置文件，就可以把tide、actix-web或rocket等项目，变成像nginx那样的“Linux App”。就可以通过系统命令来启动你的服务。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl restart tide-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gill.net.in/posts/creating-web-server-deb-binary-with-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;FFI：在Node和Rust之间交换数据&lt;/h2&gt;&lt;p&gt;本文探讨了如何在Node和Rust之间传递数组、结构体等数据，以及如何使用回调。对于学习FFI也是一个好的案例。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//versbinarii.gitlab.io/blog/posts/node-rust-ffi-exchanging-data/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用rust和uinput创建Android虚拟输入设备&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//brunodmt.github.io/rust/2018/11/03/android-virtual-input-with-rust.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;用AWS和Rust进行Serverless App开发&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//versbinarii.gitlab.io/blog/posts/serverless-app-deployment-aws/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;tactical： wasm游戏&lt;/h2&gt;&lt;p&gt;之前介绍过，基于Rust实现的2D回合制游戏zemeroth，现在支持wasm&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//ozkriff.itch.io/zemeroth&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;itch.io在线玩&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ozkriff/zemeroth&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;zemeroth&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;whatlang-rs: Rust实现的自然语言检测库&lt;/h2&gt;&lt;p&gt;基于Rust和Wasm实现。可以检测语言属于哪国语言。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/greyblake/whatlang-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;whatlang-rs&lt;/a&gt; &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.greyblake.com/whatlang/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线demo&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;OOProxy: OpenID代理库&lt;/h2&gt;&lt;p&gt;该文作者介绍了OOProxy库，支持OpenID和OAuth2。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/hal24k-techblog/announcing-ooproxy-b041bab2bc85&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」构建支持嵌入式系统的Future Executor&lt;/h2&gt;&lt;p&gt;作者在实现一个模块化机械键盘的项目，在这个过程中，实现了一个可用于嵌入式的Future exector。为什么要自己实现？因为发现现在的嵌入式生态并不能满足他的需求。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/polymer-kb/polymer/blob/master/README.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;项目Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/polymer-kb/firmware/stm32f103xx-futures/blob/wip/src/serial.rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;stm32f103xx-futures&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//josh.robsonchase.com/embedded-executor/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;博文&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/polymer-kb/firmware/embedded-executor&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;embedded-executor&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Pushrod： Rust的UI库&lt;/h2&gt;&lt;p&gt;是属于Piston项目中的跨平台UI Weight库&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.github.com/KenSuenobu/rust-pushrod/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-pushrod&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;websocat: 命令行webscoket客户端工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/vi/websocat&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;websocat&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;log-derive: 方便加log的宏工具&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[logfn(Err = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;, fmt = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed Sending Packet: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;SocketAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TcpStream&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b&quot;Hi!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以自动生成log输出，跟踪函数调用，可用于调试代码。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/elichai/log-derive&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;log-derive&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust实现Redux&lt;/h2&gt;&lt;p&gt;且支持no_std&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/redux-rs/redux-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;redux-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Fluent-rs 0.5发布&lt;/h2&gt;&lt;p&gt;ProjectFluent是一个本地化（L18N）框架，fluent-rs是Rust实现。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//projectfluent.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/projectfluent/fluent-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fluent-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/projectfluent/fluent/wiki&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fluent Project Wiki介绍&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;用Rust实现Haskell中的group_by&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/Kerollmops/slice-group-by&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;slice-group-by&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;更短的UUID实现&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/seigert/shorter-uuid-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;shorter-uuid-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rust-numext: 扩展Rust的内建数字类型&lt;/h2&gt;&lt;p&gt;包含了大数和散列操作。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/cryptape/rust-numext&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-numext&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;derive_more  发布0.14版&lt;/h2&gt;&lt;p&gt;现在支持no_std环境&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/JelteF/derive_more&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;derive_more&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」Rust实现的显示器驱动&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Holtek CO₂ USB&lt;/code&gt;显示器的驱动程序&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/lnicola/co2mon&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;co2mon&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;insta: snapshot测试库&lt;/h2&gt;&lt;p&gt;一个Rust的快照测试库，给第一次跑测试的结果生成一个快照，后面就可以用这个快照来保证代码不会被破坏。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/mitsuhiko/insta&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;insta&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;Rust周边&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「Rust周边」订制活动预报&lt;/h2&gt;&lt;p&gt;想要的朋友，可以联系我。感兴趣可发我邮件，地址: 247o26628 at &lt;a href=&quot;http://link.zhihu.com/?target=http%3A//qq.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;qq.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;。注明你想要哪种周边，目前还清楚价格，只是收集意愿，达到一定数量才会开启订制。等年后，再宣布具体的款式和价格，图案都会订制成Rust相关，但质量会和它一样的。&lt;/p&gt;&lt;p&gt;一： 棒球帽&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0bff458bab99daa6d5886656ee0a142d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;883&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-0bff458bab99daa6d5886656ee0a142d_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0bff458bab99daa6d5886656ee0a142d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;883&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-0bff458bab99daa6d5886656ee0a142d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-0bff458bab99daa6d5886656ee0a142d_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;二： 书签&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d42cf79ec9dd1d768dd4401093c114ec_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;390&quot; data-rawheight=&quot;632&quot; class=&quot;content_image&quot; width=&quot;390&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d42cf79ec9dd1d768dd4401093c114ec_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;390&quot; data-rawheight=&quot;632&quot; class=&quot;content_image lazy&quot; width=&quot;390&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d42cf79ec9dd1d768dd4401093c114ec_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-df5c9c540f3a7ca3ad108025b06637cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;1423&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-df5c9c540f3a7ca3ad108025b06637cf_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-df5c9c540f3a7ca3ad108025b06637cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;1423&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-df5c9c540f3a7ca3ad108025b06637cf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-df5c9c540f3a7ca3ad108025b06637cf_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-02-03-56215526</guid>
<pubDate>Sun, 03 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第三期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-27-55817996.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55817996&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-01-27&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;《Rust编程之道》相关内容三则&lt;/h2&gt;&lt;p&gt;勘误说明：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes/issues&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;勘误列表&lt;/a&gt;，同时也是随书源码。大家有什么问题反映上去就好了。最近我在忙别的事，不能及时回复，不过我每一条都会看。&lt;/p&gt;&lt;p&gt;最终会形成一份电子版的勘误集《Rust编程之道•求真集》。「求真」，是为了致敬这些认真的读者，也是表达准确传播知识的信念和责任。写书之时，开始动笔之前，我就已经知道错误在所难免。不惧错误，只有正视错误，才能让自己成长，这是我一贯坚守的信念。&lt;/p&gt;&lt;p&gt;大家也可以私聊我，加入读者交流群。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55572688&quot; class=&quot;internal&quot;&gt;读者答疑精选：对书中值语义、引用语义、栈拷贝、按位复制等概念的澄清&lt;/a&gt;&lt;/p&gt;&lt;p&gt;随书源码仓库新增了「精选」Label，涉及比较重要的勘误内容，大家看书的时候可以了解了解。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7917e9b840d08b8c415cc37b6724fac7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;521&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-7917e9b840d08b8c415cc37b6724fac7_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7917e9b840d08b8c415cc37b6724fac7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;521&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-7917e9b840d08b8c415cc37b6724fac7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-7917e9b840d08b8c415cc37b6724fac7_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;官方新闻&lt;/h2&gt;&lt;h2&gt;Rust异步开发支持又前进了一小步&lt;/h2&gt;&lt;p&gt;RFC: stabilize &lt;code&gt;std::task&lt;/code&gt; and &lt;code&gt;std::future::Future&lt;/code&gt; 准备Merge了&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/pull/2592&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「Rust异步」Weaker API何去何从？&lt;/h2&gt;&lt;p&gt;无船大佬写了两篇博客，来讨论Waker API。考虑要统一Waker API，而去掉之前的LocalWaker，可能引来一些争议。因为在某些OS下，无法使用TLS。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/wakers-i/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Waker API I: what does a waker do?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/wakers-ii/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Waker II: waking across threads&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2&gt;社区新闻&lt;/h2&gt;&lt;h2&gt;约翰•卡马克说他写了点Rust。&lt;/h2&gt;&lt;p&gt;没错，是传奇程序员「约翰•卡马克」。&lt;/p&gt;&lt;p&gt;这个推文实际上是Cpp vs Rust的小范围论战之一，Reddit上讨论贴，&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4b2d044039d7fc09a3da397b6cfd4c37_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;338&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-4b2d044039d7fc09a3da397b6cfd4c37_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4b2d044039d7fc09a3da397b6cfd4c37_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;338&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-4b2d044039d7fc09a3da397b6cfd4c37_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4b2d044039d7fc09a3da397b6cfd4c37_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ak69zp/john_carmack_started_writing_some_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「Job」Prevoty寻找高级C/CPP/Rust工程师&lt;/h2&gt;&lt;p&gt;Prevoty是一家网络安全公司，提供运行时监控和保护程序。&lt;/p&gt;&lt;p&gt;Prevoty正在寻找一位才华横溢（Talented）的高级软件工程师加入他们的团队。&lt;/p&gt;&lt;p&gt;位于洛杉矶。有竞争力的福利包括股权，综合健康福利，(误：以为401K是薪水，经查，401k是社保。 401(k)退休福利社保。 😂）。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.prevoty.com/about/careers%3Fgh_jid%3D4032159002&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rust-analyzer指南&lt;/h2&gt;&lt;p&gt;Rust Analyzer是给IDE使用的Rust实验性模块化编译器前端。也是RLS的潜在替换者。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-analyzer/rust-analyzer/blob/e0d8c86563b72e5414cf10fe16da5e88201447e2/guide.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;与此相关新闻：&lt;/p&gt;&lt;p&gt;sourcegraph移除了对Rust的支持&lt;/p&gt;&lt;p&gt;代码搜索和智能托管服务Sourcegraph宣布移除对Rust的支持，原因是RLS现在还不够完善。因为性能的关系，Sourcegraph需要等待RLS的初始化时间（编译整个项目，需要几分钟）得到改善，或者就是可以希望Rust-analyzer能替换掉RLS（可能需要等几年），然后才考虑支持Rust。Sourcegraph对初始化时间非常敏感。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/sourcegraph/sourcegraph/issues/7&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;“实现请求”列表&lt;/h2&gt;&lt;p&gt;Serde作者dtolnay在GitHub上发起了一个列表，旨在让人们提交那些「本应该存在但还不存在」的库，请求实现它。&lt;/p&gt;&lt;p&gt;“实现请求”列表适用于那些已经进行了明确、清晰、成熟的大部分设计工作的想法，它应该准备好可以让参与者直接开始编写代码。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dtolnay/request-for-implementation&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;request-for-implementation&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;quinn 发布 0.2版&lt;/h2&gt;&lt;p&gt;Quinn是QUIC协议（传说中的HTTP3， IETF标准化的下一代TCP替换协议）的纯Rust实现，并且兼容Tokio API。并且已经与另一个Rust的QUIC实现quicr合并。&lt;/p&gt;&lt;p&gt;Quinn 0.2.0是最新QUIC草案（草案17）中最符合要求的实现之一。Quinn项目正在努力实现模块化开发，比如拆解出独立协议逻辑的quinn-proto库和可以利用tokio API的quinn库。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/djc/quinn/releases/tag/0.2.0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;quinn&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;nrc博客宣布加入PingCAP&lt;/h2&gt;&lt;p&gt;作为在「Rust内部」工作了五年的人，现在跳到「Rust外部」来使用它，并且面向的是分布式数据库这样一个新兴的领域，nrc感到很兴奋。并且他将继续在新西兰远程工作。&lt;/p&gt;&lt;p&gt;（我很希望一睹nrc的真容，因为很多年前nrc给Rust社区做贡献的时候，就只看到他的大猩猩头像，很好奇他长啥样）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.ncameron.org/blog/starting-at-pingcap/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;请享受QUIC和Rust吧！&lt;/h2&gt;&lt;p&gt;cloudflare公司开源了他们用Rust实现的QUIC协议库，可以和C/C++及其他语言方便集成。&lt;/p&gt;&lt;p&gt;可以用它方便构建QUIC Server。但目前还不是很成熟，可以先关注。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/cloudflare/quiche&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;quiche&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「宏」proc_macro2库的文档已经更新&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//docs.rs/proc-macro2/0.4/proc_macro2/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;/0.4/proc_macro2&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;NLL之后： Polonius 和 区间错误&lt;/h2&gt;&lt;p&gt;Polonius是Niko一直在研究的新的借用检查器库，还实验性地被集成到了Rust中，但它目前还不完整。&lt;/p&gt;&lt;p&gt;该文主要介绍了Polonius对「核心借用检查」分析中忽略的检查：不考虑生命周期之间的关系。&lt;/p&gt;&lt;p&gt;如感兴趣可以查看原文了解。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang-nursery/polonius/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;polonius&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Niko: Polonius与Hereditary Harrop谓词&lt;/h2&gt;&lt;p&gt;Niko在这篇博文里探讨了Polonius目前的不足。为了解决高阶子类型和trait匹配的问题，需要寻求更丰富的约束概念（存在量词等）。 这篇太学术。&lt;/p&gt;&lt;p&gt;不过，Polonius是Niko受面向逻辑编程语言prolog的启发而实现，这里面的术语Hereditary Harrop就是来自于它。感兴趣的可以深入了解下。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Harrop_formula&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wiki/Harrop_formula&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「社区提案」Unsafe Rust社区代码规范&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//sanxiyn.blogspot.com/2019/01/proposed-rust-community-norm-for-unsafe.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;DataFusion 0.6发布&lt;/h2&gt;&lt;p&gt;DataFusion是一个在Rust中实现的内存查询引擎，它的目标是构建分布式计算平台。&lt;/p&gt;&lt;p&gt;目前使用Apache Arrow作为内存模型。但目前它只是一个概念证明，还不适合实际应用。 目前支持针对CSV文件运行简单的SQL查询。DataFusion也支持Parquet。 Rust Parquet项目最近被捐赠给Apache Arrow，作者希望在DataFusion中进行持续的集成工作。作者最近提议将DataFusion捐赠给Apache Arrow项目，以成为Arrow中的默认Rust-native查询引擎。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//andygrove.io/2019/01/datafusion-0.6.0/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust 1.31 vs Rust 1.32 基准性能测试&lt;/h2&gt;&lt;p&gt;Rust 1.32中完全移除了jemalloc，所以有人想看看，1.32到底性能如何？这次性能测试是基于&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//benchmarksgame-team.pages.debian.net/benchmarksgame/faster/rust-gpp.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust vs Cpp Benchmarks Game&lt;/a&gt;来做的。&lt;/p&gt;&lt;p&gt;结果：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6c246f815953e9e3f7a3d51aac4b415b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;490&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-6c246f815953e9e3f7a3d51aac4b415b_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6c246f815953e9e3f7a3d51aac4b415b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;490&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-6c246f815953e9e3f7a3d51aac4b415b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-6c246f815953e9e3f7a3d51aac4b415b_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;目测1.32略胜一筹？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aj2pwx/comparison_of_rust_131_vs_132_in_the_benchmarks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「宣传向」微软的 Azure IoT Hub设备流服务使用Actix实现&lt;/h2&gt;&lt;p&gt;Actix的作者fafhrd91就是在Azure IoT团队中。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aj3fi7/azure_iot_device_streams_built_with_actix/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;学习资源&lt;/h2&gt;&lt;h2&gt;Rust-for-undergrads： 一个鼓励大学生将C/C++问题重新用Rust实现的项目&lt;/h2&gt;&lt;p&gt;这个项目去年2月份介绍过，今天看到它上了GitHub趋势榜。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rustindia/Rust-for-undergrads&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust-for-undergrads&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust实现LC3虚拟机&lt;/h2&gt;&lt;p&gt;Little Computer 3或LC-3是一种计算机教育编程语言，一种汇编语言，是一种低级编程语言。&lt;/p&gt;&lt;p&gt;它具有相对简单的指令集，但可用于编写中等复杂的汇编程序，并且是C编译器理论上可行的目标。该语言不如x86程序集复杂，但具有许多类似于更复杂语言的功能。这些功能使其对于开始教学非常有用，因此它最常用于向计算机科学和计算机工程专业的学生讲授编程和计算机体系结构的基础知识。&lt;/p&gt;&lt;p&gt;想写自己VM的可以跟着学习。&lt;/p&gt;&lt;p&gt;相关系列文章：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//justinmeiners.github.io/lc3-vm/index.html%231%3A12&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Write your Own Virtual Machine&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/KuldeepSinh/lc3_vm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;将Serde类型导出为TypeScript的类型&lt;/h2&gt;&lt;p&gt;利用wasm-bindgen和serde序列化库，让Rust和Webassembly的开发体验更上一层。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用serde序列化，可以让前端和Rust端在开发过程中数据的更改自动同步，减少手工更改的工作量。&lt;/li&gt;&lt;li&gt;可以同时对Rust代码和前端组件进行类型检查，在编译期间而不是在运行时捕获类型错误。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;考虑到WebAssembly运行时错误的调试难度，这一点尤为重要！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//timryan.org/2019/01/22/exporting-serde-types-to-typescript.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Rust创建Ubuntu Touch应用程序&lt;/h2&gt;&lt;p&gt;基于Rust和Qt。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;基于Rust 1.32实现静态文件服务器&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40zwegrzyniak/attempting-a-bare-bones-static-file-server-in-rust-1-32-d784545b64b0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust+WebGL 基础指南&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.chinedufn.com/3d-webgl-basic-water-tutorial/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「视频」将火焰图移植到Rust&lt;/h2&gt;&lt;p&gt;上次讲异步的那哥们，又出了视频。他每次视频都是四到五个小时。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ak6s89/porting_flamegraph_to_rust_video/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust web生态 vs Python Flask Web 生态&lt;/h2&gt;&lt;p&gt;ORM：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust：Diesel，（如果用acitx-web，推荐 &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/mehcode/actix-diesel&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/mehcode/acti&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;x-diesel&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; 这个库，抽象的非常干净漂亮）&lt;/li&gt;&lt;li&gt;Python: SQLAlchemy&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I18N:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust: ? （原帖中说Rust没有等价的库，但实际上有，rocket-i18n，也有rust-unic和tr 这样的国际化库）&lt;/li&gt;&lt;li&gt;Python: Flask-Babel&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;登录/邮件/表单处理/密码验证等组件：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust: ? （这个确实没有什么通用的组件，但这其实不算啥重要的，actix-web写登录和发邮件都挺方便，也有很多库可以帮助处理密码验证，至于表单处理，rocket和actix-web都支持提取器非常方便，但可能也有瑕疵，比如actix-web的Form提取器不支持数组参数之类 ）&lt;/li&gt;&lt;li&gt;Python: Flask-Login/Flask-mail&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;（总的来说，和flask生态相比，目前actix-web和rocket只差在通用的业务组件上面）&lt;/p&gt;&lt;p&gt;具体可以看讨论&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ai3p1z/the_rust_web_ecosystem_vs_the_flask_ecosystem/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列文章」在Rust中使用TLS 之 用Tokio处理异步IO&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//ayende.com/blog/185793-A/using-tls-in-rust-going-to-async-i-o-with-tokio&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//ayende.com/blog/posts/series/185698-A/using-tls-with-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;using-tls-with-rust系列&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「Hack技」基于类型反射来构造编译时可确定variant的枚举类型&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//guiand.xyz/blog-posts/compile-time-unions.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「Cli」分形查看器&lt;/h2&gt;&lt;p&gt;该库实现了分形算法，并将其生成图片，方便查看。该库比较适合新人学习Rust时模仿和借鉴。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/agherzan/mandelbrot-viewer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mandelbrot-viewer&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;将论文中的Haskell示例移植为Rust&lt;/h2&gt;&lt;p&gt;论文《A Play on Regular Expressions》中使用Haskell实现了连续八个强大的正则表达式引擎，同时使用来自集合理论的数学结构的GADT表示来实现从解析结果中提取数据，称为半环。&lt;/p&gt;&lt;p&gt;作者昨天用Haskell实现了前两个引擎，今天将第一个版本移植到Rust。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ajj8xq/a_small_project_taking_an_academic_paper_with/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/elfsternberg/riggedregex&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码（包括论文地址）&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2&gt;项目、框架、工具与库&lt;/h2&gt;&lt;h2&gt;typetag: 序列化/反序列化trait对象&lt;/h2&gt;&lt;p&gt;Dtolnay大佬这么高产，又开了一个新库，是将trait对象无痛地序列化和反序列化。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dtolnay/typetag&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;typetag&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;mnemonic: 帮助你记忆各种终端命令的工具&lt;/h2&gt;&lt;p&gt;mnemonic(助记符)是一个小的Cli应用，目的是帮助开发者记忆那些难记的shell命令。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/codesections/mnemonic&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mnemonic&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;n-sql: Sql解析/优化/生成器&lt;/h2&gt;&lt;p&gt;目前支持Oracle, MySQL, PostgreSQL, SqlServer, sqlite等关系数据库。作者 来自于国内Rust社区成员 @ng&lt;/p&gt;&lt;p&gt;作者说：&lt;/p&gt;&lt;blockquote&gt; n自然是numbers of的意思，目标是尽量覆盖所有数据库，主要目标是在查询上面，nosql后面再扩展吧。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/mokeyish/n-sql&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;n-sql&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;oxide-auth: 0.4发布&lt;/h2&gt;&lt;p&gt;一个OAuth2 Server库，支持actix、rocket等框架。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/HeroicKatora/oxide-auth&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;oxide-auth&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;warmy 0.11.1中支持通用JSON&lt;/h2&gt;&lt;p&gt;warmy是一个Rust编写的可实现热加载/重载的库： &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/phaazon/warmy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;warmy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;支持同步和异步加载&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//phaazon.net/blog/asynchronous_warmy_prequel&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;介绍&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//phaazon.net/blog/warmy-universal-json&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;在Rust应用中嵌入Webassembly&lt;/h2&gt;&lt;p&gt;wasmer-runtime库提供了易于使用的安全API，用于帮助开发者在自己的库中调用WebAssembly。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/wasmer/executing-webassembly-in-your-rust-application-d5cd32e8ce46&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Rust构建JavaScript开发工具&lt;/h2&gt;&lt;p&gt;作者构建了三个crate，希望为开发者创造一套用于处理JavaScript的通用Rust库。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;RESS，用于词法扫描，标记化词条&lt;/li&gt;&lt;li&gt;RESSA，用于语法分析，解析语法树&lt;/li&gt;&lt;li&gt;RESW，用于编写上层代码&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;作者提供了一份简单的book来说明这三个crate的用法。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//freemasen.github.io/rusty-ecma-book/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rusty-ecma-book&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;arraystring： 基于栈的通用字符串&lt;/h2&gt;&lt;p&gt;谨慎使用，该库使用了很多unsafe代码。不过适合学习。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/paulocsanz/arraystring&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;arraystring&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;ryu: 快速浮点数到字符串的转换&lt;/h2&gt;&lt;p&gt;dtolnay的新库。是对一种快速将浮点数转换为十进制字符串的算法的纯Rust实现。算法相关论文：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//dl.acm.org/citation.cfm%3Fid%3D3192369&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ryū: fast float-to-string conversion&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dtolnay/ryu&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ryu&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-27-55817996</guid>
<pubDate>Sun, 27 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>《Rust编程之道》读者答疑精选：对书中值语义、引用语义、栈拷贝、按位复制等概念的澄清</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-23-55572688.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55572688&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9f4d99d606d1c7818a6ed80f6af0b458_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;最近，由读者朋友 @kvinwang 对本书第五章所有权系统中出现的「按位复制」、「栈复制」、「值类型」、「值语义」和「引用语义」等概念提出了质疑，并且指出了这些概念混乱使用的问题。&lt;br&gt;经过连续多天的讨论，今天整理出结果来一致澄清一下这些概念。同时，也公开感谢一下这位对严谨性和准确性有高度追求的朋友。&lt;br&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes/issues/75&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;[第五章]clone方法按位复制概念错误 · Issue #75 · ZhangHanDong/tao-of-rust-codes&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes/issues/77&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;[第五章] 诸多名词概念不应强行关联 · Issue #77 · ZhangHanDong/tao-of-rust-codes&lt;/a&gt; &lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;编译器默认自动调用x的clone方法&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;编译器会默认自动调用x的clone方法&lt;br&gt;对于实现Copy的类型，其clone方法必须是按位复制的&lt;/blockquote&gt;&lt;p&gt;修改为：&lt;/p&gt;&lt;blockquote&gt; 代码清单5-3中的变量x为整数类型，当它作为右值赋值给变量y时，编译器会默认自动按位复制。x是值语义类型，被复制以后，x和y就是两个不同的值，互不影响。&lt;br&gt;&lt;br&gt;这是因为整数类型实现了Copy trait，第4章介绍过，对于实现Copy的类型，其clone方法只需要简单地实现按位复制即可。对于拥有值语义的整数类型，整个数据存储于栈中，按位复制以后，不会对原有数据造成破坏，不存在内存安全的问题。&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;说明： &lt;/p&gt;&lt;p&gt;其实这里说「自动调用x的clone方法」，是为了方便读者理解这种默认行为。对于Rust中Copy的语义，开发者是无法修改的。也就是说，对于赋值、或者传参等行为发生的时候，实现Copy的类型默认是按位复制。开发者自己实现Copy trait，必须也实现clone方法。至于clone方法是如何实现的不重要，重要的是，它们必须有按位复制的能力。但是标准库文档里建议你只需要实现按位复制即可。注意，这里指的是隐式调用clone的行为，而非显式调用clone方法。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt; 按位复制和栈复制&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;其实书里问题的根源在于，我当时错误地将「按位复制」理解为「栈复制」。虽然按「栈复制」来理解Rust中的Copy行为、所有权机制也没有什么影响，但确实不太严谨。读者朋友kvinwang说，最好还是澄清一下，以免误导了新人。&lt;/p&gt;&lt;p&gt;所以，首先需要明确「按位复制」，等同于C语言里的memcpy。 所以，我将书里出现的相关批注做了修改：&lt;/p&gt;&lt;blockquote&gt;C语言中的memcpy会从源所指的内存地址的起始位置开始拷贝n个字节，直到目标所指的内存地址的结束位置。但如果要拷贝的数据中包含指针，该函数并不会连同指针指向的数据一起拷贝。&lt;/blockquote&gt;&lt;p&gt;按位复制，只是复制「值」，而不会复制「值」中包含指针指向的数据。也可以说，它是浅复制的一种特定形式。它不会进行深复制。拿Rust中的String字符串来说，其本质是一个智能指针，在栈上存储着元信息，但是在堆里存储的具体的数据。如果对其进行按位复制，只会复制其栈上的元信息，而不会复制其堆里的数据。如果想深复制，只能显式地调用其clone函数。&lt;/p&gt;&lt;p&gt;所以，这是我书里没有说明清楚的一个地方。 因为Rust默认是在栈上存储的，所以，按位复制通常都是发生在栈上复制。但是按位复制，并不一定只能复制栈上的数据。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;对于值类型和引用类型的修改如下：&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;值类型一般是指可以将数据都保存到同一位置的类型，一些原生类型，比如数值、布尔值、结构体等都是值类型。因此对值类型的操作效率一般比较高，使用完立即会被回收。值类型作为右值（在值表达式中）执行赋值或传入函数等操作时，会自动复制一个新的值副本，并且该副本和原始的值没有直接关系，互不影响。&lt;br&gt;&lt;br&gt;引用类型则会存在一个指向实际存储区域的指针。比如通常一些引用类型会将数据存储在堆中，而栈中只存放指向堆中数据的地址（指针）。因此对引用类型的操作效率一般比较低，使用完交给GC回收，这样更安全一些。但是没有GC的语言则需要靠手工来回收，就多了很多风险。&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt; 对于值语义和引用语义的修改如下：&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;为了更加精准地对这种复合类型或对象进行描述，值语义（Value Semantic）和引用语义（Reference Semantic）被引入，定义如下。 &lt;br&gt;  - 值语义：复制（赋值操作）以后，两个数据对象拥有的存储空间是独立的，相互之间互不影响。 &lt;br&gt; - 引用语义：复制（赋值操作）以后，两个数据对象，相互之间互为别名。操作其中任意一个数据对象，则会影响到另一个。 &lt;br&gt;&lt;br&gt; 值语义可以保证变量值的独立性（Independence）。独立性的意思是，如果想修改某个变量，只能通过它本身来修改；而如果修改了它本身，并不影响其复制品。也就是说，如果只能通过变量本身来修改值，那么它就是具有值语义的变量。 &lt;br&gt;&lt;br&gt;对于引用语义的数据对象，赋值操作时按位复制，可能存在内存不安全风险。比如只复制了栈上的指针，堆上的数据就多了一个管理者，多了一层内存安全的隐患。&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;「Copy语义和Move语义」 vs 「值语义、引用语义」&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;在Rust中，可以通过能否实现Copy trait来区分数据类型的值语义和引用语义。但为了描述的更加精准，Rust也引入了新的语义：复制（Copy）语义和移动（Move）语义。复制语义对应值语义，也就是说，实现了Copy的类型，在进行按位复制的时候，是安全的。移动语义对应引用语义，也就是说，在传统语言（比如C++）中本来是引用语义的类型，在Rust中不允许按位复制，只允许移动所有权，只有这样才能保证安全。这样划分是因为引入了所有权机制，在所有权机制下同时保证内存安全和性能。 Rust的数据默认存储在栈上。&lt;br&gt;&lt;br&gt;对于默认可以安全地在栈上进行按位复制的类型，就只需要按位复制，也方便管理内存。对于默认只可在堆上存储的数据，因为无法安全地进行按位复制，如果要保证内存安全，就必须进行深度复制。当然，你也可以把实现Copy的类型，通过Rust提供的特定API（比如Box语法）将其放到堆上，但它既然是实现了Copy，就是一个可以安全进行按位复制的类型。深度复制需要在堆内存中重新开辟空间，这会带来更多的性能开销。如果堆上的数据不变，只需要在栈上移动指向堆内存的指针地址，不仅保证了内存安全，还可以拥有与在栈上进行复制的等同性能。&lt;br&gt;&lt;br&gt;也许有的人会说，即便只移动存储在栈上的指针，那其实在Rust编译器内部也很可能是一个按位复制行为，因为单论指针而言，它也可以看作是一个值。但我们这里说的是上层的语义。对于Move语义而言，代表的是按位复制不安全，所以Rust编译器不允许它实现Copy。 &lt;br&gt;&lt;br&gt;所以，对于Rust而言，可以实现Copy trait的类型，则表示它拥有复制语义，在赋值或传入函数等行为时，默认会进行按位复制。它和传统概念中的值语义类型相对应，因为两个独立不关联的值，操作其中一个，不影响另外一个，是安全的。对于不能实现Copy trait的类型，它实际上和传统的引用语义类型相对应，只不过在Rust中，如果只是简单的按位复制，则会出现图5-1那样的不安全问题。所以，为了安全，它必须是移动语义。移动语义实际上在告诉编译器，该类型不要简单的按位复制，那样不安全。所以，其他语言中的引用语义到了Rust中，就成了移动语义。但是被移动的值，相当于已经废弃了，无法使用。如果从这个角度来看，你如果认为Rust语言中并不存在引用语义类型，只有值语义类型，也是可以的。 另外，需要注意，Rust中默认的引用和指针也都实现了Copy。&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;说明： &lt;/p&gt;&lt;p&gt;这几段，主要是澄清Rust中的Copy语义。Copy的重点在于，是否可以安全地进行按位复制。实际上，要不要把它看成值语义或引用语义，都是看你自己。书里，只是给你提供一个视角，也方便你把Rust中的新概念「Copy语义」和「Move语义」与旧知识「值语义」和「引用语义」挂上钩。&lt;b&gt;这样，即方便你理解所有权机制，又重点体现了，Rust以「内存安全」为设计原则对这门语言的精巧设计。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;以上。 该文讨论地址： &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes/issues/104&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;对书中值语义、引用语义、栈拷贝、按位复制等概念的澄清 · Issue #104 · ZhangHanDong/tao-of-rust-codes&lt;/a&gt; &lt;/p&gt;&lt;p&gt;后续还有两个根据勘误要着重说明的主题，容我抽时间整理出来再发。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-23-55572688</guid>
<pubDate>Wed, 23 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第二期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-20-55299674.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55299674&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-01-20&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust 1.32 稳定版发布&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;引入了dbg!宏，方便调试代码。（ 有问题，找大(d)表(b)哥(g)看一看 ）&lt;/li&gt;&lt;li&gt;默认移除jemalloc。（从1.28开始，从jemalloc切换到全局分配器，直到1.32这项工作才做完）&lt;/li&gt;&lt;li&gt;模块系统改进，支持uniform path&lt;/li&gt;&lt;li&gt;宏系统改进，支持识别字面量，$lt:literal&lt;/li&gt;&lt;li&gt;库稳定。包括标准库里有19个函数使用了const fn等。&lt;/li&gt;&lt;li&gt;cargo check，增加了cargo c缩写&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/01/17/Rust-1.32.0.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;详情&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Niko: Rust 2019 专注于可持续发展&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54349606&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「讨论」官方专门独立开启了一个issue来讨论await语法&lt;/h2&gt;&lt;p&gt;可以关注下&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/57640&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/rust-lang/ru&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;st/issues/57640&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Tide框架发布了0.0.1版本&lt;/h2&gt;&lt;p&gt;是Tide框架的首个语义化版本，但还是WIP状态，仅供参观。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//crates.io/crates/tide&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tide&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust比Haskell更加安全&lt;/h2&gt;&lt;p&gt;这篇文章阐述了Rust比Haskell更加安全的利用。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.fpcomplete.com/blog/when-rust-is-safer-than-haskell&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ah85lu/when_rust_is_safer_than_haskell_fp_complete/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Rust上升GitHub语言排行榜第13位&lt;/h2&gt;&lt;p&gt;GitHub最近30天按PR排序，Rust排名第13 ​​​​&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4627e0fee75ecbf2307661170379410c_b.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;635&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-4627e0fee75ecbf2307661170379410c_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4627e0fee75ecbf2307661170379410c_b.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;635&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-4627e0fee75ecbf2307661170379410c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-4627e0fee75ecbf2307661170379410c_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;来用Rust实现星际争霸的AI吧&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//habr.com/en/post/436254/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rustsim最新月报&lt;/h2&gt;&lt;p&gt;Rustsim组织是一个GitHub组织，聚焦于提供各种数值模拟的库。包括&lt;/p&gt;&lt;ul&gt;&lt;li&gt;alga， 抽象代数库&lt;/li&gt;&lt;li&gt;nalgebra， 线性代数库&lt;/li&gt;&lt;li&gt;ncollide， 2D和3D的碰撞检测库&lt;/li&gt;&lt;li&gt;nphysics， 2D和3D的物理模拟库&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rustsim.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rustsim.org&lt;/a&gt;&lt;/p&gt;&lt;p&gt;版本升级：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;nphysics2d and nphysics3d v0.19&lt;/li&gt;&lt;li&gt;ncollide2d and ncollide3d v0.18:&lt;/li&gt;&lt;li&gt;nalgebra v0.17&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;本次月报里还阐述了他们的2019目标。总结来说：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.rustsim.org/blog/2019/01/01/this-month-in-rustsim/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust devroom ： Rust生态专题&lt;/h2&gt;&lt;p&gt;本专题集合了Rust生态中令人兴奋（据专题作者描述）的工具和动态。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//fosdem.org/2019/schedule/track/rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust在Hyperledger Sawtooth团队中的应用&lt;/h2&gt;&lt;p&gt;区块链公司hyperledger，使用Rust实现了两个新的共识引擎：Sawtooth PBFT和RAFT（基于PingCAP的raft-rs）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.hyperledger.org/blog/2019/01/18/safety-performance-and-innovation-rust-in-hyperledger-sawtooth&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「演讲」是时候用Rust重写OS了吗？&lt;/h2&gt;&lt;p&gt;来自QCon的演讲，Bryan从操作系统的历史，到Rust语言的实现机制，甚至还探讨了Rust标准库中为什么用B树，而不是AVL树。最终的结论是，迫不及待用Rust了。&lt;/p&gt;&lt;blockquote&gt; Bryan Cantrill是Joyent的首席技术官，负责监督SmartOS和SmartDataCenter平台的全球开发。他很惊叹为什么Rust语言可以在性能上快于C。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.infoq.com/presentations/os-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More（内含视频及演讲稿）&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「安全」Rust 2019以Security作为目标&lt;/h2&gt;&lt;p&gt;Rust社区的民间组织「Rust安全代码工作组」发起者发布的文章，阐述了2019年安全组的工作目标。该民间工作组致力于使用Rust编写更安全的代码。这里的安全主要是指网络安全/计算机安全/代码安全验证/代码审计等。&lt;/p&gt;&lt;p&gt;感谢有这样的组织为Rust保驾护航，现在他们也在寻求社区的力量。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40shnatsel/security-as-rust-2019-goal-6a060116ba39&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-secure-code/wg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-secure-code/wg&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Librsvg目前几乎是100%Rust代码了&lt;/h2&gt;&lt;p&gt;（追求100%Rust代码，是一种拥抱新世界的决心）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//people.gnome.org/%7Efederico/blog/librsvg-is-almost-rustified.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Timely Dataflow 将其Git仓库转移到了GitHub了&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;timely-dataflow, 用於管理和執行數據並行數據流計算的框架。&lt;/li&gt;&lt;li&gt;differential-dataflow，對一個圖(graph)，不是圖片是圖論的圖去做差分運算，也能統計圖跟圖之前的變化， 用於輔助timely-dataflow的計算。&lt;/li&gt;&lt;li&gt;abomonation， 一個追求簡單快速但unsafe的序列化程式庫&lt;/li&gt;&lt;li&gt;Naiad，是timely-dataflow的C#實作品，從微軟研究院fork過來，但沒有做任何改動。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/TimelyDataflow&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TimelyDataflow&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「讨论」如何用Safe Rust实现链表&lt;/h2&gt;&lt;p&gt;不想用Rc，也不想用Unsafe Rust，看看大家的讨论中有什么值得学习的方案？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aew8kg/how_to_implement_linkedlist_in_rust_using_only/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust 2019 期望贴汇总&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//readrust.net/rust-2019/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-2019&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust的const类型、trait和实现&lt;/h2&gt;&lt;p&gt;文章主要讨论了泛型的 const fn，提了一个提案增加 const trait 和 const impl 的概念，而泛型 const fn 的类型参数将要求要有相应 const impl 的类型来填入。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//varkor.github.io/blog/2019/01/11/const-types-traits-and-implementations-in-Rust.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「娱乐向」Rust程序员的进化&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//antoyo.ml/evolution-rust-programmer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;《Rust编程之道》读者答疑精选：函数项类型和函数指针类型&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54485063&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列文章」从零开始实现一个关系型数据库&lt;/h2&gt;&lt;p&gt;计划五篇，目前作者只写了第一篇。源码仅供学习之用。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//natelincoln.com/a-very-relatable-database/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/NLincoln/relatable&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;源码： NLincoln/relatable&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;如何编写Rust代码&lt;/h2&gt;&lt;p&gt;作者分享了他如何组织和构思Rust代码的一些技巧，值得参考。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//deterministic.space/how-to-order-rust-code.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;用Rust写操作系统系列文章：介绍内存分页&lt;/h2&gt;&lt;p&gt;这一系列文章比较有名，清华大学的操作系统课程也借鉴了这一系列文章来使用Rust进行教学。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//os.phil-opp.com/paging-introduction/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;理解Rust生命周期&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/nearprotocol/understanding-rust-lifetimes-e813bcd405fa&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;简单的游戏开发指南&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/sunjay/rust-simple-game-dev-tutorial&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-simple-game-dev-tutorial&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;根据数据文件生成Rust测试&lt;/h2&gt;&lt;p&gt;使用build.rs，将数据文件生成Rust集成测试。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.cyplo.net/posts/2018/12/generate-rust-tests-from-data.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Google Cloud Endpoints 与 Rust gRPC集成&lt;/h2&gt;&lt;p&gt;作者记录了他将Google Cloud Endpoints 和 Rust gRPC集成的故事，以便帮助后来者。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.wihlidal.com/blog/cloud/2019-01-17-google-cloud-endpoints/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目、框架、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;ElasticSearch的竞争者们&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/toshi-search/Toshi&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Toshi&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/tantivy-search/tantivy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tantivy&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Tokio作者新库loom ：Rust并发模型检查器&lt;/h2&gt;&lt;p&gt;Rust的多线程内存模型继承自C++11，所以该库就是基于&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//demsky.eecs.uci.edu/publications/c11modelcheck.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CDSChecker: Checking Concurrent Data Structures Written with C/C++ Atomics.&lt;/a&gt;这篇论文来实现的。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/carllerche/loom&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;loom&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;dness: 一个动态DNS Client&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/nickbabcock/dness&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dness&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;hexyl: Rust编写的命令行十六进制查看器&lt;/h2&gt;&lt;p&gt;常数做泛型参数的feature开始实现了: &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/53645%23issuecomment-451706747&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pr53645&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/sharkdp/hexyl&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hexyl&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;全算法支持的纯 Rust 实现 crc 库&lt;/h2&gt;&lt;blockquote&gt; CRC(Cyclic Redundancy Check)：循环冗余检验，在链路层被广泛使用的检错技术。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/nanpuyue/crc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CRC&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「文章」Paw：新的Rust GUI框架&lt;/h2&gt;&lt;p&gt;灵感来自于Flutter 1.0。作者在文章里介绍了他的想法，并且计划接下来发布0.1版本。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40m.siglreith/paw-at-rust-guis-d4d848e14b94&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/visly/stretch-a-flexbox-implementation-in-rust-60762b5a3331&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相关文章：Rust实现的Flexbox&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;nrc的新库： 为过程宏添加类似macro_rules的模式匹配功能&lt;/h2&gt;&lt;p&gt;这样写过程宏可以更加直观一些。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.ncameron.org/blog/proc-macro-rules/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/nrc/proc-macro-rules&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;nrc/proc-macro-rules&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;pickledb-rs：一个简单的Key-Value数据库实现&lt;/h2&gt;&lt;p&gt;仿python实现的K-V数据库pickleDB&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/seladb/pickledb-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pickledb-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Pi生成器&lt;/h2&gt;&lt;p&gt;该库是根据知名数学网红3Blue1Brown的视频实现的。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/jakevossen5/pi-generator-from-blocks&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pi-generator-from-blocks&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rbtag: 可以添加构建信息的过程宏&lt;/h2&gt;&lt;p&gt;该库提供了过程宏，可以为你的库添加构建信息，或者是git commit信息。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/LivingInSyn/rbtag&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rbtag&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;breeze：实验性的文本/代码编辑器&lt;/h2&gt;&lt;p&gt;一个实验性的，kakoune启发的以CLI为中心的文本/代码编辑器，带有&lt;code&gt;|&lt;/code&gt;形状游标。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dpc/breeze&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;breeze&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;dlarm：一个dwm的告警系统&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/codesections/dlarm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dlarm&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-20-55299674</guid>
<pubDate>Sun, 20 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>《Rust编程之道》读者答疑精选：函数项类型和函数指针类型</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-10-54485063.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54485063&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9f4d99d606d1c7818a6ed80f6af0b458_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;这是来自于《Rust编程之道》读者问题之一，觉得有必要分享一下。因为从这个问题中，挖掘出了新的知识点，可以作为本书的补充。&lt;br&gt;&lt;br&gt;具体链接： &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes/issues/42&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;函数指针类型的一点建议 · Issue #42 · ZhangHanDong/tao-of-rust-codes&lt;/a&gt; &lt;br&gt;&lt;br&gt;这篇文章可以算是我和读者朋友的共同创作。&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;问题：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;相关代码：&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 代码清单6-14 函数指针&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello function pointer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_ptr&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:p}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 0x562bacfb9f80&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// println!(&quot;{:p}&quot;, other_fn);  // not function pointer&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;书中在这里讲到 let other_fn = hello; 这里的类型是fn() {hello} 是这个函数本身的类型而不是函数指针类型, 后面还说到, “传入sum和product函数名之后, 会自动通过模式匹配转换为函数指针类型”&lt;/p&gt;&lt;p&gt;读到这里的时候, 有点不太理解 “函数本身的类型” 和 函数指针类型在rust内的具体区别, 以及, 是哪个trait/语言特性导致了 函数类型和函数指针的相互转换?&lt;/p&gt;&lt;p&gt;函数调用的时候如果传入一个函数名, 到底传入的是什么? 这里的细节还希望作者可以能多深入写两句. 因为写了函数本身的类型后, 我读后面的内容老是会纠结这两个概念在每个地方实际上是什么样子的.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;回答：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;代码里的fn_ptr是一个&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//doc.rust-lang.org/reference/types/function-pointer.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;函数指针类型（Function Pointer Type）&lt;/a&gt; 。这样创建实际上是一种强制转换。就是通过函数名hello和类型签名`fn()`，强制将一个函数或者是没有捕获变量的闭包转换为函数指针类型。&lt;/p&gt;&lt;p&gt;函数指针，其实是来自于C语言的概念，它首先是一个指针，可以像一般函数一样，用于调用函数、传递参数。在Rust里，你直接用函数名字，就可以当函数指针使用。你结合示例理解，指针是可以通过`{:p}`格式打印地址的，而非指针类型，则无法通过那个格式打印地址。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这里说「函数本身的类型」，是指&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//doc.rust-lang.org/reference/types/function-item.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;函数项类型（Function Item Type）&lt;/a&gt;。你可以像下面这样修改代码清单6-14中那一行代码：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译示例代码后，输出：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;error[E0308]: mismatched types
 --&amp;gt; src/main.rs:8:24
  |
8 |     let other_fn: () = hello;
  |                        ^^^^^ expected (), found fn item
  |
  = note: expected type `()`
             found type `fn() {hello}`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;通过这个技巧，你可以看到，other_fn的类型是`fn(){hello}`，这个类型是函数本身自有的类型，它不是指针。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;如何挖掘知识&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;实际上，如果像这样深究细节的话，会有很多东西，一本书根本写不完的。书的目的，不是告诉你全部的细节，我更希望你通过学习本书的知识，自己挖掘出更多的细节。比如这个问题中，你既然已经看到了第六章，那是不是意味着你第五章已经看完了呢？ 那说明你已经了解过MIR了。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;所以，你为什么不能自己去精简一下代码，输出MIR自己研究下。像下面这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_ptr&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这样简化代码，是为了减少更多的认知障碍，比如println!语句会生成很多对你分析问题无用的MIR。&lt;/p&gt;&lt;p&gt;然后可以在playground里打印输出它的MIR：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_0&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                      &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// return place&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bb0&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                              &lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[0]: scope 0 at src/main.rs:3:4: 3:5&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// ty::Const&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + ty: i32&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + val: Scalar(Bits { size: 4, bits: 1 })&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// mir::Constant&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + span: src/main.rs:3:4: 3:5&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + ty: i32&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + literal: Const { ty: i32, val: Scalar(Bits { size: 4, bits: 1 }) }&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                          &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[1]: scope 0 at src/main.rs:4:2: 4:2&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_0&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                      &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// return place&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;other_fn&quot; in scope 4 at src/main.rs:7:9: 7:17&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserTypeProjection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Canonical&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projs&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;fn_ptr&quot; in scope 2 at src/main.rs:6:9: 6:15&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bb0&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                              &lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[0]: scope 0 at src/main.rs:6:9: 6:15&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReifyFnPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[1]: scope 0 at src/main.rs:6:24: 6:29&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// ty::Const&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + ty: fn() {hello}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + val: Scalar(Bits { size: 0, bits: 0 })&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// mir::Constant&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + span: src/main.rs:6:24: 6:29&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + ty: fn() {hello}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + literal: Const { ty: fn() {hello}, val: Scalar(Bits { size: 0, bits: 0 }) }&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[2]: scope 1 at src/main.rs:7:9: 7:17&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[3]: scope 1 at src/main.rs:7:20: 7:25&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// ty::Const&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + ty: fn() {hello}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + val: Scalar(Bits { size: 0, bits: 0 })&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// mir::Constant&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + span: src/main.rs:7:20: 7:25&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + ty: fn() {hello}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + literal: Const { ty: fn() {hello}, val: Scalar(Bits { size: 0, bits: 0 }) }&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageDead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[4]: scope 1 at src/main.rs:9:1: 9:2&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StorageDead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[5]: scope 0 at src/main.rs:9:1: 9:2&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                          &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// bb0[6]: scope 0 at src/main.rs:9:2: 9:2&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;可以通过这个MIR，就看得出来&lt;/p&gt;&lt;p&gt;1. hello，是一个函数指针类型 （ReifyFnPointer），因为 &lt;code&gt; _1 =const hello as fn()(ReifyFnPointer); &lt;/code&gt; ，通过as，将hello转换为`fn()`类型的函数指针。&lt;/p&gt;&lt;p&gt;2. 而other_fn  是函数类型（fn(){hello }），&lt;code&gt; _2 =const hello;&lt;/code&gt; ，它并没有被转换为函数指针类型。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;但是，你如果这么写：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;other_fn就会被转换为一个函数指针类型。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;另外，值得注意的是：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// + ty: fn() {hello}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// + val: Scalar(Bits { size: 0, bits: 0 })&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从生成的MIR中，可以看得出来，函数指针类型和函数类型，类型签名都是&lt;code&gt;fn(){hello}&lt;/code&gt; 。并且它们的值，都是零大小的（Scalar代表具体存储的值）。只不过，函数指针类型，是被强制转换为了指针。而函数类型，并没有被转换为指针。&lt;/p&gt;&lt;p&gt;有的人有疑问，函数指针类型怎么是零大小的？继续深度挖掘一下。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// src/librustc/mir/mod.rs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CastKind&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Misc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/// Convert unique, zero-sized type for a fn to fn()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReifyFnPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/// Convert non capturing closure to fn()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClosureFnPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/// Convert safe fn() to unsafe fn()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnsafeFnPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/// &quot;Unsize&quot; -- convert a thin-or-fat pointer to a fat pointer.&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/// codegen must figure out the details once full monomorphization&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/// is known. For example, this could be used to cast from a&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/// `&amp;amp;[i32;N]` to a `&amp;amp;[i32]`, or a `Box&amp;lt;T&amp;gt;` to a `Box&amp;lt;dyn Trait&amp;gt;`&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/// (presuming `T: Trait`).&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上，普通函数会经过一个ReifyFnPointer方式的转换。这种方式会将零大小类型的普通函数转换为函数指针类型。MIR代码中赋值语句可以这么理解：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReifyFnPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//等价于&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReifyFnPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将hello转换为fn()类型，转换方式是ReifyFnPointer。&lt;/p&gt;&lt;p&gt;同样，可以看到，用于将未捕获闭包转换为函数指针类型的转换方式是ClosureFnPointer。用于将safe的普通函数指针转成unsafe函数指针类型的UnsafeFnPointer。而这里的Unsize是将指针转为胖指针。&lt;/p&gt;&lt;p&gt;再继续将上面的代码转成LLVM IR。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;:
  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloca&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_ptr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloca&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，函数项类型（fn-item type）&lt;code&gt;other_fn&lt;/code&gt;是零大小的&lt;i&gt;。而&lt;/i&gt;&lt;code&gt;fn_ptr&lt;/code&gt;已经被转换成了指针类型，是要占用空间的。而otherfn只是函数名hello，而fn_ptr是一个ReifyFnPointer的强转。&lt;/p&gt;&lt;p&gt;&lt;b&gt;那么此时这个问题「Rust中函数名是什么」的答案，已经冒出：是函数项类型（Fn-Item Type）。当普通函数作为函数参数传递的时候，是会显式标记签名类型，就会被转换为函数指针类型。&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_ptr&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;零成本抽象&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Rust里有很多零大小类型，包括单元值、单元结构体等。这里函数类型和函数指针类型同样都是零大小类型。&lt;/p&gt;&lt;p&gt;Rust这个函数指针类型和C/CPP中的函数名表达式是一致的，都是函数指针。但是在C/CPP中使用函数指针，想做到零开销还是有困难，因为函数指针在运行时占用空间，如果想降低开销只能依赖于代码优化。&lt;/p&gt;&lt;p&gt;Rust中的函数都实现了 FnOnce/FnMut/Fn 这三个 Trait ，所以对于下面的函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call_fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;FnOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数&lt;code&gt;f&lt;/code&gt;也可以传入一个普通函数，此时，f的行为可以在编译期完全确定。 所以，为了最大化地利用编译期已知信息，必须可以通过类型F携带函数&lt;code&gt;f&lt;/code&gt;调用所需的必要信息。而不是通过函数指针类型来调用。后者不符合Rust零成本抽象的原则，并且还需要进行额外的一个指针大小的参数传递。&lt;/p&gt;&lt;p&gt;所以 Rust 的做法是，函数和类型构造器（枚举和元组结构体）的名字表达式，都有一个零大小的，只在类型里记录函数信息的值。这个值就叫做 函数项（Function item），它的类型就叫做 函数项类型（Function item type）。&lt;/p&gt;&lt;p&gt;并且，向上面的示例那样，该值可以通过显式地标记函数类型签名来强制转换到同函数签名的函数指针类型。但没有特别的必要，不要进行这种转换。因为函数项才是最高效的。一旦使用了函数项，剩下的优化就依赖于对零大小类型的优化了。&lt;/p&gt;&lt;p&gt;从上面示例中也看得出来，Rust的优化是分两个阶段的：MIR阶段和LLVM阶段。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;小结：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;任何一本书，都不可能囊括其主题内容的全部细节。看书学习的过程，也是一个再创造的过程，给自己一个机会去挖掘去创造更多知识。&lt;/p&gt;&lt;p&gt;以上。如果有错误，欢迎反馈。最后，感谢 &lt;a class=&quot;member_mention&quot; href=&quot;http://www.zhihu.com/people/a199ba1f2a7b0f281fe32de2f75ef82f&quot; data-hash=&quot;a199ba1f2a7b0f281fe32de2f75ef82f&quot; data-hovercard=&quot;p$b$a199ba1f2a7b0f281fe32de2f75ef82f&quot;&gt;@林吟风&lt;/a&gt; 和读者群朋友 KevinWang的深度反馈，很棒！&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-10-54485063</guid>
<pubDate>Thu, 10 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Niko:  Rust 2019 专注于可持续发展</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-08-54349606.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54349606&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2e223a420f9040dd0f255a01d74d9a08_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;官方核心团队领导Niko写了这篇文章，表达他对Rust 2019的愿景。可以从此文中，一窥Rust 2019可能的动向。  &lt;a href=&quot;http://link.zhihu.com/?target=http%3A//smallcultfollowing.com/babysteps/blog/2019/01/07/rust-in-2019-focus-on-sustainability/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;查看原文&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt; 在2018年，Niko感受到了Rust的重大变化，Rust各种会议不断增长，并且多了很多赞助商。而且在他小孩的生日会上还遇到了一些专业的Rust开发者。这让他很欣喜。但是也感觉到，Rust从1.0发布这三年来，以惊人的速度发展着，这也是官方所希望看到的。但是现在更重要的是，如何更好地扩展它，并且有效地保证它的可持续发展。  最近无船同志那篇《组织债务》的文章，很好地体现了Rust团队内部的问题，这一点Niko同志也很认同。虽然他目前还没有整理出一个具体对未来的规划，但脑海里还是迸出了一些要点： &lt;/p&gt;&lt;h2&gt;&lt;b&gt;可持续的过程&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;工作组。继续以工作组为核心组织单位，并希望它可以更好地指导人们专注于一个特定的领域。&lt;/li&gt;&lt;li&gt;明确阶段。在Rust功能稳定之前，都会经历一些官方或半官方的阶段，接下来将会使这些阶段在流程中更加明确。&lt;/li&gt;&lt;li&gt;限制。 通常，Rust团队会接受RFC，但不知道让谁该实现它，事实上，还需要这样一个团队来领导，确保RFC落地。另外，需要限制工作容量，除非知道团队中谁来实现RFC（或指导实现），否则就停止这个想法。&lt;/li&gt;&lt;li&gt;加强协作。&lt;/li&gt;&lt;li&gt;定期评估优先级。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;可持续的技术&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;清理技术债务&lt;/li&gt;&lt;li&gt;进一步让Rust编译器变得更加平易近人、可维护&lt;/li&gt;&lt;li&gt;持续缩短编译时间&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;可持续的财务&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;拓展更多的赞助商和赞助途径&lt;/li&gt;&lt;li&gt;这是一件需要谨慎的事，避免决策受到金钱和政治的支配&lt;/li&gt;&lt;li&gt;Rust团队并不急于求成，而应该一步一个脚印&lt;/li&gt;&lt;li&gt;希望看到大部分贡献者全职或者兼职为Rust贡献 &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt; 这些都是Niko还比较零散的想法，后续具体再关注Rust的Roadmap&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-08-54349606</guid>
<pubDate>Tue, 08 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第一期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-06-54196508.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54196508&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-01-06&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;「通告」&lt;/h2&gt;&lt;p&gt;微店《Rust编程之道》签名版已发货，请注意查收。没有发货的，等待下一批吧，就这一两天内发。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;官方新闻&lt;/h2&gt;&lt;h2&gt;Mozilla招人了&lt;/h2&gt;&lt;p&gt;很多岗位，包括Rust实习生。在美国的朋友有福了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//careers.mozilla.org/position/gh/1480831/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;社区新闻&lt;/h2&gt;&lt;h2&gt;「社区」关注Async动态&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//areweasyncyet.rs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;are we async yet?&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「区块链」 Holochain: 进展&lt;/h2&gt;&lt;blockquote&gt; Holochain是一个采用DHT(分布式哈希表)技术的创新项目，借助BitTorrent 的并行性，为分布式应用（DAPP）提供动力，它是分布式应用程序的数据完整性引擎。它可以将具有用户自主权的分布式 Web 直接构建到其架构和协议中。Holochain和区块链是针对截然不同的应用场景而构建的。对于维持绝对的全球共识的系统来说，区块链相对有优势。在需要弱共识（大多数情况下）的情况下，Holochain 比区块链要好得多：它更快，更高效，更具可扩展性，适应性强和可扩展性。分布式账本技术（DLT）可互换的分支分别是有向无环图（DAG）、Swirlds的哈希图Hashgraph、Holoochain 的分布式散列表（DHT）、区块链，四者是并列关系。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;Holochain用Rust重新实现了之前Go写的核心框架。目前正在准备完善的P2P网络。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.genesisfor.com/life1/show/338.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Holochain深度介绍&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/holochain/holochain-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;holochain-rust&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/holochain/establishing-tech-stack-foundation-and-preparing-for-full-p2p-networking-46ababdb6e44&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「博文」GitHub Actions第一印象&lt;/h2&gt;&lt;p&gt;作者（mgattozzi）最近尝试了GitHub Action的测试版。本文实现了一个类似于Rust项目机器人（比如Rust源码仓库中的机器人bors）的容器来介绍GitHub Action的用法。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/mgattozzi/github-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;github-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//mgattozzi.com/github-actions-an-introductory-look-and-first-impressions/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「博文」Rust重写Python项目心得&lt;/h2&gt;&lt;p&gt;作者用Rust重写了一个Python项目，性能提升了9倍，内存占用少了一半。本文记录了他重写过程中的心得。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//alantrick.ca/writings/programming/python_to_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「博文」Cpp、Rust和D分别实现Pythagorean三元组的性能比较&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//atilanevesoncode.wordpress.com/2018/12/31/comparing-pythagorean-triples-in-c-d-and-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;经验报告：从Rustacean的角度来看Swift&lt;/h2&gt;&lt;p&gt;同时喜欢Swift的可以关注下&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.waffles.space/2018/12/31/swift-experience-report/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;2018俄罗斯AI杯挑战赛&lt;/h2&gt;&lt;p&gt;俄罗斯AI杯 - 由&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//Mail.Ru&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;Mail.Ru&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; Group和Codeforces组织的年度IT导向竞赛计划。今年的比赛叫做CodeBall。参与者编写代码使他们的机器人将球击入对手的网中。用Rust和WASM编写AI策略。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.kuviman.com/2019/01/01/russian-ai-cup-2018.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//russianaicup.ru/p/quick&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Quick Start&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//russianaicup.ru/play&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线试玩&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「博文」2019期望：使用Rust制作和使用C兼容的库&lt;/h2&gt;&lt;p&gt;目前构建和安装共享库比较困难，尤其是在多个平台上。Cargo的能力目前还待扩展，Rust的ABI也未稳定，所以需要使用兼容C-ABI来和其他语言沟通。但是现在如果你的库想提供一个C绑定接口，目前还没有一个完美的解决方案。作者罗列了现存的问题，并且他计划在2019年尝试提供一些解决方案。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blogs.gentoo.org/lu_zero/2018/12/30/making-and-using-c-compatible-libraries-in-rust-present-and-future/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「学术论文」利用Rust类型进行模块化规范和验证&lt;/h2&gt;&lt;p&gt;论文的四个作者均来自于瑞士苏黎世联邦理工学院计算机科学系。文中声称利用了一种新的验证技术，利用Rust类型系统来简化Rust程序的规范和验证。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.research-collection.ethz.ch/handle/20.500.11850/311092&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Google出品的最节能的语言数据统计&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//sites.google.com/view/energy-efficiency-languages/results&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;学习资源&lt;/h2&gt;&lt;h2&gt;趣图分享&lt;/h2&gt;&lt;p&gt;我在刚学Rust的时候，这俩类型搞的我很懵。今天做这俩图，方便帮助初学者理解。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;478&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;478&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;379&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;379&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;「视频」使用Rust构建高性能并发数据库&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/acucrs/rust_at_speed_building_a_fast_concurrent_database/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/acucrs/rust_at_speed_building_a_fast_concurrent_database/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「嵌入式Rust」树莓派3裸机编程指南&lt;/h2&gt;&lt;blockquote&gt; 目标受众是对此硬件不熟悉的业余操作系统开发人员。它将为您提供有关如何执行常见操作系统任务的示例，例如写入串行控制台，从中读取击键或使用各种外围设备（如硬件支持的随机数生成器）。但是，它不是如何编写完整操作系统的教程。我不会涉及高级内存管理和虚拟文件系统等主题，或者如何实现多任务处理。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-embedded/rust-raspi3-tutorial&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」设置Arduino UNO版和Mac的开发环境&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//treesandrobots.com/2018/12/rustduino-pt-1-setting-up-development-environment.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「博文」使用过程宏派生trait&lt;/h2&gt;&lt;p&gt;作者以扩展askama模板为例，介绍了过程宏的使用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//naftuli.wtf/2019/01/02/rust-derive-macros/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「博文」对Rust中错误传播的思考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//people.gnome.org/%7Efederico/blog/propagating-errors.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「流媒体技术」构建MPD索引&lt;/h2&gt;&lt;p&gt;MPD(Media Present Description)可以非常简洁——只需要短短的几行表述就可以构建一个很大的媒体列表。&lt;/p&gt;&lt;p&gt;作者一般从SoundCloud下载音乐进行播放，但是过程很麻烦：必须浏览SoundCloud，下载一个看起来很有趣的曲目，将其上传到音乐服务器，让MPD将其编入索引，然后播放。所以作者用Rust制作了SoundClound音乐索引，文章记录了他的做法。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//polyfloyd.net/post/soundcloud-fuse-mpd/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/polyfloyd/soundcloud-fs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;源码：soundcloud-fs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;hackerman: 用Rust编写的16位Hack机器语言的汇编程序&lt;/h2&gt;&lt;p&gt;基于nom实现，可当学习之用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/onatm/hackerman&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hackerman&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;项目、框架、工具与库&lt;/h2&gt;&lt;h2&gt;Reducer 1.0发布&lt;/h2&gt;&lt;p&gt;号称用Rust实现了Flux模式的可预测性(Predictable)响应式框架。受js的Redux库影响很大。可用于管理任何类型的应用程序的状态。 尤其是GUI。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/brunocodutra/reducer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;reducer&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「小项目」[PoC]使用WASM、async/await和Futures0.3构建项目模板&lt;/h2&gt;&lt;p&gt;这是对rust-webpack-template库的改装，支持了wasm、async/await和futures 0.3。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/SillyFreak/Rust-WASM-Async-Example&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust-WASM-Async-Example&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Piet：2D图形抽象&lt;/h2&gt;&lt;p&gt;包含了一些用于2D图形绘制的API。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/linebender/piet&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;piet&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;r64emu： Rust实现的任天堂N64模拟器&lt;/h2&gt;&lt;p&gt;目前完成度很低，还不能玩任何游戏。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rasky/r64emu&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;r64emu&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rust-rocksdb: rocksdb的Rust绑定&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-rocksdb/rust-rocksdb&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-rocksdb&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;console_log: 支持在浏览器控制台中打印Rust的日志信息&lt;/h2&gt;&lt;p&gt;基于wasm-bindgen实现&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/iamcodemaker/console_log&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;console_log&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「图形处理」meshlite: 3D网格生成和处理&lt;/h2&gt;&lt;p&gt;状态：WIP&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/huxingyi/meshlite&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;meshlite&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;vec_tree: 提供了安全的树结构&lt;/h2&gt;&lt;p&gt;基于generational-arena，避免了ABA问题。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//docs.rs/vec-tree/0.1.0/vec_tree/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vec_tree&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/fitzgen/generational-arena&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;generational-arena&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;pyoxidizer: Rust编写的Python应用分发工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/indygreg/pyoxidizer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pyoxidizer&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Ropey发布1.0版&lt;/h2&gt;&lt;p&gt;Ropey是一个文本rope数据结构的实现，旨在成为文本编辑器等应用程序的后备文本缓冲区。&lt;/p&gt;&lt;p&gt;Rope一个二叉查找树。优势：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rope不需要连续的内存空间，不像数组&lt;/li&gt;&lt;li&gt;Rope在字符串中进行插入和删除更快O（logn）。而在字符串数组中需要O（n）。&lt;/li&gt;&lt;li&gt;在进行数据copy时。Rope不需要额外的O（n）内存空间。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;ul&gt;&lt;li&gt;需要更多的内存空间，需要维护父节点。&lt;/li&gt;&lt;li&gt;增加代码的复杂度。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/cessen/ropey&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ropey&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;regex-automata: 使用DFA的正则表达式库&lt;/h2&gt;&lt;p&gt;支持no_std环境。与regex库的区别是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;regex是通用的正则表达式引擎，对编译时间、搜索和内存使用有一个均匀的平衡，还提供了方便的API。&lt;/li&gt;&lt;li&gt;regex-automata，则提供了更加底层的接口，可能对于用户来说不太方便，但它提供对内存使用和搜索时间更明确的控制。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/BurntSushi/regex-automata&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;regex-automata&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;strength_reduce: 快速整数除法和模数运算&lt;/h2&gt;&lt;p&gt;支持no_std环境。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ejmahler/strength_reduce&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;strength_reduce&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;umeboshi: Rust实现的交互式shell&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/masahiko-ofgp/umeboshi&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;umeboshi&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rust-unic: Unicode和I18n库发布0.8版&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/open-i18n/rust-unic/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-unic/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;kurbo：处理曲线的库&lt;/h2&gt;&lt;p&gt;包含曲线和矢量路径的数据结构和算法。 它可能最适合创作工具，但它足够通用，可能对其他应用程序有用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/linebender/kurbo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;kurbo&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-06-54196508</guid>
<pubDate>Sun, 06 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>《Rust编程之道》出版了，但我却遭遇了人心险恶</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-06-54153985.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54153985&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c87c71291210a7dbc848021b3441ea13_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;后续：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我被人算计了。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;697&quot; data-rawheight=&quot;502&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;697&quot; data-original=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;697&quot; data-rawheight=&quot;502&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;697&quot; data-original=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;然后我想起发生在去年的一件事，一个叫尹名杨的家伙，假装公司培训，想骗取我的书稿，被我识破了。可能就是这样得罪了他。故意想拉仇恨。是我被小人给利用了。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;在这里跟 《深入浅出Rust》作者和机械工业出版社的杨编辑、高编辑郑重道歉。是我自己得罪了小人，牵连了你们，对不起！我相信这个世界上善意多于恶意，也相信邪不压正。但我没想到有这么邪恶阴险的人存在。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;今天我来讲一个暗箭伤人的故事。&lt;/p&gt;&lt;p&gt;最近《Rust编程之道》正式出版了，同时启动了预售，各大平台都在紧锣密鼓地铺货。也有很多人购买我的签名版。这本是一个非常令人高兴的事情。对不对？&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;全网第一条差评&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;可是，昨天上午，也就是1月5号上午，我在豆瓣读书里看到《Rust编程之道》的书评里出现了一条差评。同时也是全网第一条且迄今为止唯一一条差评。&lt;/p&gt;&lt;p&gt;是这样的：&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1728&quot; data-rawheight=&quot;1504&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1728&quot; data-original=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1728&quot; data-rawheight=&quot;1504&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1728&quot; data-original=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;刚开始，我以为只是一条普通的差评。毕竟，每一本书，都不可能照顾到所有人群，总会有些差评的。我也没有在意。只是有点奇怪，大家都在等着京东或天猫发货，怎么他就看完了呢？&lt;/p&gt;&lt;p&gt;但是后来我注意到了这个帖子的发表日期，大家注意，是1月3号。这引起了我的警觉。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;那么，1月3号发生了什么？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1月3号晚上18点08，我在豆瓣发现，《Rust编程之道》的豆瓣书评链接已经创建好了。有图为证，是和编辑的聊天记录。&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;676&quot; data-rawheight=&quot;783&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;676&quot; data-original=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;676&quot; data-rawheight=&quot;783&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;676&quot; data-original=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_b.jpg&quot;&gt;&lt;figcaption&gt;1.3周四18:08&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;得到这个消息我很兴奋，因为我写书，是冲着豆瓣9.0+分的目标来完成的。于是我在QQ群、微信群、Rust日报的TgChannel里都发了通告。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1月3号晚上18点12&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;752&quot; data-rawheight=&quot;910&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;752&quot; data-original=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;752&quot; data-rawheight=&quot;910&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;752&quot; data-original=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_b.jpg&quot;&gt;&lt;figcaption&gt;1.3在qq群 18:12&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;1月3号晚上18点13&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1382&quot; data-rawheight=&quot;1218&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1382&quot; data-original=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1382&quot; data-rawheight=&quot;1218&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1382&quot; data-original=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_b.jpg&quot;&gt;&lt;figcaption&gt;星期四，也就是1月3号，在微信群，18:13&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1月3号晚上18点17&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1764&quot; data-rawheight=&quot;356&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1764&quot; data-original=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1764&quot; data-rawheight=&quot;356&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1764&quot; data-original=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_b.jpg&quot;&gt;&lt;figcaption&gt;1月3号 18:17 在tg channel&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1月3号晚上19点09，全网第一条差评就出现了。更加诡异的是，1月3号，还没有一个人拿得到书，包括我自己。而这个人就看完了。神奇不？可能是我1月3号在家不小心放了个P得罪了哪个小气神仙，故意来这报复我？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;是不是神仙不知道，但一定是个鬼&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我们来分析一下豆瓣书评里的内容。上来第一句就是《深入浅出Rust》，后面还跟了个《Programming Rust》。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;而且还特意说明了，「他通读了这四本书（包括我这本），总结出一条：你们学习Rust，有深入浅出就够了」（事后已经知道，这是我得罪的那个小人，故意为之。恐怕这几本书他都没看过。）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;「如果有不错的C++背景」&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;请问，不错的C++背景你能找出几个？C++学的不好，或者不会C++就特么不能学Rust了吗？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;「这本“道”书，作者看似对于编程语言有所了解，但实际上内容苦于无着力点，写的比较软」&lt;/b&gt;&lt;/p&gt;&lt;p&gt;唉，大家看看这是个啥人。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1478&quot; data-rawheight=&quot;790&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1478&quot; data-original=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1478&quot; data-rawheight=&quot;790&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1478&quot; data-original=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;我真的无力吐槽这货了。我特别想跟这货说：&lt;b&gt;“不管你是个人行为，还是背后还有谁在支持，或者你是为了舔谁而当舔狗，你办事就不能办的漂亮一点吗？”&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;什么样的评价最有价值&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我很欣慰，还是有认真读书，给我反馈的人。这才叫真实。人无完人，书无完美。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2366&quot; data-rawheight=&quot;2438&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2366&quot; data-original=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2366&quot; data-rawheight=&quot;2438&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2366&quot; data-original=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;我学习Rust三年，从Rust语言那里学到了社区的重要性。Rust语言是社区的，而我这本书，同样，也是社区的。通过社区不断的反馈，我不断的修正，我相信我这本书会成为经典。&lt;/p&gt;&lt;p&gt;有人跟我说，“写本书确实不容易，我支持你”。我真的很感谢他。感谢支持！&lt;/p&gt;&lt;p&gt;不过，&lt;b&gt;「不容易」不是我想要的安慰&lt;/b&gt;。大家看的时候有什么问题及时反馈，看完以后去豆瓣给个完整公正客观的评价是对我最大的支持。&lt;/p&gt;&lt;p&gt;写书，本质是作者和读者的一种交流。请认真读完它，再做出客观公正的反馈，对你，对别人，都是一种尊重和负责。作为读者，如果你连别人的话都没有听完整或看完整，你不理解别人的意思，你TM有什么资格评价或者质疑呢？&lt;/p&gt;&lt;p&gt;&lt;b&gt;不过，有些人生来只会吸收书中的毒素。我也没法强求他去寻找书中的美好。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我写这篇文章不是因为担心书的评价好与坏，我自己写的书，我当然是有信心的，书写的是否用心，大家的眼睛也是雪亮的。而是因为有些人和事，实在是让我恶心到不吐不快。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;就这样吧，公道自在人心。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-06-54153985</guid>
<pubDate>Sun, 06 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>《Rust编程之道》预售开启</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-04-53527737.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53527737&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c583a5daf6085325fb01402f7ab246b5_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;感谢大家一直以来对这本书的关注，《Rust编程之道》今天终于开始预售了。&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;《Rust编程之道》介绍&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;本书跟进&lt;b&gt;Rust 2018 Edition。&lt;/b&gt;本书的特色：&lt;/p&gt;&lt;blockquote&gt;从设计哲学出发，探索Rust语言内在一致性 ；从源码分析入手，探索Rust地道的编程风格 ；从工程角度着手，探索Rust对健壮性的支持 ；从底层原理开始，探索Rust内存安全的本质&lt;/blockquote&gt;&lt;p&gt;更多关于本书的介绍，大家可以参考这篇文章：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47179483&quot; class=&quot;internal&quot;&gt;张汉东：《Rust编程之道》完整目录公布&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;&lt;b&gt;为大家提供了样章下载：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;链接: &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1wWU9zPnMi1zz4JA_MTjDVQ&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1wWU9zP&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;nMi1zz4JA_MTjDVQ&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;    提取码:    yuey &lt;/p&gt;&lt;p&gt;&lt;b&gt;可以关注随书源码：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;GitHub:  &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ZhangHanDong/tao-of-rust-codes&lt;/a&gt; &lt;/p&gt;&lt;p&gt;随书源码也提供在线文档，包含了随书示例，一键跳转到Playgroud。&lt;/p&gt;&lt;p&gt;欢迎大家提交勘误issues。&lt;/p&gt;&lt;p&gt;&lt;b&gt;电子版说明：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;暂时没有电子版发行，不过有发行计划，具体情况我也不清楚，对电子版感兴趣的可以到时候关注我的通告。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;加群交流&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;如果你想和我交流，可以加我的微信群，通过私聊方式获取我的微信号，到时候邀请进群。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;电子工业出版社预售地址：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//item.jd.com/12479415.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《Rust编程之道》(张汉东)【摘要 书评 试读】- 京东图书&lt;/a&gt; &lt;/p&gt;&lt;p&gt;八四折，优惠力度还可以。&lt;b&gt;官方预售大概是2019年1月7号开始发货。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;作者签名版&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;更新： 名额已满，暂不接受签名版购买。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;想买我签名版的朋友可以关注我的微信小店：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//weidian.com/s/1165436513%3Fwfr%3Dc%26ifr%3Dshopdetail%26source%3Dshop%26sfr%3Dapp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;混沌小店&lt;/a&gt;&lt;b&gt;，也可以通过扫描下图二维码来进入店铺。&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;2250&quot; data-rawheight=&quot;3750&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2250&quot; data-original=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;2250&quot; data-rawheight=&quot;3750&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2250&quot; data-original=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot;&gt;&lt;figcaption&gt;混沌小店-《Rust编程之道》签名版&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;小店里提供了50份价值15元的优惠卷，相当于是九折优惠，包邮。因为我不是经销商，无法给大家提供更多的优惠了。如果你想要更便宜的价格，可以关注电子工业出版社官方店铺的八四折优惠。&lt;b&gt;签名版发货比官方多等一到两周。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;样书照片&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;说明：封面上有白色条纹，那是印刷质感，不是磨损。&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3968&quot; data-original=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3968&quot; data-original=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3968&quot; data-original=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3968&quot; data-original=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-04-53527737</guid>
<pubDate>Fri, 04 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust每日新闻」2018年度盘点</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-30-53666773.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53666773&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0f4eb60f30389c55a33e2da72ba1b15e_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;&lt;br&gt; 从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;rust.cc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;论坛、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀&lt;/a&gt;都开通了Rust每日新闻，分享我每天的见闻，偶尔也夹杂了一些个人的观点。在2018年，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。&lt;br&gt;&lt;br&gt;时间即将要迈入2019年了，今天我抽空对今年Rust社区的动态做了一次简单的盘点。2018.12.30&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;br&gt;&lt;b&gt;「通告」2019年起「Rust每日新闻」将改名为「Rust日报」&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&lt;p&gt;因为「Rust每日新闻」这个名字太长了，尽量缩短一些，也符合Rust的调性。&lt;/p&gt;&lt;p&gt;&lt;br&gt; 今年我坚持每天不间断地了解、梳理、总结我所看到的Rust社区中的信息，并通过此频道分享给大家，于我个人而言，是完成了一次自我挑战。所带来的收获有很多，这个只有我自己才能体会。同时，希望大家也能在2019年跟我一样，每天能坚持自己感兴趣的事。&lt;br&gt;&lt;br&gt;到年底，我的书&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53527737&quot; class=&quot;internal&quot;&gt;《Rust编程之道》也总算出版了&lt;/a&gt;，感谢大家一直以来的关注。现在最希望的就是收到大家的阅读评价，无论好坏，我自己是尽心了，希望可以为Rust在国内的推广做出一点微薄的贡献。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方大事记&lt;/b&gt;&lt;br&gt;&lt;br&gt;Rust 2018 关键字：&lt;b&gt;生产&lt;/b&gt;（Production）&lt;br&gt;&lt;br&gt;&lt;b&gt;盘点：&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Rust 2018 edition发布，Rust 1.31.0 是Rust 2018 edition的首个稳定版。标志着现在完全可以在生产环境使用Rust稳定版了。&lt;/li&gt;&lt;li&gt;Rust 1.30标志着嵌入式Rust开发迎来的第一个稳定版本。你可以在不依赖unstable功能的情况下构建出完整可用的嵌入式程序。并且官方也为嵌入式开发者提供了充足的文档和生态链工具。&lt;/li&gt;&lt;li&gt;经过官方网络工作组调查报告，2018年在Web方面，流行的框架是Rocket和Actix，分别占比27%和24%。也有其他框架的选择，但是有20%的人不选择任何框架，而是在hyper上自行搭建服务。&lt;/li&gt;&lt;li&gt;官方web框架Tide也启动了开发，旨在为Web异步开发建立统一标准。&lt;/li&gt;&lt;li&gt;Rust和WebAssembly用于扩充JavaScript，而不是替换它。这个核心价值观推动了2018年Rust在WebAssembly领域的发展。生产链工具wasm-bindgen和wasm-pack已然成熟。&lt;/li&gt;&lt;li&gt;万众瞩目的异步支持虽然还未稳定，但基本的前奏工作也即将就绪，预计在2019年中旬可以稳定。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;br&gt;&lt;b&gt;社区大事记&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;数据库领域：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;国内PingCAP公司基于Rust实现的开源分布式事务键值数据库TiKV，进入了云原生计算基金会（CNCF）Sandbox， 用于早期和持续发展的云原生项目。&lt;/li&gt;&lt;li&gt;Rust编写的现代嵌入式数据库sled已发布到0.16版。&lt;/li&gt;&lt;li&gt;Rust编写的图数据库indradb，已发布到0.21版。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rust在游戏领域也有了十足的成长。&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;Amethyst游戏引擎基金会成立。&lt;/li&gt;&lt;li&gt;Specs倡导的ECS模式，在Rust社区颇受欢迎。并且Specs也有了继承者nitric，会为开发者提供更好的体验。&lt;/li&gt;&lt;li&gt;曾开发 《战神：奥林匹斯之链》 和《 战神：斯巴达之魂》 的业界大厂 Ready at Dawn Studios 全面拥抱Rust。其CTO亲自动手实现了一个用于测试2D渲染的Playground库modulator_play。&lt;/li&gt;&lt;li&gt;前EA首席设计官成立的新独立游戏工作室Embark宣布使用Rust为主要语言。&lt;/li&gt;&lt;li&gt;各种轻量级游戏框架或库出现：比如轻量级2D游戏框架ggez、纯Rust实现的2D和3D物理引擎nphysics、2D和3D的碰撞检测库ncollide等&lt;/li&gt;&lt;li&gt;Rust和WASM结合应用于游戏也有不少例子，最有意思的是这个开源的基于浏览器的流沙游戏：MaxBittker/sandspiel&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;GUI和图形图像处理。&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;gfx-rs/gfx ，高性能无绑定的图形库，支持：Vulkan/ DirectX 12 /Metal /OpenGL 2.1+/ES2+等，Fifrefox的WebRender组件也用到了该库。到年底也发布了gfx-hal库，是对硬件的直接抽象层。&lt;/li&gt;&lt;li&gt;MaikKlein/rlsl，是支持Rust编译到SPIR-V的库，SPIR-V是一种用于GPU通用计算和图形学的中间语言。&lt;/li&gt;&lt;li&gt;GUI框架Azul：面向IMGUI的免费功能性GUI框架，支持用Rust编写桌面软件，基于Mozilla WebRender渲染引擎。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Web前端（WASM）和后端框架：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;yew: 最早的基于Rust和WASM的前端框架，灵感来自于Elm和ReactJS，支持创建多线程前端App。&lt;/li&gt;&lt;li&gt;seed: Rust+WebAssembly 前端框架，基于wasm-bindgen和js-sys创建。创建应用时需要依赖web-sys。&lt;/li&gt;&lt;li&gt;Ruukh是一个前端Web框架，受到VueJS和ReactJS的启发，基于Rust和WASM。&lt;/li&gt;&lt;li&gt;「Rust前端框架」Draco：利用Rust和Wasm编写前端代码。灵感来自于React和Elm。使用了虚拟Dom。&lt;/li&gt;&lt;li&gt;「Web框架」Rocket v0.4发布，预计下个版本，将可以应用于Rust稳定版本。&lt;/li&gt;&lt;li&gt;目前社区流行的Web框架：actix-web和rocket。Tower作者和Hyper作者正在联合实现Warp框架，而Rust官方在完善Tide框架，在Tide框架标准完善之后，社区的其他框架应该会统一配合官方来完成变更，比如支持统一的中间件协议、async/await语法支持等。&lt;/li&gt;&lt;li&gt;目前最成熟的ORM框架还是Diesel。&lt;/li&gt;&lt;li&gt;Graphql框架比较成熟的是juniper。&lt;/li&gt;&lt;li&gt;全文搜索工具tantivy-search/tantivy，对标Apache Lucene。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;解析工具：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;nom、combain、pest三足鼎立。也有人写了一本书，提供了一些文档和示例，帮助你选择适合使用场景的解析工具。&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//freemasen.github.io/parsers_presentation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rust在区块链领域发展：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Zcash、Parity、秘猿、IBM超级账本等公司，都使用Rust构建自己的区块链生态。尤其是Parity的polkadot项目，将使用Rust构建异构区块链互联网。社区也发布了很多Rust编写的算法、零知识证明库等。&lt;/p&gt;&lt;p&gt;&lt;b&gt;操作系统&lt;/b&gt;：&lt;/p&gt;&lt;p&gt;下一代操作系统Redox、嵌入式物联网操作系统TockOS和Google新的号称替代Fuchsia操作系统，都全部或部分使用了Rust。斯坦福大学、清华大学也开始使用Rust语言尝试进行操作系统的教学。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;机器学习：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;Juice是一个开放的机器学习框架，之前的名字叫leaf，用于构建经典，深度或混合机器学习应用程序。 它受到TensorFlow，Torch，Caffe，Rust和众多研究论文背后的杰出人士的启发，并为深度学习带来了模块化，性能和便携性。&lt;/li&gt;&lt;li&gt;第三方服务Machine Box将最先进的机器学习功能置于Docker容器中，因此像您这样的开发人员可以很快地将自然语言处理，面部检测，对象识别等功能轻松纳入您自己的应用程序中。提供了Rust SDK。&lt;/li&gt;&lt;li&gt;Rust极有可能成为构建世界级机器学习工具的语言，但它目前缺少一些重要的数学基础设施BFGS，在今年有人专门建立了一个开源项目paulkernfeld/bfgs来填补此空白。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;云计算相关&lt;/b&gt;：&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;亚马逊AWS开源Firecracker。Firecracker是一种开源虚拟化技术，专门用于创建和管理安全，多租户容器和基于功能的服务，提供无服务器操作模型。 Firecracker在轻量级虚拟机中运行工作负载，称为microVM，它将硬件虚拟化技术提供的安全性和隔离性与容器的速度和灵活性相结合。&lt;/li&gt;&lt;li&gt;ASW Lambda Serverless全面支持Rust。&lt;/li&gt;&lt;li&gt;红帽开源Stratis。Stratis为桌面Linux用户提供了一系列强大的高级存储功能，并且易于使用，基于Rust实现，Stratis也是是卷管理文件系统（VMF），比如ZFS和Btrfs。它始于存储“池”的核心思想，这与VMF和LVM等独立卷管理思想一致。&lt;/li&gt;&lt;li&gt;Dropbox开源了Rust实现的新的并发矢量化压缩算法DivANS，可以编译成WASM以在浏览器和服务器上进行高密度压缩。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rust也用于安全领域，社区中也陆续出现了一些Rust实现的安全工具&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;比如：&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;网络实时入侵检测(IDS)、嵌入式入侵防御(IPS)和网络安全监控(NSM)的引擎Suricata&lt;/li&gt;&lt;li&gt;web服务批量扫描工具lachesis。&lt;/li&gt;&lt;li&gt;一款Android应用程序分析工具SUPER，可以检测潜在的安全漏洞并创建漂亮的报告。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;今年基于Rust实现的CLI App，也颇受瞩目。&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;bat，Rust实现的类cat工具，最流行。&lt;/li&gt;&lt;li&gt;exa，Rust实现的类ls工具&lt;/li&gt;&lt;li&gt;ripgrep，支持正则语法的文本搜索工具&lt;/li&gt;&lt;li&gt;tui-rs，一个强大的终端Dashborad工具&lt;/li&gt;&lt;li&gt;mcfly，更智能展示你shell历史的工具，自带小型神经网络（mall neural network）&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;基于Rust实现的编程语言：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;deno，Node作者的新语言，基于V8的TypeScript运行时，基于Rust实现（代码量24.2%），在今年颇受关注。&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Gluon是函数式语言，借鉴了 F#, OCaml 和 Haskell语言，静态类型，并支持类型推断。它的目标应该是类似于Lua语言，可以嵌入在Rust语言中，也可以直接调用Rust函数，和Rust无缝集成。&lt;/li&gt;&lt;li&gt;Dyon是Piston游戏引擎组织实现的动态类型脚本语言，专门为游戏引擎和交互式应用程序而创建，其对象模型和javascript类似，但不存在null，支持类似Go的协程等。也可以和Rust无缝集成。&lt;/li&gt;&lt;li&gt;Formality，可用于写智能合约，可用于定理证明，兼容EVM（可运行以太坊合约），兼容GPU。&lt;/li&gt;&lt;li&gt;使用Rust编写语言vm系列文章：&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//blog.subnetzero.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;blog.subnetzero.io&lt;/a&gt; 。该作者写了33篇博文，并且制作了一个寄存器式VM，源码在GitHub的subnetzero/iridium&lt;/li&gt;&lt;li&gt;根据《 Writing an Interpreter in Go》写的Rust版本的monkey-rust语言。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;b&gt;小结&lt;/b&gt;&lt;br&gt;&lt;br&gt;Rust社区欣欣向荣，以上盘点也只是冰山一角，最好还是能亲自加入社区体验和成长。&lt;br&gt;&lt;br&gt;现在正是开始学习Rust的时候。Rust作为一种通用型语言，不管你的方向是前端、还是后端，亦或是编写嵌入式应用、还是写操作系统、网络服务等，都可以使用Rust。如果你是学生，可以尝试开始学习Rust，提升自己的竞争力。如果你是在职人员，也不妨学习一下Rust，因为它是新时代的语言。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-30-53666773</guid>
<pubDate>Sun, 30 Dec 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
