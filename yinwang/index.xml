<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>当然我在扯淡</title>
<link>https://henix.github.io/feeds/yinwang/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Sat, 22 Jun 2019 11:13:01 +0800</lastBuildDate>
<item>
<title>机器学习与逻辑编程</title>
<link>https://henix.github.io/feeds/yinwang/2019-01-30-machine-learning.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2019/01/30/machine-learning&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;机器学习与逻辑编程&lt;/h2&gt;
            &lt;p&gt;（声明：本文内容纯属个人的技术兴趣，与本人在职公司的立场无关）&lt;/p&gt;

&lt;p&gt;你可能没有想到，机器学习（machine learning）和逻辑编程（logic programming）有着一种美妙的关系，在我眼里她们就像一对亲姐妹。&lt;/p&gt;

&lt;p&gt;很多人都了解机器学习，可是很少有人理解逻辑编程。在这篇短文里，我试图告诉你逻辑编程是什么，以及它与机器学习的相似之处。&lt;/p&gt;

&lt;h3 id=&quot;逻辑编程是什么&quot;&gt;逻辑编程是什么&lt;/h3&gt;

&lt;p&gt;说到逻辑编程（logic programming），人们不禁想到 Prolog 之类晦涩的逻辑式编程语言。很多人上本科的时候被迫学过 Prolog，但从来不知道它有何意义。毕业之后再听到 logic programming 这个词，就只剩下敬畏和茫然，或者觉得是没用的老古董。&lt;/p&gt;

&lt;p&gt;其实逻辑编程是很美的东西，并不过时。它的有些思想已经悄悄被应用到了最先进的编程语言之中。逻辑编程的原理可以被很轻松的解释清楚，而不需要理解 Prolog。&lt;/p&gt;

&lt;p&gt;最近研究机器学习，我发现逻辑编程与机器学习之间有着有趣而隐秘的关系。我希望这可以调动起你的胃口来。&lt;/p&gt;

&lt;p&gt;要理解逻辑编程是什么，你只需要看一个很简单的例子：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有一个未知数 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;，我们不知道它是多少，但我们知道：&lt;/p&gt;

  &lt;p&gt;​     X + 2 = 5&lt;/p&gt;

  &lt;p&gt;请问 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 是几？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上求解 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 的问题就是一个逻辑程序。像 Prolog 这样的逻辑语言系统，会给你结果：&lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 等于 3。可是这个问题却不能用其它几乎所有编程语言来表达（C, C++, Python, Java, Go, Scala, Haskell, Rust, Swift…）。原因在于，使用普通的编程语言，你不能把“未知数”当成一个值来进行演算。&lt;/p&gt;

&lt;p&gt;在我们的例子里面，&lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 的值是未知数，所以当普通语言看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;X + 2&lt;/code&gt; 这样的表达式，它就无法运行。它会报错：使用未初始化的变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;。也就是说，你必须先知道 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 的值，你才能说 &lt;code class=&quot;highlighter-rouge&quot;&gt;X + 2&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但在像 Prolog 这样的逻辑式语言里面，“未知数”是可以被作为一个正常的值来进行计算的。它们可以被传递到其它函数里，可以被放进数据结构，可以进行复杂的逻辑组合操作，就像你在操作一个普通的数字或者字符串一样。&lt;/p&gt;

&lt;p&gt;逻辑式程序中一般会有一个（或者多个）“目标”（goal）。目标一般是一个判断表达式，也就是说它的值是布尔类型（boolean）。这里我们的例子里只有一个目标，就是“X + 2 = 5”。也就是说，我们想要 X 加上 2 等于 5。&lt;/p&gt;

&lt;p&gt;当逻辑式语言看到了目标，就把目标记下来。最后程序员开始提问：&lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 是几？这时候，逻辑语言的运行系统开始进行“反向计算”，找到未知数的值，使得目标的值为“真”（true）。在我们的例子里，系统会告诉你：&lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 等于 3。&lt;/p&gt;

&lt;p&gt;为什么叫做“反向计算”呢？因为&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们先声明了未知变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;，&lt;/li&gt;
  &lt;li&gt;然后我们提出目标 &lt;code class=&quot;highlighter-rouge&quot;&gt;X + 2 = 5&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于复杂一点的程序，1 和 2 之间可能还有其它的代码。我们最后的问题，却是问最开头声明的变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 等于几，所以系统从最后面的目标 &lt;code class=&quot;highlighter-rouge&quot;&gt;X + 2 = 5&lt;/code&gt; 出发，“反向”推导出 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; 的值。&lt;/p&gt;

&lt;p&gt;这就是为什么研究逻辑式编程的人把这种操作叫做“反向计算”。你可能注意到了，我们的代码里面只写了加法（&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;）操作，而系统实质上为我们做了减法：5 - 2 得到  3。&lt;/p&gt;

&lt;p&gt;如果你想深入理解逻辑式编程，我建议你看看 Dan Friedman 的书『&lt;a href=&quot;https://mitpress.mit.edu/books/reasoned-schemer&quot;&gt;The Reasoned Schemer&lt;/a&gt;』。但目前你了解到的这些，应该足以读完这篇文章。&lt;/p&gt;

&lt;h3 id=&quot;机器学习与逻辑编程的相似点&quot;&gt;机器学习与逻辑编程的相似点&lt;/h3&gt;

&lt;p&gt;你可能已经明白了逻辑编程是什么。下面我们来看看它跟机器学习有什么关系。&lt;/p&gt;

&lt;p&gt;首先我们看到逻辑编程有“目标”（goal），比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;X + 2 = 5&lt;/code&gt;。在机器学习中有一个对应的东西，那就是误差函数（loss function）。只不过逻辑编程的 goal 是个等式，而机器学习的 loss function 是个函数。&lt;/p&gt;

&lt;p&gt;逻辑编程系统会为你选择未知数的值，从而精确地“满足”这个 goal。而机器学习的目标呢，是要为你选择未知数的值，最小化这个 loss function，使得误差最小。看到相似之处了吗？所以，机器学习可以被看成是“在连续空间中的近似的逻辑编程”，而逻辑编程可以被看成是“在离散空间中的精确的机器学习”。&lt;/p&gt;

&lt;p&gt;逻辑编程有“反向计算”，机器学习有“反向传递”(back propagation)，而它们的工作方式，有着惊人的相似之处。只不过机器学习因为是连续空间的，所以需要使用微积分的原理，而不只是简单的逻辑组合。&lt;/p&gt;

&lt;p&gt;实际上逻辑编程必须先进行正向计算，构造出含有未知数的结构，然后进行所谓“resolution“，求出未知数的值。而机器学习也类似，你必须进行一遍正向计算（forward pass），然后才能进行 back propagation，求出导数，并且更新“weight”的值。&lt;/p&gt;

&lt;p&gt;逻辑编程的“未知数”（比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;），对应了机器学习的 weight。实际上，机器学习的 weight 本质就是“未知数”。你需要得到它们的值，使得 loss function 最小，但一开头你不知道它们是什么，所以你给它们一些随机的初始值，让系统开始正向计算。机器学习的 weight 和逻辑编程的未知数如此的相似，它们可以被作为普通的值，与输入进行计算操作（Conv 等操作），直至你遇到 goal 或者 loss function，然后你掉头回去调整未知数的值……&lt;/p&gt;

&lt;h3 id=&quot;机器学习框架是程序语言&quot;&gt;机器学习框架是程序语言&lt;/h3&gt;

&lt;p&gt;所以呢，你现在明白了我为什么对机器学习感兴趣了吧。我看到了它与编程语言的优雅知识之间的联系，看到了它是对于“计算”概念的一种扩展。机器学习把“计算”和“微积分”有趣地融合在了一起。&lt;/p&gt;

&lt;p&gt;实际上，你可以把机器学习的各种框架（framework）看成是新的编程语言，它们的工作原理类似于 Prolog 语言的运行时系统。如果要起一个名字，你也许可以把它们叫做“可求导编程语言”（differentiable programming language）。&lt;/p&gt;

&lt;p&gt;写 framework 的工作，实质上是设计编程语言或者解释器，编译器。而有些 framework 所谓的“计算图”，实质就是编译器中的 data-flow graph 或者 control-flow graph 一类的东西。&lt;/p&gt;

&lt;p&gt;目前这些语言还处于初级阶段，表达力比较弱，有各种不完善的地方。由于机器学习解决的是连续的数值问题，机器学习的“模型”一般要很简单才行，否则很可能出现学习不收敛的情况。所以我还不知道编程语言的很多概念能否顺利的迁移到机器学习上面。&lt;/p&gt;

&lt;p&gt;但目前看来有一些很明显的对应关系和发展趋势：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Feed-forward 网络，比如 CNN 一类的，对应了编程语言中最简单的表达式，或者叫“纯函数”。其中没有递归，也没有副作用。它只能处理图像一类具有固定长度的数据。&lt;/li&gt;
  &lt;li&gt;RNN 对应的是程序语言里含有递归（循环）的函数。由于递归函数对应的是“递归数据结构”，这就是为什么 RNN 可以处理文本一类没有固定长度的“链表”数据。&lt;/li&gt;
  &lt;li&gt;Neural Turing Machine 及其后续的研究 &lt;a href=&quot;https://deepmind.com/blog/differentiable-neural-computers/&quot;&gt;Differentiable Neural Computer&lt;/a&gt;，试图把更广阔的编程概念引入到机器学习里面，实现任意复杂的数据结构和计算。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于数值计算特有的误差问题和机器学习带来的巨大计算量，我不知道这个趋势最终可以发展到什么地步。但编程语言和机器学习的这个联系，是优雅而让人回味的。&lt;/p&gt;

&lt;p&gt;（如果你觉得这篇文章有启发，可以点击这里&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费&lt;/a&gt;）&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2019-01-30-machine-learning</guid>
<pubDate>Wed, 30 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>解谜英语语法（1）</title>
<link>https://henix.github.io/feeds/yinwang/2018-11-24-grammar-chapter1.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/11/24/grammar-chapter1&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;解谜英语语法（1）&lt;/h2&gt;
            &lt;h3 id=&quot;第一章初识句子&quot;&gt;第一章：初识句子&lt;/h3&gt;

&lt;p&gt;直到几百年前，各个不同大陆上的人还从来没见过面，可是他们的语言里却不约而同出现了同样的结构：句子。这难道不是很奇妙的事情吗？这说明句子的出现似乎是一种自然规律。&lt;/p&gt;

&lt;h3 id=&quot;句子的核心地位&quot;&gt;句子的核心地位&lt;/h3&gt;

&lt;p&gt;句子是人类语言最核心的构造。为什么呢？因为人和人说话终究是为了一个目的：描述一件事。&lt;/p&gt;

&lt;p&gt;这件事也许只有一个字：吃！&lt;/p&gt;

&lt;p&gt;也许可以很长：昨天晚上在上海某路边餐厅吃的&lt;strong&gt;鹅肝&lt;/strong&gt;，&lt;strong&gt;是&lt;/strong&gt;我吃遍全世界&lt;strong&gt;最好的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;一个句子表达的就是一件事，或者叫做一个“事件”。人与人交流，无非就是讲述一个个的事件。&lt;/p&gt;

&lt;h3 id=&quot;你需要的能力&quot;&gt;你需要的能力&lt;/h3&gt;

&lt;p&gt;所以要掌握一种语言，你只要掌握句子就行了。有了句子就有了一切。&lt;/p&gt;

&lt;p&gt;掌握句子包括两件事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;能够迅速地造出正确的句子，准确地表达自己的意思。&lt;/li&gt;
  &lt;li&gt;能够迅速地理解别人的句子，准确地接收别人的意思。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这两件事，一个是“发送”，一个是“接收”。因为语言是沟通（或者叫“通讯”）的工具，所以它就只包含这两件事。&lt;/p&gt;

&lt;h3 id=&quot;句子的本质&quot;&gt;句子的本质&lt;/h3&gt;

&lt;p&gt;假设我们是原始人，还没有语言。我想告诉同伴“我吃苹果”这件事，该怎么表达呢？没有语言，那我可以先画个图嘛：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/i-eat-apple.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;到后来，部落里的人聪明了一点，发明了“符号”这种东西。他们给事物起了简单的符号名字，不再需要画图了，所以我们有了 I, apple 这样的词用来指代事物。有了 eat 这样的词，用来代表动作。所以画面变成这个样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/i-eat-apple-symbol.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;后来干脆连框也不画了。直接写出这些符号来：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I eat apples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么，你觉得“我吃苹果”这个事，里面最关键的部分是什么呢？是“我”，“苹果”，还是“吃”呢？&lt;/p&gt;

&lt;p&gt;稍微想一下，你也许会发现，关键在于“吃”这个动作。因为那是我和苹果之间发生的&lt;strong&gt;事件&lt;/strong&gt;。这句话是说“吃”这件事，而“我”或者“苹果”，只是“吃”的一部分。&lt;/p&gt;

&lt;p&gt;用 eat 这个词，你不但可以表达“我吃苹果”，还可以表达“他吃面条”，“猫吃老鼠”之类的很多事情。于是，聪明一点的人就把 eat 这个词提取出来，做成一个“模板”：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/eat-verb.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个模板就是所谓“动词”。eat 这个动词给你留下两个空，填进去之后，左边的东西吃右边的。&lt;/p&gt;

&lt;h3 id=&quot;动词是句子的核心&quot;&gt;动词是句子的核心&lt;/h3&gt;

&lt;p&gt;就像我说的，句子是语言的核心，而动词就是句子的核心。动词是事件的关键，比如 eat。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A eat B.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们可以选择空格里的 A 或者 B 是什么。但不管怎么换，事情仍然是“吃”。为了描述方便，我们把 A 和 B 这两个空格叫做&lt;strong&gt;参数&lt;/strong&gt;（parameter）。&lt;/p&gt;

&lt;p&gt;这跟数学函数的参数（f(x) 里面那个 x）类似，也跟程序函数的参数类似。用数学或者程序的方式来表示这个句子，就是这样：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;eat(A, B)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中 A 和 B，是动作 eat 的参数。我只是打个比方帮助你理解，当然我们不会这样写英语。如果你完全不懂数学或者编程，可以忽略这个比方。&lt;/p&gt;

&lt;p&gt;动词决定了它的参数在什么位置，它们可以是什么种类的成分。比如 eat，它的两个参数只能是某种“物”。你不能放另一个动词（比如 walk）进去，也不能放 red 这样的形容词进去。这种动词对参数的约束，我们把它叫做“参数类型”。&lt;/p&gt;

&lt;p&gt;你可能发现了，一个句子除了动词，就只剩下动词的参数了。动词对它的参数具有决定性的作用，动词就是句子的核心。准确理解一个动词“想要什么参数”，什么样的构造可以出现在那个参数位置，就是造出正确句子的关键。&lt;/p&gt;

&lt;p&gt;使用不同的动词可以造出不同的句子。所以要理解语法，你在初期应该把大部分精力放在各种各样的动词身上，而不是花几个月时间去背名词和形容词。我并不是说名词和形容词不重要，只是它们并不是核心或者骨架。&lt;/p&gt;

&lt;p&gt;没有人会怪你不认识某种恐龙的名字，但如果你不能理解“I am not used to eating garbage food.” 是什么意思，那你可能就有麻烦了。&lt;/p&gt;

&lt;h3 id=&quot;如何造出正确的句子&quot;&gt;如何造出正确的句子&lt;/h3&gt;

&lt;p&gt;我已经提到，对于人的语言能力，“造句”能力占了一半。很多人不知道复杂的长句是怎么造出来的，所以他们也很难看懂别人写的长句。&lt;/p&gt;

&lt;p&gt;我并不是说一味追求长句是好事，正好相反。如果你能用短句表达出你的意思，就最好不要用长句。虽说如此，拥有造长句的“能力”是很重要的。这就像拥有制造核武器的能力是重要的，虽然我们可能永远不会用到核武器。&lt;/p&gt;

&lt;p&gt;当然，制造长句不可能有核武器那种难度。造长句其实挺容易。你只需要先造出一个正确的短句，然后按照规则，一步步往上面添加成分，或者把其中某一部分“扩大”，就可以逐渐“生成”一个长句。&lt;/p&gt;

&lt;p&gt;这就像造一个房子，你首先打稳地基，用钢板造一个架子，然后往上面添砖加瓦。你可以自由地选择你想要的窗户的样式，瓦片的颜色，墙壁的材质，浴缸的形状…… 好像有点抽象了，我举个例子吧。&lt;/p&gt;

&lt;p&gt;首先，我造一个最简单的句子。最简单的句子是什么呢？我们已经知道动词是句子的核心，有些动词自己就可以是一个句子。所以我们的第一个句子就是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;eat.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;它适用于这样的场景：你在碗里放上狗粮，然后对狗儿说：“吃。” 当然，你体会到了，这句话缺乏一些爱意，或者你只是早上起来还比较迷糊，不想多说一个字，但它至少是一个正确的句子。&lt;/p&gt;

&lt;p&gt;接下来，我们知道 eat 可以加上两个参数，所以我就给它两个参数：I, apples。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;I&lt;/strong&gt; eat &lt;strong&gt;apples&lt;/strong&gt;. （我吃苹果）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个句子适用于这样的场景：别人问我：“你一般吃什么水果呢？” 我说：“我吃苹果。”&lt;/p&gt;

&lt;p&gt;有点单调，所以我再加点东西上去。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I eat &lt;strong&gt;Fuji apples&lt;/strong&gt;. （我吃富士苹果）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fuji 被我加在了 apples 前面，它给 apples 增加了一个“修饰”或者“限定”。它只能是富士苹果，而不是其它种类的苹果。&lt;/p&gt;

&lt;p&gt;但我并不总是吃富士苹果，我有时不吃苹果。我想表达我只是“有时”吃富士苹果，所以句子又被我扩充了：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Sometimes&lt;/strong&gt; I eat Fuji apples. （我有时吃富士苹果）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你觉得这个 sometimes 是在修饰（限制）句子的哪个部分呢？它在修饰“我”，“苹果”，还是“吃”？实际上，它是在限制“吃”这个动作发生的频率，所以它跟 eat 的关系紧密一些，也就是说它是在修饰 eat，而不是 I 或者 apples。&lt;/p&gt;

&lt;p&gt;以此类推，我们可以把它发展得很长：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sometimes &lt;strong&gt;I&lt;/strong&gt; &lt;strong&gt;eat&lt;/strong&gt; fresh Fuji &lt;strong&gt;apples&lt;/strong&gt; bought from a local grocery store.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我有时候吃从一个本地杂货店买来的新鲜富士苹果。注意，虽然这句子挺长，但它的“骨架”仍然是 I eat apples.&lt;/p&gt;

&lt;p&gt;我已经演示了，一个长句是怎么“生成”的。先造一个短句，然后往上面添砖加瓦，是写出长句的关键。正确的短句，按照规则加上一些成分，就成为正确的长句。这样你的语法就会一直是正确的。&lt;/p&gt;

&lt;p&gt;当然，扩展句子的时候，你不能随意往上加东西，它们必须满足一定的规则才能正确的衔接。比如，你只能把 Fuji 放在 apple 前面，而不是后面。这就像造房子的时候，你不能在该放窗户的地方放一道门，你不能用错配件和胶水。所谓语法，很多时候就是在告诉你这些部件要怎么样才能接的上。&lt;/p&gt;

&lt;p&gt;在后面的章节，我们会逐渐接触到这些细节的规则。&lt;/p&gt;

&lt;h3 id=&quot;如何理解长句&quot;&gt;如何理解长句&lt;/h3&gt;

&lt;p&gt;人与人交流的另一个部分就是“接收”。如果书上有很长一句话，你要怎么才能理解它呢？许多人看到长句就头痛，不知道该怎么办。这是因为他们不明白长句都是从短句扩展出来的，所以产生了恐惧感。&lt;/p&gt;

&lt;p&gt;其实理解长句的方法，都隐含在了上一节介绍的造出长句的方法里面。造句的时候我们先勾画出一个框架，然后往里面填修饰的东西。理解的时候如果有困难，我们可以用类似的办法。我们首先分析出句子的主干，把它理解了，然后再往上面添加其它的成分，逐步理解到整个句子的含义。&lt;/p&gt;

&lt;p&gt;比如之前的那个例子：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sometimes &lt;strong&gt;I eat&lt;/strong&gt; fresh Fuji &lt;strong&gt;apples&lt;/strong&gt; bought from a local grocery store.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你需要“反向思考”，分析出句子的主干是短句“I eat apples”。如果你觉得一下子找不到主干，那么你可以试试挨个的找到“修饰成分”，把它们逐个删掉，最后留下来的就是主干了。&lt;/p&gt;

&lt;p&gt;注意，主干“I eat apples” 本身就是一个语法正确的句子，它满足所有的语法规则。于是你理解了它在说“我吃苹果”。然后你逐渐加上细节，知道是什么样的苹果，从哪里买来的，什么时候吃。&lt;/p&gt;

&lt;p&gt;漏掉或者误解了细节，你可能会误解一部分意思，但抓住了主干，你就不会完全不理解这个句子在说什么。&lt;/p&gt;

&lt;p&gt;再次强调，每一个复杂的长句，里面都藏着一个非常短的，语法正确的短句。理解长句的关键，就在于找到这个短句。&lt;/p&gt;

&lt;p&gt;如何获得识别修饰成分，找到主干短句的能力，也在于你对具体的语法规则的理解。这些我们在稍后的章节介绍。&lt;/p&gt;

&lt;h3 id=&quot;如何培养真正的能力&quot;&gt;如何培养真正的能力&lt;/h3&gt;

&lt;p&gt;这一章我只是介绍了你需要的两种能力，可是如何培养这两种能力呢？其实它们两者是相辅相成的。造句的能力可以帮助你理解别人的句子，而阅读别人的句子，分析其结构，可以帮助你获得造出类似句子的能力。&lt;/p&gt;

&lt;p&gt;所以我给你开的处方是这样：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;练习造句。每学一个动词，要用它造出多个句子来。这样你就获得对它的灵活运用的能力。&lt;/li&gt;
  &lt;li&gt;分析句子。看到一个复杂的句子，觉得理解有难度，你就把它抄下来。按照我介绍的“造句方法”，把它分解成主干和修饰成分。不久，你就会发现你的理解能力和造句能力都提高了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;要注意的是，分析句子的时候，没有必要去纠结一个成分“叫什么”，对应什么术语。比如它是表语还是宾语，还是宾补…… 这没有意义。&lt;/p&gt;

&lt;p&gt;你可以理解任何英语句子，你可以成为很好的记者或者作家，却仍然不知道什么叫做“宾补”。你只需要造句的能力和理解句子的能力，而你不需要术语就能做到这两点。&lt;/p&gt;

&lt;p&gt;最后可能有人问，你这是提高实际的英语能力，可是我需要应付的是标准化的考试。这样做能行吗？当然行，而且你做语法题的速度会非常快。没有考试题目会要求你“找出句子里的宾补成分来”。实际上，题目里不可能出现“宾补”这个词。他们只会在那个成分的位置留一个空，让你选择合适的内容填进去。也就是说，你不需要知道那个位置叫“宾补”，就能做对题。&lt;/p&gt;

&lt;p&gt;实际上，做题的时候，你的头脑里根本不应该出现“宾补”这样的术语。具有了真正的英语能力，做语法选择题的时候，你会一眼就选对正确的答案，却说不出这道题在考你哪方面的能力。是时态呢，还是某种句子成分？我不知道，因为那毫无意义，关键是我做对了题目！我就是感觉其它答案都不“顺口”，我根本不会写那样的句子，而正确的选项一眼看起来就是“通的”。&lt;/p&gt;

&lt;p&gt;所以不管是实际的交流还是做题，死抠语法术语都没有什么意义。你去问问每一个英国人，美国人，他们是怎么做对语法题的，你会得到同样的答案。这本书就是要帮助你得到这种母语级别的能力，而不是一些纸上谈兵的术语。&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-11-24-grammar-chapter1</guid>
<pubDate>Sat, 24 Nov 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>解谜英语语法</title>
<link>https://henix.github.io/feeds/yinwang/2018-11-23-grammar.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/11/23/grammar&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;王垠英语语法（前言）&lt;/h2&gt;
            &lt;h3 id=&quot;封二&quot;&gt;封二&lt;/h3&gt;

&lt;div style=&quot;text-align: right&quot;&gt;—献给 Daisy&lt;/div&gt;

&lt;h3 id=&quot;起因&quot;&gt;起因&lt;/h3&gt;

&lt;p&gt;这是一本独特的语法书。它的作者既不是专业英语教师，也不是语言学家，而是一个程序语言研究者。&lt;/p&gt;

&lt;p&gt;师从世界顶尖的程序语言专家，他钻研过世界上最美最强大的程序语言，他洞察过艰深古怪的逻辑学。现在，他认为程序语言和逻辑是已攻克的目标，山下的风景。&lt;/p&gt;

&lt;p&gt;对程序语言和逻辑的深刻理解，不但让他成为了更好的程序员，而且加深了他对自然语言（特别是英语）的理解。许多年来，他一直利用自己独到的方式来理解和使用英语。英语在他的头脑里有着跟常人很不一样的画面。对他而言，英语语法是如此的简单，琢磨起来趣味盎然。&lt;/p&gt;

&lt;p&gt;可是回国之后，他发现身边的朋友仍然在为语法的枯燥繁复而头痛，所以他萌生了写这样一本书的念头。他想把自己的英语如此流畅的秘密告诉世人，帮助那些正在为学习语法而痛苦挣扎的人们。&lt;/p&gt;

&lt;h3 id=&quot;语法书为什么枯燥难懂&quot;&gt;语法书为什么枯燥难懂&lt;/h3&gt;

&lt;p&gt;在我看来，普通语法书难懂的原因很简单：世代相传的照本宣科。语法书往往是包罗万象，“系统”地列出各种概念：名词，代词，动词，形容词，副词，句子成分，各种从句…… 洋洋洒洒上千页纸。不仅中国人写的语法书是这样，外国人写的语法书也这样。&lt;/p&gt;

&lt;p&gt;只见树木不见森林。这样的书缺乏“活知识”，到用的时候就想不起来，只能作为字典，需要的时候来查。所以很多人学了这些大部头语法书，照样写不出像样的句子来。时间充裕的写作都没法写好，面对外国人的时候进行快速的对话，就更加困难。&lt;/p&gt;

&lt;p&gt;看普通的语法书，学生被各种术语淹没：及物动词，不及物动词，表语，宾语补足语…… 想学会这些术语，却发现头脑在不断地碰壁。&lt;/p&gt;

&lt;p&gt;这就好像几百年前，人们认为地是一个平面，而天是一个穹顶，于是他们无法解释自己观察到的很多现象。过了好久才有人意识到问题的根源：地球是圆的。&lt;/p&gt;

&lt;p&gt;从现代程序语言理论的角度看来，英语语法里的很多术语和概念，其实是子虚乌有的，或者非常不准确的，就像当年的“地平说”一样。这些概念来源于早期语言学家对于人类语言能力的不成熟理解。可惜，很多古老的概念被英语老师们一代传一代，成为了必修的教条。&lt;/p&gt;

&lt;p&gt;这些术语都是祖辈传下来的东西，普通英语老师也不知道它们是怎么产生的。如果离开了这些术语，他们就不知道如何讲述语法，于是只好照原样传下去。所以他们也就没办法接触到本质，不可能把事情变得简单。&lt;/p&gt;

&lt;p&gt;科学的发展史告诉我们，正确的理论往往是最简单的，有毛病的理论才会复杂不堪。从程序语言和逻辑学的观点看来，传统语言学留下的这些概念，很多都是有问题的。这就是为什么学语法那么复杂，那么头痛，那么枯燥。&lt;/p&gt;

&lt;h3 id=&quot;本书的方法&quot;&gt;本书的方法&lt;/h3&gt;

&lt;p&gt;跟几乎所有的语法书不同，这本书不只是传授给你现成的知识，它引导你从人本源的交流需求出发，从无到有把语法“重新发明”出来。如果只是把知识传授给你，你就成为知识的奴隶。但如果你自己发明了知识，你就成为了知识的主宰。所以“重新发明”会贯穿这本书的主线。&lt;/p&gt;

&lt;p&gt;要想重新发明语法，我们当然不能继续沿用现有的语法术语，否则我们就只有步前人的后尘。但如果碰巧遇到可以借用的，真正有用的术语，我们还是继续使用它们。&lt;/p&gt;

&lt;p&gt;因为这个原因，请不要对本书的“术语准确性”吹毛求疵。因为就像物理学家费曼的父亲告诉他的，最重要的不是一个东西“叫什么”，而是它“是什么”。&lt;/p&gt;

&lt;p&gt;这本书就是要告诉你语法是什么。你会成为语法的主人。&lt;/p&gt;

&lt;p&gt;另外，因为这本书不会试图做一本包罗万象的字典，所以你不能指望在里面找到所有你需要的内容。这本书会包含“精华”和“通用”的思想，还有一些常见的例子，但某些具体的情况，比如某个特定动词的用法，你可能还需要看看字典。&lt;/p&gt;

&lt;p&gt;本书的作用是，它让你翻开字典就能找到你需要的东西，并且理解如何使用它。一般的语法书自己就是字典，可惜很少有人能够理解和运用。&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-11-23-grammar</guid>
<pubDate>Fri, 23 Nov 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>更新一下</title>
<link>https://henix.github.io/feeds/yinwang/2018-10-14-update.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/10/14/update&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;更新一下&lt;/h2&gt;
            &lt;p&gt;我好像正好半年没有写东西了。哦不，我其实写了一些。仔细看我的书的人可能发现，那第一章其实悄悄更新了很多次。但我意识到了问题，我似乎没有动力完成这本书。嗯，我似乎是一个以半途而废著称的人。我从来不觉得必须从头到尾做完什么，除非我一直认为那是正确的方向。&lt;/p&gt;

&lt;p&gt;首先的问题是，写作这本书起初并没有良好的动机。我的意思是，当初想写这本书是出于对现状的“不满”，或者说是：恨。相对于爱，恨不是一个好的动机。&lt;/p&gt;

&lt;p&gt;我的老师 Dan Friedman 写了那么多本“小人书”，每一本都精辟而深刻，专注于一个他当时热爱的主题：函数式编程，逻辑式编程，自动定理证明……&lt;/p&gt;

&lt;p&gt;跟他相比，我自愧不如，因为我的动机不是出于爱。心中的恨，让我很像 Anakin Skywalker。不管恨是如何产生的，如果任其发展，它将把我变成 Darth Vader。我不想成为 Darth Vader。&lt;/p&gt;

&lt;p&gt;动机错了，也就导致了写作这本书的各种困难：设定的目标太高太远，太过注重“精华”，太早的解释过于深刻的原理，语言也啰嗦不流畅，充满了带刺或者负面的字眼…… 我开始担心看了我的书的人会变成什么样子。&lt;/p&gt;

&lt;p&gt;我意识到理解一件事和教会别人这件事，是完全不同的难度。如果我不理解人的心理，我就不会成为一个好的老师。如果我的心灵不够清澈，我就写不出纯美的作品。&lt;/p&gt;

&lt;p&gt;更要命的是，我的生活里有各种似乎更加有趣而有益的事情。所以每次想要写书，马上就会有有趣的事情来打断我……&lt;/p&gt;

&lt;p&gt;因此，写书这个事就被我一拖再拖。我想先研究一下人的心理，我想成为更好的人。只有当我成为一个很好的人，看我的书的人才会成为更好的人。&lt;/p&gt;

&lt;p&gt;但我还不够好。&lt;/p&gt;

&lt;p&gt;*  *  *&lt;/p&gt;

&lt;p&gt;过去的几年我都太关心“教”别人什么东西，以老师自居。可是我最近发现，我最爱的事情其实是从别人那里“学”东西。我喜欢跟人聊天讨论，大大的多过自己看书。经常能体会到“听君一席话，胜读十年书”的道理。&lt;/p&gt;

&lt;p&gt;总之，这半年我就是在学各种新东西。从专家那里学，也从很普通的人那里学。从小说里，电影里，音乐里学。学技术，也学人文。学习和领悟让我快乐。比起把自己封闭在自己的领域和圈子里，写一本旨在“改变现状”的书，学习让我更加快乐。我有了新的朋友和同事，我这才感觉我不再是孤军奋战，感觉新的生活开始了。&lt;/p&gt;

&lt;p&gt;如果只是想教会别人东西，我仍然是原来的我。而从别人那里学东西，我就成为“升级版”的我。学习让我有了朋友，朋友让我心里充满了爱，只有爱才是我前进的动力。&lt;/p&gt;

&lt;p&gt;*  *  *&lt;/p&gt;

&lt;p&gt;过去的王垠，心中充满了批判，然而世界上有远比批判有效而有益的事情。批判难以达到改进世界的效果，我的价值不可能通过批判而得到实现，而且它会让我失去潜在的朋友。价值的实现只能通过把我的技能，通过友好而快乐的途径作用到现实世界，让世界变得更好。不好的方面应该被忘记，而不是花大力气去批判它们。&lt;/p&gt;

&lt;p&gt;过去的王垠，以“天才”自居，天天谈论技术，各种评判；而现在的王垠，更加重视友谊和人性，比较少评判事物。比起冰冷的技术，真心的朋友更加能让我快乐。我希望有更多的朋友，更少的敌人。&lt;/p&gt;

&lt;p&gt;有个朋友引用一句林徽因的诗来赞美我：“你是爱，是暖，是希望，你是人间的四月天。” 目前感觉言过其实，不过我会努力达到这个境界，嗯。&lt;/p&gt;

&lt;p&gt;除了技术，世界上还有那么多有趣而重要的东西：艺术，文学，音乐，美食…… 它们也越来越多的走进我的生活，让我成为一个更加丰富的人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/les-miserables.jpg&quot; width=&quot;600&quot;&gt;&lt;/p&gt;

&lt;p&gt;我要感谢我的朋友们。真的朋友就像一面镜子，从你们我认识到了自己的问题，拓展了自己的视野。我会不断改进自己。&lt;/p&gt;

&lt;p&gt;我不想再做一个不接地气的神，我的心里对自己的能力没有 pride。我不再是“垠神”，也不要叫我“大神”了。与其让人们崇拜我，畏惧我，恭维我，我更愿意让他们发自内心地喜欢我。我欢迎各种形式的互相学习和交流合作。&lt;/p&gt;

&lt;p&gt;虽然不再继续写那本书，我肯定会写技术方面的博文，而且更新会比书频繁很多。写书让我犯困，几个月写不出来一章，还不如写点短的文章分享一下。所以不用为书遗憾，因为专注于一个主题的短文是更加有效而有价值的东西。&lt;/p&gt;

&lt;p&gt;上海是一个神奇的城市。这里有很多我喜欢的故事，是一个人杰地灵的地方。自从民国年代，许许多多的传奇故事发生在上海。我希望我在上海也有美好的故事。&lt;/p&gt;

&lt;p&gt;最后再次感谢大家的支持。&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-10-14-update</guid>
<pubDate>Sun, 14 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>改变</title>
<link>https://henix.github.io/feeds/yinwang/2018-05-28-change.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/05/28/change&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;改变&lt;/h2&gt;
            &lt;p&gt;我最近对博客和微博作了一些调整，也有一段时间没有更新我的书。博客少了一些文章。我会继续写我的书，但我也有很多其它事情做，我需要限制使用电脑的时间。微博用户群的质量值得怀疑，所以微博不会再有“个人稀里糊涂式”的更新，而只用于发布“冠冕堂皇式”的新闻，新闻联播那种。&lt;/p&gt;

&lt;p&gt;由于在美国的工作给了我一些遗留的伤口，这一段时间最重要的用途，应该是用来修复和放松我的身心，而不是用来实现什么伟大目标或者拯救世界。我在中国的着陆并不是平稳的——实际上我着陆在沼泽里。经过了一年，我仍然在试图建立对国内环境和人的信任。我感觉自己像一个穿着宇宙服的外星人，有时候打开面罩透口气。还好，我终于遇到了一些可爱的人。&lt;/p&gt;

&lt;p&gt;名义上是天才，我的生活也跟真正的天才（比如梵高）一样，可以说是破碎的。不管怎样，这与我本来的价值是极不相称的。为了所谓的“真知”，我错过了许多普通人都有的幸福。我需要重新开始体验生活的美好，我不想和历史上的悲剧天才们一样。如果说我有一件有价值的东西，那就是我得到了心的自由。&lt;/p&gt;

&lt;p&gt;在过去的几年，我花费了太多精力来“关心人类”，这使我疲惫。社会有许多的问题，我所在的 IT 领域惨不忍睹，然而批判人性的丑恶不应该是我的职责。生活中总是有丑陋，猥琐，虚伪的人，然而他们应该被忽略，我应该关注那些美好的。把注意力放在批判上，让我白白浪费人生中最美好的时光。&lt;/p&gt;

&lt;p&gt;我不是超人。我没有精力来关心中东的战火，非洲的饥荒，欧洲和美国的恐袭…… 同样的，我没有精力来为 IT 业界的很多丑恶现象忧心。应该有人去帮助他们，但我大概不是那个人。我曾以为那是我应该做的事，我告诉 Dan Friedman 我在做一件拯救 IT 业的事情。他回复说：“我刚写了一本新书，绝妙无比！你把地址给我，我给你寄过去！We are family！” 我喜欢这样鸡同鸭讲的对话。&lt;/p&gt;

&lt;p&gt;当今社会并不是以前那样脆弱。很多事情我指出了也不会起作用，不说它也糟不到哪里去。大街上的小混混知道谁是王垠吗？不知道。同理，技术界的低等生物也不会在乎王垠说什么，虽然他们吸收的一些养料是王垠不知道什么时候排出去的…… 每个人有自己的圈子，我没必要也不可能去跟他们较量。&lt;/p&gt;

&lt;p&gt;我看到的只是一个领域的人，甚至不是他们的全部。稍微往外面一跳，就发现自己以为很重要的事情，在外人看来其实不知所谓，无关紧要。什么 AI，区块链，黑科技…… 出了它们的圈子，真没多少人在乎。吹嘘它们以及批判它们的人，都像傻子一样。&lt;/p&gt;

&lt;p&gt;很多人，不管他们是什么冠冕堂皇的头衔，应该像街头小混混一样被抛在脑后，被忽略，而不是被仔仔细细记录下来，进行深入的批判。这不是一个顶级人才应该做的事。所以停止批判他们，不是妥协，而是彻底的无视，一种井水不犯河水的“和睦相处”关系。虽然被它们咬过，但痛过之后，我不再关心海底有什么丑陋的虫子，我有自己的风景……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/orca1.jpg&quot; width=&quot;450&quot;&gt;&lt;/p&gt;

&lt;p&gt;“拯救人类”不是我的任务。上天赋予我的才华，应该被用到更有意义的地方。我的目标不是跟完全不在一个层次的人较真，而是发现跟我在一个层次的人。当然这里所谓的“层次”，不是通常意义上的社会等级，而是本质上的“人的质量”。就像 Emily Post 所谓的“Best Society”，它无关出身，财富，社会头衔，技术能力……&lt;/p&gt;

&lt;p&gt;世界是多元化的，每个人都有自己的角落，我会找到本来属于我的角落。从今天开始，不再关心人类，做一个幸福的人。&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-05-28-change</guid>
<pubDate>Mon, 28 May 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>解谜计算机科学（1）</title>
<link>https://henix.github.io/feeds/yinwang/2018-04-13-csbook-chapter1.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/04/13/csbook-chapter1&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;解谜计算机科学（1）&lt;/h2&gt;
            &lt;h1 id=&quot;第一章---初识计算&quot;&gt;第一章 - 初识计算&lt;/h1&gt;

&lt;p&gt;（本书版权归王垠所有，禁止转载。请认准 yinwang.org 为唯一的阅读地址，以获得最近更新。）&lt;/p&gt;

&lt;p&gt;要掌握一个学科的精髓，不能从细枝末节开始。人脑的能力很大程度上受限于信念。一个人不相信自己的时候，他就做不到本来可能的事。信心是很重要的，信心却容易被挫败。如果只见树木不见森林，人会失去信心，以为要到猴年马月才能掌握一个学科。&lt;/p&gt;

&lt;p&gt;所以这本书不从“树木”开始，而是引导读者一起来探索这背后的“森林”。本书把计算机科学最根本的概念用浅显的例子解释，让读者领会到它们的本质。把这些概念稍作发展，你就得到逐渐完整的把握。你一开头就掌握着整个学科，而且一直掌握着它，只不过增添更多细节而已。这就像画画，先勾勒出轮廓，一遍遍的增加细节，日臻完善，却不失去对大局的把握。&lt;/p&gt;

&lt;p&gt;一般计算机专业的学生学了很多课程，可是直到毕业都没能回答一个基础问题：什么是计算？这一章会引导你去发现这个问题的答案。不要小看这基础的问题，它经常是解决现实问题的重要线索。世界上有太多不理解它的人，他们走了很多的弯路，掉进很多的坑，制造出过度复杂或者有漏洞的理论和技术。&lt;/p&gt;

&lt;p&gt;接下来，我们就来理解几个关键的概念，由此接触到计算的本质。&lt;/p&gt;

&lt;h3 id=&quot;自觉付费&quot;&gt;自觉付费&lt;/h3&gt;

&lt;p&gt;跟本书的前言不同，这一章的内容不是免费的。你如果想继续读下去，请自觉进行付费。你的付款将会支持这本书的继续写作和更新。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/csbook1-wechat-pay.jpg&quot; width=&quot;200&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/csbook1-alipay.jpg&quot; width=&quot;200&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;手指算术&quot;&gt;手指算术&lt;/h3&gt;

&lt;p&gt;每个人都做过计算，只是大部分人都没有理解自己在做什么。回想一下幼儿园（大概四岁）的时候，妈妈问你：“帮我算一下，4+3 等于几？” 你掰了一会手指，回答：7。当你掰手指的时候，你自己就是一台简单的计算机。&lt;/p&gt;

&lt;p&gt;不要小看了这手指算术，它蕴含着深刻的原理。计算机科学植根于这类非常简单的过程，而不是复杂的高等数学。&lt;/p&gt;

&lt;p&gt;现在我们来回忆一下这个过程。这里应该有一段动画，但现阶段还没有。请你对每一步发挥一下想象力，增加点“画面感”。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当妈妈问你“4+3 等于几”的时候，她是一个程序员，你是一台计算机。计算机得到程序员的输入：4，+，3。&lt;/li&gt;
  &lt;li&gt;听到妈妈的问题之后，你拿出两只手，左手伸出四个指头，右手伸出三个指头。&lt;/li&gt;
  &lt;li&gt;接着你开始自己的计算过程。一根根地数那些竖起来的手指，每数一根你就把它弯下去，表示它已经被数过了。你念道：“1，2，3，4，5，6，7。”&lt;/li&gt;
  &lt;li&gt;现在已经没有手指伸着，所以你把最后数到的那个数作为答案：7！整个计算过程就结束了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;符号和模型&quot;&gt;符号和模型&lt;/h3&gt;

&lt;p&gt;（这个概念太过深入，好像不适合出现在第一章，考虑去掉）&lt;/p&gt;

&lt;p&gt;这里的幼儿园手指算术包含着深刻的哲学问题，现在我们来初步体会一下这个问题。&lt;/p&gt;

&lt;p&gt;当妈妈说“帮我算 4+3”的时候，4，+，3，三个字符传到你耳朵里，它们都是符号（symbol）。符号是“表面”的东西：光是盯着“4”和“3”这两个阿拉伯数字的曲线，一个像旗子，一个像耳朵，你是不能做什么的。你需要先用脑子把它们转换成对应的“模型”（model）。这就是为什么你伸出两只手，一只手表示 4，另一只表示 3。&lt;/p&gt;

&lt;p&gt;这两只手的手势是“可操作”的。比如，你把左手再多弯曲一个手指，它就变成“3”。你再伸开一根手指，它就变成“5”。所以手指是一个相当好的机械模型，它是可以动，可操作的。把符号“4”和“3”转换成手指模型之后，你就可以开始计算了。&lt;/p&gt;

&lt;p&gt;你怎么知道“4”和“3”对应什么样的手指模型呢？因为妈妈以前教过你。十根手指，对应着 1 到 10 十个数。这就是为什么人都用十进制数做算术。&lt;/p&gt;

&lt;p&gt;我们现在没必要深究这个问题。我只是提示你，分清“符号”和“模型”是重要的。&lt;/p&gt;

&lt;h3 id=&quot;计算图&quot;&gt;计算图&lt;/h3&gt;

&lt;p&gt;在计算机领域，我们经常用一些抽象的图示来表达计算的过程，这样就能直观地看到信息的流动和转换。这种图示看起来是一些形状用箭头连接起来。我在这里把它叫做“计算图”。&lt;/p&gt;

&lt;p&gt;对于以上的手指算术 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt;，我们可以用下图来表示它：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/adder.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;图中的箭头表示信息的流动方向。说到“流动”，你可以想象一下水的流动。首先我们看到数字 4 和 3 流进了一个圆圈，圆圈里有一个“+”号。这个圆圈就是你，一个会做手指加法的小孩。妈妈给你两个数 4 和 3，你现在把它们加起来，得到 7 作为结果。&lt;/p&gt;

&lt;p&gt;注意圆圈的输入和输出方向是由箭头决定的，我们可以根据需要调整那些箭头的位置，只要箭头的连接关系和方向不变就行。它们不一定都是从左到右，也可能从右到左或者从上到下，但“出入关系”都一样：4 和 3 进去，结果 7 出来。比如它还可以是这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/adder-topdown.png&quot; width=&quot;180&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们用带加号的圆圈表示一个“加法器”。顾名思义，加法器可以帮我们完成加法。在上个例子里，你就是一个加法器。我们也可以用其他装置作为加法器，比如一堆石头，一个算盘，某种电子线路…… 只要它能做加法就行。&lt;/p&gt;

&lt;p&gt;具体要怎么做加法，就像你具体如何掰手指，很多时候我们是不关心的，我们只需要知道这个东西能做加法就行。圆圈把具体的加法操作给“抽象化”了，这个蓝色的圆圈可以代表很多种东西。抽象（abstraction）是计算机科学至关重要的思维方法，它帮助我们进行高层面的思考，而不为细节所累。&lt;/p&gt;

&lt;h3 id=&quot;表达式&quot;&gt;表达式&lt;/h3&gt;

&lt;p&gt;计算机科学当然不止 4 + 3 这么简单，但它的基本元素确实是如此简单。我们可以创造出很复杂的系统，然而归根结底，它们只是在按某种顺序计算像 4 + 3 这样的东西。&lt;/p&gt;

&lt;p&gt;4 + 3 是一个很简单的表达式（expression）。你也许没听说过“表达式”这个词，但我们先不去定义它。我们先来看一个稍微复杂一些的表达式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个表达式比 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt; 多了一个运算，我们把它叫做“复合表达式”。这个表达式也可以用计算图来表示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/add-mult.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;你知道它为什么是这个样子吗？它表示的意思是，先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt;，然后把结果（7）传送到一个“乘法器”，跟 2 相乘，得到最后的结果。那正好就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * (4 + 3)&lt;/code&gt; 这个表达式的含义，它的结果应该是 14。&lt;/p&gt;

&lt;p&gt;为什么要先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt; 呢？因为当我们看到乘法器 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * ...&lt;/code&gt; 的时候，其中一个输入（2）是已知的，而另外一个输入必须通过加法器的输出得到。加法器的结果是由 4 和 3 相加得到的，所以我们必须先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt;，然后才能与 2 相乘。&lt;/p&gt;

&lt;p&gt;小学的时候，你也许学过：“括号内的内容要先计算”。其实括号只是“符号层”的东西，它并不存在于计算图里面。我这里讲的“计算图”，其实才是本质的东西。数学的括号一类的东西，都只是表象，它们是符号或者叫“语法”。从某种意义上讲，计算图才是表达式的本质或者“模型”，而“2 * (4 + 3)”这串符号，只是对计算图的一种表示或者“编码”（coding）。&lt;/p&gt;

&lt;p&gt;这里我们再次体会到了“符号”和“模型”的差别。符号是对模型的“表示”或者“编码”。我们必须从符号得到模型，才能进行操作。这种从符号到模型的转换过程，在计算机科学里叫做“语法分析”（parsing）。我们会在后面的章节理解这个过程。&lt;/p&gt;

&lt;p&gt;我们现在来给表达式做一个初步的定义。这并不是完整的定义，但你应该试着理解这种定义的方式。稍后我们会逐渐补充这个定义，逐渐完善。&lt;/p&gt;

&lt;p&gt;定义（表达式）：&lt;strong&gt;表达式&lt;/strong&gt;可以是如下几种东西。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数字是一个表达式。比如 1，2，4，15，……&lt;/li&gt;
  &lt;li&gt;表达式 + 表达式。两个表达式相加，也是表达式。&lt;/li&gt;
  &lt;li&gt;表达式 - 表达式。两个表达式相减，也是表达式。&lt;/li&gt;
  &lt;li&gt;表达式 * 表达式。两个表达式相乘，也是表达式。&lt;/li&gt;
  &lt;li&gt;表达式 / 表达式。两个表达式相除，也是表达式。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意，由于我们之前讲过的符号和模型的差别，为了完全忠于我们的本质认识，这里的“表达式 + 表达式”虽然看起来是一串符号，它必须被想象成它所对应的模型。当你看到“表达式”的时候，你的脑子里应该浮现出它对应的计算图，而不是一串符号。这个计算图的画面大概是这个样子，其中左边的大方框里可以是任意两个表达式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/expression-graph.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;是不是感觉这个定义有点奇怪？因为在“表达式”的定义里，我们用到了“表达式”自己。这种定义叫做“递归定义”。所谓&lt;strong&gt;递归&lt;/strong&gt;（recursion），就是在一个东西的定义里引用这个东西自己。看上去很奇怪，好像绕回去了一样。递归是一个重要的概念，我们会在将来深入理解它。&lt;/p&gt;

&lt;p&gt;现在我们可以来验证一下，根据我们的定义，&lt;code class=&quot;highlighter-rouge&quot;&gt;2 * (4 + 3)&lt;/code&gt; 确实是一个表达式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先根据第一种形式，我们知道 4 是表达式，因为它是一个数字。3 也是表达式，因为它是一个数字。&lt;/li&gt;
  &lt;li&gt;所以  &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt; 是表达式，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 的左右都是表达式，它满足表达式定义的第二种形式。&lt;/li&gt;
  &lt;li&gt;所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * (4 + 3)&lt;/code&gt; 是表达式，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 的左右都是表达式，它满足表达式定义的第四种形式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;并行计算&quot;&gt;并行计算&lt;/h3&gt;

&lt;p&gt;考虑这样一个表达式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它对应一个什么样的计算图呢？大概是这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/parallel.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;如果妈妈只有你一个小孩，你应该如何用手指算出它的结果呢？你大概有两种办法。&lt;/p&gt;

&lt;p&gt;第一种办法：先算出 4+3，结果是 7。然后算出 1+2，结果是 3。然后算 7*3，结果是 21。&lt;/p&gt;

&lt;p&gt;第二种办法：先算出 1+2，结果是 3。然后算出 4+3，结果是 7。然后算 7*3，结果是 21。&lt;/p&gt;

&lt;p&gt;注意到没有，你要么先算 4+3，要么先算 1+2，你不能同时算 4+3 和 1+2。为什么呢？因为你只有两只手，所以算 4+3 的时候你就没法算 1+2，反之也是这样。总之，你妈妈只有你一个加法器，所以一次只能做一个加法。&lt;/p&gt;

&lt;p&gt;现在假设你还有一个妹妹，她跟你差不多年纪，她也会手指算术。妈妈现在就多了一些办法来计算这个表达式。她可以这样做：让你算 4+3，不等你算完，马上让妹妹算 1+2。等到你们的结果（7 和 3）都出来之后，让你或者妹妹算 7*3。&lt;/p&gt;

&lt;p&gt;发现没有，在某一段时间之内，你和妹妹&lt;em&gt;同时&lt;/em&gt;在做加法计算。这种时间上重叠的计算，叫做&lt;strong&gt;并行计算&lt;/strong&gt;（parallel computing）。&lt;/p&gt;

&lt;p&gt;你和妹妹同时计算，得到结果的速度可能会比你一个人算更快。如果你妈妈还有其它几个孩子，计算复杂的式子就可能快很多，这就是并行计算潜在的好处。所谓“潜在”的意思是，这种好处不一定会实现。比如，如果你的妹妹做手指算数的速度比你慢很多，你做完了 4+3，只好等着她慢慢的算 1+2。这也许比你自己依次算 4+3 和 1+2 还要慢。&lt;/p&gt;

&lt;p&gt;即使妹妹做算术跟你一样快，这里还有个问题。你和妹妹算出结果 7 和 3 之后，得把结果传递给下一个计算 7*3 的那个人（也许是你，也许是你妹妹）。这种“通信”会带来时间的延迟，叫做“通信开销”。如果你们其中一个说话慢，这比起一个人来做计算可能还要慢。&lt;/p&gt;

&lt;p&gt;如何根据计算单元能力的不同和通信开销的差异，来最大化计算的效率，降低需要的时间，就成为了并行计算领域研究的内容。并行计算虽然看起来是一个“博大精深”的领域，可是你如果理解了我这里说的那点东西，就很容易理解其余的内容。&lt;/p&gt;

&lt;h3 id=&quot;变量和赋值&quot;&gt;变量和赋值&lt;/h3&gt;

&lt;p&gt;如果你有一个复杂的表达式，比如&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于它有比较多的嵌套，人的眼睛是难以看清楚的，它要表达的意义也会难懂。这时候，你希望可以用一些“名字”来代表中间结果，这样表达式就更容易理解。&lt;/p&gt;

&lt;p&gt;打个比方，这就像你有一个亲戚，他是你妈妈的表姐的女儿的丈夫。你不想每次都称他“我妈妈的表姐的女儿的丈夫”，所以你就用他的名字“叮当”来指代他，一下子就简单了。&lt;/p&gt;

&lt;p&gt;我们来看一个例子。之前的复合表达式&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实可以被转换为等价的，含有变量的代码：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 变量 a 得到 4+3 的值
&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 代码块的值
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 是一个名字。&lt;code class=&quot;highlighter-rouge&quot;&gt;a = 4 + 3&lt;/code&gt; 是一个“赋值语句”，它的意思是：用 a 来代表 4 + 3 的值。这种名字，计算机术语叫做&lt;strong&gt;变量&lt;/strong&gt;（variable）。&lt;/p&gt;

&lt;p&gt;这段代码的意思可以简单地描述为：计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt;，把它的结果表示为 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;，然后计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt; 作为最后的结果。&lt;/p&gt;

&lt;p&gt;有些东西可能扰乱了你的视线。两根斜杠 &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; 后面一直到行末的文字叫做“注释”，是给人看的说明文字。它们对代码的逻辑不产生作用，执行的时候可以忽略。许多语言都有类似这种注释，它们可以帮助阅读的人，但是会被机器忽略。&lt;/p&gt;

&lt;p&gt;这段代码执行过程会是这样：先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt; 得到 7，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 记住这个中间结果 7。接着计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt; ，也就是计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * 7&lt;/code&gt;，所以最后结果是 14。很显然，这跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * (4 + 3)&lt;/code&gt; 的结果是一样的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 叫做一个变量，它是一个符号，可以用来代表任意的值。除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;，你还有许多的选择，比如 b, c, d, x, y, foo, bar, u21… 只要它不会被误解成其它东西就行。&lt;/p&gt;

&lt;p&gt;如果你觉得这里面的“神奇”成分太多，那我们现在来做更深一层的理解……&lt;/p&gt;

&lt;p&gt;再看一遍上面的代码。这整片代码叫做一个“代码块”（block），或者叫一个“序列”（sequence）。这个代码块包括两条语句，分别是 &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 4 + 3&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt;。代码块里的语句会从上到下依次执行。所以我们先执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 4 + 3&lt;/code&gt;，然后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最后一条语句 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt; 比较特别，它是这个代码块的“值”，也就是最后结果。之前的语句都是在为生成这个最后的值做准备。换句话说，这整个代码块的值就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt; 的值。不光这个例子是这样，这是一个通用的原理：代码块的最后一条语句，总是这个代码块的值。&lt;/p&gt;

&lt;p&gt;我们在代码块的前后加上花括号 &lt;code class=&quot;highlighter-rouge&quot;&gt;{...}&lt;/code&gt; 进行标注，这样里面的语句就不会跟外面的代码混在一起。这两个花括号叫做“边界符”。我们今后会经常遇到代码块，它存在于几乎所有的程序语言里，只是语法稍有不同。比如有些语言可能用括号 &lt;code class=&quot;highlighter-rouge&quot;&gt;(...)&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN...END&lt;/code&gt; 来表示边界，而不是用花括号。&lt;/p&gt;

&lt;p&gt;这片代码已经有点像常用的编程语言了，但我们暂时不把它具体化到某一种语言。我不想固化你的思维方式。在稍后的章节，我们会把这种抽象的表达法对应到几种常见的语言，这样一来你就能理解几乎所有的程序语言。&lt;/p&gt;

&lt;p&gt;另外还有一点需要注意，同一个变量可以被多次赋值。它的值会随着赋值语句而改变。举个例子：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码执行之后，&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; 的值是 7，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; 的值是 10。你知道为什么吗？因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 4 + 3&lt;/code&gt; 之后，a 的值是 7。&lt;code class=&quot;highlighter-rouge&quot;&gt;b = a&lt;/code&gt; 使得 &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; 得到值 7。然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 2 * 5&lt;/code&gt; 把 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 的值改变了，它现在是 10。所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;c = a&lt;/code&gt; 使得 &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; 得到 10。&lt;/p&gt;

&lt;p&gt;对同一个变量多次赋值虽然是可以的，但通常来说这不是一种好的写法，它可能引起程序的混淆，应该尽量避免。只有当变量表示的“意义”相同的时候，你才应该对它重复赋值。&lt;/p&gt;

&lt;h3 id=&quot;编译&quot;&gt;编译&lt;/h3&gt;

&lt;p&gt;一旦引入了变量，我们就可以不用复合表达式。因为你可以把任意复杂的复合表达式拆开成“单操作算术表达式”（像 4 + 3 这样的），使用一些变量记住中间结果，一步一步算下去，得到最后的结果。&lt;/p&gt;

&lt;p&gt;举一个复杂点的例子，也就是这一节最开头的那个表达式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它可以被转化为一串语句：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后的表达式 &lt;code class=&quot;highlighter-rouge&quot;&gt;e * d&lt;/code&gt;，算出来就是原来的表达式的值。你观察一下，是不是每个操作都非常简单，不包含嵌套的复合表达式？你可以自己验算一下，它确实算出跟原表达式一样的结果。&lt;/p&gt;

&lt;p&gt;在这里，我们自己动手做了“编译器”（compiler）的工作。通常来说，编译器是一种程序，它的任务是把一片代码“翻译”成另外一种等价形式。这里我们没有写编译器，可是我们自己做了编译器的工作。我们手动地把一个嵌套的复合表达式，编译成了一系列的简单算术语句。&lt;/p&gt;

&lt;p&gt;这些语句的结果与原来的表达式完全一致。这种保留原来语义的翻译过程，叫做&lt;strong&gt;编译&lt;/strong&gt;（compile）。&lt;/p&gt;

&lt;p&gt;我们为什么需要编译呢？原因有好几种。我不想在这里做完整的解释，但从这个例子我们可以看到，编译之后我们就不再需要复杂的嵌套表达式了。我们只需要设计很简单的，只会做单操作算术的机器，就可以算出复杂的嵌套的表达式。实际上最后这段代码已经非常接近现代处理器（CPU）的汇编代码（assembly）。我们只需要多加一些转换，它就可以变成机器指令。&lt;/p&gt;

&lt;p&gt;我们暂时不写编译器，因为你还缺少一些必要的知识。这当然也不是编译技术的所有内容，它还包含另外一些东西。但从这一开头，你就已经初步理解了编译器是什么，你只需要在将来加深这种理解。&lt;/p&gt;

&lt;h3 id=&quot;函数&quot;&gt;函数&lt;/h3&gt;

&lt;p&gt;到目前为止，我们做的计算都是在已知的数字之上，而在现实的计算中我们往往有一些未知数。比如我们想要表达一个“风扇控制器”，有了它之后，风扇的转速总是当前气温的两倍。这个“当前气温”就是一个未知数。&lt;/p&gt;

&lt;p&gt;我们的“风扇控制器”必须要有一个“输入”（input），用于得到当前的温度 t，它是一个温度传感器的读数。它还要有一个输出，就是温度的两倍。&lt;/p&gt;

&lt;p&gt;那么我们可以用这样的方式来表达我们的风扇控制器：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不要把这想成任何一种程序语言，这只是我们自己的表达法。箭头 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt; 的左边表示输入，右边表示输出，够简单吧。&lt;/p&gt;

&lt;p&gt;你可以把 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 想象成从温度传感器出来的一根电线，它连接到风扇控制器上，风扇控制器会把它的输入（t）乘以 2。这个画面像这个样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/function1.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们谈论风扇控制器的时候，其实不关心它的输入是哪里来的，输出到哪里去。如果我们把温度传感器和风扇从画面里拿掉，就变成这个样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/function2.jpg&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;这幅图才是你需要认真理解的函数的计算图。你发现了吗，这幅图画正好对应了之前的风扇控制器的符号表示：&lt;code class=&quot;highlighter-rouge&quot;&gt;t -&amp;gt; t*2&lt;/code&gt;。看到符号就想象出画面，你就得到了符号背后的模型。&lt;/p&gt;

&lt;p&gt;像 &lt;code class=&quot;highlighter-rouge&quot;&gt;t -&amp;gt; t*2&lt;/code&gt; 这样具有未知数作为输入的构造，我们把它叫做函数（function）。其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 这个符号，叫做这个函数的参数。&lt;/p&gt;

&lt;h3 id=&quot;参数变量和电线&quot;&gt;参数，变量和电线&lt;/h3&gt;

&lt;p&gt;你可能发现了，函数的参数和我们之前了解的“变量”是很类似的，它们都是一个符号。之前我们用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;a, b, c, d, e&lt;/code&gt; 现在我们有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;，这些名字我们都是随便起的，只要它们不要重复就好。如果名字重复的话，可能会带来混淆和干扰。&lt;/p&gt;

&lt;p&gt;其实参数和变量这两种概念不只是相似，它们的本质就是一样的。如果你深刻理解它们的相同本质，你的脑子就可以少记忆很多东西，而且它可能帮助你对代码做出一些有趣而有益的转化。在上一节你已经看到，我用“电线”作为比方来帮助你理解参数。你也可以用同样的方法来理解变量。&lt;/p&gt;

&lt;p&gt;比如我们之前的变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它可以被想象成什么样的画面呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/wire.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;我故意把箭头方向画成从右往左，这样它就更像上面的代码。从这个图画里，你也许可以看到变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 和风扇控制器图里的参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;，其实没有任何本质差别。它们都表示一根电线，那根电线进入乘法器，将会被乘以 2，然后输出。如果你把这些都看成是电路，那么变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 和参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 都代表一根电线而已。&lt;/p&gt;

&lt;p&gt;然后你还发现一个现象，那就是你可以把 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 这个名字换成任何其它名字（比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;），而这幅图不会产生实质的改变。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/rename.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;这说明什么问题呢？这说明以下的代码（把 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 换成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;b）&lt;/code&gt;跟之前的是等价的：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据几乎一样的电线命名变化，你也可以对之前的函数得到一样的结论：&lt;code class=&quot;highlighter-rouge&quot;&gt;t -&amp;gt; t*2&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; u*2&lt;/code&gt;，和 &lt;code class=&quot;highlighter-rouge&quot;&gt;x -&amp;gt; x*2&lt;/code&gt; 都是一回事。&lt;/p&gt;

&lt;p&gt;名字是很重要的东西，但它们具体叫什么，对于机器并没有实质的意义，只要它们不要相互混淆就可以。但名字对于人是很重要的，因为人脑没有机器那么精确。不好的变量和参数名会导致代码难以理解，引起程序员的混乱和错误。所以通常说来，你需要给变量和参数起好的名字。&lt;/p&gt;

&lt;p&gt;什么样的名字好呢？我会在后面集中讲解。&lt;/p&gt;

&lt;h3 id=&quot;有名字的函数&quot;&gt;有名字的函数&lt;/h3&gt;

&lt;p&gt;既然变量可以代表“值”，那么一个自然的想法，就是让变量代表函数。所以就像我们可以写&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们似乎也应该可以写&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对的，你可以这么做。&lt;code class=&quot;highlighter-rouge&quot;&gt;f = t-&amp;gt;t*2&lt;/code&gt; 还有一个更加传统的写法，就像数学里的函数写法：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;请仔细观察 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 的位置变化。我们在函数名字的右边写一对括号，在里面放上参数的名字。&lt;/p&gt;

&lt;p&gt;注意，你不可以只写&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你必须明确的指出函数的参数是什么，否则你就不会明白函数定义里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 是什么东西。明确指出 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 是一个“输入”，你才会知道它是函数的输入，是一个未知数，&lt;strong&gt;而不是在函数外面定义的其它变量&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这个看似简单的道理，很多数学家都不明白，所以他们经常这样写书：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有一个函数 y = x*2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是错误的，因为他没有明确指出“&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; 是函数 y 的参数”。如果这句话之前他们又定义过 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;，你就会疑惑这是不是之前那个 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;。很多人就是因为这些糊里糊涂的写法而看不懂数学书。这不怪他们，只怪数学家自己对于语言不严谨。&lt;/p&gt;

&lt;h3 id=&quot;函数调用&quot;&gt;函数调用&lt;/h3&gt;

&lt;p&gt;有了函数，我们可以给它起名字，可是我们怎么使用它的值呢？&lt;/p&gt;

&lt;p&gt;由于函数里面有未知数（参数），所以你必须告诉它这些未知数，它里面的代码才会执行，给你结果。比如之前的风扇控制器函数&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它需要一个温度作为输入，才会给你一个输出。于是你就这样给它一个输入：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你把输入写在函数名字后面的括号里。那么你就会得到输出：4。也就是说 &lt;code class=&quot;highlighter-rouge&quot;&gt;f(2)&lt;/code&gt; 的值是 4。&lt;/p&gt;

&lt;p&gt;如果你没有调用一个函数，函数体是不会被执行的。因为它不知道未知数是什么，所以什么事也做不了。那么我们定义函数的时候，比如&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当看到这个定义的时候，机器应该做什么呢？它只是记录下：有这么一个函数，它的参数是 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;，它需要计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;t*2&lt;/code&gt;，它的名字叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;。但是机器不会立即计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;t*2&lt;/code&gt;，因为它不知道 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 是多少。&lt;/p&gt;

&lt;h3 id=&quot;分支&quot;&gt;分支&lt;/h3&gt;

&lt;p&gt;直到现在，我们的代码都是从头到尾，闷头闷脑地执行，不问任何问题。我们缺少一种“问问题”的方法。比如，如果我想表达这样一个“食物选择器”：如果气温低于 22 度，就返回 “hotpot” 表示今天吃火锅，否则返回 “ice cream” 表示今天吃冰激凌。&lt;/p&gt;

&lt;p&gt;我们可以把它图示如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/branch.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;中间这种判断结构叫做“分支”（branching），它一般用菱形表示。为什么叫分支呢？你想象一下，代码就像一条小溪，平时它沿着一条路线流淌。当它遇到一个棱角分明的大石头，就分成两个支流，分开流淌。&lt;/p&gt;

&lt;p&gt;我们的判断条件 &lt;code class=&quot;highlighter-rouge&quot;&gt;t &amp;lt; 22&lt;/code&gt; 就像一块大石头，我们的“代码流”碰到它就会分开成两支，分别做不同的事情。跟溪流不同的是，这种分支不是随机的，而是根据条件来决定，而且分支之后只有一支继续执行，而另外一边不会被执行。&lt;/p&gt;

&lt;p&gt;我们现在看到的都是图形化表示的模型，为了书写方便，现在我们要从符号的层面来表示这个模型。我们需要一种符号表示法来表达分支，我们把它叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;（如果）。我们的饮料选择器代码可以这样写：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;&quot;hotpot&quot;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;&quot;ice cream&quot;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它是一个函数，输入是一个温度。&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 后面的括号里放我们的判断条件。后面接着条件成立时执行的代码块，然后是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;，然后是条件不成立时执行的代码。它说：如果温度低于 22 度，我们就吃火锅，否则就吃冰激凌。&lt;/p&gt;

&lt;p&gt;其中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 是一个特殊的符号，它表示“否则”。看起来不知道为什么 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 要在那里？对的，它只是一个装饰品。我们已经有足够的表达力来分辨两个分支，不过有了 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 似乎更加好看一些。很多语言里面都有 else 这个标记词在那里，所以我也把它放在那里。&lt;/p&gt;

&lt;p&gt;这只是一个最简单的例子，其实那两个代码块里面不止可以写一条语句。你可以有任意多的语句，就像这样：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;hotpot&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ice cream&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码和之前是等价的，你知道为什么吗？&lt;/p&gt;

&lt;h3 id=&quot;字符串&quot;&gt;字符串&lt;/h3&gt;

&lt;p&gt;上面一节出现了一种我们之前没见过的东西，我为了简洁而没有介绍它。这两个分支的结果，也就是加上引号的 “hotpot” 和 “ice cream”，它们并不是数字，也不是其它语言构造，而是一种跟数字处于几乎同等地位的“数据类型”，叫做&lt;strong&gt;字符串&lt;/strong&gt;（string）。字符串是我们在计算机里面表示人类语言的基本数据类型。&lt;/p&gt;

&lt;p&gt;关于字符串，在这里我不想讲述更加细节的内容，我把对它的各种操作留到以后再讲，因为虽然字符串对于应用程序很重要，它却并不是计算机科学最关键最本质的内容。&lt;/p&gt;

&lt;p&gt;很多计算机书籍一开头就讲很多对字符串的操作，导致初学者费很大功夫去做很多打印字符串的练习，结果几个星期之后还没学到“函数”之类最根本的概念。这是非常可惜的。&lt;/p&gt;

&lt;h3 id=&quot;布尔值&quot;&gt;布尔值&lt;/h3&gt;

&lt;p&gt;我们之前的 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 语句的条件 &lt;code class=&quot;highlighter-rouge&quot;&gt;t &amp;lt; 22&lt;/code&gt; 其实也是一个表达式，它叫做“布尔表达式”。你可以把小于号 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 看成是跟加法一类的“操作符”。它的输入是两个数值，输出是一个“布尔值”。什么是布尔值呢？布尔值只有两个：true 和 false，也就是“真”和“假”。&lt;/p&gt;

&lt;p&gt;举个例子，如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 的值是 15，那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;t &amp;lt; 22&lt;/code&gt; 是成立的，那么它的值就是 true。如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 的值是 23，那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;t &amp;lt; 22&lt;/code&gt; 就不成立，那么它的值就是 false。是不是很好理解呢？&lt;/p&gt;

&lt;p&gt;我们为什么需要“布尔值”这种东西呢？因为它的存在可以简化我们的思维。对于布尔值也有一些操作，这个我也不在这一章赘述，放到以后细讲。&lt;/p&gt;

&lt;h3 id=&quot;计算的要素&quot;&gt;计算的要素&lt;/h3&gt;

&lt;p&gt;好了，现在你已经掌握了计算机科学的几乎所有基本要素。每一个编程语言都包括这些构造：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基础的数值。比如整数，字符串，布尔值等。&lt;/li&gt;
  &lt;li&gt;表达式。包括基本的算术表达式，嵌套的表达式。&lt;/li&gt;
  &lt;li&gt;变量和赋值语句。&lt;/li&gt;
  &lt;li&gt;分支语句。&lt;/li&gt;
  &lt;li&gt;函数和函数调用。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;你也许可以感觉到，我是把这些构造按照“从小到大”的顺序排列的。这也许可以帮助你的理解。&lt;/p&gt;

&lt;p&gt;现在你可以回想一下你对它们的印象。每当学习一种新的语言或者系统，你只需要在里面找到对应的构造，而不需要从头学习。这就是掌握所有程序语言的秘诀。这就像学开车一样，一旦你掌握了油门，刹车，换挡器，方向盘，速度表的功能和用法，你就学会了开所有的汽车，不管它是什么型号的汽车。&lt;/p&gt;

&lt;p&gt;我们在这一章不仅理解了这些要素，而且为它们定义了一种我们自己的“语言”。显然这个语言只能在我们的头脑里运行，因为我们没有实现这个语言的系统。在后面的章节，我会逐渐的把我们这种语言映射到现有的多种语言里面，然后你就能掌握这些语言了。&lt;/p&gt;

&lt;p&gt;但是请不要以为掌握了语言就学会了编程或者学会了计算机科学。掌握语言就像学会了各种汽车部件的工作原理。几分钟之内，初学者就能让车子移动，转弯，停止。可是完了之后你还需要学习交通规则，你需要许许多多的实战练习和经验，掌握各种复杂情况下的策略，才能成为一个合格的驾驶员。如果你想成为赛车手，那就还需要很多倍的努力。&lt;/p&gt;

&lt;p&gt;但是请不要被我这些话吓到了，你没有那么多的竞争者。现在的情况是，世界上就没有很多合格的计算机科学驾驶员，更不要说把车开得流畅的赛车手。绝大部分的“程序员”连最基本的引擎，油门，刹车，方向盘的工作原理都不明白，思维方式就不对，所以根本没法独自上路，一上路就出车祸。很多人把过错归结在自己的车身上，以为换一辆车马上就能成为好的驾驶员。这是一种世界范围的计算机教育的失败。&lt;/p&gt;

&lt;p&gt;在后面的章节，我会引导你成为一个合格的驾驶员，随便拿一辆车就能开好。&lt;/p&gt;

&lt;h3 id=&quot;什么是计算&quot;&gt;什么是计算&lt;/h3&gt;

&lt;p&gt;现在你掌握了计算所需要的基本元素，可是什么是计算呢？我好像仍然没有告诉你。这是一个很哲学的问题，不同的人可能会告诉你不同的结果。我试图从最广义的角度来告诉你这个问题的答案。&lt;/p&gt;

&lt;p&gt;当你小时候用手指算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4+3&lt;/code&gt;，那是计算。如果后来你学会了打算盘，你用算盘算 4+3，那也是计算。后来你从我这里学到了表达式，变量，函数，调用，分支语句…… 在每一新的构造加入的过程中，你都在了解不同的计算。&lt;/p&gt;

&lt;p&gt;所以从最广义来讲，计算就是“机械化的信息处理”。所谓机械化，你可以用手指算，可以用算盘，可以用计算器，或者计算机。这些机器里面可以有代码，也可以没有代码，全是电子线路，甚至可以是生物活动或者化学反应。不同的机器也可以有不同的计算功能，不同的速度和性能……&lt;/p&gt;

&lt;p&gt;有这么多种计算的事实不免让人困惑，总害怕少了点什么，其实你可以安心。如果你掌握了上一节的“计算要素”，那么你就掌握了几乎所有类型的计算系统所需要的东西。你在后面所需要做的只是加深这种理解，并且把它“对应”到现实世界遇到的各种计算机器里面。&lt;/p&gt;

&lt;p&gt;为什么你可以相信计算机科学的精华就只有这些呢？因为计算就是处理信息，信息有它诞生的位置（输入设备，固定数值），它传输的方式（赋值，函数调用，返回值），它被查看的地方（分支）。你想不出对于信息还有什么其它的操作，所以你就很安心的相信了，这就是计算机科学这种“棋类游戏”的全部规则。&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-04-13-csbook-chapter1</guid>
<pubDate>Fri, 13 Apr 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>解谜计算机科学</title>
<link>https://henix.github.io/feeds/yinwang/2018-04-13-computer-science.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/04/13/computer-science&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;解谜计算机科学&lt;/h2&gt;
            &lt;p&gt;要掌握一个学科的精髓，不能从细枝末节开始。人脑的能力很大程度上受限于信念。一个人不相信自己的时候，他就做不到本来可能的事。信心是很重要的，信心却容易被挫败。如果只见树木不见森林，人会失去信心，以为要到猴年马月才能掌握一个学科。&lt;/p&gt;

&lt;p&gt;所以我们不从“树木”开始，而是引导读者一起来探索这背后的“森林”，把计算机科学最根本的概念用浅显的例子解释，让读者领会到它们的本质。把这些概念稍作发展，你就得到逐渐完整的把握。你一开头就掌握着整个学科，而且一直掌握着它，只不过增添更多细节而已。这就像画画，先勾勒出轮廓，一遍遍的增加细节，日臻完善，却不失去对大局的把握。&lt;/p&gt;

&lt;p&gt;一般计算机专业的学生学了很多课程，可是直到毕业都没能回答一个基础问题：什么是计算？这一章会引导你去发现这个问题的答案。不要小看这基础的问题，它经常是解决现实问题的重要线索。世界上有太多不理解它的人，他们走了很多的弯路，掉进很多的坑，制造出过度复杂或者有漏洞的理论和技术。&lt;/p&gt;

&lt;p&gt;接下来，我们就来理解几个关键的概念，由此接触到计算的本质。&lt;/p&gt;

&lt;h3 id=&quot;手指算术&quot;&gt;手指算术&lt;/h3&gt;

&lt;p&gt;每个人都做过计算，只是大部分人都没有理解自己在做什么。回想一下幼儿园（大概四岁）的时候，妈妈问你：“帮我算一下，4+3 等于几？” 你掰了一会手指，回答：7。当你掰手指的时候，你自己就是一台简单的计算机。&lt;/p&gt;

&lt;p&gt;不要小看了这手指算术，它蕴含着深刻的原理。计算机科学植根于这类非常简单的过程，而不是复杂的高等数学。&lt;/p&gt;

&lt;p&gt;现在我们来回忆一下这个过程。这里应该有一段动画，但现阶段还没有。请你对每一步发挥一下想象力，增加点“画面感”。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当妈妈问你“4+3 等于几”的时候，她是一个程序员，你是一台计算机。计算机得到程序员的输入：4，+，3。&lt;/li&gt;
  &lt;li&gt;听到妈妈的问题之后，你拿出两只手，左手伸出四个指头，右手伸出三个指头。&lt;/li&gt;
  &lt;li&gt;接着你开始自己的计算过程。一根根地数那些竖起来的手指，每数一根你就把它弯下去，表示它已经被数过了。你念道：“1，2，3，4，5，6，7。”&lt;/li&gt;
  &lt;li&gt;现在已经没有手指伸着，所以你把最后数到的那个数作为答案：7！整个计算过程就结束了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;符号和模型&quot;&gt;符号和模型&lt;/h3&gt;

&lt;p&gt;（这个概念太过深入，好像不适合出现在第一章，考虑去掉）&lt;/p&gt;

&lt;p&gt;这里的幼儿园手指算术包含着深刻的哲学问题，现在我们来初步体会一下这个问题。&lt;/p&gt;

&lt;p&gt;当妈妈说“帮我算 4+3”的时候，4，+，3，三个字符传到你耳朵里，它们都是符号（symbol）。符号是“表面”的东西：光是盯着“4”和“3”这两个阿拉伯数字的曲线，一个像旗子，一个像耳朵，你是不能做什么的。你需要先用脑子把它们转换成对应的“模型”（model）。这就是为什么你伸出两只手，一只手表示 4，另一只表示 3。&lt;/p&gt;

&lt;p&gt;这两只手的手势是“可操作”的。比如，你把左手再多弯曲一个手指，它就变成“3”。你再伸开一根手指，它就变成“5”。所以手指是一个相当好的机械模型，它是可以动，可操作的。把符号“4”和“3”转换成手指模型之后，你就可以开始计算了。&lt;/p&gt;

&lt;p&gt;你怎么知道“4”和“3”对应什么样的手指模型呢？因为妈妈以前教过你。十根手指，对应着 1 到 10 十个数。这就是为什么人都用十进制数做算术。&lt;/p&gt;

&lt;p&gt;我们现在没必要深究这个问题。我只是提示你，分清“符号”和“模型”是重要的。&lt;/p&gt;

&lt;h3 id=&quot;计算图&quot;&gt;计算图&lt;/h3&gt;

&lt;p&gt;在计算机领域，我们经常用一些抽象的图示来表达计算的过程，这样就能直观地看到信息的流动和转换。这种图示看起来是一些形状用箭头连接起来。我在这里把它叫做“计算图”。&lt;/p&gt;

&lt;p&gt;对于以上的手指算术 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt;，我们可以用下图来表示它：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/adder.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;图中的箭头表示信息的流动方向。说到“流动”，你可以想象一下水的流动。首先我们看到数字 4 和 3 流进了一个圆圈，圆圈里有一个“+”号。这个圆圈就是你，一个会做手指加法的小孩。妈妈给你两个数 4 和 3，你现在把它们加起来，得到 7 作为结果。&lt;/p&gt;

&lt;p&gt;注意圆圈的输入和输出方向是由箭头决定的，我们可以根据需要调整那些箭头的位置，只要箭头的连接关系和方向不变就行。它们不一定都是从左到右，也可能从右到左或者从上到下，但“出入关系”都一样：4 和 3 进去，结果 7 出来。比如它还可以是这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/adder-topdown.png&quot; width=&quot;180&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们用带加号的圆圈表示一个“加法器”。顾名思义，加法器可以帮我们完成加法。在上个例子里，你就是一个加法器。我们也可以用其他装置作为加法器，比如一堆石头，一个算盘，某种电子线路…… 只要它能做加法就行。&lt;/p&gt;

&lt;p&gt;具体要怎么做加法，就像你具体如何掰手指，很多时候我们是不关心的，我们只需要知道这个东西能做加法就行。圆圈把具体的加法操作给“抽象化”了，这个蓝色的圆圈可以代表很多种东西。抽象（abstraction）是计算机科学至关重要的思维方法，它帮助我们进行高层面的思考，而不为细节所累。&lt;/p&gt;

&lt;h3 id=&quot;表达式&quot;&gt;表达式&lt;/h3&gt;

&lt;p&gt;计算机科学当然不止 4 + 3 这么简单，但它的基本元素确实是如此简单。我们可以创造出很复杂的系统，然而归根结底，它们只是在按某种顺序计算像 4 + 3 这样的东西。&lt;/p&gt;

&lt;p&gt;4 + 3 是一个很简单的表达式（expression）。你也许没听说过“表达式”这个词，但我们先不去定义它。我们先来看一个稍微复杂一些的表达式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个表达式比 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt; 多了一个运算，我们把它叫做“复合表达式”。这个表达式也可以用计算图来表示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/add-mult.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;你知道它为什么是这个样子吗？它表示的意思是，先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt;，然后把结果（7）传送到一个“乘法器”，跟 2 相乘，得到最后的结果。那正好就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * (4 + 3)&lt;/code&gt; 这个表达式的含义，它的结果应该是 14。&lt;/p&gt;

&lt;p&gt;为什么要先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt; 呢？因为当我们看到乘法器 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * ...&lt;/code&gt; 的时候，其中一个输入（2）是已知的，而另外一个输入必须通过加法器的输出得到。加法器的结果是由 4 和 3 相加得到的，所以我们必须先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt;，然后才能与 2 相乘。&lt;/p&gt;

&lt;p&gt;小学的时候，你也许学过：“括号内的内容要先计算”。其实括号只是“符号层”的东西，它并不存在于计算图里面。我这里讲的“计算图”，其实才是本质的东西。数学的括号一类的东西，都只是表象，它们是符号或者叫“语法”。从某种意义上讲，计算图才是表达式的本质或者“模型”，而“2 * (4 + 3)”这串符号，只是对计算图的一种表示或者“编码”（coding）。&lt;/p&gt;

&lt;p&gt;这里我们再次体会到了“符号”和“模型”的差别。符号是对模型的“表示”或者“编码”。我们必须从符号得到模型，才能进行操作。这种从符号到模型的转换过程，在计算机科学里叫做“语法分析”（parsing）。我们会在后面的章节理解这个过程。&lt;/p&gt;

&lt;p&gt;我们现在来给表达式做一个初步的定义。这并不是完整的定义，但你应该试着理解这种定义的方式。稍后我们会逐渐补充这个定义，逐渐完善。&lt;/p&gt;

&lt;p&gt;定义（表达式）：&lt;strong&gt;表达式&lt;/strong&gt;可以是如下几种东西。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数字是一个表达式。比如 1，2，4，15，……&lt;/li&gt;
  &lt;li&gt;表达式 + 表达式。两个表达式相加，也是表达式。&lt;/li&gt;
  &lt;li&gt;表达式 - 表达式。两个表达式相减，也是表达式。&lt;/li&gt;
  &lt;li&gt;表达式 * 表达式。两个表达式相乘，也是表达式。&lt;/li&gt;
  &lt;li&gt;表达式 / 表达式。两个表达式相除，也是表达式。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意，由于我们之前讲过的符号和模型的差别，为了完全忠于我们的本质认识，这里的“表达式 + 表达式”虽然看起来是一串符号，它必须被想象成它所对应的模型。当你看到“表达式”的时候，你的脑子里应该浮现出它对应的计算图，而不是一串符号。这个计算图的画面大概是这个样子，其中左边的大方框里可以是任意两个表达式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/expression-graph.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;是不是感觉这个定义有点奇怪？因为在“表达式”的定义里，我们用到了“表达式”自己。这种定义叫做“递归定义”。所谓&lt;strong&gt;递归&lt;/strong&gt;（recursion），就是在一个东西的定义里引用这个东西自己。看上去很奇怪，好像绕回去了一样。递归是一个重要的概念，我们会在将来深入理解它。&lt;/p&gt;

&lt;p&gt;现在我们可以来验证一下，根据我们的定义，&lt;code class=&quot;highlighter-rouge&quot;&gt;2 * (4 + 3)&lt;/code&gt; 确实是一个表达式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先根据第一种形式，我们知道 4 是表达式，因为它是一个数字。3 也是表达式，因为它是一个数字。&lt;/li&gt;
  &lt;li&gt;所以  &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt; 是表达式，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 的左右都是表达式，它满足表达式定义的第二种形式。&lt;/li&gt;
  &lt;li&gt;所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * (4 + 3)&lt;/code&gt; 是表达式，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 的左右都是表达式，它满足表达式定义的第四种形式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;并行计算&quot;&gt;并行计算&lt;/h3&gt;

&lt;p&gt;考虑这样一个表达式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它对应一个什么样的计算图呢？大概是这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/parallel.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;如果妈妈只有你一个小孩，你应该如何用手指算出它的结果呢？你大概有两种办法。&lt;/p&gt;

&lt;p&gt;第一种办法：先算出 4+3，结果是 7。然后算出 1+2，结果是 3。然后算 7*3，结果是 21。&lt;/p&gt;

&lt;p&gt;第二种办法：先算出 1+2，结果是 3。然后算出 4+3，结果是 7。然后算 7*3，结果是 21。&lt;/p&gt;

&lt;p&gt;注意到没有，你要么先算 4+3，要么先算 1+2，你不能同时算 4+3 和 1+2。为什么呢？因为你只有两只手，所以算 4+3 的时候你就没法算 1+2，反之也是这样。总之，你妈妈只有你一个加法器，所以一次只能做一个加法。&lt;/p&gt;

&lt;p&gt;现在假设你还有一个妹妹，她跟你差不多年纪，她也会手指算术。妈妈现在就多了一些办法来计算这个表达式。她可以这样做：让你算 4+3，不等你算完，马上让妹妹算 1+2。等到你们的结果（7 和 3）都出来之后，让你或者妹妹算 7*3。&lt;/p&gt;

&lt;p&gt;发现没有，在某一段时间之内，你和妹妹&lt;em&gt;同时&lt;/em&gt;在做加法计算。这种时间上重叠的计算，叫做&lt;strong&gt;并行计算&lt;/strong&gt;（parallel computing）。&lt;/p&gt;

&lt;p&gt;你和妹妹同时计算，得到结果的速度可能会比你一个人算更快。如果你妈妈还有其它几个孩子，计算复杂的式子就可能快很多，这就是并行计算潜在的好处。所谓“潜在”的意思是，这种好处不一定会实现。比如，如果你的妹妹做手指算数的速度比你慢很多，你做完了 4+3，只好等着她慢慢的算 1+2。这也许比你自己依次算 4+3 和 1+2 还要慢。&lt;/p&gt;

&lt;p&gt;即使妹妹做算术跟你一样快，这里还有个问题。你和妹妹算出结果 7 和 3 之后，得把结果传递给下一个计算 7*3 的那个人（也许是你，也许是你妹妹）。这种“通信”会带来时间的延迟，叫做“通信开销”。如果你们其中一个说话慢，这比起一个人来做计算可能还要慢。&lt;/p&gt;

&lt;p&gt;如何根据计算单元能力的不同和通信开销的差异，来最大化计算的效率，降低需要的时间，就成为了并行计算领域研究的内容。并行计算虽然看起来是一个“博大精深”的领域，可是你如果理解了我这里说的那点东西，就很容易理解其余的内容。&lt;/p&gt;

&lt;h3 id=&quot;变量和赋值&quot;&gt;变量和赋值&lt;/h3&gt;

&lt;p&gt;如果你有一个复杂的表达式，比如&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于它有比较多的嵌套，人的眼睛是难以看清楚的，它要表达的意义也会难懂。这时候，你希望可以用一些“名字”来代表中间结果，这样表达式就更容易理解。&lt;/p&gt;

&lt;p&gt;打个比方，这就像你有一个亲戚，他是你妈妈的表姐的女儿的丈夫。你不想每次都称他“我妈妈的表姐的女儿的丈夫”，所以你就用他的名字“叮当”来指代他，一下子就简单了。&lt;/p&gt;

&lt;p&gt;我们来看一个例子。之前的复合表达式&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实可以被转换为等价的，含有变量的代码：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 变量 a 得到 4+3 的值
&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 代码块的值
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 是一个名字。&lt;code class=&quot;highlighter-rouge&quot;&gt;a = 4 + 3&lt;/code&gt; 是一个“赋值语句”，它的意思是：用 a 来代表 4 + 3 的值。这种名字，计算机术语叫做&lt;strong&gt;变量&lt;/strong&gt;（variable）。&lt;/p&gt;

&lt;p&gt;这段代码的意思可以简单地描述为：计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt;，把它的结果表示为 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;，然后计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt; 作为最后的结果。&lt;/p&gt;

&lt;p&gt;有些东西可能扰乱了你的视线。两根斜杠 &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; 后面一直到行末的文字叫做“注释”，是给人看的说明文字。它们对代码的逻辑不产生作用，执行的时候可以忽略。许多语言都有类似这种注释，它们可以帮助阅读的人，但是会被机器忽略。&lt;/p&gt;

&lt;p&gt;这段代码执行过程会是这样：先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4 + 3&lt;/code&gt; 得到 7，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 记住这个中间结果 7。接着计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt; ，也就是计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * 7&lt;/code&gt;，所以最后结果是 14。很显然，这跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * (4 + 3)&lt;/code&gt; 的结果是一样的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 叫做一个变量，它是一个符号，可以用来代表任意的值。除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;，你还有许多的选择，比如 b, c, d, x, y, foo, bar, u21… 只要它不会被误解成其它东西就行。&lt;/p&gt;

&lt;p&gt;如果你觉得这里面的“神奇”成分太多，那我们现在来做更深一层的理解……&lt;/p&gt;

&lt;p&gt;再看一遍上面的代码。这整片代码叫做一个“代码块”（block），或者叫一个“序列”（sequence）。这个代码块包括两条语句，分别是 &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 4 + 3&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt;。代码块里的语句会从上到下依次执行。所以我们先执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 4 + 3&lt;/code&gt;，然后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最后一条语句 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt; 比较特别，它是这个代码块的“值”，也就是最后结果。之前的语句都是在为生成这个最后的值做准备。换句话说，这整个代码块的值就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 * a&lt;/code&gt; 的值。不光这个例子是这样，这是一个通用的原理：代码块的最后一条语句，总是这个代码块的值。&lt;/p&gt;

&lt;p&gt;我们在代码块的前后加上花括号 &lt;code class=&quot;highlighter-rouge&quot;&gt;{...}&lt;/code&gt; 进行标注，这样里面的语句就不会跟外面的代码混在一起。这两个花括号叫做“边界符”。我们今后会经常遇到代码块，它存在于几乎所有的程序语言里，只是语法稍有不同。比如有些语言可能用括号 &lt;code class=&quot;highlighter-rouge&quot;&gt;(...)&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN...END&lt;/code&gt; 来表示边界，而不是用花括号。&lt;/p&gt;

&lt;p&gt;这片代码已经有点像常用的编程语言了，但我们暂时不把它具体化到某一种语言。我不想固化你的思维方式。在稍后的章节，我们会把这种抽象的表达法对应到几种常见的语言，这样一来你就能理解几乎所有的程序语言。&lt;/p&gt;

&lt;p&gt;另外还有一点需要注意，同一个变量可以被多次赋值。它的值会随着赋值语句而改变。举个例子：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码执行之后，&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; 的值是 7，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; 的值是 10。你知道为什么吗？因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 4 + 3&lt;/code&gt; 之后，a 的值是 7。&lt;code class=&quot;highlighter-rouge&quot;&gt;b = a&lt;/code&gt; 使得 &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; 得到值 7。然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 2 * 5&lt;/code&gt; 把 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 的值改变了，它现在是 10。所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;c = a&lt;/code&gt; 使得 &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; 得到 10。&lt;/p&gt;

&lt;p&gt;对同一个变量多次赋值虽然是可以的，但通常来说这不是一种好的写法，它可能引起程序的混淆，应该尽量避免。只有当变量表示的“意义”相同的时候，你才应该对它重复赋值。&lt;/p&gt;

&lt;h3 id=&quot;编译&quot;&gt;编译&lt;/h3&gt;

&lt;p&gt;一旦引入了变量，我们就可以不用复合表达式。因为你可以把任意复杂的复合表达式拆开成“单操作算术表达式”（像 4 + 3 这样的），使用一些变量记住中间结果，一步一步算下去，得到最后的结果。&lt;/p&gt;

&lt;p&gt;举一个复杂点的例子，也就是这一节最开头的那个表达式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它可以被转化为一串语句：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后的表达式 &lt;code class=&quot;highlighter-rouge&quot;&gt;e * d&lt;/code&gt;，算出来就是原来的表达式的值。你观察一下，是不是每个操作都非常简单，不包含嵌套的复合表达式？你可以自己验算一下，它确实算出跟原表达式一样的结果。&lt;/p&gt;

&lt;p&gt;在这里，我们自己动手做了“编译器”（compiler）的工作。通常来说，编译器是一种程序，它的任务是把一片代码“翻译”成另外一种等价形式。这里我们没有写编译器，可是我们自己做了编译器的工作。我们手动地把一个嵌套的复合表达式，编译成了一系列的简单算术语句。&lt;/p&gt;

&lt;p&gt;这些语句的结果与原来的表达式完全一致。这种保留原来语义的翻译过程，叫做&lt;strong&gt;编译&lt;/strong&gt;（compile）。&lt;/p&gt;

&lt;p&gt;我们为什么需要编译呢？原因有好几种。我不想在这里做完整的解释，但从这个例子我们可以看到，编译之后我们就不再需要复杂的嵌套表达式了。我们只需要设计很简单的，只会做单操作算术的机器，就可以算出复杂的嵌套的表达式。实际上最后这段代码已经非常接近现代处理器（CPU）的汇编代码（assembly）。我们只需要多加一些转换，它就可以变成机器指令。&lt;/p&gt;

&lt;p&gt;我们暂时不写编译器，因为你还缺少一些必要的知识。这当然也不是编译技术的所有内容，它还包含另外一些东西。但从这一开头，你就已经初步理解了编译器是什么，你只需要在将来加深这种理解。&lt;/p&gt;

&lt;h3 id=&quot;函数&quot;&gt;函数&lt;/h3&gt;

&lt;p&gt;到目前为止，我们做的计算都是在已知的数字之上，而在现实的计算中我们往往有一些未知数。比如我们想要表达一个“风扇控制器”，有了它之后，风扇的转速总是当前气温的两倍。这个“当前气温”就是一个未知数。&lt;/p&gt;

&lt;p&gt;我们的“风扇控制器”必须要有一个“输入”（input），用于得到当前的温度 t，它是一个温度传感器的读数。它还要有一个输出，就是温度的两倍。&lt;/p&gt;

&lt;p&gt;那么我们可以用这样的方式来表达我们的风扇控制器：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不要把这想成任何一种程序语言，这只是我们自己的表达法。箭头 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt; 的左边表示输入，右边表示输出，够简单吧。&lt;/p&gt;

&lt;p&gt;你可以把 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 想象成从温度传感器出来的一根电线，它连接到风扇控制器上，风扇控制器会把它的输入（t）乘以 2。这个画面像这个样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/function1.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们谈论风扇控制器的时候，其实不关心它的输入是哪里来的，输出到哪里去。如果我们把温度传感器和风扇从画面里拿掉，就变成这个样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/function2.jpg&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;这幅图才是你需要认真理解的函数的计算图。你发现了吗，这幅图画正好对应了之前的风扇控制器的符号表示：&lt;code class=&quot;highlighter-rouge&quot;&gt;t -&amp;gt; t*2&lt;/code&gt;。看到符号就想象出画面，你就得到了符号背后的模型。&lt;/p&gt;

&lt;p&gt;像 &lt;code class=&quot;highlighter-rouge&quot;&gt;t -&amp;gt; t*2&lt;/code&gt; 这样具有未知数作为输入的构造，我们把它叫做函数（function）。其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 这个符号，叫做这个函数的参数。&lt;/p&gt;

&lt;h3 id=&quot;参数变量和电线&quot;&gt;参数，变量和电线&lt;/h3&gt;

&lt;p&gt;你可能发现了，函数的参数和我们之前了解的“变量”是很类似的，它们都是一个符号。之前我们用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;a, b, c, d, e&lt;/code&gt; 现在我们有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;，这些名字我们都是随便起的，只要它们不要重复就好。如果名字重复的话，可能会带来混淆和干扰。&lt;/p&gt;

&lt;p&gt;其实参数和变量这两种概念不只是相似，它们的本质就是一样的。如果你深刻理解它们的相同本质，你的脑子就可以少记忆很多东西，而且它可能帮助你对代码做出一些有趣而有益的转化。在上一节你已经看到，我用“电线”作为比方来帮助你理解参数。你也可以用同样的方法来理解变量。&lt;/p&gt;

&lt;p&gt;比如我们之前的变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它可以被想象成什么样的画面呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/wire.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;我故意把箭头方向画成从右往左，这样它就更像上面的代码。从这个图画里，你也许可以看到变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 和风扇控制器图里的参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;，其实没有任何本质差别。它们都表示一根电线，那根电线进入乘法器，将会被乘以 2，然后输出。如果你把这些都看成是电路，那么变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 和参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 都代表一根电线而已。&lt;/p&gt;

&lt;p&gt;然后你还发现一个现象，那就是你可以把 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 这个名字换成任何其它名字（比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;），而这幅图不会产生实质的改变。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/rename.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;这说明什么问题呢？这说明以下的代码（把 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 换成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;b）&lt;/code&gt;跟之前的是等价的：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据几乎一样的电线命名变化，你也可以对之前的函数得到一样的结论：&lt;code class=&quot;highlighter-rouge&quot;&gt;t -&amp;gt; t*2&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;u -&amp;gt; u*2&lt;/code&gt;，和 &lt;code class=&quot;highlighter-rouge&quot;&gt;x -&amp;gt; x*2&lt;/code&gt; 都是一回事。&lt;/p&gt;

&lt;p&gt;名字是很重要的东西，但它们具体叫什么，对于机器并没有实质的意义，只要它们不要相互混淆就可以。但名字对于人是很重要的，因为人脑没有机器那么精确。不好的变量和参数名会导致代码难以理解，引起程序员的混乱和错误。所以通常说来，你需要给变量和参数起好的名字。&lt;/p&gt;

&lt;p&gt;什么样的名字好呢？我会在后面集中讲解。&lt;/p&gt;

&lt;h3 id=&quot;有名字的函数&quot;&gt;有名字的函数&lt;/h3&gt;

&lt;p&gt;既然变量可以代表“值”，那么一个自然的想法，就是让变量代表函数。所以就像我们可以写&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们似乎也应该可以写&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对的，你可以这么做。&lt;code class=&quot;highlighter-rouge&quot;&gt;f = t-&amp;gt;t*2&lt;/code&gt; 还有一个更加传统的写法，就像数学里的函数写法：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;请仔细观察 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 的位置变化。我们在函数名字的右边写一对括号，在里面放上参数的名字。&lt;/p&gt;

&lt;p&gt;注意，你不可以只写&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你必须明确的指出函数的参数是什么，否则你就不会明白函数定义里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 是什么东西。明确指出 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 是一个“输入”，你才会知道它是函数的输入，是一个未知数，&lt;strong&gt;而不是在函数外面定义的其它变量&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这个看似简单的道理，很多数学家都不明白，所以他们经常这样写书：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有一个函数 y = x*2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是错误的，因为他没有明确指出“&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; 是函数 y 的参数”。如果这句话之前他们又定义过 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;，你就会疑惑这是不是之前那个 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;。很多人就是因为这些糊里糊涂的写法而看不懂数学书。这不怪他们，只怪数学家自己对于语言不严谨。&lt;/p&gt;

&lt;h3 id=&quot;函数调用&quot;&gt;函数调用&lt;/h3&gt;

&lt;p&gt;有了函数，我们可以给它起名字，可是我们怎么使用它的值呢？&lt;/p&gt;

&lt;p&gt;由于函数里面有未知数（参数），所以你必须告诉它这些未知数，它里面的代码才会执行，给你结果。比如之前的风扇控制器函数&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它需要一个温度作为输入，才会给你一个输出。于是你就这样给它一个输入：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你把输入写在函数名字后面的括号里。那么你就会得到输出：4。也就是说 &lt;code class=&quot;highlighter-rouge&quot;&gt;f(2)&lt;/code&gt; 的值是 4。&lt;/p&gt;

&lt;p&gt;如果你没有调用一个函数，函数体是不会被执行的。因为它不知道未知数是什么，所以什么事也做不了。那么我们定义函数的时候，比如&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当看到这个定义的时候，机器应该做什么呢？它只是记录下：有这么一个函数，它的参数是 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;，它需要计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;t*2&lt;/code&gt;，它的名字叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;。但是机器不会立即计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;t*2&lt;/code&gt;，因为它不知道 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 是多少。&lt;/p&gt;

&lt;h3 id=&quot;分支&quot;&gt;分支&lt;/h3&gt;

&lt;p&gt;直到现在，我们的代码都是从头到尾，闷头闷脑地执行，不问任何问题。我们缺少一种“问问题”的方法。比如，如果我想表达这样一个“食物选择器”：如果气温低于 22 度，就返回 “hotpot” 表示今天吃火锅，否则返回 “ice cream” 表示今天吃冰激凌。&lt;/p&gt;

&lt;p&gt;我们可以把它图示如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/csbook-images/branch.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;中间这种判断结构叫做“分支”（branching），它一般用菱形表示。为什么叫分支呢？你想象一下，代码就像一条小溪，平时它沿着一条路线流淌。当它遇到一个棱角分明的大石头，就分成两个支流，分开流淌。&lt;/p&gt;

&lt;p&gt;我们的判断条件 &lt;code class=&quot;highlighter-rouge&quot;&gt;t &amp;lt; 22&lt;/code&gt; 就像一块大石头，我们的“代码流”碰到它就会分开成两支，分别做不同的事情。跟溪流不同的是，这种分支不是随机的，而是根据条件来决定，而且分支之后只有一支继续执行，而另外一边不会被执行。&lt;/p&gt;

&lt;p&gt;我们现在看到的都是图形化表示的模型，为了书写方便，现在我们要从符号的层面来表示这个模型。我们需要一种符号表示法来表达分支，我们把它叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;（如果）。我们的饮料选择器代码可以这样写：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;&quot;hotpot&quot;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;&quot;ice cream&quot;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它是一个函数，输入是一个温度。&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 后面的括号里放我们的判断条件。后面接着条件成立时执行的代码块，然后是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;，然后是条件不成立时执行的代码。它说：如果温度低于 22 度，我们就吃火锅，否则就吃冰激凌。&lt;/p&gt;

&lt;p&gt;其中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 是一个特殊的符号，它表示“否则”。看起来不知道为什么 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 要在那里？对的，它只是一个装饰品。我们已经有足够的表达力来分辨两个分支，不过有了 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 似乎更加好看一些。很多语言里面都有 else 这个标记词在那里，所以我也把它放在那里。&lt;/p&gt;

&lt;p&gt;这只是一个最简单的例子，其实那两个代码块里面不止可以写一条语句。你可以有任意多的语句，就像这样：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;hotpot&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ice cream&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码和之前是等价的，你知道为什么吗？&lt;/p&gt;

&lt;h3 id=&quot;字符串&quot;&gt;字符串&lt;/h3&gt;

&lt;p&gt;上面一节出现了一种我们之前没见过的东西，我为了简洁而没有介绍它。这两个分支的结果，也就是加上引号的 “hotpot” 和 “ice cream”，它们并不是数字，也不是其它语言构造，而是一种跟数字处于几乎同等地位的“数据类型”，叫做&lt;strong&gt;字符串&lt;/strong&gt;（string）。字符串是我们在计算机里面表示人类语言的基本数据类型。&lt;/p&gt;

&lt;p&gt;关于字符串，在这里我不想讲述更加细节的内容，我把对它的各种操作留到以后再讲，因为虽然字符串对于应用程序很重要，它却并不是计算机科学最关键最本质的内容。&lt;/p&gt;

&lt;p&gt;很多计算机书籍一开头就讲很多对字符串的操作，导致初学者费很大功夫去做很多打印字符串的练习，结果几个星期之后还没学到“函数”之类最根本的概念。这是非常可惜的。&lt;/p&gt;

&lt;h3 id=&quot;布尔值&quot;&gt;布尔值&lt;/h3&gt;

&lt;p&gt;我们之前的 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 语句的条件 &lt;code class=&quot;highlighter-rouge&quot;&gt;t &amp;lt; 22&lt;/code&gt; 其实也是一个表达式，它叫做“布尔表达式”。你可以把小于号 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 看成是跟加法一类的“操作符”。它的输入是两个数值，输出是一个“布尔值”。什么是布尔值呢？布尔值只有两个：true 和 false，也就是“真”和“假”。&lt;/p&gt;

&lt;p&gt;举个例子，如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 的值是 15，那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;t &amp;lt; 22&lt;/code&gt; 是成立的，那么它的值就是 true。如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; 的值是 23，那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;t &amp;lt; 22&lt;/code&gt; 就不成立，那么它的值就是 false。是不是很好理解呢？&lt;/p&gt;

&lt;p&gt;我们为什么需要“布尔值”这种东西呢？因为它的存在可以简化我们的思维。对于布尔值也有一些操作，这个我也不在这一章赘述，放到以后细讲。&lt;/p&gt;

&lt;h3 id=&quot;计算的要素&quot;&gt;计算的要素&lt;/h3&gt;

&lt;p&gt;好了，现在你已经掌握了计算机科学的几乎所有基本要素。每一个编程语言都包括这些构造：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基础的数值。比如整数，字符串，布尔值等。&lt;/li&gt;
  &lt;li&gt;表达式。包括基本的算术表达式，嵌套的表达式。&lt;/li&gt;
  &lt;li&gt;变量和赋值语句。&lt;/li&gt;
  &lt;li&gt;分支语句。&lt;/li&gt;
  &lt;li&gt;函数和函数调用。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;你也许可以感觉到，我是把这些构造按照“从小到大”的顺序排列的。这也许可以帮助你的理解。&lt;/p&gt;

&lt;p&gt;现在你可以回想一下你对它们的印象。每当学习一种新的语言或者系统，你只需要在里面找到对应的构造，而不需要从头学习。这就是掌握所有程序语言的秘诀。这就像学开车一样，一旦你掌握了油门，刹车，换挡器，方向盘，速度表的功能和用法，你就学会了开所有的汽车，不管它是什么型号的汽车。&lt;/p&gt;

&lt;p&gt;我们在这一章不仅理解了这些要素，而且为它们定义了一种我们自己的“语言”。显然这个语言只能在我们的头脑里运行，因为我们没有实现这个语言的系统。在后面的章节，我会逐渐的把我们这种语言映射到现有的多种语言里面，然后你就能掌握这些语言了。&lt;/p&gt;

&lt;p&gt;但是请不要以为掌握了语言就学会了编程或者学会了计算机科学。掌握语言就像学会了各种汽车部件的工作原理。几分钟之内，初学者就能让车子移动，转弯，停止。可是完了之后你还需要学习交通规则，你需要许许多多的实战练习和经验，掌握各种复杂情况下的策略，才能成为一个合格的驾驶员。如果你想成为赛车手，那就还需要很多倍的努力。&lt;/p&gt;

&lt;p&gt;但是请不要被我这些话吓到了，你没有那么多的竞争者。现在的情况是，世界上就没有很多合格的计算机科学驾驶员，更不要说把车开得流畅的赛车手。绝大部分的“程序员”连最基本的引擎，油门，刹车，方向盘的工作原理都不明白，思维方式就不对，所以根本没法独自上路，一上路就出车祸。很多人把过错归结在自己的车身上，以为换一辆车马上就能成为好的驾驶员。这是一种世界范围的计算机教育的失败。&lt;/p&gt;

&lt;p&gt;在后面的章节，我会引导你成为一个合格的驾驶员，随便拿一辆车就能开好。&lt;/p&gt;

&lt;h3 id=&quot;什么是计算&quot;&gt;什么是计算&lt;/h3&gt;

&lt;p&gt;现在你掌握了计算所需要的基本元素，可是什么是计算呢？我好像仍然没有告诉你。这是一个很哲学的问题，不同的人可能会告诉你不同的结果。我试图从最广义的角度来告诉你这个问题的答案。&lt;/p&gt;

&lt;p&gt;当你小时候用手指算 &lt;code class=&quot;highlighter-rouge&quot;&gt;4+3&lt;/code&gt;，那是计算。如果后来你学会了打算盘，你用算盘算 4+3，那也是计算。后来你从我这里学到了表达式，变量，函数，调用，分支语句…… 在每一新的构造加入的过程中，你都在了解不同的计算。&lt;/p&gt;

&lt;p&gt;所以从最广义来讲，计算就是“机械化的信息处理”。所谓机械化，你可以用手指算，可以用算盘，可以用计算器，或者计算机。这些机器里面可以有代码，也可以没有代码，全是电子线路，甚至可以是生物活动或者化学反应。不同的机器也可以有不同的计算功能，不同的速度和性能……&lt;/p&gt;

&lt;p&gt;有这么多种计算的事实不免让人困惑，总害怕少了点什么，其实你可以安心。如果你掌握了上一节的“计算要素”，那么你就掌握了几乎所有类型的计算系统所需要的东西。你在后面所需要做的只是加深这种理解，并且把它“对应”到现实世界遇到的各种计算机器里面。&lt;/p&gt;

&lt;p&gt;为什么你可以相信计算机科学的精华就只有这些呢？因为计算就是处理信息，信息有它诞生的位置（输入设备，固定数值），它传输的方式（赋值，函数调用，返回值），它被查看的地方（分支）。你想不出对于信息还有什么其它的操作，所以你就很安心的相信了，这就是计算机科学这种“棋类游戏”的全部规则。&lt;/p&gt;

&lt;p&gt;（如果你觉得这篇文章有启发，可以点击这里&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费&lt;/a&gt;）&lt;/p&gt;

        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-04-13-computer-science</guid>
<pubDate>Fri, 13 Apr 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>中国人的鉴赏力</title>
<link>https://henix.github.io/feeds/yinwang/2018-03-29-appreciation.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/03/29/appreciation&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;中国人的鉴赏力&lt;/h2&gt;
            &lt;p&gt;大部分的中国人都不会鉴别物品的好坏和价值，所以他们只能以“价格”的高低来做判断。你经常听中国人说“穿着一万块一件的衣服”，“开着一百万一辆的车”，“住着二十万一平米的房子”，就是这个原因。他们不懂得这个东西好在哪，只知道它是多少钱买的。他们仿佛认为一万块钱的东西和一万块钱的东西，都是一样的。销售人员最喜欢这种人。&lt;/p&gt;

&lt;p&gt;这种现象跟中国人从小上学就只认数字有关系，他们从小就被当成一个数字。考试成绩是一个数字，期末排名是一个数字。还有竞赛名次啊，金牌总数啊…… 大部分中国人知道数字，但却不知道数字背后的意义。他们不明白，有些东西是不能转化为数字进行比较的。比如我跟有些人说我今天跑步了，他们会问我跑了多少公里，多少圈。我回答：不知道！我只知道沿途的风景很美，我跑了很开心。&lt;/p&gt;

&lt;p&gt;所以一个很简单的愚弄中国人的手段，就是把很普通的东西卖得离谱的贵。只要你卖得贵，就会有人觉得它是好东西，或者觉得买了可以显得自己有钱，于是就会买来招摇过市。买不起的人呢，看到别人有了这个东西，就会产生艳羡的心理，心想等自己有钱就一定要买。这样不知不觉的，他们就把自己的地位降到了东西之下，被狡猾的商家给控制了。&lt;/p&gt;

&lt;p&gt;这就是虚荣心作怪。恐惧和虚荣，是世界上最好卖的两种东西。关于如何卖恐惧，我在之前一篇文章『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/28/yangsheng&quot;&gt;养生节目的危害&lt;/a&gt;』已经讲过了。从小扶植小朋友的虚荣心，等他们长大了，就哭着闹着要买你的东西，逼着父母或者男朋友送那个东西。&lt;/p&gt;

&lt;p&gt;很多中国人花着“土豪价钱”，买着其实不值钱的商品，还顶礼膜拜，受宠若惊的样子。他们不是物品的主人，而是它们的仆人，他们的地位是低于这些物品的。很多商店店员也是那种心理，他们觉得你走进我们这“高大上”的品牌店，就是来膜拜我们的东西的，所以做出一副“你买得起吗”的神情，跟你说“这个很贵”。你要是跟她说这个卖得太贵了，不值那个钱，她就觉得你是买不起。直到客人不爽走了，她也没认出别人身上穿的就是他们家牌子的衣服 :p&lt;/p&gt;

&lt;p&gt;一百年前马克吐温写的『百万英镑』，展现了那个时候英国的情况，跟现在的中国非常类似。&lt;/p&gt;

&lt;p&gt;中国人最爱买宝马车，LV，爱马仕包包，原因很简单：因为它们贵。没有品位，没有鉴别欣赏能力，就只知道一个“贵”字。管它多俗气多丑呢，还搭配不好，贵就是好。LV 还有一个特点，那就是他们家的东西上面都密密麻麻印着“LV”字样，所以拿出去大家都知道你有 LV！可是我每次看到 LV 一类的东西，就想起这个画面 :p&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/tyvek.jpg&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;女人爱 LV，男人爱宝马。宝马曾经是中国男人装逼泡妹的神器。宝马车难开的一塌糊涂做工又糙，但女人只认得宝马啊。不过后来宝马也有点烂大街了，显示不出差距，所以现在他们的新宠是 Tesla。每次看到开 Tesla 的人，几乎都是戴着眼镜，刚赚了点钱，内心有强烈装逼需求的呆子。我认识的气质优雅一点的人，几乎没有人会选择 Tesla。&lt;/p&gt;

&lt;p&gt;只要你骂 Tesla，他们就会说你穷，买不起，所以吃不到葡萄说葡萄酸。可是我骂 Tesla 完全是出于社会责任感：Tesla 的车子威胁了公共安全。整死车主也就算了，可是这东西会伤到其他人，所以匹夫有责来谴责一下 Tesla。你可以把这车卖任意高的价钱，可是它仍然不安全，而且设计得&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/12/12/tesla-model-s&quot;&gt;一塌&lt;/a&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/12/21/tesla-model-x&quot;&gt;糊涂&lt;/a&gt;，用料也不好。多次出事起火，然后吹嘘电池现在用了多么严密的弹道导弹材料保护，结果呢，照样爆炸。&lt;/p&gt;

&lt;p&gt;从没见过有汽车撞了烧成那样，消防队都没办法灭火。整个车头都烧掉消失了，如果人在里面就毁尸灭迹了，怎么出的事证据都找不到。对于湾区交通性命攸关的 101 公路，因为一辆 Tesla 着火爆炸，全部车道被封长达 6 小时。要知道这条路要是塞了，你跑长途基本没有其他路可以绕的。这是我从来没遇到过的，其它车怎么撞也会有一条道可以走的。我在路上见过各种车祸，大型卡车着火，最多一个小时就走走停停过去了，因为还有车道可以走。谁来赔这些人的损失？真像是一颗颗导弹跑在公路上，一碰就爆。&lt;/p&gt;

&lt;p&gt;从来没有汽车公司把“驾驶辅助系统”（driver assistant）吹嘘成“自动驾驶系统”（autonomous driving），Tesla 大言不惭开了这个先河。如此不负责的公司，最后还要把责任都推到用户身上。我认识一个 Tesla 的修车技工，他自己也开了个修车铺，修其他牌子的车。他说在 Tesla 工作特别辛苦，因为这车毛病太多了，感觉公司里的工程师都不知道他们自己在干什么，有些东西根本就不该那样设计，容易出毛病。一个修车工都知道的事情，设计师工程师却不懂……&lt;/p&gt;

&lt;p&gt;所以呢，Tesla 这颗葡萄是真的酸，都烂掉了还敢卖那么贵。你还不能骂它，否则一群脑残粉来攻击你，说你穷买不起。你见过我骂奔驰吗？我骂过法拉利，劳斯莱斯吗？出于一个负责的工程师的态度，我尊敬他们。我尊敬他们是因为他们的工匠精神，制造出一些世界上最优美，最可靠的机器，而不是因为它们的价格昂贵。&lt;/p&gt;

&lt;p&gt;大部分的国人要什么时候才能意识到，并不是贵的就好。能忽略价格看到物品的品质，实现不带有虚荣心的鉴赏，是很重要的能力。&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-03-29-appreciation</guid>
<pubDate>Thu, 29 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>扶门的礼仪</title>
<link>https://henix.github.io/feeds/yinwang/2018-03-27-door-etiquette.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/03/27/door-etiquette&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;扶门的礼仪&lt;/h2&gt;
            &lt;p&gt;世界上的很多事情，不是你自己有好意就一定有好的效果，你还必须知道对方的感受，不然你也许会让对方感觉很累。今天我就来讲讲一个看似简单的礼仪：扶门。很多中国人到了国外，特别是美国，看到美国人进了公共场所的大门之后，为了防止门回弹关上，都会礼貌地为后面的人扶住门，等他们接住门才放手。甚至有些先把门拉开，站在门口扶住门，让后面的人都进去了，自己才进去。&lt;/p&gt;

&lt;p&gt;中国人看到美国人这么做，觉得扶门是文明的象征，所以也开始模仿。哪知道，这里面的学问其实比他们想象的要复杂一些。所以你就发现，某些人经常为“谁先进门”这个事情让来让去的，又尴尬又累，那程度胜似吃了饭抢着买单 :p 其中的一些道理，其实很多美国人都不懂。这些道理可能很难在其它地方看到，所以我把它们总结一下。&lt;/p&gt;

&lt;p&gt;显然这些主动为后面人扶门的人，比起那些完全不考虑别人，甚至使劲摔门的人来说，已经很好了。可是我今天要说的不是这个，而是更加深入细致的礼仪。美国作为一个基本文明的国家，在这方面做得已经不错了，可是相对某些欧洲国家还是稍显落后。很多美国人并不懂得完整合理的礼仪规范，只是模仿欧洲的“绅士风度”，所以有些时候做得其实不大对。所以呢，看到美国人那么做，你也不一定完全模仿他们。你应该知道这些礼仪背后的原理，而不是照抄表面现象。&lt;/p&gt;

&lt;p&gt;扶门也许不是你想象的那么简单，无条件扶着门，显示好意就好。很多人懂得应该为后面的人扶门，可是他们忽视了扶门的时机问题，还有人之间的关系问题。正确的作法应该是这样，分好几种情况。&lt;/p&gt;

&lt;p&gt;情况 1：陌生人。进了一扇会自动弹回关上的门，如果回头看到有陌生人紧跟在后面，只有两三步远的地方，就扶住门让他进来，否则就自然把门放开，自己进去就是。原因是，如果后面的人离你还很远，扶住门会迫使他加快脚步。后面的人很可能希望按照自己的节奏走路，可是看到你扶住门等他，不好意思让你久等，或者觉得你一直回头看着他挺尴尬，所以他不得不加快脚步。如果他刚吃了饭不想那么快步走，或者他是在上楼梯，就会更加不舒服。所以呢，出于对他人真正周全的考虑，你不应该扶住门时间太久，迫使后面的人加快脚步。如果你发现自己判断错误，扶住门太久了，你还是可以补救。你只需要微笑着朝后面的人挥挥手，然后放开门自己进去。他会理解你为什么放手，因为他也不会指望你扶太久。这一条原则经常被美国人忽视，遇到扶门太久太早的人，经常感觉挺累。如果你遇到为你扶门太久的人，你也可以朝他挥挥手，示意他先走。&lt;/p&gt;

&lt;p&gt;情况 2：认识的人或者朋友。当然对于认识的人或者朋友同事，第一条就不一定需要严格遵守了。因为后面那个人认识你而且关系不错，所以你可以扶住门比较长时间。他大概不会因为你在那等他而加快脚步，你甚至可以靠着门跟他说句话。当然如果实在太远了，你也同样可以挥挥手，放手进去，别人不会介意这个。&lt;/p&gt;

&lt;p&gt;情况 3：陌生女性。如果身后紧跟的是陌生女性，你可以拉开门，让她先进去，然后自己才进去。你也可以自己先进去，然后把门帮她扶一下。没有规则要你一定让女性先进去，或者扶住门太久。普通的女性完全有能力拉开一扇门，这个不需要你特别照顾。&lt;/p&gt;

&lt;p&gt;情况 4：男性。如果身后紧跟的是男性，不管你是否认识他，你最好自己先进去，然后帮他扶一下门。最好不要请他先走，否则你就会制造“让来让去”的尴尬局面！如果你拉开门让一个男性先进去，自己才进去，会造成这位男性的尴尬。凭什么我需要让另外一个男性，甚至是女性为我开门，让我先走呢？我有哪一点显示出我身体虚弱，需要你帮助呢？他会这样想。他会认为自己的男性气质受到了某种打击，或者感到尴尬，感到欠了你什么。当然，如果你是酒店的礼宾人员，为客人开门让他们先走，不论男女都是天经地义的。所以当男性遇到另一个男性或者女性（非礼宾人员）给他开门，他一般会示意对方先走，可是扶门的这个人却又坚持要他先走，最后就出现了僵持的尴尬局面，跟很多中国人吃了饭抢着买单一样讨厌。所以你开了门，就不要请身后的男性先走，就不会有这回事了。如果开门的人在多次反复之后一定要你先走，而且多次进门都那样，那么请你今后小心这个人了，他似乎很想要你感觉欠他什么 :p&lt;/p&gt;

&lt;p&gt;情况 5：两手被占用的人。两手抱着箱子，或者推着自行车的人，如果跟在你身后，他们需要特殊照顾。你应该扶住门，让他们先走，然后自己才走。这个规则不论男女老幼，不论跟你什么关系都一样适用，因为他们腾不出手来开门，也没有手可以接住你放开的门。&lt;/p&gt;

&lt;p&gt;情况 6：一个推着婴儿车的人。如果是一个人推着一个婴儿车，这个没什么好说的，一定要拉开门，让他先走，确认婴儿车已经进去了，自己才进去。还有一种情况是一家人，其中一个推着婴儿车。因为有人可以开门，这个就不需要你特别照顾了，按情况1处理。&lt;/p&gt;

&lt;p&gt;情况 7：一大群普通关系的人（或者同事）在你后面。如果你身后不是一个人，而是一大群人，而且这群人不是亲密的朋友，只是普通的同学或者同事关系，那么请你先进去，然后帮后面第一个人扶住门，等他接手门之后就放手。他会为后面的人扶一下，这样接力下去。不要站在门口，让一大群人都进去，然后自己才进去。有些人喜欢这样做，以为这样显得很“绅士”，但我觉得这样很装很做作。我见过两三个喜欢扶住门让所有人进去的人，在工作中都是很虚伪的人。他们在工作中可以暗地里捅你几刀，进门的时候却演得像个大好人。让大家进去他才走，得意洋洋的样子，好像每个人走过那道门都欠了他一笔账似的。真的，你没有必要那样做，那种感觉非常的不自然。而且你扶住门，看着后面每个人走向你，可能会让某些人尴尬。其中某些人可能不大喜欢你，不想跟你近距离对视，觉得你在借机打量他们。有些女性甚至会觉得你长时间盯着她们走进去，是一种骚扰。所以如果很多人一起，最好还是你自己先进去，不要站在门口给大家扶门。&lt;/p&gt;

&lt;p&gt;情况 8：跟女性朋友一起。如果是跟熟悉的女性朋友或者女朋友一起，你最好拉开门，让女性朋友先进去，然后自己马上跟进去。注意，跟进去的时机是“马上”。如果她身后紧跟着陌生人，请紧跟你的女性朋友身后进门，不要让陌生人夹到你们中间去。有些刚懂得扶门的男士不知道这个道理。他拉开门，让女性朋友进去了，结果看到她身后又跟着其他陌生人，所以他继续扶着门，让其他人先走。结果门外的人一个个都进去了，他还在那里扶着门。女性朋友在里面，都不知道他哪里去了 :p 这种男士应该明白的是，在这个时候你应该跟女性朋友待在一起，而不应该让陌生人隔在你们之间。没有人会因为你先走而责怪你，他们反而会觉得你让他们先走很奇怪，因为你应该首先照顾自己的朋友。这个对待女性朋友的开门原则，我是从 &lt;a href=&quot;https://en.wikipedia.org/wiki/Emily_Post&quot;&gt;Emily Post&lt;/a&gt; 经典的『Etiquette』（礼仪）一书看到的。&lt;/p&gt;

&lt;p&gt;情况 9：进门马上需要排队的地方。如果你是去邮局或者需要排队下单的咖啡店，除非后面的人真有困难，最好不要拉开门让后面的陌生人先走，即使后面是女性也一样。你应该自己先进去，然后稍微扶一下门。根据先来先服务的原则，你应该排在后面的人前面，不管后面是男是女。如果你拉门让别人先走了，他们自然就排到你前面去了。如果这个人特别懂礼仪而且考虑周到，她可能会让你到前面去排队。但如果你在一个不是每个人都那么懂的地方，她很可能意识不到你应该排在她前面。这样你显示了好意反而吃亏，这会打击你以后继续有礼貌的动机。&lt;/p&gt;

&lt;p&gt;这可能是世界上最全面的关于扶门礼仪的总结，是一个计算机科学家不经常谈论的事情 =) 这些原则看似复杂，其实不需要你死记硬背，只要你看了有印象，就会从实际经验中体会到，不断改进。可惜的是很多人都不知道这里面的道理，也没注意到。这就是我为什么把它们写出来。&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-03-27-door-etiquette</guid>
<pubDate>Tue, 27 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>解谜计算机科学（前言）</title>
<link>https://henix.github.io/feeds/yinwang/2018-03-21-csbook-preface.html</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2018/03/21/csbook-preface&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
            if (/mobile/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent))
            {
               document.body.classList.add(&#39;mobile&#39;);
            }
        &lt;/script&gt;&lt;div class=&quot;inner&quot;&gt;
            &lt;h2&gt;解谜计算机科学（前言）&lt;/h2&gt;
            &lt;p&gt;计算机科学直到今天仍然是一个谜。它简单而美丽的精华，被压在沉重的历史包袱和功利诱惑之下。纷繁复杂的 IT 技术充斥着各种浮夸和忽悠，变成一本本大部头“圣经”，让人不知所措，头脑发涨，让外行尤其是女性望而却步。她们说，学计算机能赚钱，可是计算机知识淘汰速度太快，需要不断学习才能跟上，计算机工作枯燥，伤眼睛，伤皮肤，老得快！去看看各位计算机界前辈的照片，你会发现她们说的好像是对的 :)&lt;/p&gt;

&lt;p&gt;“IT 男”和“极客”的苦逼名声，来源于这个领域创造者们的自大和虚伪。他们认为自己是天才，能够理解复杂的理论，所以他们喜欢把简单的问题搞复杂，然后告诉你“只有天才才能理解这种简单”。最后这种自大蔓延到整个领域。计算机科学虽然名字叫“科学”，但它的从业人员在很大程度上是宗教化的。不同信仰的教徒们盲目轻信，跟风拍马，互相鄙视，甚至掀起圣战。进入这个领域面临的，不仅是高度近视，不修边幅的同事，而且很多还很自大，喜欢显示自己聪明，觉得自己了不起。他们所谓的“聪明”，也就是能折腾那些纷繁复杂的理论和代码。发表论文来显示自己解决了一个问题，但别人看了仍然摸不着头脑。这种不健康的心理，进入了计算机科学的基因，完全违背了科学的精神。&lt;/p&gt;

&lt;p&gt;在这种情况下产生出来的所谓“知识”，当然是淘汰速度很快的，因为他们只给了你浮于表面的东西。IT 业的很多知识就像妈妈告诉你，我把勺子放在这个抽屉里了，你记住啊！第二天她又把勺子换了一个地方，要你重新“学习”。这叫知识吗？他们把精华的东西牢牢地锁了起来，只把衍生出来的副产品给其他人。拿到这些副产品的人一知半解，又在上面加上一些乱七八糟的东西，然后转手倒卖给更下一层的学生。这样几层转手之后，你拿到的东西就只能凑合用了，不能用于产生新的想法，甚至使用中有问题还不能解决。这就是为什么很多码工折腾来折腾去，代码也只是碰巧能工作而已。没有理解原理，就成为了“知识”的奴隶。看不准方向，在错误的道路上越走越远。&lt;/p&gt;

&lt;p&gt;爱因斯坦说：“如果你不能把一个问题跟六岁小孩解释清楚，那你并不真的理解它。” 这句话打了计算机前辈们的耳光。计算机界至今没有出现一本像物理界的『费曼讲义』那样负责任的教材。没有人从日常生活解释清楚那些基本的理论和技术是怎么回事。一方面是因为很多人并不真懂，只会照本宣科，拿别人的代码来拼凑折腾。另外一方面，很多懂了的人为了自己的私利，想掩盖这些简单的精华，故意把事情搞复杂。&lt;/p&gt;

&lt;p&gt;我写这本书，就是为了弥补计算机业界这一空缺，改变行业的现状。它将吸引新鲜干净的血液进入这个行业，并且赋予他们力量。它也可以刷新内行人员的头脑，让他们重新理解和审视已有的知识。这样也许我们能冲破这个行业的重重迷雾，让它变得诚实，获得科学的精神，成为像物理一样踏实的学科。&lt;/p&gt;

&lt;p&gt;很多计算机书籍都喜欢从“数学基础”开始，一开头就是长篇累牍的数学公式，定理，证明…… 结果读者还没读完数学基础就倒下睡着了，再也不想打开这本书。所以我不从数学基础开始，而是从最简单的生活常识。在认识发展的过程中，你会自己去创造出所需要的那些数学。&lt;/p&gt;

&lt;p&gt;这本书不要求读者理解高等数学，而只需要幼稚园或者学前班水平的数学：掰手指头算加法，手算多位数加减法。它不要求，也不会试图教会你中学几何，高等数学或者物理学，你不需要那些来理解计算机科学。它不灌输给你死知识，而是从日常生活的经验出发，引导你去“重新发明”它们。最后你不是学会了知识，而是自己创造了它们。只有这样的知识才是属于自己的，才是可靠安心的，不受别人控制，也不会忘记。我讨厌“学习”这个词，因为它基本代表着死记硬背。我不是在教你，你也不是在学习，因为你自己发明了这一切。&lt;/p&gt;

&lt;p&gt;如果有一天，一场灾难毁灭了世界上所有的计算机和电子产品，以及它们的设计文档，我希望看过这本书的人，能够根据他们的日常经验，重新创造出这些东西。对的，这本书不仅是关于编程和软件，它还会告诉你硬件是怎么回事，并且把软件和硬件统一起来。它不只是教会你一种程序语言，而是教会你所有的程序语言，它告诉你如何发明一种语言。它不要你去“记住”计算机里面有哪些东西，而是让你自己发现“需要”它们：晶体管，寄存器，指令，堆栈…… 你会发现虚拟机（VM）到底是什么，指令系统为什么那个样子，怎么创造它们…… 所有这一切，都以掰手指头的幼稚园算术为基础。&lt;/p&gt;

&lt;p&gt;实际上，计算机科学和逻辑学是统一的，你会不知不觉理解很多看似高深的逻辑学，你会看透白胡子逻辑学家爷爷们的把戏。这种理解会为你提供更好的理解数学的工具，所以这本书不仅会帮助你理解计算机科学，而且会帮助你更好的理解数学。理解了数学你就能更好的理解物理。理解了物理，你就能更好的理解所有的科学……&lt;/p&gt;

&lt;p&gt;有人可能怀疑这么浩大的工程，要什么时候才能完成。不会很久的，因为计算机科学最精华的部分，真的没有很多，我掰着手指头都数的出来。剩下来的都是衍生出来的技术，外加自欺欺人和商业炒作。你会掌握精华，识破忽悠和炒作，你可以衍生出自己的技术。即使你决定不进入这个领域，你也会成为一个火眼金睛的投资人，管理者，或者消费者。你不再能被这些“内行”欺骗。为了达到这个目标，你不需要损害自己的视力或者健康，不需要长出鸡窝一样的胡子，不需要成为一个对异性具有排斥力的呆子 ;)&lt;/p&gt;

&lt;p&gt;这本书不是固定不变的，它会不断地完善和发展。有人看我写的东西就是我最大的动力，所以为了使我自己有动力写书，我会采用“快速迭代”的方法。我是一个很懒的人，我不会等书完全写完才发布它，那样我会打瞌睡以至于不能继续，所以我会分章节发布书的内容。每一章发布之后，还会经过成百上千次的修改。每一章的内容，我会在它“基本可读”之后就进行发布，而不会等到它完美。之后我会反复的思考和修改，接受人们的反馈。&lt;/p&gt;

&lt;p&gt;这种做法对早期的读者有益，也有一定的弊端。弊端就在于，由于这些内容随时可能变化和改进，所以早期读者有时候会遇到看不懂的地方，必须之后再次阅读，才能跟上改进的思路。不过这样做也有好处，读者不用等上一年就能读到这本书，而且能跟着我的写作思路去思考，反复琢磨。俗话说，书读百遍，其义自见。他们可以跟我讨论，给我反馈，向我提问。这些都是后期读到完善作品的人无法体验到的。在某种程度上，这些人对问题的理解会更加深刻一些，因为他们被迫去进行独立思考。另外，早早的有了读者，会让我很开心，满怀着爱去做这件事。&lt;/p&gt;

&lt;p&gt;人的短期记忆只能记住七个东西，所以我会努力让这本书简短。每个知识点都不应该长篇大论之后才能理解，而应该是正中要害。当然这篇前言也应该简短，所以前言就到此结束了。&lt;/p&gt;

&lt;p&gt;计算机的世界，就将被你一个人重新发明出来。它的内容没有很多，真的没有很多……&lt;/p&gt;


        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2018-03-21-csbook-preface</guid>
<pubDate>Wed, 21 Mar 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
