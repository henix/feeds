<div class="title-image"><img src="https://pic4.zhimg.com/v2-33f1358d96099d3f1268614a0d2c3f13_b.jpg" alt=""></div><p>作者：Ti-Cool</p><blockquote>上周我们推送了《<a href="https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/tidb-in-the-browser-running-a-golang-database-on-wasm/" class=" wrap external" target="_blank" rel="nofollow noreferrer">让数据库运行在浏览器里？TiDB + WebAssembly 告诉你答案</a>》，向大家展示了 TiDB-Wasm 的魅力：TiDB-Wasm 项目是 TiDB Hackathon 2019 中诞生的二等奖项目，实现了将 TiDB 编译成 Wasm 运行在浏览器里，让用户无需安装就可以使用 TiDB。<br/>本文由 Ti-Cool 队成员主笔，为大家详细介绍 TiDB-Wasm 设计与实现细节。</blockquote><p>10 月 27 日，为期两天的 Hackathon 落下帷幕，我们用一枚二等奖为此次上海之行画上了圆满的句号，不枉我们风尘仆仆跑去异地参赛（强烈期待明年杭州能作为赛场，主办方也该鼓励鼓励杭州当地的小伙伴呀 :D ）。</p><p>我们几个 PingCAP 的小伙伴找到了 Tony 同学一起组队，组队之后找了一个周末进行了“秘密会晤”——Hackathon kick off。想了 N 个 idea，包括使用 unikernel 技术将 TiDB 直接跑在裸机上，或者将网络协议栈做到用户态以提升 TiDB 集群性能，亦或是使用异步 io 技术提升 TiKV 的读写能力，这些都被一一否决，原因是这些 idea 不是和 Tony 的工作内容相关，就是和我们 PingCAP 小伙伴的日常工作相关，做这些相当于我们在 Hackathon 加了两天班，这一点都不酷。本着「与工作无关」的标准，我们想了一个 idea：把 TiDB 编译成 Wasm 运行在浏览器里，让用户无需安装就可以使用 TiDB。我们一致认为这很酷，于是给队伍命名为 Ti-Cool（太酷了）。</p><h2>WebAssembly 简介</h2><p>这里插入一些 WebAssembly 的背景知识，让大家对这个技术有个大致的了解。</p><p>WebAssembly 的 <a href="https://link.zhihu.com/?target=https%3A//webassembly.org/" class=" wrap external" target="_blank" rel="nofollow noreferrer">官方介绍</a> 是这样的：WebAssembly（缩写为 Wasm）是一种为基于堆栈的虚拟机设计的指令格式。它被设计为 C/C++/Rust 等高级编程语言的可移植目标，可在 web 上部署客户端和服务端应用程序。</p><p>从上面一段话我们可以得出几个信息：</p><ol><li>Wasm 是一种可执行的指令格式。</li><li>C/C++/Rust 等高级语言写的程序可以编译成 Wasm。</li><li>Wasm 可以在 web（浏览器）环境中运行。</li></ol><h3>可执行指令格式</h3><p>看到上面的三个信息我们可能又有疑问：什么是指令格式？</p><p>我们常见的 <a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Executable_and_Linkable_Format" class=" wrap external" target="_blank" rel="nofollow noreferrer">ELF 文件</a> 就是 Unix 系统上最常用的二进制指令格式，它被 loader 解析识别，加载进内存执行。同理，Wasm 也是被某种实现了 Wasm 的 runtime 识别，加载进内存执行，目前常见的实现了 Wasm runtime 的工具有各种主流浏览器，nodejs，以及一个专门为 Wasm 设计的通用实现：Wasmer，甚至还有人给 Linux 内核提 feature 将 Wasm runtime 集成在内核中，这样用户写的程序可以很方便的跑在内核态。</p><p>各种主流浏览器对 WebAssembly 的支持程度：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-01d2e33e71576ff7f3e4252095dba57f_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="712" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic4.zhimg.com/v2-01d2e33e71576ff7f3e4252095dba57f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-01d2e33e71576ff7f3e4252095dba57f_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="712" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic4.zhimg.com/v2-01d2e33e71576ff7f3e4252095dba57f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-01d2e33e71576ff7f3e4252095dba57f_b.jpg"/><figcaption>图 1 主流浏览器对 WebAssembly 的支持程度</figcaption></figure><h3>从高级语言到 Wasm </h3><p>有了上面的背景就不难理解高级语言是如何编译成 Wasm 的，看一下高级语言的编译流程：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-3b59bb6f19d91ed984c0639f109bd4c3_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="195" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic4.zhimg.com/v2-3b59bb6f19d91ed984c0639f109bd4c3_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-3b59bb6f19d91ed984c0639f109bd4c3_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="195" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic4.zhimg.com/v2-3b59bb6f19d91ed984c0639f109bd4c3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-3b59bb6f19d91ed984c0639f109bd4c3_b.jpg"/><figcaption>图 2 高级语言编译流程</figcaption></figure><p>我们知道高级编程语言的特性之一就是可移植性，例如 C/C++ 既可以编译成 x86 机器可运行的格式，也可以编译到 ARM 上面跑，而我们的 Wasm 运行时和 ARM，x86_32 其实是同类东西，可以认为它是一台虚拟的机器，支持执行某种字节码，这一点其实和 Java 非常像，实际上 C/C++ 也可以编译到 JVM 上运行（参考：<a href="https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/4221605/compiling-c-for-the-jvm" class=" wrap external" target="_blank" rel="nofollow noreferrer">compiling-c-for-the-jvm</a>）。</p><h3>各种 runtime 以及 WASI</h3><p>再啰嗦一下各种环境中运行 Wasm 的事，上面说了 Wasm 是设计为可以在 web 中运行的程序，其实 Wasm 最初设计是为了弥补 js 执行效率的问题，但是发展到后面发现，这玩意儿当虚拟机来移植各种程序也是很赞的，于是有了 nodejs 环境，Wasmer 环境，甚至还有内核环境。</p><p>这么多环境就有一个问题了：各个环境支持的接口不一致。比如 nodejs 支持读写文件，但浏览器不支持，这挑战了 Wasm 的可移植性，于是 WASI (WebAssembly System Interface) 应运而生，它定义了一套底层接口规范，只要编译器和 Wasm 运行环境都支持这套规范，那么编译器生成的 Wasm 就可以在各种环境中无缝移植。如果用现有的概念来类比，Wasm runtime 相当于一台虚拟的机器，Wasm 就是这台机器的可执行程序，而 WASI 是运行在这台机器上的系统，它为 Wasm 提供底层接口（如文件操作，socket 等）。</p><p>Example or  Hello World？</p><p>程序员对 Hello World 有天生的好感，为了更好的说明 Wasm 和 WASI 是啥，我们这里用一个 Wasm 的 Hello World 来介绍（例程来源：<a href="https://link.zhihu.com/?target=https%3A//talks.godoc.org/github.com/chai2010/awesome-go-zh/chai2010/chai2010-golang-wasm.slide%2327" class=" wrap external" target="_blank" rel="nofollow noreferrer">chai2010-golang-wasm.slide#27</a>）：</p><div class="highlight"><pre><code class="language-text">(module
    ;; type iov struct { iov_base, iov_len int32 }
    ;; func fd_write(id *iov, iovs_len int32, nwritten *int32) (written int32)
    (import &#34;wasi_unstable&#34; &#34;fd_write&#34; (func $fd_write (param i32 i32 i32 i32) (result i32)))

    (memory 1)(export &#34;memory&#34; (memory 0))

    ;; The first 8 bytes are reserved for the iov array, starting with address 8
    (data (i32.const 8) &#34;hello world\n&#34;)

    ;; _start is similar to main function, will be executed automatically
    (func $main (export &#34;_start&#34;)
        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - The string address is 8
        (i32.store (i32.const 4) (i32.const 12)) ;; iov.iov_len  - String length

        (call $fd_write
            (i32.const 1)  ;; 1 is stdout
            (i32.const 0)  ;; *iovs - The first 8 bytes are reserved for the iov array
            (i32.const 1)  ;; len(iovs) - Only 1 string
            (i32.const 20) ;; nwritten - Pointer, inside is the length of the data to be written
        )
        drop ;; Ignore return value
    )
)</code></pre></div><p>具体指令的解释可以参考 <a href="https://link.zhihu.com/?target=https%3A//pengowray.github.io/wasm-ops/html/wasm-opcodes.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">这里</a>。</p><p>这里的 test.wat 是 Wasm 的文本表示，wat 之于 Wasm 的关系类似于汇编和 ELF 的关系。</p><p>然后我们把 wat 编译为 Wasm 并且使用 Wasmer（一个通用的 Wasm 运行时实现）运行：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-6bcb924ca994346dae73ceda6dd29c4f_b.jpg" data-size="normal" data-rawwidth="487" data-rawheight="91" class="origin_image zh-lightbox-thumb" width="487" data-original="https://pic4.zhimg.com/v2-6bcb924ca994346dae73ceda6dd29c4f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-6bcb924ca994346dae73ceda6dd29c4f_b.jpg" data-size="normal" data-rawwidth="487" data-rawheight="91" class="origin_image zh-lightbox-thumb lazy" width="487" data-original="https://pic4.zhimg.com/v2-6bcb924ca994346dae73ceda6dd29c4f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-6bcb924ca994346dae73ceda6dd29c4f_b.jpg"/><figcaption>图 3 Hello World</figcaption></figure><h2>改造工作</h2><p>恐惧来自未知，有了背景知识动起手来才无所畏惧，现在可以开启 TiDB 的浏览器之旅。</p><h3>浏览器安全限制</h3><p>我们知道，浏览器本质是一个沙盒，是不会让内部的程序做一些危险的事情的，比如监听端口，读写文件。而 TiDB 的使用场景实际是用户启动一个客户端通过 MySQL 协议连接到 TiDB，这要求 TiDB 必须监听某个端口。</p><p><b>考虑片刻之后，我们认为即便克服了浏览器沙盒这个障碍，真让用户用 MySQL 客户端去连浏览器也并不是一个优雅的事情，我们希望的是用户在页面上可以有一个开箱即用的 MySQL 终端，它已经连接好了 TiDB。</b></p><p>于是我们第一件事是给 TiDB 集成一个终端，让它启动后直接弹出这个终端接受用户输入 SQL。所以我们需要在 TiDB 的代码中找到一个工具，它的输入是一串 SQL，输出是 SQL 的执行结果，写一个这样的东西对于我们几个没接触过 TiDB 代码的人来说还是有些难度，于是我们想到了一个捷径：TiDB 的测试代码中肯定会有输入 SQL 然后检查输出的测试。那么把这种测试搬过来改一改不就是我们想要的东西嘛？然后我们翻了翻 TiDB 的测试代码，发现了大量的这样的用法：</p><div class="highlight"><pre><code class="language-text">result = tk.MustQuery(&#34;select count(*) from t group by d order by c&#34;)
result.Check(testkit.Rows(&#34;3&#34;, &#34;2&#34;, &#34;2&#34;))</code></pre></div><p>所以我们只需要看看这个 <code>tk</code> 是个什么东西，借来用一下就行了。这是 <code>tk</code> 的主要函数：</p><div class="highlight"><pre><code class="language-text">// Exec executes a sql statement.
func (tk *TestKit) Exec(sql string, args ...interface{}) (sqlexec.RecordSet, error) {
    var err error
    if tk.Se == nil {
        tk.Se, err = session.CreateSession4Test(tk.store)
        tk.c.Assert(err, check.IsNil)
        id := atomic.AddUint64(&amp;connectionID, 1)
        tk.Se.SetConnectionID(id)
    }
    ctx := context.Background()
    if len(args) == 0 {
        var rss []sqlexec.RecordSet
        rss, err = tk.Se.Execute(ctx, sql)
        if err == nil &amp;&amp; len(rss) &gt; 0 {
            return rss[0], nil
        }
        return nil, errors.Trace(err)
    }
    stmtID, _, _, err := tk.Se.PrepareStmt(sql)
    if err != nil {
        return nil, errors.Trace(err)
    }
    params := make([]types.Datum, len(args))
    for i := 0; i &lt; len(params); i++ {
        params[i] = types.NewDatum(args[i])
    }
    rs, err := tk.Se.ExecutePreparedStmt(ctx, stmtID, params)
    if err != nil {
        return nil, errors.Trace(err)
    }
    err = tk.Se.DropPreparedStmt(stmtID)
    if err != nil {
        return nil, errors.Trace(err)
    }
    return rs, nil
}</code></pre></div><p>剩下的事情就非常简单了，写一个 Read-Eval-Print-Loop (REPL)  读取用户输入，将输入交给上面的 Exec，再将 Exec 的输出格式化到标准输出，然后循环继续读取用户输入。</p><h3>编译问题</h3><p><b>集成一个终端只是迈出了第一步，我们现在需要验证一个非常关键的问题：TiDB 能不能编译到 Wasm，虽然 TiDB 是 Golang 写的，但是中间引用的第三方库没准哪个写了平台相关的代码就没法直接编译了</b>。</p><p>我们先按照 <a href="https://link.zhihu.com/?target=https%3A//github.com/golang/go/wiki/WebAssembly%23getting-started" class=" wrap external" target="_blank" rel="nofollow noreferrer">Golang 官方文档</a> 编译：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-8d8afa3b0292b47b2464dd05012151e7_b.jpg" data-size="normal" data-rawwidth="931" data-rawheight="179" class="origin_image zh-lightbox-thumb" width="931" data-original="https://pic4.zhimg.com/v2-8d8afa3b0292b47b2464dd05012151e7_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-8d8afa3b0292b47b2464dd05012151e7_b.jpg" data-size="normal" data-rawwidth="931" data-rawheight="179" class="origin_image zh-lightbox-thumb lazy" width="931" data-original="https://pic4.zhimg.com/v2-8d8afa3b0292b47b2464dd05012151e7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-8d8afa3b0292b47b2464dd05012151e7_b.jpg"/><figcaption>图 4 按照 Golang 官方文档编译（1/2）</figcaption></figure><p>果然出师不利，查看 goleveldb 的代码发现，storage 包下面的代码针对不同平台有各自的实现，唯独没有 Wasm/js 的：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-233579f3644d7f6fe84b5a9f7372e7a3_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="229" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic4.zhimg.com/v2-233579f3644d7f6fe84b5a9f7372e7a3_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-233579f3644d7f6fe84b5a9f7372e7a3_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="229" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic4.zhimg.com/v2-233579f3644d7f6fe84b5a9f7372e7a3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-233579f3644d7f6fe84b5a9f7372e7a3_b.jpg"/><figcaption>图 5 按照 Golang 官方文档编译（2/2）</figcaption></figure><p>所以在 Wasm/js 环境下编译找不到一些函数。所以这里的方案就是添加一个 <code>file_storage_js.go</code>，然后给这些函数一个 unimplemented 的实现：</p><div class="highlight"><pre><code class="language-text">package storage

import (
	&#34;os&#34;
	&#34;syscall&#34;
)

func newFileLock(path string, readOnly bool) (fl fileLock, err error) {
	return nil, syscall.ENOTSUP
}

func setFileLock(f *os.File, readOnly, lock bool) error {
	return syscall.ENOTSUP
}

func rename(oldpath, newpath string) error {
	return syscall.ENOTSUP
}

func isErrInvalid(err error) bool {
	return false
}

func syncDir(name string) error {
	return syscall.ENOTSUP
}</code></pre></div><p>然后再次编译：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-31d4ec0f360aea32700c9b4db086bacc_b.png" data-size="normal" data-rawwidth="939" data-rawheight="143" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-31d4ec0f360aea32700c9b4db086bacc_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-31d4ec0f360aea32700c9b4db086bacc_b.png" data-size="normal" data-rawwidth="939" data-rawheight="143" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-31d4ec0f360aea32700c9b4db086bacc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-31d4ec0f360aea32700c9b4db086bacc_b.png"/><figcaption>图 6 再次编译的结果</figcaption></figure><p>emm… 编译的时候没有函数可以说这个函数没有 Wasm/js 对应的版本，没有 body 是个什么情况？好在我们有代码可以看，到 <code>arith_decl.go</code> 所在的目录看一下就知道怎么回事了：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-47e492f0072a80d3827f945bf8ce0bf2_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="306" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic3.zhimg.com/v2-47e492f0072a80d3827f945bf8ce0bf2_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-47e492f0072a80d3827f945bf8ce0bf2_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="306" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic3.zhimg.com/v2-47e492f0072a80d3827f945bf8ce0bf2_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-47e492f0072a80d3827f945bf8ce0bf2_b.jpg"/><figcaption>图 7 查看目录</figcaption></figure><p>然后 <code>arith_decl.go</code> 的内容是一些列的函数声明，但是具体的实现放到了上面的各个平台相关的汇编文件中了。</p><p>看起来还是和刚刚一样的情况，我们只需要为 Wasm 实现一套这些函数就可以了。但这里有个问题是，这是一个代码不受我们控制的第三方库，并且 TiDB 不直接依赖这个库，而是依赖了一个叫 <code>mathutil</code> 的库，然后 <code>mathutil</code> 依赖这个 <code>bigfft</code>。悲催的是，这个 <code>mathutil</code> 的代码也不受我们控制，因此很直观的想到了两种方案：</p><ol><li>给这两个库的作者提 PR，让他们支持 Wasm。</li><li>我们将这两个库 clone 过来改掉，然后把 TiDB 依赖改到我们 clone 过来的库上。</li></ol><p>方案一的问题很明显，整个周期较长，等作者接受 PR 了我们的 Hackathon 都凉凉了（而且还不一定会接受）；方案二的问题也不小，这会导致我们和上游脱钩。那么有没有第三种方案呢，即在编译 Wasm 的时候不依赖这两个库，在编译正常的二进制文件的时候又用这两个库？经过搜索发现，我们很多代码都用到了 <code>mathutil</code>，但是基本上只用了几个函数：<code>MinUint64</code>，<code>MaxUint64</code>，<code>MinInt32</code>，<code>MaxInt32</code> 等等，我们想到的方案是：</p><ol><li>新建一个 <code>mathutil</code> 目录，在这个目录里建立 <code>mathutil_linux.go</code> 和 <code>mathutil_js.go</code>。</li><li>在 <code>mathutil_linux.go</code> 中 reexport 第三方包的几个函数。</li><li>在 <code>mathutil_js.go</code> 中自己实现这几个函数，不依赖第三方包。</li><li>将所有对第三方的依赖改到 <code>mathutil</code> 目录上。</li></ol><p>这样，<code>mathutil</code> 目录对外提供了原来 <code>mathutil</code> 包的函数，同时整个项目只有 <code>mathutil</code> 目录引入了这个不兼容 Wasm 的第三方包，并且只在 <code>mathutil_linux.go</code> 中引入（<code>mathutil_js.go</code> 是自己实现的），因此编译 Wasm 的时候就不会再用到 <code>mathutil</code> 这个包。</p><p>再次编译，成功了！</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-4a01c0041a64b01434647b456e581fe4_b.png" data-size="normal" data-rawwidth="939" data-rawheight="114" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-4a01c0041a64b01434647b456e581fe4_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-4a01c0041a64b01434647b456e581fe4_b.png" data-size="normal" data-rawwidth="939" data-rawheight="114" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-4a01c0041a64b01434647b456e581fe4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-4a01c0041a64b01434647b456e581fe4_b.png"/><figcaption>图 8 编译成功</figcaption></figure><h3>兼容性问题</h3><p>编译出 main.Wasm 按照 Golang 的 Wasm 文档跑一下，由于目前是直接通过 os.Stdin 读用户输入的 SQL，通过 os.Stdout 输出结果，所以理论上页面上会是空白的（我们还没有操作 dom），但是由于 TiDB 的日志会打向 os.Stdout，所以在浏览器的控制台上应该能看到 TiDB 正常启动的日志才对。然而很遗憾看到的是异常栈：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-c8099d27bb0441dc7c2ba7d4420398df_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="287" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic4.zhimg.com/v2-c8099d27bb0441dc7c2ba7d4420398df_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-c8099d27bb0441dc7c2ba7d4420398df_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="287" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic4.zhimg.com/v2-c8099d27bb0441dc7c2ba7d4420398df_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-c8099d27bb0441dc7c2ba7d4420398df_b.jpg"/><figcaption>图 9 异常栈</figcaption></figure><p>可以看到这个错是运行时没实现 os.stat 操作，这是因为目前的 Golang 没有很好的支持 WASI，它仅在 <code>wasm_exec.js</code> 中 mock 了一个 <code>fs</code>:</p><div class="highlight"><pre><code class="language-text">global.fs = {
        writeSync(fd, buf) {
                ...
        },
        write(fd, buf, offset, length, position, callback) {
                ...
        },
        open(path, flags, mode, callback) {
                ...
        },
        ...
}</code></pre></div><p>而且这个 mock 的 <code>fs</code> 并没有实现 <code>stat</code>, <code>lstat</code>, <code>unlink</code>, <code>mkdir</code> 之类的调用，那么解决方案就是我们在启动之前在全局的 <code>fs</code> 对象上 mock 一下这几个函数：</p><div class="highlight"><pre><code class="language-text">function unimplemented(callback) {
    const err = new Error(&#34;not implemented&#34;);
    err.code = &#34;ENOSYS&#34;;
    callback(err);
}
function unimplemented1(_1, callback) { unimplemented(callback); }
function unimplemented2(_1, _2, callback) { unimplemented(callback); }

fs.stat = unimplemented1;
fs.lstat = unimplemented1;
fs.unlink = unimplemented1;
fs.rmdir = unimplemented1;
fs.mkdir = unimplemented2;
go.run(result.instance);</code></pre></div><p>然后再刷新页面，在控制台上出现了久违的日志：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-f00a297031deaa064d8ea5877981867a_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="418" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic3.zhimg.com/v2-f00a297031deaa064d8ea5877981867a_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-f00a297031deaa064d8ea5877981867a_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="418" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic3.zhimg.com/v2-f00a297031deaa064d8ea5877981867a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-f00a297031deaa064d8ea5877981867a_b.jpg"/><figcaption>图 10 日志信息</figcaption></figure><p>到目前为止就已经解决了 TiDB 编译到 Wasm 的所有技术问题，剩下的工作就是找一个合适的能运行在浏览器里的 SQL 终端替换掉前面写的终端，和 TiDB 对接上就能让用户在页面上输入 SQL 并运行起来了。</p><h3>用户接口</h3><p>通过上面的工作，我们现在有了一个 Exec 函数，它接受 SQL 字符串，输出 SQL 执行结果，并且它可以在浏览器里运行，我们还需要一个浏览器版本 SQL 终端和这个函数交互，两种方案：</p><ol><li>使用 Golang 直接操作 dom 来实现这个终端。</li><li>在 Golang 中把 Exec 暴露到全局，然后找一个现成的 js 版本的终端和这个全局的 Exec 对接。</li></ol><p>对于前端小白的我们来说，第二种方式成本最低，我们很快找到了 jquery.console.js 这个库，它只需要传入一个 SQL 处理的 callback 即可运行，而我们的 Exec 简直就是为这个 callback 量身打造的。</p><p>因此我们第一步工作就是把 Exec 挂到浏览器的 window 上（暴露到全局给 js 调用）：</p><div class="highlight"><pre><code class="language-text">js.Global().Set(&#34;executeSQL&#34;, js.FuncOf(func(this js.Value, args []js.Value) interface{} {
    go func() {
	    // Simplified code
	    sql := args[0].String()
	    args[1].Invoke(k.Exec(sql))
    }()
    return nil
}))</code></pre></div><p>这样就能在浏览器的控制台运行 SQL 了：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-b62d23bae548c4c621d453578b5c60dd_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="333" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic2.zhimg.com/v2-b62d23bae548c4c621d453578b5c60dd_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-b62d23bae548c4c621d453578b5c60dd_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="333" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic2.zhimg.com/v2-b62d23bae548c4c621d453578b5c60dd_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-b62d23bae548c4c621d453578b5c60dd_b.jpg"/><figcaption>图 11 在浏览器控制台运行 SQL</figcaption></figure><p>然后将用 jquery.console.js 搭建一个 SQL 终端，再将 executeSQL 作为 callback 传入，大功告成：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-0c65deaa8ca33079a52a2f3e55b63023_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="406" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic4.zhimg.com/v2-0c65deaa8ca33079a52a2f3e55b63023_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-0c65deaa8ca33079a52a2f3e55b63023_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="406" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic4.zhimg.com/v2-0c65deaa8ca33079a52a2f3e55b63023_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-0c65deaa8ca33079a52a2f3e55b63023_b.jpg"/><figcaption>图 12 搭建 SQL 终端</figcaption></figure><p>现在算是有一个能运行的版本了。</p><h3>本地文件访问</h3><p>还有一点点小麻烦要解决，那就是 TiDB 的 load stats 和 load data 功能。load data 语法和功能详解可以参考 <a href="https://link.zhihu.com/?target=https%3A//pingcap.com/docs-cn/v3.0/reference/sql/statements/load-data/" class=" wrap external" target="_blank" rel="nofollow noreferrer">TiDB 官方文档</a>，其功能简单的说就是用户指定一个文件路径，然后客户端将这个文件内容传给 TiDB，TiDB 将其加载到指定的表里。我们的问题在于，浏览器中是不能读取用户电脑上的文件的，于是我们只好在用户执行这个语句的时候打开浏览器的文件上传窗口，让用户主动选择一个这样的文件传给 TiDB：</p><div class="highlight"><pre><code class="language-text">js.Global().Get(&#34;upload&#34;).Invoke(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
    go func() {
        fileContent := args[0].String()
        _, e := doSomething(fileContent)
        c &lt;- e
    }()
    return nil
}), js.FuncOf(func(this js.Value, args []js.Value) interface{} {
    go func() {
        c &lt;- errors.New(args[0].String())
    }()
    return nil
}))</code></pre></div><p>load stats 的实现也是同理。</p><p><b>此外，我们还使用同样的原理 “自作主张” 加入了一个新的指令：source，用户执行这个命令可以上传一个 SQL 文件，然后我们会执行这个文件里的语句。我们认为这个功能的主要使用场景是：用户初次接触 TiDB 时，想验证其对 MySQL 的兼容性，但是一条一条输入 SQL 效率太低了，于是可以将所有用户业务中用到的 SQL 组织到一个 SQL 文件中（使用脚本或其他自动化工具），然后在页面上执行 source 导入这个文件，验证结果。</b></p><p>以一个 test.sql 文件为例，展示下 source 命令的效果，test.sql 文件内容如下：</p><div class="highlight"><pre><code class="language-text">CREATE DATABASE IF NOT EXISTS samp_db;

USE samp_db;

CREATE TABLE IF NOT EXISTS person (
      number INT(11),
      name VARCHAR(255),
      birthday DATE
);

CREATE INDEX person_num ON person (number);

INSERT INTO person VALUES(&#34;1&#34;,&#34;tom&#34;,&#34;20170912&#34;);

UPDATE person SET birthday=&#39;20171010&#39; WHERE name=&#39;tom&#39;;</code></pre></div><p>source 命令执行之后弹出文件选择框：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-a6f1998b31d343294a27433da256f08d_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="412" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic2.zhimg.com/v2-a6f1998b31d343294a27433da256f08d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-a6f1998b31d343294a27433da256f08d_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="412" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic2.zhimg.com/v2-a6f1998b31d343294a27433da256f08d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-a6f1998b31d343294a27433da256f08d_b.jpg"/><figcaption>图 13 source 命令执行（1/2）</figcaption></figure><p>选中 SQL 文件上传后自动执行，可以对数据库进行相应的修改：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-dccd5b202f1dc8ea31e76b3a693b253c_b.jpg" data-size="normal" data-rawwidth="937" data-rawheight="406" class="origin_image zh-lightbox-thumb" width="937" data-original="https://pic1.zhimg.com/v2-dccd5b202f1dc8ea31e76b3a693b253c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-dccd5b202f1dc8ea31e76b3a693b253c_b.jpg" data-size="normal" data-rawwidth="937" data-rawheight="406" class="origin_image zh-lightbox-thumb lazy" width="937" data-original="https://pic1.zhimg.com/v2-dccd5b202f1dc8ea31e76b3a693b253c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-dccd5b202f1dc8ea31e76b3a693b253c_b.jpg"/><figcaption>图 14 source 命令执行（2/2）</figcaption></figure><h2>总结与展望</h2><p>总的来说，这次 Hackathon 为了移植 TiDB 我们主要解决了几个问题：</p><ol><li>浏览器中无法监听端口，我们给 TiDB 嵌入了一个 SQL 终端。</li><li>goleveldb 对 Wasm 的兼容问题。</li><li>bigfft 的 Wasm 兼容问题。</li><li>Golang 自身对 WASI 支持不完善导致的 fs 相关函数缺失。</li><li>TiDB 对本地文件加载转换为浏览器上传文件方式加载。</li><li>支持 source 命令批量执行 SQL。</li></ol><p><b>目前而言我们已经将这个项目作为 TiDB Playground (<a href="https://link.zhihu.com/?target=https%3A//play.pingcap.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">play.pingcap.com/</span><span class="invisible"></span></a>) 和 TiDB Tour (<a href="https://link.zhihu.com/?target=https%3A//tour.pingcap.com/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">tour.pingcap.com/</span><span class="invisible"></span></a>) 开放给用户使用。由于它不需要用户安装配置就能让用户在阅读文档的同时进行尝试，很大程度上降低了用户学习使用 TiDB 的成本，社区有小伙伴已经基于这些自己做数据库教程了，譬如：<a href="https://link.zhihu.com/?target=https%3A//github.com/imiskolee/tidb-wasm-markdown" class=" wrap external" target="_blank" rel="nofollow noreferrer">imiskolee/tidb-wasm-markdown</a>（<a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/0Vo4apK4VdBfOs0-KyWXZA" class=" wrap external" target="_blank" rel="nofollow noreferrer">相关介绍文章</a>）。</b></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-87223b57c3becda6170a7b2751fcf8a0_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="397" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-87223b57c3becda6170a7b2751fcf8a0_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-87223b57c3becda6170a7b2751fcf8a0_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="397" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-87223b57c3becda6170a7b2751fcf8a0_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-87223b57c3becda6170a7b2751fcf8a0_b.jpg"/><figcaption>图 15 TiDB Playground</figcaption></figure><p>由于 Hackathon 时间比较紧张，其实很多想做的东西还没实现，比如：</p><ol><li>使用 indexedDB 让数据持久化：需要针对 indexedDB 实现一套 Storage 的 interface。</li><li>使用 P2P 技术（如 webrtc）对其他浏览器提供服务：未来必定会有越来越多的应用迁移到 Wasm，而很多应用是需要数据库的，TiDB-Wasm 恰好可以扮演这样的角色。</li><li>给 TiDB 的 Wasm 二进制文件瘦身：目前编译出来的二进制文件有将近 80M，对浏览器不太友好，同时运行时占用内存也比较多。</li></ol><p>欢迎更多感兴趣的社区小伙伴们加入进来，一起在这个项目上愉快的玩耍（<a href="https://link.zhihu.com/?target=https%3A//github.com/pingcap/tidb/projects/27" class=" wrap external" target="_blank" rel="nofollow noreferrer">github.com/pingcap/tidb/projects/27</a>），也可以通过 <a href="mailto:info@pingcap.com">info@pingcap.com</a> 联系我们。</p><p><b>阅读原文：</b></p><a href="https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/tidb-wasm-introduction/" data-draft-node="block" data-draft-type="link-card" data-image="https://pic2.zhimg.com/v2-60ab5bd867c2434d70c957a02a2169e1_ipico.jpg" data-image-width="1200" data-image-height="1200" class=" wrap external" target="_blank" rel="nofollow noreferrer">TiDB-Wasm 原理与实现 | Hackathon 优秀项目介绍 | PingCAP</a><p></p>