<div class="title-image"><img src="https://pic1.zhimg.com/v2-c6ec0fd9540b58574815f4d53d701008_b.jpg" alt=""></div><p>作者：Roshan        编辑：1+1=6</p><h2><b><u><i>0、</i></u>前言</b></h2><p>在交易中的机器学习模型通常针对历史股价和其他定量数据进行训练，以预测未来股价。然而，自然语言处理（NLP）可以帮助我们分析财务报表，如10-k表，以预测股票走势。10-k表是公司提交的年度报告，提供对其财务业绩的全面总结（这些报告是由证券交易委员会授权的）。对投资者来说，梳理这些报告常常是冗长乏味的。通过情绪分析（自然语言处理的一个子领域），投资者可以迅速了解报告的语气是积极的、消极等等。在10-k表中表达的整体情绪可以用来帮助投资者决定他们是否应该投资该公司。</p><h2><b><u><i>1、</i></u>NLP简介</b></h2><p>自然语言处理是人工智能的一个分支，它教会计算机阅读并从语言中获得意义。由于语言是如此复杂，计算机在理解文本之前必须经过一系列的步骤。下面是对典型 NLP pipeline中步骤的快速解释。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-4aa6aeda06b3f776530672c1a44e9853_b.png" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="167" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-4aa6aeda06b3f776530672c1a44e9853_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-4aa6aeda06b3f776530672c1a44e9853_b.png" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="167" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic4.zhimg.com/v2-4aa6aeda06b3f776530672c1a44e9853_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-4aa6aeda06b3f776530672c1a44e9853_b.png"/></figure><p>在完成这些步骤之后，我们的文本就可以进行分析了。现在我们开始研究吧！</p><p>关于NLP的知识，这里我们不过多讲述，大家可以上网进行学习！</p><h2><b><u><i>2、</i></u>正文</b></h2><p>首先导入相关库文件：</p><div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">nltk</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">pprint</span>
<span class="kn">import</span> <span class="nn">project_helper</span>

<span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span></code></pre></div><p>project helper库包含各种图形函数：</p><div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">requests</span>

<span class="kn">from</span> <span class="nn">ratelimit</span> <span class="kn">import</span> <span class="n">limits</span><span class="p">,</span> <span class="n">sleep_and_retry</span>


<span class="k">class</span> <span class="nc">SecAPI</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">SEC_CALL_LIMIT</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;calls&#39;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;seconds&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>

    <span class="nd">@staticmethod</span>
    <span class="nd">@sleep_and_retry</span>
    <span class="c1"># Dividing the call limit by half to avoid coming close to the limit</span>
    <span class="nd">@limits</span><span class="p">(</span><span class="n">calls</span><span class="o">=</span><span class="n">SEC_CALL_LIMIT</span><span class="p">[</span><span class="s1">&#39;calls&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="n">SEC_CALL_LIMIT</span><span class="p">[</span><span class="s1">&#39;seconds&#39;</span><span class="p">])</span>
    <span class="k">def</span> <span class="nf">_call_sec</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_call_sec</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>


<span class="k">def</span> <span class="nf">print_ten_k_data</span><span class="p">(</span><span class="n">ten_k_data</span><span class="p">,</span> <span class="n">fields</span><span class="p">,</span> <span class="n">field_length_limit</span><span class="o">=</span><span class="mi">50</span><span class="p">):</span>
    <span class="n">indentation</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span>

    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;[&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">ten_k</span> <span class="ow">in</span> <span class="n">ten_k_data</span><span class="p">:</span>
        <span class="n">print_statement</span> <span class="o">=</span> <span class="s1">&#39;{}{{&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">indentation</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">:</span>
            <span class="n">value</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">ten_k</span><span class="p">[</span><span class="n">field</span><span class="p">])</span>

            <span class="c1"># Show return lines in output</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="n">value_str</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="se">\&#39;</span><span class="s1">{}</span><span class="se">\&#39;</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">value</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\\</span><span class="s1">n&#39;</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">value_str</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>

            <span class="c1"># Cut off the string if it gets too long</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">value_str</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">field_length_limit</span><span class="p">:</span>
                <span class="n">value_str</span> <span class="o">=</span> <span class="n">value_str</span><span class="p">[:</span><span class="n">field_length_limit</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;...&#39;</span>

            <span class="n">print_statement</span> <span class="o">+=</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">{}{}: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">indentation</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">value_str</span><span class="p">)</span>

        <span class="n">print_statement</span> <span class="o">+=</span> <span class="s1">&#39;},&#39;</span>
        <span class="k">print</span><span class="p">(</span><span class="n">print_statement</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;]&#39;</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">plot_similarities</span><span class="p">(</span><span class="n">similarities_list</span><span class="p">,</span> <span class="n">dates</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">similarities_list</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">similarities</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">similarities_list</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">dates</span><span class="p">,</span> <span class="n">similarities</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">label</span><span class="p">)</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
        <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></code></pre></div><p>然后下载了用于删除stopwords的stopwords语料库和用于lemmatizing的wordnet语料库。</p><div class="highlight"><pre><code class="language-python"><span class="n">nltk</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="s1">&#39;stopwords&#39;</span><span class="p">)</span>
<span class="n">nltk</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="s1">&#39;wordnet&#39;</span><span class="p">)</span></code></pre></div><h2><b><u><i>3、</i></u>10-k介绍</b></h2><p>10-k文件包括公司历史、组织结构、高管薪酬、股权、子公司和审计财务报表等信息。为了查找10-k 文档，我们使用每个公司唯一的 CIK (中央索引键)。</p><div class="highlight"><pre><code class="language-python"><span class="n">cik_lookup</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;AMZN&#39;</span><span class="p">:</span> <span class="s1">&#39;0001018724&#39;</span><span class="p">,</span>
    <span class="s1">&#39;BMY&#39;</span><span class="p">:</span> <span class="s1">&#39;0000014272&#39;</span><span class="p">,</span>
    <span class="s1">&#39;CNP&#39;</span><span class="p">:</span> <span class="s1">&#39;0001130310&#39;</span><span class="p">,</span>
    <span class="s1">&#39;CVX&#39;</span><span class="p">:</span> <span class="s1">&#39;0000093410&#39;</span><span class="p">,</span>
    <span class="s1">&#39;FL&#39;</span><span class="p">:</span> <span class="s1">&#39;0000850209&#39;</span><span class="p">,</span>
    <span class="s1">&#39;FRT&#39;</span><span class="p">:</span> <span class="s1">&#39;0000034903&#39;</span><span class="p">,</span>
    <span class="s1">&#39;HON&#39;</span><span class="p">:</span> <span class="s1">&#39;0000773840&#39;</span><span class="p">}</span></code></pre></div><p>我们从美国证券交易委员会获取一个10-k文件列表，并以亚马逊为例进行研究展示。</p><div class="highlight"><pre><code class="language-python"><span class="n">sec_api</span> <span class="o">=</span> <span class="n">project_helper</span><span class="o">.</span><span class="n">SecAPI</span><span class="p">()</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="k">def</span> <span class="nf">get_sec_data</span><span class="p">(</span><span class="n">cik</span><span class="p">,</span> <span class="n">doc_type</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
    <span class="n">rss_url</span> <span class="o">=</span> <span class="s1">&#39;https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&#39;</span> \
        <span class="s1">&#39;&amp;CIK={}&amp;type={}&amp;start={}&amp;count={}&amp;owner=exclude&amp;output=atom&#39;</span> \
        <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cik</span><span class="p">,</span> <span class="n">doc_type</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
    <span class="n">sec_data</span> <span class="o">=</span> <span class="n">sec_api</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">rss_url</span><span class="p">)</span>
    <span class="n">feed</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">sec_data</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;ascii&#39;</span><span class="p">),</span> <span class="s1">&#39;xml&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">feed</span>
    <span class="n">entries</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span>
            <span class="n">entry</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;filing-href&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">getText</span><span class="p">(),</span>
            <span class="n">entry</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;filing-type&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">getText</span><span class="p">(),</span>
            <span class="n">entry</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;filing-date&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">getText</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">feed</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s1">&#39;entry&#39;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">False</span><span class="p">)]</span>
<span class="k">return</span> <span class="n">entries</span>
<span class="n">example_ticker</span> <span class="o">=</span> <span class="s1">&#39;AMZN&#39;</span>
<span class="n">sec_data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">cik</span> <span class="ow">in</span> <span class="n">cik_lookup</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">sec_data</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_sec_data</span><span class="p">(</span><span class="n">cik</span><span class="p">,</span> <span class="s1">&#39;10-K&#39;</span><span class="p">)</span>
<span class="n">pprint</span><span class="o">.</span><span class="n">pprint</span><span class="p">(</span><span class="n">sec_data</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">][:</span><span class="mi">5</span><span class="p">])</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-208d5dfdf515c4716dbf0dae3570c0b6_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="368" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic3.zhimg.com/v2-208d5dfdf515c4716dbf0dae3570c0b6_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-208d5dfdf515c4716dbf0dae3570c0b6_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="368" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic3.zhimg.com/v2-208d5dfdf515c4716dbf0dae3570c0b6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-208d5dfdf515c4716dbf0dae3570c0b6_b.jpg"/></figure><p>我们收到一个url列表，指向包含与每个填充相关的元数据的文件。元数据与我们无关，所以我们通过用填充url替换url来获取填充。让我们使用 tqdm查看下载进度，并查看一个示例文档。</p><div class="highlight"><pre><code class="language-python"><span class="n">raw_fillings_by_ticker</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">sec_data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">raw_fillings_by_ticker</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">index_url</span><span class="p">,</span> <span class="n">file_type</span><span class="p">,</span> <span class="n">file_date</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="s1">&#39;Downloading {} Fillings&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ticker</span><span class="p">),</span> <span class="n">unit</span><span class="o">=</span><span class="s1">&#39;filling&#39;</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;10-K&#39;</span><span class="p">):</span>
            <span class="n">file_url</span> <span class="o">=</span> <span class="n">index_url</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;-index.htm&#39;</span><span class="p">,</span> <span class="s1">&#39;.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;.txtl&#39;</span><span class="p">,</span> <span class="s1">&#39;.txt&#39;</span><span class="p">)</span>
            
            <span class="n">raw_fillings_by_ticker</span><span class="p">[</span><span class="n">ticker</span><span class="p">][</span><span class="n">file_date</span><span class="p">]</span> <span class="o">=</span> <span class="n">sec_api</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">file_url</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Example Document:</span><span class="se">\n\n</span><span class="s1">{}...&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">raw_fillings_by_ticker</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">()))[:</span><span class="mi">1000</span><span class="p">]))</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-998962d6d870eb232e59356e3778d105_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="205" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic2.zhimg.com/v2-998962d6d870eb232e59356e3778d105_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-998962d6d870eb232e59356e3778d105_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="205" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic2.zhimg.com/v2-998962d6d870eb232e59356e3778d105_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-998962d6d870eb232e59356e3778d105_b.jpg"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-b916d9aff3ce1c68b676fbd0f63d4d80_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="1145" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-b916d9aff3ce1c68b676fbd0f63d4d80_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-b916d9aff3ce1c68b676fbd0f63d4d80_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="1145" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic1.zhimg.com/v2-b916d9aff3ce1c68b676fbd0f63d4d80_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-b916d9aff3ce1c68b676fbd0f63d4d80_b.jpg"/></figure><p>将下载的文件分解为相关的文档，这些文档在填充物中以&lt;document&gt;开头，&lt;/document&gt;结尾。</p><div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">re</span>
<span class="k">def</span> <span class="nf">get_documents</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">extracted_docs</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="n">doc_start_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;&lt;DOCUMENT&gt;&#39;</span><span class="p">)</span>
    <span class="n">doc_end_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;&lt;/DOCUMENT&gt;&#39;</span><span class="p">)</span>
    
    <span class="n">doc_start_is</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">end</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span>      <span class="n">doc_start_pattern</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="n">text</span><span class="p">)]</span>
    <span class="n">doc_end_is</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">doc_end_pattern</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="n">text</span><span class="p">)]</span>
    
    <span class="k">for</span> <span class="n">doc_start_i</span><span class="p">,</span> <span class="n">doc_end_i</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">doc_start_is</span><span class="p">,</span> <span class="n">doc_end_is</span><span class="p">):</span>
            <span class="n">extracted_docs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">doc_start_i</span><span class="p">:</span><span class="n">doc_end_i</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">extracted_docs</span>
<span class="n">filling_documents_by_ticker</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">raw_fillings</span> <span class="ow">in</span> <span class="n">raw_fillings_by_ticker</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">filling_documents_by_ticker</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">file_date</span><span class="p">,</span> <span class="n">filling</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">raw_fillings</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">desc</span><span class="o">=</span><span class="s1">&#39;Getting Documents from {} Fillings&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ticker</span><span class="p">),</span> <span class="n">unit</span><span class="o">=</span><span class="s1">&#39;filling&#39;</span><span class="p">):</span>
        <span class="n">filling_documents_by_ticker</span><span class="p">[</span><span class="n">ticker</span><span class="p">][</span><span class="n">file_date</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_documents</span><span class="p">(</span><span class="n">filling</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>
    <span class="s1">&#39;Document {} Filed on {}:</span><span class="se">\n</span><span class="s1">{}...&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">doc_i</span><span class="p">,</span> <span class="n">file_date</span><span class="p">,</span> <span class="n">doc</span><span class="p">[:</span><span class="mi">200</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">file_date</span><span class="p">,</span> <span class="n">docs</span> <span class="ow">in</span> <span class="n">filling_documents_by_ticker</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">]</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">doc_i</span><span class="p">,</span> <span class="n">doc</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">docs</span><span class="p">)][:</span><span class="mi">3</span><span class="p">]))</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-275acc2b594bf7becd1811f4a22bbc75_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="181" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic2.zhimg.com/v2-275acc2b594bf7becd1811f4a22bbc75_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-275acc2b594bf7becd1811f4a22bbc75_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="181" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic2.zhimg.com/v2-275acc2b594bf7becd1811f4a22bbc75_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-275acc2b594bf7becd1811f4a22bbc75_b.jpg"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-4a585186e2aed0bc7649ab3f1b308dc4_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="744" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-4a585186e2aed0bc7649ab3f1b308dc4_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-4a585186e2aed0bc7649ab3f1b308dc4_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="744" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic1.zhimg.com/v2-4a585186e2aed0bc7649ab3f1b308dc4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-4a585186e2aed0bc7649ab3f1b308dc4_b.jpg"/></figure><p>定义 get document type 函数以返回给定的文档类型。</p><div class="highlight"><pre><code class="language-python"><span class="k">def</span> <span class="nf">get_document_type</span><span class="p">(</span><span class="n">doc</span><span class="p">):</span>
    <span class="n">type_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;&lt;TYPE&gt;[^\n]+&#39;</span><span class="p">)</span>    
    <span class="n">doc_type</span> <span class="o">=</span> <span class="n">type_pattern</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">doc</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span><span class="nb">len</span><span class="p">(</span><span class="s1">&#39;&lt;TYPE&gt;&#39;</span><span class="p">):]</span>     
    <span class="k">return</span> <span class="n">doc_type</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span></code></pre></div><p>使用 get document type 函数从填充内容中过滤掉非10-k 文档。</p><div class="highlight"><pre><code class="language-python"><span class="n">ten_ks_by_ticker</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">filling_documents</span> <span class="ow">in</span> <span class="n">filling_documents_by_ticker</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">ten_ks_by_ticker</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">file_date</span><span class="p">,</span> <span class="n">documents</span> <span class="ow">in</span> <span class="n">filling_documents</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">document</span> <span class="ow">in</span> <span class="n">documents</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">get_document_type</span><span class="p">(</span><span class="n">document</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;10-k&#39;</span><span class="p">:</span>
                <span class="n">ten_ks_by_ticker</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">({</span>
                    <span class="s1">&#39;cik&#39;</span><span class="p">:</span> <span class="n">cik_lookup</span><span class="p">[</span><span class="n">ticker</span><span class="p">],</span>
                    <span class="s1">&#39;file&#39;</span><span class="p">:</span> <span class="n">document</span><span class="p">,</span>
                    <span class="s1">&#39;file_date&#39;</span><span class="p">:</span> <span class="n">file_date</span><span class="p">})</span>
<span class="n">project_helper</span><span class="o">.</span><span class="n">print_ten_k_data</span><span class="p">(</span><span class="n">ten_ks_by_ticker</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">][:</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;cik&#39;</span><span class="p">,</span> <span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="s1">&#39;file_date&#39;</span><span class="p">])</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-73e699c312a0097c057fef04f04eb340_b.jpg" data-caption="" data-size="normal" data-rawwidth="968" data-rawheight="758" class="origin_image zh-lightbox-thumb" width="968" data-original="https://pic1.zhimg.com/v2-73e699c312a0097c057fef04f04eb340_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-73e699c312a0097c057fef04f04eb340_b.jpg" data-caption="" data-size="normal" data-rawwidth="968" data-rawheight="758" class="origin_image zh-lightbox-thumb lazy" width="968" data-original="https://pic1.zhimg.com/v2-73e699c312a0097c057fef04f04eb340_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-73e699c312a0097c057fef04f04eb340_b.jpg"/></figure><h2><b><u><i>4、</i></u>预处理数据</b></h2><p>删除html并将所有文本都小写以清除文档文本。</p><div class="highlight"><pre><code class="language-python"><span class="k">def</span> <span class="nf">remove_html_tags</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39;html.parser&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get_text</span><span class="p">()</span>
    
    <span class="k">return</span> <span class="n">text</span>
<span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">remove_html_tags</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">text</span></code></pre></div><p>使用 Clean text 函数清理文档。</p><div class="highlight"><pre><code class="language-python"><span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_ks</span> <span class="ow">in</span> <span class="n">ten_ks_by_ticker</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">ten_k</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">ten_ks</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="s1">&#39;Cleaning {} 10-Ks&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ticker</span><span class="p">),</span> <span class="n">unit</span><span class="o">=</span><span class="s1">&#39;10-K&#39;</span><span class="p">):</span>
        <span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file_clean&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">clean_text</span><span class="p">(</span><span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">])</span>
<span class="n">project_helper</span><span class="o">.</span><span class="n">print_ten_k_data</span><span class="p">(</span><span class="n">ten_ks_by_ticker</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">][:</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;file_clean&#39;</span><span class="p">])</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-60c9b5bd646db5a55855d2b762d20a2c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="613" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-60c9b5bd646db5a55855d2b762d20a2c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-60c9b5bd646db5a55855d2b762d20a2c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="613" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic1.zhimg.com/v2-60c9b5bd646db5a55855d2b762d20a2c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-60c9b5bd646db5a55855d2b762d20a2c_b.jpg"/></figure><p>现在我们整理所有的数据：</p><div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">nltk.stem</span> <span class="kn">import</span> <span class="n">WordNetLemmatizer</span>
<span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">wordnet</span>
<span class="k">def</span> <span class="nf">lemmatize_words</span><span class="p">(</span><span class="n">words</span><span class="p">):</span>

    <span class="n">lemmatized_words</span> <span class="o">=</span> <span class="p">[</span><span class="n">WordNetLemmatizer</span><span class="p">()</span><span class="o">.</span><span class="n">lemmatize</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="s1">&#39;v&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">]</span>
    
    <span class="k">return</span> <span class="n">lemmatized_words</span>
<span class="n">word_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s1">&#39;\w+&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_ks</span> <span class="ow">in</span> <span class="n">ten_ks_by_ticker</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">ten_k</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">ten_ks</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="s1">&#39;Lemmatize {} 10-Ks&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ticker</span><span class="p">),</span> <span class="n">unit</span><span class="o">=</span><span class="s1">&#39;10-K&#39;</span><span class="p">):</span>
        <span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file_lemma&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">lemmatize_words</span><span class="p">(</span><span class="n">word_pattern</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file_clean&#39;</span><span class="p">]))</span>
<span class="n">project_helper</span><span class="o">.</span><span class="n">print_ten_k_data</span><span class="p">(</span><span class="n">ten_ks_by_ticker</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">][:</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;file_lemma&#39;</span><span class="p">])</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-17a17ae85b2d64f29412eca38062df67_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="595" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-17a17ae85b2d64f29412eca38062df67_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-17a17ae85b2d64f29412eca38062df67_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="595" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic4.zhimg.com/v2-17a17ae85b2d64f29412eca38062df67_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-17a17ae85b2d64f29412eca38062df67_b.jpg"/></figure><p>删除停顿词：</p><div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">stopwords</span>
<span class="n">lemma_english_stopwords</span> <span class="o">=</span> <span class="n">lemmatize_words</span><span class="p">(</span><span class="n">stopwords</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">))</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_ks</span> <span class="ow">in</span> <span class="n">ten_ks_by_ticker</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">ten_k</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">ten_ks</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="s1">&#39;Remove Stop Words for {} 10-Ks&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ticker</span><span class="p">),</span> <span class="n">unit</span><span class="o">=</span><span class="s1">&#39;10-K&#39;</span><span class="p">):</span>
        <span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file_lemma&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file_lemma&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">lemma_english_stopwords</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Stop Words Removed&#39;</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-7211534541766a10207a0de6ebd0a7ab_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="212" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-7211534541766a10207a0de6ebd0a7ab_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-7211534541766a10207a0de6ebd0a7ab_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="212" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic4.zhimg.com/v2-7211534541766a10207a0de6ebd0a7ab_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-7211534541766a10207a0de6ebd0a7ab_b.jpg"/></figure><h2><b><u><i>5、</i></u>10-k情绪分析</b></h2><p>使用 Loughran-McDonald 情绪词列表对10-ks进行情绪分析（这是专门为与财务相关的文本分析而构建的)。</p><div class="highlight"><pre><code class="language-python"><span class="n">sentiments</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;negative&#39;</span><span class="p">,</span> <span class="s1">&#39;positive&#39;</span><span class="p">,</span> <span class="s1">&#39;uncertainty&#39;</span><span class="p">,</span> <span class="s1">&#39;litigious&#39;</span><span class="p">,</span> <span class="s1">&#39;constraining&#39;</span><span class="p">,</span> <span class="s1">&#39;interesting&#39;</span><span class="p">]</span>

<span class="n">sentiment_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;loughran_mcdonald_master_dic_2018.csv&#39;</span><span class="p">)</span>
<span class="n">sentiment_df</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="n">column</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">sentiment_df</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span> <span class="c1"># Lowercase the columns for ease of use</span>

<span class="c1"># Remove unused information</span>
<span class="n">sentiment_df</span> <span class="o">=</span> <span class="n">sentiment_df</span><span class="p">[</span><span class="n">sentiments</span> <span class="o">+</span> <span class="p">[</span><span class="s1">&#39;word&#39;</span><span class="p">]]</span>
<span class="n">sentiment_df</span><span class="p">[</span><span class="n">sentiments</span><span class="p">]</span> <span class="o">=</span> <span class="n">sentiment_df</span><span class="p">[</span><span class="n">sentiments</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="n">sentiment_df</span> <span class="o">=</span> <span class="n">sentiment_df</span><span class="p">[(</span><span class="n">sentiment_df</span><span class="p">[</span><span class="n">sentiments</span><span class="p">])</span><span class="o">.</span><span class="nb">any</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span>

<span class="c1"># Apply the same preprocessing to these words as the 10-k words</span>
<span class="n">sentiment_df</span><span class="p">[</span><span class="s1">&#39;word&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">lemmatize_words</span><span class="p">(</span><span class="n">sentiment_df</span><span class="p">[</span><span class="s1">&#39;word&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
<span class="n">sentiment_df</span> <span class="o">=</span> <span class="n">sentiment_df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">)</span>

<span class="n">sentiment_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-5b430a3aa53b285785175cd6bcaadcd1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="335" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic2.zhimg.com/v2-5b430a3aa53b285785175cd6bcaadcd1_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-5b430a3aa53b285785175cd6bcaadcd1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="335" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic2.zhimg.com/v2-5b430a3aa53b285785175cd6bcaadcd1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-5b430a3aa53b285785175cd6bcaadcd1_b.jpg"/></figure><p>使用情绪词列表从10-k文档中生成情绪词包。这个词包计算每个文档中感情词的数量。</p><div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span><span class="p">,</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">CountVectorizer</span>
<span class="k">def</span> <span class="nf">get_bag_of_words</span><span class="p">(</span><span class="n">sentiment_words</span><span class="p">,</span> <span class="n">docs</span><span class="p">):</span>

    <span class="n">vec</span> <span class="o">=</span> <span class="n">CountVectorizer</span><span class="p">(</span><span class="n">vocabulary</span><span class="o">=</span><span class="n">sentiment_words</span><span class="p">)</span>
    <span class="n">vectors</span> <span class="o">=</span> <span class="n">vec</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
    <span class="n">words_list</span> <span class="o">=</span> <span class="n">vec</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">()</span>
    <span class="n">bag_of_words</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="n">docs</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">words_list</span><span class="p">)])</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">docs</span><span class="p">)):</span>
        <span class="n">bag_of_words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">vectors</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">toarray</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">return</span> <span class="n">bag_of_words</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="n">sentiment_bow_ten_ks</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_ks</span> <span class="ow">in</span> <span class="n">ten_ks_by_ticker</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">lemma_docs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file_lemma&#39;</span><span class="p">])</span> <span class="k">for</span> <span class="n">ten_k</span> <span class="ow">in</span> <span class="n">ten_ks</span><span class="p">]</span>
    
    <span class="n">sentiment_bow_ten_ks</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">sentiment</span><span class="p">:</span> <span class="n">get_bag_of_words</span><span class="p">(</span><span class="n">sentiment_df</span><span class="p">[</span><span class="n">sentiment_df</span><span class="p">[</span><span class="n">sentiment</span><span class="p">]][</span><span class="s1">&#39;word&#39;</span><span class="p">],</span> <span class="n">lemma_docs</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">sentiment</span> <span class="ow">in</span> <span class="n">sentiments</span><span class="p">}</span>
<span class="n">project_helper</span><span class="o">.</span><span class="n">print_ten_k_data</span><span class="p">([</span><span class="n">sentiment_bow_ten_ks</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">]],</span> <span class="n">sentiments</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-c982ddf5c0d7a0644c9c633cd104070f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="305" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-c982ddf5c0d7a0644c9c633cd104070f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-c982ddf5c0d7a0644c9c633cd104070f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="305" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic4.zhimg.com/v2-c982ddf5c0d7a0644c9c633cd104070f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-c982ddf5c0d7a0644c9c633cd104070f_b.jpg"/></figure><h2><b><u><i>6、</i></u>Jaccard相似度</b></h2><p>现在我们有了单词包，我们可以将它转换成布尔数组并计算Jaccard相似度。Jaccard相似度定义为交集的大小除以两个集合的并集的大小。例如，两个句子之间的Jaccard相似度是两个句子之间的共同词语的数量除以两个句子中唯一词语的总数。Jaccard相似度值越接近1，集合越相似。为了更容易理解我们的计算，我们绘制了Jaccard的相似度。</p><div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">jaccard_similarity_score</span>
<span class="k">def</span> <span class="nf">get_jaccard_similarity</span><span class="p">(</span><span class="n">bag_of_words_matrix</span><span class="p">):</span>
    
    <span class="n">jaccard_similarities</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">bag_of_words_matrix</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">bag_of_words_matrix</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bag_of_words_matrix</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">u</span> <span class="o">=</span> <span class="n">bag_of_words_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">v</span> <span class="o">=</span> <span class="n">bag_of_words_matrix</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
              
    <span class="n">jaccard_similarities</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">jaccard_similarity_score</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">jaccard_similarities</span>
<span class="c1"># Get dates for the universe</span>
<span class="n">file_dates</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">ticker</span><span class="p">:</span> <span class="p">[</span><span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file_date&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">ten_k</span> <span class="ow">in</span> <span class="n">ten_ks</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_ks</span> <span class="ow">in</span> <span class="n">ten_ks_by_ticker</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>
<span class="n">jaccard_similarities</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">ticker</span><span class="p">:</span> <span class="p">{</span>
        <span class="n">sentiment_name</span><span class="p">:</span> <span class="n">get_jaccard_similarity</span><span class="p">(</span><span class="n">sentiment_values</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">sentiment_name</span><span class="p">,</span> <span class="n">sentiment_values</span> <span class="ow">in</span> <span class="n">ten_k_sentiments</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>
    <span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_k_sentiments</span> <span class="ow">in</span> <span class="n">sentiment_bow_ten_ks</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>
<span class="n">project_helper</span><span class="o">.</span><span class="n">plot_similarities</span><span class="p">(</span>
    <span class="p">[</span><span class="n">jaccard_similarities</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">][</span><span class="n">sentiment</span><span class="p">]</span> <span class="k">for</span> <span class="n">sentiment</span> <span class="ow">in</span> <span class="n">sentiments</span><span class="p">],</span>
    <span class="n">file_dates</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">][</span><span class="mi">1</span><span class="p">:],</span>
    <span class="s1">&#39;Jaccard Similarities for {} Sentiment&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">example_ticker</span><span class="p">),</span>
    <span class="n">sentiments</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-10714dad167f90dbef1d19f458b31f85_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="852" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic2.zhimg.com/v2-10714dad167f90dbef1d19f458b31f85_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-10714dad167f90dbef1d19f458b31f85_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="852" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic2.zhimg.com/v2-10714dad167f90dbef1d19f458b31f85_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-10714dad167f90dbef1d19f458b31f85_b.jpg"/></figure><h2><b><u><i>7、</i></u>TFIDF</b></h2><p>从情感词列表中，我们从10-k文档中生成term frequency–inverse document frequency（TFIDF）。TFIDF是一种用于信息检索与数据挖掘的常用加权技术。TF意思是词频(Term Frequency)，IDF意思是逆文本频率指数(Inverse Document Frequency)。</p><p>TFIDF的主要思想是：如果某个词或短语在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类。TFIDF实际上是：TF * IDF，TF词频(Term Frequency)，IDF逆向文件频率(Inverse Document Frequency)。TF表示词条在文档d中出现的频率。IDF的主要思想是：如果包含词条t的文档越少，也就是n越小，IDF越大，则说明词条t具有很好的类别区分能力。如果某一类文档C中包含词条t的文档数为m，而其它类包含t的文档总数为k，显然所有包含t的文档数n=m+k，当m大的时候，n也大，按照IDF公式得到的IDF的值会小，就说明该词条t类别区分能力不强。</p><div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfVectorizer</span>
<span class="k">def</span> <span class="nf">get_tfidf</span><span class="p">(</span><span class="n">sentiment_words</span><span class="p">,</span> <span class="n">docs</span><span class="p">):</span>
    
    <span class="n">vec</span> <span class="o">=</span> <span class="n">TfidfVectorizer</span><span class="p">(</span><span class="n">vocabulary</span><span class="o">=</span><span class="n">sentiment_words</span><span class="p">)</span>
    <span class="n">tfidf</span> <span class="o">=</span> <span class="n">vec</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">docs</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">tfidf</span><span class="o">.</span><span class="n">toarray</span><span class="p">()</span>
<span class="n">sentiment_tfidf_ten_ks</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_ks</span> <span class="ow">in</span> <span class="n">ten_ks_by_ticker</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">lemma_docs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ten_k</span><span class="p">[</span><span class="s1">&#39;file_lemma&#39;</span><span class="p">])</span> <span class="k">for</span> <span class="n">ten_k</span> <span class="ow">in</span> <span class="n">ten_ks</span><span class="p">]</span>
    
    <span class="n">sentiment_tfidf_ten_ks</span><span class="p">[</span><span class="n">ticker</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">sentiment</span><span class="p">:</span> <span class="n">get_tfidf</span><span class="p">(</span><span class="n">sentiment_df</span><span class="p">[</span><span class="n">sentiment_df</span><span class="p">[</span><span class="n">sentiment</span><span class="p">]][</span><span class="s1">&#39;word&#39;</span><span class="p">],</span> <span class="n">lemma_docs</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">sentiment</span> <span class="ow">in</span> <span class="n">sentiments</span><span class="p">}</span>
<span class="n">project_helper</span><span class="o">.</span><span class="n">print_ten_k_data</span><span class="p">([</span><span class="n">sentiment_tfidf_ten_ks</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">]],</span> <span class="n">sentiments</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-a26c053d722cbd5fc652f234777835b7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="288" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-a26c053d722cbd5fc652f234777835b7_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-a26c053d722cbd5fc652f234777835b7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="288" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic4.zhimg.com/v2-a26c053d722cbd5fc652f234777835b7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-a26c053d722cbd5fc652f234777835b7_b.jpg"/></figure><h2><b><u><i>8、</i></u>余弦相似度</b></h2><p>根据我们的TFIDF值，我们可以计算余弦相似度并绘制它随时间的变化。与Jaccard相似度类似，余弦相似度是用来确定文档相似程度的度量标准。余弦相似度通过测量投影在多维空间中两个向量夹角的余弦值来计算大小不同的相似度。对于文本分析，使用的两个向量通常是包含两个文档字数的数组。</p><div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">sklearn.metrics.pairwise</span> <span class="kn">import</span> <span class="n">cosine_similarity</span>
<span class="k">def</span> <span class="nf">get_cosine_similarity</span><span class="p">(</span><span class="n">tfidf_matrix</span><span class="p">):</span>
    
    <span class="n">cosine_similarities</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tfidf_matrix</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        
<span class="n">cosine_similarities</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cosine_similarity</span><span class="p">(</span><span class="n">tfidf_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">tfidf_matrix</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">cosine_similarities</span>
<span class="n">cosine_similarities</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">ticker</span><span class="p">:</span> <span class="p">{</span>
        <span class="n">sentiment_name</span><span class="p">:</span> <span class="n">get_cosine_similarity</span><span class="p">(</span><span class="n">sentiment_values</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">sentiment_name</span><span class="p">,</span> <span class="n">sentiment_values</span> <span class="ow">in</span> <span class="n">ten_k_sentiments</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>
    <span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_k_sentiments</span> <span class="ow">in</span> <span class="n">sentiment_tfidf_ten_ks</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>
<span class="n">project_helper</span><span class="o">.</span><span class="n">plot_similarities</span><span class="p">(</span>
    <span class="p">[</span><span class="n">cosine_similarities</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">][</span><span class="n">sentiment</span><span class="p">]</span> <span class="k">for</span> <span class="n">sentiment</span> <span class="ow">in</span> <span class="n">sentiments</span><span class="p">],</span>
    <span class="n">file_dates</span><span class="p">[</span><span class="n">example_ticker</span><span class="p">][</span><span class="mi">1</span><span class="p">:],</span>
    <span class="s1">&#39;Cosine Similarities for {} Sentiment&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">example_ticker</span><span class="p">),</span>
    <span class="n">sentiments</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-88c1fe517036978fff3e77318f50048f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="853" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-88c1fe517036978fff3e77318f50048f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-88c1fe517036978fff3e77318f50048f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="853" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic4.zhimg.com/v2-88c1fe517036978fff3e77318f50048f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-88c1fe517036978fff3e77318f50048f_b.jpg"/></figure><h2><b><u><i>9、</i></u>价格数据</b></h2><p>现在我们将通过对比股票的年度定价来评估Alpha因子。从QuoteMedia下载价格数据。</p><div class="highlight"><pre><code class="language-python"><span class="n">pricing</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;yr-quotemedia.csv&#39;</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">])</span>
<span class="n">pricing</span> <span class="o">=</span> <span class="n">pricing</span><span class="o">.</span><span class="n">pivot</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="s1">&#39;ticker&#39;</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="s1">&#39;adj_close&#39;</span><span class="p">)</span>

<span class="n">pricing</span></code></pre></div><p><b><u><i>10、</i></u>转为Dataframe</b></p><p>Alphalens 是一个用于 Alpha 因子性能分析的 Python 库，我们须将数据类型字典转换为Dataframe。</p><div class="highlight"><pre><code class="language-python"><span class="n">cosine_similarities_df_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;date&#39;</span><span class="p">:</span> <span class="p">[],</span> <span class="s1">&#39;ticker&#39;</span><span class="p">:</span> <span class="p">[],</span> <span class="s1">&#39;sentiment&#39;</span><span class="p">:</span> <span class="p">[],</span> <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="p">[]}</span>
<span class="k">for</span> <span class="n">ticker</span><span class="p">,</span> <span class="n">ten_k_sentiments</span> <span class="ow">in</span> <span class="n">cosine_similarities</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">sentiment_name</span><span class="p">,</span> <span class="n">sentiment_values</span> <span class="ow">in</span> <span class="n">ten_k_sentiments</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">sentiment_values</span><span class="p">,</span> <span class="n">sentiment_value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">sentiment_values</span><span class="p">):</span>
            <span class="n">cosine_similarities_df_dict</span><span class="p">[</span><span class="s1">&#39;ticker&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ticker</span><span class="p">)</span>
            <span class="n">cosine_similarities_df_dict</span><span class="p">[</span><span class="s1">&#39;sentiment&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sentiment_name</span><span class="p">)</span>
            <span class="n">cosine_similarities_df_dict</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sentiment_value</span><span class="p">)</span>
            <span class="n">cosine_similarities_df_dict</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">file_dates</span><span class="p">[</span><span class="n">ticker</span><span class="p">][</span><span class="mi">1</span><span class="p">:][</span><span class="n">sentiment_values</span><span class="p">])</span>
<span class="n">cosine_similarities_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">cosine_similarities_df_dict</span><span class="p">)</span>
<span class="n">cosine_similarities_df</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DatetimeIndex</span><span class="p">(</span><span class="n">cosine_similarities_df</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">year</span>
<span class="n">cosine_similarities_df</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">cosine_similarities_df</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">],</span> <span class="n">format</span><span class="o">=</span><span class="s1">&#39;%Y&#39;</span><span class="p">)</span>
<span class="n">cosine_similarities_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-b1dc1c05a9ce8d3b70f47b0e898264d4_b.jpg" data-caption="" data-size="normal" data-rawwidth="668" data-rawheight="382" class="origin_image zh-lightbox-thumb" width="668" data-original="https://pic1.zhimg.com/v2-b1dc1c05a9ce8d3b70f47b0e898264d4_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-b1dc1c05a9ce8d3b70f47b0e898264d4_b.jpg" data-caption="" data-size="normal" data-rawwidth="668" data-rawheight="382" class="origin_image zh-lightbox-thumb lazy" width="668" data-original="https://pic1.zhimg.com/v2-b1dc1c05a9ce8d3b70f47b0e898264d4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-b1dc1c05a9ce8d3b70f47b0e898264d4_b.jpg"/></figure><p>在使用许多Alphalens函数之前，我们需要对齐索引并将时间转换为unix时间戳。</p><div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">alphalens</span> <span class="kn">as</span> <span class="nn">al</span>
<span class="n">factor_data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">skipped_sentiments</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">sentiment</span> <span class="ow">in</span> <span class="n">sentiments</span><span class="p">:</span>
    <span class="n">cs_df</span> <span class="o">=</span> <span class="n">cosine_similarities_df</span><span class="p">[(</span><span class="n">cosine_similarities_df</span><span class="p">[</span><span class="s1">&#39;sentiment&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">sentiment</span><span class="p">)]</span>
    <span class="n">cs_df</span> <span class="o">=</span> <span class="n">cs_df</span><span class="o">.</span><span class="n">pivot</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="s1">&#39;ticker&#39;</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="s1">&#39;value&#39;</span><span class="p">)</span>
    
    <span class="k">try</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">al</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">get_clean_factor_and_forward_returns</span><span class="p">(</span><span class="n">cs_df</span><span class="o">.</span><span class="n">stack</span><span class="p">(),</span> <span class="n">pricing</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">cs_df</span><span class="o">.</span><span class="n">index</span><span class="p">],</span> <span class="n">quantiles</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">factor_data</span><span class="p">[</span><span class="n">sentiment</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">skipped_sentiments</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sentiment</span><span class="p">)</span>
<span class="k">if</span> <span class="n">skipped_sentiments</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Skipped the following sentiments:</span><span class="se">\n</span><span class="s1">{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">skipped_sentiments</span><span class="p">)))</span>
<span class="n">factor_data</span><span class="p">[</span><span class="n">sentiments</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">.</span><span class="n">head</span><span class="p">()</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-303aec8b82668c223efbe4500399f16c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="755" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-303aec8b82668c223efbe4500399f16c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-303aec8b82668c223efbe4500399f16c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="755" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic1.zhimg.com/v2-303aec8b82668c223efbe4500399f16c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-303aec8b82668c223efbe4500399f16c_b.jpg"/></figure><p>我们还必须在unix时间内创建factor dataframes，以便与alphalen的factor_rank_autocorrelation和mean_return_by_quantile函数兼容。</p><div class="highlight"><pre><code class="language-python"><span class="n">unixt_factor_data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">factor</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">MultiIndex</span><span class="o">.</span><span class="n">from_tuples</span><span class="p">(</span>
        <span class="p">[(</span><span class="n">x</span><span class="o">.</span><span class="n">timestamp</span><span class="p">(),</span> <span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">values</span><span class="p">],</span>
        <span class="n">names</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;asset&#39;</span><span class="p">]))</span>
    <span class="k">for</span> <span class="n">factor</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">factor_data</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span></code></pre></div><p><b><u><i>11、</i></u>因子收益</b></p><p>让我们来看看随着时间的推移因子的收益：</p><div class="highlight"><pre><code class="language-python"><span class="n">ls_factor_returns</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
<span class="k">for</span> <span class="n">factor_name</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">factor_data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">ls_factor_returns</span><span class="p">[</span><span class="n">factor_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">al</span><span class="o">.</span><span class="n">performance</span><span class="o">.</span><span class="n">factor_returns</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span>
<span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">ls_factor_returns</span><span class="p">)</span><span class="o">.</span><span class="n">cumprod</span><span class="p">()</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-29f347fd68f9c00e586b50bc6bbbe1c5_b.jpg" data-caption="" data-size="normal" data-rawwidth="806" data-rawheight="544" class="origin_image zh-lightbox-thumb" width="806" data-original="https://pic2.zhimg.com/v2-29f347fd68f9c00e586b50bc6bbbe1c5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-29f347fd68f9c00e586b50bc6bbbe1c5_b.jpg" data-caption="" data-size="normal" data-rawwidth="806" data-rawheight="544" class="origin_image zh-lightbox-thumb lazy" width="806" data-original="https://pic2.zhimg.com/v2-29f347fd68f9c00e586b50bc6bbbe1c5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-29f347fd68f9c00e586b50bc6bbbe1c5_b.jpg"/></figure><p>不出所料，表达积极情绪的10-k报告收益最大，而包含消极情绪的10-k报告损失最大。</p><p><b><u><i>12、</i></u>分位数基点（每天）</b></p><p>只看因子加权收益率是不够的。一个好的因子在分位数上也是单调的。让我们看看因子收益的基点。</p><div class="highlight"><pre><code class="language-python"><span class="n">qr_factor_returns</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>

<span class="k">for</span> <span class="n">factor_name</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">unixt_factor_data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">qr_factor_returns</span><span class="p">[</span><span class="n">factor_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">al</span><span class="o">.</span><span class="n">performance</span><span class="o">.</span><span class="n">mean_return_by_quantile</span><span class="p">(</span><span class="n">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span>

<span class="p">(</span><span class="mi">10000</span><span class="o">*</span><span class="n">qr_factor_returns</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span>
    <span class="n">subplots</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">layout</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span>
    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span>
    <span class="n">legend</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-d68274acae3b6303fd4c24350005b4ac_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="451" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-d68274acae3b6303fd4c24350005b4ac_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-d68274acae3b6303fd4c24350005b4ac_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="451" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic1.zhimg.com/v2-d68274acae3b6303fd4c24350005b4ac_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-d68274acae3b6303fd4c24350005b4ac_b.jpg"/></figure><p>利用因子秩自相关，我们可以分析Alpha随时间的稳定性。我们希望每段时期的Alpha排名保持相对不变。</p><div class="highlight"><pre><code class="language-python"><span class="n">ls_FRA</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
<span class="k">for</span> <span class="n">factor</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">unixt_factor_data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">ls_FRA</span><span class="p">[</span><span class="n">factor</span><span class="p">]</span> <span class="o">=</span> <span class="n">al</span><span class="o">.</span><span class="n">performance</span><span class="o">.</span><span class="n">factor_rank_autocorrelation</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">ls_FRA</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Factor Rank Autocorrelation&#34;</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-dcba8997bdd5f95db2ad7a58b2b6fd28_b.jpg" data-caption="" data-size="normal" data-rawwidth="814" data-rawheight="576" class="origin_image zh-lightbox-thumb" width="814" data-original="https://pic1.zhimg.com/v2-dcba8997bdd5f95db2ad7a58b2b6fd28_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-dcba8997bdd5f95db2ad7a58b2b6fd28_b.jpg" data-caption="" data-size="normal" data-rawwidth="814" data-rawheight="576" class="origin_image zh-lightbox-thumb lazy" width="814" data-original="https://pic1.zhimg.com/v2-dcba8997bdd5f95db2ad7a58b2b6fd28_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-dcba8997bdd5f95db2ad7a58b2b6fd28_b.jpg"/></figure><p><b><u><i>13、</i></u>夏普比率</b></p><p>最后，让我们计算夏普比率：</p><div class="highlight"><pre><code class="language-python"><span class="n">daily_annualization_factor</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">252</span><span class="p">)</span>
<span class="p">(</span><span class="n">daily_annualization_factor</span> <span class="o">*</span> <span class="n">ls_factor_returns</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span> <span class="o">/</span> <span class="n">ls_factor_returns</span><span class="o">.</span><span class="n">std</span><span class="p">())</span><span class="o">.</span><span class="nb">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-278e67a35297ae1d2264844cacad3358_b.jpg" data-caption="" data-size="normal" data-rawwidth="588" data-rawheight="262" class="origin_image zh-lightbox-thumb" width="588" data-original="https://pic1.zhimg.com/v2-278e67a35297ae1d2264844cacad3358_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-278e67a35297ae1d2264844cacad3358_b.jpg" data-caption="" data-size="normal" data-rawwidth="588" data-rawheight="262" class="origin_image zh-lightbox-thumb lazy" width="588" data-original="https://pic1.zhimg.com/v2-278e67a35297ae1d2264844cacad3358_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-278e67a35297ae1d2264844cacad3358_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>夏普比率为1是还能接受，要是3就很好了</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-a9e5934044471346fc36ee25924e5058_b.png" data-caption="" data-size="normal" data-rawwidth="64" data-rawheight="64" class="content_image" width="64"/></noscript><img src="https://pic1.zhimg.com/v2-a9e5934044471346fc36ee25924e5058_b.png" data-caption="" data-size="normal" data-rawwidth="64" data-rawheight="64" class="content_image lazy" width="64" data-actualsrc="https://pic1.zhimg.com/v2-a9e5934044471346fc36ee25924e5058_b.png"/></figure><p>我们可以看到，积极情绪与高夏普比率相关，而消极情绪与低夏普比率相关。其他情绪也与较高的夏普比率相关。然而，由于影响股票价格的复杂因素如此之多，在实际中复制这些收益的难度要大得多。</p><p>量化投资与机器学习微信公众号，是业内垂直于<b>Quant、MFE、Fintech、AI、ML</b>等领域的<b>量化类主流自媒体。</b>公众号拥有来自<b>公募、私募、券商、期货、银行、保险资管、海外</b>等众多圈内<b>18W+</b>关注者。每日发布行业前沿研究成果和最新量化资讯。</p>