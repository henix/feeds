<div class="title-image"><img src="https://pic4.zhimg.com/v2-d7cf4b9f4769db60e8e8734a486d61ac_b.jpg" alt=""></div><p></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-fe6b366ae13735ecf6599d9cd393e07d_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="334" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic2.zhimg.com/v2-fe6b366ae13735ecf6599d9cd393e07d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-fe6b366ae13735ecf6599d9cd393e07d_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="334" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic2.zhimg.com/v2-fe6b366ae13735ecf6599d9cd393e07d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-fe6b366ae13735ecf6599d9cd393e07d_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>很长一段时间以来，我一直在寻找HackerOne平台上的漏洞，工作之外也会留一定的时间来查看我的收藏夹和新程序。我曾无数次发现一个基于cookie的XSS漏洞，这也是我写这篇文章的原因。当cookie参数的值直接反映到页面上而无任何过滤时，就会出现这种漏洞。</p><p>通常情况下，如果我们不能证明这些XSS的危害性，就会被认为是Self-XSS，这样很可能就得不到审核人员的认可，更别说拿到赏金。因此，在这篇文章中，我将展示如何挖掘出一个基于cookie的XSS漏洞，并得到平台的认可。</p><p>为了执行恶意的JavaScript，我们需要找到一种设置cookie的方法，并将受害者引诱到使用了cookie值的页面。我们可能会用到以下几种方法：</p><h2>1. CRLF注入</h2><p>当目标站点没有对用户输入的换行符进行过滤拦截时，就会发生此漏洞。我们可以往响应中注入一个<code>Set-cookie</code>头，其中包含所需的cookie参数名和对应的值。因此，一旦受害者点击我制作的恶意url，他的浏览器便会保存我所制作的cookie。</p><p>现实案例：twitter曾存在类似漏洞（Slippery CRLF injection），利用url如下：<a href="https://link.zhihu.com/?target=https%3A//twitter.com/login%3Fredirect_after_login%3D/jjjkkk%25E5%2598%258A%25E5%2598%258DSet-Cookie%3Ajjjjj%3Da%3Bdomain%3Dtwitter.com" class=" wrap external" target="_blank" rel="nofollow noreferrer">https://twitter.com/login?redirect_after_login=/jjjkkk嘊嘍Set-Cookie:jjjjj=a;domain=twitter.com</a></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-4b46e31e77b1d0f0d7c226847bbb11e6_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="592" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic3.zhimg.com/v2-4b46e31e77b1d0f0d7c226847bbb11e6_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-4b46e31e77b1d0f0d7c226847bbb11e6_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="592" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic3.zhimg.com/v2-4b46e31e77b1d0f0d7c226847bbb11e6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-4b46e31e77b1d0f0d7c226847bbb11e6_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>有关此类漏洞的报告可以在HackerOne上阅读，也可以点击<a href="https://link.zhihu.com/?target=https%3A//hackerone.com/hacktivity%3Forder_direction%3DDESC%26order_field%3Dpopular%26filter%3Dtype%253Apublic%26querystring%3Dcrlf%2520injection%26source%3Dpost_page---------------------------" class=" wrap external" target="_blank" rel="nofollow noreferrer">这里</a>。</p><h2>2. 子域上的XSS漏洞</h2><p>XSS必须是公开的，位于<code>*.vulnerabledomain.com</code>上。对于很多漏洞赏金项目来说，并不是所有的子域都在测试范围内。即使你发现了相关漏洞，要么审核人员根本不接受，要么接受了但被标记为“不符合赏金条件”。在这种情况下，你不应该退缩，这些XSS有可能帮助我们通过<code>document.cookie</code>功能设置或删除cookie。</p><p>信任度不同：相比<code>jira.vulnerabledomain.com/plugins/servlet/oauth/users/icon-uri?consumerUri=<a href="https://link.zhihu.com/?target=https%3A//maliciousdomain.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">https://maliciousdomain.com</a></code>这类带有很长后缀的子域链接，受害者通常更信任主域。如果此子域未与个人帐户或授权相关联，受害者更有可能进入主域而非子域。基于上述情况，我们可以使用一个重定向功能来从主域重定向到子域<code><a href="https://link.zhihu.com/?target=https%3A//vulnerabledomain.com/login%3FredirectUrl%3Dhttps%3A//jira.vulnerabledomain.com/path" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">vulnerabledomain.com/lo</span><span class="invisible">gin?redirectUrl=https://jira.vulnerabledomain.com/path</span><span class="ellipsis"></span></a></code>。</p><p>如果受害者已有一个session，则重定向将是自动的；如果没有，则需要授权。</p><p>当用户点击如上链接，cookie将会被子域的XSS重新设置。然后，它再把用户导航到基于cookie的XSS的站点页面，再次触发XSS攻击，捕获CSRF令牌并执行更改电子邮件地址的请求！</p><p>一旦电子邮件地址被我所掌握，且不存在其他认证手段，那么我就可以更改账户密码，接管帐户。</p><h2>3. 检测是否存在可手动设置cookie的网页</h2><p>打开内容，使用dirb、dirserach之类的工具就足够了。然后开始挖掘，如果开发人员忘记删除某些敏感页面，我们则有机会发现那些文件。</p><p>最近我就在某个网站上发现了一个servlet测试页面，在该页面上可以设置具有任意参数名和值的cookie。当然，如果目标站点缺乏对CSRF的防御，那么我们就可以利用其去更改受害者浏览器中的cookie。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-efffc30b603ac306c53bef5d26f53185_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="331" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic2.zhimg.com/v2-efffc30b603ac306c53bef5d26f53185_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-efffc30b603ac306c53bef5d26f53185_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="331" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic2.zhimg.com/v2-efffc30b603ac306c53bef5d26f53185_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-efffc30b603ac306c53bef5d26f53185_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>这个漏洞被认定为CRLF注入的替代品，我最终得到了150美元的奖励，开发人员仍然认为这是一个危险性较低的漏洞。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-d471aecbdc0202d99491885de436de89_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="153" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic2.zhimg.com/v2-d471aecbdc0202d99491885de436de89_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-d471aecbdc0202d99491885de436de89_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="153" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic2.zhimg.com/v2-d471aecbdc0202d99491885de436de89_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-d471aecbdc0202d99491885de436de89_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2>4. 中间人攻击(MITM)</h2><p>只有当cookie上没有secure flag时，才能使用此方法。如果你不知道这个flag是什么，可以查看OWASP London 2017的“Cookie安全”演示文稿，<code><a href="https://link.zhihu.com/?target=https%3A//www.owasp.org/images/a/a0/OWASPLondon20171130_Cookie_Security_Myths_Misconceptions_David_Johansson.pdf%3Fsource%3Dpost_page---------------------------" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">owasp.org/images/a/a0/O</span><span class="invisible">WASPLondon20171130_Cookie_Security_Myths_Misconceptions_David_Johansson.pdf?source=post_page---------------------------</span><span class="ellipsis"></span></a></code></p><p>为了成功攻击，受害者必须位于攻击者的网络中，否则会影响dns解析。为了验证漏洞，你必须:</p><p>1) 设置如下内容的<code>index.php</code>文件：</p><div class="highlight"><pre><code class="language-text">&lt;?php if ($_SERVER[‘HTTP_HOST’] == ‘non-existed-subdomain.vulnerabledomain.com’) { setrawcookie(“VID”,’\’+alert(123123123)+\’’, time()+36000, “/”, “.vulnerabledomain.com”,0,1); } ?&gt;</code></pre></div><p>2) 在<code>/etc/hosts</code>文件中添加以下数据: <code>127.0.0.1 non-existed-subdomain.vulnerabledomain.com</code></p><p>3) 一旦受害者访问<code>non-exild-subdomain.vulnerabledomain.com</code>，就会被修改cookie。<code>e.mail.ru</code>的中间人攻击就是一个实际案例——<code><a href="https://link.zhihu.com/?target=https%3A//hackerone.com/reports/312548" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">hackerone.com/reports/3</span><span class="invisible">12548</span><span class="ellipsis"></span></a></code>——但是，如你所见，中间人攻击的利用条件较为苛刻，因此由它衍生出的其他攻击很可能并不会被审核人员认同。</p><h2>案例</h2><p>在挖掘某个网站的漏洞时，我突然发现我的cookie值出现在站点的一个子目录中。我做的第一件事就是检查“<code>/&lt;&gt;</code>”是否被过滤，事实证明，只有“<code>&lt;&gt;</code>”字符被过滤掉了，其他的字符并不会被过滤。思考之后，我决定嵌入<code>-alert(document.domain)-</code>并执行JS，最后实现了XSS攻击。</p><p>因为开发人员没有给cookie设置<code>secure flag</code>，因此在这种情况下MITM方法是可行的。我决定发送我的报告：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-58bdc16ca7555eaa51719fbe5ce2ac50_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="105" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic1.zhimg.com/v2-58bdc16ca7555eaa51719fbe5ce2ac50_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-58bdc16ca7555eaa51719fbe5ce2ac50_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="105" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic1.zhimg.com/v2-58bdc16ca7555eaa51719fbe5ce2ac50_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-58bdc16ca7555eaa51719fbe5ce2ac50_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>随后HackerOne的审核人员明确表示，这是Self-XSS，我还需努力：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-95554aa6199e3d3cdf7b83dbb001c646_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="124" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic3.zhimg.com/v2-95554aa6199e3d3cdf7b83dbb001c646_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-95554aa6199e3d3cdf7b83dbb001c646_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="124" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic3.zhimg.com/v2-95554aa6199e3d3cdf7b83dbb001c646_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-95554aa6199e3d3cdf7b83dbb001c646_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>之后，我开始仔细检查这个网站，试图找到CRLF注入或XSS来证明它的危险性。</p><p>我借助一个很大的域名字典，在暴力破解以及SSL证书的帮助下尽可能地扩展子域名列表。</p><p>结果不久，因为在VPS中运行了大量的工具，我还发现了其他漏洞。很多不安全的重定向和大量的访问控制缺陷，甚至直接导致厂商将某个子域下线，以上这些为我带来了5000美元的奖励。也许在将来，如果程序公开，我将在页面<a href="https://link.zhihu.com/?target=http%3A//hackerone.com/w2w" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">hackerone.com/w2w</span><span class="invisible"></span></a>上显示报告。</p><p>一周后，我查看了这些天所有的结果，发现了某个子域的<code>/verification</code>端点，起初我并不重视，但在草草检查后还是发现了一个<code>/verification/login</code>子目录。</p><p>在我点击这个url后，跳转到了<code>/verification/login/?redirect_uri=<a href="https://link.zhihu.com/?target=https%3A//vulnerabledomain.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">https://vulnerabledomain.com</a></code>，在我登录后，该页面迅速重定向到<code><a href="https://link.zhihu.com/?target=https%3A//vulnerabledomain.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">https://vulnerabledomain.com</a></code>。</p><p>经过反复的尝试，我成功绕过了这个重定向的安全保护<code>vulnerabledomain.com@anotherdomain.com</code>。接着我试图将这个漏洞升级到XSS，其中<code>javascript:alert(1)</code>失败。但是<code>javascript://<a href="https://link.zhihu.com/?target=https%3A//vulnerabledomain.com/%25250A1alert" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">vulnerabledomain.com/%2</span><span class="invisible">50A1alert</span><span class="ellipsis"></span></a>(1):0</code>成功，因为存在<code><a href="https://link.zhihu.com/?target=https%3A//vulnerabledomain/" class=" wrap external" target="_blank" rel="nofollow noreferrer">https://vulnerabledomain</a></code>，这个payload最终绕过了白名单验证。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-7124ae40fde5891e7e3ba74a7618395c_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="136" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic1.zhimg.com/v2-7124ae40fde5891e7e3ba74a7618395c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-7124ae40fde5891e7e3ba74a7618395c_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="136" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic1.zhimg.com/v2-7124ae40fde5891e7e3ba74a7618395c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-7124ae40fde5891e7e3ba74a7618395c_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>然后我立即和前面所述的基于cookie的XSS结合起来。在<code>javascript:<a href="https://link.zhihu.com/?target=https%3A//vulnerabledomain.com/%250A1%3Fdocument%252ecookie%2520%253d%2520%2527SID%253d137gf6g67f76fg6766123%255c%2527-alert%2528document%252edomain%2529-%255c%2527%253b%2520expires%253dFri%252c%25203%2520Aug%25202019%252020%253a47%253a11%2520UTC%253b%2520path%253d%252f%253b%2520domain%253d%252evulnerabledomain%252ecom%253b%2527%253a0" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">vulnerabledomain.com/%0</span><span class="invisible">A1?document%2ecookie%20%3d%20%27SID%3d137gf6g67f76fg6766123%5c%27-alert%28document%2edomain%29-%5c%27%3b%20expires%3dFri%2c%203%20Aug%202019%2020%3a47%3a11%20UTC%3b%20path%3d%2f%3b%20domain%3d%2evulnerabledomain%2ecom%3b%27%3a0</span><span class="ellipsis"></span></a></code>的帮助下，cookie已成功设置为<code>* .vulnerabledomain.com</code>。在访问带有cookie的页面后，最终出现了令人惊喜的警报窗口！双XSS利用成功！我马上更新了安全报告，等待安全人员的回复。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-ee7841a0bae38f94b932733763ac6e82_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="230" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic3.zhimg.com/v2-ee7841a0bae38f94b932733763ac6e82_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-ee7841a0bae38f94b932733763ac6e82_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="230" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic3.zhimg.com/v2-ee7841a0bae38f94b932733763ac6e82_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-ee7841a0bae38f94b932733763ac6e82_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>在同一天，我的漏洞得到了审核人员的认可，得到了1000美元的奖励！</p><p>而那个基于DOM的XSS（跳转处的XSS），我也得到了200美元的奖励。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-a4d0b2dfb73b9a2dc1339a74f0585c27_b.png" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="48" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic4.zhimg.com/v2-a4d0b2dfb73b9a2dc1339a74f0585c27_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-a4d0b2dfb73b9a2dc1339a74f0585c27_b.png" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="48" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic4.zhimg.com/v2-a4d0b2dfb73b9a2dc1339a74f0585c27_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-a4d0b2dfb73b9a2dc1339a74f0585c27_b.png"/></figure><p class="ztext-empty-paragraph"><br/></p><p><b>测试结果： $ 1000 + $ 1000 + $ 200（OR）+ $ 100（OR）= $ 2300</b></p><p>这个漏洞悬赏项目已经运行一年多了，但在不到一个月的时间里，我就排到了第一。这个赏金计划已经成为我最喜欢的项目之一，我希望你也能找到一个！而且，多亏了这个项目，在90天内，我在声誉的排行榜中获得了第36名，现在我已收到很多私人漏洞悬赏项目的邀请。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-4dd368b04c251af52791c142f79c67fe_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="266" class="origin_image zh-lightbox-thumb" width="554" data-original="https://pic3.zhimg.com/v2-4dd368b04c251af52791c142f79c67fe_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-4dd368b04c251af52791c142f79c67fe_b.jpg" data-caption="" data-size="normal" data-rawwidth="554" data-rawheight="266" class="origin_image zh-lightbox-thumb lazy" width="554" data-original="https://pic3.zhimg.com/v2-4dd368b04c251af52791c142f79c67fe_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-4dd368b04c251af52791c142f79c67fe_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h2>总结</h2><p>基于Cookie的XSS非常容易被利用，如果你尝试深入挖掘一下，是可以拿到高赏金的。同时也别只看新上架的项目，任何项目都有你还未发现的漏洞，而坚持不懈，永远是挖漏洞的不二法门。</p><p>来源：<a href="https://link.zhihu.com/?target=https%3A//medium.com/%40iSecMax/%25D1%2581ookie-based-xss-exploitation-2300-bug-bounty-story-9bc532ffa564" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">medium.com/@iSecMax/%D1</span><span class="invisible">%81ookie-based-xss-exploitation-2300-bug-bounty-story-9bc532ffa564</span><span class="ellipsis"></span></a></p>