<div class="title-image"><img src="https://pic4.zhimg.com/v2-bafeeae88945a35b3a137c3013b39afc_b.jpg" alt=""></div><p>作者：龙恒</p><p>对于一个大型复杂的系统来说，通常包含多个模块或多个组件构成，模拟各个子系统的故障是测试中必不可少的环节，并且这些故障模拟必须做到无侵入地集成到自动化测试系统中，通过在自动化测试中自动激活这些故障点来模拟故障，并观测最终结果是否符合预期结果来判断系统的正确性和稳定性。如果在一个分布式系统中需要专门请一位同事来插拔网线来模拟网络异常，一个存储系统中需要通过破坏硬盘来模拟磁盘损坏，昂贵的测试成本会让测试成为一场灾难，并且难以模拟一些需要精细化控制的的测试。所以我们需要一些自动化的方式来进行确定性的故障测试。</p><p><b><a href="https://link.zhihu.com/?target=https%3A//github.com/pingcap/failpoint" class=" wrap external" target="_blank" rel="nofollow noreferrer">Failpoint 项目</a></b> <b>就是为此而生，它是 FreeBSD</b> <b><a href="https://link.zhihu.com/?target=http%3A//www.freebsd.org/cgi/man.cgi%3Fquery%3Dfail" class=" wrap external" target="_blank" rel="nofollow noreferrer">failpoints</a></b> <b>的 Golang 实现，允许在代码中注入错误或异常行为， 并由环境变量或代码动态激活来触发这些异常行为。Failpoint 能用于各种复杂系统中模拟错误处理来提高系统的容错性、正确性和稳定性，比如：</b></p><ul><li>微服务中某个服务出现随机延迟、某个服务不可用。</li><li>存储系统磁盘 IO 延迟增加、IO 吞吐量过低、落盘时间长。</li><li>调度系统中出现热点，某个调度指令失败。</li><li>充值系统中模拟第三方重复请求充值成功回调接口。</li><li>游戏开发中模拟玩家网络不稳定、掉帧、延迟过大等，以及各种异常输入（外挂请求）情况下系统是否正确工作。</li><li>……</li></ul><h2>为什么要重复造轮子？</h2><p>Etcd 团队在 2016 年开发了 <a href="https://link.zhihu.com/?target=https%3A//github.com/etcd-io/gofail/" class=" wrap external" target="_blank" rel="nofollow noreferrer">gofail</a> 极大地简化了错误注入，为 Golang 生态做出了巨大贡献。我们在 2018 年已经引入了 gofail 进行错误注入测试，但是我们在使用中发现了一些功能性以及便利性的问题，所以我们决定造一个更好的「轮子」。</p><h3>如何使用 gofail</h3><div class="highlight"><pre><code class="language-text">使用注释在程序中注入一个 failpoint：
// gofail: var FailIfImportedChunk int
// if merger, ok := scp.merger.(*ChunkCheckpointMerger); ok &amp;&amp; merger.Checksum.SumKVS() &gt;= uint64(FailIfImportedChunk) {
// rc.checkpointsWg.Done()
// rc.checkpointsWg.Wait()
// panic(&#34;forcing failure due to FailIfImportedChunk&#34;)
// }
// goto RETURN1
    
// gofail: RETURN1:
    
// gofail: var FailIfStatusBecomes int
// if merger, ok := scp.merger.(*StatusCheckpointMerger); ok &amp;&amp; merger.EngineID &gt;= 0 &amp;&amp; int(merger.Status) == FailIfStatusBecomes {
// rc.checkpointsWg.Done()
// rc.checkpointsWg.Wait()
// panic(&#34;forcing failure due to FailIfStatusBecomes&#34;)
// }
// goto RETURN2
    
// gofail: RETURN2:</code></pre></div><ul><li>使用 gofail enable 转换后的代码：</li></ul><div class="highlight"><pre><code class="language-text">if vFailIfImportedChunk, __fpErr := __fp_FailIfImportedChunk.Acquire(); __fpErr == nil { defer __fp_FailIfImportedChunk.Release(); FailIfImportedChunk, __fpTypeOK := vFailIfImportedChunk.(int); if !__fpTypeOK { goto __badTypeFailIfImportedChunk} 
    if merger, ok := scp.merger.(*ChunkCheckpointMerger); ok &amp;&amp; merger.Checksum.SumKVS() &gt;= uint64(FailIfImportedChunk) {
        rc.checkpointsWg.Done()
        rc.checkpointsWg.Wait()
        panic(&#34;forcing failure due to FailIfImportedChunk&#34;)
    }
    goto RETURN1; __badTypeFailIfImportedChunk: __fp_FailIfImportedChunk.BadType(vFailIfImportedChunk, &#34;int&#34;); };
    
/* gofail-label */ RETURN1:
    
if vFailIfStatusBecomes, __fpErr := __fp_FailIfStatusBecomes.Acquire(); __fpErr == nil { defer __fp_FailIfStatusBecomes.Release(); FailIfStatusBecomes, __fpTypeOK := vFailIfStatusBecomes.(int); if !__fpTypeOK { goto __badTypeFailIfStatusBecomes} 
    if merger, ok := scp.merger.(*StatusCheckpointMerger); ok &amp;&amp; merger.EngineID &gt;= 0 &amp;&amp; int(merger.Status) == FailIfStatusBecomes {
        rc.checkpointsWg.Done()
        rc.checkpointsWg.Wait()
        panic(&#34;forcing failure due to FailIfStatusBecomes&#34;)
    }
    goto RETURN2; __badTypeFailIfStatusBecomes: __fp_FailIfStatusBecomes.BadType(vFailIfStatusBecomes, &#34;int&#34;); };
    
/* gofail-label */ RETURN2:</code></pre></div><h3>gofail 使用中遇到的问题</h3><ul><li>使用注释的方式在代码中注入 failpoint，代码容易出错，并且没有编译器检测。</li><li>只能全局生效，大型项目为了缩短自动化测试的时间会引入并行测试，不同并行任务之间会存在干扰。</li><li>需要写一些 hack 代码来避免一些不必要的错误日志，比如如上代码，必须要写 <code>// goto RETURN2</code> 和 <code>// gofail: RETURN2:</code>，并且中间必须添加一个空行，至于原因可以看 generated code 逻辑。</li></ul><h2>我们要设计一个什么样子的 failpoint？</h2><h3>理想的 failpoint 实现应该是什么样子？</h3><p>理想中的 failpoint 应该是使用代码定义并且对业务逻辑无侵入，如果在一个支持宏的语言中 (比如 Rust)，我们可以定义一个 <code>fail_point</code> 宏来定义 failpoint：</p><div class="highlight"><pre><code class="language-text">fail_point!(&#34;transport_on_send_store&#34;, |sid| if let Some(sid) = sid {
    let sid: u64 = sid.parse().unwrap();
    if sid == store_id {
        self.raft_client.wl().addrs.remove(&amp;store_id);
    }
})</code></pre></div><p>但是我们遇到了一些问题：</p><ul><li>Golang 并不支持 macro 语言特性。</li><li>Golang 不支持编译器插件。</li><li>Golang tags 也不能提供一个比较优雅的实现 (<code>go build --tag=&#34;enable-failpoint-a&#34;</code>)。</li></ul><h3>Failpoint 设计准则</h3><ul><li>使用 Golang 代码定义 failpoint，而不是注释或其他形式。</li><li>Failpoint 代码不应该有任何额外开销：</li><ul><li>不能影响正常功能逻辑，不能对功能代码有任何侵入。</li><li>注入 failpoint 代码之后不能导致性能回退。</li><li>Failpoint 代码最终不能出现在最终发行的二进制文件中。</li></ul><li>Failpoint 代码必须是易读、易写并且能引入编译器检测。</li><li>最终生成的代码必须具有可读性。</li><li>生成代码中，功能逻辑代码的行号不能发生变化（便于调试）。</li><li>支持并行测试，可以通过 <code>context.Context</code> 控制一个某个具体的 failpoint 是否激活。</li></ul><h3>Golang 如何实现一个类似 failpoint 宏？</h3><p>宏的本质是什么？如果追本溯源，发现其实可以通过 AST 重写在 Golang 中实现满足以上条件的 failpoint，原理如下图所示：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-e5020c7090df7d820cbe00563fddd42d_b.jpg" data-caption="" data-size="normal" data-rawwidth="2260" data-rawheight="1478" class="origin_image zh-lightbox-thumb" width="2260" data-original="https://pic2.zhimg.com/v2-e5020c7090df7d820cbe00563fddd42d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-e5020c7090df7d820cbe00563fddd42d_b.jpg" data-caption="" data-size="normal" data-rawwidth="2260" data-rawheight="1478" class="origin_image zh-lightbox-thumb lazy" width="2260" data-original="https://pic2.zhimg.com/v2-e5020c7090df7d820cbe00563fddd42d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-e5020c7090df7d820cbe00563fddd42d_b.jpg"/></figure><p>对于任何一个 Golang 代码的源文件，可以通过解析出这个文件的语法树，遍历整个语法树，找出所有 failpoint 注入点，然后对语法树重写，转换成想要的逻辑。</p><h2>相关概念</h2><h3>Failpoint</h3><p>Failpoint 是一个代码片段，并且仅在对应的 failpoint name 激活的情况下才会执行，如果通过 <code>failpoint.Disable(&#34;failpoint-name-for-demo&#34;)</code> 禁用后， 那么对应的的 failpoint 永远不会触发。所有 failpoiint 代码片段不会编译到最终的二进制文件中，比如我们模拟文件系统权限控制：</p><div class="highlight"><pre><code class="language-text">func saveTo(path string) error {
    failpoint.Inject(&#34;mock-permission-deny&#34;, func() error {
         // It&#39;s OK to access outer scope variable
         return fmt.Errorf(&#34;mock permission deny: %s&#34;, path)
    })
}</code></pre></div><h3>Marker 函数</h3><p>AST 重写阶段标记需要被重写的部分，主要有以下功能：</p><ul><li>提示 Rewriter 重写为一个相等的 IF 语句。</li><ul><li>标记函数的参数是重写过程中需要用到的参数。</li><li>标记函数是一个空函数，编译过程会被 inline，进一步被消除。</li><li>标记函数中注入的 failpoint 是一个闭包，如果闭包访问外部作用于变量，闭包语法允许捕获外部作用域变量，不会出现编译错误， 同时转换后的的代码是一个 IF 语句，IF 语句访问外部作用域变量不会产生任何问题，所以闭包捕获只是为了语法合法，最终不会有任何额外开销。</li></ul><li>简单、易读、易写。</li><li>引入编译器检测，如果 Marker 函数的参数不正确，程序不能通过编译的，进而保证转换后的代码正确性。</li></ul><p>目前支持的 Marker 函数列表：</p><ul><li><code>func Inject(fpname string</code>, <code>fpblock func(val Value)) {}</code></li><li><code>func InjectContext(fpname string</code>, <code>ctx context.Context</code>, <code>fpblock func(val Value)) {}</code></li><li><code>func Break(label ...string) {}</code></li><li><code>func Goto(label string) {}</code></li><li><code>func Continue(label ...string) {}</code></li><li><code>func Fallthrough() {}</code></li><li><code>func Return(results ...interface{}) {}</code></li><li><code>func Label(label string) {}</code></li></ul><h2>如何在你的程序中使用 failpoint 进行注入？</h2><p><b>最简单的方式是使用</b> <b><code>failpoint.Inject</code></b> <b>在调用的地方注入一个 failpoint，最终</b> <b><code>failpoint.Inject</code></b> <b>调用会重写为一个 IF 语句， 其中</b> <b><code>mock-io-error</code></b> <b>用来判断是否触发，<code>failpoint-closure</code></b> <b>中的逻辑会在触发后执行。</b> 比如我们在一个读取文件的函数中注入一个 IO 错误：</p><div class="highlight"><pre><code class="language-text">failpoint.Inject(&#34;mock-io-error&#34;, func(val failpoint.Value) error {
    return fmt.Errorf(&#34;mock error: %v&#34;, val.(string))
})</code></pre></div><p>最终转换后的代码如下：</p><div class="highlight"><pre><code class="language-text">if ok, val := failpoint.Eval(_curpkg_(&#34;mock-io-error&#34;)); ok {
    return fmt.Errorf(&#34;mock error: %v&#34;, val.(string))
}</code></pre></div><p>通过 <code>failpoint.Enable(&#34;mock-io-error&#34;, &#34;return(&#34;disk error&#34;)&#34;)</code> 激活程序中的 failpoint，如果需要给 <code>failpoint.Value</code> 赋一个自定义的值，则需要传入一个 failpoint expression，比如这里 <code>return(&#34;disk error&#34;)</code>，更多语法可以参考 <a href="https://link.zhihu.com/?target=http%3A//www.freebsd.org/cgi/man.cgi%3Fquery%3Dfail" class=" wrap external" target="_blank" rel="nofollow noreferrer">failpoint语法</a>。</p><p><b>闭包可以为</b> <b><code>nil</code></b> <b>，比如</b> <b><code>failpoint.Enable(&#34;mock-delay&#34;, &#34;sleep(1000)&#34;)</code>，目的是在注入点休眠一秒，不需要执行额外的逻辑。</b></p><div class="highlight"><pre><code class="language-text">failpoint.Inject(&#34;mock-delay&#34;, nil)
failpoint.Inject(&#34;mock-delay&#34;, func(){})</code></pre></div><p>最终会产生以下代码：</p><div class="highlight"><pre><code class="language-text">failpoint.Eval(_curpkg_(&#34;mock-delay&#34;))
failpoint.Eval(_curpkg_(&#34;mock-delay&#34;))</code></pre></div><p><b>如果我们只想在 failpoint 中执行一个 panic，不需要接收</b> <b><code>failpoint.Value</code>，则我们可以在闭包的参数中忽略这个值。</b> 例如：</p><div class="highlight"><pre><code class="language-text">failpoint.Inject(&#34;mock-panic&#34;, func(_ failpoint.Value) error {
    panic(&#34;mock panic&#34;)
})
// OR
failpoint.Inject(&#34;mock-panic&#34;, func() error {
    panic(&#34;mock panic&#34;)
})</code></pre></div><p>最佳实践是以下这样：</p><div class="highlight"><pre><code class="language-text">failpoint.Enable(&#34;mock-panic&#34;, &#34;panic&#34;)
failpoint.Inject(&#34;mock-panic&#34;, nil)
// GENERATED CODE
failpoint.Eval(_curpkg_(&#34;mock-panic&#34;))</code></pre></div><p><b>为了可以在并行测试中防止不同的测试任务之间的干扰，可以在</b> <b><code>context.Context</code></b> <b>中包含一个回调函数，用于精细化控制 failpoint 的激活与关闭</b> ：</p><div class="highlight"><pre><code class="language-text">failpoint.InjectContext(ctx, &#34;failpoint-name&#34;, func(val failpoint.Value) {
    fmt.Println(&#34;unit-test&#34;, val)
})</code></pre></div><p>转换后的代码：</p><div class="highlight"><pre><code class="language-text">if ok, val := failpoint.EvalContext(ctx, _curpkg_(&#34;failpoint-name&#34;)); ok {
    fmt.Println(&#34;unit-test&#34;, val)
}</code></pre></div><p><b>使用</b> <b><code>failpoint.WithHook</code></b> <b>的示例</b>：</p><div class="highlight"><pre><code class="language-text">func (s *dmlSuite) TestCRUDParallel() {
    sctx := failpoint.WithHook(context.Backgroud(), func(ctx context.Context, fpname string) bool {
        return ctx.Value(fpname) != nil // Determine by ctx key
    })
    insertFailpoints = map[string]struct{} {
        &#34;insert-record-fp&#34;: {},
        &#34;insert-index-fp&#34;: {},
        &#34;on-duplicate-fp&#34;: {},
    }
    ictx := failpoint.WithHook(context.Backgroud(), func(ctx context.Context, fpname string) bool {
        _, found := insertFailpoints[fpname] // Only enables some failpoints.
        return found
    })
    deleteFailpoints = map[string]struct{} {
        &#34;tikv-is-busy-fp&#34;: {},
        &#34;fetch-tso-timeout&#34;: {},
    }
    dctx := failpoint.WithHook(context.Backgroud(), func(ctx context.Context, fpname string) bool {
        _, found := deleteFailpoints[fpname] // Only disables failpoints. 
        return !found
    })
    // other DML parallel test cases.
    s.RunParallel(buildSelectTests(sctx))
    s.RunParallel(buildInsertTests(ictx))
    s.RunParallel(buildDeleteTests(dctx))
}</code></pre></div><p><b>如果我们在循环中使用 failpoint，可能我们会使用到其他的 Marker 函数</b>：</p><div class="highlight"><pre><code class="language-text">failpoint.Label(&#34;outer&#34;)
for i := 0; i &lt; 100; i++ {
    inner:
        for j := 0; j &lt; 1000; j++ {
            switch rand.Intn(j) + i {
            case j / 5:
                failpoint.Break()
            case j / 7:
                failpoint.Continue(&#34;outer&#34;)
            case j / 9:
                failpoint.Fallthrough()
            case j / 10:
                failpoint.Goto(&#34;outer&#34;)
            default:
                failpoint.Inject(&#34;failpoint-name&#34;, func(val failpoint.Value) {
                    fmt.Println(&#34;unit-test&#34;, val.(int))
                    if val == j/11 {
                        failpoint.Break(&#34;inner&#34;)
                    } else {
                        failpoint.Goto(&#34;outer&#34;)
                    }
                })
        }
    }
}</code></pre></div><p>以上代码最终会重写为如下代码：</p><div class="highlight"><pre><code class="language-text">outer:
    for i := 0; i &lt; 100; i++ {
    inner:
        for j := 0; j &lt; 1000; j++ {
            switch rand.Intn(j) + i {
            case j / 5:
                break
            case j / 7:
                continue outer
            case j / 9:
                fallthrough
            case j / 10:
                goto outer
            default:
                if ok, val := failpoint.Eval(_curpkg_(&#34;failpoint-name&#34;)); ok {
                    fmt.Println(&#34;unit-test&#34;, val.(int))
                    if val == j/11 {
                        break inner
                    } else {
                        goto outer
                    }
                }
            }
        }
    }</code></pre></div><p><b>对于为什么会有 label, break, continue 和 fallthrough 相关 Marker 函数保持疑问，为什么不直接使用关键字？</b></p><ul><li>Golang 中如果某个变量或则标签未使用，是不能通过编译的。</li></ul><div class="highlight"><pre><code class="language-text">label1: // compiler error: unused label1
    failpoint.Inject(&#34;failpoint-name&#34;, func(val failpoint.Value) {
        if val.(int) == 1000 {
            goto label1 // illegal to use goto here
        }
        fmt.Println(&#34;unit-test&#34;, val)
    })</code></pre></div><ul><li>break 和 continue 只能在循环上下文中使用，在闭包中使用。</li></ul><h3>一些复杂的注入示例</h3><p><b>示例一：在 IF 语句的 INITIAL 和 CONDITIONAL 中注入 failpoint</b></p><div class="highlight"><pre><code class="language-text">if a, b := func() {
    failpoint.Inject(&#34;failpoint-name&#34;, func(val failpoint.Value) {
        fmt.Println(&#34;unit-test&#34;, val)
    })
}, func() int { return rand.Intn(200) }(); b &gt; func() int {
    failpoint.Inject(&#34;failpoint-name&#34;, func(val failpoint.Value) int {
        return val.(int)
    })
    return rand.Intn(3000)
}() &amp;&amp; b &lt; func() int {
    failpoint.Inject(&#34;failpoint-name-2&#34;, func(val failpoint.Value) {
        return rand.Intn(val.(int))
    })
    return rand.Intn(6000)
}() {
    a()
    failpoint.Inject(&#34;failpoint-name-3&#34;, func(val failpoint.Value) {
        fmt.Println(&#34;unit-test&#34;, val)
    })
}</code></pre></div><p>上面的代码最终会被重写为：</p><div class="highlight"><pre><code class="language-text">if a, b := func() {
    if ok, val := failpoint.Eval(_curpkg_(&#34;failpoint-name&#34;)); ok {
        fmt.Println(&#34;unit-test&#34;, val)
    }
}, func() int { return rand.Intn(200) }(); b &gt; func() int {
    if ok, val := failpoint.Eval(_curpkg_(&#34;failpoint-name&#34;)); ok {
        return val.(int)
    }
    return rand.Intn(3000)
}() &amp;&amp; b &lt; func() int {
    if ok, val := failpoint.Eval(_curpkg_(&#34;failpoint-name-2&#34;)); ok {
        return rand.Intn(val.(int))
    }
    return rand.Intn(6000)
}() {
    a()
    if ok, val := failpoint.Eval(_curpkg_(&#34;failpoint-name-3&#34;)); ok {
        fmt.Println(&#34;unit-test&#34;, val)
    }
}</code></pre></div><p><b>示例二：在 SELECT 语句的 CASE 中注入 failpoint 来动态控制某个 case 是否被阻塞</b></p><div class="highlight"><pre><code class="language-text">func (s *StoreService) ExecuteStoreTask() {
    select {
    case &lt;-func() chan *StoreTask {
        failpoint.Inject(&#34;priority-fp&#34;, func(_ failpoint.Value) {
            return make(chan *StoreTask)
        })
        return s.priorityHighCh
    }():
        fmt.Println(&#34;execute high priority task&#34;)

    case &lt;- s.priorityNormalCh:
        fmt.Println(&#34;execute normal priority task&#34;)

    case &lt;- s.priorityLowCh:
        fmt.Println(&#34;execute normal low task&#34;)
    }
}</code></pre></div><p>上面的代码最终会被重写为：</p><div class="highlight"><pre><code class="language-text">func (s *StoreService) ExecuteStoreTask() {
    select {
    case &lt;-func() chan *StoreTask {
        if ok, _ := failpoint.Eval(_curpkg_(&#34;priority-fp&#34;)); ok {
            return make(chan *StoreTask)
        })
        return s.priorityHighCh
    }():
        fmt.Println(&#34;execute high priority task&#34;)

    case &lt;- s.priorityNormalCh:
        fmt.Println(&#34;execute normal priority task&#34;)

    case &lt;- s.priorityLowCh:
        fmt.Println(&#34;execute normal low task&#34;)
    }
}</code></pre></div><p><b>示例三：动态注入 SWITCH CASE</b></p><div class="highlight"><pre><code class="language-text">switch opType := operator.Type(); {
case opType == &#34;balance-leader&#34;:
    fmt.Println(&#34;create balance leader steps&#34;)

case opType == &#34;balance-region&#34;:
    fmt.Println(&#34;create balance region steps&#34;)

case opType == &#34;scatter-region&#34;:
    fmt.Println(&#34;create scatter region steps&#34;)

case func() bool {
    failpoint.Inject(&#34;dynamic-op-type&#34;, func(val failpoint.Value) bool {
        return strings.Contains(val.(string), opType)
    })
    return false
}():
    fmt.Println(&#34;do something&#34;)

default:
    panic(&#34;unsupported operator type&#34;)
}</code></pre></div><p>以上代码最终会重写为如下代码：</p><div class="highlight"><pre><code class="language-text">switch opType := operator.Type(); {
case opType == &#34;balance-leader&#34;:
    fmt.Println(&#34;create balance leader steps&#34;)

case opType == &#34;balance-region&#34;:
    fmt.Println(&#34;create balance region steps&#34;)

case opType == &#34;scatter-region&#34;:
    fmt.Println(&#34;create scatter region steps&#34;)

case func() bool {
    if ok, val := failpoint.Eval(_curpkg_(&#34;dynamic-op-type&#34;)); ok {
        return strings.Contains(val.(string), opType)
    }
    return false
}():
    fmt.Println(&#34;do something&#34;)

default:
    panic(&#34;unsupported operator type&#34;)
}</code></pre></div><p>除了上面的例子之外，还可以写的更加复杂的情况：</p><ul><li>循环的 INITIAL 语句, CONDITIONAL 表达式，以及 POST 语句</li><li>FOR RANGE 语句</li><li>SWITCH INITIAL 语句</li><li>Slice 的构造和索引</li><li>结构体动态初始化</li><li>……</li></ul><p>实际上，任何你可以调用函数的地方都可以注入 failpoint，所以请发挥你的想象力。</p><h2>Failpoint 命名最佳实践</h2><p>上面生成的代码中会自动添加一个 <code>_curpkg_</code> 调用在 <code>failpoint-name</code> 上，是因为名字是全局的，为了避免命名冲突，所以会在最终的名字包包名，<code>_curpkg_</code> 相当一个宏，在运行的时候自动使用包名进行展开。你并不需要在自己的应用程序中实现 <code>_curpkg_</code>，它在 <code>failpoint-ctl enable</code> 的自动生成以及自动添加，并在 <code>failpoint-ctl disable</code> 的时候被删除。</p><div class="highlight"><pre><code class="language-text">package ddl // ddl’s parent package is `github.com/pingcap/tidb`

func demo() {
	// _curpkg_(&#34;the-original-failpoint-name&#34;) will be expanded as `github.com/pingcap/tidb/ddl/the-original-failpoint-name`
	if ok, val := failpoint.Eval(_curpkg_(&#34;the-original-failpoint-name&#34;)); ok {...}
}</code></pre></div><p>因为同一个包下面的所有 failpoint 都在同一个命名空间，所以需要小心命名来避免命名冲突，这里有一些推荐的规则来改善这种情况：</p><ul><li>保证名字在包内是唯一的。</li><li>使用一个自解释的名字。</li><ul><li>可以通过环境变量来激活 failpoint： </li></ul></ul><div class="highlight"><pre><code class="language-text">GO_FAILPOINTS=&#34;github.com/pingcap/tidb/ddl/renameTableErr=return(100);github.com/pingcap/tidb/planner/core/illegalPushDown=return(true);github.com/pingcap/pd/server/schedulers/balanceLeaderFailed=return(true)&#34;</code></pre></div><h2>致谢</h2><ul><li>感谢 <a href="https://link.zhihu.com/?target=https%3A//github.com/etcd-io/gofail" class=" wrap external" target="_blank" rel="nofollow noreferrer">gofail</a> 提供最初实现，给我们提供了灵感，让我们能站在巨人的肩膀上对 failpoint 进行迭代。</li><li>感谢 FreeBSD 定义 <a href="https://link.zhihu.com/?target=http%3A//www.freebsd.org/cgi/man.cgi%3Fquery%3Dfail" class=" wrap external" target="_blank" rel="nofollow noreferrer">语法规范</a>。</li></ul><p>最后，欢迎大家和我们交流讨论，一起完善 <a href="https://link.zhihu.com/?target=https%3A//github.com/pingcap/failpoint" class=" wrap external" target="_blank" rel="nofollow noreferrer">Failpoint 项目</a>。</p>