<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>TiDB 的后花园</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Fri, 14 Feb 2020 19:51:19 +0800</lastBuildDate>
<item>
<title>为了证明它的速度，一口气对比了 Oracle、MySQL、MariaDB、Greenplum ...</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-02-14-106688537.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/106688537&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fffa8aeb540f3a8dd71170445a1d41c3_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/10x-improving-analytical-processing-ability-of-tidb-with-tiflash/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;上篇文章&lt;/a&gt; 中，我们简单介绍了 TiFlash 的设计和架构，TiFlash 是即将随着 TiDB 3.1 版本发布（3月）的列存引擎，大幅提升了 TiDB 在实时分析场景下的性能。同时和 TiDB 体系无缝结合，可实时更新，弹性扩展，保持 TiDB 的 ACID 事务特性和快照隔离级别，可用于严肃场景的实时分析。&lt;/blockquote&gt;&lt;h2&gt;那么 TiFlash 到底有多快？&lt;/h2&gt;&lt;p&gt;为了更直观回答这个问题，我们用最新版本的 TiFlash 进行了一次全新的对比测试。测试选取了传统交易型数据库（及其列存扩展），分析型数据库和大数据计算引擎进行对比，分别是 &lt;b&gt;Oracle、MySQL、MariaDB ColumnStore、Greenplum 和 Apache Spark。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;其中 MySQL 可以承担在线交易业务，但是分析速度对比针对分析场景特化的产品就相当堪忧；而列存数据库则无法承担在线交易，无论是无更实时新存储结构还是高频少量数据访问性能都很难符合在线交易业务要求。&lt;/p&gt;&lt;p&gt;&lt;b&gt;而 TiDB 作为 HTAP 数据库，在交易场景已经大量验证的前提下，加上 TiFlash 后在分析侧又能达到怎样的性能呢？借助 TiFlash 的一致性数据同步特型，用户可否以一个优异的速度直接对实时数据进行分析呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这次我们一起来看一组来自美国交通部的有趣数据，它包含了从 1987 至今的飞机起降和准点情况。 大家可以使用 Percona Lab 的 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Percona-Lab/ontime-airline-performance/blob/master/download.sh&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;下载脚本&lt;/a&gt; 获取数据集。数据集总共为一亿八千多万行飞机起降记录。数据集的表结构在 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.github.com/ilovesoup/1806fd87a8aed66bb058ff64b5286194&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;测试所用查询见后文，我们先来看看对比结果：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8c5ee5b7499638c68ebf8a2225a10c49_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;525&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-8c5ee5b7499638c68ebf8a2225a10c49_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8c5ee5b7499638c68ebf8a2225a10c49_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;525&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-8c5ee5b7499638c68ebf8a2225a10c49_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-8c5ee5b7499638c68ebf8a2225a10c49_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5f28fbbca96d1ead8b78b7b58abf3889_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;470&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic2.zhimg.com/v2-5f28fbbca96d1ead8b78b7b58abf3889_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5f28fbbca96d1ead8b78b7b58abf3889_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;470&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic2.zhimg.com/v2-5f28fbbca96d1ead8b78b7b58abf3889_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5f28fbbca96d1ead8b78b7b58abf3889_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;blockquote&gt; 注：为了不影响比例，上图忽略了 MySQL 和 Oracle 数据。&lt;/blockquote&gt;&lt;p&gt;从上面的对比可以看出，&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;相对 MySQL 而言，单机环境下可达到数百倍提升（更不用提 TiFlash 可扩展）；&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;而对比 MPP 数据库或者新 MariaDB ColumnStore 等无法实时更新的分析型数据库 / 引擎，仍然可达数倍乃至十倍的性能提升。&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如下十条为测试分析查询所用的 SQL。&lt;/p&gt;&lt;p&gt;&lt;b&gt;查询 1：平均每月航班起降记录数&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 2：2000 年到 2008 年的每日航班数&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayofweek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayofweek&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 3：按星期统计 2000 年到 2008 年延误（10 分钟以上，下同）的航班数&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayofweek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depdelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayofweek&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 4：按出发机场统计 2000 年到 2008 年延误数&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depdelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 5：按照航空公司统计 2007 年延误数&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depdelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2007&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 6：按照航空公司统计 2007 年延误比例&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depdelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2007&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2007&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 7：按照航空公司统计 2000 到 2008 年延误比例&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depdelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 8：按年统计航班延误率&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depdelay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 9：每年航班数&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;查询 10：多维度复杂过滤和聚合&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrdelayminutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flights_delayed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrdelayminutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayofweek&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originstate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;vi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deststate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ak&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;vi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flightdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carrier&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1990&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;真 · 行列混合&lt;/h2&gt;&lt;p&gt;&lt;b&gt;别忘了还有行存。TiDB 不但拥有 TiFlash 列存引擎，也同时拥有相应的行存和配套的细粒度索引支持。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;对于唯一值个数非常高的列（例如一个具体的时间，产品唯一序列号等等），一般来说列存很难有良好的手段进行精确过滤。例如在上述 OnTime 数据集中，对 CRSDepTime 计划起飞时间列进行索引，同样的查询还能变得更快。&lt;/p&gt;&lt;p&gt;统计所有在 18:45 分计划起飞的飞机总数。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ontime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1845&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CRSDepTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------+
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------+
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;766539&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----------+
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;而纯粹使用列存，在 MariaDB，Spark 以及 Greenplum 中，这样的查询分别是 0.447 vs 0.449 以及 1.576 秒——与 TiDB + TiFlash 存在 4 至 17 倍速度差！因为他们必须暴力扫表。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;除此以外，TiDB 的行列混合并不是传统设计上的行存列存二选一，而是 TiDB 可以在同一张表同时拥有行存和列存，且两者永远保持数据强一致（而非最终一致）。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;看到这里也许你要问，TiDB 同时拥有行存和列存是否反而会给用户带来心智负担？答案是并不会。何时使用行存或者列存，除了用户可以为了 HTAP 业务隔离而强制选择以外，你完全可以委托给 TiDB 自行选择。当行存更优（例如上面的案例），TiDB 则会凭借统计信息自动切换到行存进行读取：上面的查询在 TiFlash 上的性能只有 TiKV 行存 + 索引的一半。&lt;/p&gt;&lt;h2&gt;更快的数据到达&lt;/h2&gt;&lt;p&gt;由于为配合 TiDB 数据镜像同步而设计的可高频更新列存引擎，使得 TiFlash 得以高速更新数据。&lt;b&gt;这使得它的「快」不仅仅是「高速返回查询」，也意味着「数据能更快被查询到」。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;相较于传统的分析型数据库或者 Hadoop 数据湖需要从源数据库 T + 1 批量加载（往往是一天），TiFlash 的可以读取到最新的（而非仅仅是新鲜的）数据，且你无需关心数据到达乱序或者一致性问题。&lt;b&gt;相比维护额外的数据复制作业，你不但精简了架构，也可以更实时地访问数据。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;何不试试看？&lt;/h2&gt;&lt;p&gt;另外，&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/10x-improving-analytical-processing-ability-of-tidb-with-tiflash/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TiFlash 上线测试非常简单&lt;/a&gt;，你可以使用一两台现成的机器进行测试，简单一两条命令，上线 TiFlash 节点，添加列存副本，等副本同步完成之后就可以看到效果，绿色无害。TiFlash 已经在进行第一轮用户测试，并在 3 月会开启开放公测，请关注后续信息，也欢迎联系询问提前体验 &lt;b&gt;maxiaoyu@pingcap.com&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt; 附本文测试环境&lt;br/&gt; 由于部分测试对象不支持集群模式，测试环境为单机（但是借助 TiDB 的可扩展体系，TiFlash 也可以进行无缝线性扩展）。测试机规格和配置如下：&lt;br/&gt; CPU: 40 vCores, Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz @ 1268.383 MHz Mem: 188G @ 2133 MHz&lt;br/&gt; &lt;br/&gt; 1 x NVMe SSD 3.6T &lt;br/&gt; &lt;br/&gt; OS: centos-release-7-6.1810.2.el7.centos.x86_64&lt;br/&gt; &lt;br/&gt; Filesystem: ext4&lt;br/&gt; &lt;br/&gt; TiKV Region Size: 512M&lt;br/&gt; &lt;br/&gt; Greenplum 16 Segments (DISTRIBUTED RANDOMLY)&lt;br/&gt; &lt;br/&gt; Oracle noparallel &lt;/blockquote&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-02-14-106688537</guid>
<pubDate>Fri, 14 Feb 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>TiDB 在马上消费金融核心账务系统归档及跑批业务下的实践</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-02-12-106390958.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/106390958&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e424f496d04345120d27f6765142fd81_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;b&gt;作者介绍：&lt;/b&gt;&lt;br/&gt; 康文权，马上消费金融总账高级研发工程师。&lt;br/&gt; 李银龙，原腾讯云运维工程师，马上消费金融容器云 TiDB 负责人，西南区 TUG Leader。&lt;br/&gt; &lt;/blockquote&gt;&lt;h2&gt;背景介绍&lt;/h2&gt;&lt;p&gt;马上消费金融于 2015 年 6 月营业，截止到 2020 年 1 月，历经 4 年多风雨，总注册用户数 8000 万，活跃用户数 2500 万，累计放贷 2900 多亿元人民币。公司于 2018 年 6 月增资到 40 亿，成为内资第一大的消费金融公司。&lt;/p&gt;&lt;p&gt;在业务爆发式增长的 4 年多里，马上消费金融的数据库经历了从单表数十 GB 到数百 GB 的过程，单表的数据量正在往 TB 级别演进。基于数据量的升级变迁，我们的数据库也经历了 2 次架构迭代，并在探索&lt;/p&gt;&lt;p&gt;第三代数据库架构：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;第一代数据库架构&lt;/b&gt;——核心系统以 Oracle 为主，MySQL 为辅的时代。&lt;/li&gt;&lt;li&gt;&lt;b&gt;第一代数据库架构&lt;/b&gt;——核心系统以 Oracle 为主，MySQL 为辅的时代。&lt;/li&gt;&lt;li&gt;&lt;b&gt;第三代数据库架构&lt;/b&gt;——核心系统以 MySQL 结合 NewSQL 为主，NewSQL、MySQL、NoSQL 并存的时代。&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-049cee32cfb424f7a1199c8afbf85afa_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;769&quot; data-rawheight=&quot;174&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;769&quot; data-original=&quot;https://pic3.zhimg.com/v2-049cee32cfb424f7a1199c8afbf85afa_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-049cee32cfb424f7a1199c8afbf85afa_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;769&quot; data-rawheight=&quot;174&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;769&quot; data-original=&quot;https://pic3.zhimg.com/v2-049cee32cfb424f7a1199c8afbf85afa_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-049cee32cfb424f7a1199c8afbf85afa_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;马上金融第二代数据库架构痛点&lt;/h2&gt;&lt;h3&gt;&lt;b&gt;海量数据 OLTP 场景需求&lt;/b&gt;痛点&lt;/h3&gt;&lt;p&gt;截止目前账务系统的核心表累计数据量已达到单表 15 亿行以上，还在高速增长中。监管要求金融行业历史数据至少保留 5 年以上。这给数据库系统带来了巨大挑战：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;海量的历史交易与账务数据堆积在 MySQL 数据库中，使数据库臃肿不堪，维护困难&lt;/b&gt;（在线 DDL 变更、数据迁移、磁盘容量瓶颈、磁盘 IO 瓶颈等）。&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 用户对历史交易订单的查询（OLTP 场景）是必备功能，这些海量的历史数据会根据用户需求通过 Web 页面、APP 终端等渠道进行实时查询（内部、外部用户）。&lt;b&gt;此场景决定了不能通过传统的离线大数据方案来满足需求。需要一种偏向于前台、中台的数据治理方案&lt;/b&gt;。&lt;br/&gt; &lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;传统分库分表解决方案痛点&lt;/h3&gt;&lt;p&gt;根据马上金融的经验，MySQL 单表在 5000 万行以内时，性能较好，单表超过 5000万行后，数据库性能、可维护性都会极剧下降。当我们的核心账务系统数据库单表超过 100GB 后（截止 2018 年 10 月该表累计已达到 528GB），经技术架构团队、业务需求团队联合调研后，选择了 sharding-jdbc 作为分库分表的技术方案。&lt;/p&gt;&lt;p&gt;&lt;b&gt;此方案的优点非常明显，列举如下：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt; 将大表拆分成小表，单表数据量控制在 5000 万行以内，使 MySQL 性能稳定可控。&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 将单张大表拆分成小表后，能水平扩展，通过部署到多台服务器，提升整个集群的 QPS、TPS、latency 等数据库服务指标。&lt;br/&gt; &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;但是，此方案的缺点也非常明显：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt; 分表跨实例后，产生分布式事务管理难题，一旦数据库服务器宕机，有事务不一致风险。&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 分表后，对 SQL 语句有一定限制，对业务方功能需求大打折扣。尤其对于实时报表统计类需求，限制非常之大。事实上，报表大多都是提供给高层领导使用的，其重要性不言而喻。&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 分表后，需要维护的对象呈指数增长（MySQL 实例数、需要执行的 SQL 变更数量等）。&lt;br/&gt; &lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;传统 MySQL 在线 DDL 痛点&lt;/h3&gt;&lt;p&gt;对超过账务系统的 528GB 大表分库表成 16 张表之后，每张表有 33GB，仍然是大表。我们采用了 gh-ost 工具进行加字段 DDL 操作，&lt;b&gt;但是，业务仍然会有轻微感知。因此，必须要将大表的 DDL 操作放到凌晨来做，对业务的 7*24 小时服务有较大限制。&lt;/b&gt;&lt;/p&gt;&lt;h3&gt;原生 MySQL 的 HA 机制不完善痛点&lt;/h3&gt;&lt;p&gt;MySQL 的集群基于 Binlog 主从异步复制来做，切集群主从角色以 instance 为单位，非常僵化。一旦主库出现故障，需要人工重建 MySQL 集群主从关系（也可以把人工操作落地成程序，比如 MHA 方案），截止目前（2020 年 1 月）&lt;b&gt;原生 MySQL 仍然没有成熟可靠基于 Binlog 异步复制的 HA 方案。基于 Binlog 异步复制的 MySQL 主从架构实现金融级高可用有其本质困难。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;马上金融 NewSQL 技术选型&lt;/h2&gt;&lt;p&gt;基于马上金融第二代数据库架构的核心痛点，我们需要探索新的数据库技术方案来应对业务爆发式增长所带来的挑战，为业务提供更好的数据库服务支撑。&lt;/p&gt;&lt;p&gt;恰逢 NewSQL 愈渐火热，引起了我们的极大关注。NewSQL 技术有如下显著特点:&lt;/p&gt;&lt;ul&gt;&lt;li&gt; 无限水平扩展能力&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 在线 DDL 操作不锁表&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 分布式强一致性，确保金融数据 100% 安全&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 完整的分布式事务处理能力与 ACID 特性 &lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在账务系统研发团队、公共平台研发团队、DBA 团队等联合推动下，我们开始对 NewSQL 技术进行调研选型。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-04e801bc1c468d7fa0e93ff872d14c3c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;492&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;492&quot; data-original=&quot;https://pic1.zhimg.com/v2-04e801bc1c468d7fa0e93ff872d14c3c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-04e801bc1c468d7fa0e93ff872d14c3c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;492&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;492&quot; data-original=&quot;https://pic1.zhimg.com/v2-04e801bc1c468d7fa0e93ff872d14c3c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-04e801bc1c468d7fa0e93ff872d14c3c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在 GitHub的活跃度及社区贡献者方面，TiDB 与 CockcoachDB(CRDB) 都是国际化的全球开源级项目，是 NewSQL 行业中的代表性产品。&lt;/p&gt;&lt;p&gt;由于马上金融的应用绝大部分对 MySQL 依赖较高，在协议兼容性方面，我们毫无疑问地将 MySQL 兼容性列为必选项。&lt;/p&gt;&lt;p&gt;TiDB 从项目发起之初就将 MySQL 协议兼容性列为最 basic 的战略目标之一。而 CRDB 在项目发起之初，考虑的是兼容 PostgreSQL 协议。&lt;/p&gt;&lt;p&gt;基于此，我们优先选择了 TiDB 技术产品。&lt;/p&gt;&lt;h2&gt;马上金融实践案例分享（两则）&lt;/h2&gt;&lt;h3&gt;案例一：核心账务系统归档场景&lt;/h3&gt;&lt;p&gt;马上消费金融账务系统归档项目是公司第一个持续实践 TiDB 的项目，也是第一个对 NewSQL 技术提出迫切需求的项目，上线后 TiDB 架构如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-07c046deed1d2353620fb6dc82148b63_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;1044&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1600&quot; data-original=&quot;https://pic4.zhimg.com/v2-07c046deed1d2353620fb6dc82148b63_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-07c046deed1d2353620fb6dc82148b63_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;1044&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1600&quot; data-original=&quot;https://pic4.zhimg.com/v2-07c046deed1d2353620fb6dc82148b63_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-07c046deed1d2353620fb6dc82148b63_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上游分库分表的 8 套 MySQL 集群通过 DM 聚合到一套 TiDB 里，TiDB 对外提供历史归档大表查询服务。&lt;/p&gt;&lt;p&gt;应用架构关键机制：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;读写分离&lt;/b&gt;。通过 sharding-jdbc 实现应用程序读写分离，将历史数据查询请求分发到 TiDB 集群。&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;熔断机制&lt;/b&gt;。应用架构设计了熔断机制，当请求 TiDB 超时或者失败后，会自动将请求重新转发到 MySQL，恢复业务。&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过熔断机制可确保万一 TiDB 出现异常时，能快速恢复业务，确保业务的可用性。&lt;/p&gt;&lt;p&gt;&lt;b&gt;账务 TiDB 集群每天业务高峰期将会承载约 1.3 万 QPS 的请求量（如下图所示），在做活动期间，请求量能冲击到近 3 万 QPS。&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3188ad69bf9c6eb0ad8f43f8def63f00_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;204&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic1.zhimg.com/v2-3188ad69bf9c6eb0ad8f43f8def63f00_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3188ad69bf9c6eb0ad8f43f8def63f00_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;204&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;512&quot; data-original=&quot;https://pic1.zhimg.com/v2-3188ad69bf9c6eb0ad8f43f8def63f00_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-3188ad69bf9c6eb0ad8f43f8def63f00_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;经过接近 1 年的不断优化提升，TiDB 集群表现越来越稳定，大部分请求能在 50ms 内返回：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1d8efcc71cc3c08b0c3838decc9d2854_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;222&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic1.zhimg.com/v2-1d8efcc71cc3c08b0c3838decc9d2854_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1d8efcc71cc3c08b0c3838decc9d2854_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;222&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;512&quot; data-original=&quot;https://pic1.zhimg.com/v2-1d8efcc71cc3c08b0c3838decc9d2854_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-1d8efcc71cc3c08b0c3838decc9d2854_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;研发同事对 TiDB 的 Latency 与 TPS 的性能表现比较满意。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在 2019 年 4 月，账务系统 TiDB 项目已将 MySQL 数据库 2018 年以前的历史数据删除。极大地降低了账务系统 8 套 MySQL 数据库集群的 IO 压力。这部分历史数据仅保存在 TiDB 集群内，对业务提供实时查询支持。&lt;/b&gt;&lt;/p&gt;&lt;h3&gt;案例二：总账跑批业务场景&lt;/h3&gt;&lt;p&gt;&lt;b&gt;马上消费金融总账项目是公司第一个完全运行在 TiDB 的项目，也是第一个从项目上线之初就放弃 MySQL，坚定不移选择 TiDB 的项目。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;总账项目部分模块关键流程示意图如下:&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-68eda154a5bd31e397595388e7a71e10_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;196&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic1.zhimg.com/v2-68eda154a5bd31e397595388e7a71e10_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-68eda154a5bd31e397595388e7a71e10_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;196&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;512&quot; data-original=&quot;https://pic1.zhimg.com/v2-68eda154a5bd31e397595388e7a71e10_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-68eda154a5bd31e397595388e7a71e10_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;马上消费金融总账项目是公司第一个完全运行在 TiDB 的项目，也是第一个从项目上线之初就放弃 MySQL，坚定不移选择 TiDB 的项目。&lt;/p&gt;&lt;p&gt;总账项目部分模块关键流程示意图如下:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;数据量基数大&lt;/b&gt;。总账项目吸纳了公司核心账务系统以及其他关联系统的所有数据，数据基数非常巨大，要求至少 10TB+ 空间，未来 2 年内可能会增长到 20TB 以上。这个基数 MySQL 难以承载。&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;每日批量时限短&lt;/b&gt;。总账项目服务于管理层，每月初呈现公司当月的营收核算等信息。在总账项目数据量基数巨大的前提下，日增量 5 亿到 10 亿，希望每天能在 3 个小时内完成跑批，用 MySQL 单实例跑不下来。而分库分表技术方案对于总账系统出报表需求又具备其客观难题。&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;TiDB 是分布式 NewSQL，计算与存储分离，且计算节点与存储节点都具备水平扩展能力，特别适用于总账项目的大数据量、大吞吐量、高并发量场景。&lt;/p&gt;&lt;p&gt;项目上线已稳定运行半年左右，目前集群规模如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; 8 TB+ 数据量&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 12 POD TiDB 节点&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 24 POD TiKV 节点&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 跑批期间峰值超过 10 万 QPS&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总账项目目前完成了第二期开发，随着项目的继续发展，未来第三期的 ngls 正式接入后，数据量与并发量将再次成倍增长。&lt;/p&gt;&lt;p&gt;总账项目上线后，跑批期间 QPS 如下:&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-216fd8b91a5045b76bdf627d5e93a86a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;193&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic3.zhimg.com/v2-216fd8b91a5045b76bdf627d5e93a86a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-216fd8b91a5045b76bdf627d5e93a86a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;193&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;512&quot; data-original=&quot;https://pic3.zhimg.com/v2-216fd8b91a5045b76bdf627d5e93a86a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-216fd8b91a5045b76bdf627d5e93a86a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;跑批期间的 SQL 响应时间如下:&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6b6380209351d6128b6fceac1fd4b887_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;193&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic4.zhimg.com/v2-6b6380209351d6128b6fceac1fd4b887_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6b6380209351d6128b6fceac1fd4b887_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;193&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;512&quot; data-original=&quot;https://pic4.zhimg.com/v2-6b6380209351d6128b6fceac1fd4b887_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-6b6380209351d6128b6fceac1fd4b887_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;跑批期间的 TiKV CPU 使用率如下:&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-46e3113b165107f88a697ee182757b09_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;258&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic2.zhimg.com/v2-46e3113b165107f88a697ee182757b09_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-46e3113b165107f88a697ee182757b09_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;258&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;512&quot; data-original=&quot;https://pic2.zhimg.com/v2-46e3113b165107f88a697ee182757b09_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-46e3113b165107f88a697ee182757b09_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;跑批期间事务量与性能如下:&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-50500eb665431f06ce2bbae43d9e5dca_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;169&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic3.zhimg.com/v2-50500eb665431f06ce2bbae43d9e5dca_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-50500eb665431f06ce2bbae43d9e5dca_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;169&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;512&quot; data-original=&quot;https://pic3.zhimg.com/v2-50500eb665431f06ce2bbae43d9e5dca_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-50500eb665431f06ce2bbae43d9e5dca_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;马上金融 TiDB 经验总结分享&lt;/h2&gt;&lt;h3&gt;TiDB 切入点经验&lt;/h3&gt;&lt;p&gt;TiDB 是一个新潮的 NewSQL 数据库。想要将 TiDB 运用到生产环境，解决 MySQL 数据库面临的历史难题（而不是把问题搞得更大），并不是一件简单的事情。&lt;/p&gt;&lt;p&gt;时至今日（2020 年 1 月 14 日），TiDB 已经在数千家企业有实践经验，其中不乏大型银行核心系统 TiDB 实践经验。且 TiDB 3.0 GA 之后，TiDB 在性能、稳定性方面比起之前版本都有了很大的提升。&lt;/p&gt;&lt;p&gt;这意味着已经有数千家企业在向 PingCAP 官方反馈 TiDB 的各种问题并持续得到修复。在这样的背景下，TiDB 能在生产环境中稳定运行并持续为企业创造价值已是毋庸置疑。&lt;/p&gt;&lt;p&gt;&lt;b&gt;对于企业而言，当前的关注焦点可能不再是 TiDB 是否稳定可靠，而是怎么才能快速获取到 TiDB 的最佳实践经验，将其纳入企业基础技术栈之内。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;那么，如何才能快速实践 TiDB，积累到第一手经验，使企业尽快享受到 TiDB 带来的福利呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;建议从两个方面切入:&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;选定一个归档项目着手尝试&lt;/b&gt;： 参考我们的账务系统 TiDB 归档技术方案作为企业的切入点。通过此方案，大家可以快速上手 TiDB，在技术风险可控的前提下积累到 TiDB 实践经验。&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;联系官方或者 TUG 组织获取资源&lt;/b&gt;：TiDB 是一个全新的分布式数据库，整个体系架构的相比于 MySQL 要复杂得多。而截止目前（2020 年 1 月 14 日），TiDB 官方提供的文档相比 MySQL 等传统数据库要简陋得多。官方文档是入手 TiDB 的必读资料，但是，仅仅依靠官方文档是不充分的。最好能联系官方同学或者各地的 TUG 组织获得支持。&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;TiDB 服务器硬件实践经验&lt;/h3&gt;&lt;p&gt;从我们过去近两年实践经验看，TiDB 是否能在生产环境运行稳定，硬件规划是至关重要的先决条件之一。其中，硬件规划最重要的环节包括两个：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;存储设备规划。&lt;/b&gt;TiDB 官方建议使用 NVME 协议的 SSD，时至今日（2020 年 1 月 14 日），主流的服务器 NVME 协议接口已不再是 pcie 口，而是 u.2 口。这个是大家都知道的，本无需赘言。真正需要关注的是 SSD 的品牌、型号。我们建议选择 Intel p4510 这一款 SSD，这款 SSD 的读 IOPS 理论值达到 60 万以上、写 IOPS 理论值达到 8 万以上，在生产实践对比结果来看，是 TiDB 的最佳搭档。&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;网络设备规划。&lt;/b&gt;服务器、交换机都采用万兆网卡，比较简单，但非常重要。&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;TiDB 相关软件实践经验&lt;/h3&gt;&lt;p&gt;&lt;b&gt;tidb-server 优化经验&lt;/b&gt;&lt;/p&gt;&lt;p&gt;tidb-server 可能发生性能异常的地方主要是 CBO 统计信息失效问题与索引设计不合理问题。这两个点并非 TiDB 独有的问题，MySQL、Oracle 等也有类似的问题。对于前者，建议对关键表定时做 analyze，以确保统计信息准确性。而索引相关的问题，根据常见的数据库优化技巧处理即可。&lt;b&gt;从 3.0 版本开始，TiDB 支持 SQL 查询计划管理功能（SQL Plan Management），对这类问题提供了另一套解决方案。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;tikv-server 优化经验&lt;/b&gt;&lt;/p&gt;&lt;p&gt;TiKV 第一个最常见的问题是内存消耗过多被 OOM kill 的问题。TiDB 3.0 以后对 TiKV 内存配置做了优化，官方推荐将 block-cache-size 配置成 TiKV 实例占据总内存的 40%，我们在实践中发现，40% 的参数值在数据库压力极大的情况下仍然可能会出现 OOM 现象，需要基于 40% 继续往下调整才能找到与业务场景真正匹配的参数值。&lt;/p&gt;&lt;p&gt;TiKV 另外一个问题是乐观锁适配问题。Oracle、MySQL 采用悲观锁模型，事务在做变更之前需要获取到行锁，然后才能做变更，如果没有获取到行锁，则会排队等待。而 TiDB则相反，采用乐观锁模型，先更新记录，在提交事务时，再做锁冲突检测，如果冲突了，则后提交事务的会话会报错 Write Conflict 错误引起应用程序异常。这个错误需要从 2 个方向进行处理。在 TiDB 3.0 版本下，默认关闭了事务提交重试功能，需要手工设置 tidb_disable_txn_auto_retry 参数，才能打开事务失败重试功能。另外，TiDB 的乐观锁模型决定了其不擅长处理事务冲突较大的场景，比如典型的“计数器”功能，这类场景最好将技术器功能放到第三方软件来实现会比较合适（比如 Redis）。&lt;b&gt;另外，从 3.0 版本开始，TiDB 已经开始支持悲观锁功能，这个功能预计在 4.0 GA，我们也开始了这一块的测试工作。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;DM 实践经验&lt;/b&gt;&lt;/p&gt;&lt;p&gt;到目前为止（2020 年 1 月 14 日），DM 仍然没有发布高可用机制版本，官方正在紧锣密鼓实现高可用机制，我们建议将 TiDB 用做归档场景作为实践 TiDB 的起点，而不将其作为最终的目标。实践 TiDB 的目标是将 TiDB 作为对前台应用提供 OLTP 服务的数据库。&lt;/p&gt;&lt;p&gt;&lt;b&gt;使用 DM 的关键是有效规避 MySQL 到 TiDB 同步的异常问题，使同步能持续稳定运行&lt;/b&gt;。对于刚接触 TiDB 的同学而言，建议从最简化的方式使用 DM:&lt;/p&gt;&lt;ul&gt;&lt;li&gt; 保持 MySQL 到 TiDB 同步的逻辑结构一致。也就是说，MySQL 里的库表是什么样子，DM 同步到 TiDB 就是什么样子。不做分表聚合。分表聚合长期实时同步有其本质困难，不适合作为初学者的目标。&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 语法预验证确保兼容性。TiDB 与 MySQL 是“高度兼容”的，但没有人能承诺 100% 兼容（其他数据库也一样不敢夸口 100% 兼容 MySQL）。也就是说，如果一些生僻的 SQL 语句在 MySQL 上执行成功了，通过 DM 同步到 TiDB，可能会执行失败，引起同步中断异常。这类问题的最好解决方法是先将变更的 SQL 语句在测试环境 TiDB 执行一遍，确保正确后再到生产环境的 MySQL 执行。&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;TiDB 热点数据优化实践经验&lt;/b&gt;&lt;/p&gt;&lt;p&gt;TiDB 根据表主键 ID 做 range 分区，将数据拆分到各个不同的 region 内。当某个 region 的数据量达到最大 size 限制后，将会进行分裂。感性来看，一旦某个 region 分裂成两个 region 后，读写压力也会拆分到两个不同的 region。但是，假设一种场景，当我们不断对一张表进行 insert 操作，而且这张表是自增主键。那么，应用插入的数据永远会落在该表 range 范围最大的 region，永远处于“添油战术”的状态，最大 range 范围的 region 所在的 TiKV 实例一直处于高负载，整个 TiKV 集群的压力无法均摊下去，出现瓶颈。&lt;/p&gt;&lt;p&gt;这类场景在跑批应用中比较常见。我们的优化实践建议如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt; 确保表主键是整形类型。&lt;br/&gt; &lt;/li&gt;&lt;li&gt; 确保表主键离散随机生成，而非自增。&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过以上两种机制能确保批量 insert 操作的写压力随机分摊到各个 region 中去，提升整个集群的吞吐量。&lt;/p&gt;&lt;p&gt;&lt;b&gt;关于 Cloud TiDB 技术方向引子&lt;/b&gt;&lt;/p&gt;&lt;p&gt;坊间传言我们是国内第一家将所有 TiDB 都运行在 Kubernetes 容器云上的（金融）企业。我们地处西南，平日疏于与业界优秀数据库同行交流心得，是否第一不得而知，但我们的 TiDB 确实都运行在 Kubernetes 容器云上。&lt;/p&gt;&lt;p&gt;&lt;b&gt;将 TiDB 全部运行到容器云上主要是为了提升软件部署密度，充分利用服务器硬件资源，为日后大规模部署 TiDB 集群打下基础。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;根据我们的实践经验，基于物理服务器部署 TiDB 集群，至少 6 台物理服务器（ pd-server 与 tidb-server 混合部署）起才能部署好一套生产环境 ready 的集群。&lt;/p&gt;&lt;p&gt;当我们将 TiDB 全部迁移到容器云平台后，最小 TiDB 集群资源从 6 台服务器降低成了 2 pods tidb-server、3 pods pd-server、3 pods tikv-server，硬件成本降低为原来的 30% 左右。&lt;/p&gt;&lt;h2&gt;马上金融 TiDB 项目未来展望&lt;/h2&gt;&lt;p&gt;到目前为止，我们对 TiDB 技术的储备已经持续了近 2 年时间。我们积累了账务归档、总账跑批等大数据量、高并发量的 TiDB 实践经验。我们还将所有 TiDB 运行到了 Kubernetes 容器云平台之上，使数据库真正获得了 Cloud-native 能力。&lt;/p&gt;&lt;p&gt;未来，我们将探索更多适用于 TiDB 的核心业务场景，提升 TiDB 在公司内基础技术栈的覆盖面，尤其对 TiDB 即将正式推出的 True HATP 功能充满了期待。我们将继续深度使用 TiDB，使其为消费金融行业赋能增效增效，共同创造更深远的社会价值。&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-02-12-106390958</guid>
<pubDate>Wed, 12 Feb 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>一两个节点、一两条命令，轻松让 TiDB 分析场景无痛提速十倍</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-02-06-105339746.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/105339746&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-08c619dfd4c5243a29c21ec2d0e63806_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;作者：马晓宇&lt;/blockquote&gt;&lt;h2&gt;讲个故事，假如……&lt;/h2&gt;&lt;p&gt;某天，老板让你分省统计口罩最近的订货数据，以快速决策需要向哪里调货。你发起查询，全部订单数据多达数亿甚至更多，TiDB 不得不花费一小段时间。由于存储节点在全力计算，你的集群波动的监控哔哔作响，主站的订单提交也一下子变得慢起来。倒了杯咖啡回来，你得到了结果。&lt;/p&gt;&lt;p&gt;老板站在你身后，声音低沉而有磁性，“能否更快一点？”&lt;/p&gt;&lt;p&gt;请架构师吃了顿饭，她向你推荐将数据从线上导出到 Hadoop 或者分析型数据库，用列存格式存储，这样就可以大大提速。码农们加班加点，将 ETL 作业架设起来。你惊喜地发现，查询快了很多！&lt;/p&gt;&lt;p&gt;你兴奋地跟老板说：“我们的分析已经变快了，也不会影响在线业务，您可以放心提要求。”&lt;/p&gt;&lt;p&gt;“干得好！马上告诉我过去 48 小时上海板蓝根的销量。”&lt;/p&gt;&lt;p&gt;“啊？我们只能查一天前的数据……”&lt;/p&gt;&lt;p&gt;&lt;b&gt;所以，你需要更快：接入业务更快，数据到达更快，查询也需要更快。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;一两个节点，一两条命令，数倍提速&lt;/h2&gt;&lt;p&gt;&lt;b&gt;即将随着 TiDB 3.1 推出的 TiFlash 产品，可以让你的 AP 查询提升数倍，不需要复杂的操作，无需多少节点，轻轻松松。只要将集群升级到 TiDB 3.1+，然后执行如下两条命令：&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;./run_tiflash.sh
mysql&amp;gt; ALTER TABLE orders SET TIFLASH REPLICA 1;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后再发起查询查询，对比一下，体验数倍甚至十几倍的提速。没有互相干扰，数据永远保持最新（而不仅仅是新鲜），TiDB 会自动或者按照用户意愿选取行存或列存。&lt;/p&gt;&lt;p&gt;TiDB 加入了对 TiFlash 的读取支持同时，也将列存纳入优化器代价估算中。&lt;b&gt;这意味着，作为用户，你可以无需选择使用 TiKV 还是 TiFlash 进行查询，可以简单丢给优化器完成；另一方面，如果你有业务隔离的需求，也可以简单执行如下命令强制隔离：&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;set @@session.tidb_isolation_read_engines = &amp;#34;tiflash&amp;#34;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;有多快？&lt;/h2&gt;&lt;p&gt;放两个用户的实际案例，SQL 是经过脱敏的，但是不会影响实际执行时间。事实上，我们也建议你用自己的真实场景进行测试，而非某种 Benchmark。&lt;/p&gt;&lt;p&gt;测试使用如下三节点的 TiFlash 和 TiKV 进行对比：&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;CPU:&lt;/b&gt;&lt;br/&gt; 40 Cores, Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz @ 1268.383 MHz&lt;br/&gt; &lt;b&gt;Mem:&lt;/b&gt; &lt;br/&gt; 188G @ 2133 MHz&lt;br/&gt; &lt;b&gt;OS:&lt;/b&gt; &lt;br/&gt; centos-release-7-6.1810.2.el7.centos.x86_64&lt;br/&gt; &lt;b&gt;Disk:&lt;/b&gt; &lt;br/&gt; NVME SSD  &lt;/blockquote&gt;&lt;h3&gt;查询 1&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT code, COUNT(DISTINCT order_id) FROM shipping_order 
WHERE ( prod_id in ( &amp;#39;T1&amp;#39;, &amp;#39;C4&amp;#39;, &amp;#39;Z1&amp;#39;, &amp;#39;F15&amp;#39;, &amp;#39;C21&amp;#39;, &amp;#39;D01&amp;#39; ) ) AND cannel_shipping = &amp;#39;N&amp;#39; AND drop_order = &amp;#39;N&amp;#39; AND order_type = &amp;#39;01&amp;#39; AND vip_flag = &amp;#39;N&amp;#39; AND TIMESTAMPDIFF(HOUR, create_time, NOW()) &amp;gt; 2 AND DW_is_enabled = 1 
GROUP BY prod_id;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;ipping_order&lt;/code&gt; 表为 100 列，6 千万行的送货单表。查询使用 TiDB。这是一个典型的销售订单多维分析统计（聚合类）查询。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7c59fbded1259cdc25d6f92d35a2cdbb_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;164&quot; data-rawheight=&quot;108&quot; class=&quot;content_image&quot; width=&quot;164&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7c59fbded1259cdc25d6f92d35a2cdbb_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;164&quot; data-rawheight=&quot;108&quot; class=&quot;content_image lazy&quot; width=&quot;164&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-7c59fbded1259cdc25d6f92d35a2cdbb_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;使用 TiFlash 查询提速接近 16 倍。单表的统计聚合是最能体现 TiFlash 引擎加速效果的场景。借助高效的向量化引擎以及列存，计算可以完全下推到 TiFlash 进行，加速效果爆炸。&lt;/p&gt;&lt;h3&gt;查询 2&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sales_qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shipping_order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shipping_order_detail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shipping_order_no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_id&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cannel_shipping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop_order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shipping_order_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;01&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;discount_is_enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;discount_is_enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;C003&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2019-11-18 00:00:00.0&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2019-11-18 00:00:00.0&amp;#39;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod_name&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qty_ordered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;shipping_order_detail&lt;/code&gt; 表为 50 列，1 亿行的送货明细表。查询使用 TiDB。这是一个典型的销售订单关联后再多维分析统计查询（表连接+聚合）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-366cf4ea3fb59c4c5263a9254de28e10_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;210&quot; data-rawheight=&quot;108&quot; class=&quot;content_image&quot; width=&quot;210&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-366cf4ea3fb59c4c5263a9254de28e10_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;210&quot; data-rawheight=&quot;108&quot; class=&quot;content_image lazy&quot; width=&quot;210&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-366cf4ea3fb59c4c5263a9254de28e10_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这个场景下，使用 TiFlash 查询提速 6 倍多。哪怕表连接仍需在 TiDB 中进行，但是批量扫表仍然可以体验到明显的加速。&lt;/p&gt;&lt;p&gt;以上均为用户测试场景。该用户实际测试场景在维度无法建立索引的情况下，几乎都可以观测到 2 至 10 倍以上的加速。须知，你在多维分析场景下，往往无法为很多维度建立索引。&lt;/p&gt;&lt;h3&gt;对比 Greenplum&lt;/h3&gt;&lt;p&gt;那么对比 Greenplum，TiFlash 配合分布式计算引擎 TiSpark 又能达到什么样的速度呢？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4a6428730ca954fc5aa7c2a0ec142e1e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;541&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic3.zhimg.com/v2-4a6428730ca954fc5aa7c2a0ec142e1e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4a6428730ca954fc5aa7c2a0ec142e1e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;541&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic3.zhimg.com/v2-4a6428730ca954fc5aa7c2a0ec142e1e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-4a6428730ca954fc5aa7c2a0ec142e1e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;测试使用了 TPC-H 标准测试，横轴为运行时间（越短越好），灰色是 TiFlash + TiSpark，蓝色为 Greenplum 行存，橙色为 Greenplum 列存。&lt;/p&gt;&lt;p&gt;可以看到，TiFlash + TiSpark 在做到无缝镜像的同时，能取得和 Greenplum 近似甚至更快的速度。&lt;/p&gt;&lt;h2&gt;除了速度之外，还有何特点？&lt;/h2&gt;&lt;h3&gt;简化技术栈&lt;/h3&gt;&lt;p&gt;TiFlash 并不是另一个系统，也无需维护复杂的数据搬运，无需考虑数据的新老和一致性。TiFlash 可以近似看做是一种特殊的 TiKV 节点，它可以一样地通过 Mult-Raft 和 PD 调度无缝扩展，提供对等的协处理器读取服务，只是它在分析查询场景下更快。&lt;/p&gt;&lt;h3&gt;新鲜且一致的数据&lt;/h3&gt;&lt;p&gt;你仍然享有最新的数据，而不用像做 ETL 搬运那样，在搬运周期之间只能读取老的数据。读取也总可以捕捉最新的数据（而不仅仅是新鲜数据）：你总是可以保证读到刚写下去的数据，但也不会捕获未完成的事务。TiFlash 提供了和 TiKV 一样的一致性和事务隔离级别。&lt;/p&gt;&lt;h3&gt;隔离&lt;/h3&gt;&lt;p&gt;关闭 TiDB 自动选择，或者用 TiSpark 开启 TiFlash 模式，那么你是在使用 TiFlash 的 HTAP 模式。简单说，你不希望某些大型分析查询干扰任何正在运行的其他业务，用 TiFlash 你可以很容易做到，仅仅是一个开关配置的问题。这种模式下，你可以放心地对在线数据进行分析，随时观察业务的最新走向，而不用担心业务是否受到影响。&lt;/p&gt;&lt;h3&gt;智能&lt;/h3&gt;&lt;p&gt;关闭隔离设定，你可以让 TiDB 自主选择。如果你的业务对隔离要求不敏感，你只是希望很简单地让 TiDB 以它判断下最快的方式访问表，可以走行存 + 索引，也可以走列存，你完全不想操心，那你可以依靠 TiDB 使用统计信息进行自动选择。这个设计并不神秘，选择 TiFlash 副本的过程和在不同索引之间做选择没什么差别。&lt;/p&gt;&lt;h2&gt;说正经的，TiFlash 是什么？&lt;/h2&gt;&lt;p&gt;&lt;b&gt;TiFlash 是一种特殊的存储节点：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;它提供了对 TiDB 的加速功能；&lt;/b&gt;&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;它继承了 TiDB 存储架构的无缝扩展性；&lt;/b&gt;&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;它可以在不影响正常在线业务的同时，将数据转存为列存并提供查询；&lt;/b&gt;&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;并且这个转存，除了格式和访问速度不同，对用户来说是完全一样的镜像。&lt;/b&gt;&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;一直以来，TiDB 作为 HTAP 数据库存在两个大缺憾：使用行存格式很难快速响应大型分析查询；进行 AP 查询会影响 TP 业务稳定。其实这不只是 TiDB 的缺憾，也是业界面临的两个很难调和的设计矛盾。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;存储格式的矛盾&lt;/b&gt;&lt;br/&gt; 列存保存时会拆列和压缩，对于点查类访问带来了很大困难，你需要将散落在不同磁盘位置的列数据分别读取再拼接起来。但是列存对于分析查询却是非常高效的：它可以仅仅读取查询选中的列，并且列存格式也天然契合向量化加速引擎，因此它也成为了分析场景的推荐格式。如何调和这样的矛盾？&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;分析和交易无法稳定共存的矛盾&lt;/b&gt;&lt;br/&gt; 分析查询往往耗时更长，单次查询访问的数据量比在线交易业务类大得多。分析引擎设计上倾向于同时将大量资源投入同一个查询，以做到尽快响应。但是一旦这么做了，在线业务资源将受到挤占，造成巨大抖动。&lt;br/&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;为了解决这个问题，业界最常见的做法是，将数据导出到其他平台用列存转储，比如 Hadoop + Parquet，或者分析型数据库如 Greenplum 等，这样用户可以同时解决隔离以及查询性能问题。但是代价却是，引入了复杂的架构，需要维护数据迁移和 ETL 作业，并且数据无法实时，导出也可能无法保证一致性。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;TiFlash 是为了解决这个痛点而设计的产品。它是一款支持更新的列存引擎，在实时镜像行存数据的同时，提供数倍乃至数十倍以上的对行存的访问加速。它可以使用独立节点，以完全隔绝两种业务之间的互相影响。它部分基于 Clickhouse，继承了 Clickhouse 优秀的向量化计算引擎。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;架构上，TiFlash 是一个提供与 TiKV 类似功能的存储层模块，它使用 Raft Learner（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//etcd.io/docs/v3.3.12/learning/learner/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;etcd.io/docs/v3.3.12/le&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;arning/learner/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;）进行数据传输并转存为列存。这意味着，TiFlash 节点的状态和延迟，不会影响 TiKV 的运行，哪怕 TiFlash 节点崩溃，TiKV 也能毫无影响地运行；另一方面也可以提供最新（线性一致 + 快照隔离），和 TiKV 一致的数据。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-630705cb872962b48051502887c331cc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;368&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic1.zhimg.com/v2-630705cb872962b48051502887c331cc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-630705cb872962b48051502887c331cc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;368&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic1.zhimg.com/v2-630705cb872962b48051502887c331cc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-630705cb872962b48051502887c331cc_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-70df32afe4f9e6121284e4d9efe975ca_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;400&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic3.zhimg.com/v2-70df32afe4f9e6121284e4d9efe975ca_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-70df32afe4f9e6121284e4d9efe975ca_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;400&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic3.zhimg.com/v2-70df32afe4f9e6121284e4d9efe975ca_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-70df32afe4f9e6121284e4d9efe975ca_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;何不试试看？&lt;/p&gt;&lt;p&gt;你可以使用一两台现成的机器进行测试，简单一两条命令，上线 TiFlash 节点，添加列存副本，等副本同步完成之后就可以看到效果，绿色无害。何不试试看呢？&lt;/p&gt;&lt;p&gt;&lt;b&gt;TiFlash 已经在进行第一轮用户测试，并在 2 到 3 月间会开启开放公测，请关注后续信息，也欢迎联系询问提前体验：maxiaoyu@pingcap.com。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-02-06-105339746</guid>
<pubDate>Thu, 06 Feb 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>讨论帖：如果只有两个数据中心，使用 Raft 协议还有意义吗？</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-02-04-104998068.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/104998068&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-245bcae75710a7071eef79e6417cefb9_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 作者：disksing&lt;/blockquote&gt;&lt;p&gt;对 Raft 有所了解的同学都知道，&lt;b&gt;Raft 一般会使用奇数个节点&lt;/b&gt;，比如 3、5、7 等等。这是因为 Raft 是 一种基于多节点投票选举机制的共识算法，通俗地说，只有超过半数节点在线才能提供服务。这里超过半数的意思是 N/2+1（而不是N/2）。举例来说，3 节点集群需要 2 个以上节点在线，5 节点集群需要 3 个以上节点在线，等等。对于偶数节点的集群，2 节点集群需要 2 节点同时在线，4 节点集群需要 3 节点在线，以此类推。实际上不只是 Raft，所有基于 Quorum 的共识算法大体上都是这么个情况，例如 Paxos，ZooKeeper 什么的，本文仅以 Raft 为例讨论。  &lt;/p&gt;&lt;p&gt;&lt;b&gt;先考察一下为什么 Raft 通常推荐使用奇数节点而不是偶数节点。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;共识算法要解决的核心问题是什么呢？是分布式系统中单个节点的不可靠造成的不可用或者数据丢失。Raft 保存数据冗余副本来解决这两个问题，当少数节点发生故障时，剩余的节点会自动重新进行 leader 选举（如果需要）并继续提供服务，而且 log replication 流程也保证了剩下的节点（构成 Quorum）总是包含了故障前成功写入的最新数据，因此也不会发生数据丢失。  &lt;/p&gt;&lt;p&gt;我们对比一下 3 节点的集群和 4 节点的集群，Quorum 分别是 2 和 3，它们能容忍的故障节点数都是 1。如果深究的话，从概率上来说 4 节点集群发生 2 节点同时故障的可能性要更高一些。于是我们发现，相对于 3 节点集群，4 节点集群消耗更多的硬件资源，却换来了更差的可用性，显然不是个好选择。&lt;/p&gt;&lt;p&gt;&lt;b&gt;但是！！！&lt;/b&gt;&lt;/p&gt;&lt;p&gt;上面说了，Raft 解决的核心问题有两个，分别是高可用和数据容灾。&lt;b&gt;跟奇数节点相比，偶数节点的方案从可用性上看很不划算，但是数据容灾方面却是有优势的&lt;/b&gt;。还是以 4 节点为例，因为 Quorum 是 3，写入数据的时候需要复制到至少 3 个节点才算写入成功，假如此时有 2 个节点同时故障，这种情况下虽然不可用了，但是剩余的两个节点一定包含有最新的数据，因此没有发生数据丢失。这一点很容易被忽视，在常见的奇数节点配置下，保证可用和保证数据不丢所容忍的故障节点数是重合的，但是在偶数节点配置下是不一样的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;根据上面的分析，偶数节点集群的适用场景是“能容忍一定时间的不可用，但不能容忍数据丢失”，应该有不少严肃的金融场景是符合这个描述的，毕竟一段时间不服务也比丢掉数据要强呀。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;下面以两数据中心环境为例来对比一下。限制条件是任意一个数据中心故障时（比如发生严重自然灾害），能容忍一定时间的不可用，但不允许发生数据丢失。&lt;/p&gt;&lt;p&gt;如果使用奇数节点集群配置，两个数据中心的节点数一定是不对等的，一旦节点数更多的那个数据中心故障，就可能发生数据丢失了。而如果使用偶数节点配置，两个数据中心的节点数是一样的，任意一个数据中心故障后，另一个数据中心一定包含有最新数据，我们只需要使用工具改写 Raft 元信息，让剩余数据中心的所有节点组成新的 Raft Group 并使得 Quorum 恰好等于剩余节点数，Raft 选举机制将会自动选择包含有最新数据的节点当 leader 并恢复服务。&lt;/p&gt;&lt;p&gt;&lt;i&gt;题外话：本来想在 etcd 上实践下这套方案，可惜最后一步 etcd 恢复数据的时候只支持从单一节点恢复，所以无法做到“自动选择包含有最新数据的节点当 leader 并恢复服务”。我给 etcd 提了个 issue 不过貌似并没有成功让他们了解到我想干啥，如果有人看到这里觉得这事情有搞头的话，可以帮忙去 issue 下支持一下（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/etcd-io/etcd/issues/11486&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/etcd-io/etcd&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/issues/11486&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;）。&lt;/i&gt;&lt;/p&gt;&lt;blockquote&gt; 以上内容转载自 disksing 个人博客：&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//disksing.com/even-node-raft/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;原文地址&lt;/a&gt; 。&lt;/blockquote&gt;&lt;h3&gt;讨论话题：&lt;/h3&gt;&lt;blockquote&gt;&lt;b&gt;Raft 通常需要三数据中心来解决高可用问题，但一些场景下面，用户只有两个数据中心，那么使用 Raft 协议还有意义吗？&lt;/b&gt;&lt;br/&gt; 欢迎大家在本篇文章下面踊跃留言，分享你遇到过的“偶数节点 Raft”的案例或者各种“奇葩”问题  以及你的思考～&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-02-04-104998068</guid>
<pubDate>Tue, 04 Feb 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>Prometheus 常用函数 histogram_quantile 的若干“反直觉”问题</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-02-01-104607739.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/104607739&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-06860a4fedcf9817863f874c04096b32_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;作者：disksing&lt;/p&gt;&lt;p&gt;&lt;code&gt;histogram_quantile&lt;/code&gt; 是 Prometheus 特别常用的一个函数，比如经常把某个服务的 P99 响应时间来衡量服务质量。不过它到底是什么意思很难解释得清，特别是面向非技术的同学。另一方面，即使是资深的研发同学，在排查问题的时候也经常会发现 &lt;code&gt;histogram_quantile&lt;/code&gt; 的数值出现一些反直觉的“异常现象”然后摸不着头脑。本文将结合原理和一些案例来分析这个问题。&lt;/p&gt;&lt;h2&gt;统计学含义&lt;/h2&gt;&lt;p&gt;Quantile 在统计学里面中文叫 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%2588%2586%25E4%25BD%258D%25E6%2595%25B0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;分位数&lt;/a&gt;，其中 X 分位数就是指用 X-1 个分割点把概率分布划分成 X 个具有相同概率的连续区间。常用的比如有二分位数，就是把数据分成两个等量的区间，这其实就是 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E4%25B8%25AD%25E4%25BD%258D%25E6%2595%25B8&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;中位数&lt;/a&gt; 了。还有当 X=100 时也叫 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%2599%25BE%25E5%2588%2586%25E4%25BD%258D%25E6%2595%25B0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;百分位数（percentile）&lt;/a&gt;，比如我们常说 P95 响应延迟是 100ms，实际上是指对于收集到的所有响应延迟，有 5% 的请求大于 100ms，95% 的请求小于 100ms。&lt;/p&gt;&lt;p&gt;Prometheus 里面的 &lt;code&gt;histogram_quantile&lt;/code&gt; 函数接收的是 0-1 之间的小数，将这个小数乘以 100 就能很容易得到对应的百分位数，比如 0.95 就对应着 P95，而且还可以高于百分位数的精度，比如 0.9999。&lt;/p&gt;&lt;h2&gt;quantile 的“反直觉案例”&lt;/h2&gt;&lt;p&gt;&lt;b&gt;问题 1：P99 可能比平均值小吗？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;正如中位数可能比平均数大也可能比平均数小，P99 比平均值小也是完全有可能的。通常情况下 P99 几乎总是比平均值要大的，但是如果数据分布比较极端，最大的 1% 可能大得离谱从而拉高了平均值。一种可能的例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;1, 1, ... 1, 901 // 共 100 条数据，平均值=10，P99=1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;问题 2：服务 X 由顺序的 A，B 两个步骤完成，其中 X 的 P99 耗时 100ms，A 过程 P99 耗时 50ms，那么推测 B 过程的 P99 耗时情况是？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;直觉上来看，因为有 X=A+B，所以答案可能是 50ms，或者至少应该要小于 50ms。实际上 B 是可以大于 50ms 的，只要 A 和 B 最大的 1% 不恰好遇到，B 完全可以有很大的 P99：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;A = 1, 1, ... 1,  1,  1,  50,  50 // 共 100 条数据，P99=50
B = 1, 1, ... 1,  1,  1,  99,  99 // 共 100 条数据，P99=99
X = 2, 2, ... 1, 51, 51, 100, 100 // 共 100 条数据，P99=100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果让 A 过程最大的 1% 接近 100ms，我们也能构造出 P99 很小的 B：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;A = 50, 50, ... 50,  50,  99 // 共 100 条数据，P99=50
B =  1,  1, ...  1,   1,  50 // 共 100 条数据，P99=1
X = 51, 51, ... 51, 100, 100 // 共 100 条数据，P99=100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以我们从题目唯一能确定的只有 B 的 P99 应该不能超过 100ms，A 的 P99 耗时 50ms 这个条件其实没啥用。&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题 3：服务 X 由顺序的 A，B 两个步骤完成，其中 A 过程 P99 耗时 100ms，B 过程 P99 耗时 50ms，那么推测服务 X 的 P99 耗时情况是？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;有人觉得答案是“不超过 150ms”，理由是 A 过程的 P99 是 100ms，说明 A 过程只有 1% 的请求耗时大于 100ms，同理 B 过程也只有 1% 的请求耗时大于 50ms，当这两个 1% 恰好撞上才会产生 150ms 的总耗时，绝大多数情况下总耗时都是小于 150ms 的。&lt;/p&gt;&lt;p&gt;此处问题同样在于认为数据是“常规分布”的，假如 A 过程和 B 过程最大的 1% 大的离谱，例如都是 500ms+，那么服务 X 就会有 1%-2% 的请求耗时 500ms+，也就是说服务 X 的 P99 耗时会在 500ms 以上：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;A = 1, 1, ...  1,   1, 100, 500 // 共 100 条数据，P99=100
B = 1, 1, ...  1,   1,  50, 500 // 共 100 条数据，P99=50
X = 2, 2, ... 51, 101, 501, 501 // 共 100 条数据，P99=501&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;问题 4：服务 X 有两种可能的执行路径 A，B，其中 A 路径统计 P99 耗时为 100ms，B 路径统计 P99 耗时 50ms，那么推测服务 X 的 P99 耗时情况是？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这个问题看上去十分简单，如果所有请求都走 A 路径，P99 就是 100ms，如果都走 B 路径的话，P99 就是 50ms，然后如果一部分走 A 一部分走 B，那 P99 就应该是在 50ms ~ 100ms 之间。&lt;/p&gt;&lt;p&gt;那么实际上真的是这样吗？我经过仔细的研究，最后发现确实就是这样的……乍看上去这个问题跟涉及到平均数的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E8%25BE%259B%25E6%2599%25AE%25E6%25A3%25AE%25E6%2582%2596%25E8%25AE%25BA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;辛普森悖论&lt;/a&gt;有些像，似乎可以通过调整 A 路径和 B 路径的比例搞出一些幺蛾子，但其实不论 A 跟 B 是怎样的比例，从数量上看，大于 100ms 的请求最多只有 1%A + 1%B = 1%X 个，因此 X 的 P99 不会大于 100ms，同理小于 50ms 的请求不会多于 99%X 个，可知 X 的 P99 也不会小于 50ms。&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题 5：某服务 X 保存数据的过程是把数据发给数据库中间件 M，中间件 M 有 batch 机制，会把若干条并发的请求合并成一个请求发往数据库进行存盘。如果测得 X 保存数据耗时的 P99 为 100ms，那么推测 M 请求数据库的 P99 耗时情况是？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;关键点在于一个请求的多个步骤不是一一对应的，这种情况在分布式系统中并不罕见，我们需要具体情况具体分析，很难简单地推断 M 的 P99 耗时。&lt;/p&gt;&lt;p&gt;最容易注意到的，M 的高延迟能在多大程度上影响 X 的延迟，跟 batch size 息息相关。例如 M 存在一些耗时特别高请求，但是对应的 batch size 恰好很小，这样对 X 的影响就比较有限了，我们就可能观察到 M 的 P99 远大于 X 的 P99 的现象。与之相反，如果对应的 batch size 恰好特别大，极少量的 M 高延迟也会体现在 X 的统计中，我们就能观察到 X 的 P99 远大于 M 的 P99 的现象。&lt;/p&gt;&lt;p&gt;再比如 M 在连接数据库时可能使用了连接池，如果少量的数据库请求过慢，可能导致连接池发生阻塞影响后续的大量存盘请求，这时 M 统计到的高延迟请求很少，而 X 统计到的高延迟会很多，最终也能形成 X 的 P99 远大于 M 的 P99 的状况。&lt;/p&gt;&lt;h2&gt;histogram 场景下的 quantile&lt;/h2&gt;&lt;p&gt;前面的内容都是从 quantile 的定义出发的，并不限于 Prometheus 平台。具体针对 Prometheus 里的 &lt;code&gt;histogram_quantile&lt;/code&gt;，还有一些要注意的点。&lt;/p&gt;&lt;p&gt;一个是因为 histogram 并不记录所有数据，只记录每个 bucket 下的 count 和 sum。如果 bucket 设置的不合理，会产生不符合预期的 quantile 结果。比如最大 bucket 设置的过小，实际上有大量的数据超出最大 bucket 的范围，最后统计 quantile 也只会得到最大 bucket 的值。因此如果观察到 &lt;code&gt;histogram_quantile&lt;/code&gt; 曲线是笔直的水平线，很可能就是 bucket 设置不合理了。&lt;/p&gt;&lt;p&gt;另一种情况是 bucket 范围过大，绝大多数记录都落在同一个 bucket 里的一段小区间，也会导致较大的偏差。例如 bucket 是 100ms ~ 1000ms，而大部分记录都在 100ms ~ 200ms 之间，计算 P99 会得到接近于 1000ms 的值，这是因为 Prometheus 没记录具体数值，便假定数据在整个 bucket 内均匀分布进行计算。&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//prometheus.io/docs/practices/histograms/%23errors-of-quantile-estimation&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Prometheus 的官方文档&lt;/a&gt; 里也描述了这个问题。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本文转载自 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//disksing.com/histogram-quantile/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;disksing 的个人博客&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;更多分布式数据库技术文章阅读：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-60ab5bd867c2434d70c957a02a2169e1_ipico.jpg&quot; data-image-width=&quot;1200&quot; data-image-height=&quot;1200&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Blog-cns | PingCAP&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-02-01-104607739</guid>
<pubDate>Sat, 01 Feb 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>PingCAP 的 5 年远程办公实践</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-01-28-104184804.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/104184804&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b9c7035747150e08546831144f591b59_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;作者： 黄东旭&lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/5940b1ec1c21a3538c6cfcf5711a75a6&quot; data-hash=&quot;5940b1ec1c21a3538c6cfcf5711a75a6&quot; data-hovercard=&quot;p$b$5940b1ec1c21a3538c6cfcf5711a75a6&quot;&gt;@Ed Huang&lt;/a&gt; ，PingCAP 联合创始人兼 CTO。&lt;/p&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;2020 年的春节注定是一个不平凡的春节，全国都在抗击新型冠状病毒肺炎。除了不出门，勤洗手，戴口罩之类的常规操作，我们就在想，在这个大背景下，我们还能够做哪些事情？考虑到春节假期临近结束，返程的旅途中可能会加大传染的概率，延长隔离时间、远程在家办公也许是普通群众能给国家在这场战役中做的最大贡献。然而在我们国家，暂且不论别的行业，&lt;b&gt;至少我们所在的高科技行业还没有普及远程办公的文化，所以我们在此将 PingCAP 实践了近五年的工程师远程办公经验介绍给大家。本文将尽量少描述理念，而更多的从实践方面讲述我们的落地经验，以期在这样的一个特殊的时刻帮助更多的朋友和公司尽快行动起来，为国家为社会贡献一份我们微薄的力量。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们已经通过实践证明，在这个时代，至少对于类似软件工程这样的主要以脑力和创意为主的工作，已经有足够的方法论和基础设施，让远程工作的效率不比传统模式差，有时候甚至能有更好的产出（相信已经有同学想起了早上拥挤的交通对心情和思维的副作用）。下面我们聊聊一些具体落地的经验。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;i&gt;01&lt;/i&gt;&lt;/b&gt; &lt;b&gt;远程办公的管理哲学&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;远程办公在国外并不是一件新鲜的事情。在硅谷，尤其是新一代的科技公司几乎都有远程工作的基因，这背后有很多原因在这篇文章中就不展开了，如果感兴趣的朋友可以看看来自 37 Signals 的 David Heinemeier Hansson 的《Remote》一书。&lt;b&gt;对于我们来说，PingCAP 从公司建立之初就开始践行这个文化，主要出于这几点原因：一方面包括我在内的几位联合创始人都是工程师出身，本身对于效率比较有追求，自由的工作形式能够提高我们的工作效率，同时我们痛恨低效形式主义；另一方面，对于一个初创的公司来说，我们不希望人才因为地域的限制而不能加入我们。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;一个很好的例子是我们的首席架构师 siddontang &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/people/df9ec6a48ca50364852daa71b20a6192&quot; class=&quot;internal&quot;&gt;@唐刘&lt;/a&gt;&lt;/p&gt;&lt;p&gt;，也是我们招聘的第一位员工，因为家庭原因不希望来北京，过去的几年一直都在珠海的家里远程工作（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/siddontang/blog/blob/master/2016/my-remote-work.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这篇 blog&lt;/a&gt;详细描述了他的亲身经历）。另外一个非常重要的原因是我们的员工是全球分布，基于开源的开发模式，所以一开始就注入了远程工作的基因。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;软件工程是一项以脑力为主要资源开展的工作，在如今高度发达的互联网技术支撑下，其实是天然适合远程工作的，但是我们为什么大多数时候觉得远程工作不如集中工作效率高？&lt;b&gt;除了远程带来的沟通协作障碍外，我们认为其实最根本的差异还是在管理哲学上，是倾向于传统监管的管理思维还是自驱的管理思维，在 PingCAP，我们在企业文化上一直倡导的是后者。&lt;/b&gt;为此，我们需要建立一个强大的愿景驱动力，并落实在我们的各种细节中，同时尽可能为同事们营造自由、开放、分享的工作氛围。&lt;/p&gt;&lt;p&gt;幸运的是，这也和我们从事的开源领域的工作方向完美契合。举个例子，在 PingCAP 我们从来不进行任何形式的打卡，每周五我们都有例行但是议题不限的员工 TGIF 分享 ，任何一位同事都有机会站在台上分享自己的工作成果和心得，甚至我们发给大家的周边产品都是在设计、选材上一遍一遍的精挑细选，且限量供应，以期让每一个小伙伴感受到温暖和尊重。这一切的工作看似和我们的远程办公没有直接关系，但是实际上让我们一点一点地变成了一个脱离形式、高于形式而存在的强大的远程组织。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;i&gt;02&lt;/i&gt;&lt;/b&gt; &lt;b&gt;目标和计划管理&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;如果问一个问题，对于工程师团队来说，什么时候需要沟通最多？我想是制定计划和目标的时候。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;软件工程远程办公我们首先要解决的是我们要建立远程可操作的更加清晰、高效的目标和计划管理。从宏观层面说，在 PingCAP 我们依赖的是 OKR 这个工具进行公司以及团队的目标管理，OKR 是硅谷以及国内的很多互联网公司越来越流行的目标管理工具。&lt;/b&gt;经过探索，我们认为 OKR 是一个比较适合远程工作团队的目标管理工具，因为 OKR 相比 KPI 来说，首先更加强调由团队成员共同制定团队目标，这样带来的好处是易于让整个团队就目标和关键结果达成共识，始终保持团队的目标导向一致。其次能够让团队成员更加明白做手头上的事情对于团队以及对于公司的意义，这一点对于远程团队尤为重要，极大的有利于促进部门与部门、人与人的协作，让团队更加具有整体性，最后，OKR 还有一个很重要的特点：透明，在我们的实践中，每个团队都可以看到别的团队的 OKRs，大家在制定完各自团队的 OKR 后，还需要在公司级别宣布，确保大家都能了解。&lt;/p&gt;&lt;p&gt;&lt;b&gt;从微观层面说，例如一个具体的项目计划制定和执行跟踪，也需要一样的透明。我们的实践是项目的负责人为每一个大的项目建立一个全局的项目「地图」，&lt;/b&gt;力求做到即使是半路加入的同学，看到这个地图后，就能够清楚的知道现在是什么情况，需要的资源的链接在哪，负责人是谁，风险点在哪。这个对于远程工程团队的管理者来说更是至关重要。下面是一个例子：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d6667409f9b90993629f9d38bde8e2f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;974&quot; data-rawheight=&quot;506&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;974&quot; data-original=&quot;https://pic1.zhimg.com/v2-d6667409f9b90993629f9d38bde8e2f4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d6667409f9b90993629f9d38bde8e2f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;974&quot; data-rawheight=&quot;506&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;974&quot; data-original=&quot;https://pic1.zhimg.com/v2-d6667409f9b90993629f9d38bde8e2f4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d6667409f9b90993629f9d38bde8e2f4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;某个项目事项追踪表&lt;b&gt;当我们把我们的目标和计划能够清晰、高效、透明的在整个公司内部制定、发布和管理起来，远程办公已经具备了初步的可操作性。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;i&gt;03&lt;/i&gt;&lt;/b&gt; &lt;b&gt;工欲善其事，必先利其器&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;既然我们这里更多的是讨论实操，我们接下来重点讲一讲软件工程远程办公环境我们所使用的工具。企业文化、目标管理我们需要相对长时间的工作去逐渐建立，工具的引入则相对快速见效，也就是俗话说的，工欲善其事，必先利其器，使用良好的工具会让事情事半功倍。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;PingCAP&lt;/a&gt;&lt;/b&gt; &lt;b&gt;的主要产品&lt;/b&gt; &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/pingcap&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TiDB 是一个开源的数据库&lt;/a&gt;，我们研发的主要工作流都是构建在 Github 上面，完全对社区公开。所以我们的工具链也是以 Github 为中心，串联其它的工具。&lt;/b&gt;下面是完整的工具列表（这些工具很多都有国内的替代工具，如果公司不像 PingCAP 这种员工全球分布的，可以根据实际需求选择）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;GitHub：代码托管，公开的 RFC，社区 Issue 反馈，产品发布，Code Review 等。&lt;/li&gt;&lt;li&gt;Zoom：在线会议。&lt;/li&gt;&lt;li&gt;Slack：即时通讯，机器人消息中枢。&lt;/li&gt;&lt;li&gt;微信、企业微信：即时通讯（没错，我们两个都用，但以企业微信为主）。&lt;/li&gt;&lt;li&gt;在线文档：文档协作，幻灯片，表格。&lt;/li&gt;&lt;li&gt;邮件，日历。&lt;/li&gt;&lt;li&gt;Confluence：内部的文档，包括已成型的设计文档（如内部的 RFC 文档），Wiki 等。&lt;/li&gt;&lt;li&gt;Jira：Bug 和 Milestone 跟踪。&lt;/li&gt;&lt;li&gt;Trello：看板，记录一些重要客户和事件的备忘。&lt;/li&gt;&lt;li&gt;Jenkins：持续集成，daily build。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里通过一个小例子介绍一下我们研发的工作流：1. 假设我们需要做一个新功能，从构思开始，可能第一个会使用的工具是在线文档，负责的同事会草拟一个文档，将大致的想法在其中描述，然后通过 Share 的功能，分享给相关的同事，大多数时候这些设计文档都会 share 到所有的工程师都会在的邮件组里，任何人都可以上去评论或者编辑。2. 文档经过沟通讨论定稿之后（沟通环节我会在下面一节重点介绍），会同步到 Confluence 和 GitHub 中（如果可以公开的话，英文版会发到 GitHub 上）。3. 接着该项目将被拆分成多个子项目，通过 JIRA 分配到具体的人，完成后直接提交到 GitHub 上，项目的该模块的 Reviewer（也包括 Maintainer）会参与 Code Review，收集到两个 LGTM（Looks good to me） 并通过各种持续集成工具的测试后，最终合并到主干。修 Bug 的流程也类似，值得一提的是我们开发了一个 bot，用于同步 GitHub 中来自社区的 Issue 到内部的 JIRA 中。&lt;b&gt;优秀工程师的创造力是无穷的，尤其在远程工作的背景下，我们非常鼓励工程师通过自制工具来提升工作的效率。&lt;/b&gt;除了上面提到的 Issue 机器人，我们的 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI3NDIxNTQyOQ%3D%3D%26mid%3D2247490620%26idx%3D1%26sn%3D622f5247e5f771961ccebacc28e32ef2%26chksm%3Deb163b56dc61b240951396602b37168bbca69bd52219914d6c6fe3deb800e1e36242a215e04c%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chaos 测试&lt;/a&gt;&lt;/u&gt;（最近已经开源, &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/pingcap/chaos-mesh&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/pingcap/chao&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;s-mesh&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;），CI/CD，甚至包括社交网络上简单的动态舆情监测，都有自动化的工具在做。&lt;/p&gt;&lt;p&gt;还有小伙伴们通过自动化的手段优化自己工作中的一些流程，举几个好玩的例子：disksing 同学使用 App Script 自动生成自己的周报（&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//disksing.com/review-recorder/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;disksing.com/review-rec&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;order/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;）；siddontang 同学自己写了个小工具 github-cli（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/siddontang/github-cli&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/siddontang/g&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ithub-cli&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;）来高效的追踪关注的 Github 项目的动态；我用 Python 写了一个小脚本，每日收集 Trello 上指定 Board 内的卡片的更新，并给我汇总发邮件……这样的例子数不胜数，有时候真是很佩服大家想象力和动手能力，我们非常坚定地鼓励大家做这些事情。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-24a86a8369687b27eb29b516b2eabc90_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;868&quot; data-rawheight=&quot;633&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;868&quot; data-original=&quot;https://pic1.zhimg.com/v2-24a86a8369687b27eb29b516b2eabc90_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-24a86a8369687b27eb29b516b2eabc90_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;868&quot; data-rawheight=&quot;633&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;868&quot; data-original=&quot;https://pic1.zhimg.com/v2-24a86a8369687b27eb29b516b2eabc90_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-24a86a8369687b27eb29b516b2eabc90_b.jpg&quot;/&gt;&lt;figcaption&gt;我们的 IFTTT 机器人在收集提及 TiDB、PingCAP 的推文&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23dd7645809d5dc7302e4a540185d4d7_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;887&quot; data-rawheight=&quot;533&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;887&quot; data-original=&quot;https://pic4.zhimg.com/v2-23dd7645809d5dc7302e4a540185d4d7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23dd7645809d5dc7302e4a540185d4d7_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;887&quot; data-rawheight=&quot;533&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;887&quot; data-original=&quot;https://pic4.zhimg.com/v2-23dd7645809d5dc7302e4a540185d4d7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-23dd7645809d5dc7302e4a540185d4d7_b.jpg&quot;/&gt;&lt;figcaption&gt;由我们的 bot 同步的 Github Issue&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-23c12f4286d6436910f95e1a5f8254fc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;974&quot; data-rawheight=&quot;502&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;974&quot; data-original=&quot;https://pic1.zhimg.com/v2-23c12f4286d6436910f95e1a5f8254fc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-23c12f4286d6436910f95e1a5f8254fc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;974&quot; data-rawheight=&quot;502&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;974&quot; data-original=&quot;https://pic1.zhimg.com/v2-23c12f4286d6436910f95e1a5f8254fc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-23c12f4286d6436910f95e1a5f8254fc_b.jpg&quot;/&gt;&lt;figcaption&gt;每天下班之前自动生成的当天动态报告&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6df522ec7d94fa6a34fe52409dca1422_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;814&quot; data-rawheight=&quot;679&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;814&quot; data-original=&quot;https://pic3.zhimg.com/v2-6df522ec7d94fa6a34fe52409dca1422_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6df522ec7d94fa6a34fe52409dca1422_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;814&quot; data-rawheight=&quot;679&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;814&quot; data-original=&quot;https://pic3.zhimg.com/v2-6df522ec7d94fa6a34fe52409dca1422_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6df522ec7d94fa6a34fe52409dca1422_b.jpg&quot;/&gt;&lt;figcaption&gt;每周周会之前自动生成的 Weekly Report&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e4b85f117140b155dfc5901a8696a614_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;816&quot; data-rawheight=&quot;550&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;816&quot; data-original=&quot;https://pic1.zhimg.com/v2-e4b85f117140b155dfc5901a8696a614_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e4b85f117140b155dfc5901a8696a614_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;816&quot; data-rawheight=&quot;550&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;816&quot; data-original=&quot;https://pic1.zhimg.com/v2-e4b85f117140b155dfc5901a8696a614_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-e4b85f117140b155dfc5901a8696a614_b.jpg&quot;/&gt;&lt;figcaption&gt;提前根据模版生成出来的个人周报&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ec44cf9e24dbb629448af83e3f6322ae_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;754&quot; data-rawheight=&quot;550&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;754&quot; data-original=&quot;https://pic3.zhimg.com/v2-ec44cf9e24dbb629448af83e3f6322ae_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ec44cf9e24dbb629448af83e3f6322ae_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;754&quot; data-rawheight=&quot;550&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;754&quot; data-original=&quot;https://pic3.zhimg.com/v2-ec44cf9e24dbb629448af83e3f6322ae_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-ec44cf9e24dbb629448af83e3f6322ae_b.jpg&quot;/&gt;&lt;figcaption&gt;提醒大家准备周报的企业微信机器人&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-572fa1bca45858aacd58a1305c99b62e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;656&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-572fa1bca45858aacd58a1305c99b62e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-572fa1bca45858aacd58a1305c99b62e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;656&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-572fa1bca45858aacd58a1305c99b62e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-572fa1bca45858aacd58a1305c99b62e_b.jpg&quot;/&gt;&lt;figcaption&gt;SRE 机器人自动 Merge PR 并 Cherry-pick 到 Release 分支&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;介绍了这么多好玩的东西，其实我想表达的是：对于远程工作来说，能交给机器做的，尽量不要人来做，自动化是至关重要的。尤其对于线上的协作来说，多一个人的参与就意味着多一份沟通成本。我对于工程师团队选择开发相关的效率工具，有几个建议：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 选择有开放 API 的工具，方便写 bot，形成协同效应。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 切忌讳过多过杂，选择几个好用的，将其用透。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. 使用 Slack 之类的 IM 作为各种工具的 Message Hub，尽可能做到在一个地方就能一目了然事情的状态。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;另外就像上面提到的，由于我们也有一些海外的同事、客户以及海外社区沟通的需求，所以主要选用的工具基本都是国际上比较通用的，如果你们公司的业务都在国内的话，这些工具基本都可以找到国内的或者私有部署的替代方案，例如 ONES，Tower，Gitlab 等。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;i&gt;04&lt;/i&gt;&lt;/b&gt; &lt;b&gt;对远程友好的沟通和协作机制&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;如果说上面聊的工具只是基础的话，那么远程工作最大的挑战就是沟通了。对于一个成熟的团队来说良好的沟通一定是必不可少的，甚至沟通的品质决定了做事情的品质。&lt;b&gt;并不是说因为远程工作因为条件约束，就少沟通甚至不沟通了，相反的，在这种环境下我们的沟通可能会更多更细致，只是形式并不仅仅限于面对面的会议这种形式而已。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在聊我们的沟通实践之前，我想先聊聊沟通的意义，首先我认为沟通最重要的意义在于：&lt;b&gt;信息拉平&lt;/b&gt;。对于一个远程的团队来说，用大白话来说也就是：大家需要互相都知道自己该干嘛，团队正在干嘛以及该干嘛。这件事情在很多公司是通过大大小小的会议，或者甚至吼一嗓子完成的。&lt;b&gt;但是在一个远程的团队中，沟通这件事情需要做得更加的透明。&lt;/b&gt;即使是远程，大部分时候会议仍然是最高效的信息拉平方式，类似 Zoom 这样的视频会议工具已经提供了很好的平台，而且智能手机和移动互联网的普及也让会议的参与变得更加的便捷。&lt;/p&gt;&lt;p&gt;这里多提一句，PingCAP 是 Zoom 的重度用户（也是企业客户），Zoom 的用户体验真的非常棒，我们即使是全公司级别的会议，也都是通过 Zoom 完成的（昨天刚得知一个令人振奋的消息，也给 Zoom 做个友情广告，目前国内用户访问 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//zoom.com.cn&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;zoom.com.cn&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; 可以免费不限时长使用，直到疫情得到有效控制之日）。&lt;/p&gt;&lt;p&gt;在 PingCAP 从形式上来说，因为会议基本都会有远程的同学参与，所以默认都是线上会议。从内容上来说，大概有两种会议，一种是例会，一种是具体业务的沟通会。相信和别的公司也没什么不一样，我这里聊聊我们觉得比较好的一些实践：&lt;/p&gt;&lt;p&gt;在 PingCAP 各个团队（包括虚拟团队）大大小小一定都会有例会，通常以周为单位，有些比较重要且紧急的项目会以天为单位，会议的时间和长度也不一定。周会是一个很好的机会能让团队成员互相了解大家在干嘛，对于 Manager 也能很好的知道方向有没有歪，进度是否正常。&lt;/p&gt;&lt;p&gt;另外分享一些关于会议的实践：&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 对于类似例会这种偏信息拉平的会议，Manager 最好不要直接在这类会议上做决策。&lt;/b&gt;因为很多信息可能是刚接收到马上做决策不一定是经过深刻的思考，另一方面信息可能不全面，还需要进一步的跨团队沟通。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 善用 Calendar。&lt;/b&gt;我建议研发团队内部将 Calendar 可以别人可见（这点上财务，商务，高管团队需要酌情考虑），通过订阅和你相关的同事的 Calendar 是一个也是一个很好的信息拉平渠道。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. 会议前发 Agenda，会议后形成 Meeting notes 发给参会的人，并记录在 Wiki 中。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;4. 尽量少开大会长会。&lt;/b&gt;Amazon 的「两个 Pizza 原则」也同样适应于开会（这点说起来简单，其实做起来很困难，尤其在跨团队协作上，我们也在努力）。&lt;/p&gt;&lt;p&gt;这里说几个我们亲身经历的坑。因为远程的关系，在 PingCAP 我们一直以来要求尽可能的使用文档进行沟通，我们确实在早期很严格的践行了，但是那个时候我们重度依赖在线文档，于是陷入了一个问题：协同功能很棒， 但是索引功能很弱。于是很多时候就出现了，可能记录某件事情的文档找不到了，或者有多个文档（很多甚至只是讨论稿）在描述同一个事情。为了解决这个问题，我们后来引入了 Confluence，用做团队 Wiki，主要起到信息索引和搜索的功能，我们非常依赖 Confluence，并且玩出了很多花样，这里我只举几个最佳实践的例子：&lt;/p&gt;&lt;p&gt;1. 给每个团队创建团队的 Page（类似前面提到的「地图」的概念）索引一切和这个团队相关的内容，让新人能够一目了然。例如下面是来自 TiKV 团队的例子：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c7c0bb0dcdb5c1ae99e204c8ceb5971f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;806&quot; data-rawheight=&quot;531&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;806&quot; data-original=&quot;https://pic4.zhimg.com/v2-c7c0bb0dcdb5c1ae99e204c8ceb5971f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c7c0bb0dcdb5c1ae99e204c8ceb5971f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;806&quot; data-rawheight=&quot;531&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;806&quot; data-original=&quot;https://pic4.zhimg.com/v2-c7c0bb0dcdb5c1ae99e204c8ceb5971f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-c7c0bb0dcdb5c1ae99e204c8ceb5971f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;2. 团队周报和个人周报，每个团队的周报会一层层的汇总和归纳，在每周的高管例会前发出。所有的周报都在 Confluence 里被索引。&lt;/p&gt;&lt;p&gt;3. Logbook，这个是我们比较有意思的东西，对于一些带有探索性质的工作，例如一些小实验，性能测试，一些特殊场景的优化等等。我们也会详细的记录下来，形成一个个实验 logbook，这些 logbooks 可以通过关键字被 Confluence 的检索到，一是作为未来实现或者输出成文章的素材，二是防止将来做重复的工作。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-08a1159f394f34127b7ad0d387788dd2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;764&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;764&quot; data-original=&quot;https://pic3.zhimg.com/v2-08a1159f394f34127b7ad0d387788dd2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-08a1159f394f34127b7ad0d387788dd2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;764&quot; data-rawheight=&quot;608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;764&quot; data-original=&quot;https://pic3.zhimg.com/v2-08a1159f394f34127b7ad0d387788dd2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-08a1159f394f34127b7ad0d387788dd2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在内部协作全面引入 Confluence 后，我们的文档信息碎片的问题得到了比较大的缓解，唯一美中不足的是 Confluence 的移动端做得实在不尽如人意，希望 Atlassian 团队未来能改进。&lt;/p&gt;&lt;p&gt;另一个坑来自于 IM 工具的选择。这个可能也不是坑，更多的是由于微信平台本身不是为了办公场景设计的带来的问题。由于我们多数的国内客户都倾向于使用微信作为沟通的渠道，作为一个 toB 企业，我们必须去适应这个现实（比如我手机上有几千个微信群），这个问题导致了我们 IM 沟通的碎片化，而远程工作的环境会进一步放大这个问题。可能同一件事情，有些同学看着微信，有些同学看着 Slack，这就导致了消息不对称。再者微信是一个封闭系统，没有 Open API，很难通过技术的手段同步到一个平台。另一个问题是，微信这种用法，工作和生活很难分开，有时候很令人苦恼。这个问题通过引入企业微信得到了一定的缓解，但是因为企业微信又是一个新的 IM，也是一个封闭系统，信息碎片化的问题和海外同事使用习惯上的问题仍然存在。在这个方面，我们仍然在探索。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;i&gt;05&lt;/i&gt;&lt;/b&gt; &lt;b&gt;远程办公环境下的自我管理&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;远程办公还有一个很重要的方面是个人的心理建设和自我管理。这点因人而异，其实很多人不太适合长期 work from home，例如我远程工作的时候一定要从家走出来，去个咖啡厅或者 WeWork 之类的地方才能进入工作状态，但是我们的首席架构师就可以五年如一日将他家的书房当成办公室。人无疑是最重要的一环，不过在这篇文章中，我并不想展开太多，有机会再详细聊聊，这篇文章我希望尽量关注比较普适的方法。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在远程环境下，需要工作者能够克服孤独感，并且由于没有同事在身边，需要比较强大的自律精神克服倦怠感。&lt;/b&gt;在这点上，我推荐使用一些个人时间管理工具，例如番茄钟，日历等工具。但是和公司选用工具一样，切忌贪多，选择一个用透最好。另外在生活中也保持一个规律的作息习惯也会很有帮助，这点在上面引用的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/siddontang/blog/blob/master/2016/my-remote-work.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;siddontang 那篇博客&lt;/a&gt;（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/siddontang/blog/blob/master/2016/my-remote-work.md&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/siddontang/b&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;log/blob/master/2016/my-remote-work.md&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;）中有很好的阐述。&lt;/p&gt;&lt;p&gt;&lt;b&gt;另外一点比较重要的是，很多工程师可能是一个比较内向的性格，遇到困难的时候，尤其是在远程的环境下，容易钻牛角尖。&lt;/b&gt;这种情况下，一定切记要主动的求助和沟通，甚至可能需要比面对面的环境下更加频繁的沟通。&lt;b&gt;对于管理者来说，要做到这点，需要将任务拆解得足够细，在前期沟通需要反复确认是否和远程工作的同学达成一致，这个环节需要非常的重视。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;i&gt;06&lt;/i&gt;&lt;/b&gt; &lt;b&gt;Online and Offline（线上与线下）&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;PingCAP 并不是一个彻底的每个人都远程办公的公司，我们仍然在各个大城市有我们的办公室（北京、上海、广州、深圳、成都、杭州、硅谷）。就像上一节说的，远程工作看起来很美，但是可能也并不适合每一个人。人是社会化动物，很多时候我们仍然需要从线上走到线下，和同事一起吃顿饭，聊个天。因为这点，我们的解法是：&lt;b&gt;PingCAP 使用远程的工作方式和文化，但是仍然保留着各地的办公室，所以我们有一个不成文的惯例，当每个城市的员工超过 4 个人的时候，就可以找个办公室了。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在各地 Office 的运营上，也是比较有 PingCAP 的特色的。很多传统公司的各地子公司通常是定位特殊的办事处，例如销售，测试，研发等。但是由于我们的远程办公文化，&lt;b&gt;我们各地的 Office 其实更像是一个虚拟的组织，也就是说可能同一个团队的同学会隶属于不同的 Office，或者反过来，每一个分公司都可能会有不同职能、不同团队的同学。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这样是有好处的：&lt;/p&gt;&lt;p&gt;1. 作为一个 toB 公司，我们国内的客户也主要分布在几个主要城市，在客户当地有分公司能更方便的开展客户支持和市场活动。&lt;/p&gt;&lt;p&gt;2. 在同一个城市的办公室内有不同部门的同事，有助与构建更多样化且健康的文化，也能更顺畅的进行跨团队合作。&lt;/p&gt;&lt;p&gt;办公室的 Manager 更偏向于当地办公室具体事务和活动的管理和组织，另外每个 Office 都会有一个行政来处理日常的事务。所以，通常我们的 Team building 会有几种：&lt;/p&gt;&lt;p&gt;1. 当地 Office 自己会有 TB 的经费，可以自己组织活动。&lt;/p&gt;&lt;p&gt;2. 每当团队出差到同一个地方的时候，组织团队的 TB（当然，我们大多数是程序员，基本就是吃吃吃）。&lt;/p&gt;&lt;p&gt;这里提到了出差，顺便介绍一下，我们建议远程研发团队的 Managers 大概一个月需要尽量和团队的大多数成员 Face to Face 的见一次面，这些行程通常可以和客户拜访安排在一起。&lt;b&gt;线下的沟通可以让线上的交流更加顺畅。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;总得来说，远程办公并非十全十美，像我们这样的科技公司具备天然的文化和规制土壤，但仍然有很多地方有继续改进的空间，欢迎大家给我们多提建议。很高兴在国内远程办公文化尚未普及之时，能够用这么长的篇幅为大家分享一点落地经验。在这个特殊时期，我们在家不动的同时劳动创造价值，也算是为社会做了点微小的贡献。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;更多阅读：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-60ab5bd867c2434d70c957a02a2169e1_ipico.jpg&quot; data-image-width=&quot;1200&quot; data-image-height=&quot;1200&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Blog-cns | PingCAP&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-01-28-104184804</guid>
<pubDate>Tue, 28 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>ECUG 演讲分享 | 刘奇：Chaos Engineering at PingCAP</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-01-17-103186927.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103186927&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-35ac354c86523f1d1e8c6123746bc257_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;i&gt;本文转载自微信公众号“七牛云”。&lt;/i&gt;&lt;/p&gt;&lt;blockquote&gt;在 1 月 5 日 ECUG 大会的分享中 ，我司创始人兼 CEO 刘奇为大家带来了主题为《Chaos Engineering at PingCAP》的精彩演讲，和大家分享了关于 Chaos Engineering 的有关内容和深度思考。以下为演讲实录。&lt;/blockquote&gt;&lt;p&gt;在演讲的开始，我先提一下 TiDB。TiDB 是一个分布式数据库，可以对外支持 MySQL 协议和 Spark API。TiDB 是目前在 NewSQL 领域目前使用规模最大、用户最多也是最火的数据库之一。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-150a36c8fb329753a26c9a303700147e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic3.zhimg.com/v2-150a36c8fb329753a26c9a303700147e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-150a36c8fb329753a26c9a303700147e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic3.zhimg.com/v2-150a36c8fb329753a26c9a303700147e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-150a36c8fb329753a26c9a303700147e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;TiDB 典型场景是这样的：比如大家要做分库分表，用 TiDB 就不用折腾了；再比如大家如果需要复杂的 workload， 譬如 OLTP + OLAP 同时在系统里面是并存的情况。通常大家用数据库的时候会考虑是 OLAP 还是 OLTP，但是对用户来说，不希望数据库的人去教育他什么是 OLAP，什么是 OLTP，SQL 能足够快跑出来就可以了，使用要尽可能简单。还有一些用户，比如日本、美国的用户，是从 Amazon Aurora 迁移到 TiDB 上面的，当规模到几十 T 的时候，Aurora 跑起来就很吃力了。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a35371caf30ed11094ef17f919a9ae71_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-a35371caf30ed11094ef17f919a9ae71_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a35371caf30ed11094ef17f919a9ae71_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-a35371caf30ed11094ef17f919a9ae71_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a35371caf30ed11094ef17f919a9ae71_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们再来说 PingCAP 是一家什么样的公司？可能大家都知道 TiDB，不知道 PingCAP。其实 TiDB 是 PingCAP 开发的。那 CNCF 又是什么呢？CNCF 全称是云原生计算基金会。可能很多人知道 K8s 但是不知道 CNCF，就像大家知道 TiDB 不知道 PingCAP 是一样的道理，Kubernetes 是 CNCF 下面最火的一个项目。目前在整个 CNCF 所有代码贡献里面，PingCAP 在里面全球排名第六，在我们下面排名第七的是华为，前八名里面只有两家中国的公司。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0bdac12c851dce6c3639e96afa12e628_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-0bdac12c851dce6c3639e96afa12e628_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0bdac12c851dce6c3639e96afa12e628_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-0bdac12c851dce6c3639e96afa12e628_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0bdac12c851dce6c3639e96afa12e628_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;接下来，我们会以 TiDB 为例，来具体演示 Chaos Mesh 的使用。首先，我们需要关注的是 TiDB 的结构。下图是 TiDB 的结构，为什么会讲 TiDB 的结构？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-533262e2ddd1b93dbe870f9a19baa531_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-533262e2ddd1b93dbe870f9a19baa531_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-533262e2ddd1b93dbe870f9a19baa531_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-533262e2ddd1b93dbe870f9a19baa531_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-533262e2ddd1b93dbe870f9a19baa531_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如图，TiDB 大体上分成两层：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;计算层，就是大家通常理解的 SQL 层。&lt;/li&gt;&lt;li&gt;存储层，包括一个支持行存模型的 TiKV 和一个支持列存模型的 TiFlash。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除此之外，还有一个调度器 PD，负责对整个系统进行全局控制。做数据库这个事情，当时入坑的时候并不知道这么难，后来才知道怎么这么难，我讲完以后大家可能觉得这个事更难。这几年我们遇到了编译器的 bug，遇到了操作系统的 bug，遇到文件系统的 bug，也被坑到过造成了数据的丢失，好在最终修复了。可能这些问题大家平时遇到的相对比较少，但是在我们这儿都遇到了，我们还遇到了某云存储厂商采购的某批磁盘硬件驱动有问题，写进去的数据和读出来的数据有一部分是不一样的。我不知道大家有没有遇到这些神奇的现象，但是作为一个数据库厂商，在我们这儿都遇到过。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0dd23eb8403e8f67a0e1861a64bde213_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-0dd23eb8403e8f67a0e1861a64bde213_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0dd23eb8403e8f67a0e1861a64bde213_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-0dd23eb8403e8f67a0e1861a64bde213_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0dd23eb8403e8f67a0e1861a64bde213_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图是 GitHub 的一个页面，大家应该都见过，一年它会挂几次，如果大家足够幸运，应该会看到。这张图告诉我们什么呢？告诉我们的是你重新刷新可能就好了。当他说这个的时候，意味着他对这个情况是有预期、有处理的。我们的系统是不是也有这样的机制呢？比如出现一个什么问题，在用户侧大致怎么操作一下，就可以恢复。但最近 GitHub 又挂了一次，这次好像花了好几个小时才恢复。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-be3f77ef286daee4565cbe59ec360799_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;934&quot; data-rawheight=&quot;611&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;934&quot; data-original=&quot;https://pic2.zhimg.com/v2-be3f77ef286daee4565cbe59ec360799_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-be3f77ef286daee4565cbe59ec360799_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;934&quot; data-rawheight=&quot;611&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;934&quot; data-original=&quot;https://pic2.zhimg.com/v2-be3f77ef286daee4565cbe59ec360799_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-be3f77ef286daee4565cbe59ec360799_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这只黑天鹅就是我们这几年的体验。差不多前面十年写程序遇不到的问题，这几年全部遇到了。大家见到黑天鹅之前会觉得这个世界上天鹅全是白的，直到编译器和操作系统的 bug 把我们坑到的时候，我们才觉得自己没有那么幸运。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-dbc44f307be38d63db908e9699c6cef2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic3.zhimg.com/v2-dbc44f307be38d63db908e9699c6cef2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-dbc44f307be38d63db908e9699c6cef2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic3.zhimg.com/v2-dbc44f307be38d63db908e9699c6cef2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-dbc44f307be38d63db908e9699c6cef2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图是我们遇到的一个操作系统 bug，我们后面还专门写了文章描述怎么找到这个 bug 的。大概意思是 Linux kernel 有一个 bug，明明有内存，但是内存分不出来，导致没法将 page cache 刷到磁盘上，丢失了数据。我想说的是操作系统 bug 离我们也挺近的，我们上面应用程序写得再好，后面也可能会在操作系统遇到问题。不过我们通常写程序的时候，这点考虑得比较少。&lt;/p&gt;&lt;p&gt;大家都觉得文件系统很稳定，应该没有遇到过文件系统的 bug，大家以前也不知道文件系统有这么脆弱，直到有一个工具出现了：它最早用来找安全漏洞，后来被用来找其他的系统漏洞。我们拿着这个工具去测试一下已有的文件系统，下图是遇到第一个 bug 的时间。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-df4383f8dcbcdd936c3c9d77da9fc4a7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-df4383f8dcbcdd936c3c9d77da9fc4a7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-df4383f8dcbcdd936c3c9d77da9fc4a7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-df4383f8dcbcdd936c3c9d77da9fc4a7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-df4383f8dcbcdd936c3c9d77da9fc4a7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;当时看来这些系统都是非常好的。Ext4 是被认为相当不错的，确实表现也不错，因为它扛了 2 小时才找到第一个 bug。最早我们推荐的两个文件系统是 Xfs 和 Ext4，后来有一次我们被 Xfs 坑到了，就把 Xfs 关掉不推荐了，所以我们现在只推荐 Ext4。这个工具很有意思，大家一目了然就知道文件系统成熟度是什么样的，谁能扛得最久，谁在现实中是最稳定的文件系统。所以有时候我们会在稳定性和性能之间，根据不同的业务要求来做选择。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7e1958c9556a80ba7b642eea14b891e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic3.zhimg.com/v2-7e1958c9556a80ba7b642eea14b891e6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7e1958c9556a80ba7b642eea14b891e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic3.zhimg.com/v2-7e1958c9556a80ba7b642eea14b891e6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-7e1958c9556a80ba7b642eea14b891e6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;说到 Chaos Engineering，我不知道大家会想起什么。Chaos 的中文翻译是混沌，可能混沌这个概念有点模糊，不过我们今天就来看它到底能解决什么问题。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c964104641b4fa5722378187394ba930_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-c964104641b4fa5722378187394ba930_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c964104641b4fa5722378187394ba930_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-c964104641b4fa5722378187394ba930_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c964104641b4fa5722378187394ba930_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上面是我刚刚创业的时候写的几篇文章，关于分布式系统测试的，当时就已经知道分布式系统测试无比困难。我记得我们要在几百个微服务里面找一个挂掉的微服务，这个很有意思，几百个微服务中那个抖动的微服务如果刚好是你存储相关的，或者和你登陆相关的，那么整个系统会是什么样的反应？用户就登陆不上去，或者登陆很卡，要么后面的操作会很卡。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-37c662f51c9c673adeb812f5fb5ca121_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-37c662f51c9c673adeb812f5fb5ca121_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-37c662f51c9c673adeb812f5fb5ca121_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-37c662f51c9c673adeb812f5fb5ca121_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-37c662f51c9c673adeb812f5fb5ca121_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这方面历史上的先行者是 Netflix，他们创建了一个叫做 Chaos monkey 的东西，就是在整个系统里面，随机地去 kill，比如几百几千个冗余服务，随机 kill 掉一个，来看系统会怎么样。&lt;/p&gt;&lt;p&gt;我不知道大家有没有人在线上真的做过这种测试，应该是没有的。之前我们提到过黑天鹅，当然不仅有黑天鹅还有墨菲定律，就是所有你觉得可能会出现的最后一定会出现。如果你自己不去 kill，它一定会被别人 kill 掉，各种意外都会有。&lt;/p&gt;&lt;p&gt;这里面比较有启发的一件事是 Netflix 在 2014 年创建了一个新的岗位，这个岗位就叫 Chaos engineer，是专门有个工程师做这件事，在线上去随机 kill 节点。到时候大家很可能面临的情况是，可能某一天半夜，研发突然被全部拉起来，所有人同时在查问题，却不知道问题在哪里。大家第一反应是「这不是我的问题」，甩锅一定要快。到底谁的问题呢？其实老板不关心到底是谁的问题，关心的是能不能尽快找到以及什么时候可以恢复。那么这个系统会帮你非常大的忙。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2019 年 12 月底，我们在 GitHub 上公开了这个项目，叫 Chaos Mesh，是目前 Star 数增长最快的一个项目之一。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;它的思想很简单，通常情况下你系统有一个正常状态，所有人都知道，在这个正常状态下，你就开始做一些假设，比如说 kill 掉一个节点，我觉得应该出现什么情况。然后你去做实验，根据我的经验，通常大家假设都是不对的，你假设kill 这个节点以后，系统还是稳定的，过几秒它就恢复了，或者对系统没有什么多大影响，或者会稍微抖动一下。这个假设很可能是不靠谱的，因为它也许开始影响别人，别人又可能继续影响其他服务，在系统里面就像塞车一样，你发现塞车，只要它塞过的地方就会一直在塞车。&lt;/p&gt;&lt;p&gt;然后再去 verify 一下你刚才做的实验，你发现它是不靠谱的，然后去改进你的系统，再来一圈。这个思路很简单。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-da68c2575b4af91b13ce725684bf45ef_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-da68c2575b4af91b13ce725684bf45ef_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-da68c2575b4af91b13ce725684bf45ef_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-da68c2575b4af91b13ce725684bf45ef_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-da68c2575b4af91b13ce725684bf45ef_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上面是我们为整个系统设计的图，我不知道大家看到这个 monkey 的时候有什么感受。我当时第一反应是中外文化太一致了，因为国外叫 Chaos Monkey，国内叫什么？中国有四大名著，很厉害的那只猴子叫什么？天庭以前从来没有想到过，一只猴子可以造成这么大的影响，最后得改整个体系，以便让这只猴子能融入整个体系。&lt;/p&gt;&lt;p&gt;这个跟 Chaos Monkey 的想法是一模一样的，你会让这只猴子融入你的系统，最终，你会把它吸纳到你的体系来。你不得不为它单独建一个职位，单独建一个体系，单独建一个流程。所以这个过程中，是不是中国几千年的文化跟老外的文化突然有了共同点，大家都一样，都需要猴子，一只猴子的效果非常好。在猴子出现之前，杨戬是无敌的，天庭的蟠桃也从没被偷吃过。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-693f4e5a33ba565da468584c137009fc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-693f4e5a33ba565da468584c137009fc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-693f4e5a33ba565da468584c137009fc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-693f4e5a33ba565da468584c137009fc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-693f4e5a33ba565da468584c137009fc_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图是我们开源之后的反应，马上就登上了 Go 语言的 trending 第一名，在 hacker news 上面也登上了首页，当时排名是第十。全世界人民都觉得这个很好，很欢欣很鼓舞，我们自己也是。&lt;/p&gt;&lt;p&gt;其实大家都想发明一只猴子，这只猴子可能是一般的猴子，也可能是孙悟空，到底我们需要什么样的猴子呢？所以，在做这个系统前我们做了一个调研，我们自己做的 Chaos Mesh 有哪些功能，我们做了哪些事。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-578cb71d29663f272f61d93dc44831e0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-578cb71d29663f272f61d93dc44831e0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-578cb71d29663f272f61d93dc44831e0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-578cb71d29663f272f61d93dc44831e0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-578cb71d29663f272f61d93dc44831e0_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;比如 CPU burn，就是相当于，在一个系统里面你有一个进程把 CPU 都烧光，死循环，再不行，就多线程的死循环，总能把 CPU 吃得差不多，这个有点像什么呢？有点像 CPU 的过热，CPU 过热之后就开始降频，就是你的系统突然变慢了，很有可能是机房的通风不行，可能是一个小小的意外，你系统就变慢了，变慢了以后，你整个公司的业务是什么样的，没有人知道。最可怕的是老板不知道，老板不知道大家就比较辛苦，不管是谁的问题，全部叫起来。Mem burn 是内存分不出来，比如一个系统 20G 内存，突然一个程序占了 19G，你本来应该能够跑的没有内存了，这个很容易理解，让内存泄露，别的不擅长，这个太简单了。这些功能很好做，Chaos Mesh 目前还没有做而已，后面会马上支持。&lt;/p&gt;&lt;p&gt;讲了这么多好处，大家是不是想实战一下？我们很不好意思的贴出了一些猴子找到的 bug。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0980112d4155ed048205a2456d61b85d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-0980112d4155ed048205a2456d61b85d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0980112d4155ed048205a2456d61b85d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-0980112d4155ed048205a2456d61b85d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-0980112d4155ed048205a2456d61b85d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们之前有个同事发了一条关于 Chaos Mesh 的朋友圈，他是这么说的，『以前我觉得自己写代码挺牛逼的』。我问了一句，『后来呢？』他说『不说了，连续几周都在修 bug』。相信我，大家的应用程序跑上来，不会有什么意外，都一样，因为你们从来没有测过这种情况，在这种情况下它的表现正常才奇怪，因为你都没定义这种情况正常是什么。大家有没有想过，你写进磁盘，在磁盘上读，读出来的数据不一样，程序什么表现？很可怕，有人程序没有挂，因为他自己写的东西他没有校验，写出来的数据在后面没有加一个校验符，下次读出来直接用了，天知道这是个什么结果。然后关键是它还没死，在系统里面接着跑，跑了以后影响别的，就像一个病毒在系统里面复制，结果是不可预期的。怎么办？这个系统都可以帮大家搞定。下面是我们自己找的一些 bug。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c3a2a9b2563591a83ca4f2a00a60b0e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic3.zhimg.com/v2-c3a2a9b2563591a83ca4f2a00a60b0e6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c3a2a9b2563591a83ca4f2a00a60b0e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic3.zhimg.com/v2-c3a2a9b2563591a83ca4f2a00a60b0e6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-c3a2a9b2563591a83ca4f2a00a60b0e6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5f8f0afb73cff21bbcf3218cd9c5b0f8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-5f8f0afb73cff21bbcf3218cd9c5b0f8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5f8f0afb73cff21bbcf3218cd9c5b0f8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-5f8f0afb73cff21bbcf3218cd9c5b0f8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5f8f0afb73cff21bbcf3218cd9c5b0f8_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图是一个 pod 跑数据库的过程，跑的过程中我们 kill 掉了前面大图里面的一个存储节点，我们的预期是 QPS 肯定会掉下来，后面会恢复。我们看起来好像是的，QPS 会掉 0，到 0 之后，大概过几秒钟好像又恢复了，看起来一切都正常。直到我们去观察整个系统的时候，会发现 QPS 的恢复花了相当长的一段时间，整个持续了大概有 10 分钟才恢复到正常值。我们的预期是 kill 掉之后很快应该能够恢复到正常值，但是它实际上没有做到。毫无疑问后来我们发现了一个 bug。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4db13d8765eabcd48e75eea06d0cd870_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-4db13d8765eabcd48e75eea06d0cd870_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4db13d8765eabcd48e75eea06d0cd870_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/v2-4db13d8765eabcd48e75eea06d0cd870_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-4db13d8765eabcd48e75eea06d0cd870_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4ce6ecdb6604429113dd360cfa61893f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-4ce6ecdb6604429113dd360cfa61893f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4ce6ecdb6604429113dd360cfa61893f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-4ce6ecdb6604429113dd360cfa61893f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4ce6ecdb6604429113dd360cfa61893f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;上图是它的用法，像一般的开源项目一样，先克隆下来，当然 K8s 有个好处，安装比较方便，三部曲就完了。完了以后就开始设定行为，比如说我整个系统里面想随机 kill 掉一些节点或者 kill 掉某一些节点，我应该怎么做，我选择我 kill 掉哪些标签的节点，kill 的方式什么样呢？每隔 2 分钟一次，这个配置很好理解。我们只要部署一下刚才的 YAML 文件就行，当我们不想做实验的时候，只要停掉整个实验，这个时候通常我们的系统应该是恢复的，这个时候是大家最紧张的时候，因为大概率你的系统是没有恢复的。这是我们的经验，总是能找到问题。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5e6df58079de744a3f020674ab3ad255_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-5e6df58079de744a3f020674ab3ad255_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5e6df58079de744a3f020674ab3ad255_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic2.zhimg.com/v2-5e6df58079de744a3f020674ab3ad255_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5e6df58079de744a3f020674ab3ad255_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是我们每隔 5 分钟 kill 掉一个节点的图，看起来 QPS 是这样的，最终都能回来。希望大家的线上系统看起来是这样，看起来还是正常的。&lt;/p&gt;&lt;p&gt;接下来是比较难的一部分，很多人可能对 K8s 是什么不太清楚，其实 K8s 相当于是一个操作系统，node 是相当于一台机器，operator 是相当于 systemd，pod 相当于 process，sidecar 相当于 thread，最后一个需要一点时间来理解。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a9ab0a6b97ee139abc570b1f87a44741_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1302&quot; data-rawheight=&quot;732&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1302&quot; data-original=&quot;https://pic2.zhimg.com/v2-a9ab0a6b97ee139abc570b1f87a44741_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a9ab0a6b97ee139abc570b1f87a44741_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1302&quot; data-rawheight=&quot;732&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1302&quot; data-original=&quot;https://pic2.zhimg.com/v2-a9ab0a6b97ee139abc570b1f87a44741_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a9ab0a6b97ee139abc570b1f87a44741_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;其实上面这么多，&lt;b&gt;总结下来一句话就是 All in K8s&lt;/b&gt;，整个系统是完全基于 K8s 在用的，如果你的系统没有用 K8s，你没有办法用这套系统在上面做实验。有个很有意思的事，我们在美国跟用户聊，你用什么部署方式，我说我们用 Ansible。再问你们有没有 K8s？要是没有，那我就不看了。在美国就是这样，K8s 是一个政治正确的选择了，如果你的系统不是跑在 K8s 上面，就不用聊了，大家 match 不上。就像相亲一样，有车吗？有房吗？如果没有，再见。所以还没学的同学赶紧学一下，要不然以后跟美国人交流有困难。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e5f44f0506a20d75c95d5af156b75994_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1304&quot; data-rawheight=&quot;732&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1304&quot; data-original=&quot;https://pic1.zhimg.com/v2-e5f44f0506a20d75c95d5af156b75994_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e5f44f0506a20d75c95d5af156b75994_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1304&quot; data-rawheight=&quot;732&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1304&quot; data-original=&quot;https://pic1.zhimg.com/v2-e5f44f0506a20d75c95d5af156b75994_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-e5f44f0506a20d75c95d5af156b75994_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4726501b65b75be6b092d83582baa3e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1296&quot; data-rawheight=&quot;724&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1296&quot; data-original=&quot;https://pic3.zhimg.com/v2-4726501b65b75be6b092d83582baa3e6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4726501b65b75be6b092d83582baa3e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1296&quot; data-rawheight=&quot;724&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1296&quot; data-original=&quot;https://pic3.zhimg.com/v2-4726501b65b75be6b092d83582baa3e6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-4726501b65b75be6b092d83582baa3e6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是它的整个结构，重点看 CRD 里面，可以构造的几种常见的错误，像网络分区、网络丢包、网络重发、带宽限制等等。然后是文件系统，我们可以进行文件操作，写出来的数据和读出来的数据不一样。或者是写入失败，或者读取失败。&lt;/p&gt;&lt;p&gt;Kubernetes 有 API Server，很好理解，你可以认为有 N 只猴子，每只猴子只做一件事，比如有一只猴子只做网络相关的，有一只就只做 I/O 相关的，本身都是 CRD。网络相关的使用的是 iptables，大家都知道 iptables 可以做网络上的各种操作，比如说隔离，比如说让数据只能进不能出等等，I/O 这边用的是 fuse。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-dcb1e43597f395770a9c73534f452cc9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1296&quot; data-rawheight=&quot;726&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1296&quot; data-original=&quot;https://pic2.zhimg.com/v2-dcb1e43597f395770a9c73534f452cc9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-dcb1e43597f395770a9c73534f452cc9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1296&quot; data-rawheight=&quot;726&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1296&quot; data-original=&quot;https://pic2.zhimg.com/v2-dcb1e43597f395770a9c73534f452cc9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-dcb1e43597f395770a9c73534f452cc9_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是常见的几种错误，这里看看 I/O delay，我们曾经遇到一个问题，某云盘，一次写入操作花了 5 秒，你知道大概率是哪里有个 bug，但是你不知道具体哪里有 bug。你就是起个虚拟机挂了个盘，最后一个操作 flush 5 秒，就一点点数据，肯定是哪里有个 bug，通常情况下大家觉得这个 disk 是本地的，没有问题。我印象中有人写过一篇文章说，比磁盘损坏更可怕的是什么？是不知道为什么一个磁盘读写速度只有原来的 1/10，就是它突然掉速了，这比坏掉更可怕。&lt;/p&gt;&lt;p&gt;下面这些图我们可以看出它是怎么 work 的。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-86ef8f974c899c01e3a597fcea32fcfb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1302&quot; data-rawheight=&quot;730&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1302&quot; data-original=&quot;https://pic4.zhimg.com/v2-86ef8f974c899c01e3a597fcea32fcfb_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-86ef8f974c899c01e3a597fcea32fcfb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1302&quot; data-rawheight=&quot;730&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1302&quot; data-original=&quot;https://pic4.zhimg.com/v2-86ef8f974c899c01e3a597fcea32fcfb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-86ef8f974c899c01e3a597fcea32fcfb_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-bee54ee33619e1f9a177085469366d1d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1318&quot; data-rawheight=&quot;734&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1318&quot; data-original=&quot;https://pic2.zhimg.com/v2-bee54ee33619e1f9a177085469366d1d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-bee54ee33619e1f9a177085469366d1d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1318&quot; data-rawheight=&quot;734&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1318&quot; data-original=&quot;https://pic2.zhimg.com/v2-bee54ee33619e1f9a177085469366d1d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-bee54ee33619e1f9a177085469366d1d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-841619054e1752bd0f2233f5fb237add_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1302&quot; data-rawheight=&quot;722&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1302&quot; data-original=&quot;https://pic2.zhimg.com/v2-841619054e1752bd0f2233f5fb237add_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-841619054e1752bd0f2233f5fb237add_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1302&quot; data-rawheight=&quot;722&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1302&quot; data-original=&quot;https://pic2.zhimg.com/v2-841619054e1752bd0f2233f5fb237add_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-841619054e1752bd0f2233f5fb237add_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;再来谈下未来的计划，我们未来计划有 verifier，verifier 这边可以添加更多的功能，比如我可以在某个时间点可以做什么操作，甚至我中间替换数据然后再去观察系统状态是不是不对。当然也会增加一个好看好用的界面，现在整个是通过命令行去操作的。另外也希望能够支持多云的错误注入，大家也不要假设云上的服务都是 OK 的。程序都是人写的，黑天鹅一定会出现的。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a6714748048981cfa9c36d0a35ffbf57_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1308&quot; data-rawheight=&quot;730&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1308&quot; data-original=&quot;https://pic4.zhimg.com/v2-a6714748048981cfa9c36d0a35ffbf57_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a6714748048981cfa9c36d0a35ffbf57_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1308&quot; data-rawheight=&quot;730&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1308&quot; data-original=&quot;https://pic4.zhimg.com/v2-a6714748048981cfa9c36d0a35ffbf57_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a6714748048981cfa9c36d0a35ffbf57_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;最后说一下整个系统可观测性的重要性，我不知道大家有没有做过数据库运维，通常业务那边说我有一个什么问题，我的第一反应是你是什么 workload。对方跟你讲了半天，你问对方你是读多还是写多，读是写的多少倍。对方说我也不是太清楚，这时候怎么办？这时候就需要有一套系统，能够在不需要业务侧给你解释的时候，你就知道业务侧做的是什么事，因为业务侧给你解释也不一定准确，因为他有自己的理解，每个人理解不一样。这个很可怕，这时候如果有一套系统，能够很好地去观测，你什么也不用跟我讲了。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9ee0041b9ed35cc56b81f17556825f66_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1290&quot; data-rawheight=&quot;724&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1290&quot; data-original=&quot;https://pic3.zhimg.com/v2-9ee0041b9ed35cc56b81f17556825f66_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9ee0041b9ed35cc56b81f17556825f66_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1290&quot; data-rawheight=&quot;724&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1290&quot; data-original=&quot;https://pic3.zhimg.com/v2-9ee0041b9ed35cc56b81f17556825f66_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-9ee0041b9ed35cc56b81f17556825f66_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这个系统大概什么意思呢？大家可以看一下上图。这里面最亮黄色是什么意思呢？是整个系统的写入热点，写入热点是什么概念？它是一条这样倾斜的斜线，这条线告诉我们的是什么？我后面怎么操作数据库不用管，看一眼就知道，这代表这个系统里面现在有 6 个表一直在做追加数据的操作。比如我们看到上面一大片紫色的分布很均匀，意味着它的写入相对比较随机，所以数据库这一侧，你不用跟别人聊，你一看就知道你要做什么操作，几个表在追加，几个表在随机写，几个表在随机读，还是有几个热点，这个好处是什么？当出现问题的时候快速定位，有这样一套系统就清楚了&lt;/p&gt;&lt;p&gt;这是整个项目在 GitHub 上的 pingcap/chaos-mesh 上，也欢迎大家关注我们的 &lt;b&gt;Twitter：chaos_mesh&lt;/b&gt;，以上就是我为大家带来的分享，谢谢大家。&lt;/p&gt;&lt;p&gt;&lt;b&gt;原文：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/dYv7neg6Pewbt1Mih_6c6Q%3Fscene%3D25%23wechat_redirect&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-11a07299ef87d0cb9d25442d87ee650c_180x120.jpg&quot; data-image-width=&quot;1264&quot; data-image-height=&quot;536&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;【ECUG 演讲分享】刘奇：Chaos Engineering at PingCAP&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-01-17-103186927</guid>
<pubDate>Fri, 17 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>TiKV 源码解析系列文章（十七）raftstore 概览</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-01-16-102991819.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102991819&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-84420d378f4461de7291c0b53020a017_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;第一作者：李建俊，第二作者：杨哲轩，王聪&lt;/p&gt;&lt;p&gt;TiKV 作为一个分布式 KV 数据库，使用 Raft 算法来提供强一致性。Raft 算法提供了单一 group 的一致性，但是单一 group 无法扩展和均衡。因此，TiKV 采用了 MultiRaft 的方式基于 Raft 算法提供能兼顾一致性、扩展均衡的 KV 储存。下文以 3.0 版本代码为例，讲述 raftstore 源码中的关键定义和设计。&lt;/p&gt;&lt;h2&gt;MultiRaft&lt;/h2&gt;&lt;p&gt;MultiRaft 顾名思义就是多个 Raft group。数据组织上，TiKV 将数据按范围划分成多个分片，这些分片称之为 region。每个 region 由一个 Raft group 来管理。Raft group 和 region 是一对一的关系。由下方示意图可以看到一个 Raft group 管理的多个副本分别落在不同的机器上，一个机器的数据包含了多个不同 region 的副本。通过这种组织方式，我们让 Raft group 并行起来，从而实现扩展和均衡。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2159b5bd1ed570b34bface9bb9bd6a24_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;668&quot; data-rawheight=&quot;387&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;668&quot; data-original=&quot;https://pic1.zhimg.com/v2-2159b5bd1ed570b34bface9bb9bd6a24_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2159b5bd1ed570b34bface9bb9bd6a24_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;668&quot; data-rawheight=&quot;387&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;668&quot; data-original=&quot;https://pic1.zhimg.com/v2-2159b5bd1ed570b34bface9bb9bd6a24_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-2159b5bd1ed570b34bface9bb9bd6a24_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;Batch System&lt;/h2&gt;&lt;p&gt;Batch System 是 raftstore 处理的基石，是一套用来并发驱动状态机的机制。状态机的核心定义如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub trait Fsm {
    type Message: Send;
 
    fn is_stopped(&amp;amp;self) -&amp;gt; bool;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;状态机通过 PollHandler 来驱动，其定义如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub trait PollHandler&amp;lt;N, C&amp;gt; {
    fn begin(&amp;amp;mut self, batch_size: usize);
    fn handle_control(&amp;amp;mut self, control: &amp;amp;mut C) -&amp;gt; Option&amp;lt;usize&amp;gt;;
    fn handle_normal(&amp;amp;mut self, normal: &amp;amp;mut N) -&amp;gt; Option&amp;lt;usize&amp;gt;;
    fn end(&amp;amp;mut self, batch: &amp;amp;mut [Box&amp;lt;N&amp;gt;]);
    fn pause(&amp;amp;mut self) {}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大体来看，状态机分成两种，normal 和 control。对于每一个 Batch System，只有一个 control 状态机，负责管理和处理一些需要全局视野的任务。其他 normal 状态机负责处理其自身相关的任务。每个状态机都有其绑定的消息和消息队列。PollHandler 负责驱动状态机，处理自身队列中的消息。Batch System 的职责就是检测哪些状态机需要驱动，然后调用 PollHandler 去消费消息。消费消息会产生副作用，而这些副作用或要落盘，或要网络交互。PollHandler 在一个批次中可以处理多个 normal 状态机，这些状态机在作为参数传入 end 方法时被命名为 batch，意思就是副作用会被聚合，一批批地处理。具体实现细节，后面的源码阅读章节会提到，这里就先不展开。&lt;/p&gt;&lt;h2&gt;RaftBatchSystem 和 ApplyBatchSystem&lt;/h2&gt;&lt;p&gt;在 raftstore 里，一共有两个 Batch System。分别是 RaftBatchSystem 和 ApplyBatchSystem。RaftBatchSystem 用于驱动 Raft 状态机，包括日志的分发、落盘、状态跃迁等。当日志被提交以后会发往 ApplyBatchSystem 进行处理。ApplyBatchSystem 将日志解析并应用到底层 KV 数据库中，执行回调函数。所有的写操作都遵循着这个流程。 当客户端发起一个请求时，RaftBatchSystem 会将其序列化成日志，并提交给 raft。一个简化的流程如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-02740e53652c964b0d70f7533e247acf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;379&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic4.zhimg.com/v2-02740e53652c964b0d70f7533e247acf_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-02740e53652c964b0d70f7533e247acf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;379&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic4.zhimg.com/v2-02740e53652c964b0d70f7533e247acf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-02740e53652c964b0d70f7533e247acf_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从代码来看，序列化发生在 propose 过程中。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;fn propose_normal(&amp;amp;mut self, req: RaftCmdRequest) -&amp;gt; Result&amp;lt;()&amp;gt; {
    let ctx = match self.pre_propose(poll_ctx, &amp;amp;mut req)?;
    let data = req.write_to_bytes()?;
    self.raft_group.propose(ctx.to_vec(), data)?;
    Ok(())
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而 propose 的副作用后续会通过 Raft 库的 Ready 机制搜集，batch 处理。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;if !self.raft_group.has_ready_since(Some(self.last_applying_idx)) {
    return None;
}
 
let mut ready = self.raft_group.ready_since(self.last_applying_idx);
self.mut_store().handle_raft_ready(ctx, &amp;amp;ready);
if !self.is_applying_snapshot() &amp;amp;&amp;amp; !ready.committed_entries.is_empty() {
    let apply = Apply::new(self.region_id, self.term(), mem::replace(&amp;amp;mut ready.committed_entries, vec![]));
    apply_router
        .schedule_task(self.region_id, ApplyTask::apply(apply));
}
self.raft_group.advance_append(ready);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 PeerStorage 的 handle_raft_ready 方法中，会将收集到 Ready 中的 Raft 日志收集到一个 WriteBatch 中，最终在 RaftPoller 的 end 方法中批量写入磁盘。而 Ready 中收集到的确认过的 Raft 日志，会被 &lt;code&gt;apply_router&lt;/code&gt; 发送到 apply 线程中，由 ApplyBatchSystem 来处理。关于一个写入在 Raftstore 模块中从提交到确认的整条链路，将在后续的章节中更详细地探讨，这里就不作展开了。&lt;/p&gt;&lt;h2&gt;Split 和 Merge&lt;/h2&gt;&lt;p&gt;TiKV 的每一个 Raft group 都是一个 Region 的冗余复制集，而 Region 数据不断增减时，它的大小也会不断发生变化，因此必须支持 Region 的分裂和合并，才能确保 TiKV 能够长时间稳定运行。Region Split 会将一段包含大量数据的 range 切割成多个小段，并创建新的 Raft Group 进行管理，如将 [a, z) 切割成 [a, h), [h, x) 和 [x, z)，并产生两个新的 Raft group。Region Merge 则会将 2 个相邻的 Raft group 合并成一个，如 [a, h) 和 [h, x) 合并成 [a, x）。这些逻辑也在 Raftstore 模块中实现。这些特殊管理操作也作为一个特殊的写命令走一遍上节所述的 Raft propose/commit/apply 流程。为了保证 split/merge 前后的写命令不会落在错误的范围，我们给 region 加了一个版本的概念。每 split 一次，版本加一。假设 region A 合并到 region B，则 B 的版本为 max(versionB, versionA + 1) + 1。更多的细节实现包括各种 corner case 的处理在后续文章中展开。&lt;/p&gt;&lt;h2&gt;LocalReader&lt;/h2&gt;&lt;p&gt;对于读操作，如果和写操作混在一起，会带来不必要的延迟和抖动。所以 TiKV 实现了一个单独的组件来处理。Raft group 的 leader 会维护一个 lease 机制，对于在 lease 内收到的请求，会立刻进行读操作；lease 外的请求，会触发 lease 续期。续期是通过心跳完成的。也就是读操作不会触发写盘行为。Lease 定义如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub struct RemoteLease {
    expired_time: Arc&amp;lt;AtomicU64&amp;gt;,
    term: u64,
}
 
pub struct Lease {
    // A suspect timestamp is in the Either::Left(_),
    // a valid timestamp is in the Either::Right(_).
    bound: Option&amp;lt;Either&amp;lt;Timespec, Timespec&amp;gt;&amp;gt;,
    max_lease: Duration,
 
    max_drift: Duration,
    last_update: Timespec,
    remote: Option&amp;lt;RemoteLease&amp;gt;,
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;RemoteLease 是读行为发生线程里所持有的 lease，它的状态由 Lease 来维护。Lease 自身由 RaftBatchSystem 来实际维护。bound 记录的是 lease 的失效时间，max_drift 表示允许精度误差。&lt;/p&gt;&lt;h2&gt;Coprocessor&lt;/h2&gt;&lt;p&gt;虽然读写已经包含了绝大多数 KV 操作，但是我们仍然需要一些特殊机制来自定义行为。比如为了保证事务正确，region 分裂不应该将同一个 key 的 MVCC 数据拆分到不同的 region 里。这些行为由 Coprocessor 来实现。TiKV 中一共有两种 Coprocessor。之前&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/tikv-source-code-reading-14/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这篇文章&lt;/a&gt;介绍的 SQL 下推逻辑属于 Endpoint，这里主要涉及的是 Observer。Observer 的作用是监听 KV 处理过程中的各种事件，并在事件发生时执行自定义逻辑。Coprocessor 的定义如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub trait Coprocessor {
    fn start(&amp;amp;self) {}
    fn stop(&amp;amp;self) {}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前已经定义的 Coprocessor 包括 AdminObserver、QueryObserver、SplitCheckObserver、RoleObserver、RegionChangeObserver。拿 QueryObserver 举个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pub trait QueryObserver: Coprocessor {
    /// Hook to call before proposing write request.
    ///
    /// We don&amp;#39;t propose read request, hence there is no hook for it yet.
    fn pre_propose_query(&amp;amp;self, _: &amp;amp;mut ObserverContext&amp;lt;&amp;#39;_&amp;gt;, _: &amp;amp;mut Vec&amp;lt;Request&amp;gt;) -&amp;gt; Result&amp;lt;()&amp;gt; {
        Ok(())
    }
 
    /// Hook to call before applying write request.
    fn pre_apply_query(&amp;amp;self, _: &amp;amp;mut ObserverContext&amp;lt;&amp;#39;_&amp;gt;, _: &amp;amp;[Request]) {}
 
    /// Hook to call after applying write request.
    fn post_apply_query(&amp;amp;self, _: &amp;amp;mut ObserverContext&amp;lt;&amp;#39;_&amp;gt;, _: &amp;amp;mut Vec&amp;lt;Response&amp;gt;) {}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此 Observer 监听了 pre_propose、pre_apply 和 post_apply 三个事件。ObserverContext 里面包含了 region 信息以及是否继续处理的标记。具体实现细节由后续文章介绍，这里不展开了。&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;这篇文章主要针对 TiKV 项目中 src/raftstore 里源码涉及的概念和原理做了一个大概的介绍。深入解读请留意后续的系列文章，欢迎大家关注。&lt;/p&gt;&lt;p&gt;&lt;b&gt;原文阅读：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/tikv-source-code-reading-17/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-60ab5bd867c2434d70c957a02a2169e1_ipico.jpg&quot; data-image-width=&quot;1200&quot; data-image-height=&quot;1200&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TiKV 源码解析系列文章（十七）raftstore 概览 | PingCAP&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-01-16-102991819</guid>
<pubDate>Thu, 16 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>分布式系统 in 2010s ：测试和运维</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-01-15-102810526.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102810526&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2ac2bbb8366274bf43bd936c96eb2bff_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;分布式技术的发展，深刻地改变了我们编程的模式和思考软件的模式。值 2019 岁末，PingCAP 联合 InfoQ 共同策划出品“分布式系统前沿技术 ”专题， 邀请众多技术团队共同参与，一起探索这个古老领域的新生机。本文出自我司 CTO 黄东旭，为「分布式系统 in 2010s」 系列最终篇。&lt;/blockquote&gt;&lt;p&gt;我觉得面对测试的态度是区分一个普通程序员和优秀程序员的重要标准。现如今我们的程序和服务越来越庞大，光是单元测试 TDD 之类的就已经很难保证质量，不过这些都是 baseline，所以今天聊点新的话题。&lt;/p&gt;&lt;p&gt;说测试之前，我们先问下自己，为什么要测试？当然是为了找 Bug。看起来这是句废话，但是仔细想想，如果我们能写出 Bug-free 的程序不就好了吗？何必那么麻烦。不过 100% 的 Bug-free 肯定是不行的，那么我们有没有办法能够尽可能地提升我们程序的质量？举个例子，我想到一个 Raft 的优化算法，与其等实现之后再测试，能不能在写代码前就知道这个算法理论上有没有问题？办法其实是有的，那就是形式化证明技术，比较常用的是 TLA+。&lt;/p&gt;&lt;h2&gt;TLA+&lt;/h2&gt;&lt;p&gt;TLA+ 背后的思想很简单，TLA+ 会通过一套自己的 DSL（符号很接近数学语言）描述程序的初始状态以及后续状态之间的转换关系，同时根据你的业务逻辑来定义在这些状态切换中的不变量，然后 TLA+ 的 TLC model checker 对状态机的所有可达状态进行穷举，在穷举过程中不断检验不变量约束是否被破坏。&lt;/p&gt;&lt;p&gt;举个简单的例子，分布式事务最简单的两阶段提交算法，对于 TLA+ Spec 来说，需要你定义好初始状态（例如事务要操作的 keys、有几个并发客户端等），然后定义状态间跳转的操作（ Begin / Write / Read / Commit 等），最后定义不变量（例如任何处于 Committed 状态的 write ops 一定是按照 commit timestamp 排序的，或者 Read 的操作一定不会读到脏数据之类的），写完以后放到 TLC Checker 里面运行，等待结果就好。&lt;/p&gt;&lt;p&gt;但是，我们活在一个不完美的世界，即使你写出了完美的证明，也很难保证你就是对的。第一， Simulator 并没有办法模拟出无限多的 paticipants 和并发度， 一般也就是三五个；第二，聪明的你可能也看出来了，一般 TLA+ 的推广文章也不会告诉你 Spec 的关键是定义不变量，如果不变量定义不完备，或者定义出错，那么证明就是无效的。因此，我认为形式化验证的意义在于让工程师在写代码之前提高信心，在写证明的过程中也能更加深对算法的理解，此外，如果在 TLC Checker 里就跑出异常，那就更好了。&lt;/p&gt;&lt;p&gt;目前 PingCAP 应该是国内唯一一个使用 TLA+ 证明关键算法，并且将证明的 Spec 开源出来的公司，大家可以参考 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/pingcap/tla-plus&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pingcap/tla-plus&lt;/a&gt; 这个 Repo，以及我们的首席架构师唐刘的这篇&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/721df5b4454b&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;博客&lt;/a&gt;了解更多。&lt;/p&gt;&lt;h2&gt;Chaos Engineering&lt;/h2&gt;&lt;p&gt;如果完美的证明不存在，那么 Deterministic 的测试存在吗？我记得大概 2015 年在 PingCAP 成立前，我看到了一个 FoundationDB 关于他们的 Deterministic 测试的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D4fFDFbi3toc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;演讲&lt;/a&gt;。简单来说他们用自己的 IO 处理和多任务处理框架 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//apple.github.io/foundationdb/flow.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flow&lt;/a&gt; 将代码逻辑和操作系统的线程以及 IO 操作解耦，并通过&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//apple.github.io/foundationdb/testing.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;集群模拟器&lt;/a&gt;做到了百分之百重现 Bug 出现时的事件顺序，同时可以在模拟器中精确模拟各种异常，确实很完美。但是考虑到现实的情况，我们当时选择使用的编程语言主要是 Go，很难或者没有必要做类似 Flow 的事情 。所以我们选择了从另一个方向解决这个问题，提升分布式环境下 Bug 的复现率，能方便复现的 Bug 就能好解决，这个思路也是最近几年很火的 Chaos Engineering。 做 Chaos Engineering 的几个关键点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;定义稳态，记录正常环境下的 workload 以及关注的重要指标。&lt;/li&gt;&lt;li&gt;定义系统稳态后，我们分为实验组和对照组进行实验，确认在理想的硬件情况下，无论如何操作实验组，最后都会回归稳态。&lt;/li&gt;&lt;li&gt;开始对底层的操作系统和网络进行破坏，再重复实验，观察实验组会不会回归稳态。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;道理大家都懂，但是实际做起来最大的问题在于如何将整个流程自动化。原因在于：一是靠手动的效率很低；二是正统的 Chaos Engineering 强调的是在生产环境中操作，如何控制爆炸半径，这也是个比较重要的问题。&lt;/p&gt;&lt;p&gt;先说第一个问题，PingCAP 在实践 Chaos Engineering 的初期，都是在物理机上通过脚本启停服务，所有实验都需要手动完成，耗时且非常低效，在资源利用上也十分不合理。这个问题我们觉得正好是 K8s 非常擅长的，于是我们开发了一个基于 K8s 的，内部称为 Schrodinger 的自动化测试平台，将 TiDB 集群的启停镜像化，另外将 TiDB 本身的 CI/CD，自动化测试用例的管理、Fault Injection 都统一了起来。这个项目还催生出一个好玩的子项目 Chaos Operator：我们通过 CRD 来描述 Chaos 的类型，然后在不同的物理节点上启动一个 DaemonSets，这个 DaemonSets 就负责干扰 Pod，往对应的 Pod 里面注入一个 Sidecar，Sidecar 帮我们进行注入错误（例如使用 Fuse 来模拟 IO 异常，修改 iptable 制造网络隔离等），破坏 Pod。近期我们也有计划将 Chaos Operator 开源。&lt;/p&gt;&lt;p&gt;第二个问题，其实在我看来，有 Chaos Engineering 仍然还是不够的，我们在长时间的对测试和质量的研究中发现提升测试质量的关键是如何发现更多的测试 workload。在早期我们大量依赖了 MySQL 和相关社区的集成测试，数量大概千万级别，这个决定让我们在快速迭代的同时保证质量，但是即使这样还是不够的，我们也在从学术界寻求答案.例如引入并通过官方的 Jepsen Test ，再例如通过 SQLfuzz 自动生成合法 SQL 的语句加入到测试集中，这个思路在最近我们的一次 Hackathon 项目中有一个很完美的落地，可以看看这篇介绍这个项目的文章&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/sqldebug-automatically/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《你呼呼大睡，机器人却在找 bug？》&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;总之，比起写业务逻辑，在分布式环境下写测试 + 写测试框架花费的精力可能一点都不少，甚至可能多很多（如果就从代码量来说，TiDB 的测试相关的代码行数可能比内核代码行数多一个数量级），而且这是一个非常值得研究和投资的领域。另外一个问题是如何通过测试发现性能回退。我们的测试平台中每天运行着一个名为 benchbot 的机器人，每天的回归测试都会自动跑性能测试，对比每日的结果。这样一来我们的工程师就能很快知道哪些变更导致了性能下降，以及得到一个长期性能变化趋势。&lt;/p&gt;&lt;h2&gt;eBPF&lt;/h2&gt;&lt;p&gt;说完测试，另外一个相关的话题是 profiling 和分布式 tracing。tracing 看看 Google 的 Dapper 和开源实现 OpenTracing 就大概能理解，所以，我重点聊聊 profiling。最近这几年我关注的比较多的是 eBPF（extended BPF）技术。想象下，过去我们如果要开发一个 TCP filter，要么就自己写一个内核驱动，要么就用 libpcap 之类的基于传统 BPF 的库，而传统 BPF 只是针对包过滤这个场景设计的虚拟机，很难定制和扩展。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6a4cbeb026f5bd79a32e60f9a8bae1b9_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1500&quot; data-rawheight=&quot;550&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1500&quot; data-original=&quot;https://pic2.zhimg.com/v2-6a4cbeb026f5bd79a32e60f9a8bae1b9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6a4cbeb026f5bd79a32e60f9a8bae1b9_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1500&quot; data-rawheight=&quot;550&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1500&quot; data-original=&quot;https://pic2.zhimg.com/v2-6a4cbeb026f5bd79a32e60f9a8bae1b9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-6a4cbeb026f5bd79a32e60f9a8bae1b9_b.jpg&quot;/&gt;&lt;figcaption&gt;图 1 BPF 工作原理&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a2df50e63994899e53e2dc42417f93ac_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;835&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1600&quot; data-original=&quot;https://pic1.zhimg.com/v2-a2df50e63994899e53e2dc42417f93ac_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a2df50e63994899e53e2dc42417f93ac_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;835&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1600&quot; data-original=&quot;https://pic1.zhimg.com/v2-a2df50e63994899e53e2dc42417f93ac_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a2df50e63994899e53e2dc42417f93ac_b.jpg&quot;/&gt;&lt;figcaption&gt;图 2 eBPF 架构图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在这个背景下，eBPF 应运而生，eBPF 引入了 JIT 和寄存器，将 BPF 的功能进一步扩充，这背后的意义是，我们在内核中有一个安全的、高性能的、基于事件的、支持 JIT 的字节码的虚拟机！这其实极大地降低了拓展内核能力的门槛，我们可以不用担心在驱动中写个异常把内核搞崩，我们也可以将给 llvm 用的 clang 直接编译成 eBPF 对象，社区还有类似 bcc 这样的基于 Python 的实用工具集……&lt;/p&gt;&lt;p&gt;过去其实大家是从系统状态监控、防火墙这个角度认识 eBPF 的。没错，性能监控以及防火墙确实是目前 eBPF 的王牌场景，但是我大胆地预测未来不止于此，就像最近 Brendan Gregg 在他的 blog 里喊出的口号：BPF is a new type of software。可能在不久的未来，eBPF 社区能诞生出更多好玩的东西，例如我们能不能用 eBPF 来做个超高性能的 web server？能不能做个 CDN 加速器？能不能用 BPF 来重定义操作系统的进程调度？我喜欢 eBPF 的另一个重要原因是，第一次内核应用开发者可以无视内核的类型和版本，只要内核能够运行 eBPF bytecode 就可以了，真正做到了一次编译，各个内核运行。所以有一种说法是 BPF is eating Linux，也不是没有道理 。&lt;/p&gt;&lt;p&gt;PingCAP 也已经默默地在 BPF 社区投入了很长时间，我们也将自己做的一些 bcc 工具开源了，详情可以参考 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/pingcap/kdt&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pingcap/kdt&lt;/a&gt; 这个 repo。其中值得一提的是，我们的 bcc 工具之一 drsnoop 被 Brendan Gregg 的新书收录了，也算是为社区做出了一点微小的贡献。&lt;/p&gt;&lt;p&gt;PingCAP 也已经默默地在 BPF 社区投入了很长时间，我们也将自己做的一些 bcc 工具开源了，详情可以参考 pingcap/kdt 这个 repo。其中值得一提的是，我们的 bcc 工具之一 drsnoop 被 Brendan Gregg 的新书收录了，也算是为社区做出了一点微小的贡献。&lt;/p&gt;&lt;p&gt;上面聊的很多东西都是具体的技术，技术的落地离不开部署和运维，分布式系统的特性决定了维护的复杂度比单机系统大得多。在这个背景之下，我认为解法可能是：不可变基础设施。&lt;/p&gt;&lt;p&gt;云和容器的普及让 infrastructure as code 的理念得以变成现实，通过描述式的语言来创建可重复的部署体验，这样可重用的描述其实很方便在开源社区共享，而且由于这些描述几乎是和具体的云的实现无关，对于跨云部署和混合数据中心部署的场景很适合。有些部署工具甚至诞生出自己的生态系统，例如 Terraform / Chef / Ansible。有一种说法戏称现在的运维工程师都是 yaml 语言工程师，其实很有道理的：人总是会出错，且传统的基于 shell 脚本的运维部署受环境影响太大，shell 天然也不是一个非常严谨的语言。描述意图，让机器去干事情，才是能 scale 的正道。&lt;/p&gt;&lt;blockquote&gt;本文是「分布式系统前沿技术」专题文章，欢迎大家保持专题全集。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;专题地址：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.infoq.cn/theme/48&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;分布式系统前沿技术-InfoQ&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-01-15-102810526</guid>
<pubDate>Wed, 15 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>TiExciting —— 让 TiDB 部署轻松简单</title>
<link>https://henix.github.io/feeds/zhuanlan.newsql/2020-01-10-102076999.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102076999&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2e6da9eb12f588bee518c7b0ac591819_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;作者：王军&lt;/p&gt;&lt;p&gt;运维难，难于上青天。&lt;/p&gt;&lt;p&gt;作为 PingCAP 员工，我们不仅平时自己用着 TiDB，也会自发的想让周围人也用上 TiDB。但在这个过程中，我们发现有以下问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;上船难：官方推荐的部署方法 TiDB Ansible 限制较多，有一定的学习成本。对于运维同学比较容易上手，但是对于研发同学就比较不友好。用户手册详细但是复杂，其中也有各种各样的限制，特别是遇到错误的时候不好处理。&lt;/li&gt;&lt;li&gt;开船难：用上 TiDB 之后，后续对 TiDB 集群进行运维（如扩容，升级），尤其在 PD 的扩容和缩容，安全性高，但是操作还是有些复杂。&lt;/li&gt;&lt;li&gt;开发上船容易翻：经常见到开发人员不知道水有多深，跟着文档在自己机器上尝试用 TiDB Ansible 部署 TiDB，结果一不小心就把系统改得面目全非。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了改进和解决这些痛点，我们组队参加了 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/3-ww6MJnygvq8mpkDuwAig&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TiDB Hackathon 2019&lt;/a&gt; 比赛，编写了 TiExciting 项目，并最终获得大家的认可拿到了三等奖。&lt;/p&gt;&lt;h2&gt;当前的上船门槛有多高？&lt;/h2&gt;&lt;p&gt;在参赛前，我们先评估了一下之前的体感问题是不是真实存在的问题，因此我们在本次 Hackathon Ucloud 新集群上进行了一番实测：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;队友 A：腾讯微信研发，从未接触过 TiDB，首次尝试部署：&lt;br/&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;按照 TiDB Ansible 超长的部署教程，部署 3 小时后没有成功，遂放弃。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;队友 B：PingCAP 华东地区高级客户支持，为各种商业客户部署过 TiDB：&lt;br/&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;操作熟练，但经常由于手滑或环境关系经历各种报错，凭丰富的知识知道怎么解决，最终使用 20 分钟部署完毕。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;综上，实践表明，不论是新手还是老手，都要经过很复杂的步骤才能开始真正用起 TiDB 产品。另外，TiDB Ansible 本身还对部署环境提出了极高的要求，例如公有云环境直接无法通过入门检测，这些都会劝退大量新用户。&lt;/p&gt;&lt;h2&gt;怎样可以快速上船和开船？&lt;/h2&gt;&lt;p&gt;为了解决问题，我们先进行了需求设计：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;为了能快速上船，部署过程本身应该要做到「快」，能并行的操作就并行进行。&lt;/li&gt;&lt;li&gt;直观方便清晰，最好不要文档就能用起来：提供图形化界面。&lt;/li&gt;&lt;li&gt;所有与易用性冲突的特性都需要让步。&lt;br/&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;TiDB Ansible 强制环境检查 → TiExciting 不阻止部署（但给出 Warning）。&lt;/li&gt;&lt;li&gt;TiDB Ansible 要求从中控机部署 → TiExciting 甚至可以从 Windows 开始部署，且不要求配置互信。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;绿色环保有节操，没有全家桶。&lt;br/&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;TiDB Ansible 强制要求进行系统配置调优满足 TiDB 要求 → TiExciting 允许用户可选地配置系统以便更好地运行 TiDB，且用户知悉各个要进行的改动。&lt;/li&gt;&lt;li&gt;TiExciting 允许用户自行勾选想要安装的组件，遵循最小化原则。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;当前安装都是安装一路绿灯，环境检查只做告警，不推荐在生产环境使用。后期我们会添加严格模式，来做生产集群管理。&lt;b&gt;时刻对生成环境抱有敬畏之心。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;Hackathon 成果&lt;/h2&gt;&lt;h3&gt;部署&lt;/h3&gt;&lt;p&gt;创建完目标机器（后文介绍机器添加方式）后，就可以&lt;b&gt;自由选择其中的机器进行部署&lt;/b&gt;。界面上可以&lt;b&gt;自行勾选想要的组件&lt;/b&gt;，或取消勾选不想要的组件。比如不想要监控大礼包，就可以直接取消勾选「监控」。另外 TiDB 也是可以取消勾选的，适用于只想使用 TiKV 的情况。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-bca339cf61215d1b94502fbafd53e62d_b.gif&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;787&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-bca339cf61215d1b94502fbafd53e62d_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;810&quot; data-original=&quot;https://pic2.zhimg.com/v2-bca339cf61215d1b94502fbafd53e62d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-bca339cf61215d1b94502fbafd53e62d_b.gif&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;787&quot; data-thumbnail=&quot;https://pic2.zhimg.com/v2-bca339cf61215d1b94502fbafd53e62d_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;810&quot; data-original=&quot;https://pic2.zhimg.com/v2-bca339cf61215d1b94502fbafd53e62d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-bca339cf61215d1b94502fbafd53e62d_b.gif&quot;/&gt;&lt;figcaption&gt;图 1 部署方案&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;选择完组件后，&lt;b&gt;界面会自动根据节点数量、想要的组件生成部署方案&lt;/b&gt;。当然，作为 Hackathon 作品，这里的自动方案不一定是最合理的，以及实际场景中用户很可能想要进一步自行定制拓扑，&lt;b&gt;因此用户可以在这个界面上拖拽各个组件来重新决定拓扑&lt;/b&gt;，或添加新组件。一般来说，如果只是不严格想体验一下分布式 TiDB 的话，包括只有一个节点等情况，用户直接采用默认的拓扑即可，非常友好。&lt;/p&gt;&lt;p&gt;然后演示下最后安装的效果：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b0f54e8edf6423f820dd978661d337ca_b.gif&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;787&quot; data-thumbnail=&quot;https://pic3.zhimg.com/v2-b0f54e8edf6423f820dd978661d337ca_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;810&quot; data-original=&quot;https://pic3.zhimg.com/v2-b0f54e8edf6423f820dd978661d337ca_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b0f54e8edf6423f820dd978661d337ca_b.gif&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;787&quot; data-thumbnail=&quot;https://pic3.zhimg.com/v2-b0f54e8edf6423f820dd978661d337ca_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;810&quot; data-original=&quot;https://pic3.zhimg.com/v2-b0f54e8edf6423f820dd978661d337ca_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b0f54e8edf6423f820dd978661d337ca_b.gif&quot;/&gt;&lt;figcaption&gt;图 2 安装演示&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;管理机器&lt;/h3&gt;&lt;p&gt;启动 TiExciting 后，界面会引导用户首先增加机器，包括填写连接方式等。这里可以指定密码或密钥登录，无需 root，也无需创建特别的用户，只需填写运维人员平时连接上去的方式即可。增加机器时候的设置也可以从现有机器设置复制。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d234040a3f219cde0568cdc3ce7f3e2c_b.gif&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;787&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-d234040a3f219cde0568cdc3ce7f3e2c_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;810&quot; data-original=&quot;https://pic1.zhimg.com/v2-d234040a3f219cde0568cdc3ce7f3e2c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d234040a3f219cde0568cdc3ce7f3e2c_b.gif&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;787&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-d234040a3f219cde0568cdc3ce7f3e2c_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;810&quot; data-original=&quot;https://pic1.zhimg.com/v2-d234040a3f219cde0568cdc3ce7f3e2c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d234040a3f219cde0568cdc3ce7f3e2c_b.gif&quot;/&gt;&lt;figcaption&gt;图 3 服务器添加演示&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;高级配置中可以指定位置标签，包括这个机器属于什么机架，及这个机器属于什么机房。如果有指定位置标签，配置完毕后就会在界面上按照机房和机架组织显示这些机器，非常直观。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3863ee6a0c875af128330eed17cd5978_b.gif&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;787&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-3863ee6a0c875af128330eed17cd5978_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;810&quot; data-original=&quot;https://pic1.zhimg.com/v2-3863ee6a0c875af128330eed17cd5978_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3863ee6a0c875af128330eed17cd5978_b.gif&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;787&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-3863ee6a0c875af128330eed17cd5978_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;810&quot; data-original=&quot;https://pic1.zhimg.com/v2-3863ee6a0c875af128330eed17cd5978_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-3863ee6a0c875af128330eed17cd5978_b.gif&quot;/&gt;&lt;figcaption&gt;图 4 高级配置&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;完整成果演示视频可以点击这里：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//drive.google.com/open%3Fid%3D1v62lqGhOXNxTCMr7RKuKxuAfBCWZT4SF&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TiExciting Demo 视频&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;技术实现&lt;/h2&gt;&lt;h3&gt;界面&lt;/h3&gt;&lt;p&gt;为了能跨各个平台展示界面，TiExciting 是以 Web 形式提供界面的，使用了比较流行的 React + MobX 方案实现。这样，不仅 TiExciting 的界面是跨平台的，而且即使 TiExciting 运行在无 UI 的服务器上，也能在用户浏览器上远程访问到界面。&lt;/p&gt;&lt;h3&gt;跨平台&lt;/h3&gt;&lt;p&gt;TiExciting 的部署逻辑及响应用户操作的逻辑是采用 Python 编写的，来达成跨平台的目的。我们设想采用 Python 打包工具来实现用户一键下载打开运行且不需要安装的理念，但实际 Hackathon 上用下来发现它只能是个设想，坑还是挺多的。另外 Python 本身 runtime 就很大。如果再给我们一次机会，大概会改用 Golang 吧，生成一个 binary 是真的很简单。&lt;/p&gt;&lt;h3&gt;快&lt;/h3&gt;&lt;p&gt;为了尽可能地快，TiExciting 会尽可能地基于文件哈希来复用文件，例如已下载且校验通过的 TiDB 二进制大礼包就不需要重复下载，已经成功部署的同理。TiExciting 还实现了异步有向无环图的任务调度机制，当所有先决任务完成后，后续任务就可以得到执行，且之间没有依赖关系的任务可以并行执行，如下图所示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f08f9edbf228a0286c567e9b6effb698_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;422&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic1.zhimg.com/v2-f08f9edbf228a0286c567e9b6effb698_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f08f9edbf228a0286c567e9b6effb698_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;422&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic1.zhimg.com/v2-f08f9edbf228a0286c567e9b6effb698_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-f08f9edbf228a0286c567e9b6effb698_b.jpg&quot;/&gt;&lt;figcaption&gt;图 5 异步有向无环图的任务调度机制&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;聊聊未来&lt;/h2&gt;&lt;p&gt;因为 Hackathon 时间有限，其实还有很多没来得及做但想做的功能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;更好的部署方案规划。&lt;/li&gt;&lt;li&gt;纯界面实现扩容、缩容。&lt;/li&gt;&lt;li&gt;纯界面实现更新集群。&lt;/li&gt;&lt;li&gt;纯界面管理集群（启动、停止、更新、滚动等）。&lt;/li&gt;&lt;li&gt;将现有 TiDB Ansible 集群纳入 TiExciting 管理。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;虽然 Hackathon 已告一段落，但我们希望将来能进一步完善 TiExciting，将它想做的都落地下来，成为一个大家喜欢用的通用的工具，帮助更多人用上 TiDB 并改善运维的复杂度。&lt;/p&gt;&lt;p&gt;&lt;b&gt;阅读原文：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/tiexciting-makes-tidb-deployment-easy-and-simple/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-60ab5bd867c2434d70c957a02a2169e1_ipico.jpg&quot; data-image-width=&quot;1200&quot; data-image-height=&quot;1200&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TiExciting —— 让 TiDB 部署轻松简单 | PingCAP&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>ZoeyZhai</author>
<guid isPermaLink="false">2020-01-10-102076999</guid>
<pubDate>Fri, 10 Jan 2020 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
