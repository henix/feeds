<div class="title-image"><img src="https://pic2.zhimg.com/v2-9a97734516f833f93113e5b91f6bbcd6_b.jpg" alt=""></div><p>随着数据泄露的增加，软件的信息安全对于每个公司都至关重要。并非所有攻击都可以预期或预防，但可以通过一些预防措施消除软件漏洞带来的许多攻击。下面我们将讲解一些软件开发中的漏洞防范措施。</p><h2>缓冲区溢出漏洞</h2><p>当软件程序试图读取或写入超出范围的缓冲区时，就会发生缓冲区溢出。它可能导致覆盖或在现有代码中附加数据。缓冲区溢出可使攻击者执行代码、更改程序流、读取敏感数据或使系统崩溃等。</p><p>包括：</p><ul><li>接受长度不受限制的输入</li><li>允许从无效索引对数组进行读取操作</li></ul><p>缓冲区溢出漏洞通常发生在体系结构和设计、实施或操作阶段。这一漏洞最常见于 C，C ++ 和 Assembly 程序，可以以任何缺少内存管理支持的语言出现。</p><p><b>如何防范？</b></p><p>尽可能选择一种防止或降低此漏洞风险的语言，例如：Java 或 Perl。不要禁用溢出保护，例如在 C＃ 中。与环境中的易受攻击的本机代码交互时，即使是“免疫”语言也可能会产生错误。</p><p>为了防止利用缓冲区溢出漏洞，可以使用包含功能或扩展名以限制输入的编译器。例如， Visual Studio 或 StackGuard。还可以使用工具在内存中随机排列程序组件。使地址更难以识别或预测，从而使攻击者难以利用特定组件。</p><p>最后，在创建代码时，确保正确分配了缓冲区空间。另外，使用允许限制输入大小的方法和功能。</p><h2>对输入的验证</h2><p>当用户输入在接受时未得到验证或验证不足时，就会发生输入验证不当。不正确的验证可以使攻击者执行恶意代码、更改程序流、访问敏感数据或滥用资源分配。</p><p>包括： </p><ul><li>假设攻击者无法访问隐藏的表单字段</li><li>仅验证输入的长度而不是内容</li></ul><p>通常发生在架构、设计和实施阶段。它可以在任何接受外部数据的语言或系统中发生。</p><p><b>预防措施</b></p><p>应该对任何用户采取“零信任”原则，并假设所有输入都是有害的，直到证明安全为止。使用白名单以确保输入内容仅包含可接受的格式和内容。 </p><p>在验证输入时，长度、类型、语法和对逻辑的符合性（即输入具有语义意义）。可以使用多种工具来确保进行充分的验证，例如 OWASP ESAPI 验证 API 和 RegEx。使用这些工具来验证所有输入源，包括环境变量，查询，文件，数据库和 API 调用。</p><p>确保在客户端和服务器端都执行检查。可以绕过客户端验证，因此需要仔细检查。如果绕过客户端验证，则在服务器端捕获输入可以帮助你识别攻击者的操纵。在进行任何必要的组合或转换后，请验证输入。</p><h2>信息泄露</h2><p>当有意或无意将数据提供给潜在攻击者时，就会发生信息泄露。数据可以包含敏感信息，也可以向攻击者提供有关可以在攻击中利用的软件或环境的信息。</p><p>信息公开的示例包括： </p><ul><li>显示文件或程序完整路径的错误</li><li>错误消息暴露了数据库中用户的存在</li></ul><p>信息泄漏漏洞通常发生在开发的体系结构和设计或实施阶段。任何语言都可能发生这些漏洞。</p><p><b>预防措施</b></p><p>为防止信息泄露，应该设计程序体系结构以将敏感信息包含在具有明确信任边界的区域中。确保使用访问控制来保护和限制“安全”区域与端点之间的连接。</p><p>为了最大程度地利用漏洞，请验证错误消息和用户警告中是否包含不必要的信息。还应该限制来自 URL 和通信标头的敏感信息。例如，模糊完整的路径名或 API 密钥。</p><h2>权限认证不当</h2><p>如果未正确分配、跟踪、修改或验证用户权限和凭据，则会发生不正确的权限或身份验证。这些漏洞可使攻击者滥用权限，执行受限任务或访问受限数据。</p><p>包括：</p><ul><li>不可逆转的临时权限升级。</li><li>通过黑名单而不是白名单来限制权限。</li><li>允许较低的权限级别影响较高的权限帐户，例如：重置管理员密码。</li><li>无限制的登录尝试或会话限制。</li></ul><p>权限或身份验证漏洞通常在开发的体系结构和设计，实施或操作阶段引入。任何语言都可能发生这些漏洞。</p><p><b>预防措施</b></p><p>应该将最小权限原则应用于软件和系统交互的所有用户和服务。通过在整个程序和环境中应用访问控制来限制用户和实体的功能。将权限限制为仅用户或服务所需的那些资源。</p><p>此外，将高级权限分成多个角色。分离有助于限制“高级用户”，并降低攻击者滥用访问权限的能力。还可以应用多因素身份验证方法来防止攻击者绕过系统或获得轻松的访问权限。</p><h2>减少一般漏洞的措施</h2><p>除了采取针对特定漏洞的措施外，还应该采取一些措施来总体上减少漏洞。例如：</p><p><b>关注威胁情报</b></p><p>时刻关注威胁情报，了解新漏洞、新补丁、新举措，防范于未然。</p><p><b>进行漏洞评估</b></p><p>对软件进行定期的渗透测试，提高软件安全性，在攻击者之前发现潜在漏洞的存在，并做好相应的应对措施。</p><p>今天的内容就简单介绍到这里了。更多有关内容请前往 <a href="https://link.zhihu.com/?target=https%3A//www.baidu.com/link%3Furl%3DOcGTJIGtwpNYrGru7tSszpEf10ZQ0xIE7SvER9ejNcCar00KI-fG2lu214M4WKPc%26wd%3D%26eqid%3Da24dabb2002f492b000000065e13d46a" class=" wrap external" target="_blank" rel="nofollow noreferrer">二向箔安全</a> 进行学习，最近推出了漏洞挖掘实战班，小白入门到大佬，从扫码上车开始。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-544b7b2d91881fd4b9fa2d9298fa0725_b.jpg" data-caption="" data-size="normal" data-rawwidth="926" data-rawheight="605" class="origin_image zh-lightbox-thumb" width="926" data-original="https://pic2.zhimg.com/v2-544b7b2d91881fd4b9fa2d9298fa0725_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-544b7b2d91881fd4b9fa2d9298fa0725_b.jpg" data-caption="" data-size="normal" data-rawwidth="926" data-rawheight="605" class="origin_image zh-lightbox-thumb lazy" width="926" data-original="https://pic2.zhimg.com/v2-544b7b2d91881fd4b9fa2d9298fa0725_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-544b7b2d91881fd4b9fa2d9298fa0725_b.jpg"/></figure><p></p>