<div class="title-image"><img src="https://pic4.zhimg.com/v2-cfb08ef25758a281a21d224980801ea0_b.jpg" alt=""></div><p>上一篇 <a href="https://zhuanlan.zhihu.com/p/107183874" class="internal">LdBeth：NuPRL 中的证明 (二) -- 我从来不写递归的</a></p><p>这篇的主要內容是 <a href="https://link.zhihu.com/?target=http%3A//www.nuprl.org/KB/show.php%3FID%3D759" class=" wrap external" target="_blank" rel="nofollow noreferrer">Virtual Evidence: A Constructive Semantics for Classical Logics</a> 和 <a href="https://link.zhihu.com/?target=http%3A//www.nuprl.org/MathLibrary/VirtualEvidence/index.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Constructive Reading of Classical Logic</a> 的导读。 也算是第一次展示了下 NuRPL 中的证明，順帯引入 squash type 的概念。</p><p>MLTT Agda 中要获得 LEM 得 posutulate （防止你们说 CubicalTT）。众所周知这样 p 出来的 LEM 虽然和 MLTT 相容，但还是沒有 computational meaning 的，这样的 classical logic 是沒有灵魂的。</p><p>那 NuPRL 是怎么解決这个的呢？</p><p>Recall, refinment type OR subtyping in NuPRL</p><p><img src="https://www.zhihu.com/equation?tex=%5C%7Bx%3AA%5C+%7C%5C+P%28x%29+%5C%7D" alt="\{x:A\ |\ P(x) \}" eeimg="1"/> </p><p>it is easy to get non dependent form</p><p><img src="https://www.zhihu.com/equation?tex=%5C%7BS%5C+%7C%5C+T%5C%7D" alt="\{S\ |\ T\}" eeimg="1"/> </p><p>Unit type 只有一个 element <img src="https://www.zhihu.com/equation?tex=%2A" alt="*" eeimg="1"/> ，因而当 proposition P 成立时 <img src="https://www.zhihu.com/equation?tex=%5C%7BUnit%5C+%7C%5C+P%5C%7D" alt="\{Unit\ |\ P\}" eeimg="1"/> 也只有一个 element，而 P 为 False (which is an alias to Void) 时这个类型等于 Void。</p><p>在 ITT 中，P 的证明是一个具體的 p : P，而用 refinement type <img src="https://www.zhihu.com/equation?tex=%5C%7BUnit%5C+%7C%5C+P%5C%7D%5C%3B+abbrev+%5C%3B%5C%7BP%5C%7D" alt="\{Unit\ |\ P\}\; abbrev \;\{P\}" eeimg="1"/> 表示 classical logic 的命题就可以把 P 的证明给 squash to trivial。这样显然地，我们有把 constructive proof to classical proof 的 computation procedure <img src="https://www.zhihu.com/equation?tex=%5Clambda+x.%2A%5Cin+P+%5Cimplies+%5C%7BP%5C%7D" alt="\lambda x.*\in P \implies \{P\}" eeimg="1"/> ，而反之则不一定成立，从而規避了任意用 classical proof 进行 constructive proof。</p><p>然后就要有 double negation rule <img src="https://www.zhihu.com/equation?tex=%5Clambda+x.%2A+%5Cin+%5Cneg%5Cneg+P+%5Cimplies+%5C%7BP%5C%7D" alt="\lambda x.* \in \neg\neg P \implies \{P\}" eeimg="1"/> ： <img src="https://www.zhihu.com/equation?tex=%5Cneg%5Cneg+P" alt="\neg\neg P" eeimg="1"/> 表明 P 不为 False，而由于 refinement type 的定义当 P 不为 False 时，因为 <img src="https://www.zhihu.com/equation?tex=%5C%7B+P%5C%7D" alt="\{ P\}" eeimg="1"/> 只可能有一个 element，所以很容易就得到它的 computational meaning，也就是 const trivial 这样一个函数。 </p><p>这样就可以证明 <img src="https://www.zhihu.com/equation?tex=%5Cforall+P+%3A+%5Cmathbb%7BP%7D%5C+.+%5C%7BP%5C%7D%5Cimplies+%5Cneg%5Cneg+P" alt="\forall P : \mathbb{P}\ . \{P\}\implies \neg\neg P" eeimg="1"/> ，也就是从 classical proposition 到 intutionistic double negation 的 formation。在 NuPRL 中的证明如下。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-a1cfc3d89e0309f265dd0729d5df728c_b.jpg" data-caption="" data-size="normal" data-rawwidth="598" data-rawheight="1124" class="origin_image zh-lightbox-thumb" width="598" data-original="https://pic1.zhimg.com/v2-a1cfc3d89e0309f265dd0729d5df728c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-a1cfc3d89e0309f265dd0729d5df728c_b.jpg" data-caption="" data-size="normal" data-rawwidth="598" data-rawheight="1124" class="origin_image zh-lightbox-thumb lazy" width="598" data-original="https://pic1.zhimg.com/v2-a1cfc3d89e0309f265dd0729d5df728c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-a1cfc3d89e0309f265dd0729d5df728c_b.jpg"/></figure><p>以及 lem 的 classical proposition 的证明。其实用 Auto tactic 可以直接证出，不过为了方便理解还是贴上有完整思路的版本。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-f727d7437743f24c3541855caf978387_b.jpg" data-caption="" data-size="normal" data-rawwidth="672" data-rawheight="1302" class="origin_image zh-lightbox-thumb" width="672" data-original="https://pic4.zhimg.com/v2-f727d7437743f24c3541855caf978387_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-f727d7437743f24c3541855caf978387_b.jpg" data-caption="" data-size="normal" data-rawwidth="672" data-rawheight="1302" class="origin_image zh-lightbox-thumb lazy" width="672" data-original="https://pic4.zhimg.com/v2-f727d7437743f24c3541855caf978387_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-f727d7437743f24c3541855caf978387_b.jpg"/></figure><p></p>