<div class="title-image"><img src="https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg" alt=""></div><blockquote>前言：<br/>从2018年开始，我每天会花1个小时关注Rust社区动态，并且分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust日报已经成为了Rust社区群大家每天必看的内容。<br/>从2019年开始，日报小组成立，目前的动态由：@Chaos、 @Mike、 @Damody(台湾)轮番为大家播报。也欢迎感兴趣的朋友加入小组。<br/>并且每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。<br/><br/>独立日报订阅地址： - <a href="https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news" class=" wrap external" target="_blank" rel="nofollow noreferrer">Telgram Channel</a> - <a href="https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews" class=" wrap external" target="_blank" rel="nofollow noreferrer">阿里云语雀订阅</a> - <a href="https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger" class=" wrap external" target="_blank" rel="nofollow noreferrer">Stemmit</a> - <a href="https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news" class=" wrap external" target="_blank" rel="nofollow noreferrer">GitHub</a><br/>社区学习交流平台订阅： - <a href="https://link.zhihu.com/?target=https%3A//rust.cc/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Rust.cc论坛</a> - <a href="https://link.zhihu.com/?target=https%3A//rustforce.net/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Rust Force</a> - <a href="https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Ded7c9379-d681-47cb-9532-0db97d883f62" class=" wrap external" target="_blank" rel="nofollow noreferrer">微信公众号：Rust语言学习交流</a> <br/><br/>2019-04-28</blockquote><hr/><h2>官方新闻</h2><h3>Rust核心团队发布Rust 2019 Roadmap</h3><p>Rust核心团队最近发布了Rust 2019 Roadmap RFC，主要的工作分为：</p><ul><li>治理。改进项目运作方式。包括整理RFC流程。</li><li>完成已经开始但还未完成的工作。比如异步等。</li><li> 提高语言和工具的整体质量。包括改进编译时间和增强IDE支持等。<br/> </li><li><a href="https://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/04/23/roadmap.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a><br/> </li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/blob/master/text/2657-roadmap-2019.md" class=" wrap external" target="_blank" rel="nofollow noreferrer">Rust 2019 Roadmap RFC</a></li></ul><h3>Rust 1.34.1 发布</h3><p>clippy 误报的問題已解決</p><ul><li><code>clippy::redundant_closure</code></li><li><code>clippy::missing_const_for_fn</code></li></ul><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bhap9o/announcing_rust_1341/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read more</a></p><h3>「官方」runtime: 为更容易地创建异步应用而生的库</h3><h2>runtime #async</h2><p>Runtime，是由Rust异步工作组发布的一个与平台无关的库，旨在使Async Rust既灵活又简单。该库也是异步生态系统标准化的基石。它通过以下方式实现：</p><ul><li>消除共享异步运行时的麻烦，包括I/O和异步执行程序</li><li>遵循Rust标准库主导的API约定</li><li>标准化运行时接口，实现应用程序和底层实现的分离，并且支持自定义运行时</li></ul><div class="highlight"><pre><code class="language-rust"><span class="cp">#![feature(async_await, await_macro, futures_api)]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">futures</span>::<span class="n">prelude</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">runtime</span>::<span class="n">net</span>::<span class="n">TcpListener</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="cp">#[runtime::main]</span><span class="w">
</span><span class="w"></span><span class="n">async</span><span class="w"> </span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">std</span>::<span class="n">io</span>::<span class="nb">Result</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">listener</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TcpListener</span>::<span class="n">bind</span><span class="p">(</span><span class="s">&#34;127.0.0.1:8080&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Listening on {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">listener</span><span class="p">.</span><span class="n">local_addr</span><span class="p">()</span><span class="o">?</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">incoming</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">listener</span><span class="p">.</span><span class="n">incoming</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">await</span><span class="o">!</span><span class="p">(</span><span class="n">incoming</span><span class="p">.</span><span class="n">next</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">runtime</span>::<span class="n">spawn</span><span class="p">(</span><span class="n">async</span><span class="w"> </span><span class="k">move</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">stream</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stream</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Accepting from: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">stream</span><span class="p">.</span><span class="n">peer_addr</span><span class="p">()</span><span class="o">?</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">reader</span><span class="p">,</span><span class="w"> </span><span class="n">writer</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">stream</span><span class="p">.</span><span class="n">split</span><span class="p">();</span><span class="w">
</span><span class="w">            </span><span class="n">await</span><span class="o">!</span><span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="n">copy_into</span><span class="p">(</span><span class="n">writer</span><span class="p">))</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="nb">Ok</span>::<span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="n">std</span>::<span class="n">io</span>::<span class="n">Error</span><span class="o">&gt;</span><span class="p">(())</span><span class="w">
</span><span class="w">        </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(())</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>现在是基于宏，并且期望在未来能实现如下写法：</p><div class="highlight"><pre><code class="language-rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">futures</span>::<span class="n">net</span>::<span class="n">TcpListener</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">async</span><span class="w"> </span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">std</span>::<span class="n">io</span>::<span class="nb">Result</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">listener</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TcpListener</span>::<span class="n">bind</span><span class="p">(</span><span class="s">&#34;127.0.0.1:8080&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Listening on {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">listener</span><span class="p">.</span><span class="n">local_addr</span><span class="p">()</span><span class="o">?</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="cp">#[spawn(parallel)]</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">await</span><span class="o">?</span><span class="w"> </span><span class="n">stream</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">listener</span><span class="p">.</span><span class="n">incoming</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Accepting from: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">stream</span><span class="p">.</span><span class="n">peer_addr</span><span class="p">()</span><span class="o">?</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">reader</span><span class="p">,</span><span class="w"> </span><span class="n">writer</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">stream</span><span class="p">.</span><span class="n">split</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="n">await</span><span class="o">?</span><span class="w"> </span><span class="n">reader</span><span class="p">.</span><span class="n">copy_into</span><span class="p">(</span><span class="n">writer</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>希望成为标准库的一部分。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//blog.yoshuawuyts.com/runtime/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/rustasync/runtime" class=" wrap external" target="_blank" rel="nofollow noreferrer">runtime</a></li></ul><h3>「官方」HashMap的SwissTable算法重新实现的PR已经被合并</h3><p>将会在Rust 1.36版本中看到。</p><p>该PR作者一共发布过两个PR。第一次是将Swisstable在标准库中重新实现了一遍，第二次是将Swisstable作为独立的hashbrown crate引入标准库中。显然，这次合并的PR是第二种方式。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/58623%23event-2295889137" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//crates.io/crates/hashbrown" class=" wrap external" target="_blank" rel="nofollow noreferrer">hashbrown</a></li></ul><h3>「官方」 Stabilize futures_api的PR已被合并</h3><p>这意味着异步开发离稳定又近了一步。此次Futures API主要是两大模块:</p><p><code>future</code> 模块</p><ul><li>std::future</li><li>std::future::Future trait和它关联的项（Output和poll）</li></ul><p><code>task</code> 模块</p><ul><li>std::task</li><li>std::task::Poll</li><li>std::task::Waker</li><li>std::task::RawWaker</li><li>std::task::RawWakerVTable</li><li>std::task::Context</li></ul><p>另外还有一些api的名称按照Rust标准库中统一的命名风格被修改。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/59739" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/59725%23issuecomment-486082226" class=" wrap external" target="_blank" rel="nofollow noreferrer">相关issues</a></li></ul><h3>Niko：代码之外</h3><p>Niko最近意识到，Rust编译器团队，需要的不仅仅是开发人员，更加需要的是编码之外的人才，包括文档作者、组织者、传道者、项目经理等角色，只有加入了这些角色，编译器团队才能正常发展。因为编译器团队不仅仅是写代码，其他任务（各种会议、管理工作组、带新人、编写文档、协助沟通问题、帮助贡献者等等）也是同样重要。</p><p><a href="https://link.zhihu.com/?target=http%3A//smallcultfollowing.com/babysteps/blog/2019/04/15/more-than-coders/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>「官方演讲」Rust：未来四十年的语言</h3><p>为什么是四十年？</p><p>作者拿铁路百年史做了类比</p><p>1830年5月24日，美国第一条铁路（巴尔的摩—俄亥俄，21公里）通车。 1869年5月10日，美国建成第一条横贯美洲大陆的太平洋铁路，总长2849公里。 革命性的里程碑，花费了39年。 1901年，德国西门子—哈尔斯克电机公司制造的电力机车，在柏林附近的曼菲尔德—措森线上，创造了时速162公里的世界纪录。</p><p>这个时间花了71年。</p><p>那么系统编程语言呢？</p><p>1973年，Unix正式用C语言改写。 到2015年，Rust语言发布，是站在C/Cpp语言肩膀上的革命性语言。革命性的里程碑，花费了42年。 那么未来四十年，Rust语言会取得什么辉煌成就？拭目以待。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-4909e180a328b54c595855c35617fa06_b.jpg" data-rawwidth="690" data-rawheight="343" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb" width="690" data-original="https://pic3.zhimg.com/v2-4909e180a328b54c595855c35617fa06_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-4909e180a328b54c595855c35617fa06_b.jpg" data-rawwidth="690" data-rawheight="343" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb lazy" width="690" data-original="https://pic3.zhimg.com/v2-4909e180a328b54c595855c35617fa06_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-4909e180a328b54c595855c35617fa06_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><ul><li><a href="https://link.zhihu.com/?target=https%3A//carols10cents.gitlab.io/rust-next-40-years/assets/player/KeynoteDHTMLPlayer.html%230" class=" wrap external" target="_blank" rel="nofollow noreferrer">Slides</a></li><li><a href="https://link.zhihu.com/?target=https%3A//gitlab.com/carols10cents/rust-next-40-years" class=" wrap external" target="_blank" rel="nofollow noreferrer">gitlab仓库</a></li></ul><h3>rustup发布了1.18.0版本</h3><p><a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rustup.rs/blob/master/CHANGELOG.md%231180---2019-04-22" class=" wrap external" target="_blank" rel="nofollow noreferrer">Changelog</a></p><h3>Futures 0.1 兼容层</h3><p>为了弥合由futures 0.1和不稳定的异步生态造成的生态鸿沟，官方异步团队在futures 0.3中引入了futures 0.1的兼容层，本文阐述了如何来使用它。</p><p><a href="https://link.zhihu.com/?target=https%3A//rust-lang-nursery.github.io/futures-rs/blog/2019/04/18/compatibility-layer.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Mozilla 将关闭Rust IRC频道</h3><p>Mozilla最近宣布将关闭其IRC网络，理由是日益增加的维护和审核负担。距离最终关闭还有几个月的时间，官方建议大家转移到Rust的官方Discord服务器去交流。Discord服务器包含<code>#users</code>，<code>＃help</code>和<code>#beginners</code>频道。</p><p>如果你想继续使用IRC，那么可以去非官方的freenode频道去交流。</p><p>（IRC交流太古老了，为了扩大Rust社区的交流面，使用现代化的通信工具是必须的。）</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/04/26/Mozilla-IRC-Sunset-and-the-Rust-Channel.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=http%3A//exple.tive.org/blarg/2019/04/26/synchronous-text/" class=" wrap external" target="_blank" rel="nofollow noreferrer">更多讨论</a></li></ul><hr/><h2>社区新闻</h2><h3>首届RustConAsia大会圆满结束</h3><p>非常感谢秘猿和PingCAP为社区组织了这一场盛会。</p><p><a href="https://link.zhihu.com/?target=https%3A//shimo.im/docs/zliTJIGgNwk6QIFh/read" class=" wrap external" target="_blank" rel="nofollow noreferrer">大会的所有资料都可以在这里找到</a></p><h3>Sonic：用Rust编写的Elasticsearch的极简替代品</h3><p><a href="https://zhuanlan.zhihu.com/p/63963140" class="internal"><span class="invisible">https://</span><span class="visible">zhuanlan.zhihu.com/p/63</span><span class="invisible">963140</span><span class="ellipsis"></span></a></p><h3>Rust 生态可视化</h3><p>有人将<a href="https://link.zhihu.com/?target=http%3A//crates.io" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">crates.io</span><span class="invisible"></span></a>的crate生态做了可视化，可以通过这个网站看到Rust crate的生态。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//rfdonnelly.github.io/crate-galaxy/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/rfdonnelly/crate-galaxy-graph" class=" wrap external" target="_blank" rel="nofollow noreferrer">源码</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av49392469/%3FredirectFrom%3Dh5" class=" wrap external" target="_blank" rel="nofollow noreferrer">视频</a></li></ul><h3>「RustLatam 2019 系列视频」Without Boats: 零成本异步IO</h3><p>Rustlatam2019大会的视频陆续放出了，此链接是without boats的演讲。大家可以在youtube列表中查看其他的。</p><p><a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3Dskos4B5x7qE" class=" wrap external" target="_blank" rel="nofollow noreferrer">RustLatam 2019</a></p><h3>Rust Cheatsheet</h3><p>针对Rust类型做的Cheatsheet</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//upsuper.github.io/rust-cheatsheet/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/upsuper/rust-cheatsheet" class=" wrap external" target="_blank" rel="nofollow noreferrer">upsuper/rust-cheatsheet</a></li></ul><p>其他的CheatSheet汇总</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//cheats.rs/" class=" wrap external" target="_blank" rel="nofollow noreferrer">cheats.rs</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.breakdown-notes.com/make/load/rust_cs_canvas/true" class=" wrap external" target="_blank" rel="nofollow noreferrer">rust_cs_canvas: 归纳了Rust语法</a></li></ul><h3>ripgrep 11 发布</h3><p>ripgrep 是 Linux 命令行文件内容检索工具 grep 的 rust 实现版本。版本 11 修复了很多 bug，改进了性能，对二进制文件的搜索体验大幅改进。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/BurntSushi/ripgrep/releases/tag/11.0.0" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Xray 死了吗？</h3><p><a href="https://link.zhihu.com/?target=https%3A//github.com/atom/xray" class=" wrap external" target="_blank" rel="nofollow noreferrer">Xray</a> 是实验性的下一代基于 Electron 的编辑器的后端，用 rust 写成。但是项目进度好像遇到的问题。于是作者在 reddit 上心急如焚，发了一篇长文，细数了 Xray 的好。希望有人能接手继续开发下去。</p><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bdf3lx/we_need_to_save_xray/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><p>不过有人说好像有已经有人 <a href="https://link.zhihu.com/?target=https%3A//github.com/fdionisi/xray/issues/1" class=" wrap external" target="_blank" rel="nofollow noreferrer">fork</a> 了。</p><h3>「系列文章」for await loops (Part I)：无船大神对 await for 语法的思考</h3><blockquote> 有关async/await语法的一个悬而未决的问题是：await的最终语法。到目前为止，关于这个问题已经进行了大量的讨论;该讨论的现状和语言小组内的立场即将推出。本文无船同志这一系列文章将讨论一个影响该决定但尚未被考虑的问题：for循环流程。<br/> </blockquote><p>目前futures-async-await库中用的语法是这样的：</p><div class="highlight"><pre><code class="language-rust"><span class="cp">#[async]</span><span class="w">
</span><span class="w"></span><span class="k">for</span><span class="w"> </span><span class="n">elem</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">stream</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>但无船同志认为这个语法与await的作用其实是相似的，这也是JavaScript中使用<code>for await...of</code>语句来创建循环遍历异步可迭代对象的原因：</p><div class="highlight"><pre><code class="language-js"><span class="k">for</span> <span class="kr">await</span> <span class="p">(</span><span class="nx">elem</span> <span class="k">of</span> <span class="nx">stream</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></div><p>对于Rust中如何设计这种语法呢？这个await是循环语法的一部分（只是for循环这么用）呢，还是单独的语法模式（更加通用）呢？无船倾向于让它成为通用的语法模式。然而目前Rust的类型系统对于后者的表达是有限制的，所以本文将讨论将await作为循环语法的一部分，而下一篇再讨论await作为单独语法模式。</p><p>所以，对于await作为for循环的一部分，这个语法设计无船倾向于使用下面这种空格分隔<code>prefix-await</code>的语法（后缀语法类似于是<code>elem.await</code>这样的表达）：</p><div class="highlight"><pre><code class="language-rust"><span class="k">for</span><span class="w"> </span><span class="n">await</span><span class="o">?</span><span class="w"> </span><span class="n">elem</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">stream</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div><p>下一篇文章将探讨更多。（看看语法设计也挺有意思）</p><p><a href="https://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/for-await-i/" class=" wrap external" target="_blank" rel="nofollow noreferrer">blog</a></p><h2>Quinn 0.3 发布</h2><p>使用rust实现QUIC协议</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/djc/quinn/releases/tag/0.3.0" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read more</a></p><h3>Evolution Island：Amethys展示游戏寻找合作者</h3><p>为了让Amethys成为Rust的旗舰级游戏引擎，Amethys基金会将支持一部分展示项目，可以有效地展示Amethys的关键功能。 Evolution Island是有Amethys基金会自己开发的一个展示项目。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/khskarl/evolution-island" class=" wrap external" target="_blank" rel="nofollow noreferrer">evolution-island</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bf65l3/evolution_island_amethyst_showcase_game_looking/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Reddit 介绍</a></li></ul><h3>「Redox」重大改进</h3><p>自<code>libstd / sys / redox</code>模块设计以来，Redox发生了重大变化。 <code>relibc</code>的创建导致开发了一个用于Redox的POSIX，C API，它支持libstd / sys / unix模块中绝大多数所需的功能。所以现在要考虑使用一个单独的redox target family，可能允许它属于unix target family。这一改变将大大减少将Redox OS转移到Tier 3所需的工作，完全支持Cargo，rustc和其他Rust工具。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/60139" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bfedj1/should_redox_os_convert_to_the_unix_target_family/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Reddit上针对这一变化的讨论</a></li></ul><h3>pulldown-cmark 0.5 发布</h3><ul><li>跟进了最新的CommonMark规范 0.29版本</li><li> 一流的性能提升。增加了simd加速。PulldownCmakr是最好的CommonMark实现。<br/> </li><li><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bgx1vg/new_pulldowncmark_05_release/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a><br/> </li><li><a href="https://link.zhihu.com/?target=http%3A//www.commonmark.cn/w/" class=" wrap external" target="_blank" rel="nofollow noreferrer">通用标注(CommonMark)介绍</a></li></ul><h3>让<a href="https://link.zhihu.com/?target=http%3A//astexplorer.net" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">astexplorer.net</span><span class="invisible"></span></a>支持Rust AST可视化</h3><p>可以直接在浏览器里查看和解析AST了。之前我只能从命令行输出ast.json文件，然后找个在线的json可视化工具查看。现在方便多了。</p><p>通过包装Rust的syn和WASM实现了这个功能。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-1851547dc7ac9e3dcdd72d79ca54778c_b.jpg" data-rawwidth="690" data-rawheight="763" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb" width="690" data-original="https://pic1.zhimg.com/v2-1851547dc7ac9e3dcdd72d79ca54778c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-1851547dc7ac9e3dcdd72d79ca54778c_b.jpg" data-rawwidth="690" data-rawheight="763" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb lazy" width="690" data-original="https://pic1.zhimg.com/v2-1851547dc7ac9e3dcdd72d79ca54778c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-1851547dc7ac9e3dcdd72d79ca54778c_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><ul><li><a href="https://link.zhihu.com/?target=https%3A//astexplorer.net/" class=" wrap external" target="_blank" rel="nofollow noreferrer">astexplorer.net</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/fkling/astexplorer/tree/master/website/src/parsers/rust" class=" wrap external" target="_blank" rel="nofollow noreferrer">源码</a></li></ul><h3>Amethyst接受了Mozilla的1w美元资助</h3><p>为了支持WebAssembly在浏览器中运行紫水晶游戏，该笔资金主要用于支付在以下三点有突出贡献的贡献者：</p><ul><li>WASM渲染器（2D、3D、UI）</li><li>文档改进，包括WASM</li><li>WASM的并行性</li></ul><p><a href="https://link.zhihu.com/?target=https%3A//www.amethyst.rs/blog/moss-grant-announce/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>日本最近也出了一本Rust新书：Rust入门实践</h3><p>看来大家都陆续上车了</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-65a7e14e713be69bb807db6f8fafe258_b.jpg" data-rawwidth="1164" data-rawheight="908" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb" width="1164" data-original="https://pic1.zhimg.com/v2-65a7e14e713be69bb807db6f8fafe258_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-65a7e14e713be69bb807db6f8fafe258_b.jpg" data-rawwidth="1164" data-rawheight="908" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb lazy" width="1164" data-original="https://pic1.zhimg.com/v2-65a7e14e713be69bb807db6f8fafe258_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-65a7e14e713be69bb807db6f8fafe258_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><h3>量子链线上分享脑图</h3><p>我（Chaos）上午看了这次分享，并且做了一份脑图。这次分享主要是介绍了椭圆曲线相关的内容，感兴趣的可以看看。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-62afa04c9b500f0f194d113968001f97_b.jpg" data-rawwidth="3702" data-rawheight="4096" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb" width="3702" data-original="https://pic4.zhimg.com/v2-62afa04c9b500f0f194d113968001f97_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-62afa04c9b500f0f194d113968001f97_b.jpg" data-rawwidth="3702" data-rawheight="4096" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb lazy" width="3702" data-original="https://pic4.zhimg.com/v2-62afa04c9b500f0f194d113968001f97_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-62afa04c9b500f0f194d113968001f97_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>同时，量子链也在招聘Rust工程师，感兴趣的可以投简历 yangting at <a href="https://link.zhihu.com/?target=http%3A//qtum.info" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">qtum.info</span><span class="invisible"></span></a></p><h3>「Job」linkerd公司开始招Rust工程师了</h3><ul><li><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bhfrcm/job_work_on_linkerd_with_you_guessed_it_rust/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li><li><a href="https://link.zhihu.com/?target=https%3A//jobs.lever.co/buoyant/01011edf-e9c8-446a-9fbe-4a87865b109c" class=" wrap external" target="_blank" rel="nofollow noreferrer">软件工程师职位</a></li><li><a href="https://link.zhihu.com/?target=https%3A//jobs.lever.co/buoyant/7a64f7d1-6fea-40b1-ba52-5ab44802c5f6" class=" wrap external" target="_blank" rel="nofollow noreferrer">系统工程师职位</a></li></ul><h3>「Job」华为诺亚方舟实验室招聘 AI算法性能优化  工程师 或 实习生，职责和要求如下</h3><p>该岗位也支持Rust开发</p><p>【工作职责】 1、负责AI算法中计算在华为CPU/GPU/NPU等处理器上的计算性能优化，基础库设计； 2、负责CNN/RNN/RL等模型的效果评估分析，持续优化到极致； 3、负责持续跟踪业界最优实现，超越并创新 4、负责和上下游同事对接，协同交付最优成果；</p><p>【任职要求】 1、熟悉计算机体系结构，非常了解现代处理器的特性； 2、熟练掌握C，清楚C的常见坑和编程技巧； 3、至少熟悉ARM NEON指令集、OpenCL、CUDA中一种， 有性能优化经验； 4、熟悉至少一个推理平台开源框架的实现，具有相关经验者优先； 5、熟悉机器学习算法，熟悉Caffe,Tensorflow,Pytorch,Mxnet等至少一个主流AI开源框架，具有上述开源项目经验者优先； 6、追求极致、理性的心态。</p><p>感兴趣的朋友可把简历直接发给@风辰（qq 304128534） ，或发送到 liuwenzhi4 at <a href="https://link.zhihu.com/?target=http%3A//huawei.com" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">huawei.com</span><span class="invisible"></span></a></p><h3>韩国一家金融公司已经把 Rust 用在了一个正式的盈利的<b>高频交易</b>项目上</h3><p>当然，是没有开源的啦。作者只是在reddit上通报了一声，说了一下这个项目的大致情况。</p><p>这个项目在16个月前立项。上线交易近10个月，盈利9个月。交易策略重写花了7个月，上线部署花了1个月。最终的效果是Rust在各方面都打败了c++版本，虽然只是一点点性能提升。不过作者还没有提到安全性和稳定性的问题。</p><p>高频交易按道理说，应该是Rust能展示威力的地方，只是这块儿非常敏感，所以试水比较缓慢，现在终于有人出来公开宣传了。赞赞赞！</p><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bhtuah/production_deployment_of_rust_in_hft_system_at/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><hr/><h2>学习资源</h2><h3>「系列文章」使用wasmer和Rust构建插件系统 Part 1</h3><p>Wasmer是一个可以嵌入到Rust应用中的wasm解释器。</p><p><a href="https://link.zhihu.com/?target=https%3A//wiredforge.com/blog/wasmer-plugin-pt-1" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>「经验分享」Rust中你不应该做的三件事</h3><p>该文是来自sentry公司的博客。概要</p><ul><li>不要使用自引用指针。（而应该用handle来代替，也就是说，不是存储指向对象本身的指针，而是存储一些信息，以便稍后计算指针。）</li><li>不要陷入生命周期和借用检查地狱。（而应该使用引用计数共享所有权）</li><li>不要轻易使用内部可变性。（考虑建立新的状态来代替内部可变）</li></ul><p>更多详细内容，包括代码解释请看原文。</p><p><a href="https://link.zhihu.com/?target=https%3A//blog.sentry.io/2018/04/05/you-cant-rust-that" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>核反应堆设计模式</h3><p>作者认为，设计模式分为两种层级：低级和高级。像那种流行的设计模式，比如工厂模式之类，属于低级的设计模式。而高级的设计模式，是指整个应用程序的设计哲学。本文主要谈论后者，作者称之为「核反应堆设计模式」。作者使用该设计模式很长时间，并且它不特定于Rust，还可以应用于C/C++和Perl等其他语言。但作者认为，该模式应该在Rust中更受欢迎。</p><p>核反应堆设计模式原理</p><p>假如你的应用程序中有一个非常难以处理的难题（比如一个事件循环，或者是复杂的数据结构等等），那么你可以单独去解决这个难题，然后在这个难题的核心周围设置一堆API墙，利用这面强将难题核心和其他周围环境隔离起来。也就是说，将难题作为一个独立的整体去思考，而不能让它传播到其他程序中。就像核反应堆一样。</p><p>为什么说Rust更适合这种设计模式</p><ul><li>Rust语言比较吸引那些喜欢硬问题的人。</li><li>心理作用。比如Rust就分离了unsafe Rust。</li><li>Rust的类型系统。可以更加方便地构建「核反应堆」。</li></ul><p>有人说，这不就是「封装」吗？难道说，只是把「封装」换了个名字？</p><p>并不是。封装只是核反应堆的必要条件。并非每个封装的东西都是核反应堆。</p><p><a href="https://link.zhihu.com/?target=https%3A//vorner.github.io/2019/04/21/nuclear-reactor-design-pattern.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>六个你可能从未见过的有用的Rust宏</h3><p>概要：</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//crates.io/crates/log-derive" class=" wrap external" target="_blank" rel="nofollow noreferrer">log-derive: 记录函数错误的宏</a></li><li><a href="https://link.zhihu.com/?target=https%3A//crates.io/crates/recap" class=" wrap external" target="_blank" rel="nofollow noreferrer">recap: 正则表达式解析库</a></li><li><a href="https://link.zhihu.com/?target=https%3A//crates.io/crates/shrinkwraprs" class=" wrap external" target="_blank" rel="nofollow noreferrer">shrinkwraprs： 将数据类型重新定义为新的不同类型</a></li><li><a href="https://link.zhihu.com/?target=https%3A//crates.io/crates/metered" class=" wrap external" target="_blank" rel="nofollow noreferrer">metered： 自动在方法上生成统计信息</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/nrc/derive-new" class=" wrap external" target="_blank" rel="nofollow noreferrer">derive-new： 自动实现new方法</a></li><li><a href="https://link.zhihu.com/?target=https%3A//crates.io/crates/snafu" class=" wrap external" target="_blank" rel="nofollow noreferrer">snafu： 提供辅助函数来处理Rust中的错误，帮助增强代码的可读性</a></li></ul><p><a href="https://link.zhihu.com/?target=https%3A//medium.com/%40benmcdonald_11671/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Rust中的新奇功能</h3><h2>Rust1.34</h2><p>该文作者对Rust1.34稳定版中引入的新功能<code>std::iter::from_fn</code>的探索。该功能允许通过一个函数来直接创建迭代器，以往此功能只能通过宏来辅助实现。现在看上去方便多了。</p><p><a href="https://link.zhihu.com/?target=https%3A//weblog.latte.ca/blake/tech/rust/makingiterators.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><p>学习Rust的解析器组合子</p><p>「长文预警」本文教你如何使用解析器组合子的函数式编程语言中常见的技术从头开始构建解析器。</p><p><a href="https://link.zhihu.com/?target=https%3A//bodil.lol/parser-combinators/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Remap: Rust中的Webassembly地图组件</h3><p>本文展示了如何使用stdweb和yew构建一个WASM的2D地图组件。</p><p><a href="https://link.zhihu.com/?target=https%3A//gitlab.com/alamminsalo/remap" class=" wrap external" target="_blank" rel="nofollow noreferrer">remap</a></p><h3>Silver: 基于tokio实现的一个简单HTTP框架</h3><p>可供学习</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/AhmedMostafa16/Silver" class=" wrap external" target="_blank" rel="nofollow noreferrer">Silver</a></p><h3>Rocket Prometheus：给 Rocket 应用添加监控</h3><p>Prometheus（普罗米修斯），在运维界几乎成了应用监控的代名词了，详细定义在<a href="https://link.zhihu.com/?target=https%3A//prometheus.io/docs/introduction/overview/" class=" wrap external" target="_blank" rel="nofollow noreferrer">这里</a>。本身内容还是蛮多的，运维哥哥深有体会。</p><p>这个库应该是给rocket应用加一个metrics接口，这样就可以使用prometheus了</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/sd2k/rocket_prometheus" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>min-sized-rust：如何缩小 Rust 二进制包大小的总结</h3><p>总结有以下方法：</p><ol><li>以 --release 编译</li><li>strip 掉符号</li><li>把 cargo 的编译参数加个 opt-level = &#39;z&#39; 以优化体积编译</li><li>开启 LTO</li><li>去掉 Jemalloc</li><li>减少 cargo 的并行代码生成单元</li><li>panic 的时候直接中断掉程序 </li><li>使用 xargo 优化 libstd</li><li>使用 panic_immediate_abort 去掉 panic 的格式化代码</li><li>不使用 libstd: #![no_std]</li></ol><p><a href="https://link.zhihu.com/?target=https%3A//github.com/johnthagen/min-sized-rust" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>你应该尝试的12个杀手级库</h3><p>该文总结了12个Rust生态中最常用的库。</p><p><a href="https://link.zhihu.com/?target=https%3A//medium.com/%40jondot/12-killer-rust-libraries-you-should-know-c60bab07624f" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>「嵌入式Rust」使用DMA传输数据</h3><p>DMA(Direct Memory Access)，直接存储器访问。</p><p>之前都是，CPU参与，一点点把数据，从一个地方拷贝，即像搬家一样搬到，另一个地方。很明显，此时，相对时间比较宝贵（比较值钱）的CPU，把时间，就用在（浪费在）拷贝数据了。所以才出现了DMA，专门去干拷贝数据的累活。DMA是一种无需CPU的参与就可以让外设和系统内存之间进行双向数据传输的硬件机制，它不是独立外设，而是硬件模块支持的机制。</p><p><a href="https://link.zhihu.com/?target=https%3A//flowdsp.io/blog/stm32f3-02-dac-dma/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Rust如何解决依赖地狱</h3><p>依赖地狱：处理应用程序依赖性版本和依赖性冲突所带来的挫败感。</p><p>Rust的解决方案：</p><ul><li>Cargo。允许语义版本控制兼容规则。</li><li>Name Mangling。在Rust编译器源码的<code>symbol_names.rs</code>文件中有详细规则。</li></ul><p>通过上面两个共同作用来解决问题。</p><p>假如你写的库被包含在某个应用程序中，而应用程序中使用了<code>log-0.5</code>，你的库中依赖的是<code>log-0.4</code>，那么Rust编译器会对应用程序内部使用log的库使用0.5版本，而你的库代码则使用0.4。</p><p>更多详细内容请看原文。</p><p><a href="https://link.zhihu.com/?target=https%3A//stephencoakley.com/2019/04/24/how-rust-solved-dependency-hell" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Rust AV1 视频编码器</h3><p>本文讲解了一些av1编码的概念，对视频压缩感兴趣的人可以看看</p><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bh8xnl/implementing_tile_encoding_in_rav1e_a_rust_av1/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read more</a></p><h3>如何在Rust中编写更好的编译错误信息</h3><p>本文介绍了一种方法，让你在代码中编写更易于调试的编译错误：compile_error!宏，它也可以配合条件编译使用。</p><p><a href="https://link.zhihu.com/?target=https%3A//blog.knoldus.com/how-to-write-better-compilation-error-message-in-rust/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>在 no_std 下，如何做序列化</h3><p>这是一个不常见的问题，但是如果是针对嵌入式设备编程，或手持设备进行游戏开发。这会是一个重要问题。作者给了以下3个要求：</p><ol><li>只有 64M RAM</li><li>磁盘上的空间使用应该尽可能小，比如应该用二进制存储而不是JSON</li><li>能支持 no_std，也能支持其它目标</li></ol><p>最后作者把 <a href="https://link.zhihu.com/?target=https%3A//github.com/tafia/quick-protobuf" class=" wrap external" target="_blank" rel="nofollow noreferrer">quick-protobuf</a> 拿过来改了改，满足了要求。</p><p><a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bi0xll/no_std_data_serializationdeserialization/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><hr/><h2>项目、工具与库</h2><h3>「嵌入式Rust」atomic_bitfield: core库中原子类型的位域(bit-field)抽象</h3><blockquote> 位域是把一个字节中的二进位划分为几个不同的区域，每个域有一个域名，并说明每个区域的位数，允许在程序中按域名进行操作。在对内存有苛刻要求的嵌入式系统中，经常会用到这个概念。<br/> </blockquote><p>该库中没有使用任何unsafe代码，新库，具体使用的时候需要谨慎。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/amiraeva/atomic_bitfield" class=" wrap external" target="_blank" rel="nofollow noreferrer">atomic_bitfield</a></p><h3>libbluetooth-rs: BlueZ Linux蓝牙库的原始绑定</h3><p>该库支持Unix的Bluetooth API (BlueZ)。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/Wodann/libbluetooth-rs/" class=" wrap external" target="_blank" rel="nofollow noreferrer">libbluetooth-rs</a></p><h3>laminar 0.2 发布</h3><p>新的版本专注于代码质量的提升。</p><p>Laminar用于多人游戏的半可靠UDP协议实现。该库在UDP的基础上实现了TCP的一些功能。它被用于Amethyst游戏引擎中。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/amethyst/laminar" class=" wrap external" target="_blank" rel="nofollow noreferrer">laminar</a></p><h3>nude-rs：高性能色图检测</h3><p>是 <a href="https://link.zhihu.com/?target=https%3A//github.com/pa7/nude.js" class=" wrap external" target="_blank" rel="nofollow noreferrer">nude.js</a> 和 <a href="https://link.zhihu.com/?target=https%3A//github.com/hhatto/nude.py" class=" wrap external" target="_blank" rel="nofollow noreferrer">nude.py</a> 的移植。</p><p>看看下面的性能评测：</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-ff991767e02a2979da7840f53d3c828c_b.jpg" data-rawwidth="865" data-rawheight="350" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb" width="865" data-original="https://pic1.zhimg.com/v2-ff991767e02a2979da7840f53d3c828c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-ff991767e02a2979da7840f53d3c828c_b.jpg" data-rawwidth="865" data-rawheight="350" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb lazy" width="865" data-original="https://pic1.zhimg.com/v2-ff991767e02a2979da7840f53d3c828c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-ff991767e02a2979da7840f53d3c828c_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>nude-js 社区经常引以为傲的性能优越感呢？不过 Rust 为 node 包性能的提升已经做好准备。</p><p>此库目前还处于实验阶段。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/kpcyrd/nude-rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>python-ext-wasm：用于运行 WebAssembly 二进制文件的 Python 扩展</h3><p>Wasmerio 出品，之前我们报道过 <a href="https://link.zhihu.com/?target=https%3A//github.com/wasmerio/php-ext-wasm" class=" wrap external" target="_blank" rel="nofollow noreferrer">php-ext-wasm</a>，这个库就是对应的 Python 版本。</p><p>主打： - 易用 - 快速 - 安全</p><p>使用 </p><div class="highlight"><pre><code class="language-text">$ pip install wasmer</code></pre></div><p>就可以安装了。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/wasmerio/python-ext-wasm" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>ring-channel：环形缓冲区之上的无阻塞，bounded MPMC 管道</h3><p>在 <a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/%25E7%2592%25B0%25E5%25BD%25A2%25E7%25B7%25A9%25E8%25A1%259D%25E5%258D%2580" class=" wrap external" target="_blank" rel="nofollow noreferrer">环形缓冲区 ring buffer</a> 上建立一个 MPMC （Multiple Producer Multiple Consumer）通道。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/brunocodutra/ring-channel" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>org-rs：Org 模式解析器的 Rust 实现</h3><p><a href="https://link.zhihu.com/?target=https%3A//orgmode.org/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Org Mode</a> 是 Emacs（神的编辑器）中用于记笔记，维护待做列表，做工程规划等活儿的插件，功能强大，操作快捷，受众广泛，被超多人喜爱。但是只能在 Emacs 中，是个硬伤。所以就有人想把它独立出来用。所以就有了解析器。</p><p>现在这个解析的 Rust 版本来了。目前处于早期阶段，可以玩儿了。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/org-rs/org-rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>Gleam发布了0.1版本</h3><p>Gleam是Rust实现的一门函数式编程语言，拥有一个类似于erlang和elixir的分布式并发系统。这是该语言的第一次release版本。</p><p><a href="https://link.zhihu.com/?target=https%3A//lpil.uk/blog/hello-gleam/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>neat-flappy-bird: NEAT算法玩像素鸟</h3><p>来自社区 @planet0104 的作品，使用了quicksilver。</p><blockquote> Neuro Evolution Of Augmenting Topologies(拓扑扩张的神经演化), NEAT代码来自《游戏编程中的人工智能技术》一书<br/> </blockquote><p><a href="https://link.zhihu.com/?target=https%3A//github.com/planet0104/neat-flappy-bird" class=" wrap external" target="_blank" rel="nofollow noreferrer">neat-flappy-bird</a></p><h3>sfsdb - 高性能KV文件系统数据库</h3><p>作者宣称的特点是，简单，高性能，不需要额外学习，使用它就好像使用 Rust 语言自身的结构一样。比如：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/AlmightyFloppyFish/sfsdb" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>lemmy - 使用actix-web和TypeScript仿reddit站点</h3><p>Rust和TypeScript很配</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/dessalines/lemmy" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>显示树状目录文件结构有几种方式（只用Rust工具）</h3><ol><li><a href="https://link.zhihu.com/?target=https%3A//github.com/sighol/tree-rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">tree-rs</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/dzamlo/treeify" class=" wrap external" target="_blank" rel="nofollow noreferrer">treeify</a> </li><li><a href="https://link.zhihu.com/?target=https%3A//the.exa.website/features/tree-view" class=" wrap external" target="_blank" rel="nofollow noreferrer">exa --tree</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/sharkdp/fd" class=" wrap external" target="_blank" rel="nofollow noreferrer">fd</a> 与 treeify 配合使用</li></ol><h3>netease-cloud-music-gtk: 基于 Rust + GTK 开发的网易云音乐播放器</h3><p>国人开发，特点：</p><ul><li>安全： Rust 天生的</li><li>极速：相比 Node/python 版，Rust 速度可谓一骑绝尘</li><li>稳定：除了网速或网易 API 限制，基本不会出现运行问题</li><li>简洁：仿 GNOME Music 风格，GTK 原生界面，纯粹得令人发指</li><li>简单：最小的编译与运行依赖</li></ul><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-628ba8a843ed7c9fda38aac45124da9a_b.jpg" data-rawwidth="948" data-rawheight="648" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb" width="948" data-original="https://pic3.zhimg.com/v2-628ba8a843ed7c9fda38aac45124da9a_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-628ba8a843ed7c9fda38aac45124da9a_b.jpg" data-rawwidth="948" data-rawheight="648" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb lazy" width="948" data-original="https://pic3.zhimg.com/v2-628ba8a843ed7c9fda38aac45124da9a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-628ba8a843ed7c9fda38aac45124da9a_b.jpg"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-94905fb6ef1c5d1c16011188bac90bcf_b.jpg" data-rawwidth="948" data-rawheight="648" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb" width="948" data-original="https://pic4.zhimg.com/v2-94905fb6ef1c5d1c16011188bac90bcf_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-94905fb6ef1c5d1c16011188bac90bcf_b.jpg" data-rawwidth="948" data-rawheight="648" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb lazy" width="948" data-original="https://pic4.zhimg.com/v2-94905fb6ef1c5d1c16011188bac90bcf_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-94905fb6ef1c5d1c16011188bac90bcf_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p>大家去感受一下。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/gmg137/netease-cloud-music-gtk" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>no-std-compat：一个<code>#![no_std]</code>兼容层</h3><p>可以轻松地将你的crate移植到no_std。</p><p><a href="https://link.zhihu.com/?target=https%3A//gitlab.com/jD91mZM2/no-std-compat" class=" wrap external" target="_blank" rel="nofollow noreferrer">no-std-compat</a></p><h3>wapm-cli: 命令行的WebAssembly软件包管理器</h3><p>此工具允许在<a href="https://link.zhihu.com/?target=http%3A//wapm.io" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">wapm.io</span><span class="invisible"></span></a>注册表上安装，管理和发布wasm包。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/wasmerio/wapm-cli" class=" wrap external" target="_blank" rel="nofollow noreferrer">wapm-cli</a></p><h3>abstreet: Rust实现的交通模拟游戏</h3><p>曾经在公交车堵车，想知道为什么有车停在路上而不是公交车道？ A/B街是一个游戏，探索城市的小变化如何影响司机，骑车人，过境用户和行人的运动。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/dabreegster/abstreet" class=" wrap external" target="_blank" rel="nofollow noreferrer">abstreet</a></p><h3>rust-web-boilerplate: 基于Tide和Futures0.3实现的样板项目</h3><p><a href="https://link.zhihu.com/?target=https%3A//github.com/pbzweihander/rust-web-boilerplate" class=" wrap external" target="_blank" rel="nofollow noreferrer">rust-web-boilerplate</a></p><h3>Rust 嵌入式开发的一个小示例：用一个LED灯说出 Hello world</h3><p>要用一个 LED 灯说出 Hello world。当然是需要用到<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/%25E6%2591%25A9%25E5%25B0%2594%25E6%2596%25AF%25E7%2594%25B5%25E7%25A0%2581" class=" wrap external" target="_blank" rel="nofollow noreferrer">莫尔斯编码</a>啦（就是港警匪片中经常出现的那个用手指或枪有节奏地发出声音的那个信号序列）。</p><p>就像下面这个样子，</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-250bfd4440e4fd1338feb438eeaeb257_b.jpg" data-rawwidth="654" data-rawheight="736" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb" width="654" data-original="https://pic4.zhimg.com/v2-250bfd4440e4fd1338feb438eeaeb257_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-250bfd4440e4fd1338feb438eeaeb257_b.jpg" data-rawwidth="654" data-rawheight="736" data-size="normal" data-caption="" class="origin_image zh-lightbox-thumb lazy" width="654" data-original="https://pic4.zhimg.com/v2-250bfd4440e4fd1338feb438eeaeb257_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-250bfd4440e4fd1338feb438eeaeb257_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p><a href="https://link.zhihu.com/?target=https%3A//twitter.com/i/status/1120835944003846144" class=" wrap external" target="_blank" rel="nofollow noreferrer">视频地址</a> 需fq。</p><p>作者参考了 <a href="https://link.zhihu.com/?target=https%3A//rust-embedded.github.io/book/" class=" wrap external" target="_blank" rel="nofollow noreferrer">The Embedded Rust Book</a> 和这个<a href="https://link.zhihu.com/?target=https%3A//github.com/rust-embedded/cortex-m-quickstart" class=" wrap external" target="_blank" rel="nofollow noreferrer">样板项目</a></p><p>用了 openocd 来调试。然后向代码中灌入了：</p><div class="highlight"><pre><code class="language-text">.... . .-.. .-.. ---  .-- --- .-. .-.. -..</code></pre></div><p>作为数据源，小板子就闪起来了。</p><p>结果 <code>...- . .-. -.-- -.-. --- --- .-.. -.-.--</code> (verycool)</p><p><a href="https://link.zhihu.com/?target=https%3A//idursun.com/posts/hello_world_in_morse_code/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></p><h3>使用 crossterm 进行跨平台终端应用开发</h3><p>Rust世界中终端库很多，但是完全跨平台的终端库不多，crossterm 算一个。下面是用它开发的Pikachu.</p><p>来看看 <a href="https://link.zhihu.com/?target=https%3A//preview.redd.it/p3nlqakx2bt21.gif%3Fformat%3Dmp4%26s%3D30d2dab1679000eedc65c7cadd550f26676a704e" class=" wrap external" target="_blank" rel="nofollow noreferrer">3D 效果</a>。</p><p><a href="https://link.zhihu.com/?target=http%3A//www.jonathanturner.org/2019/04/porting-the-pikachu.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a><br/> <a href="https://link.zhihu.com/?target=https%3A//github.com/TimonPost/crossterm" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>rubot - 一个独立的可嵌入其它游戏中的游戏机器人库</h3><p>非常容易使用，比如：</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/lcnr/rubot/blob/master/examples/tic-tac-toe.rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">tic-tac-toe</a> </li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/lcnr/rubot/blob/master/examples/chess.rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">chess</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/lcnr/rubot/blob/master/examples/oko.rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">oko</a></li></ul><p><a href="https://link.zhihu.com/?target=https%3A//github.com/lcnr/rubot" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>futures-codec: 配合 Future 0.3 进行流编解码的库</h3><p>用过 tokio_codec 的都知道，我们需要用 poll 不断去检查流有没有输出结果，并对 Ready 还是 NotReady 返回分别判断处理，现在有了这个库，就可像下面这样更“符合人性”直观地写了：</p><div class="highlight"><pre><code class="language-text">async move {
    // let stream = ...
    let mut framed = Framed::new(stream, LinesCodec {});

    while let Some(line) = await!(framed.try_next())? {
        println!(&#34;{:?}&#34;, line);
    }
};</code></pre></div><p>这个库只是Future 0.3 大生态的一部分。这个生态还是慢慢完善当中。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/matthunz/futures-codec" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>offst - 去中心化的支付系统</h3><p>这个支付系统看起来很有趣。它有如下特性：</p><ul><li>有效快速支付。Offst不依赖于一个区块链或者任何形式的PoW。每个交易只影响网络中的一小部分节点。支付通常在一秒内完成。</li><li>低支付费用。支付费用只由支付经过的路由长度决定。路径上的每个路由参与者只得到一份credit。</li><li>公正的资产分布。Offst系统中总的 credits 是0,并且最终会在所有成员之间公正分布。</li><li>如果你丢失了Key，你可以向你的朋友请求恢复你的账户。</li><li>拒绝审查。没有任何实体可以阻止或审核你的交易。</li><li>完全原始控制。Offst是可编程的，可以二次开发，方便地定制上层应用。</li></ul><p>这套系统背后的原理请阅读下文。个人感觉很有意思。</p><p><a href="https://link.zhihu.com/?target=https%3A//www.freedomlayer.org/offst/offst-release/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a> <br/> <a href="https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bh9h71/offst_a_decentralized_credit_card/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More 2</a> <br/> <a href="https://link.zhihu.com/?target=https%3A//github.com/freedomlayer/offst" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>warmy - 通用的热加载/重载资源库</h3><p>我们的在线系统中，经常会有些资源文件（如配置更改），需要重新加载。最简单的方式当然是把服务停掉，重启。但是对于高可用度在线服务来讲，这是不可取的。要么就把配置存数据库或缓存redis等。现在有了这个库，你按它指导的方式进行编程，就可以实现我们想要的目的（不需要数据库）。具体需要试用后才知道好不好用。</p><p>它还有资源发现的功能。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/phaazon/warmy" class=" wrap external" target="_blank" rel="nofollow noreferrer">Repo</a></p><h3>luminance-rs 准备发布1.0</h3><p>Luminance是Rust实现的一个无状态类型安全的图形库。本来是Haskell实现的，后来作者使用了Rust之后就决定把Rust作为图形库开发的默认语言。可能比gfx-hal更易于使用？</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/phaazon/luminance-rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">luminance-rs</a></li><li><a href="https://link.zhihu.com/?target=https%3A//phaazon.net/blog/pre-luminance-n-random-thoughts" class=" wrap external" target="_blank" rel="nofollow noreferrer">Read More</a></li></ul>