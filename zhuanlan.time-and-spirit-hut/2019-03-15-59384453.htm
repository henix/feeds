<div class="title-image"><img src="https://pic4.zhimg.com/v2-905deaaf871b08892a7d7a25e06ebea9_b.jpg" alt=""></div><blockquote>有读者比较好奇，这些名言警句都出自哪里？ 借这个机会我梳理一下：</blockquote><hr><p><b>第一章：不谋全局者，不足谋一域。出自：陈澹然[清]《寤言二迁都建藩议》</b></p><p>第一章是全书的起始，我希望读者可以从整体上对Rust有一个宏观的认识，然后再开始学习后面的内容。</p><p><b>第二章： 好读书，不求甚解；每有会意，便欣然忘食。 出自： 晋·陶渊明《五柳先生传》</b></p><p>第二章是对Rust语法的精要罗列，因为在学习任何一门之前，至少要对它的语法有一个比较基本的认识，然后在这个基础上，去掌握它。语法上其实和其他语言的也没有多少差别。但不同的是，第二章还贯穿着一根主线，那就是表达式，或者说，语法中的共性，一致性。用这个副标题，就是想让大家在看这一章的时候，没必要去抠细节，因为很多内容后面还会讲。应该抓住每一章的重点。这也迎合了陶渊明先生的这句名言。</p><p><b>第三章： 本性决定行为,本性取决于行为。 出自：罗伯特·穆齐尔 《没有个性的人》</b></p><p>第三章讲的是类型系统。Rust是类型安全的语言，一切皆类型。而trait则是Rust一切抽象的基础。类型，比如数字、字符串等等类型，各有各的本性。而trait，则是对这些类型的行为的抽象。 什么样的类型（本性），决定了它应该实现什么样的trait（行为）。反过来，什么样的trait（行为），也能决定它的类型（本性），比如trait对象。</p><p><b>第四章： 清空你的杯子，方能再行注满，空无以求全。出自： 李小龙</b></p><p>第四章讲的是内存管理。我为什么会想到李小龙的这句话呢？主要有三点原因：</p><ol><li>李小龙也算是我的偶像了，他创立的截拳道，是吸取了众派所长，然后形成了一个精简的武学模型。而Rust语言，在这一点上也比较类似，集合了各家语言之所长，然后融合到一个精简的模型中。</li><li>Rust的内存管理，独树一帜。没有走传统的GC路线，也没有走C和Cpp的自由的手工管理。而是借助了所有权机制，这一点，很像以空杯心态来重新审视内存安全的问题。</li><li>对于我们学习者而言，也需要有这种空杯心态，来面对新的技术。</li></ol><p><b>第五章： 律者，所以定分止争也。出自：《管子·七臣七主》</b></p><p>第五章，讲所有权系统。所有权系统，就是Rust语言中的法律，而编译器，就是所有权「法律」的执行者。作为Rust语言使用者，应该牢记这一点，你应该做一个「懂法」的人，如果「不懂法」，那只会被编译器「就地正法」。</p><p><b>第六章：语言影响或决定人类的思维方式。 出自： TED演讲：<a href="https://zhuanlan.zhihu.com/write#" class="internal">《语言如何塑造我们的思维方式》</a></b></p><p>第六章，讲函数、闭包和迭代器。这一章涉及了Rust中对函数式编程范式的支持，因为Rust是一个混合范式语言，而且我观察到社区里，来自于其他不同语言社区的人，对Rust的理解也是不同。来自Haskell的人，想方设法地要用Rust实现各种高阶魔法。而来自C语言社区，则对Rust提供的在其他高级语言中最常见的基本抽象表达能力赞叹不绝。这是为什么呢？ 这就是语言对思维方式的影响。而编程语言范式，也是因为不同思维的语言作者，而创造出的不同范式。</p><p>而Rust语言也在改变我的思维，在我刚用Rust的一段时间里，我还纠结OOP和函数式语言范式，但是用习惯Rust以后，我发现自己已经有很长时间没有关注语言编程范式了。</p><p><b>第七章：形每万变，神唯守一。出自： 《斗拱》维基百科</b></p><p>第七章讲结构体、枚举相关的内容。结构体和枚举，是Rust编程的基础，也是Rust代码的基本组织单元。这不禁让我想到了中国古代的「斗拱」结构。斗拱属于榫卯结构的一种，其上承屋顶，下接立柱，在中国古建筑中扮演的是顶天立地 的角色。而斗拱仅仅由5 个简单的部件组成，利用独一无二的榫卯结构，可以拼接出种类繁 多且左右对称的各种样式，无不令人称赞。这正应了“形每万变，神唯守一”的规律。</p><p><b>第八章：阵而后战，兵法之常，运用之妙，存乎一心。 出自：《宋史·岳飞传》</b></p><p>第八章讲字符串和集合类型。这基本是任何语言里最常用的数据结构了。数据结构在我的心里，就像是一种「阵法」。编程，其实就是解决问题，算法是解决问题的思路，数据结构是问题领域中被总结出来的常用工具。这也是为什么说，程序等于数据结构加算法。其实，在你编程之前，面对要解决的问题领域，就已经想好了使用什么样的算法和数据结构，然后才动手。这正好印了岳飞的这句话：阵而后战，兵法之常，运用之妙，存乎一心。</p><p><b>第九章：每个人都有错，但只有愚者才会执迷不悟。出自：西塞罗</b></p><p>第九章讲的是Rust中的错误处理。在写这章的时候，我不禁想起了西塞罗的这句名言。这个世界上，有人的地方就有Bug。我们无法避免Bug，但是我们可以寻找最佳的错误处理方式。我们是人，我们不是神。懂得容错，才能更加健壮。Rust语言就是一次对最佳错误处理方式的探索。</p><p><b>第十章：良好的秩序是一切美好事物的基础。 出自：埃德蒙·伯克</b></p><p>第十章讲Rust的包管理和模块化。你如果深入了解Rust的Cargo，你会发现，它完全是建立在开源文化基础上的。它通过一系列的约定，帮助开发者完成人和人的良好协作。这也是为什么Cargo深受大家的喜欢。再加上Rust对模块化的支持，让编写大型Rust项目变得更加轻松。协作，不仅仅是和别人协作，也是和昨天的你协作。你写的一大坨代码，可能睡一觉就忘记了程序的结构。Rust倡导你以最小的crate单元来组织你的代码，crate和crate之间的协作，会帮助你更好的组织代码。这是通往美好的基础。</p><p><b>第十一章： 万物并育而不相害，道并行而不相悖。 出自：《中庸》</b></p><p>第十一章讲的Rust的安全并发。万物并育而不相害，道并行而不相悖，但是为什么我们编写多线程并发代码却不是这样呢？那是因为万物并发，道并行，都是独立的，它们各有自己的状态，而不会相互影响。而我们的多线程并发代码则不是，稍有不慎，就会出现难以重现的Bug。然而，Rust的所有权机制，帮助你实现了安全的并发，真正的达成，万物并育而不相害，道并行而不相悖。</p><p><b>第十二章：道生一，一生二，二生三，三生万物。出自： 《道德经》</b></p><p>第十二章讲的是元编程。元编程来源于Meta-Programming 一词。Meta 表示“关于某事本身的某事”。比如 Meta-Knowledge，代表“关于知识本身的知识”，称为元知识。再如Meta-Cognition，代表 “关于认知本身的认知”，称为元认知。所以，Meta-Programming 就代表了元编程。人类通 过培养和扩展自己的元知识或元认知，就可以拥有独立思考进一步产生新知识或新认知的能 力。同样，通过元编程的手段可以让程序生成新的程序。Meta 被译为“元”，在语义上比较 合理，“元”有本源和开端之意。这正好和道家思想相吻合。</p><p><b>第十三章：混沌涌现秩序，光明源自黑暗。出自： 《魔兽世界》</b></p><p>第十三章，讲的是Unsafe Rust。很多人好奇Rust不是号称安全吗？为什么还有Unsafe Rust？《魔兽世界》里的这句话，就是答案。</p><p>这个世界本来就是不安全的。你所看到的安全，都是那些默默劳作的好人，帮你构建的。而Rust就是这样的「好人」。它通过Safe Rust帮你在这片由C/Cpp语言统治的「不安全的大陆」构建一片「安全净土」。然而，有时候我们不得不和不安全的底层打交道，这就是Unsafe Rust的用处。当我们身处安乐窝时，不要忘记这个世界，原本就是混沌与黑暗的。所以，我们才要不断地构建秩序，追求光明，走向美好！</p>