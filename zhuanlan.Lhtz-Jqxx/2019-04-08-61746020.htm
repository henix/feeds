<div class="title-image"><img src="https://pic1.zhimg.com/v2-4f467d15a0b6c9cba5345ca6b0406c01_b.jpg" alt=""></div><p>▎作者：Manu NALEPA</p><p><b>▎</b>编译：公众号翻译部</p><p>本文中介绍的<b>库只支持Linux</b>和<b>MacOS</b>。<br/></p><p><b>安装文件文末下载</b></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-f7d3a12c6cd5494f3efb20eb28c99c14_b.jpg" data-caption="" data-size="normal" data-rawwidth="310" data-rawheight="228" class="content_image" width="310"/></noscript><img src="https://pic1.zhimg.com/v2-f7d3a12c6cd5494f3efb20eb28c99c14_b.jpg" data-caption="" data-size="normal" data-rawwidth="310" data-rawheight="228" class="content_image lazy" width="310" data-actualsrc="https://pic1.zhimg.com/v2-f7d3a12c6cd5494f3efb20eb28c99c14_b.jpg"/></figure><h2><b>什么问题困扰着我们?</b></h2><p>对于Pandas，当你运行以下代码行时：</p><div class="highlight"><pre><code class="language-python"><span class="n">df</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-41a8929271ebf00fa11d84837b9d8305_b.gif" data-size="normal" data-rawwidth="699" data-rawheight="159" data-thumbnail="https://pic2.zhimg.com/v2-41a8929271ebf00fa11d84837b9d8305_b.jpg" class="origin_image zh-lightbox-thumb" width="699" data-original="https://pic2.zhimg.com/v2-41a8929271ebf00fa11d84837b9d8305_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-41a8929271ebf00fa11d84837b9d8305_b.gif" data-size="normal" data-rawwidth="699" data-rawheight="159" data-thumbnail="https://pic2.zhimg.com/v2-41a8929271ebf00fa11d84837b9d8305_b.jpg" class="origin_image zh-lightbox-thumb lazy" width="699" data-original="https://pic2.zhimg.com/v2-41a8929271ebf00fa11d84837b9d8305_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-41a8929271ebf00fa11d84837b9d8305_b.gif"/><figcaption>只使用一个CPU</figcaption></figure><p>即使你的计算机有多个CPU，也只有一个CPU是完全用于计算的。</p><p>我们希望用一种简单的方法来代替CPU的使用：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-ccd581d0b1cc4660349369d7aca42033_b.gif" data-size="normal" data-rawwidth="699" data-rawheight="159" data-thumbnail="https://pic4.zhimg.com/v2-ccd581d0b1cc4660349369d7aca42033_b.jpg" class="origin_image zh-lightbox-thumb" width="699" data-original="https://pic4.zhimg.com/v2-ccd581d0b1cc4660349369d7aca42033_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-ccd581d0b1cc4660349369d7aca42033_b.gif" data-size="normal" data-rawwidth="699" data-rawheight="159" data-thumbnail="https://pic4.zhimg.com/v2-ccd581d0b1cc4660349369d7aca42033_b.jpg" class="origin_image zh-lightbox-thumb lazy" width="699" data-original="https://pic4.zhimg.com/v2-ccd581d0b1cc4660349369d7aca42033_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-ccd581d0b1cc4660349369d7aca42033_b.gif"/><figcaption>所有CPU齐上阵</figcaption></figure><h2><b>Pandaral·lel如何解决这个问题？</b></h2><p>Pandaral·lel的理念是将Pandas计算分配到计算机上所有可用的CPU上，以获得显著的速度提升。</p><p><b>▍安装</b></p><div class="highlight"><pre><code class="language-python"><span class="err">$</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">pandarallel</span> <span class="p">[</span><span class="o">--</span><span class="n">user</span><span class="p">]</span></code></pre></div><p><b>▍初始化</b></p><div class="highlight"><pre><code class="language-python"><span class="c1"># Import</span>
<span class="kn">from</span> <span class="nn">pandarallel</span> <span class="kn">import</span> <span class="n">pandarallel</span>

<span class="c1"># Initialization</span>
<span class="n">pandarallel</span><span class="o">.</span><span class="n">initialize</span><span class="p">()</span></code></pre></div><p><b>▍用法</b></p><p>对于一个带有Pandas DataFrame df的简单用例和一个应用func的函数，只需用parallel_apply替换经典的apply。</p><div class="highlight"><pre><code class="language-python"><span class="c1"># Standard pandas apply</span>
<span class="n">df</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>

<span class="c1"># Parallel apply</span>
<span class="n">df</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span></code></pre></div><p>注意，如果不想并行化计算，仍然可以使用经典的apply方法。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-8c9b6df16ab6fbc7250bf00cd9ca7587_b.gif" data-caption="" data-size="normal" data-rawwidth="758" data-rawheight="76" data-thumbnail="https://pic4.zhimg.com/v2-8c9b6df16ab6fbc7250bf00cd9ca7587_b.jpg" class="origin_image zh-lightbox-thumb" width="758" data-original="https://pic4.zhimg.com/v2-8c9b6df16ab6fbc7250bf00cd9ca7587_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-8c9b6df16ab6fbc7250bf00cd9ca7587_b.gif" data-caption="" data-size="normal" data-rawwidth="758" data-rawheight="76" data-thumbnail="https://pic4.zhimg.com/v2-8c9b6df16ab6fbc7250bf00cd9ca7587_b.jpg" class="origin_image zh-lightbox-thumb lazy" width="758" data-original="https://pic4.zhimg.com/v2-8c9b6df16ab6fbc7250bf00cd9ca7587_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-8c9b6df16ab6fbc7250bf00cd9ca7587_b.gif"/></figure><p>你还可以通过在initialize函数中传递progress_bar=True来显示每个工作CPU的一个进度条。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-d89300ae2d13ccde85b67da1cde4c94a_b.gif" data-caption="" data-size="normal" data-rawwidth="728" data-rawheight="238" data-thumbnail="https://pic3.zhimg.com/v2-d89300ae2d13ccde85b67da1cde4c94a_b.jpg" class="origin_image zh-lightbox-thumb" width="728" data-original="https://pic3.zhimg.com/v2-d89300ae2d13ccde85b67da1cde4c94a_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-d89300ae2d13ccde85b67da1cde4c94a_b.gif" data-caption="" data-size="normal" data-rawwidth="728" data-rawheight="238" data-thumbnail="https://pic3.zhimg.com/v2-d89300ae2d13ccde85b67da1cde4c94a_b.jpg" class="origin_image zh-lightbox-thumb lazy" width="728" data-original="https://pic3.zhimg.com/v2-d89300ae2d13ccde85b67da1cde4c94a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-d89300ae2d13ccde85b67da1cde4c94a_b.gif"/></figure><p>在一个更加复杂的Pandas DataFrame df用例中，DataFrame column1和column2的两列，以及一个函数用于func：</p><div class="highlight"><pre><code class="language-python"><span class="c1"># Standard pandas apply</span>
<span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="o">.</span><span class="n">column2</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>

<span class="c1"># Parallel apply</span>
<span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">column1</span><span class="p">)</span><span class="o">.</span><span class="n">column2</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span></code></pre></div><h2><b>基准</b></h2><p>以下是其中四个例子的配置：</p><ul><li>操作系统：Linux Ubuntu 16.04</li><li>硬件：Intel Core i7 @ 3.40 GHz - 4核</li></ul><div class="highlight"><pre><code class="language-python"><span class="o">%</span><span class="n">load_ext</span> <span class="n">autoreload</span>
<span class="o">%</span><span class="n">autoreload</span> <span class="mi">2</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">pandarallel</span> <span class="kn">import</span> <span class="n">pandarallel</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span></code></pre></div><p><b>▍DataFrame.apply</b></p><div class="highlight"><pre><code class="language-python"><span class="n">f_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">5e6</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">df_size</span><span class="p">),</span><span class="n">b</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">df_size</span><span class="p">)))</span>

<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">a</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">b</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res_parallel</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">res</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">res_parallel</span><span class="p">)</span></code></pre></div><p><b>▍DataFrame.applymap</b></p><div class="highlight"><pre><code class="language-python"><span class="n">df_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">1e7</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">df_size</span><span class="p">),</span><span class="n">b</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">df_size</span><span class="p">)))</span>

<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res_parallel</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">parallel_applymap</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="n">res</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">res_parallel</span><span class="p">)</span></code></pre></div><p><b>▍DataFrame.groupby.apply</b></p><div class="highlight"><pre><code class="language-python"><span class="n">df_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">3e7</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">df_size</span><span class="p">),</span>
<span class="n">b</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">df_size</span><span class="p">)))</span>


<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">dum</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">b</span><span class="p">:</span>
    <span class="n">dum</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">log10</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">item</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">dum</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">b</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res_parallel</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="n">res</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">res_parallel</span><span class="p">)</span></code></pre></div><p><b>▍DataFrame.groupby.rolling.apply</b></p><div class="highlight"><pre><code class="language-python"><span class="n">df_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">1e6</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="n">df_size</span><span class="p">),</span><span class="n">b</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">df_size</span><span class="p">)))</span>

<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">**</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">**</span> <span class="mi">4</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">raw</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res_parallel</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">raw</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">res</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">res_parallel</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-17cc5af8933e3f513c0bc10edd9b1cb7_b.jpg" data-caption="" data-size="normal" data-rawwidth="954" data-rawheight="507" class="origin_image zh-lightbox-thumb" width="954" data-original="https://pic4.zhimg.com/v2-17cc5af8933e3f513c0bc10edd9b1cb7_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-17cc5af8933e3f513c0bc10edd9b1cb7_b.jpg" data-caption="" data-size="normal" data-rawwidth="954" data-rawheight="507" class="origin_image zh-lightbox-thumb lazy" width="954" data-original="https://pic4.zhimg.com/v2-17cc5af8933e3f513c0bc10edd9b1cb7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-17cc5af8933e3f513c0bc10edd9b1cb7_b.jpg"/></figure><h2>标准 vs 并行四核（越低越好）</h2><p>除了df.groupby.col_name.rolling。如果应用程序的速度只增加了x3.2倍，那么平均速度就会增加大约x4倍，即使用的计算机上的内核数量。</p><h2><b>▍Series.map</b></h2><div class="highlight"><pre><code class="language-python"><span class="n">df_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">5e7</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">df_size</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">log10</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)))</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res_parallel</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="n">parallel_map</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="n">res</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">res_parallel</span><span class="p">)</span></code></pre></div><p><b>▍Series.apply</b></p><div class="highlight"><pre><code class="language-python"><span class="n">df_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">3.5e7</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">df_size</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">power</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">log10</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="n">power</span><span class="p">)))</span> <span class="o">+</span> <span class="n">bias</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,),</span> <span class="n">bias</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res_parallel</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,),</span> <span class="n">bias</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">res</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">res_parallel</span><span class="p">)</span></code></pre></div><h2><b>▍Series.rolling.apply</b></h2><div class="highlight"><pre><code class="language-python"><span class="n">df_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">1e6</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">df_size</span><span class="p">),</span>
<span class="n">b</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">df_size</span><span class="p">))))</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">**</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">**</span> <span class="mi">4</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">raw</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="o">%%</span><span class="n">time</span>
<span class="n">res_parallel</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">raw</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">res</span><span class="o">.</span><span class="n">equals</span><span class="p">(</span><span class="n">res_parallel</span><span class="p">)</span></code></pre></div><p><b>警告</b></p><p>1、进度条是一项实验性功能。这可能导致相当大的性能损失。parallel_apply不能用于DataFrameGroupy.parallel_apply。</p><p>2、使用df一个Pandas DataFrame，series 一个 Pandas Series，func一个函数来应用/ map，args1，args2一些参数＆col_name一个列名：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-84500b949460f3003e71f86116a2f75a_b.jpg" data-caption="" data-size="normal" data-rawwidth="952" data-rawheight="606" class="origin_image zh-lightbox-thumb" width="952" data-original="https://pic3.zhimg.com/v2-84500b949460f3003e71f86116a2f75a_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-84500b949460f3003e71f86116a2f75a_b.jpg" data-caption="" data-size="normal" data-rawwidth="952" data-rawheight="606" class="origin_image zh-lightbox-thumb lazy" width="952" data-original="https://pic3.zhimg.com/v2-84500b949460f3003e71f86116a2f75a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-84500b949460f3003e71f86116a2f75a_b.jpg"/></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-66e42399020f09072ade303483560baa_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="601" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic3.zhimg.com/v2-66e42399020f09072ade303483560baa_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-66e42399020f09072ade303483560baa_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="601" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic3.zhimg.com/v2-66e42399020f09072ade303483560baa_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-66e42399020f09072ade303483560baa_b.jpg"/></figure><h2><b>具体如何操作的？</b></h2><p>调用parallel_apply时，Pandaral·lel：</p><ul><li>实例化Pyarrow Plasma shared memory。</li></ul><a href="https://link.zhihu.com/?target=https%3A//arrow.apache.org/docs/python/plasma.html" data-draft-node="block" data-draft-type="link-card" class=" wrap external" target="_blank" rel="nofollow noreferrer">The Plasma In-Memory Object Store</a><ul><li>为每个CPU创建一个子进程，并要求每个CPU处理DataFrame的一个子部分。</li><li>在父进程中组合所有结果。</li></ul><p>与其他进程间通信媒介相比，使用共享内存的主要优点是不存在序列化/反序列化，这可能会导致CPU开销过大。</p><p><b>警告</b></p><p>1、<b>并行化是有条件的</b>（实现新进程，通过共享内存发送数据等等），所以<b>只有当并行化的计算量足够高时，并行化才有效</b>。对于很少的数据，使用parallezation并不总是有效的。</p><p>2、应用的函数不应该是lambda函数。</p><div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">pandarallel</span> <span class="kn">import</span> <span class="n">pandarallel</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sin</span>

<span class="n">pandarallel</span><span class="o">.</span><span class="n">initialize</span><span class="p">()</span>

<span class="c1"># FORBIDDEN</span>
<span class="n">df</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># ALLOWED</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
<span class="k">return</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

<span class="n">df</span><span class="o">.</span><span class="n">parallel_apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span></code></pre></div><h2><b>问题排除</b></h2><p>我有8个CPU，但是 <i>parallel_apply</i> 只加快了大约x4的计算速度。为什么?</p><p>实际上，Pandarallel 只能加快计算速度，直到你计算机有大约核心的数量。最近大多数CPU（如Intel core-i7）都使用超线程。例如，一个4核的超线程CPU将向操作系统显示8个CPU，但实际上只有4个物理计算单元。</p><p>在Ubuntu上，你可以用如下获得内核的数量：</p><p><i>$ grep - m1 &#39;cpu core &#39; /proc/cpuinfo.</i></p><p>当我运行如下时：</p><p><i>from pandarallel import pandarallel</i></p><p>我得到：</p><p><i>ModuleNotFoundError: No module named &#39;pyarrow._plasma。</i></p><p>为什么?</p><p>目前，Pyarrow Plasma只在Linux和macOS上工作（不支持Windows）</p><h2><b>如何获取代码</b></h2><a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/2-Ayzmzo8tydDLoKpz1Ezw" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-d1a7a1925a8fd1a1f884a8f891f8f7e0_180x120.jpg" data-image-width="1280" data-image-height="543" class=" wrap external" target="_blank" rel="nofollow noreferrer">干货 | 如何用一行代码在多CPU环境下高效并行Pandas</a><p><i>—End—</i></p><p>量化投资与机器学习微信公众号，是业内垂直于<b>Quant</b>、<b>MFE</b>、<b>CST</b>等专业的<b>主流自媒体</b>。公众号拥有来自<b>公募、私募、券商、银行、海外</b>等众多圈内<b>10W+</b>关注者。每日发布行业前沿研究成果和最新资讯。</p><p></p><p></p>