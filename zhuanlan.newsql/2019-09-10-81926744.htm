<div class="title-image"><img src="https://pic4.zhimg.com/v2-e4100a49788fc94b31574d46f7d52994_b.jpg" alt=""></div><blockquote><b>作者介绍</b>：李坤，PingCAP 互联网架构师，TUG Ambassador，前美团、去哪儿数据库专家。</blockquote><h2>一、概述</h2><p>使用 TiDB Ansible 部署 TiDB 集群，会同时部署一套 Grafana + Prometheus 的监控平台，这套监控用来收集和展示 TiDB 集群各个组件和机器的 metric 信息，这些 metric 信息非常丰富，可以帮助使用者分析 TiDB 集群的状态以及 Trouble shooting。随着使用经验的增多，我们积累了一些监控使用上的技巧，在这里分享给大家。</p><h2>二、监控架构</h2><p>Prometheus 是一个拥有多维度数据模型的、灵活的查询语句的时序数据库。Grafana 是一个开源的 metric 分析及可视化系统。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-616f81b79759b78472302897dc5496d5_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="477" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic2.zhimg.com/v2-616f81b79759b78472302897dc5496d5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-616f81b79759b78472302897dc5496d5_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="477" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic2.zhimg.com/v2-616f81b79759b78472302897dc5496d5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-616f81b79759b78472302897dc5496d5_b.jpg"/><figcaption>图 1 TiDB 监控整体架构</figcaption></figure><p>从 TiDB 2.1.3 版本开始，监控采用 pull 的方式，而之前采用的是 push 的方式，这是一个非常好的调整，它解决了几个问题：</p><ul><li>之前如果 Prometheus 需要迁移，需要重启整个集群，因为组件要调整 push 的目标地址。</li><li>现在可以部署 2 套 Prometheus，防止监控的单点，因为 pull 的 source 端是可以多个。</li><li>去掉了 <code>PushGateWay</code> 这个单点组件。</li></ul><h2>三、监控数据的来源与展示</h2><p>TiDB 的 3 个核心组件（TiDB，TiKV，PD）可以通过 http 接口来获取 metric 数据，这些指标都是从程序代码中统计上传的，端口如下：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-37e946a6aec6e8b28d1c3e282fc9e24b_b.jpg" data-caption="" data-size="normal" data-rawwidth="404" data-rawheight="278" class="content_image" width="404"/></noscript><img src="https://pic4.zhimg.com/v2-37e946a6aec6e8b28d1c3e282fc9e24b_b.jpg" data-caption="" data-size="normal" data-rawwidth="404" data-rawheight="278" class="content_image lazy" width="404" data-actualsrc="https://pic4.zhimg.com/v2-37e946a6aec6e8b28d1c3e282fc9e24b_b.jpg"/></figure><p>用 tidb-server 举例，我们通过 http 接口，看一个 statement QPS 的 metric：</p><div class="highlight"><pre><code class="language-text"># 可以看到实时 qps 的数据，区分不同的 type，value 是 counter 类型的累计值（科学计数法）

curl http://__tidb_ip__:10080/metrics |grep tidb_executor_statement_total
tidb_executor_statement_total{type=&#34;Delete&#34;} 520197
tidb_executor_statement_total{type=&#34;Explain&#34;} 1
tidb_executor_statement_total{type=&#34;Insert&#34;} 7.20799402e+08
tidb_executor_statement_total{type=&#34;Select&#34;} 2.64983586e+08
tidb_executor_statement_total{type=&#34;Set&#34;} 2.399075e+06
tidb_executor_statement_total{type=&#34;Show&#34;} 500531
tidb_executor_statement_total{type=&#34;Use&#34;} 466016</code></pre></div><p>这个数据会在 Prometheus 存储下来，然后在 Grafana 展示，我们在面板上点击右键会出现 <code>Edit</code> 按钮（或直接按 e），如下图所示：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-33f500dfc1a3b3076bf5f0a9ea826110_b.jpg" data-size="normal" data-rawwidth="775" data-rawheight="277" class="origin_image zh-lightbox-thumb" width="775" data-original="https://pic1.zhimg.com/v2-33f500dfc1a3b3076bf5f0a9ea826110_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-33f500dfc1a3b3076bf5f0a9ea826110_b.jpg" data-size="normal" data-rawwidth="775" data-rawheight="277" class="origin_image zh-lightbox-thumb lazy" width="775" data-original="https://pic1.zhimg.com/v2-33f500dfc1a3b3076bf5f0a9ea826110_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-33f500dfc1a3b3076bf5f0a9ea826110_b.jpg"/><figcaption>图 2 metric 面板的编辑入口</figcaption></figure><p>我们可以在 <code>Metric</code> 面板上，看到利用该 metric 的 query 表达式。</p><p>面板上一些细节的含义：</p><ol><li><code>rate[1m]</code>：表示 1 分钟的增长速率，只能用于 counter 类型的数据。</li><li><code>sum</code>：表示 value 求和。</li><li><code>by type</code>：表示将求和后的数据按 metric 的原始值中的 type 进行分组。</li><li><code>Legend format</code>：表示指标名称的格式。</li><li><code>Resolution</code>：默认打点步长是 15s，<code>Resolution</code> 表示是否分解。</li></ol><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-da973f7abee4f9ba71861fbcc13136ba_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="362" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic3.zhimg.com/v2-da973f7abee4f9ba71861fbcc13136ba_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-da973f7abee4f9ba71861fbcc13136ba_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="362" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic3.zhimg.com/v2-da973f7abee4f9ba71861fbcc13136ba_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-da973f7abee4f9ba71861fbcc13136ba_b.jpg"/><figcaption>图 3 metric 面板中的表达式</figcaption></figure><p>Prometheus 支持很多表达式与函数，更多表达式请参考 <a href="https://link.zhihu.com/?target=https%3A//prometheus.io/docs/prometheus/latest/querying" class=" wrap external" target="_blank" rel="nofollow noreferrer">官网页面</a>。</p><h2>四、Grafana 使用技巧</h2><h3>技巧 1：查看所有维度并编辑表达式</h3><p>如上一小节的例子，是按照 type 进行分组，是否还能用其他维度分组？如何能快速得知还有哪些维度呢？这里推荐的技巧是，在 query 的表达式上只用指标名称，不做任何计算，format 也留空，这样就能显示出原始的 metric 数据，比如下图能看到有 3 个维度（<code>instance</code>、<code>job</code>、<code>type</code>）。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-3a653ca29fa35cc58954c6c0df28cb19_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="383" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic2.zhimg.com/v2-3a653ca29fa35cc58954c6c0df28cb19_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-3a653ca29fa35cc58954c6c0df28cb19_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="383" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic2.zhimg.com/v2-3a653ca29fa35cc58954c6c0df28cb19_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-3a653ca29fa35cc58954c6c0df28cb19_b.jpg"/><figcaption>图 4 编辑表达式并查看所有维度</figcaption></figure><p>得到 <code>instance</code> 这个维度后，我们调整表达式，在原有的 type 后面加上 <code>instance</code> 这个维度，调整 <code>legend format</code> 格式增加 <code>{{instance}}</code>，就可以看到每个 tidb-server 上执行的不同类型 SQL 的 QPS 了。如下图：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-8b5983eb4b274ded704ff7c6046def28_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="387" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-8b5983eb4b274ded704ff7c6046def28_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-8b5983eb4b274ded704ff7c6046def28_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="387" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-8b5983eb4b274ded704ff7c6046def28_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-8b5983eb4b274ded704ff7c6046def28_b.jpg"/><figcaption>图 5 给表达式增加一个 instance 维度</figcaption></figure><p><b>技巧 2：调整 Y 轴标尺的计算方式</b></p><p>以 <code>query duration</code> 指标为例，默认的比例尺采用 2 的对数计算，显示上会将差距缩小。为了观察明显的变化，可以将比例尺改为线性，通过下面两张图，可以看到显示上的区别，明显的发现那个时刻有个 SQL 运行较慢。</p><p>当然也不是所有场景都适合用线性，比如观察 1 个月的性能趋势，用线性可能就会有很多噪点，不好观察。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-df520f520f79db64159cb77b2a2221fc_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-df520f520f79db64159cb77b2a2221fc_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-df520f520f79db64159cb77b2a2221fc_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-df520f520f79db64159cb77b2a2221fc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-df520f520f79db64159cb77b2a2221fc_b.jpg"/><figcaption>图 6 标尺默认的比例尺为 2 的对数</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-a6ff65cb955876d2f8c1bc80e0895fc1_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic2.zhimg.com/v2-a6ff65cb955876d2f8c1bc80e0895fc1_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-a6ff65cb955876d2f8c1bc80e0895fc1_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic2.zhimg.com/v2-a6ff65cb955876d2f8c1bc80e0895fc1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-a6ff65cb955876d2f8c1bc80e0895fc1_b.jpg"/><figcaption>图 7 调整标尺的比例尺为线性</figcaption></figure><blockquote>提示：我们可以结合技巧 1，发现这里还有一个 <code>sql_type</code> 的维度，可以立刻分析出是 select 慢还是 update 慢，并且可以分析出是在哪个 instance 上慢。</blockquote><h3>技巧 3：调整 Y 轴基线，放大变化</h3><p>有一种情况：已经用了线性显示，还是看不出变化趋势。比如下图中，我们在扩容后想观察 <code>Store size</code> 的实时变化效果，由于基数较大，微弱的变化观察不到。 这时我们可以将 Y 轴最小值从 <code>0</code> 改为 <code>auto</code>，将上部放大，观察下面两张图的区别，可以观察到数据已开始迁移了。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="404" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="404" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_b.jpg"/><figcaption>图 8 基线默认为 0</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="404" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="404" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-fe201607cff04b0c89b720c961f115f4_b.jpg"/><figcaption>图 9 调整基线为 auto</figcaption></figure><h3>技巧 4：标尺联动</h3><p>在 Setting 面板中，有 <code>Graph Tooltip</code> 的设置，默认使用 <code>Default</code>。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-65fcf7b366bb88bf67e7aebd49abbb5c_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="216" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-65fcf7b366bb88bf67e7aebd49abbb5c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-65fcf7b366bb88bf67e7aebd49abbb5c_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="216" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-65fcf7b366bb88bf67e7aebd49abbb5c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-65fcf7b366bb88bf67e7aebd49abbb5c_b.jpg"/><figcaption>图 10 图形展示工具</figcaption></figure><p>我们调整为 <code>Shared crosshair</code> 和 <code>Shared Tooltip</code> 分别试一下效果： 可以看到标尺可以联动展示了，方便排查问题时，确认 2 个指标的关联性。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-ed30406174113b1df75cff2054f10c8b_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="158" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic4.zhimg.com/v2-ed30406174113b1df75cff2054f10c8b_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-ed30406174113b1df75cff2054f10c8b_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="158" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic4.zhimg.com/v2-ed30406174113b1df75cff2054f10c8b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-ed30406174113b1df75cff2054f10c8b_b.jpg"/><figcaption>图 11 调整图形展示工具为 Shared crosshair</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-c8abcc11f617a38e37039ed2b2819a8c_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="162" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic1.zhimg.com/v2-c8abcc11f617a38e37039ed2b2819a8c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-c8abcc11f617a38e37039ed2b2819a8c_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="162" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic1.zhimg.com/v2-c8abcc11f617a38e37039ed2b2819a8c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-c8abcc11f617a38e37039ed2b2819a8c_b.jpg"/><figcaption>图 12 调整图形展示工具为 Shared Tooltip</figcaption></figure><h3>技巧 5：调整过滤项</h3><p>PD 的 Dashboard，只展示当前 leader 的 metric 信息，有时候会想看一下历史上 pd-leader 当时的状况，但是 instance 下拉列表中不存在这个成员了，我们也可以手动输入 <code>ip:2379</code> 来看到当时的数据。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-5d8cb9782a722bd11359e2628f93c8b6_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="243" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic3.zhimg.com/v2-5d8cb9782a722bd11359e2628f93c8b6_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-5d8cb9782a722bd11359e2628f93c8b6_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="243" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic3.zhimg.com/v2-5d8cb9782a722bd11359e2628f93c8b6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-5d8cb9782a722bd11359e2628f93c8b6_b.jpg"/><figcaption>图 13 手动输入并查看 metric</figcaption></figure><h3>技巧 6：巧用 <code>Avg</code> 函数</h3><p>通常默认图例中只有 <code>Max</code> 和 <code>Current</code>，但有时指标波动较大时，我们可以增加 <code>Avg</code> 等其他汇总函数的图例，可以看一段时间的整体趋势。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg"/><figcaption>图 14 增加 Avg 等汇总函数</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg"/><figcaption>图 15 增加 Avg 函数</figcaption></figure><h3>技巧 7：使用 Prometheus 的 API 接口获得表达式的结果</h3><p>Grafana 通过 Prometheus 的接口获取数据，我们也可以用该接口获取数据，这个用法可以扩散出很多功能：</p><ul><li>自动化平台获取集群规模、状态等信息。</li><li>对表达式稍加改动给报表提供数据，如统计每天的 QPS 总量、每天的 QPS 峰值、每天响应时间的汇总。</li><li>将重要的指标进行定期健康巡检。</li></ul><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb" width="939" data-original="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg" data-size="normal" data-rawwidth="939" data-rawheight="400" class="origin_image zh-lightbox-thumb lazy" width="939" data-original="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-539a6f80ef6aa6930762a2a36d9df3d5_b.jpg"/><figcaption>图 16 Prometheus 的 API 接口</figcaption></figure><div class="highlight"><pre><code class="language-text">curl -u user:pass &#39;http://__grafana_ip__:3000/api/datasources/proxy/1/api/v1/query_range?query=sum(tikv_engine_size_bytes%7Binstancexxxxxxxxx20181%22%7D)%20by%20(instance)&amp;start=1565879269&amp;end=1565882869&amp;step=30&#39; |python -m json.tool
{
    &#34;data&#34;: {
        &#34;result&#34;: [
            {
                &#34;metric&#34;: {
                    &#34;instance&#34;: &#34;xxxxxxxxxx:20181&#34;
                },
                &#34;values&#34;: [
                    [
                        1565879269,
                        &#34;1006046235280&#34;
                    ],
                    [
                        1565879299,
                        &#34;1006057877794&#34;
                    ],
                    [
                        1565879329,
                        &#34;1006021550039&#34;
                    ],
                    [
                        1565879359,
                        &#34;1006021550039&#34;
                    ],
                    [
                        1565882869,
                        &#34;1006132630123&#34;
                    ]
                ]
            }
        ],
        &#34;resultType&#34;: &#34;matrix&#34;
    },
    &#34;status&#34;: &#34;success&#34;
}</code></pre></div><h2>五、总结</h2><p>Grafana + Prometheus 是一套非常强大的组合，用好他们可以为我们的分析节省很多时间，提高效率，更重要的是能增加发现问题的可能性。在运维 TiDB 集群时，尤其数据量大的时候，这套工具能派上大用场。这里抛砖引玉，也希望大家也能提供一些技巧，一起共同学习。</p><p><b>原文阅读：</b></p><a href="https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/use-grafana-to-monitor-and-analyze-tidb-metrics/" data-draft-node="block" data-draft-type="link-card" data-image="https://pic2.zhimg.com/v2-60ab5bd867c2434d70c957a02a2169e1_ipico.jpg" data-image-width="1200" data-image-height="1200" class=" wrap external" target="_blank" rel="nofollow noreferrer">如何高效利用 Grafana 监控分析 TiDB 指标 | PingCAP</a><p></p>