<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description>编程、读书、学习、境界提升</description>
<language>zh-cn</language>
<lastBuildDate>Sat, 27 Apr 2019 19:05:19 +0800</lastBuildDate>
<item>
<title>Sonic：用Rust编写的Elasticsearch的极简替代品</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-27-63963140.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/63963140&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-babf6b4f71148ae9c0cf2b39d8c78f9d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;本文是对Sonic的创建者Valerian Saliou的采访，也可以帮助我们对Sonic有一个比较全面的了解。&lt;br/&gt;原文 ： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//notamonadtutorial.com/sonic-a-minimalist-alternative-to-elasticsearch-written-in-rust-7f3612ecb47b&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;notamonadtutorial.com/s&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;onic-a-minimalist-alternative-to-elasticsearch-written-in-rust-7f3612ecb47b&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;br/&gt;Sonic源码： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/valeriansaliou/sonic&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/valeriansali&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ou/sonic&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;br/&gt;本文只是重点摘要&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;什么是Sonic？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Sonic是一个开源搜索索引服务器，用Rust编写。它构建简单，高性能且轻量级。 Sonic接受用户查询，并返回标识符。这些标识符指的是关系数据库中的实际文档（例如，在我们的案例中：消息，文章，CRM联系人等）。 Sonic不存储文档，这使得整个系统在存储方面简单而有效，因为从Sonic获取搜索结果的应用程序必须从另一个数据库（例如，MongoDB，MySQL等）提取实际结果数据，因为搜索结果返回的是ID）。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;为什么要创造一个除Solr、ElasticSearch之外的新选择？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;我（sonic作者）经营一家名为Crisp的公司，为100,000名用户提供客户支持软件。用户想要搜索他们的消息，我们的一些用户有很多消息。事实证明，使用传统的开源搜索索引软件（例如Elasticsearch等）对我们的免费增值商业模型来说太贵了，因为这些系统很重，因此需要巨大的服务器CPU和RAM。&lt;br/&gt;&lt;br/&gt;作为开发人员和系统管理员，我非常喜欢Redis的简单性和速度。在计算机软件中，简单性通常提供速度，这在规模上是一件好事。我将Sonic打造成“可搜索的Redis”：简单的功能，简单的网络协议。&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;你为什么决定使用Rust？使用Rust创建Sonic是一种什么样的体验？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Rust使整个开发体验更加顺畅。语言的约束（例如，借用检查器，没有NULL值的事实）保证在生产中运行项目时不会遇到某些类型的错误（例如，NULL指针异常和分段错误，这些是在C，C ++或Go等编程语言中不可避免; 是人就会犯错误）。&lt;br/&gt;&lt;br/&gt;我过去已经构建了其他Rust项目来大规模支持Crisp基础架构，例如Bloom，Vigil和Constellation（它们也已经在GitHub上开源）。 Rust对我来说不是什么新鲜事;总的来说，我喜欢使用这种语言。我2年前的第一个Rust项目有点粗糙，因为你必须花很多时间借助借助检查器“无缘无故”阻挡你。一旦你了解它的工作机制，你就会变得更有效率，并且Rust借用检查器错误也会逐渐变得更加罕见。&lt;br/&gt;&lt;br/&gt;总的来说，我可以说在Rust中编写Sonic的经历非常棒。我爱Rust。它也使我成为一个更好的程序员。（同感）&lt;br/&gt;&lt;br/&gt;&lt;b&gt;什么是Sonic Channel？这个功能的灵感是来自Redis吗？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Sonic Channel用于通过网络与Sonic通信的协议。由于当今大多数应用程序基础结构都通过网络分布在多台计算机上，因此需要一种基于TCP的协议来将新文本数据推送到索引并查询索引。出于性能原因，我不想像Elasticsearch那样编写基于HTTP的协议。&lt;br/&gt;&lt;br/&gt;在发布Sonic之后，我从社区中获得了很多贡献，为最流行的编程语言构建Sonic Channel库（集成）：Go，Python，Ruby，Java，PHP和JavaScript（仅在NodeJS上运行）。这使开发人员能够以他们喜欢的编程语言从他们的应用程序中推送数据并搜索Sonic中的项目。它使整个Sonic集成过程更容易调用REST API，更简洁。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;您使用哪些数据结构来支持创建索引和自动完成？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;索引存储在LSM（Log-Structured Merge-tree）中，底层使用了RocksDB。为了自动完成，Sonic使用FST（有限状态传感器），BurntSushi在他的博客上的一篇文章中详细解释了这一点。&lt;br/&gt;&lt;br/&gt;FST存储在磁盘上，用于每个Sonic（集合，存储桶）对，并且是内存映射的，这意味着实际的FST数据不会加载到RAM中，但访问速度仍然很快。我正在使用的Rust FST实现的缺点是任何构建的FST都是不可变的。如果Sonic存储桶中出现一个新的词，则需要将其推送到FST，因此需要重新构建新的FST。 Sonic定期为变异的FST运行合并任务，并在磁盘上添加或删除它们的词。&lt;br/&gt;&lt;br/&gt;FST结构不仅用于自动完成，还用于拼写错误校正（例如，它能够将“Englich”校正为“English”）。它使用Levenshtein自动机来实现这一点（给定最大Levenshtein距离相对于单词的长度;即，单词越长，允许的拼写错误越多）。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;你为什么选择RocksDB作为存储？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;RocksDB（来自Facebook）建立在LevelDB（来自Google）上。&lt;br/&gt;&lt;br/&gt;它非常擅长在巨大的密钥空间保持性能稳定，并通过压缩旧数据来最小化磁盘使用（它具有分层数据存储架构，旧数据处于较低级别，可以通过较高但较慢的比率进行压缩或压缩）。&lt;br/&gt;&lt;br/&gt;RocksDB改进了LevelDB，并且非常易于配置。这意味着Sonic用户可以通过Sonic配置调整RocksDB的内部结构，以便在服务器硬件的情况下充分利用其设置。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sonic现在有什么文档？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;我写了一篇博文，总结了Sonic的工作原理。后续还打算写大量的文档来解释Sonic的内部工作原理，这个可以在GitHub issues上跟踪。&lt;br/&gt;&lt;br/&gt;总的来说，阅读Sonic代码应该有助于理解它的运作方式。我花了很多时间注释我的代码并使其尽可能清晰。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;为什么要用jemalloc ？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;jemalloc是一个最初为FreeBSD编写的内存分配器。它专为现代CPU架构而设计，在管理多核架构上的内存方面要好得多。但它在单核架构上没有任何好处，但在单CPU的情况下已被证明与旧的分配器一样好。所以在最坏的情况下，它与传统的分配器一样好，最多可以在多核CPU上提供更好的性能并减少内存碎片。&lt;br/&gt;&lt;br/&gt;Rust先前使用jemalloc作为其默认分配器，并且最近由于性能以外的原因而移至系统分配器。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;你之前写过数据库吗？如果别人想构建Sonic这样的工具，你有什么建议？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;我已经构建了大量的服务器软件，但我从未编写过数据库。数据库可能很难，因为它们涉及大量的锁定策略以防止竞争条件，因此数据库开发人员必须一丝不苟。锁是很难正确的;生产中的锁更难：编写死锁的代码很容易，同时找到发生死锁的原因是痛苦的。&lt;br/&gt;&lt;br/&gt;自己创造新事物的最佳方式是了解其他人过去是如何做到的。所以我建议大家可以先看看Snoic的源码实现。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Sonic现在状态如何？还有什么想改进的？&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;是的，看起来Sonic到目前为止工作得很好。搜索很快，用户很高兴。&lt;br/&gt;&lt;br/&gt;我们的Sonic实例索引了5亿个对象（消息，文章，联系人）。压缩索引为20GB，负载下的CPU使用率为1 Intel Xeon核心的10％。 Sonic在最差的情况下使用~200MB的RAM用于如此大的索引，而在冷启动时使用20MB的RAM。搜索延迟低于1毫秒。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-27-63963140</guid>
<pubDate>Sat, 27 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「RustConAsia 2019」如何高效学习Rust</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-22-63232238.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/63232238&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4e27c37a3f7621e2a7641ce6880aea1e_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;RustConAsia 2019大会昨天刚刚圆满闭幕，趁热打铁分享一下我在首届RustCon Asia 2019大会上Topic的文稿，后续整个大会的录播视频也会逐步放出。&lt;/blockquote&gt;&lt;p&gt;现场是一个二十分钟左右的演讲，但是文稿我稍微比现场分享丰富了点内容，做了一点补充。&lt;/p&gt;&lt;p&gt;以下是正文。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;我叫张汉东，你也可以叫我Alex。很高兴能和大家齐聚一堂交流Rust，也很感谢大会组织者秘猿和PingCAP，能为我们提供这样的平台，让我感觉到一个更加真实的Rust社区。&lt;/p&gt;&lt;p&gt;我今天给大家带来的主题是《如何高效学习Rust》。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a5abdf772372f0064c3583c7de309ac5_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-a5abdf772372f0064c3583c7de309ac5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a5abdf772372f0064c3583c7de309ac5_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-a5abdf772372f0064c3583c7de309ac5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a5abdf772372f0064c3583c7de309ac5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;1. 首先我会做一个自我介绍&lt;/p&gt;&lt;p&gt;2. 然后会大家分享一下我对「Rust学习曲线高」的一些思考&lt;/p&gt;&lt;p&gt;3. 接下来给大家带来一个高效学习模型&lt;/p&gt;&lt;p&gt;4. 最后，围绕这个高效学习模型带来十条关于Rust学习的建议给大家做参考&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-db0a7b77ec102de91bdbd6292ec63076_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-db0a7b77ec102de91bdbd6292ec63076_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-db0a7b77ec102de91bdbd6292ec63076_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-db0a7b77ec102de91bdbd6292ec63076_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-db0a7b77ec102de91bdbd6292ec63076_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-16ce8b5fe552f89f51120dafc92b85f3_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-16ce8b5fe552f89f51120dafc92b85f3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-16ce8b5fe552f89f51120dafc92b85f3_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-16ce8b5fe552f89f51120dafc92b85f3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-16ce8b5fe552f89f51120dafc92b85f3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我曾经做了很多年的Ruby工程师，后来有缘翻译了《Ruby原理剖析》，也是因为这本书，开启了我对底层开发的兴趣。也恰好，此时Rust 1.0刚好发布，所以我就开始学习Rust。&lt;/p&gt;&lt;p&gt;通过对Rust的深入，我越来越觉得，这是一门值得所有人都去学习的语言。所以我写了《Rust编程之道》这本书，想要让更多的人更容易地去学习Rust。并且我运营了Rust日报，每天分享十条左右的业内动态，目的有两个，第一个是积累一些学习资料，Rust日报里已经积累了很多博客、开源项目。 另一个目的呢，就是通过这个动态，让大家感受到Rust的生机勃发，让更多的人可以了解到这个社区的发展。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f1c9b5364999b46a13d020effe630254_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-f1c9b5364999b46a13d020effe630254_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f1c9b5364999b46a13d020effe630254_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-f1c9b5364999b46a13d020effe630254_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-f1c9b5364999b46a13d020effe630254_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我平时没事也喜欢做一些Rust周边，比如说这个Rust勋章和棒球帽。大家收到的小礼物，除了我的书，其实勋章也是我参与制作的（曾经社区内的一次周边定制活动，这次大会举办方PingCAP和秘猿也参与了周边定制活动，参与他们开源项目的贡献者们也会得到胸章噢）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6fc0bdcd17e296f4e4b0f39f9333a13a_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-6fc0bdcd17e296f4e4b0f39f9333a13a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6fc0bdcd17e296f4e4b0f39f9333a13a_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-6fc0bdcd17e296f4e4b0f39f9333a13a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6fc0bdcd17e296f4e4b0f39f9333a13a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;除了写书呢，我的日常工作也包括做企业培训，去年分别为两家公司做过Rust的培训和开发，去帮助他们引入了Rust。并且创办了辅导式付费自学社群《混沌学社》，帮助想要自学编程的人达成目标。也在线下做一个少年创客俱乐部的创业项目。平时有空，也会参与开源项目的贡献，但为什么这是日常工作呢？说的我好像有工资似的，这是因为Rust的开源文化，对我影响比较大，所以我也乐意去花点时间做点贡献。 &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a3a26679365c99b0f3c41d3335f9f9ac_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-a3a26679365c99b0f3c41d3335f9f9ac_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a3a26679365c99b0f3c41d3335f9f9ac_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-a3a26679365c99b0f3c41d3335f9f9ac_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a3a26679365c99b0f3c41d3335f9f9ac_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;通过Rust这门语言，我仿佛看到互联网未来十年即将由它而引起的变革。这种感觉推动着我，所以我才如此积极地参与到Rust的推广活动中。&lt;/p&gt;&lt;p&gt;但是Rust自诞生以来，有一个标签就一直围绕着它：「Rust学习曲线高」。这句话似乎达成了一种共识，就差放到区块链上面了。这其实也为Rust语言的推广造成了一种负面的影响。因为，大多数的人还是喜欢更轻松更易于上手的语言。&lt;/p&gt;&lt;p&gt;所以，借这次大会，我来分享一下对「Rust学习曲线高」的一些正向的思考，同时也分享一些学习经验。希望可以帮助到初学者。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2a12234ccee54c448089017e449faec2_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-2a12234ccee54c448089017e449faec2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2a12234ccee54c448089017e449faec2_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-2a12234ccee54c448089017e449faec2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-2a12234ccee54c448089017e449faec2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;你以为的Rust学习曲线是这样的吗？你认为想要把Rust学会，成为专家，只需要往里面投入时间就可以了。真的不是「从入门到放弃」？「从入门到再次入门」？&lt;/p&gt;&lt;p&gt;拿我自己来说，Rust的学习过程，给我留下了很多至暗时刻。我在2016年写过一篇文章，《如何学习一门新语言》，其中提到了我的学习过程：从前期的懵懂，到后期的重新调整学习策略。我实际上是从入门到再次入门。&lt;/p&gt;&lt;p&gt;从来没有哪门语言让我这么郁闷过，所以我回头好好思考了这个问题，到底为什么会这样？经过我的思考呢，我得出这样一个结论。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bd0643e61ab7b884e7b1906a0263d17e_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-bd0643e61ab7b884e7b1906a0263d17e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bd0643e61ab7b884e7b1906a0263d17e_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-bd0643e61ab7b884e7b1906a0263d17e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-bd0643e61ab7b884e7b1906a0263d17e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Rust呢，它是集很多语言的优点于自身的现代化的语言。它打破了传统语言多年积累下来的「用户习惯」：&lt;/p&gt;&lt;p&gt;1. 包管理器。Cargo说它是个包管理器，它还可以做其他工作，完全是一个工作流引擎。&lt;/p&gt;&lt;p&gt;2. 解决内存安全，引入了所有权机制。所有权几乎是绝大部分新人的入门障碍之一。为什么呢？因为我们过去这么多年，几乎很少有人去关注内存安全。什么是内存安全？什么是未定义行为？所有权是解决问题的手段，但是如果你连问题是如何产生的都不知道，又怎么可能理解解决问题的手段？&lt;/p&gt;&lt;p&gt;3. 现代化类型系统。Rust汲取了现代计算机科学的成果——类型系统。并且，在设计之初也做了「去专业化」处理，把类型系统里「更加学术」的一面替换为语义性更强，更实用的一面。但是，这依然对于大多数人来说是比较陌生的。&lt;/p&gt;&lt;p&gt;4. 零成本抽象。经常用高级语言的人，对「抽象」这个概念倒是比较了解，但是「零成本」就难理解了。经常和底层打交道的人，对于「零成本」比较了解，但是对于「抽象」可能认识的不太深。Rust语言，兼顾了上层的抽象和底层的性能。&lt;/p&gt;&lt;p&gt;5. 史上第一严编译器。就像nick大佬（nrc）在大会开场分享中讲过的那样，Rust语言在设计之初就考虑语言的人体工程学问题。那么个这个人体工程学是在哪表现呢？ 就是语义。但Rust又必须遵循另外一个原则，就是内存安全。所以这就要求开发者和编译器共用同一个心智模型。从来没有哪门编程语言会这样要求开发者，都一把梭习惯了。&lt;/p&gt;&lt;p&gt;所以，&lt;/p&gt;&lt;p&gt;得到这个结论以后，我又进一步反思了自己的学习习惯，才想明白Rust的学习曲线背后的真正意义。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-79d212d9e0cf9c1a1904dae5bc197dba_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-79d212d9e0cf9c1a1904dae5bc197dba_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-79d212d9e0cf9c1a1904dae5bc197dba_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-79d212d9e0cf9c1a1904dae5bc197dba_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-79d212d9e0cf9c1a1904dae5bc197dba_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;欢迎来到真实的世界。&lt;/p&gt;&lt;p&gt;也许有人看出来了，这张图是「达克效应」，也被叫做邓宁-克鲁格效应，的图示。&lt;/p&gt;&lt;p&gt;「达克效应」一般是指人在自己不擅长的领域中往往都会得出错误的结论，但却无法正确认识自身的不足，属于一种认知偏差的现象。这种效应很常见的一种表现就是：做不好事情就抱怨工具有坑。&lt;/p&gt;&lt;p&gt;横座标代表知识和技能的等级，从左到右代表新手到专家。纵座标是自信心，自下而上代表自信心从低到高。&lt;/p&gt;&lt;p&gt;在最初的阶段，也就是红色陡峭曲线的那一个上升区域，自信心是爆棚的。&lt;/p&gt;&lt;p&gt;但是有很多人，落入了「盲人摸象」和「妄自菲薄」的两个陷阱中。按我们以往的学习习惯，看看文档，了解下语法，就可以上手写代码了。但是却频频遭遇编译器的拦截。有些人就在和编译器的搏斗之中，过早地陷入了语言的各种细节中。这就是盲人摸象。另外一些人则认为Rust可能是太难了，自己学不会，而选择了放弃。这就是妄自菲薄。&lt;/p&gt;&lt;p&gt;这就是因为前面所说的，知识断层引起的问题。我们以为Rust和传统语言一样，所以依旧延续了之前的学习习惯。但实际上，我们自己「并不知道Rust语言已经产生了前面所说的知识断层」，然而更可怕的是什么呢？ 我们并不知道自己不知道这个事。 所以在直觉上，就会对Rust编译器的行为感到困惑？你根本不会想到是你自己的问题。&lt;/p&gt;&lt;p&gt;然后呢，就到了第二个阶段，绝望之谷。 在这个阶段呢，你会逐渐地意识到自己的知识短板。你会发现自己，原来什么都不懂什么都不会。&lt;/p&gt;&lt;p&gt;有的人，在这个阶段，就会放弃。因为他有挫败感。&lt;/p&gt;&lt;p&gt;而有的人呢，虽然也会感到挫败，但他并没有放弃，而是重新开始学习填补自己的知识短板。&lt;/p&gt;&lt;p&gt;只有第二种人，才有可能进入第三个阶段，开始稳步提升。分清「哪些我已经知道了，哪些还不懂」，查漏补缺，逐渐理解Rust的概念。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e65629040207b0f15bc3fce306bcd9c9_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-e65629040207b0f15bc3fce306bcd9c9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e65629040207b0f15bc3fce306bcd9c9_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-e65629040207b0f15bc3fce306bcd9c9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-e65629040207b0f15bc3fce306bcd9c9_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在第三个阶段其实也存在一个误区，那就是感觉Rust的概念实在是太多了，有点「乱花渐欲迷人眼」的感觉。但实际上，你可以退一步。「浅草才能没马蹄」，低下头，去寻找这些概念之间的共性和关联，把握语言的一致性。突破了这一点，后面的学习才能逐渐地走向平稳。&lt;/p&gt;&lt;p&gt;所以，感到Rust学习曲线高，这不能怪Rust，而应该反思自己，进行自我检测，看看自己的知识结构哪里出现了缺陷，学习方法哪里出现了问题。抓住这个机会，就可以进一步完善自己，让自己成长。&lt;/p&gt;&lt;p&gt;这个世界上如果想做好什么事情，都并不那么简单，包括编程。我们之前一把梭习惯了，但我们并没有意识到，那种方式其实是存在问题的。直到出现了Rust语言，它只不过是想把你拉回到真实的世界，让我们认真地去面对、思考和处理现实世界中的问题，而不是草率地一把梭。&lt;/p&gt;&lt;p&gt;如果说，最初我是因为Rust的安全、高性能、高级的抽象表达能力而喜欢Rust。那么随着我学习的深入，我是因为Rust让我看到了另一个更好的世界，另一个更好的自我，而更喜欢Rust。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8422e21edec55fb7b71c2f2fd12480f7_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-8422e21edec55fb7b71c2f2fd12480f7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8422e21edec55fb7b71c2f2fd12480f7_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-8422e21edec55fb7b71c2f2fd12480f7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8422e21edec55fb7b71c2f2fd12480f7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;那么如何才能更高效地学习Rust呢？简单来说，如果学习过程能少走一点弯路，就是高效。我站在过来人的角度，给大家分享一些经验。&lt;/p&gt;&lt;p&gt;首先应该明白一点，高效并不等于快速学习。 「21天精通Rust」，那仅限于大神，不能作为普适的学习方法推广。&lt;/p&gt;&lt;p&gt;当我们谈到「高效」的时候，实际上是想去做一种「优化」。学习是大脑高度参与的一种心智活动。那么高效学习，就是去优化你的学习。&lt;/p&gt;&lt;p&gt;我们优化程序优化网络是如何优化呢？其实基本原则很简单。分清不能改变的和可以改变的，然后去想尽一切可能去改变我们可以改变的。对于学习的优化也是一样的思路。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-575cde2f7c28650869663d5ec200336a_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-575cde2f7c28650869663d5ec200336a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-575cde2f7c28650869663d5ec200336a_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-575cde2f7c28650869663d5ec200336a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-575cde2f7c28650869663d5ec200336a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;认知科学把大脑处理信息的过程分成短时记忆和长时记忆两步。&lt;/p&gt;&lt;p&gt;第一阶段是输入，大脑通过各种感官器官识别各种信息，在大脑中形成短时记忆。 这个阶段的高效，取决于你单位时间内识别信息的数量。&lt;/p&gt;&lt;p&gt;第二阶段是输出，通过各种输出手段，比如复述、分类、记录、重组、练习等等，将获取的信息进行二次加工，最终形成长时记忆。这个长时记忆，实际上就是知识体系结构，或者是知识网络。只有知识形成了相互关联的网络，才是牢固的。所以，这个过程，会有一定的信息损耗。如果你能把短时记忆的内容全部关联到你当前的知识网络中，那么损耗率就少。如果只能关联部分，那么剩下的就会随着时间的推移而被遗忘。&lt;/p&gt;&lt;p&gt;根据这个大脑的信息处理模型，可以得出一个高效学习的模型：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-dea8ff1ffd5a5f46493e9336fdbea90b_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-dea8ff1ffd5a5f46493e9336fdbea90b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-dea8ff1ffd5a5f46493e9336fdbea90b_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-dea8ff1ffd5a5f46493e9336fdbea90b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-dea8ff1ffd5a5f46493e9336fdbea90b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;高效 = （信息量 * 损耗系数）/单位时间&lt;/b&gt;&lt;/p&gt;&lt;p&gt;所以，在信息量一定的情况下，单位时间越短，越高效；在单位时间一定的情况下，信息量越多越高效。但是信息量还需要考虑信息的损耗，如果学了，但是没有理解，就等于没学。&lt;/p&gt;&lt;p&gt;要提升学习的效率，就需要在单位时间、信息量和损耗系数三个因素上寻求方案。&lt;/p&gt;&lt;p&gt;人一天24个小时，除了工作、休息等日常时间，余下的学习时间也不太多。但每天至少应该能挤出连续的一个小时来学习应该不成问题。成年人的专注力是可以持续一个小时的。但其实很多人对时间是没有概念的。这里推荐番茄工作法，就是把24小时，以半小时为单位，分隔为连续的时间块。每个时间块，被称为一个番茄钟。在一个番茄钟内，又限定其中25分钟专注学习或工作的时间，另外5分钟用来休息。利用番茄钟，可以把每天1小时的学习时间，分成两个学习单元。 其中一个单元用来输入，另外一个单元用来输出。&lt;/p&gt;&lt;p&gt;输入和输出，构成一个完整的学习单元，减少信息的损耗。如果只有输入，没有输出，那么你的信息损耗率就会成倍增加。在规划好你的学习时间之后，就要想办法增加你的信息量带宽。&lt;/p&gt;&lt;p&gt;经过我多年的实践，我发现信息量和下面的因素是相关的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;态度。 不能急于求成。一旦急于求成，就容易给自己安排过多的学习内容，造成信息负载，从而阻塞你的大脑，结果反而啥也没学。&lt;/li&gt;&lt;li&gt; 精力管理。学习是需要保持主动性的。而主动性的学习，则需要身体能保持一定的活力。这就需要你自己能平衡生活、工作、学习的节奏。&lt;/li&gt;&lt;li&gt;学习目标和方法。这是最关键的。只有符合人类认知规律的学习，才是最科学最高效的。基于前面所说大脑的信息处理模型，知识只有形成一张相互关联的网络，才能长期记忆。利用这张知识网络，学习就可以像蜘蛛捕食一样，一旦有未知的知识点落入网中，你就可以马上知道它所处在知识结构中的哪一个位置，然后再慢慢地消化它。如果发现未知的知识点不在你的知识网络范围，那么你就可以向那个方向织网，扩展你的知识网络。&lt;/li&gt;&lt;/ol&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bc3785c8bf46920b6697a0d814a4a00e_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-bc3785c8bf46920b6697a0d814a4a00e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bc3785c8bf46920b6697a0d814a4a00e_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-bc3785c8bf46920b6697a0d814a4a00e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-bc3785c8bf46920b6697a0d814a4a00e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;那么，接下来就围绕这个高效学习模型给大家十条建议。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b8f57c3fff0345dec83f3da5a95e0db9_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-b8f57c3fff0345dec83f3da5a95e0db9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b8f57c3fff0345dec83f3da5a95e0db9_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-b8f57c3fff0345dec83f3da5a95e0db9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-b8f57c3fff0345dec83f3da5a95e0db9_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第一条，从整体出发，不要让自己陷入到细节中。&lt;/p&gt;&lt;p&gt;学习，需要掌控感。先从外围，从整体，慢慢了解Rust。Rust语言有哪些特性？Rust是设计哲学是什么？Rust的社区和生态如何？ 可以对Rust有一个高屋建瓴的认知。就像画画一样，先画好轮廓，再画细节，这有利于你建立知识网络，可以增加掌控感，并且可以促使信息进入到长时记忆，有效降低信息的损耗。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d65fd3d7fd36af66b0b6e76444e3d0cd_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-d65fd3d7fd36af66b0b6e76444e3d0cd_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d65fd3d7fd36af66b0b6e76444e3d0cd_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-d65fd3d7fd36af66b0b6e76444e3d0cd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d65fd3d7fd36af66b0b6e76444e3d0cd_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第二条，抛弃一次性学会的念头，分层次递进式学习。&lt;/p&gt;&lt;p&gt;不要抱着一次性学会Rust的想法去学习。Rust语言中蕴含的知识体系，本身就是有层次的。我在《Rust编程之道》第一章中给出了语言架构。可以按这个层次来学习，帮助自己建立复合的立体的知识体系。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-dd3748753a32cacd9823ade48cb19c97_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-dd3748753a32cacd9823ade48cb19c97_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-dd3748753a32cacd9823ade48cb19c97_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-dd3748753a32cacd9823ade48cb19c97_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-dd3748753a32cacd9823ade48cb19c97_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第三条，想尽一切办法已知的知识建立关联。&lt;/p&gt;&lt;p&gt;这一条也是我写作《Rust编程之道》的思路之一。有读者曾经和我聊天，他说，第一次看你书的样章，感觉目录比较平庸，都是老调重弹的感觉。&lt;/p&gt;&lt;p&gt;但其实，我要的就是这种效果。&lt;/p&gt;&lt;p&gt;这个世界上，没有任何一件事物是凭空出现的。你不可能盖一座空中楼阁。&lt;/p&gt;&lt;p&gt;知识也是一样的。别看Rust中很多新的概念。但其实每一个概念，都可以和旧的知识建立关联。&lt;/p&gt;&lt;p&gt;新语言的出现，本质原因是为了解决某个问题。比如Rust中所有权的概念。所有权是解决问题的手段，要想理解它，就必须明白问题所在。也就是说，明白什么是安全。想明白什么是安全，就得搞清楚，这个世界为什么不安全。安全和不安全是一体两面。明白为什么不安全，自然就能理解Rust解决不安全问题的思路，也就自然理解了所有权的概念。&lt;/p&gt;&lt;p&gt;顺着知识的脉络去寻找，和你已知的知识产生联系。这样才有助于构建知识网络。如果不能建立联系，那么你的知识结构肯定存在漏洞，那么你就继续顺着知识的脉络去查漏补缺。&lt;/p&gt;&lt;p&gt;我书的内容组织，也基本遵循这个原则，就是为了帮助大家把新知识和已知的知识建立关联，从而形成知识网络。这也是我在宣传书的时候说，可以降低Rust学习曲线的原因之一。&lt;/p&gt;&lt;p&gt;当然，你如果看其他的资料，也可以遵循这个学习原则。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1221ccd02d3815c2449eb63349d3d28a_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-1221ccd02d3815c2449eb63349d3d28a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1221ccd02d3815c2449eb63349d3d28a_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-1221ccd02d3815c2449eb63349d3d28a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1221ccd02d3815c2449eb63349d3d28a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第四条，学会阅读源码，从源码中学习。&lt;/p&gt;&lt;p&gt;首先，Rust标准库源码是值得一读。你不必通篇全读，只需要在学习过程中，看到哪读到哪。&lt;/p&gt;&lt;p&gt;比如你学习String字符串的时候，看看源码，你就会发现，噢，原来String就是一个u8类型的动态数组。那么它的一些方法，是不是和动态数组的方法类似呢？这一下就能找到共性。但是你又看到u8，是一个字节序列，再结合文档说明，你就可以很容易发现，字符串是一个utf-8编码的字节序列。&lt;/p&gt;&lt;p&gt;然后就是阅读第三方库了。可以找一些常用的库来阅读，学习最佳实践。也可以从Rust日报中查找你感兴趣的擅长领域的库来阅读。&lt;/p&gt;&lt;p&gt;其实阅读源码，并不要求你完全学会了Rust才行。在你掌握了基本的语法，即可阅读源码。阅读的过程中，编译器并不会出来干扰你。你只需要阅读源码的整体组织结构，了解Rust代码的组织方式、编码风格、设计风格、最佳实践即可。阅读源码也是一种知识的应用。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-860226dd93643ba1406dc2d90b3e7f66_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-860226dd93643ba1406dc2d90b3e7f66_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-860226dd93643ba1406dc2d90b3e7f66_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic3.zhimg.com/v2-860226dd93643ba1406dc2d90b3e7f66_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-860226dd93643ba1406dc2d90b3e7f66_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第五条。通过主题式阅读来补基础知识。&lt;/p&gt;&lt;p&gt;举个例子，比如你不懂得Rust异步开发中的futures、async、await等概念。那么你不妨去翻一翻javascript、python、C#等语言中的相关概念。概念都是相同的，不同的是具体的实现。先把概念理清了，再回头看Rust中的实现。你就会发现，Rust之所以迟迟没有登陆异步功能，就是因为Rust语言是一门高度要求一致性、内存安全、性能的语言。所以在异步语法设计上，要做诸多的考量。所以才迟迟未稳定。但你知道，这个功能是值得等待的，好事多磨。&lt;/p&gt;&lt;p&gt;这就是一种主题式阅读补基础知识的方法。同样的方法，还适合去理解并发安全、Unsafe Rust等等。&lt;/p&gt;&lt;p&gt;有助于你拎清概念和实现，建立更容易迁移的知识结构。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f7efda919bca299c234078eacdb02f28_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-f7efda919bca299c234078eacdb02f28_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f7efda919bca299c234078eacdb02f28_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-f7efda919bca299c234078eacdb02f28_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-f7efda919bca299c234078eacdb02f28_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第六条。时刻把握Rust的设计哲学。&lt;/p&gt;&lt;p&gt;在学习过程中，时刻把握Rust的设计哲学：安全、实用、性能。我们说，要尽力和已知的知识相关联。但也要注意以Rust的特性为出发点。否则，已知的知识则会成为我们学习的绊脚石。&lt;/p&gt;&lt;p&gt;Rust吸取了很多语言的特性。你可以在Rust中看到你熟悉语言的影子。但是你要站在Rust的角度去寻找共性，建立联系，而不是站在你熟悉语言的角度上去看Rust。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4522897f0ddb58107a74f84e97848c3b_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-4522897f0ddb58107a74f84e97848c3b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4522897f0ddb58107a74f84e97848c3b_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-4522897f0ddb58107a74f84e97848c3b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4522897f0ddb58107a74f84e97848c3b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第七条。有意识地构建属于自己的Rust心智模型。&lt;/p&gt;&lt;p&gt;什么是心智模型？&lt;/p&gt;&lt;p&gt;一名乒乓球运动员，可以根据乒乓球的弹射速度、旋转方向等外界因素，迅速判断出各种可能性，从而选择最佳的回击策略。&lt;/p&gt;&lt;p&gt;一名赛车手，根据不断变化的路况，快速地进行各种操作。这依赖于他大脑中的心智模型，来达成人车合一的状态。&lt;/p&gt;&lt;p&gt;心智模型，就是人脑，或者说，是你思想和意识在客观世界的延伸。可以帮助你判断。编程也一样，其实前面说的，Rust语言架构，就是Rust语言在我心里构建的心智模型。我通过这个心智模型，来和Rust编译器达成一致，所以在我写代码的时候，可以尽可能地 遵守了Rust的语言规则，大幅度地降低编译器报错的情况。即便是编译器报错了，也可以快速地通过错误信息定位问题。&lt;/p&gt;&lt;p&gt;如何构建你的心智模型呢？这就需要你从纷繁复杂的语言特性中，寻找共性，寻找一致性，在你心里串起一个精简的知识网络。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-605096152405c96141696bde08f32c3c_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-605096152405c96141696bde08f32c3c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-605096152405c96141696bde08f32c3c_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-605096152405c96141696bde08f32c3c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-605096152405c96141696bde08f32c3c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第八条，多分享和交流。&lt;/p&gt;&lt;p&gt;有人的地方就有Bug。再怎么天才，也有出错的时候。学习最忌讳闭门造车。所以，多交流分享你的学习心得，以教为学。其实我写Rust编程之道的一个目的，就是为了系统性地整理自己的学习心得，只有写出来，才是学会了。而且写出来给别人看，也可以达到交流的目的。所以，我体验了一次集体智慧的力量。因为我没有找到合适的技术审核人员，导致书中有一些错漏，但是读者们非常热心，帮我勘误。在这个过程中，也帮助我纠正了之前的错误认知。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a1a232bd1b5794f93f7d8cacb28fc215_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-a1a232bd1b5794f93f7d8cacb28fc215_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a1a232bd1b5794f93f7d8cacb28fc215_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-a1a232bd1b5794f93f7d8cacb28fc215_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a1a232bd1b5794f93f7d8cacb28fc215_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第九条，参与开源项目贡献。&lt;/p&gt;&lt;p&gt;现在Rust招聘职位并不多。通过前期的针对性学习和训练，阅读源码，自己实现一些自己的小项目之后。也可以考虑参与大型的开源项目做贡献。 比如PingCAP的TiKV、秘猿的Cita区块链、还有我们的Rust语言，它自身也是一个Rust项目。可以参考我另一篇文章：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62370907&quot; class=&quot;internal&quot;&gt;如何为TiKV做贡献&lt;/a&gt; ，了解更多。&lt;/p&gt;&lt;p&gt;当然，最好还是找你自己擅长领域的项目去做贡献。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6d5d9a78f4a9dfbb11cb2fc5fc5c90e1_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-6d5d9a78f4a9dfbb11cb2fc5fc5c90e1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6d5d9a78f4a9dfbb11cb2fc5fc5c90e1_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic2.zhimg.com/v2-6d5d9a78f4a9dfbb11cb2fc5fc5c90e1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-6d5d9a78f4a9dfbb11cb2fc5fc5c90e1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;第十条，阅读《Rust编程之道》。&lt;/p&gt;&lt;p&gt;这其实也不算广告了。我这本书的内容组织、写作逻辑都是遵循上面所说的认知规律。可以帮助你高效地掌握Rust语言。而且，我还组织了读者群，大家可以在交流中学习，互帮互助，不怕学不会。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7aa26de2575168b0ff383ca698911cb0_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-7aa26de2575168b0ff383ca698911cb0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7aa26de2575168b0ff383ca698911cb0_b.jpg&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1600&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic1.zhimg.com/v2-7aa26de2575168b0ff383ca698911cb0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7aa26de2575168b0ff383ca698911cb0_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;以上。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-22-63232238</guid>
<pubDate>Mon, 22 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>GitHub 上有哪些值得关注的 Rust 项目？</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-16-62325234.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62325234&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6be16836cfdb4cdd49d1ec93ae33b90b_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;说明：该文章同步此问题下本人的回答，长期更新。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;介绍一些重点值得关注的项目：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/tikv/tikv&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TiKV&lt;/a&gt;  ，Rust实现的分布式KV存储，是TiDB的基础。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/redox-os/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Redox&lt;/a&gt; ，Rust实现的操作系统，背后是System76公司。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/helena-project/tock&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tockOS&lt;/a&gt;，Rust实现的基于Cortex-M的微控制器的安全嵌入式操作系统。&lt;/li&gt;&lt;li&gt;区块链相关： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/paritytech&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Parity&lt;/a&gt;和&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/cryptape&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CITA区块链框架&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/firecracker-microvm/firecracker&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Firecracker&lt;/a&gt;，亚马逊出品的一个基于KVM的轻量级VMM，可以在几分之一秒内启动虚拟机，内存占用少，可以实现高密度云环境。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/mesalock-linux/mesalink&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mesalink&lt;/a&gt;，MesaLink TLS是百度安全实验室研发的下一代传输层安全(Transport Layer Security, TLS)库。正式支持TLS 1.3和IPv6，支持CMake编译，支持Windows，实现生产环境可用。最近刚发布1.0&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jwilm/alacritty&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;alacritty&lt;/a&gt;，Rust实现的跨平台且GPU加速的终端工具。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/citybound/citybound&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;citybound&lt;/a&gt;，一个Rust实现的多角色城市模拟游戏。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.amethyst.rs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Amethyst&lt;/a&gt;，Rust实现的游戏引擎，采用了ECS架构。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustsim.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rustsim组织&lt;/a&gt;，聚焦于提供各种数值模拟的库，用于科学计算。包括alga（抽象代数库）/nalgebra（ 线性代数库）/ncollide（2D和3D的碰撞检测库）/nphysics（2D和3D的物理模拟库）。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/actix-web&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;actix-web&lt;/a&gt;， 基于Actor库Actix的Web框架，最近发布了1.0-alpha版本。相关其他框架有：rocket，Rust实现的MVC框架，也值得关注。tide，Rust官方正在实现的Web框架。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/denoland/deno&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Deno&lt;/a&gt;，Node.js之父的新坑，TypeScript运行时，完全兼容浏览器API。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/xi-editor/xi-editor&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Xi-editor&lt;/a&gt;，试图使用Rust和现代软件工程构建的高质量文本编辑器。所有的操作都在16md内提交和绘制，永远不会让你等待任何事情。主要开发者是Google前员工Raph Levien，目前他还在为Xi-editior一直做贡献。&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;另外还有一些个人认为比较有意思的实用的、适合学习的中小型项目。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;ripgrep&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;一个文本搜索工具，应该算是Rust的Cli杀手级应用了，搜索性能超强，最近Atom编辑器新版本默认使用了该库&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/BurntSushi/ripgrep&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/BurntSushi/r&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ipgrep&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;git-interactive-rebase-tool&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;一个交互式的命令行rebase工具，辅助你处理git rebase。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/MitMaro/git-interactive-rebase-tool&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/MitMaro/git-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;interactive-rebase-tool&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Gloo&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Rust和WASM工作组的2019推出了Gloo，它是一个模块化的工具包，作用如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;构建更小且能集成到大型JavaScript系统种的WASM模块&lt;/li&gt;&lt;li&gt;可以用Rust编写整个Web应用&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Gloo将进一步抽象出高级的库和框架，易于开发。Gloo的API将使用「洋葱（Onion）分层设计」，分好几个抽象层。他们希望在raw-sys库之上构建一层中级的API，然后在中级API层再构建一层高级的面向用户的API。并且每一层都是公开暴露接口并可复用。这样设计是为了最高限度地提高大型生态系统的可重用性、通用性等。目前该项目刚刚启动。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rustwasm/gloo&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/rustwasm/glo&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Inko&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Rust实现的面向对象语言，号称安全无痛地处理并发，主要是支持类Erlang轻量级进程来处理并发。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//inko-lang.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;inko-lang.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;sonic&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;一个快速，轻量级和无架构的搜索后端。 Elasticsearch的替代方案，可在几MB的RAM上运行。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/valeriansaliou/sonic&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/valeriansali&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ou/sonic&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;lucet&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Lucet是一个本地WASM编译器和运行时。基于Lucet运行时，Rust编译为wasm32-unknown-wasi target就可以创建一个运行于服务端的wasm程序。目前wasm32-unknown-wasi只支持Rust Nightly（2019-04-01版本确定可用）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/fastly/lucet&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/fastly/lucet&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Zola &lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Rust实现的高性能静态网站生成器，类似于Hugo，具体优势可以看看项目Readme对比。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/getzola/zola&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/getzola/zola&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;tweek-rust&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Rust实现的Tween动画工具包  Tween动画可以对对象进行缩小，放大，旋转，渐变，位移等操作，用于在游戏或应用中实现一些渐变类动画动作。最早是伴随Flash技术出现的。现在该技术已经用在了web前端和手机App中。  该库中包含了两个示例，可以看看。  &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/wasm-network/tweek-rust&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/wasm-network&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/tweek-rust&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;点此查看视频 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av45138427&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;bilibili.com/video/av45&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;138427&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Ocypod&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;基于Redis的任务队列服务，使用Rust/Actix/Redis实现。据作者称已经用于生产环境几个月，每周处理数百万个任务。  特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;语言无关&lt;/li&gt;&lt;li&gt;使用redis&lt;/li&gt;&lt;li&gt;使用HTTP/JSON协议&lt;/li&gt;&lt;li&gt;提供HTTP接口&lt;/li&gt;&lt;li&gt;灵活的工作元数据&lt;/li&gt;&lt;li&gt;失败时自动重试&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/davechallis/ocypod&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/davechallis/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ocypod&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;RustyVolleySrc&lt;/b&gt;&lt;/p&gt;&lt;p&gt;使用Rust和WASM实现的排球游戏，挺好玩的，可以作为学习Rust和WASM的案例&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustyVolley/RustyVolleySrc&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/RustyVolley/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;RustyVolleySrc&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;在线demo：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustyvolley.github.io/WebDemo/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;rustyvolley.github.io/W&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ebDemo/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;「嵌入式」 Rust实现的闹钟&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;纯Rust打造的DIY液晶闹钟，很酷。  &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/TeXitoi/rusty-clock&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/TeXitoi/rust&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;y-clock&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;「嵌入式Rust」用Rust实现电子纸名片&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;项目文章： &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.wezm.net/technical/2019/01/linux-conf-au-rust-epaper-badge/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wezm.net/technical/2019&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/01/linux-conf-au-rust-epaper-badge/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;源码： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/wezm/linux-conf-au-2019-epaper-badge&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/wezm/linux-c&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;onf-au-2019-epaper-badge&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;有空再更。&lt;/p&gt;&lt;p&gt;欢迎关注Rust日报，获取Rust社区生态更多信息。日报订阅地址：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿里云语雀订阅&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.cc论坛&lt;/a&gt;（支持RSS）&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Telgram Channel&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stemmit&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-16-62325234</guid>
<pubDate>Tue, 16 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第十二期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-14-62412180.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62412180&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h3&gt;前言：&lt;/h3&gt;&lt;p&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;/p&gt;&lt;p&gt;2019-04-14&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;通告两则&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;RustCon Aisa 2019 大会在下周六即将开启&lt;/h3&gt;&lt;p&gt;关于大会动态，请关注此帖。包含讲师介绍、议题等信息。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//talk.citahub.com/t/topic/294&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RustCon Asia 不可错过的动态&lt;/a&gt;&lt;/p&gt;&lt;p&gt;大会期间吃货指南： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//talk.citahub.com/t/topic/477&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;土生土长北京饮食达人姜军为你推荐：RustCon 期间的北京特色餐饮&lt;/a&gt;&lt;/p&gt;&lt;p&gt;关于门票：&lt;/p&gt;&lt;p&gt;我手头有两份优惠码：IZHKfP6 和 fAp7FK1，给有需要的朋友。但不知道有没有被使用了。如果你已经买了票，但是大会期间有事不能去，可以提前联系日报小组，可以帮你吆喝一嗓子，转购给有需要的人。&lt;/p&gt;&lt;h3&gt;RustCC论坛坛主Mike新上线了公众号&lt;/h3&gt;&lt;p&gt;以后Rust日报也将同步到该公众号，多了一个推送渠道。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Ded7c9379-d681-47cb-9532-0db97d883f62&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;微信公众号：Rust语言学习交流&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;Rust 1.34 稳定版发布&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ rustup update stable&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该稳定版本包括如下变动：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;引入了cargo registries，此功能允许你指定&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;之外发布的crate，甚至一些闭源的crate。&lt;/li&gt;&lt;li&gt;文档测试支持?语法&lt;/li&gt;&lt;li&gt;过程宏中的自定义属性#[attr()],#[attr[]], 和#[attr{}] 可以接受token流。之前的unrestricted_attribute_tokens Features。&lt;/li&gt;&lt;li&gt;TryFrom和TryInto稳定&lt;/li&gt;&lt;li&gt;弃用fn before_exec而使用unsafe fn pre_exec&lt;/li&gt;&lt;li&gt;稳定了一些标准库API，比如Instant::checked_add/ Instant::checked_sub等&lt;/li&gt;&lt;li&gt;支持extern crate self as foo;将当前crate的root导出为指定别名&lt;/li&gt;&lt;li&gt;支持新的target：riscv64imac-unknown-none-elf 和 riscv64gc-unknown-none-elf，以及powerpc64-unknown-freebsd&lt;/li&gt;&lt;li&gt;可以使用-C linker-plugin-lto启用链接器插件LTO优化, 使得rustc将Rust代码编译为LLVM bitcode，从而允许LLVM跨C / C ++ FFI边界执行LTO优化&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;更多内容请看官方release notes。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/04/11/Rust-1.34.0.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/blob/master/RELEASES.md%23version-1340-2019-04-11&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Release Note&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//play.rust-lang.org/%3Fversion%3Dnightly%26mode%3Ddebug%26edition%3D2018%26gist%3D14757b61cc384f085a63efea3002b96d&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;unrestricted_attribute_tokens features示例&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Rust异步进展：Future-proof the Futures API的PR已经被合并&lt;/h3&gt;&lt;p&gt;该PR解决的问题是：Future::poll应该获取＆Waker还是可以获得＆Waker的＆Context？&lt;/p&gt;&lt;p&gt;最终答案是：Context&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/59119&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Future-proof the Futures API ：PR 59119&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/59113&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相关：Tracking issue for RFC 2592, futures_api&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/59725&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相关： [Stabilization] Future APIs #59725 &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;Rust又一次获得StackOverflow程序员最喜欢语言第一&lt;/h3&gt;&lt;h2&gt;StackOverflow&lt;/h2&gt;&lt;p&gt;今天SO发布的这个统计很有意思，先来看看Rust，三点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;80%以上的开发者想用Rust开发&lt;/li&gt;&lt;li&gt;SO有65%的开发者是开源贡献活跃者，这其中使用Rust、WebAssembly和Elixir的人贡献速率最高&lt;/li&gt;&lt;li&gt;Rust的薪资较去年增高了（去年65k） ​​​​&lt;/li&gt;&lt;/ol&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8d4828975a48530ed4b96605f37a5bf9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;954&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-8d4828975a48530ed4b96605f37a5bf9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8d4828975a48530ed4b96605f37a5bf9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;954&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-8d4828975a48530ed4b96605f37a5bf9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-8d4828975a48530ed4b96605f37a5bf9_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4164dea296f38a022243f22adcfd7801_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;108&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-4164dea296f38a022243f22adcfd7801_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4164dea296f38a022243f22adcfd7801_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;108&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-4164dea296f38a022243f22adcfd7801_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-4164dea296f38a022243f22adcfd7801_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-bab1a2acd233d07b33ba35f228c3e2a8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;940&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-bab1a2acd233d07b33ba35f228c3e2a8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-bab1a2acd233d07b33ba35f228c3e2a8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;940&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-bab1a2acd233d07b33ba35f228c3e2a8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-bab1a2acd233d07b33ba35f228c3e2a8_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;继续SO统计。图1是SO统计各大语言生态的原图，上面没有Rust。但其实，以我运营Rust日报近两年的观察，Rust的生态目前确实比不上在各个领域已经成熟的语言，但是它正在底层默默地在这些领域构建自己的生态。如图2。用群友的话来说：Rust正在聚沙成塔。 ​​​​&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c014809dd2f131a99ecaa13b18fbf121_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;622&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-c014809dd2f131a99ecaa13b18fbf121_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c014809dd2f131a99ecaa13b18fbf121_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;622&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-c014809dd2f131a99ecaa13b18fbf121_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c014809dd2f131a99ecaa13b18fbf121_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-52b6111a7f94cad632fcd7c51be0dcfc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;634&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-52b6111a7f94cad632fcd7c51be0dcfc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-52b6111a7f94cad632fcd7c51be0dcfc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;634&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-52b6111a7f94cad632fcd7c51be0dcfc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-52b6111a7f94cad632fcd7c51be0dcfc_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;另外，SO统计上关于区块链的统计也很有意思。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-33e8904e123b1554fbe7d825f846c6c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;598&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-33e8904e123b1554fbe7d825f846c6c3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-33e8904e123b1554fbe7d825f846c6c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;598&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-33e8904e123b1554fbe7d825f846c6c3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-33e8904e123b1554fbe7d825f846c6c3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//insights.stackoverflow.com/survey/2019&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「讨论」如何解读StackOverflow上面Rust连续四年成为最受开发者喜欢语言的这一事实？&lt;/h3&gt;&lt;p&gt;该贴作者对这个结果做出了以下可能的解释：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;跨越了学习曲线的人真的都喜欢Rust&lt;/li&gt;&lt;li&gt;开发人员喜欢新的技术，即使他们还没了解Rust，但他们认为应该重视它。（这个角度来看的话，排名第二的Python看上去就比较诡异）&lt;/li&gt;&lt;li&gt;Rust社区是一个非常友好的社区&lt;/li&gt;&lt;li&gt;Rust社区营销的比较好&lt;/li&gt;&lt;li&gt;有许多C++开发者因为Rust的安全性而选择它&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;到底是什么原因呢？这个话题下评论区讨论比较激烈。&lt;/p&gt;&lt;p&gt;（我喜欢Rust，是因为Rust这门语言恰好符合我对理想编程语言的某些预期。你是什么原因喜欢Rust呢？虽然目前还没有太多Rust的职位招聘，但实际上暗流涌动，有很多公司都已或多或少地在生产中使用了Rust，也就是说，Rust正在聚沙成塔）&lt;/p&gt;&lt;p&gt;偶尔也看到一条额外信息：Apple也在使用Rust构建分布式文件系统，据说在在西雅图举行过一次小型演讲，试图招募相关人才，在网上还找不到相关信息。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bc46lc/understanding_rusts_popularity_on_stack_overflow/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「远程工作」Rust软件工程师&lt;/h3&gt;&lt;p&gt;关键字：远程(美国境内)、Rust、容器服务、创业&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.cloudseal.io/hiring/rust-systems-software-engineer-sp19&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「通告」image的GitHub仓库现已迁移到新的image-rs组织&lt;/h3&gt;&lt;p&gt;image是纯Rust实现的图像库，这次迁移主要是遵循以下计划：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;准备邀请一些人可以加入组织做贡献&lt;/li&gt;&lt;li&gt;准备建立两个团队：发布团队（拥有&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;的访问权限）和开发团队（拥有仓库代码的写入权限）。这样做是为了安全性。&lt;/li&gt;&lt;li&gt; 移动其他相关的库到统一的组织下  &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/image-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;image-rs组织&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/PistonDevelopers/image/issues/891&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「讨论」为什么Deno的基准测试中Hyper的最大延迟如此高？&lt;/h3&gt;&lt;p&gt;max latency &amp;gt;1000ms&lt;/p&gt;&lt;p&gt;目前讨论还未有结果，可以持续关注。&lt;/p&gt;&lt;p&gt;Deno作者提交了一个PR，使用O3优化，目测也未有改善。后续也有热心人提交了新的补丁，还在尝试。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/balb45/why_is_hypers_max_latency_so_high_in_deno/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//deno.land/benchmarks.html%23max-latency&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Deno基准测试&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/denoland/deno/blob/master/tools/http_benchmark.py%23L55-L58&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Deno基准测试代码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/denoland/deno/pull/2070&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;PR: Use -O3 instead of -O &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;一封写给Rust宏的情书&lt;/h3&gt;&lt;p&gt;本文不是宏教程，作者写这篇文章的目的就是为了让还没有使用过Rust宏的人，早点尝试一下宏。（真香预警）&lt;/p&gt;&lt;p&gt;作者比较了Rust和其他语言（C/C++/Java）中的元编程，摘要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;C宏和Cpp模板元编程。很容易引入难以发现的错误，并且会扰乱编译时间，在构建中引入不必要的复杂性。你是否见过错误使用模板而引发的编译器错误呢？&lt;/li&gt;&lt;li&gt;Java注解。Java的注解功能很强大，可以在编译时使用，也可以在运行时执行，既可以用于代码生成，又可以拿来反射。Java中最受欢迎的Spring框架大量使用Java注解。但正因为如此，Java的注解功能导致你写的代码可能超越语言自身的语义，而更像是另外一种语言。而且通过注解实现的代码，调试起来也非常痛苦。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么Rust的宏是不是完全避免了上面的问题呢？并不是百分百的避免，但是Rust已经努力避免了常见的问题，并且可以发挥出Rust语言自身的优势。作者介绍了声明宏和过程宏的一些优势，并且在文章底部列出了一些学习宏的资料。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//happens.lol/posts/a-love-letter-to-rust-macros/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用Rust开发跨平台组件的新策略&lt;/h3&gt;&lt;p&gt;Mozilla工程师最新分享，将Rust实现的核心业务逻辑封装到一个中间层，然后通过新的共享策略，达到Web、iOS、Android三端共享。实施这个策略遇到的一个问题就是如何安全地使用FFI，并且还能与Rust的所有权良好地配合。因此该团队写了一个ffi-support库来帮助达成此目的。&lt;/p&gt;&lt;p&gt;该库最初的实现方案是通过序列化为JSON字符串在FFI中传递。但是缺点是，JSON序列化和反序列化会很慢。最重要的问题是，Java中字符串编码是UTF-16-ish。在Kotlin中，必须反序列化每个数据结构，这个过程会可能会发生异常。最严重的问题是，没有返回JSON字符串，而是某个C指针，忘记更新Kotlin中或者ObjectiveC中的数据结构，导致严重的内存问题。&lt;/p&gt;&lt;p&gt;值得庆幸的是，团队发现了使用Protocol BufferV2替代JSON，可以解决上面的问题。在Rust中直接使用prost库，可以通过Rust的宏生成非常干净的结构。而且，PB比JSON的性能高。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-74152506ea4e4c96a733d782bdc6e592_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;604&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic3.zhimg.com/v2-74152506ea4e4c96a733d782bdc6e592_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-74152506ea4e4c96a733d782bdc6e592_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;604&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic3.zhimg.com/v2-74152506ea4e4c96a733d782bdc6e592_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-74152506ea4e4c96a733d782bdc6e592_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2019/04/crossing-the-rust-ffi-frontier-with-protocol-buffers/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/mozilla/application-services/blob/master/components/support/ffi/Cargo.toml&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ffi-support&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Atom 1.36选用了ripgrep&lt;/h3&gt;&lt;p&gt;使用Ripgrep极大地提升了Atom项目内查找的性能，在文件量很大的情况下尤为明显。不过需要专门通过设置使用Rip Grep选项手动打开。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.atom.io/2019/04/09/atom-1-36.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Mozilla 準備跟一些&amp;#34;合格&amp;#34;的Linux使用者測試 WebRender&lt;/h3&gt;&lt;p&gt;現在Linux使用者可以手動開啟WebRender了 這是一個實驗特性&lt;/p&gt;&lt;p&gt;他可以開啟rust寫的gpu渲染程序 給&amp;#34;合格&amp;#34;的Linux設備使用&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/bcb3g0/mozilla_preparing_to_test_webrender_with/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;ndarray-stats v0.2 发布&lt;/h3&gt;&lt;p&gt;此库为 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-ndarray/ndarray&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ndarray&lt;/a&gt; 的 ArrayBase 类型提供了统计方法。&lt;/p&gt;&lt;p&gt;到目前为止，Scipy.stats (Python) 和 StatsBase.jl (Julia) 中的大部分统计特性都已经移植过来了。用 Rust 做机器学习的同学是不是可以上手了？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jturner314/ndarray-stats&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;本库作者还邀请大家一起来讨论这个库的未来走向，好机会。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jturner314/ndarray-stats/issues/1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Roadmap&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;如何为TiKV做贡献&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62370907&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust编程之道 关于闭包和所有权相关规则&lt;/h3&gt;&lt;p&gt;读者frostRed和Yim先后总结出来的规则，大家可以参考讨论。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes/issues/164&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c02860fe5b21a7624974ee3b5cc1cb67_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;840&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-c02860fe5b21a7624974ee3b5cc1cb67_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c02860fe5b21a7624974ee3b5cc1cb67_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;840&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-c02860fe5b21a7624974ee3b5cc1cb67_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-c02860fe5b21a7624974ee3b5cc1cb67_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在随书源码选择「精选」label也可看到。&lt;/p&gt;&lt;h3&gt;Rust和Actix-web基本Web编程&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zupzup.org/rust-webapp/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用Actix Web进行人脸检测&lt;/h3&gt;&lt;p&gt;这是上次日报里报道过「使用tensorflow与rust人脸检测」文章作者的续篇。在这篇内容里，作者介绍了如何将上一篇文章的成果通过HTTP API来提供。并且作者使用了actix-web = &amp;#34;1.0.0-alpha.4&amp;#34;版本。在mtcnn库的actix-web分支里可以看到具体实现。&lt;/p&gt;&lt;p&gt;这两篇文章是实践性很强的文章，建议大家跟着玩玩。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cetra3.github.io/blog/face-detection-with-actix-web/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/cetra3/mtcnn&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;上篇文章人脸检测Rust库：mtcnn&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「系列博客」 Rust与科学计算 Part 2: 数组&lt;/h3&gt;&lt;blockquote&gt; 该作者的日常工作是机器学习，他在多次使用Rust进行相关的实验之后发现，Rust语言在这个领域将大有可为，并让他感觉非常激动。作者反观了Python统治下的机器学习世界，其生态系统爆炸的原因是因为有很多基础库，比如NumPy，SciPy，Pandas等。大多数项目是构建在NumPy和SciPy之上。如果Rust也拥有这些核心的基础库会怎么样？抱着这样的想法，作者加入了维护ndarray库的队伍中。他贡献了一堆PR之后，诞生了一个独立的crate：ndarray-stats。这个系列的文章，将围绕ndarray来阐述。  &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.lpalmieri.com/posts/2019-04-07-scientific-computing-a-rust-adventure-part-2-array1/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「嵌入式Rust」一个TM1637的demo&lt;/h3&gt;&lt;p&gt;来自Rust国内社区 @洛佳。查看该Demo项目Readme，有详细的内容说明。&lt;/p&gt;&lt;p&gt; 图片上传失败 ​重试  &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/luojia65/tm1637-display-demo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tm1637-display-demo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;crust - 一个Rust实现的简单C编译器&lt;/h3&gt;&lt;p&gt;从头开始写 C 编译器，很好的学习教程。谁在学习编译原理，可以参考参考。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/onehr/crust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;rust-wasi-tutorial&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/CraneStation/wasmtime/blob/master/docs/WASI-tutorial.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;帅气的 wasi 教程&lt;/a&gt; 的 rust 实现版本。跟进最新的 wasi 的同学不能错过。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/kubkon/rust-wasi-tutorial&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用actix-web实现魔术登录链接的示例&lt;/h3&gt;&lt;p&gt;“魔术链接（Magic links）”是每次需要登录时，Web应用程序都会生成一个新的，唯一的密码，而不是单个长期存在的密码。 然后，Web应用程序会向用户发送一封电子邮件或一条带有登录链接的短信。 此链接包含此唯一密码：短暂共享密钥。&lt;/p&gt;&lt;p&gt;该demo是使用actix-web 0.7。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.approveapi.com/tutorials/rust-actix-web-approveapi-magic-login-link/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用Tokio实现自定义协议（i3 IPC）&lt;/h3&gt;&lt;p&gt;该文作者介绍了使用tokio实现i3wm（i3窗口管理器）的IPC接口&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//leshow.github.io/post/impl_proto_tokio/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//i3wm.org/docs/ipc.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;i3wm IPC接口文档&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「系列文章」Python开发者的Rust教程 Part 2: 所有权和借用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40rajasekar3eg/rust-for-python-developers-ownership-and-borrowing-cd85fc10cae4&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;electron-wasm-rust-example: 一个最小化的Electron + WebAssembly (WASM) + 🦀 Rust的示例&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/anderejd/electron-wasm-rust-example&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;electron-wasm-rust-example&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「视频」深入WASM和WASI&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DEvc3T9Zk2pk&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;如何在Rust测试中Mock时间&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.iany.me/2019/03/how-to-mock-time-in-rust-tests-and-cargo-gotchas-we-met&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/doitian/rust-mock-time-demo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-mock-time-demo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「系列文章」JavaScript解析和求值&lt;/h3&gt;&lt;p&gt;该文作者在之前分享了如何使用Rust实现一个基于状态机的高性能的JS词法分析器。这之后，又开始写系列文章分享他的心得。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40retep007/javascript-lexing-for-high-performance-f9a800ec930d&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Javascript evaluator part 1: Lexing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40retep007/javascript-evaluator-part-2-parser-and-basic-evaluator-d306ff1aec83&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Javascript evaluator part 2: Parser and Basic evaluator&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/retep007/javascript-es9-parser&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;javascript-es9-parser&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;使用Sonr构建pub/sub服务器&lt;/h3&gt;&lt;p&gt;sonr建立在mio之上的网络库，相比于Tokio来说，更加轻量。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hagsteel.com/posts/building-a-pub-sub-with-sonr-part-1/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/hagsteel/sonr&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sonr&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/hagsteel/pubsub&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;源码：pubsub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hagsteel.com/posts/introduction-to-sonr/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sonr介绍&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;BlockLang Installer 是一款专用于部署 Spring boot 项目的自动化安装工具&lt;/h3&gt;&lt;p&gt;来自Rust国内社区 @xiaohulu 投稿。&lt;/p&gt;&lt;p&gt;源代码托管在 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/blocklang/blocklang-installer&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/blocklang/bl&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ocklang-installer&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;BlockLang Installer 安装在应用服务器上，支持：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;下载 JDK 和 Spring boot Jar 文件；
安装 JDK；
启动 Spring boot Jar。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;功能示意图： &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ca28f9750a3596c54c08834a7fefa780_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;841&quot; data-rawheight=&quot;220&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;841&quot; data-original=&quot;https://pic1.zhimg.com/v2-ca28f9750a3596c54c08834a7fefa780_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ca28f9750a3596c54c08834a7fefa780_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;841&quot; data-rawheight=&quot;220&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;841&quot; data-original=&quot;https://pic1.zhimg.com/v2-ca28f9750a3596c54c08834a7fefa780_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ca28f9750a3596c54c08834a7fefa780_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;rust-notifica: Rust实现的跨平台系统通知工具&lt;/h3&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-de27e69e205df99c3a8048deccb7caa2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;756&quot; data-rawheight=&quot;232&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;756&quot; data-original=&quot;https://pic3.zhimg.com/v2-de27e69e205df99c3a8048deccb7caa2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-de27e69e205df99c3a8048deccb7caa2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;756&quot; data-rawheight=&quot;232&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;756&quot; data-original=&quot;https://pic3.zhimg.com/v2-de27e69e205df99c3a8048deccb7caa2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-de27e69e205df99c3a8048deccb7caa2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/frewsxcv/rust-notifica&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-notifica&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;hunter - 终端下的文件浏览器&lt;/h3&gt;&lt;p&gt;看起来操作性很高，比linux之前的MC好用多了。本工具受 ranger 和 emacs 启发。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7904fdda93f4475d275be1b8d490c878_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;943&quot; data-rawheight=&quot;619&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;943&quot; data-original=&quot;https://pic1.zhimg.com/v2-7904fdda93f4475d275be1b8d490c878_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7904fdda93f4475d275be1b8d490c878_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;943&quot; data-rawheight=&quot;619&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;943&quot; data-original=&quot;https://pic1.zhimg.com/v2-7904fdda93f4475d275be1b8d490c878_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7904fdda93f4475d275be1b8d490c878_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rabite0/hunter&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;lopdf - 用于操作PDF文档的库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/J-F-Liu/lopdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;flashback - 将adobe的SWF文件转换为SVG或WASM等格式&lt;/h3&gt;&lt;p&gt;转换后，就不需要运行模拟器来执行swf了。开坑不久，可以参与。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/lykenware/flashback&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;simdjson-rs - simdjson库的Rust实现&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/lemire/simdjson&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;simdjson&lt;/a&gt; 这个库这段时间非常火，因为它确实很快啊，用 SIMD 指令集来加速。这个库是 rust 的实现版本，不是包装版本。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Licenser/simdjson-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;fluid - 一个单元测试库 发布了0.4版本&lt;/h3&gt;&lt;p&gt;写人类可读的单元测试的框架。看起来非常不错。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Fact

#[fact]
fn cerberus_has_3_heads() {
    number_of_faces(&amp;#34;Cerberus&amp;#34;).should().be_equal_to(3);
}

Theory

#[theory]
#[case(&amp;#34;Cerberus&amp;#34;, 3)]
#[case(&amp;#34;Hydra&amp;#34;, 7)]
#[case(&amp;#34;Janus&amp;#34;, 2)]
#[case(&amp;#34;Normal guy&amp;#34;, 1)]
fn each_creature_has_a_correct_number_of_faces(name: &amp;amp;str, nbr_faces: u8) {
    number_of_faces(name).should().be_equal_to(nbr_faces);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.rs/fluid/latest/fluid/wiki/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Docs&lt;/a&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitlab.com/Boiethios/fluid-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;nom-peg: 基于nom实现的PEG解析器生成器工具&lt;/h3&gt;&lt;p&gt;和pest类似，但它是基于nom实现的。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-bakery/nom-peg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;nom-peg&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Rust实现的IRC机器人&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/nuxeh/url-bot-rs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;url-bot-rs&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;chit: 可在终端查询crate信息的工具&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ cargo install chit
$ chit serde&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/peterheesterman/chit&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;chit&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;wasmer: 可执行wasm二进制文件的Python库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/wasmerio/python-ext-wasm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;python-ext-wasm&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;ppcp - 带进度条的文件复制工具&lt;/h3&gt;&lt;p&gt;cp 的替代品啊。什么都不说了，炫酷上图吧&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1eba75eabfc95811eb5b135b356340b3_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1434&quot; data-rawheight=&quot;504&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-1eba75eabfc95811eb5b135b356340b3_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1434&quot; data-original=&quot;https://pic4.zhimg.com/v2-1eba75eabfc95811eb5b135b356340b3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1eba75eabfc95811eb5b135b356340b3_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1434&quot; data-rawheight=&quot;504&quot; data-thumbnail=&quot;https://pic4.zhimg.com/v2-1eba75eabfc95811eb5b135b356340b3_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1434&quot; data-original=&quot;https://pic4.zhimg.com/v2-1eba75eabfc95811eb5b135b356340b3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1eba75eabfc95811eb5b135b356340b3_b.gif&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/acidnik/ppcp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;neat-flappy-bird&lt;/h3&gt;&lt;p&gt;NEAT算法玩Flappy Bird(像素鸟) ，群友贡献，棒棒哒！JiaYe（planet0104）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/planet0104/neat-flappy-bird&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-14-62412180</guid>
<pubDate>Sun, 14 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何为TiKV做贡献</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-14-62370907.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62370907&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8723e6bd79f779e965c16721ec15d437_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;TiKV算是Rust界的明星项目了，介绍它的文章很多，这里就不再赘述。但是如果你打算给TiKV做点贡献，还不知道如何开始，也许此文可以帮助你节省点时间。&lt;/blockquote&gt;&lt;h2&gt;贡献步骤与需要注意的坑&lt;/h2&gt;&lt;p&gt;给TiKV做贡献，可以简单地分为以下几步：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;选择一个趁手的问题&lt;/li&gt;&lt;li&gt;Fork项目提交PR&lt;/li&gt;&lt;li&gt;等待Review&lt;/li&gt;&lt;li&gt;修改Review请求&lt;/li&gt;&lt;li&gt;合并&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;选择一个趁手的问题&lt;/h3&gt;&lt;p&gt;想要做贡献，当然要选择一个趁手的问题了。什么叫趁手？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;自己能力范围可掌控&lt;/li&gt;&lt;li&gt;不至于耽误自己太多时间&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果超出自己的能力范围，那很容易劝退；如果太耽误自己的时间，那也很容易拖延，最终还是劝退。&lt;/p&gt;&lt;p&gt;如果选择趁手的问题？我来教你一个办法。&lt;/p&gt;&lt;p&gt;来&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//this-week-in-rust.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;This Week in Rust&lt;/a&gt;网站，然后会看到一个「Call for Participation」的分类，这下面的内容就是有人已经帮你选好的Rust生态中各种开源项目需要人帮忙的各种issues。上面也可以不定期地看到TiKV的各种issues。如下图：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-43849f15323c48d5ca609103187b3059_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1512&quot; data-rawheight=&quot;466&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1512&quot; data-original=&quot;https://pic2.zhimg.com/v2-43849f15323c48d5ca609103187b3059_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-43849f15323c48d5ca609103187b3059_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1512&quot; data-rawheight=&quot;466&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1512&quot; data-original=&quot;https://pic2.zhimg.com/v2-43849f15323c48d5ca609103187b3059_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-43849f15323c48d5ca609103187b3059_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;通过This Week in Rust来寻找可贡献的issues更加方便一点，当然你也可以直接去TiKV项目的issues中找，但你的选择面可能就更广更不好确定了。确定了选择范围之后，接下来就要看issues的难度了。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-83e05be3bec115a7ef4413a8b765e6af_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2324&quot; data-rawheight=&quot;1784&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2324&quot; data-original=&quot;https://pic4.zhimg.com/v2-83e05be3bec115a7ef4413a8b765e6af_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-83e05be3bec115a7ef4413a8b765e6af_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2324&quot; data-rawheight=&quot;1784&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2324&quot; data-original=&quot;https://pic4.zhimg.com/v2-83e05be3bec115a7ef4413a8b765e6af_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-83e05be3bec115a7ef4413a8b765e6af_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;幸好，这些issues上面都标记有难度Label。上图中的issues标记的是&lt;code&gt;D: Easy&lt;/code&gt;，这是专门给新手准备的。&lt;code&gt;D: Easy&lt;/code&gt;标记的意义：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;有人指导&lt;/li&gt;&lt;li&gt;上下文依赖最少&lt;/li&gt;&lt;li&gt;任务量不太多&lt;/li&gt;&lt;li&gt;懂Rust即可参与&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所以，不管你Rust水平高低，选择这个应该是最好的。因为TiKV属于一个比较大型的项目了，业务逻辑相当复杂，对于新人来说，最好是选择依赖业务上下文最少的那些issues来解决。&lt;/p&gt;&lt;h3&gt;Fork项目提交PR&lt;/h3&gt;&lt;p&gt;选择好issues之后，接下来不要马上动手。你首先需要搞清楚问题所在，想清楚如何解决，再动手。但是你可以先fork一个自己的分支。对issues有任何问题，可以通过GitHub提问，每个issues应该有一个主要的负责人，他会指导你。&lt;/p&gt;&lt;p&gt;在修改代码的时候需要注意，TiKV默认是使用Nightly Rust，在项目的根目录下有一个`rust-toolchain`文件，里面指定了相关的版本。在你使用cargo build的时候，如果你本地没有这个版本的Rust，则会自动安装。&lt;/p&gt;&lt;p&gt;找到解决问题的思路，顺利写完代码之后，先别着急Commit代码。需要注意下面三点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;执行cargo fmt，把代码风格统一标准。&lt;/li&gt;&lt;li&gt;执行cargo test，跑一遍单元测试看是否有问题。这里有一个坑需要注意：单元测试是并行跑的，最好把你本地机器ulimit设置一下，&lt;code&gt;ulimit -n 1000&lt;/code&gt;。否则测试跑一半可能会报&lt;code&gt;too many files&lt;/code&gt;的错误。&lt;/li&gt;&lt;li&gt;使用&lt;code&gt;git commit -s&lt;/code&gt;命令来Commit代码，因为TiKV要求遵循DCO（Developer Certification of Origin）。有人因为这个原因修改commit信息就浪费了不少时间。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;然后顺利Push代码之后，发起Pull Request要注意，写清楚这次PR的详细信息，这些TiKV的模板有描述，注意查看。&lt;/p&gt;&lt;h3&gt;等待Review&lt;/h3&gt;&lt;p&gt;提交PR以后，就安心等待Review吧。并不是你刚提交就会马上有人来帮你review，所以不要心急。&lt;/p&gt;&lt;p&gt;Review也是分批次，主要负责人过来review之后，给出一些修改意见，然后也可能会有业务相关的人员过来再次Review，给出其他意见。但这里面需要注意：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;只关注这个PR要解决的核心问题&lt;/li&gt;&lt;li&gt;对于一些次要的review请求，可以拒绝&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;TiKV代码太多，并不是每个review人员都看过完整代码，他们也许只是对他负责的那一块熟悉。当他帮同事负责的那一块review的时候，他并不能分清，哪些代码是已经存在的，哪些是你新加上去的。所以，很可能会给你提出一些修改意见，包含了修复「他们曾经没有发现，review的时候刚发现的代码中早已包含的一些问题」。对于这些问题，你可以选择拒绝，另开issues去处理。 因为这些代码并不是你写的，上下文你也不清楚，如果冒然修改，可能会引起未知的连锁问题，那么你这个PR就休想完成了。&lt;/p&gt;&lt;h3&gt;修改Review请求&lt;/h3&gt;&lt;p&gt;对于Review之后的修改请求，经过你的过滤和判断之后，选择真正需要修复的代码进行修改即可。这期间还要注意，CI中的测试是否通过。如果没有通过，需要你点击&lt;code&gt;details&lt;/code&gt;链接过去看看测试是什么原因出错了。&lt;/p&gt;&lt;p&gt;测试没有通过，会有很多原因：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;可能没有排上队，超时了&lt;/li&gt;&lt;li&gt;其他一些诡异的问题，但是和你修改的代码没有关系&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对于你理解不了的问题，你可以另外发起一个issues来报告给TiKV团队。然后你就可以重新提交一下代码来触发测试，没准就能过。&lt;/p&gt;&lt;h3&gt;合并代码&lt;/h3&gt;&lt;p&gt;代码合并之后，你就是一个贡献者了。但是，这可以是结束，也可以是一个好的开始。&lt;/p&gt;&lt;p&gt;你能以这个PR涉及的业务为中心，然后逐渐辐射到与之相关的更多issues，继续去提交贡献，那么肯定会一次比一次娴熟。&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;现在Rust的职位确实很少，但是Rust又是那么有魅力，几乎有80%的开发者想用Rust。如何是好呢？ 给开源项目做贡献就是一个好的方法，在实践中学习Rust。&lt;/p&gt;&lt;p&gt;给TiKV做贡献有什么好处呢？众所周知，TiKV最近从Rust官方招揽了几员猛将，比如brson和nrc。我给TiKV提交的PR是由brson负责的，所以我有幸领略了brson的做事风格：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;完全沟通。对于一个很小的问题，都可以很详细的给你回复，不会让你有理解上的盲点。这是远程沟通的典范。&lt;/li&gt;&lt;li&gt;对代码精益求精。从代码的简洁性、可读性、架构上都会考量，并且给出指导意见。&lt;/li&gt;&lt;li&gt;系统性思维。从一个细微的Bug出发，放眼整个项目，从而找出代码结构的不合理性，而不是简单的修复Bug。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;给TiKV做贡献让我学到不少东西。除了brson，Tikv团队中其他成员也非常棒，给我的代码也提出了不少修改意见，让我学到了不少技巧。当然，你如果想给其他开源项目做贡献，我想也会有相同的收获的。只不过本文是局限于了TiKV，仅供参考。&lt;/p&gt;&lt;p&gt;更多阅读： &lt;a href=&quot;https://zhuanlan.zhihu.com/p/53247517&quot; class=&quot;internal&quot;&gt;如何为Rust语言做贡献&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-14-62370907</guid>
<pubDate>Sun, 14 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>GitHub 上有哪些值得关注的 Rust 项目？</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-13-62325234.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62325234&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6be16836cfdb4cdd49d1ec93ae33b90b_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;说明：该文章同步此问题下本人的回答，长期更新。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;介绍一些重点值得关注的项目：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/tikv/tikv&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TiKV&lt;/a&gt;  ，Rust实现的分布式KV存储，是TiDB的基础。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/redox-os/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Redox&lt;/a&gt; ，Rust实现的操作系统，背后是System76公司。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/helena-project/tock&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tockOS&lt;/a&gt;，Rust实现的基于Cortex-M的微控制器的安全嵌入式操作系统。&lt;/li&gt;&lt;li&gt;区块链相关： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/paritytech&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Parity&lt;/a&gt;和&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/cryptape&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CITA区块链框架&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/firecracker-microvm/firecracker&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Firecracker&lt;/a&gt;，亚马逊出品的一个基于KVM的轻量级VMM，可以在几分之一秒内启动虚拟机，内存占用少，可以实现高密度云环境。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/mesalock-linux/mesalink&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mesalink&lt;/a&gt;，MesaLink TLS是百度安全实验室研发的下一代传输层安全(Transport Layer Security, TLS)库。正式支持TLS 1.3和IPv6，支持CMake编译，支持Windows，实现生产环境可用。最近刚发布1.0&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jwilm/alacritty&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;alacritty&lt;/a&gt;，Rust实现的跨平台且GPU加速的终端工具。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/citybound/citybound&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;citybound&lt;/a&gt;，一个Rust实现的多角色城市模拟游戏。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.amethyst.rs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Amethyst&lt;/a&gt;，Rust实现的游戏引擎，采用了ECS架构。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustsim.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rustsim组织&lt;/a&gt;，聚焦于提供各种数值模拟的库，用于科学计算。包括alga（抽象代数库）/nalgebra（ 线性代数库）/ncollide（2D和3D的碰撞检测库）/nphysics（2D和3D的物理模拟库）。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/actix-web&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;actix-web&lt;/a&gt;， 基于Actor库Actix的Web框架，最近发布了1.0-alpha版本。相关其他框架有：rocket，Rust实现的MVC框架，也值得关注。tide，Rust官方正在实现的Web框架。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/denoland/deno&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Deno&lt;/a&gt;，Node.js之父的新坑，TypeScript运行时，完全兼容浏览器API。&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;另外还有一些个人认为比较有意思的实用的、适合学习的中小型项目。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;ripgrep&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;一个文本搜索工具，应该算是Rust的Cli杀手级应用了，搜索性能超强，最近Atom编辑器新版本默认使用了该库&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/BurntSushi/ripgrep&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/BurntSushi/r&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ipgrep&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;git-interactive-rebase-tool&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;一个交互式的命令行rebase工具，辅助你处理git rebase。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/MitMaro/git-interactive-rebase-tool&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/MitMaro/git-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;interactive-rebase-tool&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Gloo&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Rust和WASM工作组的2019推出了Gloo，它是一个模块化的工具包，作用如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;构建更小且能集成到大型JavaScript系统种的WASM模块&lt;/li&gt;&lt;li&gt;可以用Rust编写整个Web应用&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Gloo将进一步抽象出高级的库和框架，易于开发。Gloo的API将使用「洋葱（Onion）分层设计」，分好几个抽象层。他们希望在raw-sys库之上构建一层中级的API，然后在中级API层再构建一层高级的面向用户的API。并且每一层都是公开暴露接口并可复用。这样设计是为了最高限度地提高大型生态系统的可重用性、通用性等。目前该项目刚刚启动。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rustwasm/gloo&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/rustwasm/glo&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Inko&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Rust实现的面向对象语言，号称安全无痛地处理并发，主要是支持类Erlang轻量级进程来处理并发。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//inko-lang.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;inko-lang.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;sonic&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;一个快速，轻量级和无架构的搜索后端。 Elasticsearch的替代方案，可在几MB的RAM上运行。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/valeriansaliou/sonic&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/valeriansali&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ou/sonic&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;lucet&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Lucet是一个本地WASM编译器和运行时。基于Lucet运行时，Rust编译为wasm32-unknown-wasi target就可以创建一个运行于服务端的wasm程序。目前wasm32-unknown-wasi只支持Rust Nightly（2019-04-01版本确定可用）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/fastly/lucet&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/fastly/lucet&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Zola &lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Rust实现的高性能静态网站生成器，类似于Hugo，具体优势可以看看项目Readme对比。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/getzola/zola&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/getzola/zola&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;tweek-rust&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Rust实现的Tween动画工具包  Tween动画可以对对象进行缩小，放大，旋转，渐变，位移等操作，用于在游戏或应用中实现一些渐变类动画动作。最早是伴随Flash技术出现的。现在该技术已经用在了web前端和手机App中。  该库中包含了两个示例，可以看看。  &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/wasm-network/tweek-rust&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/wasm-network&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/tweek-rust&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;点此查看视频 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av45138427&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;bilibili.com/video/av45&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;138427&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Ocypod&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;基于Redis的任务队列服务，使用Rust/Actix/Redis实现。据作者称已经用于生产环境几个月，每周处理数百万个任务。  特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;语言无关&lt;/li&gt;&lt;li&gt;使用redis&lt;/li&gt;&lt;li&gt;使用HTTP/JSON协议&lt;/li&gt;&lt;li&gt;提供HTTP接口&lt;/li&gt;&lt;li&gt;灵活的工作元数据&lt;/li&gt;&lt;li&gt;失败时自动重试&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/davechallis/ocypod&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/davechallis/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ocypod&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;RustyVolleySrc&lt;/b&gt;&lt;/p&gt;&lt;p&gt;使用Rust和WASM实现的排球游戏，挺好玩的，可以作为学习Rust和WASM的案例&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustyVolley/RustyVolleySrc&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/RustyVolley/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;RustyVolleySrc&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;在线demo：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustyvolley.github.io/WebDemo/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;rustyvolley.github.io/W&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ebDemo/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;「嵌入式」 Rust实现的闹钟&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;纯Rust打造的DIY液晶闹钟，很酷。  &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/TeXitoi/rusty-clock&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/TeXitoi/rust&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;y-clock&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h3&gt;&lt;b&gt;「嵌入式Rust」用Rust实现电子纸名片&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;项目文章： &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.wezm.net/technical/2019/01/linux-conf-au-rust-epaper-badge/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wezm.net/technical/2019&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/01/linux-conf-au-rust-epaper-badge/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;源码： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/wezm/linux-conf-au-2019-epaper-badge&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/wezm/linux-c&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;onf-au-2019-epaper-badge&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;有空再更。&lt;/p&gt;&lt;p&gt;欢迎关注Rust日报，获取Rust社区生态更多信息。日报订阅地址：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿里云语雀订阅&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.cc论坛&lt;/a&gt;（支持RSS）&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Telgram Channel&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stemmit&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-13-62325234</guid>
<pubDate>Sat, 13 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第十一期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-07-61648926.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61648926&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br/&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br/&gt;2019-04-01&lt;/blockquote&gt;&lt;hr/&gt;&lt;h2&gt;通告两则：&lt;/h2&gt;&lt;h3&gt;Rust日报组成立&lt;/h3&gt;&lt;p&gt;「Rust日报」2019每周精选前两周因为有事所以中断两期，今天开始继续。借此也成立了一个Rust日报小组，目前已有两人加入。&lt;/p&gt;&lt;p&gt;发日报有什么好处？我来给大家透露一下。至少有三点好处：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;了解Rust生态最新动态&lt;/li&gt;&lt;li&gt;锻炼自己的总结能力。对于感兴趣的文章，可以快速汲取其主要观点。&lt;/li&gt;&lt;li&gt;为自己的提升和学习铺垫了资料库。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以，也欢迎大家参与Rust日报的内容建设中。&lt;/p&gt;&lt;h3&gt;与 Rust 大神面基指南（一） | RustCon Asia&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61461452&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;首届RustCon Asia大会还有差不多两周就临近了，还没上车的可以上车了。来欣赏一下大会举办方的精美Banner，顺便扫描二维码可以购票。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1120d41751fd0ef3e1430bdd9b6f14e1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;409&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-1120d41751fd0ef3e1430bdd9b6f14e1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1120d41751fd0ef3e1430bdd9b6f14e1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;409&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-1120d41751fd0ef3e1430bdd9b6f14e1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-1120d41751fd0ef3e1430bdd9b6f14e1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e427563cbd1755d558d227eff3575d29_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-e427563cbd1755d558d227eff3575d29_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e427563cbd1755d558d227eff3575d29_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-e427563cbd1755d558d227eff3575d29_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-e427563cbd1755d558d227eff3575d29_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-88616b8eebba57bed323b1dccc4d584b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-88616b8eebba57bed323b1dccc4d584b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-88616b8eebba57bed323b1dccc4d584b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-88616b8eebba57bed323b1dccc4d584b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-88616b8eebba57bed323b1dccc4d584b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7770690dccdfb3d11c537d6cffc8a948_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;409&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-7770690dccdfb3d11c537d6cffc8a948_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7770690dccdfb3d11c537d6cffc8a948_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;409&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-7770690dccdfb3d11c537d6cffc8a948_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7770690dccdfb3d11c537d6cffc8a948_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-37a55ddf71d5f194d476e23a3396fcb8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-37a55ddf71d5f194d476e23a3396fcb8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-37a55ddf71d5f194d476e23a3396fcb8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-37a55ddf71d5f194d476e23a3396fcb8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-37a55ddf71d5f194d476e23a3396fcb8_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9b2e4b42a538afed59a05e8d5827da45_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-9b2e4b42a538afed59a05e8d5827da45_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9b2e4b42a538afed59a05e8d5827da45_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-9b2e4b42a538afed59a05e8d5827da45_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-9b2e4b42a538afed59a05e8d5827da45_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;Gloo更新：Onion层、计时器和事件&lt;/h3&gt;&lt;p&gt;Gloo是一个用Rust和Wasm构建快速可靠的Web应用程序和库的模块化工具包，于两周前开始构建。最新的进展如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;增加了「“洋葱”分层API」。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;也就是说，API的构建就像是洋葱一样，分好几个抽象层。他们希望在raw-sys库之上构建一层中级的API，然后在中级API层再构建一层高级的面向用户的API。并且每一层都是公开暴露接口并可复用。这样设计是为了最高限度地提高大型生态系统的可重用性、通用性等。&lt;/p&gt;&lt;p&gt;其中核心层API是构建在wasm-bindgen，js-sys和web-sys之上的原始绑定。中间层是回调（callback）层，比如gloo_timers就包含在这一层。高级层是Futures和Steams层，当然现在是futures 0.1，等异步稳定以后再切换到最新的。未来也有可能增加更高的抽象层。比如某些Web API或是为了生态系统而集成的层。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;另一个正在进行的设计是如何制作事件目标和监听器层。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rustwasm.github.io/2019/03/26/gloo-onion-layers.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;当前Async已经修复的问题&lt;/h3&gt;&lt;p&gt;在最近的一条已merge的PR中，顺便列出了所有已被修复的async中已知的生命周期问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/59286&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust/pull/59286&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Future API終於要定案了！&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b9se8s/stabilizing_future_apis/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;HashMap的最新版实现要合并了&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b9ol2l/the_new_hashmap_is_ready_for_merging/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;愚人节合集&lt;/h3&gt;&lt;p&gt;提议整个Rust项目由bors机器人管理。  &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/pull/2671&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/rust-lang/rf&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;cs/pull/2671&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;提议将Cow来默认导出  （这个我真信了） &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/pull/2672&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/rust-lang/rf&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;cs/pull/2672&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;Rust 2.0要开始筹备了，主要目标有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;为了更健康的crate生态，准备提供一个审查工具，帮助用户剔除掉一些依赖包&lt;/li&gt;&lt;li&gt;语言简化。 考虑删除过程宏功能，准备汲取Zig语言的编译器动态反射来替代当前的过程宏。另外，还要放弃ref和mut修饰符，用于简化用户的开发体验。&lt;/li&gt;&lt;li&gt;为了进一步增加安全性，将会添加： 依赖类型和有状态视图的支持。依赖类型有助于提升代码安全性，有状态视图有助于减少unsafe代码的使用。&lt;/li&gt;&lt;li&gt;编译器改进。考虑让rust编译器比gcc编译的更快。&lt;/li&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-608b4191d0692fea330e247284b16a90_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;202&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-608b4191d0692fea330e247284b16a90_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-608b4191d0692fea330e247284b16a90_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;202&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-608b4191d0692fea330e247284b16a90_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-608b4191d0692fea330e247284b16a90_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;祝大家愚人节快乐。&lt;/p&gt;&lt;h3&gt;Witnet Foundation： Rust区块链工程师招聘&lt;/h3&gt;&lt;p&gt;新加坡公司，非远程。Witnet-将智能合约连接到任何外部数据源。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//angel.co/witnet-foundation-1/jobs/342272-rust-developer-blockchain-medior-senior&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;成功故事：Rust在企业领域的应用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61410107&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;PingCAP Talent Plan 第二期火热来袭，线上课程全面开放！&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61340679&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;另外，我给准备参与此人才计划的选择阅读《Rust编程之道》的读者，提供一些提高学习效率的建议。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;先看第一章，对Rust有整体了解，重点是了解Rust社区、Rust语言架构和Rust编译过程&lt;/li&gt;&lt;li&gt;使用检索式阅读，把Rust By example过一遍，把Rust语法先通览一遍。&lt;/li&gt;&lt;li&gt;然后再看《Rust编程之道》第二章，重点理解「一切皆表达式」的概念，借此把语法再次梳理一遍&lt;/li&gt;&lt;li&gt;攻克所有权，同样检索式阅读看三四五章。&lt;/li&gt;&lt;li&gt;可以结合其他的学习资料，进行主题式阅读（针对一个主题，比较式阅读学习）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下图为检视阅读方法：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-04d8ee411675eb57349c163b208ca978_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;256&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-04d8ee411675eb57349c163b208ca978_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-04d8ee411675eb57349c163b208ca978_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;256&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-04d8ee411675eb57349c163b208ca978_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-04d8ee411675eb57349c163b208ca978_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3&gt;Linkerd v2: 从产品中吸取了什么了教训导致重写了服务网格？&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61617593&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;台湾 COSCUP 開源人年會&lt;/h3&gt;&lt;p&gt;COSCUP 2019 - Aug 17th-18th. NTUST, Taiwan 無論您是開放原始碼的開發者、推廣者、使用者、還是想了解軟體的新手，都歡迎您來參加為開放原始碼開發者、使用者和推廣者舉辦的「開源人年會」&lt;/p&gt;&lt;p&gt;在寻求Rust Topic征集。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.coscup.org/2019/04/2019-cfp-open.html%23rust%3Ftdsourcetag%3Ds_pcqq_aiomsg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt; &lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//coscup.org/2019/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;COSCUP 2019&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;GitHub 上有哪些值得关注的 Rust 项目？&lt;/h3&gt;&lt;p&gt;可以关注下这个知乎问题，下面链接是对区块链框架CITA的介绍。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/30511494/answer/643314455&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「讨论」Rust是不是一个好的C替代品？&lt;/h3&gt;&lt;p&gt;针对这篇文章「Rust不是一个好的C替代品（Rust is not a good C replacement）」引发的讨论。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//drewdevault.com/2019/03/25/Rust-is-not-a-good-C-replacement.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust is not a good C replacement&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/C_Programming/comments/b8cokd/rust_is_not_a_good_c_replacement/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「讨论」旁观Rust目前的状态&lt;/h3&gt;&lt;p&gt;有人在reddit发帖，探讨了他目前观察到Rust的一些状态，他关注的点是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;异步语法。正在积极地走向稳定。&lt;/li&gt;&lt;li&gt;消息队列（Graphql订阅、mqtt等）。被异步耽误了，目前Graphql订阅支持最有希望的是Actix。&lt;/li&gt;&lt;li&gt;嵌入式Rust。看起来得2019年年底成熟。&lt;/li&gt;&lt;li&gt;WASM（Graphql UI Client）。Yew好像最受欢迎，但是不支持wasm-bindgen，只能用stdweb，所以导致很难用webpack来处理css模块。当然也有人在解决这些问题。&lt;/li&gt;&lt;li&gt;云支持。看上去支持的不错。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;结论： 目前Rust生态已经处在一种「马上能成事」的边缘。作者表示，如果现在用Rust构建他想要实现的产品，可能需要自己构建或者等待一些工具（大约一年）。他也知道现在开始学习Rust正好，也可以提交一些PR来改进生态，但是他不想这样（233，估计是时间关系），然而他说，他可以出钱赞助这些加速生态发展的项目维护者。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ba7yci/state_of_rust_from_an_outside_pov/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;nom 5.0 发布预告&lt;/h3&gt;&lt;p&gt;nom是Rust社区的一个重要的解析工具，作者在reddit发帖表示将要发布5.0版本。（这是一个你没有看过的船新版本，挤需体验三分钟，里造会干我一样，爱象这个版本。）&lt;/p&gt;&lt;p&gt;你可以在nomfun项目里体验到nom的新设计。在这个库里完全看不到宏的影子了，取而代之的是Functor，用法和另一个解析库combine趋于一致。新版本据说性能会有5%-20%的提升，并且有更好的错误处理系统，同时保持大部分向后兼容。因为作者家里有事，可能5.0版本需要几个月才能发布，不过近期他会先发一个alpha版本，作者也列出了一个5.0的路线图。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ba366j/call_for_help_releasing_nom_50/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Geal/nomfun&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;nomfun&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Marwes/combine&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;combine&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Diesel的作者离开了Rails准备全职投入Rust&lt;/h3&gt;&lt;p&gt;Sgrif在Rails社区服务了6年多，提交了1452个commit，重写了Rails 4.2的大部分库。对Rust产生兴趣之后，创建了Diesel库，Rust实现的ORM框架。2018年4月，接手管理&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，但是2018年10月他从Shopify公司离职，想全职投入Rust社区。&lt;/p&gt;&lt;p&gt;他现在想要以下支持：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一份来自大公司的赞助，以便支持&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;的维护。&lt;/li&gt;&lt;li&gt;一份可以兼职的工作，以便维持生计。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.seantheprogrammer.com/moving-on-from-rails-and-whats-next&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;rustsim 报告 #5&lt;/h3&gt;&lt;p&gt;简要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;alga 0.9 和 nalgebra 0.18开始支持复数&lt;/li&gt;&lt;li&gt;并且与&lt;code&gt;＃[no-std]&lt;/code&gt;保持兼容&lt;/li&gt;&lt;li&gt;nalgebra开始在几何代数上添加对三角函数和卷积的支持等等。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.rustsim.org/blog/2019/04/01/this-month-in-rustsim/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;一个Elixir/Javascript程序员准备切换到Rust的思考&lt;/h3&gt;&lt;p&gt;他发帖主要是想寻求一个快速学习的方法，如果有同样需求的初学者，可以看看讨论区的回复。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b7qjmq/elixirjavascript_programmer_thinking_of_switching/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;已经有人写了 WASI 和 Lucet 的两篇使用文章&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Post 1&lt;/a&gt;&lt;br/&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hermanradtke.com/2019/03/31/lucet-in-five-minutes.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Post 2&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Mesalink v1.0.0发布&lt;/h3&gt;&lt;p&gt;MesaLink TLS是百度安全实验室研发的下一代传输层安全(Transport Layer Security, TLS)库。正式支持TLS 1.3和IPv6，支持CMake编译，支持Windows，实现生产环境可用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/O6rRwJGMGWuy7bziwul6eg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「远程工作」Chorus One寻找加密软件工程师&lt;/h3&gt;&lt;p&gt;要求懂得Go或Rust。该团队成立15个月，有6名团队成员，工作主要是区块链相关。公司在美国西海岸，可全职远程。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blockchain.works-hub.com/jobs/remote-cryptonomic-software-engineer-1f007%3Futm_source%3Dreddit%26utm_medium%3Dchorus%2520one%26utm_campaign%3Dj.gretton&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;采访Gleam的作者：使用Rust编写Erlang VM&lt;/h3&gt;&lt;p&gt;长文。关键问题：&lt;/p&gt;&lt;p&gt;为什么选择Rust来实现Gleam编译器？ （而不是选择erlang / elixir等）&lt;/p&gt;&lt;blockquote&gt; Gleam最初是用Elixir来写的，但很快又换成了Erlang，后来他想要重构代码但是意识到，没有一个好的静态类型来帮助它纠正设计中的错误，所以就对重构失去了信心。后来选择了Rust，花了3个月时间重构了，功能大致相同，但是有更少的错误和更少的技术债务。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;Rust是实现编程语言的好语言吗？&lt;/p&gt;&lt;blockquote&gt; 作者表示Rust不错，很适合。并且用Rust实现Erlang VM之后启动和加载各种模块不再有延迟。但是他认为，Rust还不是实现编程语言的完美语言，主要是编写类型检查的代码让他很沮丧。但总的来说，他对自己用Rust的决定还是挺满意的。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//notamonadtutorial.com/an-interview-with-the-creator-of-gleam-an-ml-like-language-for-the-erlang-vm-with-a-compiler-e94775f60dc7&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列文章」glium指南&lt;/h3&gt;&lt;p&gt;这应该是对官方Glium book的中文翻译&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/57805534&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;编译器性能和LLVM&lt;/h3&gt;&lt;p&gt;本文作者以他自己实现的Cone编译器为案例深度探索了编译器架构和LLVM的性能，并比较全面地阐述了LLVM的性能概况。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;编译器架构。Cone选择了C，而非Rust，是因为作者对性能更关心一些，他认为C更好。还介绍了一些前端架构的优化原则。&lt;/li&gt;&lt;li&gt;LLVM后端性能。作者测量了LLVM后端各个编译阶段的性能，顺带阐述了LLVM的构建流程。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;LLVM构建流程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Setup。初始化有关目标计算机，数据布局和全局上下文的信息。这个阶段的执行时间是固定的，不会随着源程序的增大而变长。&lt;/li&gt;&lt;li&gt;Gen LLVM IR。Cone和LLVM的混合阶段，作者的Cone编译器会生成LLVM IR，就像Rust一样。同时作者也实现了一个Cone IR，类似于Rust的MIR。但Cone可能比Rust更快一些，因为没有Rust这么多分析。&lt;/li&gt;&lt;li&gt;验证LLVM IR。这个过程是对LLVM IR的有效语义进行分析。确保IR的格式正确、通过类型检查，其算法复杂度为O(n)，与LLVM IR节点的数量成正比。&lt;/li&gt;&lt;li&gt;优化LLVM IR。将执行6次LLVM优化：将栈变量转换为寄存器、函数内联、窥孔优化（peephole optimization）、位操作优化（bit twiddling）、公共子表达式消除和控制流程简化。一些优化过程可能是O(n)，但某些复杂的可能是指数级的。&lt;/li&gt;&lt;li&gt;生成目标，并将其存储于磁盘。此阶段占整个LLVM运行时间的73%。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;小百科&lt;/p&gt;&lt;blockquote&gt; 窥孔优化可以在四个方面寻找优化机会：冗余指令删除，包括冗余的load和store指令以及死代码(不会执行的代码);控制流优化；强度削弱；利用特有指令。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;作者也从LLVM架构上探讨了LLVM缓慢的原因。并且作者还打算继续研究优化LLVM的方案以及替代LLVM的方案。更多详细请阅读原文。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//pling.jondgoodwin.com/post/compiler-performance/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b98v3c/compiler_performance_and_llvm/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「系列文章」Rust中实现DSL的挑战&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.yoshuawuyts.com/dsls-1/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Part I&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.yoshuawuyts.com/2019-03-03-dsls-2/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Part II&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;解释：Rust异步如何工作？&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//dev.to/gruberb/explained-how-does-async-work-in-rust-46f8&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列文章」理解Futrue Part I&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.viget.com/articles/understanding-futures-in-rust-part-1/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用Tensorflow Rust进行人脸识别&lt;/h3&gt;&lt;p&gt;本文将引导你基于一些现有模型来使用rust和tensorflow完成面部识别。 使用的是名为mtcnn的预训练模型进行人脸识别。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//cetra3.github.io/blog/face-detection-with-tensorflow-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/cetra3/mtcnn&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mtcnn&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;高性能JavaScript词法分析器&lt;/h3&gt;&lt;p&gt;该篇文章分享了如何使用Rust实现一个基于状态机的高性能的JS词法分析器。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40retep007/javascript-lexing-for-high-performance-f9a800ec930d&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/retep007/javascript-es9-parser&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;javascript-es9-parser&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;介绍Seqlocks&lt;/h3&gt;&lt;p&gt;seqlocks（顺序锁）对读写锁的一种优化。使用顺序锁，读执行单元绝不会被写执行单元阻塞，也就是说，读执行单元可以在写执行单元对被顺序锁保护的共享资源进行写操作时仍然可以继续读，而不必等待写执行单元完成操作，写操作也不需要等待所有读执行单元完成读操作才去进行写操作。用于受保护的资源很小，简单且经常访问，适用于写操作很少但必须很快的场景。Linux内核处理中断的函数使用了seqlock。 &lt;/p&gt;&lt;p&gt;该文作者也是实验性软件事务内存库swym的作者，swym是对seqlock的一种实现，基于Transactional Locking II 论文。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mtak-blog.github.io/generalizing-seqlocks&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/mtak-/swym&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;swym&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//people.csail.mit.edu/shanir/publications/Transactional_Locking.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Transactional Locking II 论文&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Rust中的惯用monad&lt;/h3&gt;&lt;p&gt;「长文预警」本文作者描述了一种在Rust中表达Monad的新方法，用于证明在Rust中实现Monad的可行性。作者说这是他见过的最简单的设计。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//varkor.github.io/blog/2019/03/28/idiomatic-monads-in-rust.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;使用Rust的条件编译来实现Mock功能&lt;/h3&gt;&lt;p&gt;写单元测试的时候经常需要mock一些场景，比如访问外部服务。但是传统的mock服务是在测试代码中创建一些模拟的对象。Rust中的一些mock框架也是类似的做法，参加「mock框架比较」。但是最大的问题是无法mock出代码中使用的外部结构。Rust中没有继承的概念，所以无法mock出标准库或者外部包中使用的结构类型。有一种解决办法是用trait或泛型，但是这种方法可能会使代码更复杂。而另一种方法则是利用条件编译，这也是本文作者想要介绍的。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#[cfg(test)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_clock&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;FakeClock&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[cfg(not(test))]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在测试的时候使用fake_clock的mokc对象，而非测试的情况则使用Instant。&lt;/p&gt;&lt;p&gt;但这样也有一些缺点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;所有测试用例共享一个mock，但是如果每个测试用例需要不同的mock行为，则需要想想其他策略&lt;/li&gt;&lt;li&gt;更加需要集成测试。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在使用该文作者编写的http mock库mockito就可以使用条件编译：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#[cfg(test)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[cfg(not(test))]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;https://api.twitter.com&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[cfg(test)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockito&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;server_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//klausi.github.io/rustnish/2019/03/31/mocking-in-rust-with-conditional-compilation.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/lipanski/mockito&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mockito&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//asomers.github.io/mock_shootout/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust社区mock库比较&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;“高阶多态双向检查”的Rust实现&lt;/h3&gt;&lt;p&gt;该库是对论文《Complete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism》的实现&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/JDemler/BidirectionalTypechecking&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;BidirectionalTypechecking&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.cl.cam.ac.uk/~nk480/bidir.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Complete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Rust和性能测试指南&lt;/h3&gt;&lt;p&gt;这篇文章主要关注在Rust中如何创建令人满意的基准测试&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//nbsoftsolutions.com/blog/guidelines-on-benchmarking-and-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;「系列文章」审阅Sled源码 Part I&lt;/h3&gt;&lt;p&gt;Sled项目是一个用Rust编写的嵌入式数据库。该文作者在日程工作中用到了它，为了掌握它的工作原理，准备开始写这个系列的博客。也可以通过学习此文，掌握一些阅读开源项目源码的技巧或其他启示，比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;先找你擅长领域的项目去阅读，事半功倍。&lt;/li&gt;&lt;li&gt;从整体上先把握代码组织结构、依赖库，从所获得的信息中去推测更多信息。&lt;/li&gt;&lt;li&gt;携带某个主要的问题去看源码是如何实现的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;该文作者还有一个完整的review LevelDB的系列文章：reviewing-leveldb&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ayende.com/blog/186753-A/reviewing-sled-part-i&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ayende.com/blog/posts/series/161410/reviewing-leveldb&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;reviewing-leveldb&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;案例：使用Rust和Lucet&lt;/h3&gt;&lt;p&gt;Lucet是一个本地WASM编译器和运行时。基于Lucet运行时，Rust编译为wasm32-unknown-wasi target就可以创建一个运行于服务端的wasm程序。目前wasm32-unknown-wasi只支持Rust Nightly（2019-04-01版本确定可用）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/59464&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust官方PR： Add a new wasm32-unknown-wasi target&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Arenas vs. Indices：為型別寫函數要寫在型別裡還是外面？&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b9y8ov/arenas_vs_indices/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;ArcSwap的袖里乾坤&lt;/h3&gt;&lt;p&gt;ArcSwap可以自动存储和加载Arc，类似于&lt;code&gt;RwLock&amp;lt;Arc &amp;lt;T &amp;gt;&amp;gt;&lt;/code&gt;但没有锁。适合于频繁读取但不经常修改的数据，如配置或内存数据库每秒请求数百万次查询等。这篇文章中，作者揭示了ArcSwap的工作机制。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//vorner.github.io/2019/04/06/tricks-in-arc-swap.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/vorner/arc-swap&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;arc-swap&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;「讨论」Rust项目配置的最佳实践是什么？&lt;/h3&gt;&lt;p&gt;有人在reddit上面开贴询问这个问题，评论里也有很多人讨论。大家还有什么推荐？&lt;/p&gt;&lt;p&gt;（我个人用的是dotenv了）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ba4dr3/configurations_best_practices/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit讨论&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;不要序列化默认值&lt;/h3&gt;&lt;p&gt;默认情况下，serde在序列化结构时包括所有字段，即使它们的值是默认值。 这可能导致一些包含空值的「污染」。本篇文章教你如何跳过这些默认值。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.mth.st/blog/skip-default/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h3&gt;DataFusion 0.13 发布了&lt;/h3&gt;&lt;p&gt;本次是作为 Apache Arrow 的一部分发布的。&lt;/p&gt;&lt;p&gt;目前有几大特性支持：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Parquet 支持&lt;/li&gt;&lt;li&gt;自定义数据源支持&lt;/li&gt;&lt;li&gt;实验性数据帧风格 API&lt;/li&gt;&lt;li&gt;Query 优化&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//andygrove.io/2019/04/datafusion-0.13.0/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;yarte 0.2 现在支持actix-web 1.0.0-alpha&lt;/h3&gt;&lt;p&gt;yarte号称最快的模板引擎，之前和Askama模板的作者有过Lisense相关的争议。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/examples/tree/master/template_yarte&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-iendo/yarte&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;yarte&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;bstr: 提供不需要验证UTF-8有效性的字符串&lt;/h3&gt;&lt;p&gt;该库提供了BString和BStr两种字符串类型，与标准库的String和str类型的不同之处在于它们不需要是有效的UTF-8。&lt;/p&gt;&lt;p&gt;该库不是对标准库Sring的包装，值得看看源码。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/BurntSushi/bstr&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bstr&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;amiquip: 纯Rust实现的RabbitMQ客户端&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/jgallagher/amiquip&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;amiquip&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;HugoToJSON: 用于生成Hugo文档的关键内容的json&lt;/h3&gt;&lt;p&gt;主要用来给Hugo静态站点提供搜索，目前该库请求review。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/arranf/HugoToJSON&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HugoToJSON&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;git-rs  -  用 rust 重新实现的 git&lt;/h3&gt;&lt;p&gt;作者只是为了好玩儿和教育目的？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/chrisdickinson/git-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;evtx - Windows XML 事件日志解析器&lt;/h3&gt;&lt;p&gt;可能是（世界上）最快的 Windows XML Event Log 解析器了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/omerbenamram/evtx&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;作者还做了一个 py 的封装。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/omerbenamram/pyevtx-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Pushrod - 基于 piston_window 的 GUI 库&lt;/h3&gt;&lt;p&gt;不过看起来好像还很嫩。Rust 目前为止还没有一个靠谱的原生 GUI 库。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/KenSuenobu/rust-pushrod/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Lens: 纯Rust实现的Linux用户空间&lt;/h3&gt;&lt;p&gt;可替代Linux用户空间，但目前只是简陋版。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b8qy70/my_new_project_a_purerust_userspace_for_the_linux/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//lens-os.gitlab.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;lens-os.gitlab.io&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;aerosol 0.2 发布&lt;/h3&gt;&lt;h2&gt;DI&lt;/h2&gt;&lt;p&gt;支持编译时依赖注入&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Diggsey/aerosol&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;aerosol&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;desse: 用于编译时已知大小类型的超快序列化库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/devashishdxt/desse&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;desse&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;mips-simulator: Rust实现的MIPS汇编模拟器&lt;/h3&gt;&lt;p&gt;MIPS汇编常用于教学目标，MIPS指令集属于精简指令集&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/salahsheikh/mips-simulator&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mips-simulator&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;undermoon: 支持Redis集群的Server端Redis代理&lt;/h3&gt;&lt;h2&gt;redis&lt;/h2&gt;&lt;p&gt;由国内Rust社区成员 @黄光星 开发&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/doyoubi/undermoon&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;undermoon&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;hazptr: 基于Hazard指针的并发内存回收&lt;/h3&gt;&lt;p&gt;问题：在多线程程序中，某线程通过一个指针访问一段内存时，如何保证指针所指向的那块内存是有效的？&lt;/p&gt;&lt;p&gt;普通青年： 加锁。 文艺青年： 无锁实现，使用HazardPointer。 二逼青年： 根本没有意识到这是个问题。&lt;/p&gt;&lt;p&gt;HazardPointer可以理解为是一种线程安全的智能指针。相比于crossbeam-epoch的基于代的回收方案效率更低。但如果追求回收的可靠性，HazardPointer更可靠点。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/oliver-giersch/hazptr&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hazptr&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b8go1z/hazptr_hazard_pointer_based_memory_reclamation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;tract: 适用于TF和ONNX的小型推理引擎&lt;/h3&gt;&lt;p&gt;对语音处理等实时应用也提供半实验性支持。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/snipsco/tract&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tract&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;trassh: 一个简单的SSH蜜罐&lt;/h3&gt;&lt;p&gt;类似于Endlessh，它会打开一个套接字并伪装成一个 SSH 服务器，非常缓慢地发送一个无休止的随机 SSH banner，使 SSH 客户端一次锁定数小时甚至数天。目的是将真正的 SSH 服务器放在另一个端口上，而在虚假的服务器上卡住入侵者，防止其影响到真正的服务器。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/Freaky/tarssh&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tarssh&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Inko: Rust实现的面向对象语言&lt;/h3&gt;&lt;p&gt;号称安全无痛地处理并发，主要是支持类Erlang轻量级进程来处理并发。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//inko-lang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;inko-lang.org&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Smithy： 一个Rust实现的WebAssembly框架&lt;/h3&gt;&lt;p&gt;状态：0.0.2 Alpha版本。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/%40robert.balicki_2494/introducing-smithy-webassembly-framework-for-rust-679d8fe9c16&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rbalicki2/smithy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;smithy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//smithy-todolist.robertbalicki.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线Demo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rbalicki2/smithy_todolist&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;demo源码：smithy_todolist&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;UFO: 用于无人机/无人机/四轴飞行器/RC航模的Rust库&lt;/h3&gt;&lt;p&gt;状态：WIP&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ajmwagar/ufo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ufo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;minitt-rs:  Mini-TT的Rust实现&lt;/h3&gt;&lt;p&gt;Mini-TT是一个简单的依赖类型语言。minitt-rs是它的Rust实现，并且还提供了一个REPL。 作者是@ice1000&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/owo-lang/minitt-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;minitt-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//59.80.44.49/www.cse.chalmers.se/~bengt/papers/GKminiTT.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mini-TT论文&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Rust source code行數變化&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d4d8b7faaa52be8a1f0fe69b18807423_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-d4d8b7faaa52be8a1f0fe69b18807423_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d4d8b7faaa52be8a1f0fe69b18807423_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-d4d8b7faaa52be8a1f0fe69b18807423_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-d4d8b7faaa52be8a1f0fe69b18807423_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;使用工具 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/src-d/hercules&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/src-d/hercul&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b9shaz/burndown_chart_of_rust_source_code_lines_by_year/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Zola 0.6.0&lt;/h3&gt;&lt;p&gt;一個快速的靜態網站產生器，讓人快速的產生blog上傳到github上&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/b9rc50/zola_060_released/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-07-61648926</guid>
<pubDate>Sun, 07 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Linkerd v2: 从产品中吸取了什么了教训导致重写了服务网格？</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-07-61617593.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61617593&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-65fe0fa8569438378516307a3bbdfee8_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;原文： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.infoq.com/articles/linkerd-v2-production-adoption&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;infoq.com/articles/link&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;erd-v2-production-adoption&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;br/&gt;注： 本文不是翻译，只是重点信息摘要&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;Linkerd的服务之前是Scala写的，并且受到了Twitter在Finagle RFC系统上工作的启发。但是Linkerd 2却用Go（Control Plane）和Rust（Data Plane）进行了重写。&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;（这让我想到Twitter曾经宣布用Scala/Java替换Ruby的新闻，感受到了时代的车轮在转动。本文作者是Buoyant的CEO和联合创始人。在加入Buoyant之前，他是Twitter的基础架构工程师，就是他帮助将Twitter从一个失败的单片Ruby on Rails应用程序迁移到基于Scala的高度分布式，容错的微服务架构）&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;Buoyant团队对底层的Rust网络堆栈进行了深入的技术投资，并将UX重新定位于简单性，易用性和低认知开销上。结果显着更快，更轻，更简单。&lt;br/&gt;自Linkerd 2.0发布至今已有六个多月，该团队认为重写已经带来了好处，许多以前无法采用1.x分支的用户现在乐于采用2.x。&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;b&gt;Linkerd团队从1.0产品中吸取了什么教训？&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;尽管Linkerd取得了成功，但许多组织不愿意将Linkerd部署到生产中，或者愿意为了这样做而不得不进行重大投资。这种摩擦是由下面几个因素引起的。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;有些组织不愿意将JVM引入其运营环境。 JVM具有特别复杂的操作表面，一些操作团队无论是对还是错，都避免将任何基于JVM的软件引入其技术栈 - 特别是像Linkerd这样扮演关键任务的角色。&lt;/li&gt;&lt;li&gt;其他组织不愿意分配Linkerd所需的系统资源。一般来说，Linkerd 1.x非常擅长扩展 - 如果有足够的内存和CPU，单个实例每秒可以处理数万个请求 - 但它不擅长缩减：很难获得内存单个实例的占用空间低于150 MB的RSS。 Scala，Netty和Finagle使问题变得更糟，因为它们都旨在最大限度地提高资源丰富环境中的吞吐量，即以牺牲内存为代价。&lt;/li&gt;&lt;li&gt;由于组织可能部署数百或数千个链接器代理，因此这种占用空间非常重要。作为替代方案，我们建议用户为每个主机而不是每个进程部署Data Plane，从而允许用户更好地分摊资源消耗。但是，这增加了操作的复杂性，并限制了Linkerd提供某些功能（如每服务TLS证书）的能力。&lt;/li&gt;&lt;li&gt;存在复杂性问题。 Finagle是一个具有大型功能集的丰富库，通过配置文件或多或少直接向用户公开了许多这些功能。因此，Linkerd 1.x可定制且灵活，但学习曲线陡峭。特别是一个设计错误是使用委托表（dtabs），一种由Finagle使用的回溯，分层，后缀保留的路由语言，作为基本配置原语。任何试图自定义Linkerd行为的用户都会很快遇到dtabs，并且必须投入很大精力。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;（更新的JVM显着改善了这些数字。在IBM的OpenJ9下，Linkerd 1.x的资源占用和尾部延迟大大减少，而Oracle的GraalVM承诺会进一步降低它。小声嘀咕：但这也改变不了第一条）&lt;/blockquote&gt;&lt;h3&gt;&lt;b&gt;船新的开始&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;痛定思痛之后，Linkerd开始改变。定了几个目标：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;目标1:&lt;b&gt; 最低资源配置&lt;/b&gt;。Linkerd 1.x中，控制层和数据层都是基于JVM实现的，但实际上这两件产品是完全不同的。控制层对性能和资源的要求比较宽松，而数据层对性能和资源的要求非常严格，而且必须安全。所以2.x就采用Go语言来写控制层，Rust来写数据层。但是为什么控制层也不用JVM呢？Go比JVM更轻量，而且在K8S生态中有很多现成的库。数据层最初他们也考虑过Cpp，但从一开始他们就知道Rust是最符合他们要求的语言，并且团队的Scala工程师也非常喜欢Rust语言。但在2017年，Rust生态有一个非常大的缺点，就是确实网络库的支持，他们对Rust的网络库也投资了大量精力。（我想这就是他们赞组tokio作者的原因，后来出了tower库）&lt;/li&gt;&lt;li&gt;目标2: &lt;b&gt;正常工作&lt;/b&gt;。&lt;/li&gt;&lt;li&gt;目标3: &lt;b&gt;简单&lt;/b&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;b&gt;小结：&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;最后在2018年9月他们推出了Linkerd2.0，六个月后，也就是2019年3月了，这种改变已经产生了回报，之前很多不愿意使用1.x的用户都接受了2.x。&lt;/p&gt;&lt;p&gt;他们对Rust的选择引起了人们的极大兴趣。他们也承认，这是一种赌博，之前发布的早期产品叫「Conduit」，原因是害怕“玷污”了Linkerd的品牌（233......），现在证明赌博是赌对了。&lt;/p&gt;&lt;p&gt;从2017年开始，Linkerd团队对Rust网络库（Tokio、Tower和Hyper）进行了大量的投入（对Rust生态贡献很大）。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-07-61617593</guid>
<pubDate>Sun, 07 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>故事：Rust在企业领域的应用</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-04-04-61410107.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61410107&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-13aa2b7979c0ca3681c91c2a8afb51c1_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;也许这个故事可以给你一些启示，帮助你在公司内推广Rust&lt;br/&gt;原文： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//jobs.zalando.com/tech/blog/story-rust/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;jobs.zalando.com/tech/b&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;log/story-rust/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;  &lt;br/&gt;说明：本文为摘要描述。&lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本文描述了zalando公司从Scala转向Rust的成功故事。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;缘起：&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;2016年该文作者作为Scala开发者加入了Zalando公司。半年后，他们打算开始做一个新的应用，与此同时，团队内商量该使用什么新技术，Rust就在这时被提及，同时他们也用Rust快速实现了原型，但是最后这个新应用被取消了。但Rust却成为了该团队的一门候选语言。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;碰壁：&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;不久之后，Zalando的主要服务（Scala Web）出现了一些问题。在高负载情况下，应用程序出现了大量的内存占用，有时也会耗尽内存。所以他们起了一个念头：用Rust重写整个服务会怎么样？经过几天的实验，重写了该服务，测试以后发现比之前的scala程序有更好的延迟，内存和CPU也占用更少。而且可以处理更多的负载。这时，他们的领导友情提醒，Rust并不是团队的「官方」技术，如果要将此Rust程序正式上线到生产环境，可能会出现严重的风险。最后经过Zalando技术团队内部协商，Rust最终被决定为「评估」状态，所以这件事就又就此作罢了。&lt;br/&gt;&lt;br/&gt;&lt;b&gt;破竹：&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;事情在2017年中期实施新的服务产生了转机。他们准备实现一个简单的流服务，就是执行一些RESTful调用再将数据写入redis。领导再次对他们表示了关切：是否可以真的上生产环境？新人来了以后如何接手Rust？于是他们在接下来的几周内，重点分析了应用程序中可能出现的问题，并找出了如何使用Rust来避免这些问题，核心原因是Rust的安全性和生产力，而且使用Rust可以有效地利用资源。他们有计划使用k8s来运行pods节省成本。就这样和领导「推杯换盏」持续说服花了半年时间，接近年底的时候他们都不知道到底Rust能不能上生产。&lt;br/&gt;&lt;br/&gt;在2017年年底的时候，为了应对需求变化而对团队进行了重组。作者本来是6人团队，减少到4人。然后领导说：你们这是一个Rust团队。这真的是出乎了作者的意料。事情就这么落地了。他们从一个简单的CRUD项目开始逐步将旧的系统替换为Rust实现的新系统。最后，他们实现了最初的目标，将Rust引入了团队成为了「官方技术」。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-04-04-61410107</guid>
<pubDate>Thu, 04 Apr 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第十期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-03-17-59549951.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/59549951&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-03-17&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;通告&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rusty棒球帽周边定制活动已发货&lt;/h2&gt;&lt;p&gt;请大家查收邮件。另外想要帽子的也没有存货了，期待下次的活动吧。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust核心团队加入了两员大将&lt;/h2&gt;&lt;p&gt;新加入的是Manishearth和Skade。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/new-members-for-the-rust-core-team/9575&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」Rust树莓派3指南新增JTAG章节&lt;/h2&gt;&lt;p&gt;JTAG介绍（摘自网络）：&lt;/p&gt;&lt;blockquote&gt; JTAG是最基本的通讯协议之一，大家可以理解为与RX TX或者USB的道理是一样的，只是一种通讯手段，但与RX TX以及USB有很重大的不同，那就是这个JTAG协议是最底层的，说的通俗一点，一般来说，手机里边，CPU是老大，对吧？但在JTAG面前，他就不是老大了，JTAG协议就是用来控制CPU的，在JTAG面前CPU变成喽啰了。一般的协议是求着CPU读写字库的程序，但JTAG可以读写CPU的程序，命令让CPU啥活都干。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;这份指南（rust-raspi3-OS-tutorials）是Rust嵌入式官方工作组出品的。该教程旨在旨在为Rust系统编程语言中的Raspberry Pi 3上的裸机编程提供简单的参考代码。重点是利用Rust的零开销抽象来编译可读，简洁和安全的精益代码（至少在裸机硬件上是安全的）。它只是针对不同的主题分出不同的教程，不是完整的OS教程，也许在不远的将来可以实现一个完整内核的教程（但不要相信我说的）。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-embedded/rust-raspi3-OS-tutorials/tree/master/0B_hw_debug_JTAG&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;稳定&lt;code&gt;std::task&lt;/code&gt;和&lt;code&gt;std::future::Future&lt;/code&gt;的RFC已被合并&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::task&lt;/code&gt;和&lt;code&gt;std::future::Future&lt;/code&gt;是将async/await稳定为第一类公民的基础。该RFC涵盖了：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;std中task模块的所有API&lt;/li&gt;&lt;li&gt;core和std的future模块&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/pull/2592&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 2592 pr&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「Rust和WASM工作组」让我们一起构建Gloo&lt;/h2&gt;&lt;p&gt;Rust和WASM工作组的2019愿望是希望为Rust和WASM开发构建稳定、可持续、生产化的生态系统。为了实现这个目标，工作组推出了Gloo，它是一个模块化的工具包，作用如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;构建更小且能集成到大型JavaScript系统种的WASM模块&lt;/li&gt;&lt;li&gt;可以用Rust编写整个Web应用&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Gloo于WASM的目标，等价于Tide于服务端Web的目标。Gloo将进一步抽象出高级的库和框架，易于开发。该项目才刚刚开始，欢迎参与。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rustwasm.github.io/2019/03/12/lets-build-gloo-together.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rustwasm/gloo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rustwasm/gloo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「官方通告」关于&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;更新了索引处理方式的说明&lt;/h2&gt;&lt;p&gt;(原来Diesel作者sgrif也参与了&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;的维护)&lt;/p&gt;&lt;p&gt;之前是同步的方式，现在改成了异步。所以，如果你发布crate的时候，如果没有发现错误，也并不意味着你可以正常发布你的crate。主要是因为有延迟问题，现在最大延迟是3秒，如果依赖的包太多，你可能需要重试几遍？？当然，官方目前正在处理这个问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/changes-to-how-crates-io-handles-index-updates/9608&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方会议讨论视频记录」Rust Unsafe代码指南讨论&lt;/h2&gt;&lt;p&gt;这是Rust官方不安全工作组的讨论视频记录，主题是Unsafe Rust代码指南。一共六个人参与讨论，大家感兴趣可以看看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DatRKeoWbfi0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust有多高效？&lt;/h2&gt;&lt;p&gt;该文章作者，在Google的Hash Code 2019编程竞赛活动中对Rust的高效能力进行了测试。&lt;/p&gt;&lt;blockquote&gt; Hash Code是一个团队编程竞赛，所有团队必须在4小时的时间窗口内解决单个工程问题。今年，来自世界各地的6000多支队伍参赛。 Hash Code提出的问题一直是NP-hard的优化问题，需要实现近似解决方案。因为每个团队只有4个小时来实施，而且还运行他们的解决方案，所以他们不能是CPU密集型的。通过对其近似解决方案生成的结果进行评分来对团队进行排名。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;问题：&lt;/p&gt;&lt;p&gt;今年的问题是由一组照片创建幻灯片。这些幻灯片的评分取决于它们的有趣程度。每张照片都有一组与之关联的标签。&lt;/p&gt;&lt;p&gt;竞争对手：&lt;/p&gt;&lt;p&gt;Java，C / C ++，Python和C＃等主流语言。而作者的团队当然是用Rust。&lt;/p&gt;&lt;p&gt;结论：&lt;/p&gt;&lt;p&gt;作者的团队取得了第783名的成绩（6000个团队），所以，通过这次测试，作者认为Rust是足够高效的语言。当然，编程竞赛属于一种特定场景，但在短短4小时内解决一个问题，也可以说明一门语言是否高效了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40woutergeraedts/how-productive-is-rust-e2260db28f09&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;基于Pathfinder和Servo实现VR中使用GPU对SVG渲染&lt;/h2&gt;&lt;p&gt;Pathfinder 2是一款快速，实用，正在进行中的基于GPU的光栅化工具，用于使用OpenGL和OpenGL ES 2.0+进行字体和矢量图形处理。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fe0a185e352a0825705d9ee13d25f459_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;805&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-fe0a185e352a0825705d9ee13d25f459_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fe0a185e352a0825705d9ee13d25f459_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;805&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-fe0a185e352a0825705d9ee13d25f459_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-fe0a185e352a0825705d9ee13d25f459_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/pcwalton/pathfinder&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pathfinder&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;开源游戏引擎GDNative发布Rust官方绑定godot-rust&lt;/h2&gt;&lt;p&gt;该开源游戏引擎据说还支持开发AR&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/GodotNativeTools/godot-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;godot-rust&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//godotengine.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;当Rust遇上机器学习：SIMD、BLAS和Lapack&lt;/h2&gt;&lt;p&gt;该文作者是一名数据科学家，有90%的编程工作都是和Python打交道。几个月前，该作者对Rust产生了兴趣，但是发现Rust在机器学习的关键限制是缺乏开发体验良好的线性代数库。有nalgebra和ndarray其他几个库，但是作者认为不好用，没有针对底层的SIMD、blas和Lapack高性能数值计算。作者用的最多的是ndarray。&lt;/p&gt;&lt;p&gt;虽然不好用，但作者发现Rust非常适合编写高性能代码。使用blas-src和lapack-src，以及Rust内置的SIMD函数就可以编写令人惊讶的Rust代码。&lt;/p&gt;&lt;blockquote&gt; BLAS（Basic Linear Algebra Subprograms，基础线性代数程序集）是一个应用程序接口（API）标准，用以规范发布基础线性代数操作的数值库（如矢量或矩阵乘法）。该程序集最初发布于1979年，并用于建立更大的数值程序包（如LAPACK）。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;这篇文章简单介绍了如何在Rust中使用SIMD、BLAS和Lapack。最后给出了一个结论：&lt;/p&gt;&lt;blockquote&gt; 摩尔定律正在失去效用，所以如果我们想要继续蓬勃发展机器学习的生态系统，就需要学会优化机器学习。与Python调用C相比，使用此方法（Rust中使用SIMD/BLAS/LAPACK）可实现性能4-10倍的提升。Rust也非常适合调试，严格的类型可以在执行数据工程时提供良好的实践。 我劝你：开始尝试使用Rust进行机器学习吧。虽然现在它会有点令人小失望，但在未来几年内会得到回报。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.erikpartridge.com/2019-03/rust-ml-simd-blas-lapack&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「视频」介绍RMS和Apache Arrow&lt;/h2&gt;&lt;p&gt;演讲者是DataFusion的作者&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DiQcOW2fVX2c&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;hi Rustaceans! Rust有问题该去哪里问？&lt;/h2&gt;&lt;h2&gt;Question&lt;/h2&gt;&lt;p&gt;这个帖子里有人整理了一些提问的地方：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;StackOverflow, &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/tagged/rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust Tag&lt;/a&gt;&lt;/li&gt;&lt;li&gt;CodeReview.Stackexchange, &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//codereview.stackexchange.com/questions/tagged/rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust Tag&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Reddit, &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/learnrust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;r/learnrust&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Rust官方User论坛, &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//users.rust-lang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;users.rust-lang.org&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Rust相关的IRC频道， &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//client00.chat.mibbit.com/%3Fserver%3Dirc.mozilla.org%253A%252B6697%26channel%3D%2523rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;#rust&lt;/a&gt;，这样的频道还有好几个： &lt;code&gt;#rust-beginners&lt;/code&gt;/ &lt;code&gt;#cargo&lt;/code&gt;/ &lt;code&gt;#rust-gamedev&lt;/code&gt;/ &lt;code&gt;#rust-osdev&lt;/code&gt;/ &lt;code&gt;#rust-webdev&lt;/code&gt;/ &lt;code&gt;#rust-networking&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以上是国外的，我整理一下国内的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust社区QQ群（253849562/813448660） /微信群/Telegram群 （&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_zh&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;t.me/rust_zh&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;rust.cc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; 论坛&lt;/li&gt;&lt;li&gt;《Rust编程之道》读者群/ 随书源码issues （最好交流和本书学习相关的）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;微信加群方式可以私聊&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/azqo9c/hey_rustaceans_got_an_easy_question_ask_here/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;ZEIT的Now服务宣布支持Rust&lt;/h2&gt;&lt;p&gt;ZEIT是一个Serverless服务平台，的主打产品是 now，一个一行命令就能发布Node或者Docker应用的PaaS，现在支持了Rust。因为Rust性能太好，所以ZEIT可能会推出基于1ms的定价（233）。&lt;/p&gt;&lt;p&gt;为了演示，他们基于now服务发布了一个简单的Rust爬虫，基于servo：rust-scraper.now.sh，可以爬Hackernews的新闻。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//zeit.co/blog/introducing-now-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/zeit/now-builders/tree/master/packages/now-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;now-rust&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rust-scraper.now.sh/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-scraper.now.sh&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;可在线搜索Rust代码的服务&lt;/h2&gt;&lt;p&gt;基于&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;来搜索&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//codesearch.aelve.com/rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;codesearch.aelve.com/rust&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust编程中的好的、坏的、丑的&lt;/h2&gt;&lt;p&gt;这篇文章总结了Rust语言、工具、库中作者认为好的地方、不好的地方，以及作者感觉有点丑陋的地方。虽然有点主观，我也不同意他的某些观点（比如他认为宏很丑陋，我觉得还好），但觉得值得分享出来让大家看看。&lt;/p&gt;&lt;p&gt;（这位博主说他12岁就开始写代码了）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//hackernoon.com/programming-in-rust-the-good-the-bad-the-ugly-d06f8d8b7738&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/azw9cn/programming_in_rust_the_good_the_bad_the_ugly/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;科学Rust&lt;/h2&gt;&lt;p&gt;任何涉及使用计算机进行科学研究的东西都算作科学编程。它包括从运行在卫星上的嵌入式软件到运行在超级计算机中的气候模型，从运行管道工具的shell脚本到使用笔记本电脑的数据分析。&lt;/p&gt;&lt;p&gt;该文作者在生物学领域做科学编程的工作，在这篇文章里，描述了他对于Rust的2019期望，给出了Rust如何做才能更好地面向科学工作者的建议。&lt;/p&gt;&lt;p&gt;看得出来Rust在生物学领域已经有了一些可用的库，可以在相关GitHub组织RustBio中找到。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.luizirber.org/2019/01/05/rust-2019/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-bio&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-bio&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;使用rust-vmm构建未来的虚拟化堆栈&lt;/h2&gt;&lt;p&gt;vmm是指VirtualMachineMonitor。Firecracker（亚马逊的）是一个基于KVM的轻量级VMM，可以在几分之一秒内启动虚拟机，内存占用少，可以实现高密度云环境。在Firecracker被开源之后，该开发团队又在2018年底启动了rust-vmm项目，旨在实现安全共享虚拟化核心组件。rust-vmm会以多个独立的crate来发布，都在RustVMM GitHub组织下开源。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//opensource.com/article/19/3/rust-virtual-machine&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-vmm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-vmm GitHub组织&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;V语言： 受Rust和Go启发的新编程语言&lt;/h2&gt;&lt;h2&gt;lang&lt;/h2&gt;&lt;p&gt;目前还只是文档，作者并未开源，据说是2019年中开源。先来感受下代码风格：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&#39;Bob&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;large_number&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//vlang.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vlang.io&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;《Rust编程之道》读者答疑：每个章节副标题名言代表的意义&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/59384453&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「BlogOS系列教程」分页实现&lt;/h2&gt;&lt;p&gt;最新的这篇文章展示了如何在内核中实现分页。&lt;/p&gt;&lt;p&gt;该系列教程的中文翻译可以关注： &lt;a href=&quot;https://zhuanlan.zhihu.com/c_1078248076300521472&quot; class=&quot;internal&quot;&gt;知乎专栏：做一枚爱生活的Rustacean&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//os.phil-opp.com/paging-implementation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;seed 发布0.3版本&lt;/h2&gt;&lt;p&gt;Seed是一个Rust前端框架，借助wasm可以创建Web App。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/David-OConnor/seed/blob/master/CHANGELOG.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;如何让Haskell搜索字符串与Rust一样快&lt;/h2&gt;&lt;p&gt;这篇文章描述了作者创建Alfred-Margaret的过程，它是Aho-Corasick字符串搜索算法中最快的Haskell实现，用于支持Channable中的字符串搜索。Channable是一种Feed处理工具，用户可以在其中定义规则以优化其产品Feed。&lt;/p&gt;&lt;p&gt;作者最初实现的算法和上万star的明星Rust库就是用Rust实现了Aho-Corasick算法进行比较，性能差距很大。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9975563848e1b1442e1bac8580e06ccc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;530&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-9975563848e1b1442e1bac8580e06ccc_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9975563848e1b1442e1bac8580e06ccc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;530&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-9975563848e1b1442e1bac8580e06ccc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-9975563848e1b1442e1bac8580e06ccc_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;但是在经过努力优化以后，这个差距缩小了。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//tech.channable.com/posts/2019-03-13-how-we-made-haskell-search-strings-as-fast-as-rust.html%3F&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/burntsushi/aho-corasick&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;aho-corasick的Rust实现&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/BurntSushi/ripgrep&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ripgrep&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「视频」Rust SDL游戏开发系列 #1&lt;/h2&gt;&lt;p&gt;本视频大概20分钟。我有个计划，希望招募（凭各人兴趣）一些社区的人，制作Rust相关的双语视频，把youtube的搬运到B站，我个人精力实在有限，如果感兴趣可以私聊我。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DLMlX2tF_IsI%26feature%3Dyoutu.be&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用CLION远程开发和调试Rust&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40zaver.max/remote-development-and-debugging-of-rust-with-clion-39c38ced7cc1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;为NodeJS开发者介绍Rust Web开发&lt;/h2&gt;&lt;p&gt;一个简单的介绍，包括工具对比&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40gruberbastian/intro-to-web-programming-in-rust-for-nodejs-developers-1a9c048c4de1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「简单示例」用Rust扩展Python&lt;/h2&gt;&lt;p&gt;该文作者平时使用Python来完成大数据处理，但是Python的性能让他堪忧。他考虑用C/CPP来改善代码，但是又考虑到C和Cpp很难掌握，即便难掌握，也会遇到很多内存管理和段错误的问题，所以他再三考虑之后，选择了Rust。&lt;/p&gt;&lt;p&gt;作者写了个简单的代码示例，介绍了如何在Python中使用Rust编译出来的动态库。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.simernes.com/%3Fp%3D514&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;在Rust中实现GADT的一些思考&lt;/h2&gt;&lt;p&gt;该文作者是一名Haskell选手，他在尝试用Rust实现GADT（Haskell种的广义代数数据类型）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.philipzucker.com/thoughts-on-faking-some-of-gadts-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/philzook58/typo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;typo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「视频」用Rust实现Redis模块&lt;/h2&gt;&lt;p&gt;该视频是用于学习而制作&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/gsquire/redis-multi-map&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3Dtu9Lw8k-Uss%26feature%3Dyoutu.be&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「系列博客」 Rust与科学计算 Part 1： Rust的冒险之零成本抽象&lt;/h2&gt;&lt;p&gt;有博主宣布要写Rust和科学计算的系列文章，本文是该系列的第二篇文章。&lt;/p&gt;&lt;blockquote&gt; 该作者的日常工作是机器学习，他在多次使用Rust进行相关的实验之后发现，Rust语言在这个领域将大有可为，并让他感觉非常激动。作者反观了Python统治下的机器学习世界，其生态系统爆炸的原因是因为有很多基础库，比如NumPy，SciPy，Pandas等。大多数项目是构建在NumPy和SciPy之上。如果Rust也拥有这些核心的基础库会怎么样？抱着这样的想法，作者加入了维护ndarray库的队伍中。他贡献了一堆PR之后，诞生了一个独立的crate：ndarray-stats。这个系列的文章，将围绕ndarray来阐述。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.lpalmieri.com/posts/2019-03-12-scientific-computing-a-rust-adventure-part-1-zero-cost-abstractions/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;利用Rust的类型系统消除运行时越界检查&lt;/h2&gt;&lt;p&gt;主要技巧是为实现的数据结构中的索引建立关联闭包，然后通过正确关联的闭包来访问数据，如果是空的索引，则会造成编译期错误。这个错误就证明了有越界访问。但这个技巧最好是在团队内达成共识，否则错误看上去会非常奇怪。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//fullyfaithful.eu/bounds-check-elision-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;以数据处理为案例，教Pythoner使用Rust&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40rajasekar3eg/making-a-case-rust-for-python-developers-1a114e2d89f4&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;pulldown_cmark 0.3 发布&lt;/h2&gt;&lt;p&gt;pulldown_cmark是用Rust编写的CommonMark markdown标准的高性能解析器，刚发布了0.3版本。这篇文章中还介绍了该团队优化0.3版本性能的一点心得：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;为了增加解析速度，快速构建和遍历AST，他们使用了indextree crate。&lt;/li&gt;&lt;li&gt;在没有严格要求的情况下，永远不要复制或分配内存。只用引用，以及在新版本中使用了一种新的写时复制类型（类似于&lt;code&gt;Cow&amp;lt;T&amp;gt;&lt;/code&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我查了下源码，他们用的写时复制类型叫 &lt;code&gt;CowStr&lt;/code&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[derive(Debug, Eq)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CowStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Borrowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inlined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InlineStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InlineStr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOUBLE_WORD_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应该是根据自己的场景定制的。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//fullyfaithful.eu/pulldown-cmark/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;purple: Rust实现的一个现代化的开放区块链协议&lt;/h2&gt;&lt;p&gt;Purple号称是一种先进的，实验性的开放式区块链协议，从第一天开始设计就注重可扩展性和完全去中心化。它可以在高峰时间达到每秒多达50000个事务。基于一种新的共识，半同步工作证明（简称SSPoW），因为它提供的异步扩展优于传统的基于工作证明的同步共识。&lt;/p&gt;&lt;p&gt;不管吹的如何，新项目先关注下。代码完成度很高。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/purpleprotocol/purple&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;purple&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//purpleprotocol.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「嵌入式Rust」cargo-call-stack: 一个静态栈分析工具&lt;/h2&gt;&lt;p&gt;用于在编译期检测栈是否溢出，对于嵌入式设备的安全很重要。所以官方嵌入式组Leader Japaric实现了这样一个库。文章介绍了关于cargo-call-stack的详细实现细节。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.japaric.io/stack-analysis/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/japaric/cargo-call-stack&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-call-stack&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;dodrio: 基于Bump内存分配的虚拟Dom实现&lt;/h2&gt;&lt;p&gt;dodrio的作者写文章介绍了dodrio实现的一些细节。它是使用Rust和WASM实现的虚拟dom库。该库的作者为了实现此库，还专门和React、Elm和Ember团队的核心开发人员讨论了很多想法。并且Mozilla负责WebAssembly标准制定的Luke和Rust核心团队的Alex都参与了该项目的设计？看来这个库不是玩票。&lt;/p&gt;&lt;p&gt;Bump内存分配算法，是一种快速但有限的分配算法，分配器会维护一块内存以及指向该内存的指针，当分配一个对象时，分配器将指针会按该对象的对齐规则来分配内存，并且快速测试指针有没有溢出。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/fitzgen/dodrio&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dodrio&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Protocol Buffers库prost发布0.5版本&lt;/h2&gt;&lt;p&gt;该库支持proto2和proto3&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/danburkert/prost/releases/tag/v0.5.0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;reap: 用于解析Ruby Heap Dump（堆转储文件）的工具&lt;/h2&gt;&lt;p&gt;此工具可以用来优化Ruby应用的内存和调试内存泄漏。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/djudd/reap&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;reap&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rel-ptr: 相对指针&lt;/h2&gt;&lt;p&gt;该库用于构建可移动的自引用类型&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/azvpfy/relative_pointer_an_abstraction_to_build_movable/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/KrishnaSannasi/rel-ptr&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rel-ptr&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;bloom-server：基于 rust 编写的 rest api cache 中间件&lt;/h2&gt;&lt;p&gt;位于lb 与api worker 之间，使用redis 作为缓存内容存储，我们需要做的就是配置proxy，同时他使用基于share 的概念，进行cache 的分布存储，包含了请求端口（proxy，访问数据） ，以及cache 控制端口（api 方便cache 策略的控制）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//crates.io/crates/bloom-server&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bloom-server&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;bgrep：Rust实现的一个二进制grep工具&lt;/h2&gt;&lt;p&gt;可以匹配任何字节模式，可以跨行。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/gahag/bgrep&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bgrep&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;pyckitup: 用Rust实现的可运行于浏览器的Python游戏引擎&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//pickitup247.com/pyckitup.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/pickitup247/pyckitup&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pyckitup&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;cargo-feature-analyst: 用于分析项目种features使用情况&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/psinghal20/cargo-feature-analyst&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-feature-analyst&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;cuach: 又一个编译时模板&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//nest.pijul.com/pmeunier/cuach&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cuach&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;bacon: 使用Speck算法对任意结构进行加密和解密&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/aspera-non-spernit/bacon&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bacon&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;microprofile-rust： 用于Rust的微型嵌入式分析工具&lt;/h2&gt;&lt;p&gt;microprofile使用C/CPP实现，已经被用于多个AAA级游戏。现在有了Rust的绑定。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/jonasmr/microprofile-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;microprofile-rust&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;edgy: 图像边缘检测库&lt;/h2&gt;&lt;p&gt;该库是Sobel边缘检测算法的Rust实现，看源码的Readme文件截图，效果好像不错&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dangreco/edgy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;edgy&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;libpnet : 提供了底层网络的跨平台Rust API&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/libpnet/libpnet&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;libnet&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-03-17-59549951</guid>
<pubDate>Sun, 17 Mar 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
