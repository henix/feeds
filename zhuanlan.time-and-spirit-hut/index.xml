<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description>编程、读书、学习、境界提升</description>
<language>zh-cn</language>
<lastBuildDate>Sat, 16 Mar 2019 16:09:44 +0800</lastBuildDate>
<item>
<title>《Rust编程之道》读者答疑精选：每个章节副标题名言代表的意义</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-03-15-59384453.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/59384453&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-905deaaf871b08892a7d7a25e06ebea9_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;有读者比较好奇，这些名言警句都出自哪里？ 借这个机会我梳理一下：&lt;/blockquote&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;第一章：不谋全局者，不足谋一域。出自：陈澹然[清]《寤言二迁都建藩议》&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第一章是全书的起始，我希望读者可以从整体上对Rust有一个宏观的认识，然后再开始学习后面的内容。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第二章： 好读书，不求甚解；每有会意，便欣然忘食。 出自： 晋·陶渊明《五柳先生传》&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第二章是对Rust语法的精要罗列，因为在学习任何一门之前，至少要对它的语法有一个比较基本的认识，然后在这个基础上，去掌握它。语法上其实和其他语言的也没有多少差别。但不同的是，第二章还贯穿着一根主线，那就是表达式，或者说，语法中的共性，一致性。用这个副标题，就是想让大家在看这一章的时候，没必要去抠细节，因为很多内容后面还会讲。应该抓住每一章的重点。这也迎合了陶渊明先生的这句名言。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第三章： 本性决定行为,本性取决于行为。 出自：罗伯特·穆齐尔 《没有个性的人》&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第三章讲的是类型系统。Rust是类型安全的语言，一切皆类型。而trait则是Rust一切抽象的基础。类型，比如数字、字符串等等类型，各有各的本性。而trait，则是对这些类型的行为的抽象。 什么样的类型（本性），决定了它应该实现什么样的trait（行为）。反过来，什么样的trait（行为），也能决定它的类型（本性），比如trait对象。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第四章： 清空你的杯子，方能再行注满，空无以求全。出自： 李小龙&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第四章讲的是内存管理。我为什么会想到李小龙的这句话呢？主要有三点原因：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;李小龙也算是我的偶像了，他创立的截拳道，是吸取了众派所长，然后形成了一个精简的武学模型。而Rust语言，在这一点上也比较类似，集合了各家语言之所长，然后融合到一个精简的模型中。&lt;/li&gt;&lt;li&gt;Rust的内存管理，独树一帜。没有走传统的GC路线，也没有走C和Cpp的自由的手工管理。而是借助了所有权机制，这一点，很像以空杯心态来重新审视内存安全的问题。&lt;/li&gt;&lt;li&gt;对于我们学习者而言，也需要有这种空杯心态，来面对新的技术。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;第五章： 律者，所以定分止争也。出自：《管子·七臣七主》&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第五章，讲所有权系统。所有权系统，就是Rust语言中的法律，而编译器，就是所有权「法律」的执行者。作为Rust语言使用者，应该牢记这一点，你应该做一个「懂法」的人，如果「不懂法」，那只会被编译器「就地正法」。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第六章：语言影响或决定人类的思维方式。 出自： TED演讲：&lt;a href=&quot;https://zhuanlan.zhihu.com/write#&quot; class=&quot;internal&quot;&gt;《语言如何塑造我们的思维方式》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第六章，讲函数、闭包和迭代器。这一章涉及了Rust中对函数式编程范式的支持，因为Rust是一个混合范式语言，而且我观察到社区里，来自于其他不同语言社区的人，对Rust的理解也是不同。来自Haskell的人，想方设法地要用Rust实现各种高阶魔法。而来自C语言社区，则对Rust提供的在其他高级语言中最常见的基本抽象表达能力赞叹不绝。这是为什么呢？ 这就是语言对思维方式的影响。而编程语言范式，也是因为不同思维的语言作者，而创造出的不同范式。&lt;/p&gt;&lt;p&gt;而Rust语言也在改变我的思维，在我刚用Rust的一段时间里，我还纠结OOP和函数式语言范式，但是用习惯Rust以后，我发现自己已经有很长时间没有关注语言编程范式了。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第七章：形每万变，神唯守一。出自： 《斗拱》维基百科&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第七章讲结构体、枚举相关的内容。结构体和枚举，是Rust编程的基础，也是Rust代码的基本组织单元。这不禁让我想到了中国古代的「斗拱」结构。斗拱属于榫卯结构的一种，其上承屋顶，下接立柱，在中国古建筑中扮演的是顶天立地 的角色。而斗拱仅仅由5 个简单的部件组成，利用独一无二的榫卯结构，可以拼接出种类繁 多且左右对称的各种样式，无不令人称赞。这正应了“形每万变，神唯守一”的规律。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第八章：阵而后战，兵法之常，运用之妙，存乎一心。 出自：《宋史·岳飞传》&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第八章讲字符串和集合类型。这基本是任何语言里最常用的数据结构了。数据结构在我的心里，就像是一种「阵法」。编程，其实就是解决问题，算法是解决问题的思路，数据结构是问题领域中被总结出来的常用工具。这也是为什么说，程序等于数据结构加算法。其实，在你编程之前，面对要解决的问题领域，就已经想好了使用什么样的算法和数据结构，然后才动手。这正好印了岳飞的这句话：阵而后战，兵法之常，运用之妙，存乎一心。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第九章：每个人都有错，但只有愚者才会执迷不悟。出自：西塞罗&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第九章讲的是Rust中的错误处理。在写这章的时候，我不禁想起了西塞罗的这句名言。这个世界上，有人的地方就有Bug。我们无法避免Bug，但是我们可以寻找最佳的错误处理方式。我们是人，我们不是神。懂得容错，才能更加健壮。Rust语言就是一次对最佳错误处理方式的探索。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第十章：良好的秩序是一切美好事物的基础。 出自：埃德蒙·伯克&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第十章讲Rust的包管理和模块化。你如果深入了解Rust的Cargo，你会发现，它完全是建立在开源文化基础上的。它通过一系列的约定，帮助开发者完成人和人的良好协作。这也是为什么Cargo深受大家的喜欢。再加上Rust对模块化的支持，让编写大型Rust项目变得更加轻松。协作，不仅仅是和别人协作，也是和昨天的你协作。你写的一大坨代码，可能睡一觉就忘记了程序的结构。Rust倡导你以最小的crate单元来组织你的代码，crate和crate之间的协作，会帮助你更好的组织代码。这是通往美好的基础。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第十一章： 万物并育而不相害，道并行而不相悖。 出自：《中庸》&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第十一章讲的Rust的安全并发。万物并育而不相害，道并行而不相悖，但是为什么我们编写多线程并发代码却不是这样呢？那是因为万物并发，道并行，都是独立的，它们各有自己的状态，而不会相互影响。而我们的多线程并发代码则不是，稍有不慎，就会出现难以重现的Bug。然而，Rust的所有权机制，帮助你实现了安全的并发，真正的达成，万物并育而不相害，道并行而不相悖。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第十二章：道生一，一生二，二生三，三生万物。出自： 《道德经》&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第十二章讲的是元编程。元编程来源于Meta-Programming 一词。Meta 表示“关于某事本身的某事”。比如 Meta-Knowledge，代表“关于知识本身的知识”，称为元知识。再如Meta-Cognition，代表 “关于认知本身的认知”，称为元认知。所以，Meta-Programming 就代表了元编程。人类通 过培养和扩展自己的元知识或元认知，就可以拥有独立思考进一步产生新知识或新认知的能 力。同样，通过元编程的手段可以让程序生成新的程序。Meta 被译为“元”，在语义上比较 合理，“元”有本源和开端之意。这正好和道家思想相吻合。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第十三章：混沌涌现秩序，光明源自黑暗。出自： 《魔兽世界》&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第十三章，讲的是Unsafe Rust。很多人好奇Rust不是号称安全吗？为什么还有Unsafe Rust？《魔兽世界》里的这句话，就是答案。&lt;/p&gt;&lt;p&gt;这个世界本来就是不安全的。你所看到的安全，都是那些默默劳作的好人，帮你构建的。而Rust就是这样的「好人」。它通过Safe Rust帮你在这片由C/Cpp语言统治的「不安全的大陆」构建一片「安全净土」。然而，有时候我们不得不和不安全的底层打交道，这就是Unsafe Rust的用处。当我们身处安乐窝时，不要忘记这个世界，原本就是混沌与黑暗的。所以，我们才要不断地构建秩序，追求光明，走向美好！&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-03-15-59384453</guid>
<pubDate>Fri, 15 Mar 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第九期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-03-10-58828881.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58828881&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-03-10&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;通告&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rusty棒球帽周边定制活动状态报告&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;帽子还在制作中，店家应该周末会发货给我。&lt;/li&gt;&lt;li&gt;镭射贴第一次做的不太满意，又让店家重新制作了。再多等两天。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;预计下周可以发货。&lt;/p&gt;&lt;h2&gt;[北京][2019年4月20日] RustCon Asia ：第一届 Rust 亚洲技术大会&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//ruby-china.org/topics/38200%3Ffrom%3Dtimeline%26isappinstalled%3D0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust 2019 Roadmap 即将发布&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/pull/2657&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More: RoadMap RFC&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」嵌入式工作组报告 第16期&lt;/h2&gt;&lt;p&gt;摘要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/playlist%3Flist%3DPLX44HkctSkTewrL9frlUz0yeKLKecebT1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;James Munns发布了一系列使用Rust开发家庭无线传感器节点网络的视频，专注于IoT主题&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-embedded/showcase&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;工作组正在收集的带有视觉效果（图片或视频）的酷炫嵌入式Rust项目展示&lt;/a&gt;&lt;/li&gt;&lt;li&gt;一些库的发布信息&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rust-embedded.github.io/blog/newsletter-16/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust Tool Team的变化&lt;/h2&gt;&lt;p&gt;主要是独立出来一个核心（core）工具组作为领导，来解决子工具组的各种协调和规划问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/tools-team-changes/9569&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust语言工作组会议跟踪贴&lt;/h2&gt;&lt;p&gt;本贴记录了Rust语言工作组会议相关跟踪记录，感兴趣的可以关注，还会有讨论的油管视频放出。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/lang-team-working-group-sync-meetings/9573&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「讨论」Rust类型系统可以保证内存空间上限吗？&lt;/h2&gt;&lt;p&gt;该贴作者是做大数据的，使用Spark。Spark因为输入数据的大小变化和GC的原因，导致运行时内存会产生难以预测的波动。他接触了Rust之后产生了这个问题，Rust的类型系统能否减少或消除运行时内存的不确定性？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ayu6un/could_rusts_type_system_guarantee_memory_space/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust实现的T1HA可以达到40GiB/s&lt;/h2&gt;&lt;p&gt;T1HA是Fast Positive Hash的实现，基于SIMD在avx2平台上可达到40GiB/s的性能。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ayla9m/rust_implementation_for_t1ha_fast_positive_hash/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;整理还未使用Futures 0.3的库&lt;/h2&gt;&lt;p&gt;作者整理这个列表的目的是为了促进0.3的稳定，这些库还在用0.1，如果一直不用0.3，那么futures 0.3就很难更快地稳定。另外也方便社区的开发者为其做贡献。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aygqrg/libraries_missing_for_futures_03/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Oxide：无限接近Rust所有权和借用本质的形式化语义模型&lt;/h2&gt;&lt;p&gt;Rust是工业编程语言的一个重大进步，它重点是弥合了底层系统编程和高级应用程序编程之间的鸿沟。但目前Rust编程的缺点是缺乏一个用于证明Rust程序的有效工具，之前也有很多类似的工作但是不太理想。&lt;/p&gt;&lt;p&gt;该论文展示了Oxide了形式化语义，重新使用类型系统构建了Rust所有权和借用这个核心机制，来推理Rust的行为，并且希望研究人员能将其作为Rust工作的基础。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1903.00982&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;氧化：Rust的本质（Oxide: The Essence of Rust）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Arxiv平台Rust相关论文整理：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1803.01307&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust在安全领域的应用： Angora: Efficient Fuzzing by Principled Search&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/KhaledSharif/TsetlinMachine&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust实现的Tsetlin Machine&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1804.01508&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tsetlin Machine 对模式识别优化的论文地址&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1806.04929.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust加密API的可用性如何？&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1807.00067.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;使用Javascript安全地管理Rust数据的生命周期&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1809.02161.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;优化编译器的未来方向&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1902.04738&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mesh：可避免灾难性内存碎片的内存分配器&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Google编程之夏项目&lt;/h2&gt;&lt;p&gt;有Rust相关的项目入选，包括TiKV，Servo， Tokio-rs等，可以选择参与贡献。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//summerofcode.withgoogle.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GSoC&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Deno一瞥：JavaScript/TypeScript运行时&lt;/h2&gt;&lt;p&gt;什么是Deno？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用Rust实现&lt;/li&gt;&lt;li&gt;JavaScript和Typescript运行时&lt;/li&gt;&lt;li&gt;实现ES5模块&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以简单地把Deno看作是Node.js的替代品。但是Deno旨在实现和浏览器相同的功能。你可以用Deno实现一个浏览器和服务器都可以使用的程序。Deno的前景可以，但是目前还属于早期阶段。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//43081j.com/2019/01/first-look-at-deno&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「招聘」「新加坡」使用Rust构建下一代支付系统&lt;/h2&gt;&lt;p&gt;新加坡TenX公司，成长型创业公司，产品是基于云的支付平台，并且支持数字货币。其他消息不详。不过据说新加坡支付行业竞争比较激烈。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//functional.works-hub.com/jobs/software-engineer-in-singapore-singapore-c9d67%3Futm_source%3Dreddit%26utm_medium%3Djob-tenx%26utm_campaign%3Dt.leland&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;torchbear: 为Speakeasy编程语言实现的编程环境&lt;/h2&gt;&lt;p&gt;Speakeasy编程是一门新语言，该组织建立它的目的是为了解决更通用的问题。&lt;/p&gt;&lt;blockquote&gt; 只关注语法，语义，生态系统指导等，不包括解释器或编译器。Speakeasy旨在为每个开发人员提供更轻松，更高效的软件开发;经验丰富的退伍军人，好奇的用户，成人，儿童等。我们的范围包括来自其他语言和学科的课程和概念;我们将把目标放在一个简单，有序的开发者体验上。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;Torchbear为Speakeasy编程语言提供了一个简单但功能强大的通用解释器。它可以帮助用户进行Web自动化，嵌入式编程，数据分析，数值计算......其他能想到的。目前，以Lua语言为教学语言。没有编程背景的人可以在15分钟内学习Lua。&lt;/p&gt;&lt;p&gt;（没搞懂这个项目，目测是给普罗大众学习编程和解决问题用的，感觉要上天。）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/foundpatterns/torchbear&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;torchbear&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;东京Rustaceans集会&lt;/h2&gt;&lt;p&gt;东京在3月20日，要举办一场友好的Rust比赛+派对。该派对的主题是用tokio（会有一个准备好的tokio helper crate）来编写一款多人游戏，然后用此游戏来相互对抗。&lt;/p&gt;&lt;p&gt;（这个活动有意思）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/axua3d/tokyo_rustaceans_on_march_20th_were_throwing_a/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//connpass.com/event/122171/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;event 详细&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;actix-web和rocket框架性能比较&lt;/h2&gt;&lt;p&gt;从评论区的actix作者的回复中得知一个消息：actix-web下个版本将支持Rocket风格的路由注册机制。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aybr4e/rocket_and_actix_web_benchmark/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust的channel是否应该在没有接收者的时候Panic&lt;/h2&gt;&lt;p&gt;作者最近使用了crossbeam-channel 0.3，发现有个issues提出一个问题：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/crossbeam-rs/crossbeam/issues/314&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;channel的send是不是默认panic？&lt;/a&gt;，基本上每个&lt;code&gt;.send&lt;/code&gt;后面都跟着&lt;code&gt;.unwrap()&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;该文作者认为这样的写法是有问题的，并且在文章中罗列了两点原因。同步状况下还没什么问题，但是一旦和future异步一起使用，就会有麻烦。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.randomhacks.net/2019/03/08/should-rust-channels-panic-on-send/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;使用Criterion对Rust项目进行基准测试&lt;/h2&gt;&lt;p&gt;Criterion是第三方Rust基准测试库，还提供了额外的统计和图表功能。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40yamafaktory/rust-benchmarking-with-criterion-on-travis-ci-%25EF%25B8%258F-8b54d321e05&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/bheisler/criterion.rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;criterion.rs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「视频」五分钟Rust系列&lt;/h2&gt;&lt;p&gt;该系列视频，每一集只有五分钟左右。作者是Pat Shaughnessy，《Ruby原理剖析》的原作者，现在在学习Rust。质量挺好的，大家可以看看，他的特色是图文并茂。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/channel/UCVgTakRms47ldJIb05JFkQw&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列译文」用Rust创造操作系统之三&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53745617&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust实现一个Merkle（默克尔）树状数组&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aww097/starling_the_binary_indexed_merkle_tree_or/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ChosunOne/merkle_bit&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;merkle_bit&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;ramhorns中的动态模板&lt;/h2&gt;&lt;h2&gt;template_engine&lt;/h2&gt;&lt;p&gt;ramhorns是一个实验性类Moustache的模板引擎。该作者（Pairtytech的工程师）写了这篇文章，主要记录他为ramhorns中动态模板提升性能的方案。&lt;/p&gt;&lt;p&gt;在Rust的世界里有很多模板引擎，可以分为静态模板和动态模板。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;静态模板引擎，在编译时渲染。比如Askama。&lt;/li&gt;&lt;li&gt;动态模板引擎，需要在运行时进行渲染，比如Moustache，Handlebars和Zola（Rust实现的静态站点生成器）使用的Tera。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对于静态站点生成器，必须使用动态模板。而动态模板和Askama的性能存在5~30倍左右的差距。这让作者比较困惑，他在阅读了Askama和其他动态模板引擎的源码之后，发现Askama可以直接使用Rust类型渲染模板，而动态模板则需要一个中间结构表示，比如这种：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[derive(Serialize)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后通过序列化和HashMap这类数据结构在运行时获取相应的字段和值去渲染模板。这虽然有效，但是这种中间结构付出了沉重的代价。并且对于已经存在内存中的数据结构是完全冗余的。作者罗列了可能出现的开销：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果要将字段名称和值转为字符串，则需要创建HashMap，这会双倍耗费堆内存。&lt;/li&gt;&lt;li&gt;如果有一个Vec或者是一些其他要展现的东西，比如帖子列表。将不得不创建一个新的Vec和多个HashMap。&lt;/li&gt;&lt;li&gt;每次对HashMap的插入和查找，都会有哈希处理带来的额外开销。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;而静态模板引擎完全没有上述的开销。ramhorns如何优化？&lt;/p&gt;&lt;blockquote&gt; 使用宏来生成代码，并且使用比较字符串的hash值来代替直接比较字符串。使用了Fnv库。并且在模板预处理中使用相同的Hasher。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;ramhorns中没有使用serde，而是使用了Content trait。利用宏，为Post结构生成如下代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// FNV-1a hash of &quot;title&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xda31296c0c1b6029&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// FNV-1a hash of &quot;content&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x420c75b526b35282&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// In Mustache fashion, do nothing if the field is not found&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就避免了在运行时使用HashMap。优化的结果如何？作者和其他的模板引擎做了性能测试，发现ramhorns不仅比其他动态引擎更快，而且还比静态引擎Askama更快（其实Askama也有很大改进空间，Wearte项目就是案例）。作者说，也许再过一段时间，Hugo就不会说自己是「世界上最快的」静态网站生成器了。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//maciej.codes/2019-03-03-ramhorns.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dgriffen/wearte&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wearte&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;使用Rust构建类似于Wireshark过滤器那样的执行引擎&lt;/h2&gt;&lt;p&gt;Cloudflare公司开源的用于解析Wireshark过滤器语法，并将它们编译器为可执行的IR。该库用于该公司提供的防火墙服务规则解析，所以使用Wireshark的过滤器语法作为DSL。&lt;/p&gt;&lt;p&gt;解析语法一般有三种方式：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用状态机、正则等按字符进行解析&lt;/li&gt;&lt;li&gt;使用解析器组合器，比如nom或combine这种工具&lt;/li&gt;&lt;li&gt;完全自动化的生成器，可以根据提供的语法自动生成一个解析器，比如pest&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但是该库并没有用nom或pest，而是选了第一种解析方式。并且在文章里给出了一些提升解析器性能的经验：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;他们认为Rust标准库提供的字符串API完全够用。&lt;/li&gt;&lt;li&gt;使用IndexMap替换了HashMap来进一步提升了两倍性能。&lt;/li&gt;&lt;li&gt;使用trait对象动态分发和闭包来避免实现JIT而带来的一些问题。动态分发的执行效率出乎他们的意料。&lt;/li&gt;&lt;li&gt;选择使用Rust语言实现，对于支持WASM提供了巨大的方便。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;该库已经用于Cloudflare公司的生产项目。&lt;/p&gt;&lt;p&gt;说明： Cloudflare是一家提供CDN、DNS、DDoS 防护和安全服务的公司。该公司曾经声称自己抵挡“在一秒钟内的流量接近于谷歌(Google)的全球搜索引擎在一个小时内的流量”的攻击。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.cloudflare.com/building-fast-interpreters-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/cloudflare/wirefilter&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wirefilter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/bluss/indexmap&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;indexmap&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;集成React + Rust + WASM指南&lt;/h2&gt;&lt;p&gt;本教程教你如何用Rust提供的wasm工具链开发React App。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//prestonrichey.com/blog/react-rust-wasm/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Bulletproofs进行零知识证明&lt;/h2&gt;&lt;p&gt;该文展示了如何使用bulletproofs进行零知识证明&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/coinmonks/zero-knowledge-proofs-using-bulletproofs-4a8e2579fc82&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dalek-cryptography/bulletproofs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bulletproofs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「系列」Rust开发游戏24小时经验谈&lt;/h2&gt;&lt;p&gt;作者用Rust开发了一款个网球主题的模拟小游戏，耗费了大概24个小时，游戏虽然没完成，但是他拥有了一些经验想要分享给你。涉及ECS模式。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//iolivia.me/posts/24-hours-of-rust-game-dev/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;第二篇文章阐述了他在实际应用ECS模式的一些经验，结合他的网球类游戏进行了讲解，值得一看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//iolivia.me/posts/entity-component-system-explained/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Rust + Warp + Juniper + Diesel编写Graphql API的模板项目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/mattdamon108/rust_graphql_api_boilerplate&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust_graphql_api_boilerplate&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;享受const fn带来的编译时函数执行&lt;/h2&gt;&lt;p&gt;该文简单介绍了const fn的用法和注意事项。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.knoldus.com/no-more-run-time-enjoy-compile-time-function-evaluation-using-const-fn-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;gen-stream: 基于生成器的Stream实现&lt;/h2&gt;&lt;p&gt;基于futures 0.3来实现&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/vorot93/gen-stream&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;gen-stream&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;从46s到5s  - 优化350行Rust代码实现的光线跟踪器&lt;/h2&gt;&lt;p&gt;在这篇文章中，作者将讨论如何将用C＃/C++代码库编写的光线跟踪器移植到Rust，然后利用Rust的一些特性来进行简单的优化。&lt;/p&gt;&lt;p&gt;这篇文章主要是写给那些认为将C#/C++代码移植为Rust代码只需要简单的代码翻译的人。如果这么想的话，就会错过真正了解Rust的机会。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40cfsamson/from-48s-to-5s-optimizing-a-350-line-pathtracer-in-rust-191ab4a1a412&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust中安全访问私有字段的方法&lt;/h2&gt;&lt;p&gt;结论：构建setter/getter方法是最安全的&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.knoldus.com/safe-way-to-access-private-fields-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;await!存在可能永远无法返回的情况&lt;/h2&gt;&lt;p&gt;该文作者发现await在future被Drop的时候会出现无法返回的情况，并给出了详细的示例代码。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.randomhacks.net/2019/03/09/in-nightly-rust-await-may-never-return/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;interact: 运行时自省框架&lt;/h2&gt;&lt;p&gt;可以通过命令行查看运行时程序状态，这个用来调试代码很方便了。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/interact-rs/interact&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;interact&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//interact-rs.github.io/interact/book/examples/actix.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;book example&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Gfx-rs组织宣布新的项目wgpu-rs&lt;/h2&gt;&lt;p&gt;wgpu-rs是基于gfx-hal的原生WebGPU实现。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gfx-rs.github.io/2019/03/06/wgpu.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/gfx-rs/wgpu&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wgpu-rs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;luster: Rust实现的lua虚拟机&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/kyren/luster&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;luster&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;ffsend: Firefox Send服务的命令行客户端&lt;/h2&gt;&lt;p&gt;状态：WIP。支持从命令行轻松安全地通过Firefox Send服务上传和下载文件。Firefox Send可以通过安全、私密且受加密的链接发送文件，链接到期后文件将从网上彻底抹除。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/timvisee/ffsend&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ffsend&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//send.firefox.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Firefox Send 服务&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;persy 0.4发布&lt;/h2&gt;&lt;p&gt;persy是一个Rust编写的简单事务存储引擎&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/tglman/persy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;persy&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;为PyTorch实现Rust绑定和OCaml绑定&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/LaurentMazare/tch-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust bindings for PyTorch: tch-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/LaurentMazare/ocaml-torch&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ocaml-torch&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;可以操作approveapi的Rust库&lt;/h2&gt;&lt;p&gt;Approveapi服务可以通过电子邮件、短信、移动推送请求用户可以实时地对任何内容进行批准确认。&lt;/p&gt;&lt;p&gt;该库基于tokio实现&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//approveapi.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;approveapi&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/approveapi/approveapi-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;approveapi-rs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Rust可信计算开发平台介绍&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//edp.fortanix.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/fortanix/rust-sgx&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-sgx&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Double Ratchet算法的Pure Rust实现&lt;/h2&gt;&lt;p&gt;Double Ratchet（双棘轮）算法是端到端即时通信加密算法之一，允许两个用户安全地进行通信：它为用户提供机密和真实的通道，包括前向保密和未来保密。目前Crait和Whatsapp这两款IM产品就使用该算法加密通讯。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/sebastianv89/double-ratchet&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;wasp: Rust实现的用于编写wasm的Lisp方言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/wasplang/wasp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wasp&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;tree-sitter: 增量式解析工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/tree-sitter/tree-sitter&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tree-sitter&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;cargo-flamegraph: Cargo火焰图工具&lt;/h2&gt;&lt;h2&gt;cargo #flamegraph&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ferrous-systems/cargo-flamegraph&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-flamegraph&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust实现的JavaScript引擎&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/jasonwilliams/boa&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;boa&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-03-10-58828881</guid>
<pubDate>Sun, 10 Mar 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第八期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-03-03-58172616.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58172616&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-03-03&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;通告两则&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「正式介绍」 首届 RustCon Asia大会将在北京举行&lt;/h2&gt;&lt;h2&gt;RustConAsia&lt;/h2&gt;&lt;p&gt;欢迎大家来面基。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/vBKiFdNoCat3I9NYdV5yIA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.huodongxing.com/event/6479456003900&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;购票通道&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「通告」Rusty 棒球帽团购活动已截止&lt;/h2&gt;&lt;p&gt;购买的朋友请关注你的邮件，将在一两周内发货。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust 1.33 稳定版发布&lt;/h2&gt;&lt;p&gt;1.33的更新简要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Pin API稳定，向async/await迈进了一步&lt;/li&gt;&lt;li&gt;整数类型在match中可以使用范围表达式穷尽了，比如u8类型，可以用0..=255来匹配，不再需要&lt;code&gt;_ =&amp;gt; unreachable!()&lt;/code&gt;了。&lt;/li&gt;&lt;li&gt;&lt;code&gt;if let&lt;/code&gt;和&lt;code&gt;while let&lt;/code&gt;支持多模式匹配。&lt;/li&gt;&lt;li&gt;const functions中现在可以使用let绑定、赋值、表达式语句以及irrefutable的模式匹配&lt;/li&gt;&lt;li&gt;支持unsafe const fn。&lt;/li&gt;&lt;li&gt;可使用cfg_attr指派多个属性&lt;/li&gt;&lt;li&gt;可以使用&lt;code&gt;#[repr(packed)]&lt;/code&gt;指定特殊的对齐方式&lt;/li&gt;&lt;li&gt;extern函数在恐慌时的行为默认是Abort，以前这里是未定义行为。&lt;/li&gt;&lt;li&gt;LLVM支持的最低版本是6.0&lt;/li&gt;&lt;li&gt;编译器新增了很多平台的编译target支持。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/blob/stable/RELEASES.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Release Note&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方」Async/Await状态报告&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58101059&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「提案」Rust标准库即将更换新的Channel&lt;/h2&gt;&lt;p&gt;最近有标准库即将会有两个更新，已经提交了PR：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用Parking_lot替代互斥锁/读写锁等（Mutex/RwLock/condvar/），性能将会提升: &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/56410&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pull/56410&lt;/a&gt;&lt;/li&gt;&lt;li&gt;HashMap内部会换成基于hashbrown实现的SwissTable，API未变: &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/pull/56241&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pull/56241&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这篇文章里，提议Rust标准库将Channel更换为crossbeam的Channel，并列举了mpsc的一些缺陷。该文作者是Crossbeam-rs和tokio的贡献者stjepang。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//stjepang.github.io/2019/03/02/new-channels.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust和npm白皮书&lt;/h2&gt;&lt;p&gt;npm Registry实用Rust来解决CPU密集型任务产生的瓶颈问题。在该PDF中阐述了具体的问题以及解决方案。&lt;/p&gt;&lt;p&gt;在寻找解决方案的过程中，NPM团队最先排除了C/CPP/Java。因为在他们的工程思想中，C/Cpp不再是一个合理的选择。主要是担心安全问题。由于需要部署jvm，也排除了Java。然后选择了Go或Rust。&lt;/p&gt;&lt;p&gt;然后团队使用Go花了两天时间重写了授权服务，在这个过程中，该团队对Go的依赖管理失望了。因为NPM本身就是一个包管理工具，他们的工程文化不接受这样的Go。而他们对Rust的评价是这样的：惊人的依赖管理，以及促使你必须思考程序的正确性。用Rust重写服务，确实比用js和Go耗费时间长。当然这段时间也包含了他们的学习成本。并且Rust社区非常友好，有问题可以及时回复。&lt;/p&gt;&lt;p&gt;Rust编写的第一个简单的服务程序用在生产中一年半，没有发出任何的警报。这导致他们团队很快就忘记了该程序的存在。。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/av1bpg/the_npm_whitepaper_is_up/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;用Rust重写Node.js实现的接口之后&lt;/h2&gt;&lt;p&gt;作者用Rust重写了Node.js实现的一个小接口，但是流量很大，每秒180个请求。&lt;/p&gt;&lt;p&gt;之前Node.js版本技术栈：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;koa，框架&lt;/li&gt;&lt;li&gt;pino，日志&lt;/li&gt;&lt;li&gt;request，转发请求&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Rust版本技术栈：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;actix-web, 框架&lt;/li&gt;&lt;li&gt;serde-json, 序列化处理json&lt;/li&gt;&lt;li&gt;slog-json，日志&lt;/li&gt;&lt;li&gt;reqwest，转发请求&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;作者使用的是&lt;code&gt;reqwest::async&lt;/code&gt;异步请求。Rust版本部署之后，CPU使用率较Node.js版本下降了90%，内存使用量降下了一半。&lt;/p&gt;&lt;p&gt;这些数据更有助于作者说服他的同事们使用Rust，分享出来也可以帮助大家来说服公司使用Rust。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-531b3eb4c15f166f30a92dac7167acac_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-531b3eb4c15f166f30a92dac7167acac_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-531b3eb4c15f166f30a92dac7167acac_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-531b3eb4c15f166f30a92dac7167acac_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-531b3eb4c15f166f30a92dac7167acac_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-63cf5892cd51edd72cc3f44cb26299a3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;132&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-63cf5892cd51edd72cc3f44cb26299a3_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-63cf5892cd51edd72cc3f44cb26299a3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;132&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-63cf5892cd51edd72cc3f44cb26299a3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-63cf5892cd51edd72cc3f44cb26299a3_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aw94xp/i_ported_a_small_api_from_nodejs_to_rust_and_was/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列博客」 Rust与科学计算 Part 0&lt;/h2&gt;&lt;p&gt;有博主宣布要写Rust和科学计算的系列文章，本文是该系列的首篇文章。该作者的日常工作是机器学习，他在多次使用Rust进行相关的实验之后发现，Rust语言在这个领域将大有可为，并让他感觉非常激动。&lt;/p&gt;&lt;p&gt;作者反观了Python统治下的机器学习世界，其生态系统爆炸的原因是因为有很多基础库，比如NumPy，SciPy，Pandas等。大多数项目是构建在NumPy和SciPy之上。&lt;/p&gt;&lt;p&gt;如果Rust也拥有这些核心的基础库会怎么样？抱着这样的想法，作者加入了维护ndarray库的队伍中。他贡献了一堆PR之后，诞生了一个独立的crate：ndarray-stats。这个系列的文章，将围绕ndarray来阐述。&lt;/p&gt;&lt;p&gt;在这篇文章中，他着重讲解了Rust中的Vector数组，以及使用Vector来计算线性代数中的点积（scalar product）。并且他和Python做了相应的性能测试比较：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;Language    Time (us)   Notes
Python  1720    Same function, using Python’s lists
Python  12.2    NumPy, using np.array - (v * w).sum()
Python  6.1 NumPy, using np.array - v.dot(w)
Rust    1.8 Super naive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rust的Vector的性能是Python List的近1000倍。是Numpy库的近6、7倍快（有点欺负Python的感觉）。本文的目的只是通过简单的例子介绍一下Rust的所有权，下一篇将进入正式的科学计算内容。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.lpalmieri.com/posts/2019-02-23-scientific-computing-a-rust-adventure-part-0-vectors/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;tokio入选为Google编程之夏的开源项目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//summerofcode.withgoogle.com/organizations/5982287680765952/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;chucklefish不再使用Rust开发该公司新游戏Witchbrook&lt;/h2&gt;&lt;p&gt;该公司的这个决定和Rust语言本身并无关系。主要是因为该项目之前的主程kyrenn离职了。并不意味着Rust不能做游戏开发，Rust完全胜任该公司游戏的开发，估计他离职了公司没有找到合适的Rust主程，游戏也比较着急吧。&lt;/p&gt;&lt;p&gt;但是不可否认的是Rust在游戏的生态现在还未成熟，kyrenn说，他自己仍然会用Rust开发游戏，但是他可能会是世界上最慢的游戏开发者，因为你需要做更多的底层的「脏活累活」。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/avwxq1/chucklefish_is_no_longer_using_rust_for_witchbrook/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Firefox Reality浏览器即将登陆Microsoft&#39;s HoloLens 2&lt;/h2&gt;&lt;p&gt;HoloLens 2是微软混合现实眼镜的第二代。Rust为HoloLens 2提供了更安全的体验。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.windowscentral.com/firefox-reality-browser-hololens-2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Mozilla正在寻找懂UWP的专业人士&lt;/h2&gt;&lt;p&gt;希望协助Moziila将Rust带到Hololens平台。目前Firefox Reality浏览器即将登陆Hololens2。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b18f8c07897ee76ee2a8f83551f3d399_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;468&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-b18f8c07897ee76ee2a8f83551f3d399_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b18f8c07897ee76ee2a8f83551f3d399_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;468&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-b18f8c07897ee76ee2a8f83551f3d399_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-b18f8c07897ee76ee2a8f83551f3d399_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;「Mozilla」用Rust重写浏览器组件的意义&lt;/h2&gt;&lt;p&gt;该文以Quantum CSS为案例，探讨「用Rust重写」对真实世界的影响。&lt;/p&gt;&lt;p&gt;概要： Rust虽然无法捕捉全部的安全漏洞，但是可以消除重大的安全漏洞，并且可以让开发人员专注于程序逻辑的正确性和健壮性。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;wasmer : 性能提升100倍&lt;/h2&gt;&lt;p&gt;wasmer是一个服务端wasm解释器。最近发布了0.2.0版本，号称性能提升了100倍。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/wasmer/running-webassembly-100x-faster-%25EF%25B8%258F-a8237e9a372d&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「视频」是时候用Rust重写操作系统了吗？&lt;/h2&gt;&lt;p&gt;来自去年QCon San Francisco 2018的视频。作者非常看好Rust。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DHgtRAbE1nBM&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.infoq.com/presentations/os-rust%3Futm_source%3Dyoutube%26utm_medium%3Dlink%26utm_campaign%3Dqcontalks&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;文本&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;编写桌面版和Web版Roguelike游戏&lt;/h2&gt;&lt;p&gt;该作者准备参加Roguelike游戏挑战赛，用Rust实现了一个可跨平台运行的游戏demo。本文是该demo的一个教程。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/tomassedovic/quicksilver-roguelike&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Pop周报&lt;/h2&gt;&lt;p&gt;System76公司(Redox背后的公司)的PopOS周报。这篇报告里说，System76公司的桌面项目都是用Rust实现的。那是不是意味着他们的PopOS中的桌面项目都是Rust实现的呢？popOS看上去还不错。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//system76.com/pop&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;popOS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//pop-planet.info/forums/threads/this-week-in-pop-1.89/%23post-420&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「视频」Rust Auckland 2019-02-25：Amethyst游戏引擎介绍&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3Dqe40FqD1E1A%26feature%3Dyoutu.be&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitpitch.com/azriel91/amethyst_engine_engine/master%3Fgrs%3Dgithub%26t%3Dsky%23/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;slides&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;skribo：底层文本布局库启动&lt;/h2&gt;&lt;p&gt;Xi Editor的作者raphlinus之前写的博文说，文本布局是Rust GUI生态缺失的部分。skribo就是他为了弥补这个缺失的生态而开的新坑，用于全面改进文本处理。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//raphlinus.github.io/rust/skribo/text/2019/02/27/text-layout-kickoff.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/linebender/skribo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;skribo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;来自Rust读者群的分享：Rust生命周期&lt;/h2&gt;&lt;p&gt;作者：月泉&lt;/p&gt;&lt;blockquote&gt; 针对Rust的生命周期及所有权机制的一些知识写了一篇文章，希望能够帮助群里的各位书友理解这些知识。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;期待更多的学习分享。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//yuequan.org/rust_ownership_lifetime.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」Cortex-M3 入门指南（三）：时钟总线与复位时钟控制器&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/57918979&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust优化小技巧&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//vfoley.xyz/rust-compilation-tip/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust讨论」用什么硬件可以更容易地开始用Rust进行嵌入式开发&lt;/h2&gt;&lt;p&gt;有人在Reddit发帖询问此问题，他用的是Arduino，但是使用Cpp和Rust都非常痛苦。即便使用针对Arduino的Rust版本avr也不太稳定，所以他想问问什么硬件更适合入门者？&lt;/p&gt;&lt;p&gt;回复中有人提到，使用基于ARM Cortex-M的硬件，比如STM-32 uC更好，Rust对该硬件体系支持的更好。可以配合discovery book一书学习。 评论中也有其他建议可以看看。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aw8bwt/question_hardware_for_easy_start_in_embedded_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rust-embedded.github.io/discovery/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;discovery book&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「视频」从零开始使用Rust构建嵌入式传感器节点平台&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DS0VI70nY6Vo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ferrous-systems/internet-of-streams&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;internet-of-streams&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Rust 胖指针探秘&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//iandouglasscott.com/2018/05/28/exploring-rust-fat-pointers/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;如何使用命令行参数&lt;/h2&gt;&lt;p&gt;这篇文章帮你揭开Rust命令行参数的神秘面纱。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.knoldus.com/working-with-command-line-arguments-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;用Rust实现一个mod播放器 Part 1&lt;/h2&gt;&lt;p&gt;mod是一种音乐格式。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.codeslow.com/2019/01/mod-player-in-rust-part-1.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/janiorca/articles/tree/master/mod_player&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Clojure，Rust，Pony，Erlang和Dart分别如何实现无畏并发&lt;/h2&gt;&lt;p&gt;该文分别展示了五种语言的安全并发模型：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Clojure： Alternative 并发模型&lt;/li&gt;&lt;li&gt;Rust： 所有权机制（ownership）&lt;/li&gt;&lt;li&gt;Pony：引用能力（Reference Capabilities），Pony 语言中每种变量的类型都包含了有关如何在 actor 之间分享数据的信息。有点像Rust的借用检查器。&lt;/li&gt;&lt;li&gt;Erlang：Actor模型&lt;/li&gt;&lt;li&gt;Dart：Actor模型，在Dart里叫Isolates（逻辑上隔离内存）。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//sites.google.com/a/athaydes.com/renato-athaydes/posts/fearlessconcurrencyhowclojurerustponyerlanganddartletyouachievethat&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列文章」从零开始构建数据库&lt;/h2&gt;&lt;p&gt;这系列文章不错，教你用C从头开始构建一个sqlite数据库，感兴趣的可以换成Rust来实现。当然，去年也有人写Rust实现关系数据库的文章，可惜烂尾了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//cstack.github.io/db_tutorial/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust build脚本与Meson&lt;/h2&gt;&lt;p&gt;该文作者在尝试将Rust和Meson集成。这篇文章记录了他在此过程中使用build.rs的一些经验。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//people.gnome.org/%7Efederico/blog/rust-build-scripts.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/mesonbuild/meson&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;meson&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「系列视频」如何用Rust构建属于自己的加密货币 Part 1&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DvJdT05zl6jk%26list%3DPLwnSaD6BDfXL0RiKT_5nOIdxTxZWpPtAv%26index%3D2%26t%3D0s&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/GeekLaunch/blockchain-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「教程」min-sized-rust: 该库演示了如何最小化Rust二进制大小&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/johnthagen/min-sized-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;min-sized-rust&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列文章」WebAssembly的麻烦 Part 4 ： Microwasm&lt;/h2&gt;&lt;p&gt;该系列文章主要探讨WebAssembly中的缺陷。&lt;/p&gt;&lt;p&gt;Microwasm是与Wasm兼容的格式，可以被运行时有效地使用，并由LLVM等编译器生成。它目前在Lightbeam(将wasm生成机器码的实验工具)的Microwasm分支中实现。由以下三步生成：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Compiler IR-&amp;gt;Microwasm;&lt;/li&gt;&lt;li&gt;Wasm-&amp;gt;Microwasm;&lt;/li&gt;&lt;li&gt;Microwasm-&amp;gt;Native.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;该作者团队还在维护一个wasmtime库，它们引入了Microwasm是为了进一步提升性能，并且为Microwasm编写后端比wasm更加容易。因为Microwasm生成的汇编代码比Wasm直接生成的汇编代码更加简单。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//troubles.md/posts/microwasm/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/CraneStation/lightbeam&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;lightbeam&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/CraneStation/wasmtime&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wasmtime&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;为Rust库公开FFI接口&lt;/h2&gt;&lt;p&gt;该文作者之前实现了battery库，该库用到了battery-ffi库，专门封装了一些FFI接口，给主库使用。他在这篇文章中写下了编写FFI的一些注意事项。可以看作是一个FFI最佳实践来学习。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//svartalf.info/posts/2019-03-01-exposing-ffi-from-the-rust-library/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「教程」min-sized-rust: 该库演示了如何最小化Rust二进制大小&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/johnthagen/min-sized-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;min-sized-rust&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;tweek-rust: Rust实现的Tween动画工具包&lt;/h2&gt;&lt;p&gt;Tween动画可以对对象进行缩小，放大，旋转，渐变，位移等操作，用于在游戏或应用中实现一些渐变类动画动作。最早是伴随Flash技术出现的。现在该技术已经用在了web前端和手机App中。&lt;/p&gt;&lt;p&gt;该库中包含了两个示例，可以看看。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/wasm-network/tweek-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tweek-rust&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av45138427&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;点此查看视频&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;McEx: Rust和Elixir共同实现的MineCraft服务器&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/McEx/McEx&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;McEx&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;WAS: 用于捕获wasm编译器和应用程序内存问题的内存分配器&lt;/h2&gt;&lt;p&gt;WAS（不是WASM）是一个简单的WASM内存分配器，旨在捕获WebAssembly编译器和应用程序中的内存问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/jedisct1/was-not-wasm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;was-not-wasm&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用graphviz可视化Rust代码流程图&lt;/h2&gt;&lt;p&gt;Rust编译器可以生成flowgraph IR，然后通过graphviz这个软件就可以生成流程（FlowGraph）图。cargo inspect这个工具把graphviz调用命令集成进去了，新版本可以方便地生成流程图了。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-de3a67724ac9bdbb968c3bc38cb48b4c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;1229&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-de3a67724ac9bdbb968c3bc38cb48b4c_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-de3a67724ac9bdbb968c3bc38cb48b4c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;1229&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-de3a67724ac9bdbb968c3bc38cb48b4c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-de3a67724ac9bdbb968c3bc38cb48b4c_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//jonathansteyfkens.com/posts/visualizing-rust.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;git-req: 轻松查看GitLab和GitHub中的合并请求&lt;/h2&gt;&lt;p&gt;Rust实现的命令工具，只需要把git-req设置好环境变量，即可成为git的子命令。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/arusahni/git-req&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;git-req&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arusahni.github.io/git-req/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「嵌入式Rust」开发环境指引&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//josh.robsonchase.com/embedded-bootstrapping/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;psd: PSD文件解析器&lt;/h2&gt;&lt;p&gt;Rust实现的PSD文件解析工具，还有个在线使用wasm的demo。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/chinedufn/psd&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;psd&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//chinedufn.github.io/psd/drag-drop-demo/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;live demo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;imagene: 通用图像处理工具&lt;/h2&gt;&lt;p&gt;基于image库实现&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/AlmightyFloppyFish/imagene&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;imagene&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;battery: 用于收集笔记本电脑电池信息的库&lt;/h2&gt;&lt;p&gt;支持Linux、Mac、Windows。通过该库提供的命令，可以在终端查看电池相关的信息。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//svartalf.info/posts/2019-02-25-introducing-battery-crate/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;swym： 实验性软件事务内存库&lt;/h2&gt;&lt;p&gt;可用于实现并发数据结构，其性能和无锁数据结构相差无几。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/mtak-/swym&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;cargo-deps: 可视化项目中的依赖库&lt;/h2&gt;&lt;p&gt;它是对cargo-graph库的分支，同样是基于graphviz库，可以可视化依赖项的关联。作者号称该库是对cargo-graph的改进。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/m-cat/cargo-deps&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-deps&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/kbknapp/cargo-graph&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;cargo-graph&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Forge:  Rust实现的一种轻量级的动态语言&lt;/h2&gt;&lt;p&gt;支持Rust FFI&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/zesterer/forge&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;forge&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//forge.jsbarretto.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;playground&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;higher: Rust实现的类Haskell高阶类型&lt;/h2&gt;&lt;p&gt;包括applicative、functor、monad以及type class等。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/bodil/higher&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;higher&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Atto： Rust实现的一个简单的函数式语言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/zesterer/atto&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;atto&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;laminar: 用于多人游戏的半可靠UDP协议实现&lt;/h2&gt;&lt;p&gt;该库在UDP的基础上实现了TCP的一些功能。它被用于Amethyst游戏引擎中。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/amethyst/laminar&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;laminar&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;MIRAI: 来自Facebook实验室的Rust MIR抽象解释器&lt;/h2&gt;&lt;p&gt;MIRAI的目标是成为Rust的静态分析工具。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/facebookexperimental/MIRAI&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MIRAI&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rendy-pbr: 玩具版实时物理渲染器&lt;/h2&gt;&lt;p&gt;基于rendy和gfx-hal实现&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/omni-viral/rendy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rendy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/termhn/rendy-pbr&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rendy-pbr&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-03-03-58172616</guid>
<pubDate>Sun, 03 Mar 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「官方」Async/Await状态报告</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-03-02-58101059.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/58101059&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-95081c04d1ad4b5bdb260f127c9fab9e_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来源：&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//smallcultfollowing.com/babysteps/blog/2019/03/01/async-await-status-report/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;smallcultfollowing.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;babysteps/blog/2019/03/01/async-await-status-report/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;br&gt;本文不是翻译，只是摘录&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;Niko发表了这篇博客，阐述了async/await当前的状态：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;建立了async/await实施小组。该小组属于编译器团队，但是专注于具体的实现。&lt;/li&gt;&lt;li&gt;在async/await稳定之前，还需要确定一个重要的问题：「该稳定什么？」。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Niko所考虑的是，为了什么目的而稳定。&lt;/p&gt;&lt;p&gt;如果稳定的目的是「促进async/await被广泛使用」，那么首先应该解决的就是await语法。&lt;/p&gt;&lt;p&gt;如果稳定的目的是「让早期的使用者们开始更多地使用它们」，则只要不存在向后兼容的问题就可以。&lt;/p&gt;&lt;p&gt;这两个目的都可以，但是如果选择后者，则需要传达更多的细节，以防止「早期使用者们」遇到下面的问题时不会被拒之门外。&lt;br&gt;&lt;br&gt;&lt;b&gt;当前的问题：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;实施问题&lt;/b&gt;。实施组现在发现一个严重阻碍进度的问题：「&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/54716&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;issues/54716&lt;/a&gt;」，以及一些影响开发者体验的问题。另外也没有大量的活跃贡献者来参与async/await的实现工作。&lt;/li&gt;&lt;li&gt;&lt;b&gt;语法问题&lt;/b&gt;。对于await语法的讨论结果，由withoutboats在整理中。为了稳定aysnc/await，其实也并不一定非要稳定await语法，也可以先稳定await!宏。这个方案有利于早期的使用者，但是对于更广泛的大众来说，似乎并不是那么令人满意。所以可以像try!宏那样，先稳定宏，然后再稳定具体的语法。（让子弹飞一会）&lt;/li&gt;&lt;li&gt;&lt;b&gt;解决难题&lt;/b&gt;。作为一个社区最常做的事情之一，就是找到一种方法来解决真正难以解决的问题。await语法问题正是一个契机，可以帮助优化社区的讨论流程和工具。&lt;br&gt;&lt;br&gt;&lt;b&gt;总之， async/await即将到来：Niko已经迫不及待地想看看人们用它来构建什么了。&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-03-02-58101059</guid>
<pubDate>Sat, 02 Mar 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>这是《Rust编程之道》的故事</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-02-25-57576985.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/57576985&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0363e60dae0aad173e7d9e9ae18484d7_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;2018年12月28号，《Rust编程之道》开启了预售，截止到本月月底就满两个月了。现在《Rust编程之道》已经上架各大电商平台正式开售，亚马逊Kindle电子版也已上架，欢迎大家订购学习。&lt;/p&gt;&lt;p&gt;除此之外，我也想跟大家唠嗑一下关于这本书的一些故事。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;恶评风波&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;预售开启后的第一周，遭遇恶评。&lt;/p&gt;&lt;p&gt;当我满心欢喜，等待读者对本书的评价时。第一个看到的却是一个心理残疾的恶心小人发布的恶评，具体可参见我知乎专栏相关文章。&lt;/p&gt;&lt;p&gt;有的人说，不就是一个差评吗？那么在乎干什么？心胸要宽广点。这话说来轻巧。一年的精心写作，比作怀胎十月也不为过。新生命的诞生，总是让人喜悦的，并且对它未来的成长充满了期待。换成谁，也绝不会允许别人恶意的诋毁。这不是差评那么简单，我绝不会原谅这个小人。&lt;/p&gt;&lt;p&gt;过年期间，看了《流浪地球》，一部匠心之作。同样是在豆瓣，遭遇了垃圾的诋毁。为什么呢？就是吴京PTSD综合症患者，也不管电影拍的如何，看见吴京就会骂。这些人和我得罪的那个小人是一样的心理残疾。&lt;/p&gt;&lt;p&gt;当然，也有更多的人跟我说：「真正的读者，都有自己的判断力」。事实证明，确实如此。&lt;/p&gt;&lt;p&gt;恶评风波过后几天，全国各地的读者陆陆续续都收到了书。大家在看过本书以后，纷纷找到我，对我说出内容一致的话：「书写的不错」。这句话，将我内心因为被恶评而产生的坏心情一扫而光。之前我在知乎也公开了几次，我也保存了很多私聊的截图，但暂时就不公开了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;正视差评&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;除了恶评，其实还有差评。比如你去翻一下淘宝或京东下面的评论，会发现有人说：「什么烂书，开篇就有错」。实话实说，对于这种差评，我是百分百的接受。因为确实有错。&lt;/p&gt;&lt;p&gt;人无完人，孰能无过？我是第一次写这么厚的书。在写书之前我并没有预见或约束自己一定要写多少字。我只是想把我觉得该写的，都写出来。结果一下就写了百万字（当然包括代码）。&lt;/p&gt;&lt;p&gt;写书的过程，也是很累的。到后期，我自己都有点麻木。有时候，为了写好一句话，想半天。而且，我发现一个诡异的问题。当时写的文字，自己阅读几遍，觉得非常通顺达意。但是过几天，或几周再看，感觉写的完全是狗P不通。甚至还有明显的语病。&lt;/p&gt;&lt;p&gt;这就是人类的大脑。它是有缺陷的，只能通过反复的筛查和修改来发现问题。再加上稿件交给出版社，还需要专门的排版人员去排版，这也增加了出错的风险。编辑们也很辛苦，审稿三次。说这么多，并不是想找借口，而是想说明一个问题，这种事情是难以避免的。&lt;/p&gt;&lt;p&gt;而且这种差评，在我决定写本书之前就已经预料到了。为了弥补这种可以预见的错误，我做了以下两件事：&lt;/p&gt;&lt;p&gt;&lt;b&gt;一、 创建Rusty风格的源码仓库。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;因为Rust的文档注释功能相当强大，所以我就想到，直接把源码创建为一个crate多好。发布到&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//crates.io/crates/tao-of-rust&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io/crates/tao-of&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;-rust&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;，就可以直接生成相关文档 ：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//docs.rs/tao-of-rust/1.0.2/tao_of_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tao_of_rust - Rust&lt;/a&gt;。并且可以一键点击文档中的示例，一键跳转到&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//play.rust-lang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust Playground&lt;/a&gt;，方便动手调试代码。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f3c05388cd1d22471df211fbfeccfbe2_b.jpg&quot; data-rawwidth=&quot;2066&quot; data-rawheight=&quot;858&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2066&quot; data-original=&quot;https://pic3.zhimg.com/v2-f3c05388cd1d22471df211fbfeccfbe2_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f3c05388cd1d22471df211fbfeccfbe2_b.jpg&quot; data-rawwidth=&quot;2066&quot; data-rawheight=&quot;858&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2066&quot; data-original=&quot;https://pic3.zhimg.com/v2-f3c05388cd1d22471df211fbfeccfbe2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f3c05388cd1d22471df211fbfeccfbe2_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c3b96dd66eff89952173e6074bb820a6_b.png&quot; data-rawwidth=&quot;3720&quot; data-rawheight=&quot;582&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3720&quot; data-original=&quot;https://pic3.zhimg.com/v2-c3b96dd66eff89952173e6074bb820a6_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c3b96dd66eff89952173e6074bb820a6_b.png&quot; data-rawwidth=&quot;3720&quot; data-rawheight=&quot;582&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3720&quot; data-original=&quot;https://pic3.zhimg.com/v2-c3b96dd66eff89952173e6074bb820a6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-c3b96dd66eff89952173e6074bb820a6_b.png&quot;&gt;&lt;/figure&gt;&lt;p&gt;另外一个好处就是，如果示例代码有印刷错误、手误，或者因为Rust版本升级而无法运行，我可以方便地修改这个仓库源码。书中也声明了，让大家以仓库源码为主，毕竟提供了这么方便的功能。&lt;/p&gt;&lt;p&gt;&lt;b&gt;二、打通沟通渠道。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;2018年初，我开始为Rust社区提供「Rust日报」服务。每天梳理一些Rust的新闻，发送到Rust社区。这样做有两个方面的原因。第一个原因，是我自己也想了解Rust社区的动态，并且通过这个过程，挖掘一些学习资源。整理和分享，顺手的事。第二个原因，就是为了建立一种渠道，在书出版以后，可以把我和读者方便地联系起来。&lt;/p&gt;&lt;p&gt;事实证明效果很好。以随书源码的issues为勘误列表，我创建了勘误模板，大家在看到我在日报里推送的消息，都踊跃地提交了勘误。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-111fa856807f12e92ad79e8254eb7135_b.jpg&quot; data-rawwidth=&quot;2328&quot; data-rawheight=&quot;1860&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2328&quot; data-original=&quot;https://pic2.zhimg.com/v2-111fa856807f12e92ad79e8254eb7135_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-111fa856807f12e92ad79e8254eb7135_b.jpg&quot; data-rawwidth=&quot;2328&quot; data-rawheight=&quot;1860&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2328&quot; data-original=&quot;https://pic2.zhimg.com/v2-111fa856807f12e92ad79e8254eb7135_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-111fa856807f12e92ad79e8254eb7135_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;这些勘误，和「差评」的不同点在于：这些读者都是认真看书的，他们接受书本的错误，对作者（我）宽容以待，并且是经过认真思考的，并且希望获得准确的知识。一位读者在豆瓣这样评价： 「瑕不掩瑜」。因为本书的整体，大家都是认同的。&lt;/p&gt;&lt;p&gt;经过这样的反馈，也方便我及时修正书中的相应问题。在后续的印刷版本或电子书中及时更正。&lt;/p&gt;&lt;p&gt;我一直认为，写书就是和读者的交流和沟通。通过这本书的勘误，以及读者群里的各种交流，我体验到了什么叫「群体智慧」。写书的过程，太漫长。再加上我自己的水平和认知也是有限的，所以对于一些概念的理解，难免也有问题。这些认真的读者发现了，他们通过我构建的反馈渠道给我正面反馈。我根据这些反馈，再重新思考相应内容，又进一步加深了我对相应知识的理解。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;斩获殊荣&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我的用心，都在书里了，大家也看在眼里了。下面是本书斩获的一些殊荣。&lt;/p&gt;&lt;p&gt;&lt;b&gt;预售第一个月：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;开启了第二次印刷&lt;/li&gt;&lt;li&gt;京东24小时新书榜第一、计算机总榜第六&lt;/li&gt;&lt;li&gt;京东计算机新书周榜前十&lt;/li&gt;&lt;li&gt;京东计算机新书月榜前十 &lt;/li&gt;&lt;li&gt;京东图书计算机类首页热门读物推荐&lt;/li&gt;&lt;/ol&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f789c1c6fa90d354d071556093d7ed25_b.jpg&quot; data-rawwidth=&quot;2588&quot; data-rawheight=&quot;1390&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2588&quot; data-original=&quot;https://pic2.zhimg.com/v2-f789c1c6fa90d354d071556093d7ed25_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f789c1c6fa90d354d071556093d7ed25_b.jpg&quot; data-rawwidth=&quot;2588&quot; data-rawheight=&quot;1390&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2588&quot; data-original=&quot;https://pic2.zhimg.com/v2-f789c1c6fa90d354d071556093d7ed25_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-f789c1c6fa90d354d071556093d7ed25_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-869216479c10e5d6a82677f850a20d53_b.jpg&quot; data-rawwidth=&quot;1940&quot; data-rawheight=&quot;2246&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1940&quot; data-original=&quot;https://pic4.zhimg.com/v2-869216479c10e5d6a82677f850a20d53_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-869216479c10e5d6a82677f850a20d53_b.jpg&quot; data-rawwidth=&quot;1940&quot; data-rawheight=&quot;2246&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1940&quot; data-original=&quot;https://pic4.zhimg.com/v2-869216479c10e5d6a82677f850a20d53_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-869216479c10e5d6a82677f850a20d53_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;预售第二个月（也是本月）&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;开启了第三次印刷。&lt;/li&gt;&lt;li&gt;亚马逊Kindle版电子书刚上线一天，即进入了新品销售排行榜程序语言第一、互联网技术总榜第八。&lt;/li&gt;&lt;li&gt;豆瓣评价 9.2分。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-687ded7f995e5cd3428c2067774c0486_b.jpg&quot; data-rawwidth=&quot;4042&quot; data-rawheight=&quot;1906&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;4042&quot; data-original=&quot;https://pic3.zhimg.com/v2-687ded7f995e5cd3428c2067774c0486_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-687ded7f995e5cd3428c2067774c0486_b.jpg&quot; data-rawwidth=&quot;4042&quot; data-rawheight=&quot;1906&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;4042&quot; data-original=&quot;https://pic3.zhimg.com/v2-687ded7f995e5cd3428c2067774c0486_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-687ded7f995e5cd3428c2067774c0486_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1827b0ca0eaaf05fd9592f917157e1c9_b.jpg&quot; data-rawwidth=&quot;2060&quot; data-rawheight=&quot;782&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2060&quot; data-original=&quot;https://pic2.zhimg.com/v2-1827b0ca0eaaf05fd9592f917157e1c9_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1827b0ca0eaaf05fd9592f917157e1c9_b.jpg&quot; data-rawwidth=&quot;2060&quot; data-rawheight=&quot;782&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2060&quot; data-original=&quot;https://pic2.zhimg.com/v2-1827b0ca0eaaf05fd9592f917157e1c9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-1827b0ca0eaaf05fd9592f917157e1c9_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d26e6c4659a70cd4547d5e05095b6f01_b.jpg&quot; data-rawwidth=&quot;2046&quot; data-rawheight=&quot;746&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2046&quot; data-original=&quot;https://pic2.zhimg.com/v2-d26e6c4659a70cd4547d5e05095b6f01_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d26e6c4659a70cd4547d5e05095b6f01_b.jpg&quot; data-rawwidth=&quot;2046&quot; data-rawheight=&quot;746&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2046&quot; data-original=&quot;https://pic2.zhimg.com/v2-d26e6c4659a70cd4547d5e05095b6f01_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d26e6c4659a70cd4547d5e05095b6f01_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;我在写本书之前，就立下了一个小心愿：「一定要写出豆瓣评分9.0以上的作品」。这个小心愿的标杆就是我之前翻译的《Ruby原理剖析》的评分。其实，在《流浪地球》的恶评事件之后，我对豆瓣的评分已经很失望了。但至少，排除那一个恶评之外，评价的这几个人中，都是认真看过书的。我的小心愿，总算是得以满足。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;何谓之「道」&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;之前看到有的人说，中国人起个书名就爱起个「道」啊「禅」啊，都看腻了。但我其实更希望他问：“你为什么要起《Rust编程之道》这个名字？”。&lt;/p&gt;&lt;p&gt;「道」，这个词，出自老子的《道德经》。这本书蕴含了辩证逻辑思想，代表了中国的哲学智慧。「道」，就是指在宇宙万物背后隐藏的那个规律。 这个规律包含了秩序，也包含了混沌。宇宙万物的运转，脱离不了「道」。&lt;/p&gt;&lt;p&gt;《Rust编程之道》书名中的「道」，就是指「Rust宇宙中的万物」背后所遵循的那个东西。与「现实宇宙」不同的地方在于，「Rust宇宙」是人造的，而「现实宇宙」是神造的。（这里的神，代表「自然」的鬼斧神工）。&lt;/p&gt;&lt;p&gt;所以，我在第一章开篇就这样写道：&lt;/p&gt;&lt;blockquote&gt; 你肯定有过夏夜仰望星空的时候，但不知道你是否思考过这样一个问题：如何才能知道宇宙万物星罗棋布的规律？科学家们殚精竭虑地研究，就是为了探寻这个秘密。如果科学家们能和宇宙的设计者对话，就可以通过设计者的亲口描述了解其对宇宙万物的规划，这样就可以对研究宇宙万物起到提纲挈领的作用，科学家们的工作会更有成效。但是，没有这种“如果”。  &lt;br&gt; 一门编程语言就像一个小宇宙，语言中的各种语法概念就像一颗颗星辰。对于初学者来说，看这些语法概念与看星罗棋布时产生的迷惑是相似的。幸亏编程语言是由人类创造的，编程语言的作者可以被找到，编程语言的源码也可以被看到，甚至一些好的编程语言还会为你准备好非常丰富的文档，供你参阅学习。通过这些信息我们可以了解到：一门语言缘何诞生？它想解决什么问题？它遵循什么样的设计哲学？一门好的语言是有内涵哲学的语言，它表里如一，有所想，有所为。  &lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;这就是我为什么把书名定为《Rust编程之道》的原因。&lt;/p&gt;&lt;p&gt;Rust从诞生以来，一直就伴随着一个标签：「学习曲线高」。然而，在我开始学习Rust之后，我发现一个问题，其实并非Rust学习曲线高，而是我们的学习方法有问题。&lt;/p&gt;&lt;p&gt;最初，我只了解到Rust是一个混合范式的语言，我以为只是简单的把OOP和函数式的概念加工一下，混起来。但深入了解以后，我发现并不是这么简单。Rust语言的混合范式，实际上是通过类型系统，将现有范式进行了有机地融合。一切都那么地自然。&lt;/p&gt;&lt;p&gt;最初，我以为凭借我十年编程的功力，学Rust不就是几天的事吗？然而，我又错了。在我深入Rust以后才明白一个道理：不仅仅是未知的知识会形成我学习的阻碍，连我以往的经验都会成为我的绊脚石。&lt;/p&gt;&lt;p&gt;Rust要解决的问题也非常明确：内存安全、高性能、现代化编程语言。&lt;/p&gt;&lt;p&gt;内存安全，还不能有GC，并且要求高性能，这就意味着Rust具有精细化操作内存的能力，而且还不容易产生未定义行为。Rust借助类型系统，以及独特的所有权机制，达成了这个目标。&lt;/p&gt;&lt;p&gt;那什么是现代化编程语言？现代化意味着语言应该具有高度的表达能力。按往常的知识，高度抽象表达能力，就意味着性能的损耗，Rust如何做到呢？答案是：零成本抽象。同样是借助类型系统，几乎所有的抽象都只在编译期，编译后的代码将不包含任何抽象。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5f6346af275a1fc2ce3ff2ce5b0bc949_b.jpg&quot; data-rawwidth=&quot;3270&quot; data-rawheight=&quot;2072&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3270&quot; data-original=&quot;https://pic2.zhimg.com/v2-5f6346af275a1fc2ce3ff2ce5b0bc949_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5f6346af275a1fc2ce3ff2ce5b0bc949_b.jpg&quot; data-rawwidth=&quot;3270&quot; data-rawheight=&quot;2072&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3270&quot; data-original=&quot;https://pic2.zhimg.com/v2-5f6346af275a1fc2ce3ff2ce5b0bc949_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5f6346af275a1fc2ce3ff2ce5b0bc949_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;因此，我得出一个Rust的语言架构。Rust语言的类型系统，承上启下，保证语言的一致性。上承所有权语义，下启无GC的内存安全管理。&lt;/p&gt;&lt;p&gt;《Rust编程之道》就是按此语言架构来进行内容组织。希望可以帮助读者把Rust中的概念结构化和层次化，形成系统的知识体系，达成精通Rust的目的。&lt;/p&gt;&lt;h2&gt;寄语读者&lt;/h2&gt;&lt;p&gt;看本书的最佳实践，其实我都写在文前了。可惜我发现，很多人拿到书，都不看文前。&lt;/p&gt;&lt;p&gt;《如何阅读一本书》中，对于看书学习的过程，有一个类比非常好。 &lt;/p&gt;&lt;p&gt;你学滑雪的时候，是先学会一个个的分解动作，然后把这些分解动作，再归并为一个整体，你才能快乐地滑雪。没有人滑雪的时候，还在做一个个的分解动作。&lt;/p&gt;&lt;p&gt;看书学习也是这样一个过程。书的作者（比如我），将一个整体性的知识，拆分一个个的分解知识（各个章节）。读者首先要做的是，先对Rust有一个整体性的了解，然后再逐步学习分解知识，最后，再需要你自己，把学到的分解的知识，梳理为一个整体。这样才是你自己的知识。&lt;/p&gt;&lt;p&gt;其实第一章和第二章的目标，就是为了让你从整体上去了解Rust语言。 多动手练习代码，从语法上先把陌生感消除掉，然后再深入到后面的章节更好。在练习第二章代码的时候，也不要过于深入到细节。要记住第二章的副标题所说的：好读书，不求甚解。你不可能一遍学会Rust。&lt;/p&gt;&lt;p&gt;最后，希望大家都能精通Rust。如果想要进读者群交流学习，可以加此微信邀请进群。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-269daab872eb5cfe83881b46bd6f0b57_b.jpg&quot; data-rawwidth=&quot;226&quot; data-rawheight=&quot;178&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image&quot; width=&quot;226&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-269daab872eb5cfe83881b46bd6f0b57_b.jpg&quot; data-rawwidth=&quot;226&quot; data-rawheight=&quot;178&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image lazy&quot; width=&quot;226&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-269daab872eb5cfe83881b46bd6f0b57_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;最后的最后，感谢大家的认可。我会再接再厉，继续出好作品。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-02-25-57576985</guid>
<pubDate>Mon, 25 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第七期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-02-24-57536640.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/57536640&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-02-24&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;通告两则&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「正式介绍」 首届 RustCon Asia大会将在北京举行&lt;/h2&gt;&lt;h2&gt;RustConAsia&lt;/h2&gt;&lt;p&gt;讲师议题申请仅剩最后一周，大家抓紧。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/vBKiFdNoCat3I9NYdV5yIA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.huodongxing.com/event/6479456003900&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;早鸟票&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//cfp.rustcon.asia/events/rustcon-asia&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;讲师议题报名&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「通告」Rusty 棒球帽团购活动&lt;/h2&gt;&lt;p&gt;发货日期： 满10人就开团了，下单以后一周左右。&lt;/p&gt;&lt;p&gt;截止日期： 2月28号。 28号以后就不要再问还能不能定制了。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;材质：毛腈，Rust logo使用刺绣工艺&lt;/li&gt;&lt;li&gt;大小： 头围 56~62，均码，可调节大小&lt;/li&gt;&lt;li&gt;颜色三种： 黑、黄、橘 （参见图1~3，后两张是店家的实物效果图）&lt;/li&gt;&lt;li&gt;一顶帽子配套两个镭射标贴： Rust吉祥物螃蟹和Rust logo各一个，可以贴到帽子上，或者你想贴的其他地方。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;价格构成：一共50元。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;帽子成本： 30 （10人以上的价格）&lt;/li&gt;&lt;li&gt;镭射标签:  5元 （两个一共）&lt;/li&gt;&lt;li&gt;邮费预付： 15（看地区，多退少补），或者邮费到付也可以。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;价格透明，此次定制活动的初衷是因为我自己喜欢，所以想找人平摊费用，我并没有收取中间差价，但也不能我自己亏本。&lt;/p&gt;&lt;p&gt;意向购买者，给我发邮件 247026628「at」&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//qq.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;qq.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; ，按下面要求填写：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;详细的收件地址和电话&lt;/li&gt;&lt;li&gt;数量和颜色&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不写收获地址或者数量和颜色，我也没办法给你定。&lt;/p&gt;&lt;p&gt;图样：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cf9fa5d7eba73bfd92c2528892c147fb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;472&quot; data-rawheight=&quot;418&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;472&quot; data-original=&quot;https://pic4.zhimg.com/v2-cf9fa5d7eba73bfd92c2528892c147fb_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cf9fa5d7eba73bfd92c2528892c147fb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;472&quot; data-rawheight=&quot;418&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;472&quot; data-original=&quot;https://pic4.zhimg.com/v2-cf9fa5d7eba73bfd92c2528892c147fb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-cf9fa5d7eba73bfd92c2528892c147fb_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7e613ce420dc61b78e3a5ce0b092b55f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;456&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;456&quot; data-original=&quot;https://pic4.zhimg.com/v2-7e613ce420dc61b78e3a5ce0b092b55f_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7e613ce420dc61b78e3a5ce0b092b55f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;456&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;456&quot; data-original=&quot;https://pic4.zhimg.com/v2-7e613ce420dc61b78e3a5ce0b092b55f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-7e613ce420dc61b78e3a5ce0b092b55f_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-08d1b6c1c0877a6ccb8f9e68e5cd4810_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;450&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;450&quot; data-original=&quot;https://pic1.zhimg.com/v2-08d1b6c1c0877a6ccb8f9e68e5cd4810_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-08d1b6c1c0877a6ccb8f9e68e5cd4810_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;450&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;450&quot; data-original=&quot;https://pic1.zhimg.com/v2-08d1b6c1c0877a6ccb8f9e68e5cd4810_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-08d1b6c1c0877a6ccb8f9e68e5cd4810_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-450016baeab3881c648e7ee0feb5ff8f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;518&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-450016baeab3881c648e7ee0feb5ff8f_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-450016baeab3881c648e7ee0feb5ff8f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;518&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-450016baeab3881c648e7ee0feb5ff8f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-450016baeab3881c648e7ee0feb5ff8f_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9ae1777867d9bbf4478875ad46efbec1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;518&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-9ae1777867d9bbf4478875ad46efbec1_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9ae1777867d9bbf4478875ad46efbec1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;518&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-9ae1777867d9bbf4478875ad46efbec1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-9ae1777867d9bbf4478875ad46efbec1_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「官方」Rust官方团队变更说明&lt;/h2&gt;&lt;h2&gt;RustTeam&lt;/h2&gt;&lt;p&gt;Rust官方团队发出变更说明：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Nick Cameron（nrc）离开了Mozilla加入了PingCAP，但依然会共同领导Cargo团队。&lt;/li&gt;&lt;li&gt;Aaron Turon决定退出核心团队，以便专注于工程工作和语言设计团队。他依然留在Rust团队中。&lt;/li&gt;&lt;li&gt;Ashley Williams加入了Cloudflare并计划在那里开展Rust和WASM集成。她将留在核心团队。&lt;/li&gt;&lt;li&gt;Steve Klabnik离开了Mozilla，但仍留在核心团队中。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/02/22/Core-team-changes.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方思考」Rust团队在2019年将要做什么&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/57478131&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Generators II: 关于「问号语法糖」的问题&lt;/h2&gt;&lt;p&gt;这是无船同志对于Generator MVP设计的第二篇文章。在第一篇文章里提到，Generator如何返回除&lt;code&gt;()&lt;/code&gt;之外的类型，所以在这篇文章中探讨了Generator与问号语法集成的问题和解决思路。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/generators-ii/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/arygiw/generators_ii_the_question_mark_problem/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;RustConf 2019 FCP也启动了&lt;/h2&gt;&lt;p&gt;这是官方举办的RustConf 2019，在4.22和23号举办。&lt;/p&gt;&lt;p&gt;国内的朋友可以看看RustConAsia。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//cfp.rustconf.com/events/rustconf-2019&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RustConf:Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/vBKiFdNoCat3I9NYdV5yIA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RustConAsia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.huodongxing.com/event/6479456003900&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RustConAsia: 早鸟票&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//cfp.rustcon.asia/events/rustcon-asia&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RustConAsia: 讲师议题报名&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;嵌入式工作组报告第15期&lt;/h2&gt;&lt;p&gt;本期总结了Rust All Hands 2019讨论会上的要点，这些要点非常明确，和其他工作组相比，足够细化，比如具体稳定哪个API之类。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rust-embedded.github.io/blog/newsletter-15/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;WebAssembly 报告 11期&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rustwasm.github.io/2019/02/21/this-week-in-rust-and-wasm-011.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「视频」可视化Rust编译器演进历史&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//vimeo.com/317852618&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;xi-editor最新进展&lt;/h2&gt;&lt;p&gt;Xi Editor的作者raphlinus写的博文，记录了他最近的一些工作进展：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust中的GUI：他最近的主要工作是将XiEditor中用的原生Rust GUI库druid迁移为跨平台。其中重点是2D图形抽象库piet，已经达到了最小可用阶段。piet库基于Cairo 2D图形引擎实现跨平台。&lt;/li&gt;&lt;li&gt;文本布局。这是Rust GUI生态缺失的部分。Raphlinus开了个新坑：「low level text layout」  &lt;/li&gt;&lt;li&gt;在Mac上运行Druid，是大目标，目前只有druid-shell可以运行。&lt;/li&gt;&lt;li&gt;考察了winit，决定自己实现跨平台的窗口创建库。Raph认为winit适合3D游戏，但不适合一般的GUI。不使用winit的另一个原因是VST，他需要更精细化的访问窗口创建过程。&lt;/li&gt;&lt;li&gt; MarkDown解析库pulldown-cmark项目目前遇到了困难，Raph认为该代码库存在根本性的问题，所以他重启了一个分支（new_algo）。&lt;br&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//raphlinus.github.io/personal/2019/02/20/more-small-updates.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;br&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/xi-editor/druid&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;druid&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/linebender/piet&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;piet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//docs.google.com/document/d/1aw41q_izail-p99mN8dHrJeh9tMQ-Pldi54W6m7MHU8/edit&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Project roadmap: low level text layout&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/raphlinus/pulldown-cmark&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pulldown-cmark&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;给Rust提交100个PR是什么感觉？&lt;/h2&gt;&lt;p&gt;该文作者学习Rust一年，这一年内给Rust提交了100个PR。他写下此文作为总结。其中大部分PR是给Clippy做贡献，接下来他也打算继续给Clippy做贡献。&lt;/p&gt;&lt;p&gt;大家学习Rust是不是也可以定这样一个小目标呢？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//phansch.net/2019/02/18/onehundred-rust-prs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//phansch.net/onehundred/rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;100个PR列表&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;C和Rust实现网络协议的比较练习&lt;/h2&gt;&lt;p&gt;该文作者用C和Rust分别实现了网络协议demo，并对它们做了比较：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust实现花了400行代码，依赖12个crate&lt;/li&gt;&lt;li&gt;C版本911行代码和另外140行头部声明，依赖libuv和openssl&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;本文作者是C工程师，他用C游刃有余，但是对于用Rust实现，他认为把太多时间都用在和编译器斗争上面了。他也体验到了Rust的一些好处，比如编译通过的代码更加可靠，而C代码则需要反复测试。但是它认为，C代码即便写错了，反复修改的反馈回路也会更短，因为Rust编译时间太长（也许是因为作者编译C习惯了，所以无法忍受Rust的编译速度）。他其实更喜欢C的简单性，所以他想，也许有Go对他来说就够用了。他认为Rust试图又做底层工作，又提供了更高级的抽象，然而他没有感受到这样做的好处是什么？&lt;/p&gt;&lt;p&gt;（个人观点：文章描述还是客观，这篇文章是C工程师的视角，我认为可能他还是带着C语言思维和体验去看待Rust，比如，他已经习惯了在代码「编译以后再发现错误再修改」这种「常规」行为，面对Rust编译器的种种限制，反而会有些不耐烦，而没有意识到Rust编译器这样做的原因是什么。Reddit讨论贴里有很多评论者也和我持有相应的观点：即便你是一个C语言熟手，要用Rust，还需要适应一段时间Rust的概念。）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//ayende.com/blog/185859-A/comparing-c-and-rust-network-protocol-exercises%3FKey%3Dbd1ba87d-6e7e-4739-824d-0ca6fc232b05&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/atevrm/comparing_c_and_rust_network_protocol_exercises/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//itch.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;itch.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;上面使用Rust实现的游戏合集&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//itch.io/c/449652/rustlang-games&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;寻找有空闲时间的Rust开发者参与开源项目&lt;/h2&gt;&lt;p&gt;纯开源项目，没有商业化，于2013年启动，现在寻找一些Rust开发者参与游戏开发。看上去好像「我的世界」类的沙盒多人多角色RPG游戏。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aje3bs/looking_for_rust_programmer_with_lots_of_free_time/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/veloren/game&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;veloren/game&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Lyon 发布0.13版本&lt;/h2&gt;&lt;p&gt;Lyon是一个基于GPU的2D图形渲染库。作者在本文回顾了2018年Lyon的进展。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//nical.github.io/posts/lyon-2018.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;生命周期可视化讨论&lt;/h2&gt;&lt;p&gt;本文作者探讨了为Rust编辑器或IDE实现生命周期可视化的一种方案，期待能有人接受他的想法，做出更优秀的Rust工具。去年有人实现了一个Atom编辑器插件，提供了生命周期可视化原型。但是随着NLL的引入，之前的那个工具应该不太适合使用了。所以作者设计了一种新的可视化方案。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Filecoin的复制游戏：最快的复制算法对抗赛&lt;/h2&gt;&lt;p&gt;Filecoin的复制证明（Proof of Replication）游戏，以鼓励参与者通过调试参数、完善代码等方式促进复制证明的优化。什么是复制证明？找了一篇介绍文：「IPFS:Filecoin和复制证明」。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/filecoin-project/replication-game&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;replication-game&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32809642&quot; class=&quot;internal&quot;&gt;IPFS:Filecoin和复制证明&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Holo正在招聘Rust工程师（100%远程工作）&lt;/h2&gt;&lt;p&gt;Holochain，区块链公司。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//holo.host/careers/rust-developer/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;该公司也发布了Holochain开发者预览版&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/holochain/developer-preview-0-0-4-alpha-and-enabling-full-authority-over-data-for-holo-users-3cc8794855d4&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust Weekly本周周报&lt;/h2&gt;&lt;p&gt;包含了本周TiKV的issues，看到有两个easy的，如果愿意可以选择趁手的提交PR。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//this-week-in-rust.org/blog/2019/02/19/this-week-in-rust-274/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Rust管理嵌入式物联网设备中的安全漏洞&lt;/h2&gt;&lt;p&gt;该文作者是一名专门从事嵌入式系统的安全顾问。他认为Rust肯定会在物联网、网络和嵌入式开发中占有一席之地，但没有人可以100%地完全杜绝漏洞，Rust也不行。因此，Rust安全代码工作组已经开始关注，如何利用Rust的内置解决方案来进一步提高关键代码的保护。比如，在生产环境中，如何知道有哪些安全漏洞需要更新？这也是Rust安全工作组在2019年要解决的问题，Rust要及时地向任何类型的生产部署提供安全更新。&lt;/p&gt;&lt;p&gt;除了Rust团队之外，其他安全单位的工作人员也在思考此类问题，并且有一个安全研究项目（SECONDS），该文作者及其他很多安全公司的人参与了该项目。一共评估了非Rust语言实现的37000个开源组件，发现了96321个漏洞。平均每个组件2.5个漏洞。&lt;/p&gt;&lt;p&gt;SECONDS项目的报告也可以作为一个现成的参考，可以丰富RustSec安全数据库。另外，Rust社区也提供了cargo-crev安全审计工具。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40flundstrom2/manage-security-vulnerabilities-in-embedded-iot-devices-with-rust-14aeabada68b&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「视频」实现TCP Part I&lt;/h2&gt;&lt;p&gt;作者介绍：&lt;/p&gt;&lt;p&gt;Jon，目前是MIT的一名Phd，带领小组团队实现了Noria项目（一个并发数据库）。他的导师戏称他：东半球Rust第一人（参加他的另一个演讲视频：Rust at speed — building a fast concurrent database）。他经常直播Rust视频，最早日报中介绍过的是他直播Rust异步的视频课程，长达4小时。今天这个视频长达5小时，是讲解如何用Rust实现用户态的TCP协议，遵循RFC793和RFC 1122。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3Dbzja9fQWzdA&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/jonhoo/rust-tcp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;源码：rust-tcp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;为Minix平台交叉编译Rust代码&lt;/h2&gt;&lt;p&gt;Minix启发了Linus实现Linux的微内核。该文作者尝试将Rust标准库移植到Minix平台，以便Rust代码在Minix下运行。&lt;/p&gt;&lt;blockquote&gt; So there were two things I did that summer. Nothing. And read the 719 pages of 《Operating Systems: Design and Implementation》. ---  摘自Linus Torvalds自传《Just For Fun》&lt;br&gt; &lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ids1024/rust-minix&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-minix&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;通过实现Punchtop来学习Rust的思考&lt;/h2&gt;&lt;p&gt;Punchtop是该文作者用Rust和JS实现的一款使用Chromecast作为音频输出设备的音频游戏。大约有3700行Rust代码。适合新人去学习。文章中总结了他的学习心得。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//hyperbo.la/w/reflections-on-learning-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Diesel核心开发者在一个旧的issues下澄清了社区对Diesel的一些误解&lt;/h2&gt;&lt;p&gt;值得一看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rfcs/issues/798%23issuecomment-465324544&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rs-pbrt v0.5.1发布日志&lt;/h2&gt;&lt;p&gt;rs_pbrt是对《Physically Based Rendering,PBRT(光线跟踪：基于物理的渲染) 》这本书中代码的Rust实现。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.rs-pbrt.org/blog/2019-02-19-v0-5-1-release-notes/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust FFI简要指南&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rushsteve1.us/wp/getting-started-with-rust-ffi/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust中的Builder模式&lt;/h2&gt;&lt;p&gt;该文章介绍了Rust常用的设计模式：Builder模式。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//oribenshir.github.io/afternoon_rusting/blog/building-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;为什么要用Rust写WebAssembly？&lt;/h2&gt;&lt;p&gt;这篇短文告诉你用Rust编写WebAssembly的优势，要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;其他语言具有必须包含在WebAssembly二进制文件中的巨大的运行时。&lt;/li&gt;&lt;li&gt;Rust更加安全和方便。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//opensource.com/article/19/2/why-use-rust-webassembly&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;在Linux上为macOS交叉编译Rust程序&lt;/h2&gt;&lt;p&gt;当你身边仅有一台Linux机器，如何编译到macOS呢？这篇文章告诉你怎么做。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//wapl.es/rust/2019/02/17/rust-cross-compile-linux-to-macos.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Mesh：可避免灾难性内存碎片的内存分配器&lt;/h2&gt;&lt;p&gt;Mesh目前用于C/C ++应用程序的压缩内存管理，它是malloc的替代品。论文中显示，未来计划支持Go和Rust。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/arkbic/mesh_compacting_memory_management_for_cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1902.04738&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;论文&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/plasma-umass/Mesh/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Kingston Crabfighting： 汇编指令猜谜游戏&lt;/h2&gt;&lt;p&gt;基于「ryanisaacg/quicksilver」实现，quicksilver是一个纯Rust实现的2D 游戏引擎 ，支持桌面和Web（wasm32-unknown-unknown）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rickyhan.com/jekyll/update/2019/02/17/kingston-crabfight.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;textalyzer： 可视化的命令行文本分析工具&lt;/h2&gt;&lt;p&gt;目前只限分析英文，如果你学习Rust不知道该做什么项目，不妨做一个支持中文的类似的工具?&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ad-si/textalyzer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;textalyzer&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;anevicon: 强大的基于UDP的负载生成器&lt;/h2&gt;&lt;p&gt;负载生成器是产生虚拟用户（实际压力），用于性能测试场景。当在一台电脑上无法模拟大量的虚拟用户的时候，就可以通过多个Load Generator来完成大规模的性能负载。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/Gymmasssorla/anevicon&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;anevicon&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」embedded-sdmmc-rs: 该库支持读取FAT格式的SD卡&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/thejpster/embedded-sdmmc-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;embedded-sdmmc-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;askama 0.8发布&lt;/h2&gt;&lt;p&gt;Askama，一个受Jinja（python模板引擎）启发的新的Rust模板渲染引擎，新版本性能提升了2倍。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/djc/askama/releases/tag/0.8.0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;yarte: 号称最快的模板引擎&lt;/h2&gt;&lt;p&gt;新库，采用handlebars风格的语法。不过，另外一个模板库Askama作者曝出yarte涉嫌抄袭Askama。但yarte的性能看上去更好一些。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-iendo/yarte&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;yarte&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-iendo/template-benchmarks-rs%23rust-template-engine-benchmarks-in-nightly-&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-template-engine-benchmarks-in-nightly&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;dgraph-rs: Rust实现的Dgraph客户端&lt;/h2&gt;&lt;p&gt;Dgraph 是一个可扩展的，分布式的，低延迟的图数据库。该客户端使用gRPC和服务端通信。依赖的库是grpcio。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/Swoorup/dgraph-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dgraph-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;codealong: 为项目提供可视化数据&lt;/h2&gt;&lt;p&gt;codealong提供了一组开源工具，帮助你搜集项目的数据来进一步了解团队状态和项目进展。基于Rust和ELK和Kibana实现。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/codealong/codealong&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;codealong&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;wasm-module: 方便操作dom的js库&lt;/h2&gt;&lt;p&gt;基于Web IDL实现，为Rust或C等其他语言提供语言无关的Dom功能。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/richardanaya/wasm-module&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wasm-module&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-02-24-57536640</guid>
<pubDate>Sun, 24 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「官方思考」Rust团队在2019年将要做什么</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-02-23-57478131.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/57478131&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-253e9ff8add7d9e799e6b41dfa19ca64_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;来源：&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//smallcultfollowing.com/babysteps/blog/2019/02/22/rust-lang-team-working-groups/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;smallcultfollowing.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;babysteps/blog/2019/02/22/rust-lang-team-working-groups/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;Rust核心团队领导者Niko，在这篇文章里写下了2019以及未来三年Rust团队的努力方向：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Rust 2015是稳定，Rust 2018是生产，&lt;b&gt;Rust 2021的目标是成熟&lt;/b&gt;。2019年将主要火力集中在很多未完成的特性上。比如特化、GAT、const泛型等。同时，也将继续改进Rust Reference，以及Unsafe代码指南等。&lt;/li&gt;&lt;li&gt;让Niko更兴奋的事，还并非语言的改进。他更关注改变工作组的运作方式。每个工作组将围绕一个特定的目标，并且持续在每周会议上进行沟通交流。这些会议也会向社区开放记录。&lt;/li&gt;&lt;li&gt;将会独立开一个语言团队的git仓库，并以此为「基地」完成工作。&lt;/li&gt;&lt;li&gt;成立&lt;b&gt;活跃工作组&lt;/b&gt;：&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;trait工作组&lt;/b&gt;：专注于制定和实现特化、GAT、impl Trait等和trait相关的工作。&lt;/li&gt;&lt;li&gt;&lt;b&gt;语法工作组&lt;/b&gt;：专注于完成由RFC 1331描述的语法规范。Rust的语法不能由rustc的行为来定义，而是应该出台一个具体的规范。&lt;/li&gt;&lt;li&gt;&lt;b&gt;异步工作组&lt;/b&gt;：专注于async-await语法和future特性的启用。只关注语法层面，不关注生态（有异步生态工作组）。&lt;/li&gt;&lt;li&gt;&lt;b&gt;Unsafe代码指南工作组&lt;/b&gt;：专注于Unsafe代码开发规则的制定，「允许做什么，不允许做什么」。&lt;/li&gt;&lt;li&gt;&lt;b&gt;FFI工作组&lt;/b&gt;：专注于确保Rust和C能够更加无缝地交互，提升开发体验。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上面罗列的事情，只是一个新的起点，它意味着当前Rust团队正在专注的事情。这些事情完成之后，再专注于其他新的事情。新的事情将会列在「愿望单」上面，并公布出来，等到有时间或能力实现的时候，再逐个实现它们。&lt;/p&gt;&lt;p&gt;拭目以待。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-02-23-57478131</guid>
<pubDate>Sat, 23 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「可视化」Rust语言编译器十年变迁</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-02-18-57026696.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/57026696&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-db4a201d40bb62ed4790c2588cf260de_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;搬运自：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//vimeo.com/317852618&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;vimeo.com/317852618&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;该视频可视化制作软件： &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gource.io/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;gource.io/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;a class=&quot;video-box&quot; href=&quot;http://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1080858879344250880&quot; target=&quot;_blank&quot; data-video-id=&quot;&quot; data-video-playable=&quot;true&quot; data-name=&quot;Rust语言编译器十年变迁&quot; data-poster=&quot;https://pic4.zhimg.com/v2-480c78a4b47564aa2114548882487ef3.jpg&quot; data-lens-id=&quot;1080858879344250880&quot;&gt;              &lt;img class=&quot;thumbnail&quot; src=&quot;https://pic4.zhimg.com/v2-480c78a4b47564aa2114548882487ef3.jpg&quot;&gt;              &lt;span class=&quot;content&quot;&gt;                &lt;span class=&quot;title&quot;&gt;Rust语言编译器十年变迁&lt;span class=&quot;z-ico-extern-gray&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-ico-extern-blue&quot;&gt;&lt;/span&gt;&lt;/span&gt;                &lt;span class=&quot;url&quot;&gt;&lt;span class=&quot;z-ico-video&quot;&gt;&lt;/span&gt;https://www.zhihu.com/video/1080858879344250880&lt;/span&gt;              &lt;/span&gt;            &lt;/a&gt;            &lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-02-18-57026696</guid>
<pubDate>Mon, 18 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第六期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-02-17-56935975.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56935975&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-02-17&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;通告两则&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;RustConf Asia 大会来了&lt;/h2&gt;&lt;h2&gt;rustconfAsia&lt;/h2&gt;&lt;p&gt;首届RustConf Asia会议，将在北京时间 4月20~4月23号举办。其中两天为主题演讲，另外两天是workshop。现在已经可以购买早鸟票，也开放了演讲主题申请。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rustcon.asia/blog/hello-asia/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;大会官网&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//cfp.rustcon.asia/events/rustcon-asia&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CFP&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.huodongxing.com/event/6479456003900&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;早鸟票&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;《Rust编程之道》勘误说明&lt;/h2&gt;&lt;p&gt;《Rust编程之道》截止今天，修订了115条勘误，第一次近距离体验到集体智慧的强大。&lt;/p&gt;&lt;p&gt;其中有一些重要的勘误，我把它们打上了「精选」Label，读者朋友们看书学习的时候，可以方便查看。也可以通过选择章节Label，来查看一些勘误。Closed 状态代表我已经修订了稿件。&lt;/p&gt;&lt;p&gt;接下来，我会对这些勘误进行归档，整理一份电子版小册子，方便读者查阅。 ​​​​&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes/issues&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ZhangHanDong/tao-of-rust-codes&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「系列博文」Generator I：迈向MVP&lt;/h2&gt;&lt;p&gt;无船同志新的博文，主要探讨了接下来要对Generator进行重新设计，目标是一个MVP（最小可行性产品，minimum viable product）。当前虽然在Nightly中可用，但还是比较简陋，所以现在开始对其进行精致的设计。大目标也是为了Rust异步可以早日稳定。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//boats.gitlab.io/blog/post/generators-i/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/apitmm/generators_i_toward_a_minimum_viable_product/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「官方」All-Hands 2019回顾&lt;/h2&gt;&lt;p&gt;关于Miri和UCG：&lt;/p&gt;&lt;p&gt;这是Ralfj参加Rust官方All Hands大会后的回顾，只挑了他自己感兴趣的点进行了记录。Ralfj感兴趣的点都是和Unsafe Rust的安全性相关。比如UCG（unsafe code guidelines）和Miri。&lt;/p&gt;&lt;p&gt;我感兴趣的一个点是他提到：Miri已经开始运行了libcore和liballoc的单元测试。这有助于发现标准库中可能的未定义的行为。或者更确切地说，单元测试所涵盖的标准库的部分没有未定义的行为。Ralfj这几个月都是为这个目标努力。&lt;/p&gt;&lt;p&gt;文章里也有详细会议讨论记录的链接。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.ralfj.de/blog/2019/02/12/all-hands-recap.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;关于WASM：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;进一步探讨了wasm-pack 1.0 RoadMap&lt;/li&gt;&lt;li&gt;深入探讨了wasm的模块化工具包的相关细节&lt;/li&gt;&lt;li&gt;讨论如何在Cargo中添加某些通用的构建hook，可以将wasm-pack转换为针对wasm开发的hook实现&lt;/li&gt;&lt;li&gt;讨论wasm支持多线程，以及如何将Rayon库应用于wasm。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//rustwasm.github.io/2019/02/13/this-week-in-rust-and-wasm-010.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;关于Async/Await：&lt;/p&gt;&lt;p&gt;Niko锁定了讨论await语法的issue，这意味着，await语法的讨论即将进入下一个阶段。&lt;/p&gt;&lt;p&gt;在All Hands会议上，官方团队讨论了async/await，事情虽然变得更加清晰，但是还未对await语法达成共识。所以暂时锁定了该issue，然后内部会进行一些针对性讨论，随后在生成报告。所以在这个阶段，issue里进一步的讨论已经起不到什么作用了，所以在官方报告出来之后，再进行下一个阶段的讨论。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-lang/rust/issues/57640%23issuecomment-464152929&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;微软：70％的安全漏洞都是内存安全问题&lt;/h2&gt;&lt;p&gt;微软安全工程师Matt Miller上周在以色列举行的BlueHat安全会议上表示，在过去的12年中，大约70％的微软补丁是为了修复内存安全漏洞。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;不，不是因为「程序员菜」&lt;/h2&gt;&lt;p&gt;针对这篇《微软：70％的安全漏洞都是内存安全问题》的文章，Diesel的作者Sean写了这篇文章。因为网上有很多言论，他们的观点是：不是因为编程语言的问题，而是因为写代码的人太菜，所以才出现这种安全问题。Sean并不同意这种观点。&lt;/p&gt;&lt;p&gt;本文中，Sean结合具体的案例，来说明一个问题：Rust编译器捕获的错误，是有可能超出程序员经验之外的，没有程序员是全能的。期望更好的程序员，完全不是对人类的合理期望。我们需要像Rust这样带有安全防护的语言来防止错误。 难道开车上路，有更好的司机，就不需要安全带了吗？&lt;/p&gt;&lt;p&gt;我们不应该对软件开发人员和编程语言放在一起评判。&lt;/p&gt;&lt;p&gt;(Sean 的这个观点，我比较赞同)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40sgrif/no-the-problem-isnt-bad-coders-ed4347810270&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;SemVer：语义化版本的下一步&lt;/h2&gt;&lt;p&gt;Steve（对，就是刚从Mozilla离职的那位），他也是Semver组织的一员，他们现在准备制作新的语义化版本规范。&lt;/p&gt;&lt;p&gt;为什么？&lt;/p&gt;&lt;p&gt;语义化版本控制诞生于2009年的Ruby社区，随着Bundler的流行，也传播到了Node社区，npm也随之跟进。然后就是Rust的Cargo，都进行了支持。但是语义化版本也有很多缺点。所以他们想要改进。并且专门针对Cargo来进行尝试。&lt;/p&gt;&lt;p&gt;拭目以待。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//words.steveklabnik.com/what-s-next-for-semver&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/orgs/semver/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Semver Org&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「嵌入式Rust」OxidizeConf 大会CFP启动&lt;/h2&gt;&lt;p&gt;Oxidize是一个专注于Rust嵌入式设备和微控制器的活动， OxidizeConf应该是首届嵌入式Rust大会吧。将于4.27在柏林举办。感兴趣可以关注。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//cfp.oxidizeconf.com/events/oxidize-2019&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;比较各种编程语言的FFI开销&lt;/h2&gt;&lt;p&gt;5亿次调用耗费时间（毫秒）简要排名：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Luajit 891&lt;/li&gt;&lt;li&gt;Julia  894&lt;/li&gt;&lt;li&gt;C      1182&lt;/li&gt;&lt;li&gt;Cpp    1182&lt;/li&gt;&lt;li&gt;Rust   1193&lt;/li&gt;&lt;li&gt;Haskell  1197&lt;/li&gt;&lt;li&gt;Java8    4505&lt;/li&gt;&lt;li&gt;Elixr    23852&lt;/li&gt;&lt;li&gt;Go       37975&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dyu/ffi-overhead/blob/master/README.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;为TiKV贡献的机会来了&lt;/h2&gt;&lt;p&gt;这周的三个issues比较简单，成为TiKV贡献者的机会就在眼前。除了这三个，另外还可以寻找其他标记为Easy的任务来完成。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;「已做」把 trait对象使用新的dyn Trait语法。 &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/tikv/tikv/issues/4197&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;issues/4197&lt;/a&gt;&lt;/li&gt;&lt;li&gt;「还有机会」移除 &lt;code&gt;extern crate&lt;/code&gt;语句。&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/tikv/tikv/issues/4196&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;issues/4196&lt;/a&gt;&lt;/li&gt;&lt;li&gt;「已做」为 tikv_alloc 增加 tcmalloc  支持。&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/tikv/tikv/issues/4191&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;issues/4191&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;: （并不是总是）原子引用计数智能指针&lt;/h2&gt;&lt;p&gt;（cpp用智能指针编写的程序，安全性就可以和Rust持平吗？很可能不行）&lt;/p&gt;&lt;p&gt;作者在几个月前，运行了Rust和Cpp的一些数据结构的基准测试，发现Rust实现的RB tree明显慢于cpp。这个现象让作者感到奇怪，因为以他的经验，Rust和Cpp的性能不会产生这么明显的差距。&lt;/p&gt;&lt;p&gt;所以，他就进行了进一步测试。结果发现：cpp的&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;智能指针并不总是原子性的进行引用计数，这是cpp速度快的原因。这说明，&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;在某些并发情况下，会发生数据竞争、悬空指针或内存泄漏等风险。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//snf.github.io/2019/02/13/shared-ptr-optimization/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;从Ruby到Rust经验谈&lt;/h2&gt;&lt;p&gt;注意，该博客ban了来自中国的IP，可挂代理查看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aqonf8/moving_from_ruby_to_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Amethyst Roadmap 2019 发布&lt;/h2&gt;&lt;p&gt;Rust实现的游戏引擎Amethyst发布了一个简单的2019 Roadmap。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/amethyst/amethyst/blob/master/docs/ROADMAP.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Amethyst Roadmap 2019&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;你还在用println宏来调试Rust代码？&lt;/h2&gt;&lt;p&gt;这篇文章介绍了Rust 1.32引入的&lt;code&gt;dbg!&lt;/code&gt;的用法。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.knoldus.com/are-you-still-using-println-in-rust-for-debugging/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列文章」Rust内存模型介绍&lt;/h2&gt;&lt;p&gt;一系列关于Rust中内存的文章，包括栈、堆、全局内存分配器、编译器优化等内容。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//speice.io/2019/02/understanding-allocations-in-rust.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;干掉Unwrap！&lt;/h2&gt;&lt;p&gt;为什么要干掉Unwrap？滥用&lt;code&gt;unwrap()&lt;/code&gt;会导致生产环境中出现各种恐慌。该文作者通过一些代码示例来告诉你如何干掉Unwrap！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//dmerej.info/blog/post/killing-unwrap/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;trait对象一瞥&lt;/h2&gt;&lt;p&gt;该文作者对trait对象做了一个比较系统的梳理。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//tratt.net/laurie/blog/entries/a_quick_look_at_trait_objects_in_rust.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「Fearless Security系列」Part 2: 线程安全&lt;/h2&gt;&lt;p&gt;Fearless Security系列文章一共三篇，是Mozilla工程师对于Security的探讨，本文是第二篇，探讨了线程的安全性，以及Rust如何保证线程安全。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//hacks.mozilla.org/2019/02/fearless-security-thread-safety/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用GoReleaser分发Rust二进制文件&lt;/h2&gt;&lt;p&gt;GoReleaser是Go语言社区的一个分发工具，它可以轻松地分发Go二进制文件。该文作者通过Hack GoReleaser的构建过程来达到支持Rust的目的。&lt;/p&gt;&lt;p&gt;Rust也有类似的工具，cargo-release/ cargo-deliver/ cargo-hublish，但作者说这些工具目前还不如GoReleaser完善。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40jondot/shipping-rust-binaries-with-goreleaser-d5aa42a46be0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;rust-proofs: filecoin协议证明库&lt;/h2&gt;&lt;p&gt;Filecoin是一个去中心化存储网络，也叫做Filecoin的区块链，Filecoin进行了ICO，代币名称为FIL。Filecoin与IPFS是两个项目，IPFS是底层协议，并没有ICO。Filecoin最近几天刚宣布开源，也有其他几个项目是Rust实现。&lt;/p&gt;&lt;p&gt;Filecoin是做在IPFS其上的激励层，通过token激励模式，在IPFS上构建了一个去中心化存储市场，共同点就是他们都是实现存储和检索的资源共享交换。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/filecoin-project/rust-proofs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-proofs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;nimiq: 基于浏览器的区块链&lt;/h2&gt;&lt;p&gt;国外一家创业公司的开源产品。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/nimiq/core-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;nimiq/core-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rust-headless-chrome: Puppeteer库的Rust实现&lt;/h2&gt;&lt;p&gt;Puppeteer库是Node实现的一个无头浏览器，通过该库可以自动化浏览器的大多数动作。rust-headless-chrome则是Rust实现的类似的库。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/atroche/rust-headless-chrome&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-headless-chrome&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」embedded-graphics: 小型2D图形库&lt;/h2&gt;&lt;p&gt;一个小型2D图形库，用于在嵌入式图形LCD上绘制内容，如SSD1306 OLED显示屏。配合sh1106驱动使用。&lt;/p&gt;&lt;p&gt;效果：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-75326017315cffed3ed5f7c138a909d5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;525&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-75326017315cffed3ed5f7c138a909d5_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-75326017315cffed3ed5f7c138a909d5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;525&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-75326017315cffed3ed5f7c138a909d5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-75326017315cffed3ed5f7c138a909d5_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/jamwaffles/embedded-graphics&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;embedded-graphics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/jamwaffles/sh1106&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sh1106&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Rust和Wasm写的firefox插件&lt;/h2&gt;&lt;p&gt;并通过webpack和web-ext进行热加载。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/willdurand/rustwasm-addon&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rustwasm-addon&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rpl/webpack-webext-plugin&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;webpack-webext-plugin&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;shellfn: 支持Rust内调用shell脚本的库&lt;/h2&gt;&lt;p&gt;该库提供了一个宏，允许在Rust函数中调用任何语言编写的shell脚本。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/synek317/shellfn&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;shellfn&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Pyrs：将Python代码自动转换为Rust的工具&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40konchunas/transpiling-python-to-rust-766459b6ab8f&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/konchunas/pyrs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pyrs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;pycors： Python解释器管理工具&lt;/h2&gt;&lt;p&gt;Rust实现，类似于pyenv的Python解释器管理工具，可以下载并编译指定的版本，并轻松切换它们。目前只支持MacOSX，后续支持Linux和Windows。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/nbigaouette/pycors/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pycors&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/apbr6k/announcing_pycors_a_python_interpreter_manager/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;swc 发布1.0&lt;/h2&gt;&lt;p&gt;swc是babel 和 closure compiler二合一的Rust实现。潜力不错，但感觉目前依旧缺乏文档。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/swc-project/swc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;swc&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//swc-project.github.io/blog/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Rust实现的Kubernetes API 客户端&lt;/h2&gt;&lt;p&gt;还属于实验状态。不过该作者是Kubernetes GitHub组织的成员。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/anguslees/kubernetes-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;kubernetes-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」将Rust编译器移植到M68K&lt;/h2&gt;&lt;p&gt;M68k 处理器是美国 Motorola 公司开发的高性能处理器， 具有高性价比、高集成度等特点，在工业自动化设备、控制设备、医疗仪器系统、安全系统等领域多有应用。现在为Freescale 公司所有。&lt;/p&gt;&lt;p&gt;有人为M68K实现了一个LLVM后端，现在该作者想把Rust编译器移植到M68K-LLVM后端。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//lists.debian.org/debian-68k/2019/02/msg00003.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/apiieb/porting_the_rust_compiler_to_m68k/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;apk-decompiler：Rust实现的apk反编译工具&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/robertohuertasm/apk-decompiler&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;apk-decompiler&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//robertohuertas.com/2019/02/03/rust_cli_apk_decompiler/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;hibp-check: 依据HIBP检查您的Keepass数据库是否泄密&lt;/h2&gt;&lt;p&gt;KeePass是一个免费的开源密码管理器，可以帮助您以安全的方式管理密码。您可以将所有密码放在一个数据库中，该数据库使用一个主密钥或密钥文件锁定。因此，您只需记住一个主密码或选择密钥文件即可解锁整个数据库。使用当前已知的最佳和最安全的加密算法（AES和Twofish）对数据库进行加密。&lt;/p&gt;&lt;p&gt;Have I Been Pwned（HIBP），是一个数据泄密聚合网站，专门披露数据泄漏事件和帮助用户确认自己的密码是否泄露的账号安全网站。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/samueltardieu/hibp-check&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hibp-check&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;dodrio: Rust和WebAssembly实现的的实验性虚拟DOM库&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/fitzgen/dodrio&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dodrio&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;protobuf-convert：序列化Protobuf3的库&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/witnet/protobuf-convert&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;protobuf-convert&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-02-17-56935975</guid>
<pubDate>Sun, 17 Feb 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust日报」2019每周精选 • 第五期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-02-10-56409233.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56409233&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-02-10&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;通告&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust日报祝大家新的一年诸事六六六&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f75c424e335815904b1dd6154f0ddb2f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;557&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-f75c424e335815904b1dd6154f0ddb2f_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f75c424e335815904b1dd6154f0ddb2f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;557&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-f75c424e335815904b1dd6154f0ddb2f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f75c424e335815904b1dd6154f0ddb2f_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;「招聘」NEAR寻找Rust P2P网络工程师&lt;/h2&gt;&lt;p&gt;NEAR是一个智能合约和区块链平台，要求至少有Rust和Tokio的经验。可能无法Remote。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//nearprotocol.com/careers/%3Fgh_jid%3D4205573002&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;rustc：向更好的优化器迈进&lt;/h2&gt;&lt;p&gt;rustc引入mir已经有近三个年头了，虽然对Rust代码有了很好的优化工作，但实际上还有很多优化工作没有完成。在即将举办的2019 All Hands会议上，mir的优化将成为一个重要议题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//kazlauskas.me/entries/the-road-to-bestest-optimiser.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方」Aturon宣布退出Rust Core Team&lt;/h2&gt;&lt;p&gt;Aturon宣布退出Rust Core Team，意味着他将不再参与Rust工作组的管理工作，他更想作为一名Rust工程师做一些工程工作。他将继续留在Mozilla的Rust团队。&lt;/p&gt;&lt;p&gt;接下来他的精力将分配在：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;完善编译器、GAT和特化。&lt;/li&gt;&lt;li&gt;继续研究Tide框架。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Aturon的退位，同时也是Rust Core Team汲取新的血液的机会。Rust即将进入新的阶段，成熟与可持续性，有新人加入，意味着有新的思维，拭目以待。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/aturon-retires-from-the-core-team-but-not-from-rust/9392/2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;PingCap Rust培训计划草案出炉&lt;/b&gt;&lt;/p&gt;&lt;p&gt;该课程名为「Rust网络应用实践（Practical Networked Applications in Rust）」，目前列出了课程草案计划。该课程结构受&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//pdos.csail.mit.edu/6.824/schedule.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MIT分布式系统课程&lt;/a&gt;的影响，在实践项目中进行Rust的学习。&lt;/p&gt;&lt;p&gt;草案PR： &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/pingcap/talent-training/pull/1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Create initial readme for Rust course and outline lesson plan by brson · Pull Request #1 · pingcap/talent-training&lt;/a&gt; &lt;/p&gt;&lt;p&gt;课程计划： &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/brson/talent-training/blob/master/rust/plan.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;brson/talent-training&lt;/a&gt; &lt;/p&gt;&lt;h2&gt;rust-guide： 法国国家信息系统安全局开放了Rust安全开发指南&lt;/h2&gt;&lt;p&gt;法国ANSSI（国家信息系统安全局）开放的Rust指南，它并不是Rust教程，而是一份使用Rust进行安全应用程序开发的示例和建议。有时间我会把它翻译成中文。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aotp7d/french_national_cybersecurity_agencys_guide_to/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.ssi.gouv.fr/en/actualite/be-part-of-anssis-new-guide-to-develop-secure-applications-with-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;官方网站报道&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ANSSI-FR/rust-guide&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「安全审计」审计Rust加密库的第一步&lt;/h2&gt;&lt;p&gt;该文章提供了一份审计清单，在你在开始审核使用Rust编写的加密软件时，你可以通过检查以下几项内容来保证一定的安全性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;查看clippy警告。&lt;/li&gt;&lt;li&gt;构建并运行所有单元测试。&lt;/li&gt;&lt;li&gt;查看Cargo.toml的依赖项。&lt;/li&gt;&lt;li&gt;寻找unsafe代码块，并作出安全评估。&lt;/li&gt;&lt;li&gt;寻找unwrap的使用风险。&lt;/li&gt;&lt;li&gt;寻找潜在的整数溢出（Debug模式下会在运行时panic，但是release模式下会静默）。&lt;/li&gt;&lt;li&gt;寻找是否存在不应该被公开的私有类型。&lt;/li&gt;&lt;li&gt;查找任何递归函数，评估它们是否有栈溢出的风险。&lt;/li&gt;&lt;li&gt;如果使用FFI，则需要查找调用的外部代码，如果相关，则需要将这些代码作为审计的子项目。&lt;/li&gt;&lt;li&gt;确定可以便于进行模糊测试的API，并记下来。&lt;/li&gt;&lt;li&gt;查找使用了哪些加密原语，哪些第三方库，并记下加密组件的任何新实现。&lt;/li&gt;&lt;li&gt;查找任何涉及加密和安全的RNG内容。&lt;code&gt;rand::thread_rng&lt;/code&gt;在大多数情况下应该没问题，但是当OS RNG初始化失败之后，将回归到弱RNG（弱随机数生成）。&lt;/li&gt;&lt;li&gt;对于敏感值在使用后是否应该归0？在Rust里应该使用Drop trait来实现它，而不是显式地指定。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此列表并不是详尽无遗的，所以在对Rust代码做安全审计的时候，最重要的是理解代码的逻辑。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//research.kudelskisecurity.com/2019/02/07/auditing-rust-crypto-the-first-hours/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「讨论」Web开发: Rust vs Haskell&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/an11l9/webdevelopement_rust_vs_haskell/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「讨论」寻找Rust的生产效率和故障率的相关数据&lt;/h2&gt;&lt;p&gt;有人在Reddit寻求关于Rust生产效率和故障率的相关数据，评论中有人贴出了一些数据，以及经验。值得看看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aohq6u/rust_velocity_and_defect_rates/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Fuchsia和Zircon的Rust接口&lt;/h2&gt;&lt;p&gt;Zircon是Google操作系统的内核，之前这个内核名字叫Magenta，现在改名为Zircon，是C/C++开发的。 有了这个Rust API，意味着可以使用Rust来开发额外的系统代码。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//fuchsia-docs.firebaseapp.com/rust/auth_cache/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「讨论」我是否应该放弃Java而转投Rust？&lt;/h2&gt;&lt;p&gt;这哥们最近在面试一个工作，但是公司要求他必须学习Rust。但他只会Java，所以来Reddit求助，到底是否应该学习Rust呢？Rust前景如何？&lt;/p&gt;&lt;p&gt;Reddit的朋友给了他很多建议。感兴趣的可以看看。&lt;/p&gt;&lt;p&gt;总的来说，大伙基本都认为Rust的光明未来。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aospj8/switching_to_rust_from_javaspring/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列文章」WebAssembly的麻烦&lt;/h2&gt;&lt;p&gt;日报之前介绍过第一篇文章：WebAssembly算不上一个栈虚拟机 &lt;a href=&quot;http://link.zhihu.com/?target=http%3A//troubles.md/posts/wasm-is-not-a-stack-machine/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Part I&lt;/a&gt;&lt;/p&gt;&lt;p&gt;下面是后两篇。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//troubles.md/posts/why-do-we-need-the-relooper-algorithm-again/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//troubles.md/posts/the-stack-is-not-the-stack/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Datafusion捐赠给了Apache Arrow&lt;/h2&gt;&lt;p&gt;Datafusion是一个Rust-Native的查询引擎，现在被用于Apache Arrow中。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//arrow.apache.org/blog/2019/02/04/datafusion-donation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Swift 5 Release版支持独占访问内存检查&lt;/h2&gt;&lt;p&gt;之前该功能只支持Debug，现在支持Release。这篇文章中阐述了此功能对Swift内存安全和性能策略的重要性。&lt;/p&gt;&lt;p&gt;这其中inout功能明显受到Rust中可变借用的启发。这是Swift引入所有权机制的基础，在Swift的所有权宣言文档中看到，Swift的共享值概念和Rust里的不可变借用是相似的。想到现在Swift又被苹果申请了专利，后续会对Rust有什么影响？还未可知。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//swift.org/blog/swift-5-exclusivity/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/apple/swift/blob/master/docs/OwnershipManifesto.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;所有权宣言&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Rust Weekly 看点介绍&lt;/h2&gt;&lt;p&gt;Rust Weekly除了每周的博客和新闻和日报有所重复之外，也有另外的看点值得关注。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Crate of the Week： 推荐每周的明星crate&lt;/li&gt;&lt;li&gt;Call for Participation： 推荐一些可以开源做贡献的issues&lt;/li&gt;&lt;li&gt;Updates from Rust Core： 关于Rust Core的一些更新动态&lt;/li&gt;&lt;li&gt;Approved RFCs： 本周审核通过的一些RFC列表&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//this-week-in-rust.org/blog/2019/02/05/this-week-in-rust-272/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Rust挑战Roguelike游戏比赛&lt;/h2&gt;&lt;p&gt;Roguelikes是指程序生成的Rogue模式的RPG游戏，死亡是永久性的。2005年，roguelike社区建立了一年一度的活动，即7DRL挑战赛，开发者在七天内挑战创建这样一个roguelike。距离新的挑战赛开始还有18天。&lt;/p&gt;&lt;p&gt;所以，有人用Rust实现了一个可以开发支持Web和Desktop的Roguelike游戏模板库quicksilver-roguelike，方便你使用Rust挑战。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aowv02/writing_a_rust_roguelike_for_the_desktop_and_the/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//itch.io/jam/7drl-challenge-2019&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;7drl-challenge-2019&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/tomassedovic/quicksilver-roguelike&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;quicksilver-roguelike&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;使用MPSC Channel在GTK中轻松使用线程&lt;/h2&gt;&lt;p&gt;使用gtk-rs的人，在IRC或其他交流平台经常出现的一个问题就是：「如何从另一个线程修改UI的状态？」。由于GTK只允许主线程访问其UI状态，所以才出现这种问题。所以作者为gtk-rs实现了一个新的API：一个类似于Rust标准库的与GLib/GTK主线程集成的MPSC Channel API，方便开发者处理这个问题。该文是作者对这个过程的经验之谈。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//coaxion.net/blog/2019/02/mpsc-channel-api-for-painless-usage-of-threads-with-gtk-in-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;使用main函数的问号语法糖自定义程序退出码&lt;/h2&gt;&lt;p&gt;作者为此还创建了一个独立的crate：exit&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.joshmcguigan.com/blog/custom-exit-status-codes-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/JoshMcguigan/exit&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;exit&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;浏览器插件：用于自动定向官方Rust Book的过期链接&lt;/h2&gt;&lt;p&gt;真是有心人&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/srishanbhattarai/trpl-redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;trpl-redirect&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「Blog OS系列文章中文翻译」使用Rust创造操作系统（一）：独立式可执行程序&lt;/h2&gt;&lt;p&gt;社区朋友 @洛佳 出品&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53064186&quot; class=&quot;internal&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/luojia65/writing-an-os-in-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;合集地址&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「视频」将火焰图移植到Rust Part 2&lt;/h2&gt;&lt;p&gt;本次视频，依然是5个多小时。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DQy1tQesXc7k&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;有人尝试将worley-noise库转成了WASM&lt;/h2&gt;&lt;p&gt;并且做了一个在线的demo。&lt;/p&gt;&lt;p&gt;worley-noise是一个Rust实现Worley Noise算法的库。该算法也被称为Cell Noise，属于计算机图形学方面的算法。该算法用于生成符合一定规律的花纹，比如花豹、奶牛、长颈鹿身上的花纹，或者是河滩干裂、干涸的盐碱湖形成的图纹，等等。该算法也被用于仿真地理地形生成。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/Sogomn/worley-noise&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;worley-noise&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/Sogomn/webworley&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;webworley&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//sogomn.gitlab.io/noise/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;online demo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「私人分享」Rust奇技淫巧&lt;/h2&gt;&lt;p&gt;作者在文章中分享了他总结的Rust的一些奇技淫巧。值得看看。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//vorner.github.io/2019/02/03/hacks.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/ampf8d/personal_collection_of_rust_hacks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 相关讨论&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;用Rust写一个Neovim插件&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/%40srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;为Node开发者准备的Rust教程&lt;/h2&gt;&lt;p&gt;该教程最近升级到了第二版，跟进了Rust 2018，适合前端人员学习。反过来，懂Rust的，是不是也可以借此教程了解下Node呢？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/Mercateo/rust-for-node-developers&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-for-node-developers&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」让LED开始闪烁&lt;/h2&gt;&lt;p&gt;本篇博文介绍了如何基于STM32平台，使用Rust让LED灯闪烁。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//jonathanklimt.de/electrics/programming/rust-STM32F103-blink/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」用Rust实现电子纸名片&lt;/h2&gt;&lt;p&gt;该文简单记录了作者用Rust实现电子纸名片的相关内容，并且还有源码。帅！&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-525a7f6de2714cc1d6d6a26df91c5790_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;514&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-525a7f6de2714cc1d6d6a26df91c5790_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-525a7f6de2714cc1d6d6a26df91c5790_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;514&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic1.zhimg.com/v2-525a7f6de2714cc1d6d6a26df91c5790_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-525a7f6de2714cc1d6d6a26df91c5790_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.wezm.net/technical/2019/01/linux-conf-au-rust-epaper-badge/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/wezm/linux-conf-au-2019-epaper-badge&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;linux-conf-au-2019-epaper-badge&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Rust实现相对指针(Relative Pointers)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/aokwyp/poc_relative_pointers/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//play.rust-lang.org/%3Fversion%3Dnightly%26mode%3Ddebug%26edition%3D2018%26gist%3Daeadf83622b18966308f8eae6e07d2b7&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Playground&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DZ0tsNFZLxSU&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相对指针相关视频&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目、工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;notion：一个“省心”的JavaScript工具链管理器&lt;/h2&gt;&lt;h2&gt;javascript&lt;/h2&gt;&lt;p&gt;「使用简单，没有麻烦」，基于Rust实现。特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;可靠：从Node版本到软件包管理器，可确保项目中的每个人都使用相同的开发环境。&lt;/li&gt;&lt;li&gt;通用：在每个shell和每个主要操作系统中享受相同的命令行体验。&lt;/li&gt;&lt;li&gt;快速：Notion使用Rust实现，并作为静态可执行文件部署以获得最佳性能。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/notion-cli/notion&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;notion&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;flutter-rs: Flutter桌面运行器&lt;/h2&gt;&lt;p&gt;让Dart和Rust一起玩耍。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/gliheng/flutter-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;flutter-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;torrents.csv: bt种子存储服务&lt;/h2&gt;&lt;p&gt;基于Rust, ripgrep, Actix, Inferno, 和 Typescript实现。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/dessalines/torrents.csv&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;torrents.csv&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」osaka.rs: 构建嵌入式异步生态&lt;/h2&gt;&lt;p&gt;Osaka.rs相当于面向嵌入式设备的Tokio。作者在博文中介绍了Osaka的来龙去脉。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//aep.github.io/rust-async-without-the-noise/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/aep/osaka&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;osaka&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;gfx-rs出品的WebGPU实现&lt;/h2&gt;&lt;p&gt;基于gfx-hal实现的WebGPU实现。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/gfx-rs/wgpu&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wgpu&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;sandboxfs 0.1.0 发布&lt;/h2&gt;&lt;p&gt;该库作者是Google员工，他利用Google 20%的自由时间来实现该项目。&lt;/p&gt;&lt;p&gt;这是一个FUSE（用户态）文件系统，最初用Go实现，但是性能上无法满足，作者又学习了一年Rust之后，将其用Rust重新实现。当然还有一部分Go代码。&lt;/p&gt;&lt;p&gt;而且作者说，在用Rust实现的过程中，发现了之前Go实现代码中的一堆并发错误。新的Rust版本比Go版本至少在最初的测试上是更快一些。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//julio.meroh.net/2019/02/hello-sandboxfs-0.1.0.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/bazelbuild/sandboxfs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sandboxfs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;pickledb-rs: 轻量级简单KV存储 0.3发布&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/seladb/pickledb-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pickledb-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」可用于Rust和树莓派交叉编译的Docker镜像&lt;/h2&gt;&lt;p&gt;支持的是Raspberry Pi Zero。作者认为Rust非常适合该版本的树莓派。所以制作了这个docker镜像。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//hub.docker.com/r/mdirkse/rust_armv6&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust_armv6&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;alloc-counter: 一个内存分配分析工具&lt;/h2&gt;&lt;p&gt;该项目号称是对qadapt（另一个类似的工具，提供了debug_assert!宏）的重新设计。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//gitlab.com/sio4/code/alloc-counter&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/bspeice/qadapt&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;qadapt&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;TMQ: ZeroMQ的Tokio绑定&lt;/h2&gt;&lt;p&gt;作者刚发布了0.1版本&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//cetra3.github.io/blog/tmq-0-1-0/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/cetra3/tmq&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tmp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;metered-rs: 帮助你测量生产项目的性能&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/magnet/metered-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;metered-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」bno055： Bosch Sensortec BNO055 9轴传感器Fusion IMU驱动程序&lt;/h2&gt;&lt;p&gt;Bosch Sensortec是九轴运动传感器品牌，BNO055是产品型号，IMU是惯性量测单元。主要用于VR产业，防眩晕，采集运动数据之类。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/eupn/bno055&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bno055&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Accepted: 一个终端文本编辑器&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/hatoo/Accepted&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Accepted&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;astro: 又一个用Rust实现的新语言&lt;/h2&gt;&lt;p&gt;号称可以用于开发快速原型设计和高性能的应用，目前是WIP状态。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/astrolang/astro&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;astro&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;procs: 代替ps命令的工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dalance/procs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;procs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;heapless: 提供了不需要动态分配的数据结构&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/japaric/heapless&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;heapless&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;thank: 展示你项目中依赖的crate信息&lt;/h2&gt;&lt;p&gt;一个有趣的crate.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/brown121407/thank&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;thank&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;sns-push-notifications：用于使用AWS SNS给iOS和Android推送通知&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/davidpdrsn/sns-push-notifications&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sns-push-notifications&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;fit-rs: 用于读取和解码运动设备生成的FIT文件&lt;/h2&gt;&lt;p&gt;目前支持Garmin Edges 1000和520设备（Garmin出品的，用于骑行的GPS智能码表）。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/richardbrodie/fit-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fit-rs&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-02-10-56409233</guid>
<pubDate>Sun, 10 Feb 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
