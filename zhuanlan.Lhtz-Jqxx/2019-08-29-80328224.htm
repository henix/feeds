<div class="title-image"><img src="https://pic3.zhimg.com/v2-5c6c2a6d8cc0c197a5b7bfb19d8d44db_b.jpg" alt=""></div><blockquote>作者：George Seif<br/>编译：1+1=6</blockquote><h2><b>前言</b></h2><p>Numpy是Python社区的一份礼物。它允许数据科学家、机器学习实践者和统计学家以一种简单有效的方式处理矩阵式的海量数据。</p><p>当你发现Python代码运行缓慢时，特别是看到许多 for-loop循环时，那么将数据处理迁移到Numpy并让其向量化以最快的速度完成工作总是一个好主意！</p><p>尽管如此，即使这样加速Numpy也只能在CPU上运行。由于使用者的CPU通常有8个或更少的内核，因此可以加速的速度是有限的。</p><p>如何解决这个问题，CuPy来啦！</p><h2><b>相关文章</b></h2><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzAxNTc0Mjg0Mg%3D%3D%26mid%3D2653293723%26idx%3D1%26sn%3D8fcb3effaffd583882d5ffe13b330fe2%26chksm%3D802dce8eb75a4798bcb14f9f9cb19b1333c2e31d78fc837448b8a4c8990da9ad083c7fe5ecee%26scene%3D21%23wechat_redirect" class=" wrap external" target="_blank" rel="nofollow noreferrer">1、30倍！使用Cython加速Python代码</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzAxNTc0Mjg0Mg%3D%3D%26mid%3D2653293923%26idx%3D2%26sn%3D3c344ab8661a2d9d6b79caa6f253f35d%26chksm%3D802dcf76b75a466080145f290dc01ddc5775906e16e04cec5d48a10f1356b37b2644fd67a38a%26scene%3D21%23wechat_redirect" class=" wrap external" target="_blank" rel="nofollow noreferrer">2、10个提高工作效率的Pandas小技巧</a><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzAxNTc0Mjg0Mg%3D%3D%26mid%3D2653292258%26idx%3D1%26sn%3Dd5d79cecb461eab3591ab8e3c2c03ce0%26chksm%3D802dc4f7b75a4de195bcd6211ac8532d68096bef4d7ca0e5a4fcd792d1e2c7dd5bbea85f91cf%26scene%3D21%23wechat_redirect" class=" wrap external" target="_blank" rel="nofollow noreferrer">3、高逼格使用Pandas加速代码，向for循环说拜拜！</a></p><h2><b>什么是CuPy？</b></h2><p><b>CuPy是一个通过利用CUDA GPU库在Nvidia GPU上实现Numpy数组的库</b>。通过这种实现，由于拥有许多CUDA核心GPU，可以实现更好的并行加速。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-0e8b90028c93a608105b6839d58cd729_b.jpg" data-caption="" data-size="normal" data-rawwidth="957" data-rawheight="389" class="origin_image zh-lightbox-thumb" width="957" data-original="https://pic2.zhimg.com/v2-0e8b90028c93a608105b6839d58cd729_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-0e8b90028c93a608105b6839d58cd729_b.jpg" data-caption="" data-size="normal" data-rawwidth="957" data-rawheight="389" class="origin_image zh-lightbox-thumb lazy" width="957" data-original="https://pic2.zhimg.com/v2-0e8b90028c93a608105b6839d58cd729_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-0e8b90028c93a608105b6839d58cd729_b.jpg"/></figure><p><i>官网：<a href="https://link.zhihu.com/?target=https%3A//github.com/cupy/cupy" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/cupy/cupy</span><span class="invisible"></span></a></i></p><p>CuPy的接口是Numpy的镜像，在大多数情况下，它可以被直接替代。<b>只要用兼容的CuPy代码替换你的Numpy代码，你就可以加快 GPU 的运行速度</b>。CuPy将支持Numpy的大多数数组操作，包括索引、广播和各种矩阵转换。</p><p>你也可以编写自定义Python代码，利用CUDA和GPU加速，如果你有一些特定的东西还不支持的话。 只需要一小段C++格式的代码，CuPy就会自动执行GPU转换，非常类似于使用Cython。</p><p>我们可以通过pip安装这个库：</p><div class="highlight"><pre><code class="language-python"><span class="n">pip</span> <span class="n">install</span> <span class="n">cupy</span></code></pre></div><p><b>运行GPU基于CuPy</b></p><p>对于这些基准测试，我们将使用PC机进行以下设置：</p><ul><li>i7–8700k CPU</li><li>1080 Ti GPU</li><li>32 GB of DDR4 3000MHz RAM</li><li>CUDA 9.0</li></ul><p>一旦安装了CuPy，我们可以像Numpy一样导入它：</p><div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">cupy</span> <span class="kn">as</span> <span class="nn">cp</span>
<span class="kn">import</span> <span class="nn">time</span></code></pre></div><p>对于剩下的代码，在Numpy和CuPy之间切换就像用CuPy的cp替换Numpy中的np一样简单。下面的代码为Numpy和CuPy创建了一个3D数组，其中包含10亿个1。 为了测试创建数组的速度，使用了 Python的本地time库：</p><div class="highlight"><pre><code class="language-python"><span class="c1">### Numpy and CPU</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">x_cpu</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1000</span><span class="p">))</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span>
<span class="c1">### CuPy and GPU</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">x_gpu</span> <span class="o">=</span> <span class="n">cp</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1000</span><span class="p">))</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span></code></pre></div><p>令人难以置信的是，即使只是创建数组，CuPy仍然要快得多。 <b>Numpy在1.68秒内创建了10亿个1的数组，而CuPy只花了0.16秒，这是10.5倍的加速！</b></p><p>让我们尝试对数组进行一些数学运算。这次我们将整个数组乘以5，再次查看Numpy与CuPy的速度。</p><div class="highlight"><pre><code class="language-python"><span class="c1">### Numpy and CPU</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">x_cpu</span> <span class="o">*=</span> <span class="mi">5</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span>
<span class="c1">### CuPy and GPU</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">x_gpu</span> <span class="o">*=</span> <span class="mi">5</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span></code></pre></div><p>在本例中，CuPy完胜Numpy。Numpy花了0.507秒，而CuPy只花了0.000710秒。<b>714.1倍</b>的加速！</p><p>现在让我们尝试使用多个数组并执行一些操作：</p><div class="highlight"><pre><code class="language-python"><span class="c1">### Numpy and CPU</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">x_cpu</span> <span class="o">*=</span> <span class="mi">5</span>
<span class="n">x_cpu</span> <span class="o">*=</span> <span class="n">x_cpu</span>
<span class="n">x_cpu</span> <span class="o">+=</span> <span class="n">x_cpu</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span>
<span class="c1">### CuPy and GPU</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">x_gpu</span> <span class="o">*=</span> <span class="mi">5</span>
<span class="n">x_gpu</span> <span class="o">*=</span> <span class="n">x_gpu</span>
<span class="n">x_gpu</span> <span class="o">+=</span> <span class="n">x_gpu</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span></code></pre></div><p>在本例中，<b>Numpy在CPU上以1.49秒</b>的时间执行该进程，而<b>CuPy在GPU上以0.0922秒</b>的时间执行该进程。<b>16.16倍的加速！</b></p><h2><b>总是那么快吗?</b></h2><p>使用CuPy是在GPU上多次加速Numpy和矩阵操作的一个很好的方法。需要注意的是，你将<b>获得的加速度在很大程度上取决于所使用数组的大小</b>。下面的表格显示了当我们改变数组的大小时速度上的差异：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-b0bc627898ba956020d21c7e4ab380d1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="410" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic2.zhimg.com/v2-b0bc627898ba956020d21c7e4ab380d1_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-b0bc627898ba956020d21c7e4ab380d1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="410" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic2.zhimg.com/v2-b0bc627898ba956020d21c7e4ab380d1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-b0bc627898ba956020d21c7e4ab380d1_b.jpg"/></figure><p>一旦：</p><p><b>达到约1000万个数据点，加速度就会急剧上升！</b></p><p>而一旦：</p><p><b>超过1亿个数据点，加速度就会大大加快！</b></p><p>在此之下：</p><p><b>Numpy实际上更快！</b></p><p>还要记住，<b>更多的GPU内存将帮助你处理更多的数据，所以重要的是看看你的GPU是否有足够的内存来容纳足够的数据</b>，而 CuPy是值得的！</p><p><i>来自：<a href="https://link.zhihu.com/?target=https%3A//twitter.com/GeorgeSeif94" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">twitter.com/GeorgeSeif9</span><span class="invisible">4</span><span class="ellipsis"></span></a></i></p><p><i>—End—</i></p><p>量化投资与机器学习微信公众号，是业内垂直于<b>Quant</b>、<b>MFE</b>、<b>CST、AI</b>等专业的<b>主流量化自媒体</b>。公众号拥有来自<b>公募、私募、券商、银行、海外</b>等众多圈内<b>10W+</b>关注者。每日发布行业前沿研究成果和最新量化资讯。</p>