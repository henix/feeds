<div class="title-image"><img src="https://pic2.zhimg.com/v2-b78153aa8e328db37bb7933151908b59_b.jpg" alt=""></div><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器在处理不同用户的请求是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-c6f780b92060a6dd5d1c9a47a1e5afea_b.jpg" data-caption="" data-size="normal" data-rawwidth="360" data-rawheight="210" class="content_image" width="360"/></noscript><img src="https://pic3.zhimg.com/v2-c6f780b92060a6dd5d1c9a47a1e5afea_b.jpg" data-caption="" data-size="normal" data-rawwidth="360" data-rawheight="210" class="content_image lazy" width="360" data-actualsrc="https://pic3.zhimg.com/v2-c6f780b92060a6dd5d1c9a47a1e5afea_b.jpg"/></figure><h2>示例 1</h2><p>在很多系统中都会包含上传文件或者从远端获取文件保存在服务器的功能（如：允许用户使用网络上的图片作为自己的头像的功能），下面是一段简单的上传文件释义代码：</p><div class="highlight"><pre><code class="language-text">&lt;?php
  if(isset($_GET[&#39;src&#39;])){
    copy($_GET[&#39;src&#39;],$_GET[&#39;dst&#39;]);
    //...
    //check file
    unlink($_GET[&#39;dst&#39;]);
    //...
 }
?&gt;</code></pre></div><p>这段代码看似一切正常，先通过<code>copy($<i>GET[&#39;src&#39;], $</i>GET[&#39;dst&#39;])</code>将文件从源地址复制到目的地址，然后检查<code>$<i>GET[&#39;dst&#39;]</i>的安全性,如果发现<i>$</i>GET[&#39;dst&#39;]</code>不安全就马上通过<code>unlink($_GET[&#39;dst&#39;])</code>将其删除。但是，当程序在服务端并发处理用户请求时问题就来了。如果在文件上传成功后，但是在相关安全检查发现它是不安全文件删除它以前这个文件就被执行了那么会怎样呢？</p><p>假设攻击者上传了一个用来生成恶意 shell 的文件，在上传完成和安全检查完成并删除它的间隙，攻击者通过不断地发起访问请求的方法访问了该文件，该文件就会被执行，并且在服务器上生成一个恶意 shell 的文件。至此，该文件的任务就已全部完成，至于后面发现它是一个不安全的文件并把它删除的问题都已经不重要了，因为攻击者已经成功的在服务器中植入了一个 shell 文件，后续的一切就都不是问题了。</p><div class="highlight"><pre><code class="language-text">前：上传文件 → 删除不安全文件
后：上传文件 → 访问执行文件，生成 shell 文件 → 删除不安全文件</code></pre></div><p>由上述过程我们可以看到这种“先将猛兽放进屋，再杀之”的处理逻辑在并发的情况下是十分危险的，极易导致条件竞争漏洞的发生。</p><h2>示例 2</h2><p>这是一个关于“如何动脑筋让自己的星巴克礼品卡显示为无限金额，然后从此过上终身免费喝咖啡日子“的故事。黑客@homakov 购买了三张面值5美元的星巴克礼品卡。   </p><p>星巴克有个人账号体系，可以添加礼品卡、查询余额，以及不同卡之间转账。 </p><p>因为数据库的处理速度跟不上程序的请求速度，如果网站的防护做的不够，发起的多个购买或转账请求可以同时生效。 </p><p>@homakov 研究发现，资金从卡1转到卡2是有状态的。第一个请求，卡1转钱到卡2并保存金额值；第二个请求，确认交易并清除会话。会话的存在，对 hack 造成了些困难。不过这种保护还是可以绕过的：使用同一个账号，在两个不同浏览器上同时进行转账操作（cookie不同）。 </p><p>“条件竞争”的难处在于，许多开发人员都会限制每个ip/账号/动作的请求数，以预防网络延迟和非正常请求造成错误。@homakov 尝试了好些次，最后终于成功绕过限制，将卡1的钱两次转移到卡2。现在的三张卡变成0美元、15美元、5美元。  </p><p>他走进附近的星巴克店，买了16.7美元的东西。 </p><p>后来，@homakov 给自己信用卡充了10美元，并将这个漏洞反馈给了星巴克官方。  </p><p>类似的情况在国内也有，比如乌云上有位童鞋因网络不好，向自如网多点了几次退款按钮，然后生成了两单退款申请，并收到了两笔款项。</p><h2>实战练习</h2><p>CTF 题目（没时间解释了）：<a href="https://link.zhihu.com/?target=http%3A//119.23.73.3%3A5006/web2/index2.php" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">119.23.73.3:5006/web2/i</span><span class="invisible">ndex2.php</span><span class="ellipsis"></span></a></p><ol><li>首先进入CTF地址，观察发现，网址为 inde2.php，正常来说应是 index.php，访问index.php发现自动跳转 index2.php，抓包截包。<br/></li></ol><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-221a98d8727586974b4393f369d8a9c2_b.jpg" data-caption="" data-size="normal" data-rawwidth="1380" data-rawheight="275" class="origin_image zh-lightbox-thumb" width="1380" data-original="https://pic3.zhimg.com/v2-221a98d8727586974b4393f369d8a9c2_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-221a98d8727586974b4393f369d8a9c2_b.jpg" data-caption="" data-size="normal" data-rawwidth="1380" data-rawheight="275" class="origin_image zh-lightbox-thumb lazy" width="1380" data-original="https://pic3.zhimg.com/v2-221a98d8727586974b4393f369d8a9c2_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-221a98d8727586974b4393f369d8a9c2_b.jpg"/></figure><p>2. 进入 uploadsomething.php，发现应该是个上传页面，第一个框为上传文件名，第二个为文件内容，上传1.php ，返回路径查看。<br/></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-c911f86a57e8bf187d4e871a1b1ac229_b.jpg" data-caption="" data-size="normal" data-rawwidth="916" data-rawheight="316" class="origin_image zh-lightbox-thumb" width="916" data-original="https://pic2.zhimg.com/v2-c911f86a57e8bf187d4e871a1b1ac229_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-c911f86a57e8bf187d4e871a1b1ac229_b.jpg" data-caption="" data-size="normal" data-rawwidth="916" data-rawheight="316" class="origin_image zh-lightbox-thumb lazy" width="916" data-original="https://pic2.zhimg.com/v2-c911f86a57e8bf187d4e871a1b1ac229_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-c911f86a57e8bf187d4e871a1b1ac229_b.jpg"/></figure><p><br/>3. 凭我专业八级的英语水平，这意思应该是太慢了，于是聪明的我想到的条件竞争漏洞，迅速上传迅速访问。OK，使用 Burp intruder 模块爆破上传，然后访问。</p><p>于是，开始，</p><p>分别抓取两个包发送 intruder</p><p>第一个包网址：<a href="https://link.zhihu.com/?target=http%3A//119.23.73.3%3A5006/web2/uploadsomething.php%3Ffilename%3D1.php%26content%3D" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">119.23.73.3:5006/web2/u</span><span class="invisible">ploadsomething.php?filename=1.php&amp;content=</span><span class="ellipsis"></span></a>&lt;?php+system(“ls”);?&gt;</p><p>第二个包网址: <a href="https://link.zhihu.com/?target=http%3A//119.23.73.3%3A5006/web2/uploads/c2a54d18d324f0c9b33b29243f77d3a45b5f9463/1.php" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">119.23.73.3:5006/web2/u</span><span class="invisible">ploads/c2a54d18d324f0c9b33b29243f77d3a45b5f9463/1.php</span><span class="ellipsis"></span></a></p><p>4. 调整没有字典的爆破，不断发包。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-fef12f6436d44ea6ea0695cd382f8f92_b.jpg" data-caption="" data-size="normal" data-rawwidth="631" data-rawheight="518" class="origin_image zh-lightbox-thumb" width="631" data-original="https://pic3.zhimg.com/v2-fef12f6436d44ea6ea0695cd382f8f92_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-fef12f6436d44ea6ea0695cd382f8f92_b.jpg" data-caption="" data-size="normal" data-rawwidth="631" data-rawheight="518" class="origin_image zh-lightbox-thumb lazy" width="631" data-original="https://pic3.zhimg.com/v2-fef12f6436d44ea6ea0695cd382f8f92_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-fef12f6436d44ea6ea0695cd382f8f92_b.jpg"/></figure><p>5. 然后设置发送三千个数据包，然后设置线程调至50。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-3485b05a80e1af45ebb13c57f7b61d74_b.jpg" data-caption="" data-size="normal" data-rawwidth="656" data-rawheight="337" class="origin_image zh-lightbox-thumb" width="656" data-original="https://pic1.zhimg.com/v2-3485b05a80e1af45ebb13c57f7b61d74_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-3485b05a80e1af45ebb13c57f7b61d74_b.jpg" data-caption="" data-size="normal" data-rawwidth="656" data-rawheight="337" class="origin_image zh-lightbox-thumb lazy" width="656" data-original="https://pic1.zhimg.com/v2-3485b05a80e1af45ebb13c57f7b61d74_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-3485b05a80e1af45ebb13c57f7b61d74_b.jpg"/></figure><p>第一个包为以50线程迅速上传三千次，<br/>第二个包为以50线程迅速访问三千次，只要速度够快就可以访问到。<br/>然后开始爆破成功得到 flag，我们可以看到也不是百分百可以得到 flag，存在竞争。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-bbdd4f95806f9af5a75d8987776d4140_b.jpg" data-caption="" data-size="normal" data-rawwidth="1494" data-rawheight="544" class="origin_image zh-lightbox-thumb" width="1494" data-original="https://pic1.zhimg.com/v2-bbdd4f95806f9af5a75d8987776d4140_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-bbdd4f95806f9af5a75d8987776d4140_b.jpg" data-caption="" data-size="normal" data-rawwidth="1494" data-rawheight="544" class="origin_image zh-lightbox-thumb lazy" width="1494" data-original="https://pic1.zhimg.com/v2-bbdd4f95806f9af5a75d8987776d4140_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-bbdd4f95806f9af5a75d8987776d4140_b.jpg"/></figure><p>但是这个漏洞很受环境因素的影响，比如网络延迟、服务器的处理能力等。 </p><h2>防御</h2><ol><li>使用“锁”：</li></ol><p>通过使用锁阻塞其他程序对数据库中已锁定对象的访问，直到对象解锁。正确的设计锁是必要的，最好锁定额外不相干的对象。</p><p>2.“事务隔离”规则：</p><p>顺序事务(serializable)能够保证事务严格按照顺序执行，但是要注意这可能会影响性能。</p><p>3. 使用“互斥信号量”：</p><p>首先找一个存储方法（如键值存储系统etcd）。当调用函数时会尝试写入一条带 key 的记录，如果无法创建记录则说明该记录已经存在，故而挂起当前的请求。在请求处理完成后删除相应的记录，以便其他线程使用。</p><p>参考：</p><p><a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzU2NDkxMzc4Ng%3D%3D%26mid%3D2247483991%26idx%3D1%26sn%3Dcee88923770ca5343ddc9856c6378292%26chksm%3Dfc42f142cb357854ac5208a2f51d702bbf77e6b9eac247b68db411bf994cc62897db953fb316%26mpshare%3D1%26scene%3D1%26srcid%3D%26sharer_sharetime%3D1567088818072%26sharer_shareid%3D39f1bb691e051db02ed74d8462a5f3b5%23rd" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">mp.weixin.qq.com/s?</span><span class="invisible">__biz=MzU2NDkxMzc4Ng==&amp;mid=2247483991&amp;idx=1&amp;sn=cee88923770ca5343ddc9856c6378292&amp;chksm=fc42f142cb357854ac5208a2f51d702bbf77e6b9eac247b68db411bf994cc62897db953fb316&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1567088818072&amp;sharer_shareid=39f1bb691e051db02ed74d8462a5f3b5#rd</span><span class="ellipsis"></span></a></p><p><a href="https://link.zhihu.com/?target=https%3A//shuaizhupeiqi.github.io/2018/11/15/%25E6%259D%25A1%25E4%25BB%25B6%25E7%25AB%259E%25E4%25BA%2589%25E6%25BC%258F%25E6%25B4%259E/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">shuaizhupeiqi.github.io</span><span class="invisible">/2018/11/15/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89%E6%BC%8F%E6%B4%9E/</span><span class="ellipsis"></span></a></p><p><a href="https://link.zhihu.com/?target=http%3A//www.anyun.org/a/jishuguanzhu/WEBjishu/2015/0522/5428.html" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">anyun.org/a/jishuguanzh</span><span class="invisible">u/WEBjishu/2015/0522/5428.html</span><span class="ellipsis"></span></a><br/> </p>