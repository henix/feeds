<div class="title-image"><img src="https://pic3.zhimg.com/v2-068ad39bdc4ce5c6eb81b264b987a987_b.jpg" alt=""></div><p>▎作者：Mike</p><p><b>▎</b>编译：公众号翻译部</p><p>在这篇文章中，我们将使用Prophet来预测时间序列。使用的数据是SA&amp;P500历史调整收盘价。先建立一个3年的预测，然后模拟1980年以来的历史月度预测。最后，将创建多样的交易策略。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-8a14e3bd44e3ff2cbb67956fa3588cbb_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="765" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-8a14e3bd44e3ff2cbb67956fa3588cbb_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-8a14e3bd44e3ff2cbb67956fa3588cbb_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="765" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic4.zhimg.com/v2-8a14e3bd44e3ff2cbb67956fa3588cbb_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-8a14e3bd44e3ff2cbb67956fa3588cbb_b.jpg"/></figure><p><a href="https://link.zhihu.com/?target=https%3A//facebook.github.io/prophet/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">facebook.github.io/prop</span><span class="invisible">het/</span><span class="ellipsis"></span></a></p><h2><b>库的导入</b></h2><p>导入Python标准库。还将从 functools 中导入 Prophet 和 reduce。</p><div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">fbprophet</span> <span class="kn">import</span> <span class="n">Prophet</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>

<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="s1">&#39;seaborn-deep&#39;</span><span class="p">)</span>
<span class="n">pd</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">float_format</span> <span class="o">=</span> <span class="s2">&#34;{:,.2f}&#34;</span><span class="o">.</span><span class="n">format</span></code></pre></div><h2><b>数据获取</b></h2><p>使用的数据是1980年以来的标准普尔500指数历史数据。</p><div class="highlight"><pre><code class="language-python"><span class="n">stock_price</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-24575f3fd6032445b8c18274d133d743_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="538" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic4.zhimg.com/v2-24575f3fd6032445b8c18274d133d743_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-24575f3fd6032445b8c18274d133d743_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="538" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic4.zhimg.com/v2-24575f3fd6032445b8c18274d133d743_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-24575f3fd6032445b8c18274d133d743_b.jpg"/></figure><h2><b>数据准备</b></h2><p>要使prophet用起来，我们需要将日期和Adj close列的名称更改为ds和y。 在大多数机器学习项目中，术语y通常用于目标列（要测试的内容）。</p><div class="highlight"><pre><code class="language-python"><span class="n">stock_price</span> <span class="o">=</span> <span class="n">stock_price</span><span class="p">[[</span><span class="s1">&#39;Date&#39;</span><span class="p">,</span><span class="s1">&#39;Adj Close&#39;</span><span class="p">]]</span>
<span class="n">stock_price</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ds&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">]</span>
<span class="n">stock_price</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-c109a8dbd1656a9be5332f8d679d373c_b.jpg" data-caption="" data-size="normal" data-rawwidth="364" data-rawheight="708" class="content_image" width="364"/></noscript><img src="https://pic1.zhimg.com/v2-c109a8dbd1656a9be5332f8d679d373c_b.jpg" data-caption="" data-size="normal" data-rawwidth="364" data-rawheight="708" class="content_image lazy" width="364" data-actualsrc="https://pic1.zhimg.com/v2-c109a8dbd1656a9be5332f8d679d373c_b.jpg"/></figure><h2><b>Prophet</b></h2><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-416740735fff7ee48ff9c40221a0ced1_b.jpg" data-caption="" data-size="normal" data-rawwidth="719" data-rawheight="354" class="origin_image zh-lightbox-thumb" width="719" data-original="https://pic2.zhimg.com/v2-416740735fff7ee48ff9c40221a0ced1_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-416740735fff7ee48ff9c40221a0ced1_b.jpg" data-caption="" data-size="normal" data-rawwidth="719" data-rawheight="354" class="origin_image zh-lightbox-thumb lazy" width="719" data-original="https://pic2.zhimg.com/v2-416740735fff7ee48ff9c40221a0ced1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-416740735fff7ee48ff9c40221a0ced1_b.jpg"/></figure><p>在使用Prophet创建预测之前，先将数据可视化。直观的来感受数据。</p><div class="highlight"><pre><code class="language-python"><span class="n">model</span> <span class="o">=</span> <span class="n">Prophet</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">stock_price</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">fbprophet</span><span class="o">.</span><span class="n">forecaster</span><span class="o">.</span><span class="n">Prophet</span> <span class="n">at</span> <span class="mh">0x21216301c18</span><span class="o">&gt;</span></code></pre></div><p>要激活Prophet模型，我们只需调用Prophet()并将其分配给一个名为Model的变量。接下来，我们通过调用fit方法将股票数据匹配到模型中。</p><div class="highlight"><pre><code class="language-text">future = model.make_future_dataframe(1095, freq=&#39;d&#39;)

future_boolean = future[&#39;ds&#39;].map(lambda x : True if x.weekday() in range(0, 5) else False)
future = future[future_boolean] 

future.tail()</code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-109e18281a1162a8d4817f4d435e420d_b.jpg" data-caption="" data-size="normal" data-rawwidth="314" data-rawheight="390" class="content_image" width="314"/></noscript><img src="https://pic2.zhimg.com/v2-109e18281a1162a8d4817f4d435e420d_b.jpg" data-caption="" data-size="normal" data-rawwidth="314" data-rawheight="390" class="content_image lazy" width="314" data-actualsrc="https://pic2.zhimg.com/v2-109e18281a1162a8d4817f4d435e420d_b.jpg"/></figure><p>我们需要创建一些未来的日期。Prophet为我们提供了一个名为make_future_dataframe的函数。传入未来周期和频率的数量。以上是我们对未来1095天或3年的预测。</p><p>由于股票只能在交易日操作，我们需要将预测数据从周末中删除。为此，我们创建一个布尔表达式，如果一天不等于0-4，则返回False。“0 =星期一，6=星期六，等等。”</p><p>然后我们将布尔表达式传递给dataframe，它只返回True值。我们现在有一个包含未来3年交易日的预测数据。</p><div class="highlight"><pre><code class="language-python"><span class="n">forecast</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">future</span><span class="p">)</span>
<span class="n">forecast</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-76c9ee4e56ab44ddff2065e1be54e66a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="363" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic3.zhimg.com/v2-76c9ee4e56ab44ddff2065e1be54e66a_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-76c9ee4e56ab44ddff2065e1be54e66a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="363" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic3.zhimg.com/v2-76c9ee4e56ab44ddff2065e1be54e66a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-76c9ee4e56ab44ddff2065e1be54e66a_b.jpg"/></figure><p>我们从模型中调用predict的预测，并在前面创建的future的dataframe中传递该预测。我们在一个名为forecast的新dataframe中返回结果。</p><p>当我们查看预测数据时，会看到一堆新术语。我们最感兴趣的是yhat，它是我们的预测值。（yhat是y的预测）</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-3ac5c9099150ae7957fd5dc0e9b81e13_b.jpg" data-caption="" data-size="normal" data-rawwidth="712" data-rawheight="424" class="origin_image zh-lightbox-thumb" width="712" data-original="https://pic4.zhimg.com/v2-3ac5c9099150ae7957fd5dc0e9b81e13_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-3ac5c9099150ae7957fd5dc0e9b81e13_b.jpg" data-caption="" data-size="normal" data-rawwidth="712" data-rawheight="424" class="origin_image zh-lightbox-thumb lazy" width="712" data-original="https://pic4.zhimg.com/v2-3ac5c9099150ae7957fd5dc0e9b81e13_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-3ac5c9099150ae7957fd5dc0e9b81e13_b.jpg"/></figure><div class="highlight"><pre><code class="language-python"><span class="n">model</span><span class="o">.</span><span class="n">plot_components</span><span class="p">(</span><span class="n">forecast</span><span class="p">);</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-e6e1d121e46df4f3a6a05c21832e475f_b.jpg" data-caption="" data-size="normal" data-rawwidth="640" data-rawheight="640" class="origin_image zh-lightbox-thumb" width="640" data-original="https://pic4.zhimg.com/v2-e6e1d121e46df4f3a6a05c21832e475f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-e6e1d121e46df4f3a6a05c21832e475f_b.jpg" data-caption="" data-size="normal" data-rawwidth="640" data-rawheight="640" class="origin_image zh-lightbox-thumb lazy" width="640" data-original="https://pic4.zhimg.com/v2-e6e1d121e46df4f3a6a05c21832e475f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-e6e1d121e46df4f3a6a05c21832e475f_b.jpg"/></figure><p>Prophet提供了两个方便的可视化助手，plot和plot_components。plot函数创建了实际/预测的图表，plot_components提供了趋势/季节性的图表。</p><div class="highlight"><pre><code class="language-python"><span class="n">stock_price_forecast</span> <span class="o">=</span> <span class="n">forecast</span><span class="p">[[</span><span class="s1">&#39;ds&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat_lower&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat_upper&#39;</span><span class="p">]]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">stock_price</span><span class="p">,</span> <span class="n">stock_price_forecast</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s1">&#39;ds&#39;</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s1">&#39;right&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;royalblue&#39;</span><span class="p">,</span> <span class="s2">&#34;#34495e&#34;</span><span class="p">,</span> <span class="s2">&#34;#e74c3c&#34;</span><span class="p">,</span> <span class="s2">&#34;#e74c3c&#34;</span><span class="p">],</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">);</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-ec1f34b5c3c56f77b492e6b6e2bf5246_b.jpg" data-caption="" data-size="normal" data-rawwidth="942" data-rawheight="451" class="origin_image zh-lightbox-thumb" width="942" data-original="https://pic3.zhimg.com/v2-ec1f34b5c3c56f77b492e6b6e2bf5246_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-ec1f34b5c3c56f77b492e6b6e2bf5246_b.jpg" data-caption="" data-size="normal" data-rawwidth="942" data-rawheight="451" class="origin_image zh-lightbox-thumb lazy" width="942" data-original="https://pic3.zhimg.com/v2-ec1f34b5c3c56f77b492e6b6e2bf5246_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-ec1f34b5c3c56f77b492e6b6e2bf5246_b.jpg"/></figure><p>可视化助手只是使用我们的预测dataframe中的数据。我们可以重新创建相同的图表。</p><h2><b>模拟预测</b></h2><p>虽然我们在上面创建的3年预测非常酷，但我们不想在没有使用交易策略对业绩进行反向测试的情况下就对其做出任何交易决定。</p><p>在本节中，我们将模拟Prophet在1980年就已经存在，并使用它来创建到2019年的月度预测。然后，我们将在下一节中使用这些数据来模拟各种交易策略对我们刚刚购买并持有该股票的效果。</p><div class="highlight"><pre><code class="language-python"><span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;dayname&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">day_name</span><span class="p">()</span>
<span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;month&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">month</span>
<span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">year</span>
<span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;month/year&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;month&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> 

<span class="n">stock_price</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">stock_price</span><span class="p">,</span> 
<span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;month/year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(),</span>
<span class="n">on</span><span class="o">=</span><span class="s1">&#39;month/year&#39;</span><span class="p">,</span>
<span class="n">how</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">)</span>

<span class="n">stock_price</span> <span class="o">=</span> <span class="n">stock_price</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;index&#39;</span><span class="p">:</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">})</span>

<span class="n">stock_price</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-76fb4468f5ff6606a0744645e484fb14_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="336" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic1.zhimg.com/v2-76fb4468f5ff6606a0744645e484fb14_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-76fb4468f5ff6606a0744645e484fb14_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="336" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic1.zhimg.com/v2-76fb4468f5ff6606a0744645e484fb14_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-76fb4468f5ff6606a0744645e484fb14_b.jpg"/></figure><p>在模拟月度预测之前，我们需要向stock_price dataframe添加一些列，这是我们在这个项目开始时创建的，目的是使它更容易使用。添加month、year、month/year和month/year_index。</p><div class="highlight"><pre><code class="language-python"><span class="n">loop_list</span> <span class="o">=</span> <span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;month/year&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
<span class="n">max_num</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">loop_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
<span class="n">forecast_frames</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">num</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">loop_list</span><span class="p">):</span>

    <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="n">max_num</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">stock_price</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[</span>
        <span class="n">stock_price</span><span class="p">[</span><span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;month/year&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">loop_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">min</span><span class="p">():</span>\
        <span class="n">stock_price</span><span class="p">[</span><span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;month/year&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">][</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">max</span><span class="p">()]</span>

        <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()[[</span><span class="s1">&#39;ds&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">]]</span>

        <span class="n">model</span> <span class="o">=</span> <span class="n">Prophet</span><span class="p">()</span>
        <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

        <span class="n">future</span> <span class="o">=</span> <span class="n">stock_price</span><span class="p">[</span><span class="n">stock_price</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="n">num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)][[</span><span class="s1">&#39;ds&#39;</span><span class="p">]]</span>

        <span class="n">forecast</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">future</span><span class="p">)</span>
        <span class="n">forecast_frames</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">forecast</span><span class="p">)</span></code></pre></div><p class="ztext-empty-paragraph"><br/></p><div class="highlight"><pre><code class="language-python"><span class="n">stock_price_forecast</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">top</span><span class="p">,</span> <span class="n">bottom</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">top</span><span class="p">,</span> <span class="n">bottom</span><span class="p">],</span> <span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span> <span class="n">forecast_frames</span><span class="p">)</span>
<span class="n">stock_price_forecast</span> <span class="o">=</span> <span class="n">stock_price_forecast</span><span class="p">[[</span><span class="s1">&#39;ds&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat_lower&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat_upper&#39;</span><span class="p">]]</span>
<span class="n">stock_price_forecast</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s1">&#39;stock_price_forecast.csv&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span></code></pre></div><p>基本上我们在stock_price中循环每个月/年，并将预测模型与该时期可用的股票数据进行拟合，然后提前一个月预测。继续这样做，直到最后一个月/年。最后，将这些预测合并到一个名为stock_price_forecast的数据框中。将结果保存在csv文件中，这样如果需要重置数据，就不必再次运行模型。</p><div class="highlight"><pre><code class="language-python"><span class="n">stock_price_forecast</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;stock_price_forecast.csv&#39;</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;ds&#39;</span><span class="p">])</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">stock_price</span><span class="p">[[</span><span class="s1">&#39;ds&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;month/year_index&#39;</span><span class="p">]],</span> <span class="n">stock_price_forecast</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s1">&#39;ds&#39;</span><span class="p">)</span>
<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Percent Change&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">pct_change</span><span class="p">()</span>
<span class="n">df</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat_lower&#39;</span><span class="p">,</span> <span class="s1">&#39;yhat_upper&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;royalblue&#39;</span><span class="p">,</span> <span class="s2">&#34;#34495e&#34;</span><span class="p">,</span> <span class="s2">&#34;#e74c3c&#34;</span><span class="p">,</span> <span class="s2">&#34;#e74c3c&#34;</span><span class="p">],</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-fcd13149db737b375f4e83ea12ed214a_b.jpg" data-caption="" data-size="normal" data-rawwidth="942" data-rawheight="451" class="origin_image zh-lightbox-thumb" width="942" data-original="https://pic3.zhimg.com/v2-fcd13149db737b375f4e83ea12ed214a_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-fcd13149db737b375f4e83ea12ed214a_b.jpg" data-caption="" data-size="normal" data-rawwidth="942" data-rawheight="451" class="origin_image zh-lightbox-thumb lazy" width="942" data-original="https://pic3.zhimg.com/v2-fcd13149db737b375f4e83ea12ed214a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-fcd13149db737b375f4e83ea12ed214a_b.jpg"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-0421851ac9849b522a5a0957284e994d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="310" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic2.zhimg.com/v2-0421851ac9849b522a5a0957284e994d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-0421851ac9849b522a5a0957284e994d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1080" data-rawheight="310" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic2.zhimg.com/v2-0421851ac9849b522a5a0957284e994d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-0421851ac9849b522a5a0957284e994d_b.jpg"/></figure><p>最后，我们将预测与实际价格结合起来，创建一个百分比变化列，将在下面的交易算法中使用。最后，将预测与实际情况作图，以查看它的表现如何。正如你所看到的，有一点延迟。它的行为很像移动平均线。</p><h2><b>交易算法</b></h2><p>创建了四个初始交易算法:</p><p><b>Hold：</b>这是一种买入并持有的策略。也就是说，我们买股票并持有到最后一段时间。</p><p><b>Prophet：</b>这种策略是当我们的预测显示下跌趋势时卖出，当我的预测显示上涨趋势时买进</p><p><b>Prophet Thresh：</b>这个策略是只有当股票价格跌破我们的yhat_lower边界时才卖出。</p><p><b>Seasonality：</b>这一策略是在8月退出市场，重新进入Ocober。这是基于上面的季节性图表。</p><div class="highlight"><pre><code class="language-python"><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[[</span><span class="s1">&#39;Hold&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet Thresh&#39;</span><span class="p">,</span><span class="s1">&#39;Seasonality&#39;</span><span class="p">]]</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Hold = {df[&#39;Hold&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet = {df[&#39;Prophet&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Thresh = {df[&#39;Prophet Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Seasonality = {df[&#39;Seasonality&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span></code></pre></div><p>Hold = 24,396</p><div class="highlight"><pre><code class="language-python"><span class="n">Prophet</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span><span class="mi">366</span>
<span class="n">Prophet</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span><span class="mi">087</span>
<span class="n">Seasonality</span> <span class="o">=</span> <span class="mi">30</span><span class="p">,</span><span class="mi">861</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-ad538c9b61d3505281065ccb1568b64c_b.jpg" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="451" class="origin_image zh-lightbox-thumb" width="949" data-original="https://pic1.zhimg.com/v2-ad538c9b61d3505281065ccb1568b64c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-ad538c9b61d3505281065ccb1568b64c_b.jpg" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="451" class="origin_image zh-lightbox-thumb lazy" width="949" data-original="https://pic1.zhimg.com/v2-ad538c9b61d3505281065ccb1568b64c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-ad538c9b61d3505281065ccb1568b64c_b.jpg"/></figure><p><br/><br/>我们绘制了初始资金为1000美元初始模拟策略结果。你可以看到季节性做得最好，持有策略其次。两种基于Prophet的策略都做得不太好。让我们看看是否可以通过优化阈值来改进Prophet Thresh。</p><div class="highlight"><pre><code class="language-python"><span class="n">performance</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">.</span><span class="mi">9</span><span class="p">,</span><span class="o">.</span><span class="mi">99</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">y</span> <span class="o">=</span> <span class="p">((</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat_lower&#39;</span><span class="p">]</span><span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Percent Change&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">cumprod</span><span class="p">()</span>
    <span class="n">performance</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>

<span class="n">best_yhat</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span><span class="o">.</span><span class="nb">max</span><span class="p">()</span><span class="o">.</span><span class="n">idxmax</span><span class="p">()</span>
<span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">);</span>
<span class="n">f</span><span class="s1">&#39;Best Yhat = {best_yhat:,.2f}&#39;</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-c3da8947278b18c32ba9ec2fc3cebf64_b.jpg" data-caption="" data-size="normal" data-rawwidth="930" data-rawheight="469" class="origin_image zh-lightbox-thumb" width="930" data-original="https://pic1.zhimg.com/v2-c3da8947278b18c32ba9ec2fc3cebf64_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-c3da8947278b18c32ba9ec2fc3cebf64_b.jpg" data-caption="" data-size="normal" data-rawwidth="930" data-rawheight="469" class="origin_image zh-lightbox-thumb lazy" width="930" data-original="https://pic1.zhimg.com/v2-c3da8947278b18c32ba9ec2fc3cebf64_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-c3da8947278b18c32ba9ec2fc3cebf64_b.jpg"/></figure><p><br/>上面我们循环遍历不同百分比的thresh以找到最优的thresh。最佳阈值是当前yhat_lower值的92%。</p><div class="highlight"><pre><code class="language-python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Optimized Prophet Thresh&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat_lower&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="n">best_yhat</span><span class="p">)</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> 
<span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Percent Change&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">cumprod</span><span class="p">()</span>

<span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[[</span><span class="s1">&#39;Hold&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet Thresh&#39;</span><span class="p">,</span>
<span class="s1">&#39;Seasonality&#39;</span><span class="p">,</span> <span class="s1">&#39;Optimized Prophet Thresh&#39;</span><span class="p">]]</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Hold = {df[&#39;Hold&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet = {df[&#39;Prophet&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Thresh = {df[&#39;Prophet Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Seasonality = {df[&#39;Seasonality&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Optimized Prophet Thresh = {df[&#39;Optimized Prophet Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>

<span class="n">Hold</span> <span class="o">=</span> <span class="mi">24</span><span class="p">,</span><span class="mi">396</span>
<span class="n">Prophet</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span><span class="mi">366</span>
<span class="n">Prophet</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span><span class="mi">087</span>
<span class="n">Seasonality</span> <span class="o">=</span> <span class="mi">30</span><span class="p">,</span><span class="mi">861</span>
<span class="n">Optimized</span> <span class="n">Prophet</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">36</span><span class="p">,</span><span class="mi">375</span>
</code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-0ad0a24f068be2d35b99f1cc76ff2b2d_b.jpg" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="451" class="origin_image zh-lightbox-thumb" width="949" data-original="https://pic2.zhimg.com/v2-0ad0a24f068be2d35b99f1cc76ff2b2d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-0ad0a24f068be2d35b99f1cc76ff2b2d_b.jpg" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="451" class="origin_image zh-lightbox-thumb lazy" width="949" data-original="https://pic2.zhimg.com/v2-0ad0a24f068be2d35b99f1cc76ff2b2d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-0ad0a24f068be2d35b99f1cc76ff2b2d_b.jpg"/></figure><p>以上我们看到的是新的最佳交易策略。不幸的是，无论是优化的ProphetThresh都在有问题，<b>因为他们使用的数据有未来函数存在，而这些数据在我们交易的时候是不可用的</b>。我们将需要为我们预测的每个当前时间点创建一个优化的Thresh。</p><div class="highlight"><pre><code class="language-python"><span class="n">fcst_thresh</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">num</span><span class="p">,</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()):</span>

    <span class="n">temp_df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[</span>
        <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()[</span><span class="mi">0</span><span class="p">]][</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">min</span><span class="p">():</span>\
        <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">index</span><span class="p">][</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">max</span><span class="p">()]</span>

    <span class="n">performance</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">thresh</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">.</span><span class="mi">99</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
        <span class="n">percent</span> <span class="o">=</span> <span class="p">((</span><span class="n">temp_df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">temp_df</span><span class="p">[</span><span class="s1">&#39;yhat_lower&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="n">thresh</span><span class="p">)</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="p">(</span><span class="n">temp_df</span><span class="p">[</span><span class="s1">&#39;Percent Change&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">cumprod</span><span class="p">()</span>
        <span class="n">performance</span><span class="p">[</span><span class="n">thresh</span><span class="p">]</span> <span class="o">=</span> <span class="n">percent</span>

    <span class="n">best_thresh</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span><span class="o">.</span><span class="nb">max</span><span class="p">()</span><span class="o">.</span><span class="n">idxmax</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">())</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span>
<span class="n">fcst_thresh</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()[</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">best_thresh</span>
<span class="n">fcst_thresh</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">([</span><span class="n">fcst_thresh</span><span class="p">])</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;index&#39;</span><span class="p">:</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="s1">&#39;Fcst Thresh&#39;</span><span class="p">})</span>
<span class="n">fcst_thresh</span><span class="p">[</span><span class="s1">&#39;Fcst Thresh&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">);</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-277d239e051fb896a52146f5a9d92301_b.jpg" data-caption="" data-size="normal" data-rawwidth="933" data-rawheight="469" class="origin_image zh-lightbox-thumb" width="933" data-original="https://pic2.zhimg.com/v2-277d239e051fb896a52146f5a9d92301_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-277d239e051fb896a52146f5a9d92301_b.jpg" data-caption="" data-size="normal" data-rawwidth="933" data-rawheight="469" class="origin_image zh-lightbox-thumb lazy" width="933" data-original="https://pic2.zhimg.com/v2-277d239e051fb896a52146f5a9d92301_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-277d239e051fb896a52146f5a9d92301_b.jpg"/></figure><p>循环遍历数据，并为当前时间点找到到目前为止的最佳阈值百分比。正如你所看到的，随着时间的推移（1980年1月1日- 2019年3月18日），当前的thresh的百分比会跳跃。</p><div class="highlight"><pre><code class="language-python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat_optimized&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">fcst_thresh</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">)[</span><span class="s1">&#39;Fcst Thresh&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat_lower&#39;</span><span class="p">]</span>

<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Prophet Fcst Thresh&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat_optimized&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Percent Change&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">cumprod</span><span class="p">()</span>

<span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[[</span><span class="s1">&#39;Hold&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet Thresh&#39;</span><span class="p">,</span><span class="s1">&#39;Prophet Fcst Thresh&#39;</span><span class="p">]]</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Hold = {df[&#39;Hold&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet = {df[&#39;Prophet&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Thresh = {df[&#39;Prophet Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="c1"># print(f&#34;Seasonality = {df[&#39;Seasonality&#39;].iloc[-1]*1000:,.0f}&#34;)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Fcst Thresh = {df[&#39;Prophet Fcst Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="n">Hold</span> <span class="o">=</span> <span class="mi">24</span><span class="p">,</span><span class="mi">396</span>
<span class="n">Prophet</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span><span class="mi">366</span>
<span class="n">Prophet</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span><span class="mi">087</span>
<span class="n">Prophet</span> <span class="n">Fcst</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span><span class="mi">620</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-d155b463825af5986d9a4ece4eadb611_b.jpg" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="451" class="origin_image zh-lightbox-thumb" width="949" data-original="https://pic2.zhimg.com/v2-d155b463825af5986d9a4ece4eadb611_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-d155b463825af5986d9a4ece4eadb611_b.jpg" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="451" class="origin_image zh-lightbox-thumb lazy" width="949" data-original="https://pic2.zhimg.com/v2-d155b463825af5986d9a4ece4eadb611_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-d155b463825af5986d9a4ece4eadb611_b.jpg"/></figure><p>就像我们在创建新的交易策略并绘制图表所做的那样。不幸的是，结果变得更糟，但我们做得比我们最初的ProphetThresh更好。我们不使用到目前为止的整个周期来计算thresh，而是像移动平均线（30、60、90等等），尝试各种滚动窗口的时间。</p><div class="highlight"><pre><code class="language-python"><span class="n">rolling_thresh</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">num</span><span class="p">,</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()):</span>

    <span class="n">rolling_performance</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">roll</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>

        <span class="n">temp_df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[</span>
            <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">index</span><span class="p">][</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">min</span><span class="p">()</span> <span class="o">-</span> <span class="n">pd</span><span class="o">.</span><span class="n">DateOffset</span><span class="p">(</span><span class="n">months</span><span class="o">=</span><span class="n">roll</span><span class="p">):</span>\
            <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">index</span><span class="p">][</span><span class="s1">&#39;ds&#39;</span><span class="p">]</span><span class="o">.</span><span class="nb">max</span><span class="p">()]</span>

        <span class="n">performance</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="k">for</span> <span class="n">thresh</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span><span class="o">.</span><span class="mi">99</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
            <span class="n">percent</span> <span class="o">=</span> <span class="p">((</span><span class="n">temp_df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">temp_df</span><span class="p">[</span><span class="s1">&#39;yhat_lower&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="n">thresh</span><span class="p">)</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="p">(</span><span class="n">temp_df</span><span class="p">[</span><span class="s1">&#39;Percent Change&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">cumprod</span><span class="p">()</span>
            <span class="n">performance</span><span class="p">[</span><span class="n">thresh</span><span class="p">]</span> <span class="o">=</span> <span class="n">percent</span>

        <span class="n">per_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">performance</span><span class="p">)</span>
        <span class="n">best_thresh</span> <span class="o">=</span> <span class="n">per_df</span><span class="o">.</span><span class="n">iloc</span><span class="p">[[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span><span class="o">.</span><span class="nb">max</span><span class="p">()</span><span class="o">.</span><span class="n">idxmax</span><span class="p">()</span>
        <span class="n">percents</span> <span class="o">=</span> <span class="n">per_df</span><span class="p">[</span><span class="n">best_thresh</span><span class="p">]</span>

        <span class="n">rolling_performance</span><span class="p">[</span><span class="n">best_thresh</span><span class="p">]</span> <span class="o">=</span> <span class="n">percents</span>

    <span class="n">per_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">rolling_performance</span><span class="p">)</span>
    <span class="n">best_rolling_thresh</span> <span class="o">=</span> <span class="n">per_df</span><span class="o">.</span><span class="n">iloc</span><span class="p">[[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span><span class="o">.</span><span class="nb">max</span><span class="p">()</span><span class="o">.</span><span class="n">idxmax</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">())</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">rolling_thresh</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()[</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">best_rolling_thresh</span>

<span class="n">rolling_thresh</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">([</span><span class="n">rolling_thresh</span><span class="p">])</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;index&#39;</span><span class="p">:</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="s1">&#39;Fcst Thresh&#39;</span><span class="p">})</span>
<span class="n">rolling_thresh</span><span class="p">[</span><span class="s1">&#39;Fcst Thresh&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">);</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-d71538707faa3a62600bc9e7cfba0774_b.jpg" data-caption="" data-size="normal" data-rawwidth="933" data-rawheight="469" class="origin_image zh-lightbox-thumb" width="933" data-original="https://pic1.zhimg.com/v2-d71538707faa3a62600bc9e7cfba0774_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-d71538707faa3a62600bc9e7cfba0774_b.jpg" data-caption="" data-size="normal" data-rawwidth="933" data-rawheight="469" class="origin_image zh-lightbox-thumb lazy" width="933" data-original="https://pic1.zhimg.com/v2-d71538707faa3a62600bc9e7cfba0774_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-d71538707faa3a62600bc9e7cfba0774_b.jpg"/></figure><p>上面和以前很相似，但是现在我们尝试了不同的移动窗口和不同的阈值百分比。这变得相当复杂。从上面可以看到，随着时间的推移，阈值百分比随时间而变化。现在让我们看看我们是怎么做的。</p><div class="highlight"><pre><code class="language-python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat_optimized&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">rolling_thresh</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s1">&#39;month/year_index&#39;</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">)[</span><span class="s1">&#39;Fcst Thresh&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat_lower&#39;</span><span class="p">]</span>

<span class="n">df</span><span class="p">[</span><span class="s1">&#39;Prophet Rolling Thresh&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat_optimized&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Percent Change&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">cumprod</span><span class="p">()</span>

<span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[[</span><span class="s1">&#39;Hold&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet Thresh&#39;</span><span class="p">,</span><span class="s1">&#39;Prophet Fcst Thresh&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet Rolling Thresh&#39;</span><span class="p">]]</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Hold = {df[&#39;Hold&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet = {df[&#39;Prophet&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Thresh = {df[&#39;Prophet Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="c1"># print(f&#34;Seasonality = {df[&#39;Seasonality&#39;].iloc[-1]*1000:,.0f}&#34;)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Fcst Thresh = {df[&#39;Prophet Fcst Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Rolling Thresh = {df[&#39;Prophet Rolling Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>

<span class="n">Hold</span> <span class="o">=</span> <span class="mi">24</span><span class="p">,</span><span class="mi">396</span>
<span class="n">Prophet</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span><span class="mi">366</span>
<span class="n">Prophet</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span><span class="mi">087</span>
<span class="n">Prophet</span> <span class="n">Fcst</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span><span class="mi">620</span>
<span class="n">Prophet</span> <span class="n">Rolling</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">23</span><span class="p">,</span><span class="mi">621</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-5758d5567355ff6af5249f4b073d8efd_b.jpg" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="451" class="origin_image zh-lightbox-thumb" width="949" data-original="https://pic2.zhimg.com/v2-5758d5567355ff6af5249f4b073d8efd_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-5758d5567355ff6af5249f4b073d8efd_b.jpg" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="451" class="origin_image zh-lightbox-thumb lazy" width="949" data-original="https://pic2.zhimg.com/v2-5758d5567355ff6af5249f4b073d8efd_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-5758d5567355ff6af5249f4b073d8efd_b.jpg"/></figure><p>正如你所看到的，仍然没有击败最简单买入持有策略。也许<b><i>&#34;Time in the Market is better then Timing the Market&#34;</i></b>这句话有一定道理。</p><div class="highlight"><pre><code class="language-python"><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Time Traveler&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;yhat&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Percent Change&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">cumprod</span><span class="p">()</span>

<span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s1">&#39;ds&#39;</span><span class="p">)[[</span><span class="s1">&#39;Hold&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet Thresh&#39;</span><span class="p">,</span><span class="s1">&#39;Prophet Fcst Thresh&#39;</span><span class="p">,</span> <span class="s1">&#39;Prophet Rolling Thresh&#39;</span><span class="p">,</span><span class="s1">&#39;Time Traveler&#39;</span><span class="p">]]</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Hold = {df[&#39;Hold&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet = {df[&#39;Prophet&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Thresh = {df[&#39;Prophet Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="c1"># print(f&#34;Seasonality = {df[&#39;Seasonality&#39;].iloc[-1]*1000:,.0f}&#34;)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Fcst Thresh = {df[&#39;Prophet Fcst Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Prophet Rolling Thresh = {df[&#39;Prophet Rolling Thresh&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&#34;Time Traveler = {df[&#39;Time Traveler&#39;].iloc[-1]*1000:,.0f}&#34;</span><span class="p">)</span>

<span class="n">Hold</span> <span class="o">=</span> <span class="mi">24</span><span class="p">,</span><span class="mi">396</span>
<span class="n">Prophet</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span><span class="mi">366</span>
<span class="n">Prophet</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span><span class="mi">087</span>
<span class="n">Prophet</span> <span class="n">Fcst</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span><span class="mi">620</span>
<span class="n">Prophet</span> <span class="n">Rolling</span> <span class="n">Thresh</span> <span class="o">=</span> <span class="mi">23</span><span class="p">,</span><span class="mi">621</span>
<span class="n">Time</span> <span class="n">Traveler</span> <span class="o">=</span> <span class="mi">288</span><span class="p">,</span><span class="mi">513</span></code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-0f9c4d18e75b18e515b0062412e9d5bb_b.jpg" data-caption="" data-size="normal" data-rawwidth="955" data-rawheight="451" class="origin_image zh-lightbox-thumb" width="955" data-original="https://pic4.zhimg.com/v2-0f9c4d18e75b18e515b0062412e9d5bb_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-0f9c4d18e75b18e515b0062412e9d5bb_b.jpg" data-caption="" data-size="normal" data-rawwidth="955" data-rawheight="451" class="origin_image zh-lightbox-thumb lazy" width="955" data-original="https://pic4.zhimg.com/v2-0f9c4d18e75b18e515b0062412e9d5bb_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-0f9c4d18e75b18e515b0062412e9d5bb_b.jpg"/></figure><p>上面是Time Traveler策略。这当然是一个完美的交易策略，因为我们事先知道当市场上下波动。你最多能从1000美元中赚到288,513美元。</p><h2><b>总结</b></h2><p>时间序列预测是非常复杂的，但Prophet使它非常容易创建稳健的预测，只需很少的努力。虽然它并没有使我们对股票市场的预测变得丰富，但是它仍然非常有用，并且可以快速地来解决不同领域的许多问题。<i>原文：<a href="https://link.zhihu.com/?target=https%3A//www.gardnmi.com/post/forecasting-stock-perfomance-with-prophet%23Simulating-Forecasts" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">gardnmi.com/post/foreca</span><span class="invisible">sting-stock-perfomance-with-prophet#Simulating-Forecasts</span><span class="ellipsis"></span></a></i></p><p><i>—End—</i></p><p>量化投资与机器学习微信公众号，是业内垂直于<b>Quant</b>、<b>MFE</b>、<b>CST</b>等专业的主流自媒体。公众号拥有来自<b>公募、私募、券商、银行、海外</b>等众多圈内<b>10W+</b>关注者。每日发布行业前沿研究成果和最新资讯。</p><p></p>