<div class="title-image"><img src="https://pic1.zhimg.com/v2-9a6025dbe14402f9c4e1030ba2d8e9e1_b.jpg" alt=""></div><p><b>latest edition: 19/12/2019</b></p><h2><b>从17/12/2019开始我就开始正式更新我自己的Haskell整理啦！本教学大概会持续到IO流左右，本文整理了《Haskell趣学指南》 以及 爱大信院正常的FP（function programming）教学，有幸能够听一学期Haskell创始人之一的</b>菲利普·瓦德勒 (Philip Wadler)的fp教学。本文<b>会以一个彻彻底底的新人视角去带着大家学习haskell这门语言，希望大家能跟我一起学习呀，祝学有所成！</b></h2><p><b>（ps：请注意我放上去的每一个网址，对于帮助你的理解是非常有用的，因为我本人在国外，就很多都是用了wiki或者一些需要外网登录的网址，我会在文章内给出国内的小伙伴解决的方法（比较基础网速也相对慢一点可能，你们也可以联系我，我可以给你们我当初买梯子的地方），希望有帮助，如果不能用了请</b>@我<b>）</b></p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_b.jpg" data-size="normal" data-rawwidth="864" data-rawheight="213" class="origin_image zh-lightbox-thumb" width="864" data-original="https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_b.jpg" data-size="normal" data-rawwidth="864" data-rawheight="213" class="origin_image zh-lightbox-thumb lazy" width="864" data-original="https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_b.jpg"/><figcaption>可以在extension里面寻找，无论是chrome和firefox应该都有，然后好像也有window版本的</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-1e6c186219bf9052d65c46d6c8526d9c_b.jpg" data-caption="" data-size="normal" data-rawwidth="300" data-rawheight="223" class="content_image" width="300"/></noscript><img src="https://pic1.zhimg.com/v2-1e6c186219bf9052d65c46d6c8526d9c_b.jpg" data-caption="" data-size="normal" data-rawwidth="300" data-rawheight="223" class="content_image lazy" width="300" data-actualsrc="https://pic1.zhimg.com/v2-1e6c186219bf9052d65c46d6c8526d9c_b.jpg"/></figure><hr/><p class="ztext-empty-paragraph"><br/></p><p class="ztext-empty-paragraph"><br/></p><h2><i><b>一丶Introduction to Haskell</b></i></h2><p><b>首先呢，作为一个对Haskell感兴趣的同学，你要对haskell有一个基本的认知。Haskell 是一门纯粹函数式程序语言（purely functional programming langage），在这一点上我相信对于熟悉C或者java以及别的命令式编程语言的小伙伴应该会挺迷惑的，再此附上一个命令是编程语言和函数式编程语言的区别，望周知！</b></p><a href="https://link.zhihu.com/?target=https%3A//blog.csdn.net/u012611878/article/details/78495165" data-draft-node="block" data-draft-type="link-card" class=" wrap external" target="_blank" rel="nofollow noreferrer">命令式与函数式编程的区别</a><a href="https://link.zhihu.com/?target=http%3A//www.aqee.net/post/dijkstra-on-haskell-and-java.html" data-draft-node="block" data-draft-type="link-card" data-image="https://pic4.zhimg.com/v2-186fa7b536d244f8914dcf569291f293_180x120.jpg" data-image-width="560" data-image-height="345" class=" wrap external" target="_blank" rel="nofollow noreferrer">计算机大师Dijkstra谈Haskell和Java -</a><p><b>纯函数式语言可以给那些习惯了命令式编程语言的学生一个新的思路，也能良好的作为初学者接触编程的第一门语言，同时也体现出编程世界的多样性以及有趣性，这也是为什么部分国外的大学第一年都以haskell为新生入门课程。</b></p><p class="ztext-empty-paragraph"><br/></p><p><b>此外，Haskell是一门非常懒惰的语言。除非特殊指定声明，函数在真正需要结果之前不会被求值！</b></p><a href="https://link.zhihu.com/?target=https%3A//openhome.cc/Gossip/CodeData/HaskellTutorial/Laziness.html" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-78c02a0071361e558019e39ba9b55c34_ipico.jpg" data-image-width="200" data-image-height="200" class=" wrap external" target="_blank" rel="nofollow noreferrer">Haskell Tutorial（8）懶惰是美德之一</a><p><b>同样的，Haskell也是一门静态类型的语言。haskell并没有那么聪明，当你开始编译程序时，编译器需要明确参数的类型，但是参数的类型不能出错（你总不能拿一个数字（Int）去加上一个字符串（String）吧）。haskell有自己的一套强大的类型系统，支持自动推导（type inference），所以很多时候你就可以不在代码的最上面给出type（但是你自己最好清楚自己要写的是什么东西，可以用:t的命令在ghci里面查看类型）</b></p><p><b>Haskell是一门很高级的语言，最初在1987年就开始有模型了，在1999年给出了一个haskell 98 的版本。本文就不细讲当初的历史了，在此附上wiki和百度的haskell历史介绍。</b></p><a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/Haskell" data-draft-node="block" data-draft-type="link-card" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">zh.wikipedia.org/wiki/H</span><span class="invisible">askell</span><span class="ellipsis"></span></a><a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/Haskell" data-draft-node="block" data-draft-type="link-card" data-image="https://pic4.zhimg.com/v2-a64774de231eee7f3449f6649c9cdaef_180x120.jpg" data-image-width="320" data-image-height="105" class=" wrap external" target="_blank" rel="nofollow noreferrer">Haskell_百度百科</a><p class="ztext-empty-paragraph"><br/></p><p class="ztext-empty-paragraph"><br/></p><h2><b><i>二丶Haskell的编译</i></b></h2><p><b><i>在学习的最开始，</i>你需要用到一个编辑器和一个编译器，编辑器的话我本人用的是vscode（说句实话，微软的东西还挺香的，多行同时编译功能！！（按住ctrl然后鼠标点就可以了，或者鼠标的滚轮往下滑）），但是没所谓大家使用什么版本的编辑器，无论是atom还是别的都没所谓，主要是自己用的习惯。编译器呢，就没得跑了，我们要用GHC。</b></p><p><b>vscode下载地址：</b></p><a href="https://link.zhihu.com/?target=https%3A//code.visualstudio.com/" data-draft-node="block" data-draft-type="link-card" data-image="https://pic4.zhimg.com/v2-beaba009c542a9f6fe1d2034a7ed568b_180x120.jpg" data-image-width="1012" data-image-height="506" class=" wrap external" target="_blank" rel="nofollow noreferrer">Visual Studio Code - Code Editing. Redefined</a><p><b>vscode extension推荐：</b></p><div class="highlight"><pre><code class="language-text">1.Haskell Syntax Highlighting   https://marketplace.visualstudio.com/items?itemName=justusadam.language-haskell
2.Haskelly                      https://marketplace.visualstudio.com/items?itemName=UCL.haskelly
3.hlint                         https://marketplace.visualstudio.com/items?itemName=lunaryorn.hlint
4.ghc-mod                       https://marketplace.visualstudio.com/items?itemName=hoovercj.vscode-ghc-mod</code></pre></div><p>后面的网址是插件的一写简介之类的。先推荐安装前面两个插件，后面的插件用cabal有概率导致安装不成功（源的问题），我自己之后就直接使用前面两个插件了，后面的直接就不装了。</p><p>后面两个插件的话可以先试一下cabal，如果不成功则用stack安装。</p><p>再此也额外附上一个link</p><a href="https://zhuanlan.zhihu.com/p/20739339" data-draft-node="block" data-draft-type="link-card" class="internal">aaaron7：打造令人愉悦的 Haskell 开发环境</a><p><b>atom下载地址：</b></p><a href="https://link.zhihu.com/?target=https%3A//atom.io/" data-draft-node="block" data-draft-type="link-card" data-image="https://pic4.zhimg.com/v2-9cfc3ee2778c9affa1906d93250e37f3_180x120.jpg" data-image-width="1200" data-image-height="630" class=" wrap external" target="_blank" rel="nofollow noreferrer">A hackable text editor for the 21st Century</a><p class="ztext-empty-paragraph"><br/></p><p><b>GHC的安装，就花样很多了，</b><a href="https://link.zhihu.com/?target=https%3A//www.haskell.org/platform/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">haskell.org/platform/</span><span class="invisible"></span></a>，<b>这个是haskell官方的网址，可以下载GHC，按照自己的版本下载完之后就一路安装吧！冲啊！（正常来说不会出什么问题，如果有问题的话，也可以</b>@我<b>，我看看咋回事），正常来说，里面会包含一个ghc和cabal。（如果你想用stack也可以，stack特别强大，但是对于新手来说没有cabal那么方便）</b></p><p><b>GHC主要有三个部分组成</b></p><ul><li><b>ghc</b>是生成快速本底代码的优化编译器。</li><li><b>ghci</b>是一个交互解析器和调试器。</li><li><b>runghc</b>是一个以脚本形式(并不要首先编译)运行Haskell代码的程序。</li></ul><p><b>ghci程序是GHC的交互式解析器。它可以让用户输入Haskell表达式并对其求值，浏览模块以及调试代码。</b></p><p class="ztext-empty-paragraph"><br/></p><p><b>输入ghci在terminal（终端）试试，如果会出现</b></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_b.png" data-caption="" data-size="normal" data-rawwidth="713" data-rawheight="94" class="origin_image zh-lightbox-thumb" width="713" data-original="https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_b.png" data-caption="" data-size="normal" data-rawwidth="713" data-rawheight="94" class="origin_image zh-lightbox-thumb lazy" width="713" data-original="https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_b.png"/></figure><p class="ztext-empty-paragraph"><br/></p><p><b>这种则代表没啥问题了老铁，然后就退出运行环境（ctrl+D），然后开始先更新一下你的cabal（对于新手来说，用cabal更新一切都比较方便）</b></p><p><b>在terminal上输入</b></p><div class="highlight"><pre><code class="language-text">cabal update 
cabal upgrade（基本用不到第二个）</code></pre></div><p><b><a href="https://link.zhihu.com/?target=https%3A//wiki.haskell.org/Cabal-Install" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">wiki.haskell.org/Cabal-</span><span class="invisible">Install</span><span class="ellipsis"></span></a>（cabal的介绍）</b></p><p><b>cabal没有uninstall，如果一个包版本不对，可以使用</b></p><p><b><code>cabal install --reinstall package_name</code>进行重装。</b></p><p class="ztext-empty-paragraph"><br/></p><p><b>19/12/2019更新，由于评论区有大佬提醒可以用stack，我就去搜寻了一些资料，对比cabal的最开始可能会复杂一些，不过如果有感兴趣的朋友，也可以去尝试着安装一下。再次附上links（ps：顺便感谢大家的一些支持以及资料不全的提醒，今晚会继续更新chapter2的内容）</b></p><a href="https://link.zhihu.com/?target=https%3A//github.com/hellmonky/note/blob/master/%25E8%25AF%25AD%25E8%25A8%2580%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25AE%25B0%25E5%25BD%2595/%25E5%2585%25B3%25E4%25BA%258Evscode%25E6%2590%25AD%25E5%25BB%25BAh%25E7%258E%25AF%25E5%25A2%2583%25E7%259A%2584%25E8%25BF%2587%25E7%25A8%258B.md" data-draft-node="block" data-draft-type="link-card" class=" wrap external" target="_blank" rel="nofollow noreferrer">在window的环境下配置haskell</a><a href="https://link.zhihu.com/?target=https%3A//notes.shinemic.cn/setting-up-haskell-stack-development-environment/" data-draft-node="block" data-draft-type="link-card" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">notes.shinemic.cn/setti</span><span class="invisible">ng-up-haskell-stack-development-environment/</span><span class="ellipsis"></span></a><a href="https://link.zhihu.com/?target=https%3A//blog.ramdoot.in/installing-haskell-stack-in-windows-7c8fd2c79f" data-draft-node="block" data-draft-type="link-card" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">blog.ramdoot.in/install</span><span class="invisible">ing-haskell-stack-in-windows-7c8fd2c79f</span><span class="ellipsis"></span></a><p><b>以下的图片是上课的时候philip推荐的书，大家有兴趣的可以自己去看看，也可以看看中文版（没有的话可以</b>@<b>我，我可以发给你们），新手比较推荐看下面那本</b></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_b.jpg" data-caption="" data-size="normal" data-rawwidth="1002" data-rawheight="385" class="origin_image zh-lightbox-thumb" width="1002" data-original="https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_b.jpg" data-caption="" data-size="normal" data-rawwidth="1002" data-rawheight="385" class="origin_image zh-lightbox-thumb lazy" width="1002" data-original="https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_b.jpg"/></figure><p class="ztext-empty-paragraph"><br/></p><p><b>最后，从第二章开始具体讲解haskell的具体教学，希望多多支持，谢谢！</b></p><p><b>（ps：第二章字数有点多，希望大家慢慢消化，不要着急，有问题可以私信我，祝武运昌盛）</b></p>