<div class="title-image"><img src="https://pic4.zhimg.com/v2-e360959d44a6a8c3c10d1f05da43db49_b.jpg" alt=""></div><h2>演讲视频简介</h2><p>新年新气象，欠的账也要还了… 2019年有知友私信给我，希望能把2012年BIU冬令营格密码学讲座（<a href="https://link.zhihu.com/?target=http%3A//cyber.biu.ac.il/event/the-2nd-biu-winter-school/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">cyber.biu.ac.il/event/t</span><span class="invisible">he-2nd-biu-winter-school/</span><span class="ellipsis"></span></a>）的视频重新整理后发出。，这都到2020年了，终于有点时间重新整理这些视频了。在整理的过程中，我也发现了当时翻译中的很多错误，可能也代表自己对格密码学有了更进一步（虽然是很小的一步）的理解吧…</p><p>之前的视频由 <a class="member_mention" href="https://www.zhihu.com/people/dd331d75c50e28dd9e719ba2c6a0594a" data-hash="dd331d75c50e28dd9e719ba2c6a0594a" data-hovercard="p$b$dd331d75c50e28dd9e719ba2c6a0594a">@Scalers</a> 听译狂练小组的成员们一起来完成的，在此再次向他们表示感谢，相应参与人员的信息仍然保留在字幕中。此次字幕的整理工作得到了BIU冬令营组织者Benny Pinkas教授的大力支持，字幕文件和内容将会全部公开。最近，格密码学迎来了又一轮快速的发展，期望这一系列讲座能帮助密码学研究者们对格密码学有大致的了解。当然了，如果翻译中存在问题和错误，欢迎在评论区指正。我将一一修复错误，并随时更新视频。</p><p>2012年BIU冬令营格密码学讲座中，Learning With Errors假设的提出者Oded Regev打了个头炮，通过《Introduction to Lattice》的讲座为冬令营的参与者们介绍了格的基本概念和基本性质。由于这个讲座有两个多小时长，我们把此讲座分为三个部分分别上传。</p><h2>演讲视频信息</h2><ul><li>讲义链接：<a href="https://link.zhihu.com/?target=http%3A//cyber.biu.ac.il/wp-content/uploads/2017/01/slides-barilan1-2.pdf" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">cyber.biu.ac.il/wp-cont</span><span class="invisible">ent/uploads/2017/01/slides-barilan1-2.pdf</span><span class="ellipsis"></span></a></li><li>视频链接：<a href="https://link.zhihu.com/?target=http%3A//www.youtube.com/watch%3Fv%3D4ulHOV8iLls%26feature%3Dplcp" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">youtube.com/watch?</span><span class="invisible">v=4ulHOV8iLls&amp;feature=plcp</span><span class="ellipsis"></span></a></li><li>中文视频：<a href="https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/av81642862/" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">bilibili.com/video/av81</span><span class="invisible">642862/</span><span class="ellipsis"></span></a></li><li>双语字幕：<a href="https://link.zhihu.com/?target=https%3A//github.com/liuweiran900217/SecurityConferenceLectures/tree/master/Winter%2520School%2520on%2520Cryptography%25202012%2520-%2520Lattice-Based%2520Cryptography/01-Introduction%2520to%2520Lattices" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/liuweiran900</span><span class="invisible">217/SecurityConferenceLectures/tree/master/Winter%20School%20on%20Cryptography%202012%20-%20Lattice-Based%20Cryptography/01-Introduction%20to%20Lattices</span><span class="ellipsis"></span></a></li></ul><h2>中文字幕视频</h2><a class="video-box" href="https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1195763785770782720" target="_blank" data-video-id="" data-video-playable="true" data-name="" data-poster="https://pic3.zhimg.com/v2-47daab4796cabb07e6c02fcf64fc8632.jpg" data-lens-id="1195763785770782720"><img class="thumbnail" src="https://pic3.zhimg.com/v2-47daab4796cabb07e6c02fcf64fc8632.jpg"/><span class="content"><span class="title"><span class="z-ico-extern-gray"></span><span class="z-ico-extern-blue"></span></span><span class="url"><span class="z-ico-video"></span>https://www.zhihu.com/video/1195763785770782720</span></span></a><h2>演讲视频字幕</h2><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-006ecba481ad4361e23ba21ad44bf0e5_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic2.zhimg.com/v2-006ecba481ad4361e23ba21ad44bf0e5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-006ecba481ad4361e23ba21ad44bf0e5_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic2.zhimg.com/v2-006ecba481ad4361e23ba21ad44bf0e5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-006ecba481ad4361e23ba21ad44bf0e5_b.jpg"/></figure><p>早上好，感谢主办方的邀请，感谢主办方为此次活动提供的大力支持。我估计随着讲座的进行，大家可能会更感谢演讲的老师们。总之非常感谢。</p><p>我们今天早上以什么为开场呢？我将从学术的角度为大家讲一讲这一领域的历史进程，有关格的简短介绍。后面大家可以看到，我们的讲座速度非常快，而且讲座的内容比较深入。所以，我认为第一个讲座应该是以“简介”为主题，希望大家都能够理解格是什么。如果有问题，大家随时可以打断我。好像很多朋友是从很远的地方过来听讲座的，有来自美国的，来自加拿大的，所以如果你觉得要睡着了，就告诉同桌把你叫起来。不过我会试着讲得有意思些，这样大家都不会睡着。但是从这些时区来的朋友们，让大家不睡着可能有点困难。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-298c7eb03e542335b7687c901222feff_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic4.zhimg.com/v2-298c7eb03e542335b7687c901222feff_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-298c7eb03e542335b7687c901222feff_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic4.zhimg.com/v2-298c7eb03e542335b7687c901222feff_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-298c7eb03e542335b7687c901222feff_b.jpg"/></figure><p>这个冬令营的主题是什么？主题是格和格在密码学中的应用。我们先来讲一讲格是什么。我想大家要首先了解的是格是什么？可能有些朋友根本没有听说过这个名词。这里有一个例子。这是在某个区域里有规律的图形，这就是格。这其实是卷心菜，不过表示的是同一个东西。它们都按照某种模式而规律排布，这种规律排布卷心菜的方式就是格，这个例子也一样，所以我们有两种表示方法了，卷心菜或者格。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-e51fa99a179af2f44f3a37be8c60cc80_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic1.zhimg.com/v2-e51fa99a179af2f44f3a37be8c60cc80_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-e51fa99a179af2f44f3a37be8c60cc80_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-e51fa99a179af2f44f3a37be8c60cc80_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-e51fa99a179af2f44f3a37be8c60cc80_b.jpg"/></figure><p>这更像是格了。什么是格？格是高维空间中的点集。这是一个3维空间，且点的排布呈周期性规律。这是3维空间格的一个例子，但这实际上不能称之为格，因为这里点的数量并不是无穷多的，不过这个图能把格的意思表达出来。我这里不会详细讲解格的定义，我们会在讲座的第二个小时详细讲解，这里只是给大家一个概念。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-682254b3f7a96df843964d49b283c1bf_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic4.zhimg.com/v2-682254b3f7a96df843964d49b283c1bf_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-682254b3f7a96df843964d49b283c1bf_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic4.zhimg.com/v2-682254b3f7a96df843964d49b283c1bf_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-682254b3f7a96df843964d49b283c1bf_b.jpg"/></figure><p>格可以形式化地定义为这样的形式，格是按照这种方式定义的点集。我们在 <img src="https://www.zhihu.com/equation?tex=%5Cmathbb%7BR%7D%5En" alt="\mathbb{R}^n" eeimg="1"/> 中选择 <img src="https://www.zhihu.com/equation?tex=n" alt="n" eeimg="1"/> 个线性无关的向量，然后我们选取这些向量的全部整数组合而构成的点集。</p><p>幻灯片上是一个格的例子。我选择了 <img src="https://www.zhihu.com/equation?tex=v_1" alt="v_1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=v_2" alt="v_2" eeimg="1"/> ，这是两个向量，然后我选取它们的全部整数组合。举例来说，我们有 <img src="https://www.zhihu.com/equation?tex=2v_2" alt="2v_2" eeimg="1"/> ， <img src="https://www.zhihu.com/equation?tex=v_1%2Bv_2" alt="v_1+v_2" eeimg="1"/> ， <img src="https://www.zhihu.com/equation?tex=2v_1" alt="2v_1" eeimg="1"/> 。我们也可以选择负数，比如 <img src="https://www.zhihu.com/equation?tex=-v_2" alt="-v_2" eeimg="1"/> ，这个点没在图里面。但实际上，点集会遍布整个空间，遍布所有方向。很显然， <img src="https://www.zhihu.com/equation?tex=%280%2C0%29" alt="(0,0)" eeimg="1"/> 这个0点永远包含在格点中。我想大家可以从图中对格有个直观感觉了，这些都是这两个向量的整数组合，所形成的点集有点像网格，我们把这称为格。</p><p>有些人会把这两个点称为基。点集 <img src="https://www.zhihu.com/equation?tex=v_1%2Cv_2%2C%E2%80%A6%2Cv_n" alt="v_1,v_2,…,v_n" eeimg="1"/> 是 <img src="https://www.zhihu.com/equation?tex=L" alt="L" eeimg="1"/> 的基。这个定义很像向量的线性生成空间，只不过我们这里只选取整数组合。我们通过这种方式得到了规律点集的形式化描述。在第一个小时我不会讲的特别深入。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-43fac4259918dd2f14a236c0dfba06eb_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic4.zhimg.com/v2-43fac4259918dd2f14a236c0dfba06eb_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-43fac4259918dd2f14a236c0dfba06eb_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic4.zhimg.com/v2-43fac4259918dd2f14a236c0dfba06eb_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-43fac4259918dd2f14a236c0dfba06eb_b.jpg"/></figure><p>我们来讲一讲为什么格在密码学中有如此重要的地位。 举例来说，我们选择这两个向量，这样更形象些。我们选择这两个向量， <img src="https://www.zhihu.com/equation?tex=v_1" alt="v_1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=v_2" alt="v_2" eeimg="1"/> ，然后想一想这两个向量生成的格是什么。一眼看上去，你可能会觉得 <img src="https://www.zhihu.com/equation?tex=v_1%2Bv_2" alt="v_1+v_2" eeimg="1"/> 是一个特别长的向量，和原点离得很远，所生成格的形状可能很奇怪。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-eed89efda031087413d514c231918860_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic1.zhimg.com/v2-eed89efda031087413d514c231918860_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-eed89efda031087413d514c231918860_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-eed89efda031087413d514c231918860_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-eed89efda031087413d514c231918860_b.jpg"/></figure><p>但实际上如果你仔细思考一下的话，就会发现这才是所生成的格。对比开始时想象的结果，你可能会觉得很惊奇，所生成的格点可以离原点这么近。但实际上向量是可以相减的，你可以计算 <img src="https://www.zhihu.com/equation?tex=3v_2-4v_1" alt="3v_2-4v_1" eeimg="1"/> ，你就会得到这个和原点距离非常近的点，这就是格之所以如此有用的一个原因，因为即使基向量很长，格点和原点距离也可能非常近。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-05f0f096c96e65684d502844835969a0_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic1.zhimg.com/v2-05f0f096c96e65684d502844835969a0_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-05f0f096c96e65684d502844835969a0_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-05f0f096c96e65684d502844835969a0_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-05f0f096c96e65684d502844835969a0_b.jpg"/></figure><p>我想给大家讲解的是，格的基向量并不是唯一的，这是格的另一个性质。 <img src="https://www.zhihu.com/equation?tex=v_1%27" alt="v_1&#39;" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=v_2%27" alt="v_2&#39;" eeimg="1"/> 这两个向量也是同样一个格的基。这在密码学中有很重要的作用，大家在后面也能看到，我们可以试着用格基隐藏格原本的结构特性。我可以不给你 <img src="https://www.zhihu.com/equation?tex=v_1%27" alt="v_1&#39;" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=v_2%27+" alt="v_2&#39; " eeimg="1"/> ，只给你 <img src="https://www.zhihu.com/equation?tex=v_1" alt="v_1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=v_2+" alt="v_2 " eeimg="1"/> 。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-858c2f2309e9b0d99fd63b279a8c0a13_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic4.zhimg.com/v2-858c2f2309e9b0d99fd63b279a8c0a13_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-858c2f2309e9b0d99fd63b279a8c0a13_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic4.zhimg.com/v2-858c2f2309e9b0d99fd63b279a8c0a13_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-858c2f2309e9b0d99fd63b279a8c0a13_b.jpg"/></figure><p>来看看格的历史。这里是研究格的数学家先驱们。照片上他们看起来好像很不开心，我也不知道为什么。最近数学家的照片看起来会开心些，可能是因为格理论有了些进展。</p><p>历史上，在19世纪早期，人们主要是从数论的角度、从数学角度研究格。人们关注格的数论方面性质，而不是格的应用。1801年高斯开始研究格，然后是Hermit、Minkowski。我认为Minkowski在格的研究方面做出了突出的贡献，甚至今天大家都可以学习到Minkowski的研究成果了，也就是Minkowski定理。他们当时关注的是不同的问题，并没有关注密码学应用，但这个定理直到现在都有重要的应用价值，所以Gauss、Hermite和Minkowski，他们是格领域主要的数学家们，我们今天会看到他们的一些成果。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-c743342f25d5b270c1a3c36780d01ed8_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic1.zhimg.com/v2-c743342f25d5b270c1a3c36780d01ed8_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-c743342f25d5b270c1a3c36780d01ed8_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-c743342f25d5b270c1a3c36780d01ed8_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-c743342f25d5b270c1a3c36780d01ed8_b.jpg"/></figure><p>近期，在20世纪，我们会看到新一代的数学家们给出了新的研究成果。近期学者们提出了一个非常重要的研究成果，我认为每个人都应该学习这个成果，这个成果叫LLL算法、3L算法、或者叫L立方算法，是Lenstral、Lenstral和Louvasz提出的。</p><p>这是他们三个的照片。他们三个看起来开心点了。不知道大家看不看得出来，照片里好像挺冷的，但是他们还是挺开心。我也不知道他们谁是谁，但这确实是1982年的照片，照片中的三个人分别是两个Lenstras和Louvasz，他们在一起研究这个算法时拍摄的。</p><p>这个算法的结果非常令人惊异。如果你以前从来都不知道这个算法也没关系，明天每个人都会学习到这个算法。Vadim会为大家讲解这个算法。这个算法非常令人惊异。这个算法最开始用于寻找格中的近似最短向量，当然我们现在也会这么用，我们后面会看到近似最短向量是什么意思。本质上说，这个算法可以用来寻找离原点比较近的一个格向量。</p><p>但实际上，这个算法最初被用于在实数域分解多项式，以及在固定维度下解决整数规划问题，这是Lenstra在后面的论文中提出的。这个算法在整数分解问题上具有重要应用价值。什么叫在实数域分解多项式呢？就是把一个多项式分解为低阶的多项式，并且是在实数上进行分解。</p><p>另一个应用领域是下面这个，我们现在也可以在类似Maple的数学工具中做这样的运算。假设我们计算得到了一个数，经过了很长时间的计算，你最后得到了一个数：6.73205…你估计会觉得这可能是个很特殊的数，可能是某个数的平方根，或者是某个数的立方根。大家觉得呢？这个数是不是看起来挺熟悉的？实际上这是个非常简单的例子，大家可能知道结果是什么。这个数等于 <img src="https://www.zhihu.com/equation?tex=%5Csqrt%7B3%7D%2B5+" alt="\sqrt{3}+5 " eeimg="1"/> 。这是个非常简单的例子，我们可以使用LLL算法来实现这样的功能。实际上我们可以在任意数上做这样的操作。你只需要输入一个数，算法就会告诉你它可能是哪些数运算得来的。上周我就一直在做计算，并最后得到了一个非常复杂的数，但后来我发现这个数实际上等于 <img src="https://www.zhihu.com/equation?tex=%5Csqrt%7B5%7D%2B4+" alt="\sqrt{5}+4 " eeimg="1"/> ，结果挺让人开心的。这就是LLL算法的另一个重要应用。大家可能想知道这是怎么做到的，不过我们现在要看看其他的内容了。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-86d433c493c9726c7017ef9810d90197_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic4.zhimg.com/v2-86d433c493c9726c7017ef9810d90197_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-86d433c493c9726c7017ef9810d90197_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic4.zhimg.com/v2-86d433c493c9726c7017ef9810d90197_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-86d433c493c9726c7017ef9810d90197_b.jpg"/></figure><p>继续往下，这是一些历史知识。这是1982年的事情。最近，学者们意识到格在密码学中有重要的应用价值，这也是我们冬令营的主题。当开始讨论密码学时，大家时差综合症就要犯了，因为有点理论…</p><p>什么是密码学？密码学是一个很大的领域。我认为密码学对于电子商务很重要…密码学被用在生活中的方方面面，比如信用卡、护照、手机、互联网等等。密码学的重要程度不用我过多强调了吧？</p><p>绝大多数系统都是基于RSA密码学系统的。这是Rivest、Shamir、Adleman在1977年提出的，他们发明了这个密码学系统。我们一直还在使用这样的密码学系统。基于格的密码学系统从某方面讲，将成为密码学系统的另一种选择。我们将在接下来的4天时间里让大家了解到这一点。格密码学有成为另一种选择的潜力，也是一个好的备选方案，我们将在接下来的4天时间里为大家讲解这一观点，希望大家能认同这一观点。很显然，有很多理由支持我们转入基于格的密码学系统。这就是RSA密码学系统，我后面还会提到。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-54c17f89ac4ee9a1df78cf3b80531726_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic3.zhimg.com/v2-54c17f89ac4ee9a1df78cf3b80531726_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-54c17f89ac4ee9a1df78cf3b80531726_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic3.zhimg.com/v2-54c17f89ac4ee9a1df78cf3b80531726_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-54c17f89ac4ee9a1df78cf3b80531726_b.jpg"/></figure><p>如果我没记错的话，密码学和格第一次牵手是在LLL算法提出没多久以后。人们想，我们现在有密码学算法了，也有LLL算法了，我们可以做一些很棒的事情，没准我们可以用LLL算法破解密码学方案，或者用于对密码学方案进行分析。实际上，即使现在，密码分析学也是LLL算法的一个重要应用领域。它可以作为一个密码分析学算法，用于破解密码学方案，给出方案应用方法的建议。举例来说，LLL算法可以破解基于背包问题的密码学系统。这是Lagarias和Odlyzko在1985年提出的。最近，LLL算法可以破解RSA的变种方案。Blömer做出了杰出的工作，还有Hastad和Coppersmith。如果你在特定的配置环境下使用RSA算法，则可证明应用LLL算法可以破解RSA。这是一个非常棒的研究成果。这个领域也有很多分支。我今天并不会过多讲解这方面的内容，估计在后面Vidim会讲解，这的确是一个很棒的成果。</p><p>在冬令营中我要讲解的内容更正能量一些，我们要讲解如何构造密码学方案，如何应用格来构造密码学方案。学者们在20世纪90年代中期意识到了这一点。1996年Ajtai首先进行了尝试，这个想法非常令人惊奇，是突破性的想法。这就是冬令营的主题，如何使用格代数结构，使用格计算问题构造密码学方案。如何构造公钥密码学方案，或者构造其他密码学函数，构造很多其它的密码学方案。这是1996年开创的领域，Ajtai首先进行了尝试。</p><p>为什么我们关心这个领域呢？为什么我们要用格来构造密码学方案呢？这是我在第一小时的简介中要为大家介绍的内容。事实证明，格密码学有很多整数分解或者离散对数等传统假设不具有的特性。</p><p>格的安全性更高。我们现在在考虑数学证明，但是首先我们要注意，我们不能证明所有的方案都是安全的，无法证明基于一系列NP问题构造的密码学方案就一定是安全的。但我们可以证明，这些密码学方案的安全性与其他一些问题是等价的，方案安全性与格的特定困难问题等价，而且我们相信这些困难问题确实很难。在后面几页幻灯片中我会讲到这一点。</p><p>另一个很棒的特性是，格密码学方案可以抵御量子计算机的攻击。现在可能绝大多数人已经知道，量子计算机可以解决整数分解问题，量子计算机可以解决离散对数问题，可以整数分解，量子计算机可以破解密码学方案。量子计算机还可以做很多其他的事情。我想说的是，其他可以抵御量子计算机攻击的候选算法中，格密码学可以排在很高的地位，可能可以排在最高的地位。这也是为什么我们要研究它的一个原因。我们现在还没有量子计算机，这仍然是未来才可能出现的东西，科学家们仍然在尝试构造量子计算机。但如果你想构造一个10年内安全的密码学方案，你应该需要开始担心量子计算机了。我们知道，我们可能在10至12年之内将得到量子计算机，所以我们需要担心这一点。对于我们现在发送的一些数据，我们至少需要在10年内保证加密的安全性，所以我们现在就应该开始担心量子计算机的诞生了。这很严峻，因为我们没有太多的备选密码学方案。如果你了解量子计算机的最新研究进展情况的话，你会知道我们没有太多的备选方案，但是我们又不得不依靠密码学来实现一些功能。我们需要使用密码学来在网上使用我们的信用卡，使用网上银行什么的，所以我们需要一些备选密码学方案。而格密码学是抵御量子计算机攻击的备选密码学方案。</p><p>我在后面会提到格密码学的另一个优点。在某些情况下，格密码学的运算速度比较快，并且格密码学可以提供更多的功能。这是近几年才提出的成果，我在后面几页幻灯片中会讲到。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-0939b22c763e84fc6b1bdfcc8f965601_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic2.zhimg.com/v2-0939b22c763e84fc6b1bdfcc8f965601_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-0939b22c763e84fc6b1bdfcc8f965601_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic2.zhimg.com/v2-0939b22c763e84fc6b1bdfcc8f965601_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-0939b22c763e84fc6b1bdfcc8f965601_b.jpg"/></figure><p>我们大致讲了讲为什么我们要研究格密码学。现在，我们尝试高屋建瓴地看看，如何使用格构造密码学方案。为什么格可以用来构造密码学方案？简单来说。假定我们有这样一个格、我们一般使用高维格，不是这种格。这是个2维格，我们一般使用更高维度的格，比如500维的格。基本思想是，如果我们随机选择一个格点，比如这个点，然后我进行扰乱，把点移动到这里。我选择了一个格点，把它往下移动了一些。现在，从计算角度很难得知这个点是否从这个格点移动来的，很难得知这个点是从哪个格点移动来的。在2维格中，这个问题看起来比较简单，但如果是500维格的话，我们可以沿着很多方向移动，向上、向下…在高维中我们可以有很多移动方向，这就是格问题困难度的来源。</p><p>实话实说，大家在后面的几个讲座中可能看不到这些困难问题，因为现在这些困难问题都被进一步封装，使得其可以更好地应用于密码学方案中，比如SIS问题、LWE问题。后面的几个讲座中大家可以学习到，实际构造时可能用不到这个问题，不过这是格密码学构造的基本思想。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-891307cf4f14c5b5b742cd74a70f2db9_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic2.zhimg.com/v2-891307cf4f14c5b5b742cd74a70f2db9_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-891307cf4f14c5b5b742cd74a70f2db9_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic2.zhimg.com/v2-891307cf4f14c5b5b742cd74a70f2db9_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-891307cf4f14c5b5b742cd74a70f2db9_b.jpg"/></figure><p>我们来更深入的讲一讲，格密码学有什么优点？我前面说到，第一个优点是可证明安全。现在，我们在构造密码学方案时一般会伴随一个特定的安全性证明。这个安全性证明指出，如果你能破解密码学方案，如果你能破解公钥加密的私钥，或者可以对单向函数求逆，即使破解的概率非常低，几乎可以忽略，也会发生很奇特的事情。如果能破解密码学方案，你也就可以解决格中的困难问题了。这非常好，这实际上告诉我们在构造密码学方案时，我们没有漏掉一些构造细节，我们没有留下安全缺口或者脆弱性漏洞。我们可以证明如果方案被破解了，就会发生奇特的事情，这非常好。在传统密码学中，我们不一定能得到安全性证明。有些时候我们能证明安全性，但是即使RSA系统，我们不知道是不是破解RSA一定意味着可以解决整数分解问题。有的密码学方案具备这样的特性，并不是所有的密码学方案都有这个特性。但在格密码学中，最近10年左右的方案构造都可以得到安全性证明。这就是第一个优点了。</p><p>格密码学与传统密码学的第二个对比点是，格密码学所得到的安全性更高。这一点我会在下一页幻灯片中详细讲解。这个优点非常好，叫做最糟糕困难安全性。这是格中所独有的优点，在其他代数结构中似乎都没有这个优点。这是个非常棒的优点，我会在下面两页幻灯片中详细讲解。这个优点的意思是，如果你可以破解密码学算法，那么你就可以解决最糟糕情况困难问题，你可以对任意格解决一个困难问题。在下一页幻灯片中我还会提到，传统密码学是没有这个特点的，传统密码学的安全性一般基于平均情况困难问题。下一页幻灯片中我会讲解这一特性的重要性。这是一个非常棒的优点，这也是为什么Ajtai在20世纪90年代中期的工作得到了这么广泛的关注。这是一个新的思想，是一个新的特性。这个特性很奇特。这个优点中可能包含一些我自己的主观判断，对我来说这是格密码学的一个优点。与整数分解相比，这是一个相对较新的困难问题。如果把数学家的工作考虑进来的话，这个困难问题已经有200年的历史了，但在计算机科学领域，这个困难问题只有30年的历史，是个新提出的困难问题。</p><p>另一个优点是格困难问题不能被量子算法解决。我们对这个困难问题很有信心，这确实是一个很困难的问题，我们可以基于它构造密码学方案。到现在为止，量子算法还不能解决这些困难问题。当然我不知道是不是一定不能解决，寻找解决格困难问题的量子算法是个很重要的公开问题。学者们已经寻找了15年，到现在为止还是没有能解决格困难问题。所以可能格问题确实很困难，可能即使在量子算法下，格问题仍然很困难。</p><p>我还要提到的一个优点是，如果使用基于整数分解的密码学系统，此类方案经常要进行乘法、指数运算，这类运算的计算开销对于笔记本来说并不大。但对于小型设备，比如智能卡，乘法和指数运算这类运算的计算开销就比较大了。对于格密码学来说，很棒的一个特性是，格密码学的计算开销很小，只是进行一系列加法运算。特别是最近几年，学者们提出了很多非常高效的格密码学方案。这实在是令人惊讶，不需要做太多运算，只是一系列加法运算就能实现密码学方案。所以即使从效率的角度考虑，格密码学也具有巨大的优势。</p><p>最后一个优点是我的同事Vadim、Chris和Craig发现的。我们可以用格实现其他令人惊讶的密码学功能，比如全同态加密。Craig会在周二和周三为大家讲解全同态加密。这是一个开创性的工作成果，我们可以用格实现传统密码学无法实现的全同态加密。此方案的设想是在20世纪90年代中期提出的，没人能想到这竟然可以实现，没人能想到我们可以利用格实现实现整数分解无法实现的一些密码学特性。以前学者们一直认为整数分解这类数论假设是最强的一类假设，但实际上格也可以实现很多功能。随着冬令营的进行，希望大家可以逐渐认同学习格密码学是很有价值的事情。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-7941b17ed321da6c196094e4ce37139d_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic2.zhimg.com/v2-7941b17ed321da6c196094e4ce37139d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-7941b17ed321da6c196094e4ce37139d_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic2.zhimg.com/v2-7941b17ed321da6c196094e4ce37139d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-7941b17ed321da6c196094e4ce37139d_b.jpg"/></figure><p>我们来深入讲解一下这些特点。第一点是可证明安全性。正如我前面提到的，我们不能证明某些方案是绝对安全的，没人可以证明如果P等于NP，那么所有方案都可以被破解。那可证明安全又是什么呢？可证明安全将密码学构造与一些我们认为可信的结论联系在了一起。可证明安全是一种归约算法，它将密码学方案的安全性归约到一个困难问题上。这个困难问题不是一大早你拍脑袋想出来的，而是一个新的、已确定困难的问题。我们把一系列密码学函数归约到这类困难问题上，这就是安全证明。我们希望利用安全证明来讨论方案的安全性。我后面可能就会提到，在很多情况下，安全性证明很有用，它告诉我们应该如何使用一个密码学方案。我后面还会提到这一点，安全性证明会告诉我们不要做哪些蠢事，它告诉我们如果可以破解密码学方案，如果存在一个攻击者以某个小概率破解密码学方案，就会发生一些奇特的事情，也就是我们的困难问题不再困难了，整个假设都被破解了。不光是你构造的算法不再安全，所有依赖于这一困难问题的密码学构造都不安全了。这是个非常好的结论，我们总希望能得到这样的结论。我们并不是经常能得到这样的结论，但格密码学可以得到更强的安全性结论。</p><p>这是个非常好的特性，安全性证明会告诉我们所构造的方案没什么问题。如果你有一些疯狂的想法，想要去构造密码学方案，首先你需要得到安全性证明，能把所构造的方案与一个困难问题联系到一起，你就会知道你的想法是正确的。可能你忘记了加什么东西，因为不加或者不做某个运算，方案可能不安全，但是如果有安全证明的话，这种事情就不会发生。</p><p>我们在周二会看到一个例子，方案并没有安全性证明，人们认为这个方案是安全的。人们构造了一个密码学方案，很长一段时间人们都认为它没什么问题，但实际上这个方案并没有和某个已确定困难的问题联系到一起。随后人们发现这方案有问题。我们会在后面提到这样的例子。另一个很棒的地方是，我后面可能会提到，我估计Chris在今天他的讲座中也会提到，安全性证明可以告诉我们如何选择方案的参数。这也和下面的一个特性相关。你有了一个密码学方案，但里面涉及一些参数，比如某些特定的数要大于其他数。大多数情况下，你可能不知道如何选取这些参数。但如果有安全性证明的话，它就会告诉你，如果安全性证明能通过，则 <img src="https://www.zhihu.com/equation?tex=m%3En%5E2+" alt="m&gt;n^2 " eeimg="1"/> ，所以你在使用方案的时候，会把 <img src="https://www.zhihu.com/equation?tex=m" alt="m" eeimg="1"/> 选为大于 <img src="https://www.zhihu.com/equation?tex=n%5E2" alt="n^2" eeimg="1"/> 的数，这样安全性证明才能过得去。</p><p>密码学历史中也发生过这样的事情，Chris可能也会提到。我们证明了一个方案是安全的，安全性证明告诉我们，一部分参数要大于 <img src="https://www.zhihu.com/equation?tex=n%5E2+" alt="n^2 " eeimg="1"/> 。我们不知道为什么，但我们会说，用的时候就让这些参数大于 <img src="https://www.zhihu.com/equation?tex=n%5E2" alt="n^2" eeimg="1"/> 吧。那个时候我们还不知道为什么。但是5年以后，学者们提出了另一个算法。这个算法指出，如果这些参数小于 <img src="https://www.zhihu.com/equation?tex=n%5E2+" alt="n^2 " eeimg="1"/> ，我们可以在次指数时间内破解密码学方案。我估计Chris在今天他的讲座中也会提到这一点。大家可以看到安全性证明的威力了，它会告诉我们怎么做才是正确的，它会告诉我们是否走在了正确的道路上。</p><p>我来举个例子，来看看安全性证明大概是个什么样子。这也会涉及到下面一个优点，也就是最糟糕情况、平均情况困难性这个优点上。这是个很简单的例子，是一个基于模平方的单向函数，这只是给大家解释下基本思想。假设你希望构造这样一个单向函数，这个单向函数是将输入值求平方，输入值为 <img src="https://www.zhihu.com/equation?tex=x+" alt="x " eeimg="1"/> ，输出为 <img src="https://www.zhihu.com/equation?tex=x%5E2+" alt="x^2 " eeimg="1"/> ，我们就用它了。令 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 为两个大质数的乘积，我不知道如何选择参数 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，后面几分钟我就会提到怎么选择参数 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 了。现在就选择某个 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，这个 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 是两个大质数的乘积。现在考虑这个函数，求 <img src="https://www.zhihu.com/equation?tex=x%5E2" alt="x^2" eeimg="1"/> 模 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> 。</p><p>在习题中，我会让大家试着证明，如果想求这个函数的逆函数，也就是给定 <img src="https://www.zhihu.com/equation?tex=x%5E2+" alt="x^2 " eeimg="1"/> ，其中 <img src="https://www.zhihu.com/equation?tex=x" alt="x" eeimg="1"/> 是随机选取的，找到任意一个 <img src="https://www.zhihu.com/equation?tex=x%27+" alt="x&#39; " eeimg="1"/> ，使得 <img src="https://www.zhihu.com/equation?tex=x%27%5E2%3Dx%5E2+" alt="x&#39;^2=x^2 " eeimg="1"/> 。在习题中我们可以很容易证明，如果可以找到原像，你就可以分解整数 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> 。这就是安全性证明的一个例子，它证明了如果你可以求逆函数，那么你就有更高的概率，可能有1%的概率，或者某个不能用代数式表示的概率下，你可以分解 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> 。如果你不知道如何证明，或者没见过这个单向函数，试着想一想，我们实际上就是在证明这个单向函数的安全性。我们现在有了安全性证明，这很好，它证明了这个单向函数的安全性与整数分解相关，这是个挺不错的单向函数。但是这引入了另一个问题，这个函数，这个安全性证明叫做平均情况困难证明，基于平均情况困难性。基于平均情况困难性的原因是，我们没告诉你怎么选择 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> 。你会问我如何选择 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，我会告诉你 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 等于两个大质数的乘积，我们还需要知道其他一些限制条件吗？大质数本身是不是要满足一些性质？是不是有所谓好的质数和不好的质数？这好像不那么显然，可能没有什么直观的结论。这实际上是一个很严重的问题，一个大问题，这引发了下面的问题，也就是我们如何选择 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> 。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-195f7a2c1d8df019eef7856b8d9182a5_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic2.zhimg.com/v2-195f7a2c1d8df019eef7856b8d9182a5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-195f7a2c1d8df019eef7856b8d9182a5_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic2.zhimg.com/v2-195f7a2c1d8df019eef7856b8d9182a5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-195f7a2c1d8df019eef7856b8d9182a5_b.jpg"/></figure><p>我们在RSA下看看这个问题。你想用代码实现一个RSA，如何选择参数模 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> ？如果你上过这方面的课程，你会知道 <img src="https://www.zhihu.com/equation?tex=+N" alt=" N" eeimg="1"/> 不能是个偶数，偶数 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 不是个好选择。所以你估计会选择两个大质数，然后把它们乘起来。教科书上一般就讲到这里，但有可能某些质数比其他质数好？大家觉得呢？你觉得什么质数算是个好质数？安全质数？还有什么答案吗？</p><p>这是个好问题，我们其实不知道这个问题的答案是什么。让我来告诉你历史上发生了什么事情。1978年，学者们开始研究整数分解算法了。那时候RSA出现了，人们意识到整数分解是一个重要问题，试着寻找整数分解算法。1978年，学者们发现存在一个高效的算法分解整数，前提是 <img src="https://www.zhihu.com/equation?tex=p-1" alt="p-1" eeimg="1"/> 或者 <img src="https://www.zhihu.com/equation?tex=q-1" alt="q-1" eeimg="1"/> 的最大质因子要比较小。所以人们说，如果你让RSA抵御这类攻击的话，你需要选择 <img src="https://www.zhihu.com/equation?tex=p" alt="p" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q+" alt="q " eeimg="1"/> ，使得 <img src="https://www.zhihu.com/equation?tex=p-1" alt="p-1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q-1" alt="q-1" eeimg="1"/> 的最大质因子比较大，不能太小。于是在1978年，你在代码里面增加了一个检查机制，检查<img src="https://www.zhihu.com/equation?tex=p" alt="p" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q+" alt="q " eeimg="1"/>是不是满足条件。</p><p>接下来，1981年又出来另一篇论文，对于另一个特定情况又有了另一个算法， <img src="https://www.zhihu.com/equation?tex=p%2B1" alt="p+1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q%2B1" alt="q+1" eeimg="1"/> 需要有比较大的质因子。很好，你又增加了一行代码，保证<img src="https://www.zhihu.com/equation?tex=p" alt="p" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q+" alt="q " eeimg="1"/>也满足这样的条件。</p><p>又过了1年，又出来了一篇论文，如果 <img src="https://www.zhihu.com/equation?tex=p-1" alt="p-1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q-1" alt="q-1" eeimg="1"/> 的最大质因子是 <img src="https://www.zhihu.com/equation?tex=p%27" alt="p&#39;" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q%27+" alt="q&#39; " eeimg="1"/> ，那么 <img src="https://www.zhihu.com/equation?tex=p%27-1" alt="p&#39;-1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q%27-1" alt="q&#39;-1" eeimg="1"/> 也要有大的质因子。好的，你再检查下这个是否成立。</p><p>大家估计可以猜到接下来发生什么了吧？1984年，学者们发现如果 <img src="https://www.zhihu.com/equation?tex=p%2B1" alt="p+1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q%2B1" alt="q+1" eeimg="1"/> 的最大质因子是 <img src="https://www.zhihu.com/equation?tex=p%27" alt="p&#39;" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q%27+" alt="q&#39; " eeimg="1"/> ，则 <img src="https://www.zhihu.com/equation?tex=p%27-1" alt="p&#39;-1" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q%27-1" alt="q&#39;-1" eeimg="1"/> 也需要有比较大的质因子。大家估计没听说过有这么个历程，原因是我们现在有了更高效的大整数分解算法。我们发现了数筛法，所以现在这4个要求已经没这么重要了，我们已经有了更高效的整数分解算法，对于所有 <img src="https://www.zhihu.com/equation?tex=N%3Dp%5Ccdot+q" alt="N=p\cdot q" eeimg="1"/> 的形式，上面这4个算法的效率和数筛法效率差不多。可能对于不同的 <img src="https://www.zhihu.com/equation?tex=p%27" alt="p&#39;" eeimg="1"/> 和 <img src="https://www.zhihu.com/equation?tex=q%27+" alt="q&#39; " eeimg="1"/> ，整数分解的效率还是会有所不同，但是我想这不会意味着故事的结束。我不是一个数论专家，但我估计在接下来几年 学者们可能会提出更高效的算法。我相信我们要根据所提出的算法选择更为特殊的质数，这确实是一个问题。</p><p>为什么会有这样一个问题？问题出在安全性证明上面。安全证明称如果能破解RSA，并不意味着能分解所有的整数，只意味着能分解某个特定的整数，但不意味着能分解所有的整数，只能分解一个特定的 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，不是所有的 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> 。这就是所谓的平均情况困难性。所以如果你相信破解RSA或者破解其他基于整数分解问题的方案是困难的，你相信的是在平均情况下，整数分解是困难的。你需要相信的并不是所有整数分解都是困难的，只相信一部分整数分解是困难的。我们这里假设的是，可能有1%的数是容易分解的，这1%的RSA方案是可以破解的，但是在最糟糕情况下，整数分解还是困难的。所以可能我们对某些特定的数可以很快进行整数分解，但不是全部的数。这确实是一直困扰我们的一个问题。但格里面没有这样的问题，这是一个重要的核心优点，格困难问题是最糟糕情况困难问题。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-fe8a2f2b3ccd18255ed900abe919f0f5_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic2.zhimg.com/v2-fe8a2f2b3ccd18255ed900abe919f0f5_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-fe8a2f2b3ccd18255ed900abe919f0f5_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic2.zhimg.com/v2-fe8a2f2b3ccd18255ed900abe919f0f5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-fe8a2f2b3ccd18255ed900abe919f0f5_b.jpg"/></figure><p>我们从密码学函数的角度再理解一下。如果你基于平均情况困难性进行安全性证明，你得到的是类似于这样的映射关系。你选择了这个参数 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，右边你就得到了一个基于 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 的密码学函数。这有点像双射，有点像一对一映射。对于每个 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，你都证明了存在一个相同的 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 所对应的密码学函数。如果密码学函数被破解了，你就能分解这个 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，确实有点像一对一双射。如果你突然发现密码学方案被破解了，这就意味着1%的密码学方案也被破解了，你得到的只是 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 中1%的数可以被分解，不是能分解所有的数，只意味着能分解1%的数。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-cd023575d93ffe9142f02aa23246a519_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic2.zhimg.com/v2-cd023575d93ffe9142f02aa23246a519_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-cd023575d93ffe9142f02aa23246a519_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic2.zhimg.com/v2-cd023575d93ffe9142f02aa23246a519_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-cd023575d93ffe9142f02aa23246a519_b.jpg"/></figure><p>而在格中我们可以得到更好的结论，这就是所谓的最糟糕情况困难性。什么是最糟糕情况困难性？安全性归约，或者说安全证明更像是一个完全映射。在左边选择一个任意的格，把它映射到右边，它会映射到右边所有的密码学函数。这个映射关系非常令人惊讶。下一个讲座中 Vadim将为大家讲解这是如何做到的，很神奇。这就是最糟糕情况困难的主要思想。从某种程度上，你将任意一个格困难问题都映射到了密码学函数的整个空间里面。这非常令人惊奇，这也意味着，如果1%的密码学函数被破解了，则任意一个格问题实例都可以被解决。</p><p>从很多方面看，这都是一个很好的性质。首先，这使得安全性强度更高了，不光是安全性强度更高了，而且它也告诉我们，不需要担心如何选择参数 <img src="https://www.zhihu.com/equation?tex=N" alt="N" eeimg="1"/> 了，你不需要担心如何选择所涉及到的参数，只要按照某个分布选参数就可以了。安全证明会告诉你如何选取参数，你只要这么选就好了，不需要担心哪个是好的 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，哪个是不好的 <img src="https://www.zhihu.com/equation?tex=N+" alt="N " eeimg="1"/> ，安全性证明会告诉你如何正确选取参数的。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-19a0edbeef9352596ec98b376587fc48_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb" width="2880" data-original="https://pic1.zhimg.com/v2-19a0edbeef9352596ec98b376587fc48_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-19a0edbeef9352596ec98b376587fc48_b.jpg" data-caption="" data-size="normal" data-rawwidth="2880" data-rawheight="1800" class="origin_image zh-lightbox-thumb lazy" width="2880" data-original="https://pic1.zhimg.com/v2-19a0edbeef9352596ec98b376587fc48_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-19a0edbeef9352596ec98b376587fc48_b.jpg"/></figure><p>我这里要强调一下，这是格的简介讲座，这只是一个简单的介绍。在进入技术部分的讲解前，我们要再讲一讲历史。在最近15年中又发生了什么？正如我前面所说的，Ajtai和Ajtai-Dwork在1996年开创性地提出了格密码学。他们意识到我们可以做很多很棒的事情，我们可以使用格做很多很棒的事情。他们告诉我们如何实现单向函数，如何实现公钥密码学系统，但是他们只提出了一个概念指出这些是可以用格来实现的。他们也指出如何得到最糟糕情况安全性。但从性能方便考虑的话，他们构造的方案效率非常低。如果使用他们所提出的系统，密钥可能是GB级的，性能实在不太好，运算效率很低，很麻烦。我认为他们的构造更多地是从理论的角度考虑的。</p><p>但是，最近几年，格密码学有了翻天覆地的变化。现在我们已经得到了非常高效的格密码学方案，其效率甚至可以与RSA比拟。开始时方案看起来根本没法用，也没什么可扩展的能力，只能做公钥密码学系统，而且绝大多数公钥密码学系统的构造都很繁琐，仅获得选择明文安全性已经非常困难了，而且几乎没有任何可扩展性。随后Louis和Warick试着定义格密码学系统，延伸这个思想。最近几年，学者们集中研究格密码学的两个核心问题，这两个核心问题也是接下来两个讲座的主要内容。Vadim会讲到Short Integer Solution问题，Chris会讲到Learning With Errors问题。用这两个问题可以构造非常高效的密码学方案，非常高效的单向函数。而且这两个问题把格的一些内容抽象化了。当你设计格密码学系统的时候，你不需要去考虑最糟糕情况困难性的安全性证明，你只需要基于SIS、LWE这两个中间问题构造方案就可以了，有人已经帮你们把最困难的问题解决了，帮你们完成了最糟糕情况证明。你只需要选一个问题，用这个问题构造密码学系统就好了。当然这方面还有很多工作要做，但至少一部分工作已经完成了。这些将是后面两个讲座的主题。这就是近几年格密码学的研究主线。</p><p>同时，格密码学还有另一个研究主线。我想大家在周二的时候会学习到，Vadim会在周二的讲座中讲到，这个主线所构造的密码学方案非常高效。我不得不说，这类格密码学方案实在是太高效了，他们是基于特定格代数结构而构造的。这两个问题被称为Ring-LWE以及Ring-SIS。2002年Micciancio开创了这一领域。2006年Chris Peikert、Alon Rosen、Lyrubashevsky和Micciancio进行扩展，他们意识到如果不考虑一般格，只考虑循环格这种满足特定性质的格代数结构，就可以大幅度提高方案的效率，构造安全高效的密码学方案，而且所构造的密码学方案确实非常高效。我不会讲解太多这方面的内容，不过大家可以感受一下，密钥的长度是KB级的，而计算效率甚至可以和哈希函数的计算效率接近了。我想Vadim会在周二详细讲解这方面的内容。</p><p>这就是格的简介部分。在进入技术部分的讲解之前，大家准备好，很烧脑。</p>