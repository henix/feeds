<div class="title-image"><img src="https://pic2.zhimg.com/v2-89563ca0a4935c4fcf6548f6db708678_b.jpg" alt=""></div><p>作者：骆迪安</p><p>上一篇 《<a href="https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/tikv-source-code-reading-14/" class=" wrap external" target="_blank" rel="nofollow noreferrer">TiKV 源码解析系列文章（十四）Coprocessor 概览</a>》讲到了 TiDB 为了最大化利用分布式计算能力，会尽量将 Selection 算子、聚合算子等算子下推到 TiKV 节点上。本文将继续介绍 Coprocessor 中表达式计算框架的源码架构，带大家看看 SQL 中的表达式是如何在 Coprocessor 中执行的。</p><h2>什么是表达式</h2><p>比如说我们有这个 SQL 作为例子：</p><div class="highlight"><pre><code class="language-text">SELECT (count * price) AS sum FROM orders WHERE order_id &lt; 100</code></pre></div><p>其中 <code>order_id &lt; 10</code> 就是一个表达式，它有一个列输入参数： <code>order_id</code>，输出：<code>Bool</code>。</p><h2>RPN 表达式</h2><p>因为 TiDB 下推的是树状结构表达式，所以我们需要选择一种树的遍历方式， 这里 Coprocessor 选择了由下而上递推的 RPN（逆波兰表示法）。RPN 是树的后序遍历，后序遍历在每个节点知道自己有几个子节点的时候等价于原本的树结构。</p><p>比如说我们有一个数学算式 <code>2 *（3 + 4）+ 5</code>：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-ebfd0999c785e7231be8c45357d2923d_b.jpg" data-caption="" data-size="normal" data-rawwidth="520" data-rawheight="342" class="origin_image zh-lightbox-thumb" width="520" data-original="https://pic2.zhimg.com/v2-ebfd0999c785e7231be8c45357d2923d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-ebfd0999c785e7231be8c45357d2923d_b.jpg" data-caption="" data-size="normal" data-rawwidth="520" data-rawheight="342" class="origin_image zh-lightbox-thumb lazy" width="520" data-original="https://pic2.zhimg.com/v2-ebfd0999c785e7231be8c45357d2923d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-ebfd0999c785e7231be8c45357d2923d_b.jpg"/></figure><p>由于数学上习惯写法是中序遍历，我们通常要加上括号消除歧义（比如加减和乘除的顺序）。通过把操作符后移 我们得到 <code>RPN：2 3 4 + * 5 +</code>，这样我们无需括号就能无歧义地遍历这个表达式：</p><ol><li>执行 RPN 的过程需要一个栈来缓存中间结果，比如说对于 <code>2 3 4 + * 5 +</code>，我们从左到右遍历表达式，遇到值就压入栈中。直到 <code>+</code> 操作符，栈中已经压入了 <code>2 3 4</code>。<br/></li></ol><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-5d12cc0d964ec3ba94d9998156796287_b.jpg" data-caption="" data-size="normal" data-rawwidth="632" data-rawheight="251" class="origin_image zh-lightbox-thumb" width="632" data-original="https://pic4.zhimg.com/v2-5d12cc0d964ec3ba94d9998156796287_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-5d12cc0d964ec3ba94d9998156796287_b.jpg" data-caption="" data-size="normal" data-rawwidth="632" data-rawheight="251" class="origin_image zh-lightbox-thumb lazy" width="632" data-original="https://pic4.zhimg.com/v2-5d12cc0d964ec3ba94d9998156796287_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-5d12cc0d964ec3ba94d9998156796287_b.jpg"/></figure><p>2. 因为 <code>+</code> 是二元操作符，需要从栈中弹出两个值 <code>3 4</code>，结果为 <code>7</code>，重新压入栈中：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-70f43c903b26a39e9820c3f5d874d39d_b.jpg" data-caption="" data-size="normal" data-rawwidth="679" data-rawheight="135" class="origin_image zh-lightbox-thumb" width="679" data-original="https://pic2.zhimg.com/v2-70f43c903b26a39e9820c3f5d874d39d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-70f43c903b26a39e9820c3f5d874d39d_b.jpg" data-caption="" data-size="normal" data-rawwidth="679" data-rawheight="135" class="origin_image zh-lightbox-thumb lazy" width="679" data-original="https://pic2.zhimg.com/v2-70f43c903b26a39e9820c3f5d874d39d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-70f43c903b26a39e9820c3f5d874d39d_b.jpg"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-3934f561392f38b58b0b677027f160e8_b.jpg" data-caption="" data-size="normal" data-rawwidth="873" data-rawheight="173" class="origin_image zh-lightbox-thumb" width="873" data-original="https://pic1.zhimg.com/v2-3934f561392f38b58b0b677027f160e8_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-3934f561392f38b58b0b677027f160e8_b.jpg" data-caption="" data-size="normal" data-rawwidth="873" data-rawheight="173" class="origin_image zh-lightbox-thumb lazy" width="873" data-original="https://pic1.zhimg.com/v2-3934f561392f38b58b0b677027f160e8_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-3934f561392f38b58b0b677027f160e8_b.jpg"/></figure><p>3. 此时栈中的值为 <code>2 7</code>。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-c3156cc828bd24033b3da98fe22919fd_b.jpg" data-caption="" data-size="normal" data-rawwidth="570" data-rawheight="109" class="origin_image zh-lightbox-thumb" width="570" data-original="https://pic2.zhimg.com/v2-c3156cc828bd24033b3da98fe22919fd_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-c3156cc828bd24033b3da98fe22919fd_b.jpg" data-caption="" data-size="normal" data-rawwidth="570" data-rawheight="109" class="origin_image zh-lightbox-thumb lazy" width="570" data-original="https://pic2.zhimg.com/v2-c3156cc828bd24033b3da98fe22919fd_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-c3156cc828bd24033b3da98fe22919fd_b.jpg"/></figure><p>4. 下一个是 <code>*</code> 运算符，也需要弹出两个值 <code>2 7</code>，结果为 <code>14</code> 压入栈中。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-1441a6bfa7fb97b536ca8ef561816d4f_b.png" data-caption="" data-size="normal" data-rawwidth="685" data-rawheight="112" class="origin_image zh-lightbox-thumb" width="685" data-original="https://pic4.zhimg.com/v2-1441a6bfa7fb97b536ca8ef561816d4f_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-1441a6bfa7fb97b536ca8ef561816d4f_b.png" data-caption="" data-size="normal" data-rawwidth="685" data-rawheight="112" class="origin_image zh-lightbox-thumb lazy" width="685" data-original="https://pic4.zhimg.com/v2-1441a6bfa7fb97b536ca8ef561816d4f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-1441a6bfa7fb97b536ca8ef561816d4f_b.png"/></figure><p>5. 接着压入 <code>5</code> 。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-5e4a46d5e2f249ef5522a57757994d12_b.jpg" data-caption="" data-size="normal" data-rawwidth="585" data-rawheight="110" class="origin_image zh-lightbox-thumb" width="585" data-original="https://pic3.zhimg.com/v2-5e4a46d5e2f249ef5522a57757994d12_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-5e4a46d5e2f249ef5522a57757994d12_b.jpg" data-caption="" data-size="normal" data-rawwidth="585" data-rawheight="110" class="origin_image zh-lightbox-thumb lazy" width="585" data-original="https://pic3.zhimg.com/v2-5e4a46d5e2f249ef5522a57757994d12_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-5e4a46d5e2f249ef5522a57757994d12_b.jpg"/></figure><p>6. 最后 <code>+</code> 运算符弹出 <code>14 5</code>，结果为 <code>19</code>，压入栈。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-3b1aa28f2871f18ee52190f14234a15c_b.png" data-caption="" data-size="normal" data-rawwidth="670" data-rawheight="89" class="origin_image zh-lightbox-thumb" width="670" data-original="https://pic1.zhimg.com/v2-3b1aa28f2871f18ee52190f14234a15c_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-3b1aa28f2871f18ee52190f14234a15c_b.png" data-caption="" data-size="normal" data-rawwidth="670" data-rawheight="89" class="origin_image zh-lightbox-thumb lazy" width="670" data-original="https://pic1.zhimg.com/v2-3b1aa28f2871f18ee52190f14234a15c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-3b1aa28f2871f18ee52190f14234a15c_b.png"/></figure><p>7. 最后留在栈里的就是表达式的结果。</p><h2>构建 RPN 表达式</h2><p>以表达式 <code>order_id &lt; 10</code> 下推为例，其下推的树状表达式如下图所示，其中 <code>ColumnRef(2)</code> 表示列 <code>order_id</code>，<code>2</code> 表示 <code>order_id</code> 列在该表结构中对应的 offset：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-db720f48df780d386ef680cd23d519d1_b.jpg" data-caption="" data-size="normal" data-rawwidth="803" data-rawheight="198" class="origin_image zh-lightbox-thumb" width="803" data-original="https://pic2.zhimg.com/v2-db720f48df780d386ef680cd23d519d1_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-db720f48df780d386ef680cd23d519d1_b.jpg" data-caption="" data-size="normal" data-rawwidth="803" data-rawheight="198" class="origin_image zh-lightbox-thumb lazy" width="803" data-original="https://pic2.zhimg.com/v2-db720f48df780d386ef680cd23d519d1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-db720f48df780d386ef680cd23d519d1_b.jpg"/></figure><p>转化为 RPN 表达式：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-a1fbf24f697fcbc83bfd5ca3454bb0a4_b.jpg" data-caption="" data-size="normal" data-rawwidth="685" data-rawheight="250" class="origin_image zh-lightbox-thumb" width="685" data-original="https://pic1.zhimg.com/v2-a1fbf24f697fcbc83bfd5ca3454bb0a4_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-a1fbf24f697fcbc83bfd5ca3454bb0a4_b.jpg" data-caption="" data-size="normal" data-rawwidth="685" data-rawheight="250" class="origin_image zh-lightbox-thumb lazy" width="685" data-original="https://pic1.zhimg.com/v2-a1fbf24f697fcbc83bfd5ca3454bb0a4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-a1fbf24f697fcbc83bfd5ca3454bb0a4_b.jpg"/></figure><p>Coprocessor 中表达式的定义：</p><div class="highlight"><pre><code class="language-text">/// An expression in Reverse Polish notation, which is simply a list of RPN expression nodes.
///
/// You may want to build it using `RpnExpressionBuilder`.
#[derive(Debug, Clone)]
pub struct RpnExpression(Vec&lt;RpnExpressionNode&gt;);

/// A type for each node in the RPN expression list.
#[derive(Debug, Clone)]
pub enum RpnExpressionNode {
    /// Represents a function call.
    FnCall {
        func_meta: RpnFnMeta,
        args_len: usize,
        field_type: FieldType,
        implicit_args: Vec&lt;ScalarValue&gt;,
    },

    /// Represents a scalar constant value.
    Constant {
        value: ScalarValue,
        field_type: FieldType,
    },

    /// Represents a reference to a column in the columns specified in evaluation.
    ColumnRef { offset: usize },
}</code></pre></div><h2>执行 RPN 表达式</h2><p>有了表达式后，接下来我们需要执行表达式，为此我们要使用一个栈结构来缓存中间值。由于表达式中的操作符（<code>RpnExpressionNode::FnCall</code>）不会被存入栈，我们定义了只包含值的 <code>RpnStackNode</code> 储存中间值：</p><div class="highlight"><pre><code class="language-text">// A type for each node in the RPN evaluation stack. It can be one of a scalar value node or a
/// vector value node. The vector value node can be either an owned vector value or a reference.
#[derive(Debug)]
pub enum RpnStackNode&lt;&#39;a&gt; {
    /// Represents a scalar value. Comes from a constant node in expression list.
    Scalar {
        value: &amp;&#39;a ScalarValue,
        field_type: &amp;&#39;a FieldType,
    },

    /// Represents a vector value. Comes from a column reference or evaluated result.
    Vector {
        value: RpnStackNodeVectorValue&lt;&#39;a&gt;,
        field_type: &amp;&#39;a FieldType,
    },
}</code></pre></div><p>注意，Coprocessor 中表达式是向量化计算的，每次都尽量会计算多行，通常为 1024 行，即 <code>op([]value, []value)</code> 而不是 <code>op(value, value)</code>，从而减少分支并提高 Cache Locality。但运算数并不总是一个来自列的向量，还可能是用户直接指定的常量（例如 <code>SELECT a+1</code> 中 <code>a</code> 是向量，但 <code>1</code> 只是标量）。因此，<code>RpnStackNode</code> 分两种：</p><ul><li>标量：由 <code>Constant</code> 生成。</li><li>向量：执行 <code>ColumnRe f</code> 生成，或是 <code>FnCall</code> 调用返回的结果。</li></ul><p>另外为了避免 Selection 算子移动大量的数据，向量使用了间接的储存方式，每个向量有真实数据和逻辑索引，只有逻辑索引中对应的真实数据才是逻辑有效的，这样 Selection 算子便可以只需改动逻辑索引而不需搬动大量的真实数据：</p><div class="highlight"><pre><code class="language-text">/// Represents a vector value node in the RPN stack.
///
/// It can be either an owned node or a reference node.
///
/// When node comes from a column reference, it is a reference node (both value and field_type
/// are references).
///
/// When nodes comes from an evaluated result, it is an owned node.
#[derive(Debug)]
pub enum RpnStackNodeVectorValue&lt;&#39;a&gt; {
    Generated {
        physical_value: VectorValue,
        logical_rows: Arc&lt;[usize]&gt;,
    },
    Ref {
        physical_value: &amp;&#39;a VectorValue,
        logical_rows: &amp;&#39;a [usize],
    },
}</code></pre></div><p>接下来我们用上面的 <code>order_id &lt; 100</code> 作为例子看看表达式是如何执行的。</p><ol><li>首先我们准备好一个栈结构：</li></ol><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-f70f22af21865ec6343cf9781ba0119d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="300" class="origin_image zh-lightbox-thumb" width="1100" data-original="https://pic2.zhimg.com/v2-f70f22af21865ec6343cf9781ba0119d_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-f70f22af21865ec6343cf9781ba0119d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="300" class="origin_image zh-lightbox-thumb lazy" width="1100" data-original="https://pic2.zhimg.com/v2-f70f22af21865ec6343cf9781ba0119d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-f70f22af21865ec6343cf9781ba0119d_b.jpg"/></figure><p>2. 接着逐一遍历表达式，第一个取出的是 <code>ColumnRef</code>，我们取出输入 Selection 算子的数据中对应 offset 的列的向量数据，并将向量压入栈：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-9816e5cbf11f07b43bc50b12f0c68723_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="379" class="origin_image zh-lightbox-thumb" width="1100" data-original="https://pic4.zhimg.com/v2-9816e5cbf11f07b43bc50b12f0c68723_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-9816e5cbf11f07b43bc50b12f0c68723_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="379" class="origin_image zh-lightbox-thumb lazy" width="1100" data-original="https://pic4.zhimg.com/v2-9816e5cbf11f07b43bc50b12f0c68723_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-9816e5cbf11f07b43bc50b12f0c68723_b.jpg"/></figure><p>3. 接着是 <code>Constant</code>，转化为标量然后压入栈：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-6c854a77379422254761309834aadc7a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="460" class="origin_image zh-lightbox-thumb" width="1100" data-original="https://pic3.zhimg.com/v2-6c854a77379422254761309834aadc7a_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-6c854a77379422254761309834aadc7a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="460" class="origin_image zh-lightbox-thumb lazy" width="1100" data-original="https://pic3.zhimg.com/v2-6c854a77379422254761309834aadc7a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-6c854a77379422254761309834aadc7a_b.jpg"/></figure><p>4. 最后一个是 <code>LT</code> 运算符，它需要两个入参，因此我们从栈中弹出两个值作为参数调用 <code>LT</code>，<code>LT</code> 会生成一个新的向量，将结果压入栈：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-f21032864d85350df3b5b4e08728eb60_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="320" class="origin_image zh-lightbox-thumb" width="1100" data-original="https://pic1.zhimg.com/v2-f21032864d85350df3b5b4e08728eb60_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-f21032864d85350df3b5b4e08728eb60_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="320" class="origin_image zh-lightbox-thumb lazy" width="1100" data-original="https://pic1.zhimg.com/v2-f21032864d85350df3b5b4e08728eb60_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-f21032864d85350df3b5b4e08728eb60_b.jpg"/></figure><p>5. 最后留在栈里的就是表达式的执行结果。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-9c59544505fec06cb0b163c607d3e0df_b.jpg" data-caption="" data-size="normal" data-rawwidth="950" data-rawheight="300" class="origin_image zh-lightbox-thumb" width="950" data-original="https://pic4.zhimg.com/v2-9c59544505fec06cb0b163c607d3e0df_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-9c59544505fec06cb0b163c607d3e0df_b.jpg" data-caption="" data-size="normal" data-rawwidth="950" data-rawheight="300" class="origin_image zh-lightbox-thumb lazy" width="950" data-original="https://pic4.zhimg.com/v2-9c59544505fec06cb0b163c607d3e0df_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-9c59544505fec06cb0b163c607d3e0df_b.jpg"/></figure><p>6. Selection 算子根据结果的布尔值过滤原输入的逻辑索引：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-4ad610ee962f89335afe9e8acf0f9fa7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="520" class="origin_image zh-lightbox-thumb" width="1100" data-original="https://pic4.zhimg.com/v2-4ad610ee962f89335afe9e8acf0f9fa7_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-4ad610ee962f89335afe9e8acf0f9fa7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1100" data-rawheight="520" class="origin_image zh-lightbox-thumb lazy" width="1100" data-original="https://pic4.zhimg.com/v2-4ad610ee962f89335afe9e8acf0f9fa7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-4ad610ee962f89335afe9e8acf0f9fa7_b.jpg"/></figure><p>7. 这样就间接的过滤出有效数据而不用改变 Physical Vector：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-1aca6c5785610fd9b0ca5cfc96b682c2_b.jpg" data-caption="" data-size="normal" data-rawwidth="900" data-rawheight="567" class="origin_image zh-lightbox-thumb" width="900" data-original="https://pic3.zhimg.com/v2-1aca6c5785610fd9b0ca5cfc96b682c2_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-1aca6c5785610fd9b0ca5cfc96b682c2_b.jpg" data-caption="" data-size="normal" data-rawwidth="900" data-rawheight="567" class="origin_image zh-lightbox-thumb lazy" width="900" data-original="https://pic3.zhimg.com/v2-1aca6c5785610fd9b0ca5cfc96b682c2_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-1aca6c5785610fd9b0ca5cfc96b682c2_b.jpg"/></figure><h2>实现 RPN 表达式函数</h2><p>实现表达式函数（<code>FnCall</code>）是比较繁琐的。比如对于二元操作符加法， 它既可以接受其中一元输入常量，也可以接受来自列数据的向量。一种解决方法是将标量都重复填充为向量，这样所有函数运算都是向量参数，但这个方法会有额外的标量拷贝开销。为了避免这个开销，Coprocessor 直接实现了向量与标量的运算，<code>rpn_expr_codegen</code> 提供了过程宏 <code>#[rpn_fn]</code> ，我们只需定义标量逻辑，过程宏将自动生成剩下带有向量的逻辑。</p><p>下面我们来试着定义一个整数加法操作符，这里入参和返回值都为标量即可，源码的实现引入了泛型更进一步将其抽象为所有数值类型间的加法：</p><div class="highlight"><pre><code class="language-text">#[rpn_fn]
#[inline]
pub fn int_plus_int(
    lhs: &amp;Option&lt;Int&gt;,
    rhs: &amp;Option&lt;Int&gt;,
) -&gt; Result&lt;Option&lt;Int&gt;&gt; {
    if let (Some(lhs), Some(rhs)) = (arg0, arg1) {
        lhs.checked_add(*rhs)
            .ok_or_else(|| Error::overflow(&#34;BIGINT&#34;, &amp;format!(&#34;({} + {})&#34;, lhs, rhs)).into())
            .map(Some)
    } else {
        Ok(None)
    }
}</code></pre></div><p><code>#[rpn_fn]</code> 宏会分析这个操作符定义的参数数量和类型，自动生成既可以处理标量也可以处理向量的 <code>int_plus_int_fn_meta()</code>，这个函数将可以放进 <code>FnCall</code> 被用于表达式计算：</p><div class="highlight"><pre><code class="language-text">pub fn int_plus_int_fn_meta(
        _ctx: &amp;mut EvalContext,
        output_rows: usize,
        args: &amp;[RpnStackNode&lt;&#39;_&gt;],
        _extra: &amp;mut RpnFnCallExtra&lt;&#39;_&gt;,
    ) -&gt; Result&lt;VectorValue&gt;
{
    assert!(args.len() &gt;= 2);

    let lhs = args[0];
    let rhs = args[1];

    let mut result: Vec&lt;Int&gt; = Vec::with_capacity(output_rows);

    match lhs {
        RpnStackNode::Scalar { value: ScalarValue::Int(lhs) , .. } =&gt; {
            match rhs {
                RpnStackNode::Scalar { value: ScalarValue::Int(rhs) , .. } =&gt; {
                    let value = int_plus_int(lhs, rhs);
                    result.push(result);
                }
                RpnStackNode::Vector { value: VectorValue::Int(rhs_vector) , .. } =&gt; {
                    for rhs_row in rhs_vector.logical_rows() {
                        let rhs = rhs_vector.physical_value[rhs_row];
                        let value = int_plus_int(lhs, rhs);
                        result.push(result);
                    }
                }
                _ =&gt; panic!(&#34;invalid expression&#34;)
            }
        }
        RpnStackNode::Vector { value: VectorValue::Int(lhs_vector) , .. } =&gt; {
            match rhs {
                RpnStackNode::Scalar { value: ScalarValue::Int(rhs) , .. } =&gt; {
                    for lhs in lhs_vector {
                        let value = int_plus_int(lhs, rhs);
                        result.push(result);
                    }
                }
                RpnStackNode::Vector { value: VectorValue::Int(rhs_vector) , .. } =&gt; {
                    for (lhs, rhs) in lhs_vector.logical_rows().iter().zip(rhs_vector.logical_rows()) {
                        let lhs = lhs_vector.physical_value[lhs_row];
                        let rhs = rhs_vector.physical_value[rhs_row];
                        let value = int_plus_int(lhs, rhs);
                        result.push(result);
                    }
                }
                _ =&gt; panic!(&#34;invalid expression&#34;)
            }
        }
        _ =&gt; panic!(&#34;invalid expression&#34;)
    }

    result
}</code></pre></div><blockquote>注意：TiKV 源码使用泛型展开生成逻辑代码，较为复杂，因此上面给出的这段是展开后的等价伪代码。</blockquote><h2>小结</h2><p>以上就是 Coprocessor 表达式框架实现解析。下一篇我们将详细介绍各算子的内部实现。</p><p><b>原文阅读：</b></p><a href="https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/tikv-source-code-reading-15/" data-draft-node="block" data-draft-type="link-card" data-image="https://pic2.zhimg.com/v2-60ab5bd867c2434d70c957a02a2169e1_ipico.jpg" data-image-width="1200" data-image-height="1200" class=" wrap external" target="_blank" rel="nofollow noreferrer">TiKV 源码解析系列文章（十五）表达式计算框架 | PingCAP</a><p></p>