<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description>编程、读书、学习、境界提升</description>
<language>zh-cn</language>
<lastBuildDate>Tue, 21 Jan 2020 12:25:58 +0800</lastBuildDate>
<item>
<title>世界的本质就是Unsafe，美好需要我们共同创造</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2020-01-21-103353305.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103353305&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-477180e0ec1633ebe3d82ae07532e64a_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;更新：actix-web已经找到了接手维护者。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/actix-web/issues/1289&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/actix/actix-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;web/issues/1289&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;新的维护者看上去是一个比较靠谱的开发者，看到他也参与&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/bastion-rs/bastion&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bastion&lt;/a&gt;这个项目，该项目旨在用Rust实现一个类Erlang VM（BEAM）的东东。感觉actix-web交给他还是比较妥当的。&lt;/p&gt;&lt;p&gt;也值得庆幸的是，Nikolay终于想通了，虽然他不再继续维护，但至少心情不会再郁闷了。&lt;/p&gt;&lt;p&gt;另外给大家分享一篇文章：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.burntsushi.net/foss/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.burntsushi.net/fos&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;s/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;这是ripgrep的作者Andrew Gallant 写的这篇文章，分享了他十几年参与开源项目的看法和经验，值得一读 ，里面包含了如何处理开源中遇到的各种负面情绪，如果有朝一日你也做了开源项目，这些经验也许能帮助你。Free and Open Source Software (FOSS)。&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;我本来做actix是因为有趣，想去创造，想要尝试Rust的潜能极限。&lt;/b&gt; &lt;br/&gt;&lt;b&gt;但现在我为什么这么不开心呢，生活本该不必如此。&lt;/b&gt;&lt;br/&gt; &lt;b&gt;再见了，各位。&lt;/b&gt; &lt;b&gt;————总结自 Actix 作者Nikolay Kim(又名 fafhrd91 )的文章&lt;/b&gt;&lt;/blockquote&gt;&lt;p&gt;Actix-web的作者宣布退出开源界，想要正确看待这件事，你首先需要理解Actix作者的初衷。（本文结尾也附上了那篇文章的翻译。）&lt;/p&gt;&lt;h2&gt;前因后果&lt;/h2&gt;&lt;p&gt;自从Actix问世以来，挺受欢迎，毕竟，Rust的Web框架不是很多。&lt;/p&gt;&lt;p&gt;在性能上屡屡霸榜 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.techempower.com/benchmarks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;techempower&lt;/a&gt; 的性能测试榜单。&lt;/p&gt;&lt;p&gt;也不知道从何时起，Actix中使用Unsafe的情况被大家挖掘了出来。&lt;/p&gt;&lt;p&gt;最开始是Nikolay做出了积极的改变，我在做Rust日报的时候，清楚地记得，他看到反馈接下来的几天，积极地宣布自己改善了多少Unsafe的问题，剩下多少问题，是为了什么目的。&lt;/p&gt;&lt;p&gt;然后事情就这么安静地过去了，空气中传来了快乐的气息。 &lt;/p&gt;&lt;p&gt;但现在回想，也许他当初积极的态度，为今天的事情埋下了伏笔。&lt;/p&gt;&lt;p&gt;也忘记了过了多久，有人继续在找Unsafe的问题，也不管Unsafe代码到底会不会产生UB或Bug，但凡看见Unsafe可能就很敏感。就像是Unsafe PTSD患者。&lt;/p&gt;&lt;p&gt;对于这些情况，Nikolay选择了无视。这正好和他最初积极响应修改Unsafe的态度相反，所以刺激了某些人，在Reddit上面发出了声讨贴，于是，大家提到Actix，提到Actix的作者就有了下面的标签：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;性能测试作弊者。&lt;/li&gt;&lt;li&gt;强行写Unsafe，别人提了意见也不去修改，自以为是。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我相信，如果换成任何人，心里都不会舒服。&lt;/p&gt;&lt;p&gt;Nikolay并没有义务给大家科普Unsafe Rust到底该如何使用。&lt;/p&gt;&lt;p&gt;但他的表现真的是那样吗？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1114&quot; data-rawheight=&quot;484&quot; data-default-watermark-src=&quot;https://pic4.zhimg.com/v2-8503f26fc94f259ff353cc5b53fcda7f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1114&quot; data-original=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1114&quot; data-rawheight=&quot;484&quot; data-default-watermark-src=&quot;https://pic4.zhimg.com/v2-8503f26fc94f259ff353cc5b53fcda7f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1114&quot; data-original=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;当然不是，对于一些合适的PR，他是Merge了的。但是对于每个PR，他也会如是拷问。是真的解决问题了吗？&lt;/p&gt;&lt;p&gt;这是前因。&lt;/p&gt;&lt;p&gt;直到昨天，Nikolay收到一个issues，这个issues虽然被删了，但是据说在里面骂了Nikolay，而Nikolay还在思考如何解决Actix-web中的问题。&lt;/p&gt;&lt;p&gt;然后Nikolay 生气了，就把actix-web的库迁移到了自己私人仓库里。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;我的看法：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;很多人说 Nikolay 有点小气。但我不这么认为，去看看上面前因后果，换了谁也不忍受不了。&lt;/p&gt;&lt;p&gt;我从Actix 0.7开始关注并使用Actix做项目，直到Actix-web 1.0。&lt;/p&gt;&lt;p&gt;你们可以对比下 actix-web 0.7和1.0 的重构变化，你会看得出来Nikolay是多么用心在做这个项目。&lt;/p&gt;&lt;p&gt;他是带着自己的创意，想去完成一件作品，是想突破自己，也想看看Rust的潜能极限在哪里。结果被人打上「性能测试作弊者」的旗号，可悲不可悲？&lt;/p&gt;&lt;h2&gt;来自官方和社区的声援：&lt;/h2&gt;&lt;p&gt;Thank you for your service  ： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/actix-web/issues/4&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/actix/actix-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;web/issues/4&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;A sad day for Rust：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//words.steveklabnik.com/a-sad-day-for-rust&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;words.steveklabnik.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;a-sad-day-for-rust&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;Actix 支持者之信： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix-support/letter&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/actix-suppor&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;t/letter&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h2&gt;&lt;b&gt;矛盾的根源&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;其实，这件事的矛盾本质是大众对Rust的Unsafe不太理解造成的。我当时在写《Rust编程之道》的时候，最后一章标题是《不安全的Rust》，但是编辑看到这章标题跟我反馈，「Rust不是号称安全吗？为什么这里是不安全的Rust？」，于是我意识到问题所在，改成了「超越Rust的安全边界」。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我其实就是想表明，Unsafe Rust，是Rust的安全边界。世界的本质就是Unsafe的。你无法避免它。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;还有人说，因为Unsafe Rust的存在，所以也不见得能比C/C++安全到哪里去？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Unsafe Rust确实和C/C++一样，要靠人来保证它的安全。但它对人的要求更高。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;它也给了开发者一个Unsafe的边界，这其实也是一种安全边界。它把你代码里的雷区，显式地标记了出来。团队代码里review的话，可以更快地发现问题。这本身就是一种安全。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;而反观C++，你写出的每一行代码都是Unsafe的，因为它没有像Rust这样明显的界限（Unsafe 块）。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;以下是我总结的五条使用Unsafe的简单规范，方便大家做权衡：&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;1. 能用Safe Rust就用Safe Rust； &lt;br/&gt;2. 为了性能可以使用Unsafe Rust； &lt;br/&gt;3. 在使用Unsafe Rust的时候确保不要产生UB，并且尽量判断其安全边界，抽象为Safe方法； &lt;br/&gt;4. 如果无法抽象为Safe，需要标注为Unsafe，并配以产生UB的条件文档； &lt;br/&gt;5. 对于Unsafe的代码，大家可以重点review。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;针对这件事，Rust 核心团队Unsafe内存安全模型的负责人RaphJ也专门写了篇文章：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我给大家做了一个摘录，详细的去看原文：&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//raphlinus.github.io/rust/2020/01/18/soundness-pledge.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;raphlinus.github.io/rus&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;t/2020/01/18/soundness-pledge.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;《关于「可靠/安全」的承诺 （The Soundness Pledge）》&lt;/b&gt; &lt;br/&gt;&lt;br/&gt;Unsafe 关键字具有特定的含义：这表明需要更多的推理才能证明使用代码是安全的。  &lt;br/&gt;&lt;br/&gt;在 Unsafe 块之外，编译器实质上使用在类型系统中编码的信息来证明使用代码是安全的。 在Unsafe块中，会允许某些通常被禁止的事情，例如读取和写入原始指针。 &lt;br/&gt;&lt;br/&gt;对于不太了解Rust的人，建议阅读Rust书中的Unsafe Rust一章。 否则，很多讨论可能会造成混乱。&lt;br/&gt;&lt;br/&gt;在Rust社区的某些地方，人们倾向于认为Unsafe本身是很糟糕的，但是我认为这有一些微妙之处。 当然，用安全的Rust可以很容易地编写代码，使用Unsafe的方法获得一些可察觉的性能提升。但更糟的是，通过借用检查器来减少抱怨，这不是一个最佳实践。   &lt;br/&gt;&lt;br/&gt;然而，对于许多用途，尤其是与为其他语言设计的库或运行时集成，这是必不可少的，并且良好地使用它很重要。 其他有效的用例包括SIMD和基础数据结构的实现； Rust标准库具有良好的集合，但并不旨在全面涵盖所有可能的用例。  &lt;br/&gt;&lt;br/&gt;有时，避免安全性错误（UB）相当容易：只需在代码中的任何地方都不要使用“Unsafe”，并且不要依赖任何其他有安全性错误的库。 对于某些类别的问题，这是可行的。 通常，它是在性能和​​安全性之间进行权衡的，但是我还没有看到很多证据表明这确实是一种权衡。&lt;br/&gt;&lt;br/&gt;在大多数情况下，Rust为您提供了实现这两种功能的工具，但是有时确实需要额外的工作。 Rust中的许多安全保证都是零成本的。 其他一些方法（尤其是数组边界检查）需要一定的成本，但是即使在安全范围内，普通的性能调整技术也通常很有效。 对此的一个数据证据是pulldown-cmark，它现在具有同类最佳的性能，但不使用不安全的方法（存在可选的SIMD优化，但是性能与默认配置几乎没有不同，这要归功于通过 Marcus Klaas de Vries）。&lt;/blockquote&gt;&lt;p&gt;这篇文章很长，并且后面还列举了使用Rust和其他语言、库打交道过程中使用Unsafe的一些问题和看法，欢迎大家去仔细阅读，有欢迎翻译分享。&lt;/p&gt;&lt;p&gt;&lt;b&gt;总的来说，我们应该建立对 Unsafe的正确认知：「Unsafe Rust是一个锋利的工具」。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;对待Unsafe的态度是：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 对于那些知道如何正确使用Unsafe来完成目标的人，报以尊重。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 不要滥用Unsafe。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Rust库的可靠性承诺&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;为了避免出现同类的事件，RaphJ在上面的文章中还提出了一个建议：&lt;/p&gt;&lt;p&gt;就是在每个crate或框架中，引入这样的一句话：&lt;/p&gt;&lt;blockquote&gt;「“这个crate的目的是为了消除缺陷。 开发人员将尽最大努力避免它们，并欢迎在分析和修复它们方面提供帮助。”」&lt;/blockquote&gt;&lt;p&gt;加这样一句话的原因在文章里有阐述：&lt;/p&gt;&lt;blockquote&gt;虽然几乎每个人都同意可靠比不可靠要好，但是&lt;b&gt;不同的人对它的重要性有不同的优先级&lt;/b&gt;，特别是在编码工作和性能之间的权衡。大多数Rust开发者群体高度重视可靠性，但即使在其内部也存在显著的变异。我已经提出了一个承诺，一个真正的意向声明，我希望可以用来清楚地传达Rust工程的优先级别。现在，我是在邀请讨论，而不是提议把它作为一个正式的标志。&lt;/blockquote&gt;&lt;p&gt;正是因为每个人对安全和性能的期望有所不同，所以最好在自己的框架或crate里加上，你们侧重的是哪一点？这样使用者自己可以判断。&lt;/p&gt;&lt;h2&gt;&lt;b&gt; Actix作者最后的发言文章&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;翻译（来自于&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Dfa0be236-131f-4f72-aa3c-23a2dff25bf7&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust中文社区Jim&lt;/a&gt;，请大家不要在评论此文翻译的如何，不是重点）：&lt;br/&gt;&lt;br/&gt;新的一天，又一个该屎的unsafe风波，我已经麻木了。&lt;br/&gt;&lt;br/&gt;断章取意的读评论这么容易，真是太有意思了。（尤其是母语非英语的人）写有清晰意图的评论又是这么难。怎么打补丁？ 很容易吧，直接，简单，一点都不用创意，一点也不用改多余的代码，目的就是把unsafe 去掉，多余的什么去根本的都不用多想哈。 我认为软件编程是一个世界上数一数二，最需要创意的工作，创意是人们爱软件编程的源泉。 特别是做一个实际的，世界人都能用的项目，这样的实际项目都有条条框框，需要创意才能满足的需求。这样的项目才有意思。一直在你挑战你能力的极限很有意思。 没有创意的修改方式很没有意思，（哦，那个作者终于不要这个补丁的版权了（好讽刺啊））。 我从来不是一个随便用unsafe的人。 我用它是因为我相信我的用法是unsafe但不影响我的安全性。不会有被黑的漏洞。我相信提出的这个问题的确属于mutable aliasing invariant， 我也很高兴有人找出来一个真正需要解决的问题。 我也希望解决这个问题，只是不是像这样解决，这个解决办法很没有创意。 要实在不行再用RefCell来解决。 比如我找到了一个我认可的解决方案，现在在master里，至少解决那个issue里面提到的一个问题。你们要是跨我的底线，至少要骂对。再说跨度也太没边界了。&lt;br/&gt;&lt;br/&gt;维护大型开源项目一点也不好玩。总有人没礼貌，传播恨，大家都知道怎么写软件，却没有人愿意仔细做功课，读官方文档，想一想，更没有人愿意做贡献。看来大家都以为我们actix团队超级庞大，每天无所事事，经费更是张口就来。 （在这里仍要感谢这写默默支持我们的人）。比如 async await花了三周一天十二个小时，很累人的，发布后又有人抱怨文档没更新，我又要更新。 真是令人身心鼓舞啊！你们发现这个该屎的unsafe风波后发没发现，我在社区出现的时间 越来越少。真的，这么努力的你看到如此不体贴的评论真的感觉自己被背叛了。我也知道删issue 是个挺二的主意，但是最后两个针对我的评论真是气不打一处来。特别是我看到这评论前我还在想解决方案。我不该。&lt;br/&gt;&lt;br/&gt;我写actix有三年了。我学到了很多，见到了好多新人，我找到了我心爱的语言，我想一辈子用。我找到了有意思的工作。但是损我项目的名声真是够了。我不认为我身心可以恢复了。我想Actix永远都是别人眼里的“一坨一坨的UB”，“跑分骗子” （我的tfb跑分是因为我想把rust的潜力都用出来，我争强好胜，我并不想把其他rust的项目比下来。所有actix 名下的项目，无论是actix-web还是 actix-net 我都花心思设计了，api也好，框架也好。每个项目我至少重写4-5次。我延伸了一些需求，一些新的写项目的方式与规律。我希望其他人看我的项目们的源码后收到启发，更上一层楼。现在我觉得支持actix没意思，在rust社区没意思。&lt;br/&gt;&lt;br/&gt;我不干开源了。&lt;br/&gt;&lt;br/&gt;备注： 我把actix-net 和 actix-web放到我私人的github上了。我会过几天做决定。我不想我的东西变成幽灵般的存在，要是有新的维护人员的话，他们必须明白怎么运作，那些已经或有可能忙着其他项目的人不合适。所以我现在的打算是把项目设到私人然后删除，跑分也会会被删除。除非有人有更好的主意。&lt;br/&gt;&lt;br/&gt;所有事情终将结束，一路上很有意思但现在该翻篇了。生活本该活的有意思。&lt;/blockquote&gt;&lt;p&gt;对于Nikolay的最终决定，我只能表示理解和尊重。&lt;/p&gt;&lt;p&gt;最后一句话，大家共勉：&lt;/p&gt;&lt;p&gt;&lt;b&gt;No matter your opinion on the whole technical discussion people should be treated with respect.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;关于此次事件的补充：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这次确实UB了，但不是因为UB的问题作者才暴走。作者开始是merge过PR，后来他们觉得还有问题，然后继续提了个补丁。但是这次作者觉得这个补丁太没有创意，就没有merge。然后说了句：“这个补丁太无聊。”，然后他就去思考这个issues的更好的解决办法。但是这帮人去Reddit发了个贴，声讨他那一句“这个补丁太无聊。”，还有人攻击他，“你还是别写Rust了”。这还不是PTSD？作为作者，思考更好的解决问题方法，总得有时间和空间吧？需要发到Reddit进行攻击吗？人谁还没个冲动的时候？issues删掉肯定是他的问题，但我们应该给予足够的宽容，不回头看看他做了多少努力和付出？他在2018年6月份就已经和unsafe做斗争了，这一年半的时间也是深受那些PTSD的困扰，这次估计是没忍住。我唯一关心的是他为什么要换成UnsafeCell，他没有解释，但可以猜到，他认为那个只是内部调用了两次不会有大问题。既然发生了UB，估计他也没有搞清楚为什么，需要时间消化找到更好的方案。以此来推断他的人品，或者下定论，贴标签，都是不合适的。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2020-01-21-103353305</guid>
<pubDate>Tue, 21 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>世界的本质就是Unsafe，美好需要我们共同创造</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2020-01-19-103353305.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103353305&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-477180e0ec1633ebe3d82ae07532e64a_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;b&gt;我本来做actix是因为有趣，想去创造，想要尝试Rust的潜能极限。&lt;/b&gt; &lt;br/&gt;&lt;b&gt;但现在我为什么这么不开心呢，生活本该不必如此。&lt;/b&gt;&lt;br/&gt; &lt;b&gt;再见了，各位。&lt;/b&gt; &lt;b&gt;————总结自 Actix 作者Nikolay Kim(又名 fafhrd91 )的文章&lt;/b&gt;&lt;/blockquote&gt;&lt;p&gt;Actix-web的作者宣布退出开源界，想要正确看待这件事，你首先需要理解Actix作者的初衷。（本文结尾也附上了那篇文章的翻译。）&lt;/p&gt;&lt;h2&gt;前因后果&lt;/h2&gt;&lt;p&gt;自从Actix问世以来，挺受欢迎，毕竟，Rust的Web框架不是很多。&lt;/p&gt;&lt;p&gt;在性能上屡屡霸榜 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.techempower.com/benchmarks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;techempower&lt;/a&gt; 的性能测试榜单。&lt;/p&gt;&lt;p&gt;也不知道从何时起，Actix中使用Unsafe的情况被大家挖掘了出来。&lt;/p&gt;&lt;p&gt;最开始是Nikolay做出了积极的改变，我在做Rust日报的时候，清楚地记得，他看到反馈接下来的几天，积极地宣布自己改善了多少Unsafe的问题，剩下多少问题，是为了什么目的。&lt;/p&gt;&lt;p&gt;然后事情就这么安静地过去了，空气中传来了快乐的气息。 &lt;/p&gt;&lt;p&gt;但现在回想，也许他当初积极的态度，为今天的事情埋下了伏笔。&lt;/p&gt;&lt;p&gt;也忘记了过了多久，有人继续在找Unsafe的问题，也不管Unsafe代码到底会不会产生UB或Bug，但凡看见Unsafe可能就很敏感。就像是Unsafe PTSD患者。&lt;/p&gt;&lt;p&gt;对于这些情况，Nikolay选择了无视。这正好和他最初积极响应修改Unsafe的态度相反，所以刺激了某些人，在Reddit上面发出了声讨贴，于是，大家提到Actix，提到Actix的作者就有了下面的标签：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;性能测试作弊者。&lt;/li&gt;&lt;li&gt;强行写Unsafe，别人提了意见也不去修改，自以为是。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我相信，如果换成任何人，心里都不会舒服。&lt;/p&gt;&lt;p&gt;Nikolay并没有义务给大家科普Unsafe Rust到底该如何使用。&lt;/p&gt;&lt;p&gt;但他的表现真的是那样吗？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot; data-rawwidth=&quot;1114&quot; data-rawheight=&quot;484&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; data-default-watermark-src=&quot;https://pic4.zhimg.com/v2-8503f26fc94f259ff353cc5b53fcda7f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1114&quot; data-original=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot; data-rawwidth=&quot;1114&quot; data-rawheight=&quot;484&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; data-default-watermark-src=&quot;https://pic4.zhimg.com/v2-8503f26fc94f259ff353cc5b53fcda7f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1114&quot; data-original=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;当然不是，对于一些合适的PR，他是Merge了的。但是对于每个PR，他也会如是拷问。是真的解决问题了吗？&lt;/p&gt;&lt;p&gt;这是前因。&lt;/p&gt;&lt;p&gt;直到昨天，Nikolay收到一个issues，这个issues虽然被删了，但是据说在里面骂了Nikolay，而Nikolay还在思考如何解决Actix-web中的问题。&lt;/p&gt;&lt;p&gt;然后Nikolay 生气了，就把actix-web的库迁移到了自己私人仓库里。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;我的看法：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;很多人说 Nikolay 有点小气。但我不这么认为，去看看上面前因后果，换了谁也不忍受不了。&lt;/p&gt;&lt;p&gt;我从Actix 0.7开始关注并使用Actix做项目，直到Actix-web 1.0。&lt;/p&gt;&lt;p&gt;你们可以对比下 actix-web 0.7和1.0 的重构变化，你会看得出来Nikolay是多么用心在做这个项目。&lt;/p&gt;&lt;p&gt;他是带着自己的创意，想去完成一件作品，是想突破自己，也想看看Rust的潜能极限在哪里。结果被人打上「性能测试作弊者」的旗号，可悲不可悲？&lt;/p&gt;&lt;h2&gt;来自官方和社区的声援：&lt;/h2&gt;&lt;p&gt;Thank you for your service  ： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/actix-web/issues/4&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/actix/actix-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;web/issues/4&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;A sad day for Rust：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//words.steveklabnik.com/a-sad-day-for-rust&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;words.steveklabnik.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;a-sad-day-for-rust&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;Actix 支持者之信： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix-support/letter&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/actix-suppor&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;t/letter&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h2&gt;&lt;b&gt;矛盾的根源&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;其实，这件事的矛盾本质是大众对Rust的Unsafe不太理解造成的。我当时在写《Rust编程之道》的时候，最后一章标题是《不安全的Rust》，但是编辑看到这章标题跟我反馈，「Rust不是号称安全吗？为什么这里是不安全的Rust？」，于是我意识到问题所在，改成了「超越Rust的安全边界」。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我其实就是想表明，Unsafe Rust，是Rust的安全边界。世界的本质就是Unsafe的。你无法避免它。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;还有人说，因为Unsafe Rust的存在，所以也不见得能比C/C++安全到哪里去？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Unsafe Rust确实和C/C++一样，要靠人来保证它的安全。但它对人的要求更高。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;它也给了开发者一个Unsafe的边界，这其实也是一种安全边界。它把你代码里的雷区，显式地标记了出来。团队代码里review的话，可以更快地发现问题。这本身就是一种安全。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;而反观C++，你写出的每一行代码都是Unsafe的，因为它没有像Rust这样明显的界限（Unsafe 块）。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;以下是我总结的五条使用Unsafe的简单规范，方便大家做权衡：&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;1. 能用Safe Rust就用Safe Rust； &lt;br/&gt;2. 为了性能可以使用Unsafe Rust； &lt;br/&gt;3. 在使用Unsafe Rust的时候确保不要产生UB，并且尽量判断其安全边界，抽象为Safe方法； &lt;br/&gt;4. 如果无法抽象为Safe，需要标注为Unsafe，并配以产生UB的条件文档； &lt;br/&gt;5. 对于Unsafe的代码，大家可以重点review。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;针对这件事，Rust 核心团队Unsafe内存安全模型的负责人RaphJ也专门写了篇文章：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我给大家做了一个摘录，详细的去看原文：&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//raphlinus.github.io/rust/2020/01/18/soundness-pledge.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;raphlinus.github.io/rus&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;t/2020/01/18/soundness-pledge.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;《关于「可靠/安全」的承诺 （The Soundness Pledge）》&lt;/b&gt; &lt;br/&gt;&lt;br/&gt;Unsafe 关键字具有特定的含义：这表明需要更多的推理才能证明使用代码是安全的。  &lt;br/&gt;&lt;br/&gt;在 Unsafe 块之外，编译器实质上使用在类型系统中编码的信息来证明使用代码是安全的。 在Unsafe块中，会允许某些通常被禁止的事情，例如读取和写入原始指针。 &lt;br/&gt;&lt;br/&gt;对于不太了解Rust的人，建议阅读Rust书中的Unsafe Rust一章。 否则，很多讨论可能会造成混乱。&lt;br/&gt;&lt;br/&gt;在Rust社区的某些地方，人们倾向于认为Unsafe本身是很糟糕的，但是我认为这有一些微妙之处。 当然，用安全的Rust可以很容易地编写代码，使用Unsafe的方法获得一些可察觉的性能提升。但更糟的是，通过借用检查器来减少抱怨，这不是一个最佳实践。   &lt;br/&gt;&lt;br/&gt;然而，对于许多用途，尤其是与为其他语言设计的库或运行时集成，这是必不可少的，并且良好地使用它很重要。 其他有效的用例包括SIMD和基础数据结构的实现； Rust标准库具有良好的集合，但并不旨在全面涵盖所有可能的用例。  &lt;br/&gt;&lt;br/&gt;有时，避免安全性错误（UB）相当容易：只需在代码中的任何地方都不要使用“Unsafe”，并且不要依赖任何其他有安全性错误的库。 对于某些类别的问题，这是可行的。 通常，它是在性能和​​安全性之间进行权衡的，但是我还没有看到很多证据表明这确实是一种权衡。&lt;br/&gt;&lt;br/&gt;在大多数情况下，Rust为您提供了实现这两种功能的工具，但是有时确实需要额外的工作。 Rust中的许多安全保证都是零成本的。 其他一些方法（尤其是数组边界检查）需要一定的成本，但是即使在安全范围内，普通的性能调整技术也通常很有效。 对此的一个数据证据是pulldown-cmark，它现在具有同类最佳的性能，但不使用不安全的方法（存在可选的SIMD优化，但是性能与默认配置几乎没有不同，这要归功于通过 Marcus Klaas de Vries）。&lt;/blockquote&gt;&lt;p&gt;这篇文章很长，并且后面还列举了使用Rust和其他语言、库打交道过程中使用Unsafe的一些问题和看法，欢迎大家去仔细阅读，有欢迎翻译分享。&lt;/p&gt;&lt;p&gt;&lt;b&gt;总的来说，我们应该建立对 Unsafe的正确认知：「Unsafe Rust是一个锋利的工具」。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;对待Unsafe的态度是：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 对于那些知道如何正确使用Unsafe来完成目标的人，报以尊重。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 不要滥用Unsafe。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Rust库的可靠性承诺&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;为了避免出现同类的事件，RaphJ在上面的文章中还提出了一个建议：&lt;/p&gt;&lt;p&gt;就是在每个crate或框架中，引入这样的一句话：&lt;/p&gt;&lt;blockquote&gt;「“这个crate的目的是为了消除缺陷。 开发人员将尽最大努力避免它们，并欢迎在分析和修复它们方面提供帮助。”」&lt;/blockquote&gt;&lt;p&gt;加这样一句话的原因在文章里有阐述：&lt;/p&gt;&lt;blockquote&gt;虽然几乎每个人都同意可靠比不可靠要好，但是&lt;b&gt;不同的人对它的重要性有不同的优先级&lt;/b&gt;，特别是在编码工作和性能之间的权衡。大多数Rust开发者群体高度重视可靠性，但即使在其内部也存在显著的变异。我已经提出了一个承诺，一个真正的意向声明，我希望可以用来清楚地传达Rust工程的优先级别。现在，我是在邀请讨论，而不是提议把它作为一个正式的标志。&lt;/blockquote&gt;&lt;p&gt;正是因为每个人对安全和性能的期望有所不同，所以最好在自己的框架或crate里加上，你们侧重的是哪一点？这样使用者自己可以判断。&lt;/p&gt;&lt;h2&gt;&lt;b&gt; Actix作者最后的发言文章&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;翻译（来自于&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Dfa0be236-131f-4f72-aa3c-23a2dff25bf7&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust中文社区Jim&lt;/a&gt;，请大家不要在评论此文翻译的如何，不是重点）：&lt;br/&gt;&lt;br/&gt;新的一天，又一个该屎的unsafe风波，我已经麻木了。&lt;br/&gt;&lt;br/&gt;断章取意的读评论这么容易，真是太有意思了。（尤其是母语非英语的人）写有清晰意图的评论又是这么难。怎么打补丁？ 很容易吧，直接，简单，一点都不用创意，一点也不用改多余的代码，目的就是把unsafe 去掉，多余的什么去根本的都不用多想哈。 我认为软件编程是一个世界上数一数二，最需要创意的工作，创意是人们爱软件编程的源泉。 特别是做一个实际的，世界人都能用的项目，这样的实际项目都有条条框框，需要创意才能满足的需求。这样的项目才有意思。一直在你挑战你能力的极限很有意思。 没有创意的修改方式很没有意思，（哦，那个作者终于不要这个补丁的版权了（好讽刺啊））。 我从来不是一个随便用unsafe的人。 我用它是因为我相信我的用法是unsafe但不影响我的安全性。不会有被黑的漏洞。我相信提出的这个问题的确属于mutable aliasing invariant， 我也很高兴有人找出来一个真正需要解决的问题。 我也希望解决这个问题，只是不是像这样解决，这个解决办法很没有创意。 要实在不行再用RefCell来解决。 比如我找到了一个我认可的解决方案，现在在master里，至少解决那个issue里面提到的一个问题。你们要是跨我的底线，至少要骂对。再说跨度也太没边界了。&lt;br/&gt;&lt;br/&gt;维护大型开源项目一点也不好玩。总有人没礼貌，传播恨，大家都知道怎么写软件，却没有人愿意仔细做功课，读官方文档，想一想，更没有人愿意做贡献。看来大家都以为我们actix团队超级庞大，每天无所事事，经费更是张口就来。 （在这里仍要感谢这写默默支持我们的人）。比如 async await花了三周一天十二个小时，很累人的，发布后又有人抱怨文档没更新，我又要更新。 真是令人身心鼓舞啊！你们发现这个该屎的unsafe风波后发没发现，我在社区出现的时间 越来越少。真的，这么努力的你看到如此不体贴的评论真的感觉自己被背叛了。我也知道删issue 是个挺二的主意，但是最后两个针对我的评论真是气不打一处来。特别是我看到这评论前我还在想解决方案。我不该。&lt;br/&gt;&lt;br/&gt;我写actix有三年了。我学到了很多，见到了好多新人，我找到了我心爱的语言，我想一辈子用。我找到了有意思的工作。但是损我项目的名声真是够了。我不认为我身心可以恢复了。我想Actix永远都是别人眼里的“一坨一坨的UB”，“跑分骗子” （我的tfb跑分是因为我想把rust的潜力都用出来，我争强好胜，我并不想把其他rust的项目比下来。所有actix 名下的项目，无论是actix-web还是 actix-net 我都花心思设计了，api也好，框架也好。每个项目我至少重写4-5次。我延伸了一些需求，一些新的写项目的方式与规律。我希望其他人看我的项目们的源码后收到启发，更上一层楼。现在我觉得支持actix没意思，在rust社区没意思。&lt;br/&gt;&lt;br/&gt;我不干开源了。&lt;br/&gt;&lt;br/&gt;备注： 我把actix-net 和 actix-web放到我私人的github上了。我会过几天做决定。我不想我的东西变成幽灵般的存在，要是有新的维护人员的话，他们必须明白怎么运作，那些已经或有可能忙着其他项目的人不合适。所以我现在的打算是把项目设到私人然后删除，跑分也会会被删除。除非有人有更好的主意。&lt;br/&gt;&lt;br/&gt;所有事情终将结束，一路上很有意思但现在该翻篇了。生活本该活的有意思。&lt;/blockquote&gt;&lt;p&gt;对于Nikolay的最终决定，我只能表示理解和尊重。&lt;/p&gt;&lt;p&gt;最后一句话，大家共勉：&lt;/p&gt;&lt;p&gt;&lt;b&gt;No matter your opinion on the whole technical discussion people should be treated with respect.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;关于此次事件的补充：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这次确实UB了，但不是因为UB的问题作者才暴走。作者开始是merge过PR，后来他们觉得还有问题，然后继续提了个补丁。但是这次作者觉得这个补丁太没有创意，就没有merge。然后说了句：“这个补丁太无聊。”，然后他就去思考这个issues的更好的解决办法。但是这帮人去Reddit发了个贴，声讨他那一句“这个补丁太无聊。”，还有人攻击他，“你还是别写Rust了”。这还不是PTSD？作为作者，思考更好的解决问题方法，总得有时间和空间吧？需要发到Reddit进行攻击吗？人谁还没个冲动的时候？issues删掉肯定是他的问题，但我们应该给予足够的宽容，不回头看看他做了多少努力和付出？他在2018年6月份就已经和unsafe做斗争了，这一年半的时间也是深受那些PTSD的困扰，这次估计是没忍住。我唯一关心的是他为什么要换成UnsafeCell，他没有解释，但可以猜到，他认为那个只是内部调用了两次不会有大问题。既然发生了UB，估计他也没有搞清楚为什么，需要时间消化找到更好的方案。以此来推断他的人品，或者下定论，贴标签，都是不合适的。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2020-01-19-103353305</guid>
<pubDate>Sun, 19 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>世界的本质就是Unsafe，美好需要我们共同创造</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2020-01-18-103353305.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103353305&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-477180e0ec1633ebe3d82ae07532e64a_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;b&gt;我本来做actix是因为有趣，想去创造，想要尝试Rust的潜能极限。&lt;/b&gt; &lt;br/&gt;&lt;b&gt;但现在我为什么这么不开心呢，生活本该不必如此。&lt;/b&gt;&lt;br/&gt; &lt;b&gt;再见了，各位。&lt;/b&gt; &lt;b&gt;————总结自 Actix 作者Nikolay Kim(又名 fafhrd91 )的文章&lt;/b&gt;&lt;/blockquote&gt;&lt;p&gt;Actix-web的作者宣布退出开源界，想要正确看待这件事，你首先需要理解Actix作者的初衷。（本文结尾也附上了那篇文章的翻译。）&lt;/p&gt;&lt;h2&gt;前因后果&lt;/h2&gt;&lt;p&gt;自从Actix问世以来，挺受欢迎，毕竟，Rust的Web框架不是很多。&lt;/p&gt;&lt;p&gt;在性能上屡屡霸榜 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.techempower.com/benchmarks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;techempower&lt;/a&gt; 的性能测试榜单。&lt;/p&gt;&lt;p&gt;也不知道从何时起，Actix中使用Unsafe的情况被大家挖掘了出来。&lt;/p&gt;&lt;p&gt;最开始是Nikolay做出了积极的改变，我在做Rust日报的时候，清楚地记得，他看到反馈接下来的几天，积极地宣布自己改善了多少Unsafe的问题，剩下多少问题，是为了什么目的。&lt;/p&gt;&lt;p&gt;然后事情就这么安静地过去了，空气中传来了快乐的气息。 &lt;/p&gt;&lt;p&gt;但现在回想，也许他当初积极的态度，为今天的事情埋下了伏笔。&lt;/p&gt;&lt;p&gt;也忘记了过了多久，有人继续在找Unsafe的问题，也不管Unsafe代码到底会不会产生UB或Bug，但凡看见Unsafe可能就很敏感。就像是Unsafe PTSD患者。&lt;/p&gt;&lt;p&gt;对于这些情况，Nikolay选择了无视。这正好和他最初积极响应修改Unsafe的态度相反，所以刺激了某些人，在Reddit上面发出了声讨贴，于是，大家提到Actix，提到Actix的作者就有了下面的标签：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;性能测试作弊者。&lt;/li&gt;&lt;li&gt;强行写Unsafe，别人提了意见也不去修改，自以为是。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我相信，如果换成任何人，心里都不会舒服。&lt;/p&gt;&lt;p&gt;Nikolay并没有义务给大家科普Unsafe Rust到底该如何使用。&lt;/p&gt;&lt;p&gt;但他的表现真的是那样吗？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1114&quot; data-rawheight=&quot;484&quot; data-default-watermark-src=&quot;https://pic4.zhimg.com/v2-8503f26fc94f259ff353cc5b53fcda7f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1114&quot; data-original=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1114&quot; data-rawheight=&quot;484&quot; data-default-watermark-src=&quot;https://pic4.zhimg.com/v2-8503f26fc94f259ff353cc5b53fcda7f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1114&quot; data-original=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-27c5efe583706a2cd4a63a22f02f408d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;当然不是，对于一些合适的PR，他是Merge了的。但是对于每个PR，他也会如是拷问。是真的解决问题了吗？&lt;/p&gt;&lt;p&gt;这是前因。&lt;/p&gt;&lt;p&gt;直到昨天，Nikolay收到一个issues，这个issues虽然被删了，但是据说在里面骂了Nikolay，而Nikolay还在思考如何解决Actix-web中的问题。&lt;/p&gt;&lt;p&gt;然后Nikolay 生气了，就把actix-web的库迁移到了自己私人仓库里。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;我的看法：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;很多人说 Nikolay 有点小气。但我不这么认为，去看看上面前因后果，换了谁也不忍受不了。&lt;/p&gt;&lt;p&gt;我从Actix 0.7开始关注并使用Actix做项目，直到Actix-web 1.0。&lt;/p&gt;&lt;p&gt;你们可以对比下 actix-web 0.7和1.0 的重构变化，你会看得出来Nikolay是多么用心在做这个项目。&lt;/p&gt;&lt;p&gt;他是带着自己的创意，想去完成一件作品，是想突破自己，也想看看Rust的潜能极限在哪里。结果被人打上「性能测试作弊者」的旗号，可悲不可悲？&lt;/p&gt;&lt;h2&gt;来自官方和社区的声援：&lt;/h2&gt;&lt;p&gt;Thank you for your service  ： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix/actix-web/issues/4&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/actix/actix-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;web/issues/4&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;A sad day for Rust：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//words.steveklabnik.com/a-sad-day-for-rust&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;words.steveklabnik.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;a-sad-day-for-rust&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;Actix 支持者之信： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/actix-support/letter&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/actix-suppor&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;t/letter&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;h2&gt;&lt;b&gt;矛盾的根源&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;其实，这件事的矛盾本质是大众对Rust的Unsafe不太理解造成的。我当时在写《Rust编程之道》的时候，最后一章标题是《不安全的Rust》，但是编辑看到这章标题跟我反馈，「Rust不是号称安全吗？为什么这里是不安全的Rust？」，于是我意识到问题所在，改成了「超越Rust的安全边界」。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我其实就是想表明，Unsafe Rust，是Rust的安全边界。世界的本质就是Unsafe的。你无法避免它。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;还有人说，因为Unsafe Rust的存在，所以也不见得能比C/C++安全到哪里去？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Unsafe Rust确实和C/C++一样，要靠人来保证它的安全。但它对人的要求更高。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;它也给了开发者一个Unsafe的边界，这其实也是一种安全边界。它把你代码里的雷区，显式地标记了出来。团队代码里review的话，可以更快地发现问题。这本身就是一种安全。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;而反观C++，你写出的每一行代码都是Unsafe的，因为它没有像Rust这样明显的界限（Unsafe 块）。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;以下是我总结的五条使用Unsafe的简单规范，方便大家做权衡：&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;1. 能用Safe Rust就用Safe Rust； &lt;br/&gt;2. 为了性能可以使用Unsafe Rust； &lt;br/&gt;3. 在使用Unsafe Rust的时候确保不要产生UB，并且尽量判断其安全边界，抽象为Safe方法； &lt;br/&gt;4. 如果无法抽象为Safe，需要标注为Unsafe，并配以产生UB的条件文档； &lt;br/&gt;5. 对于Unsafe的代码，大家可以重点review。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;针对这件事，Rust 核心团队Unsafe内存安全模型的负责人RaphJ也专门写了篇文章：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我给大家做了一个摘录，详细的去看原文：&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//raphlinus.github.io/rust/2020/01/18/soundness-pledge.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;raphlinus.github.io/rus&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;t/2020/01/18/soundness-pledge.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;《关于「可靠/安全」的承诺 （The Soundness Pledge）》&lt;/b&gt; &lt;br/&gt;&lt;br/&gt;Unsafe 关键字具有特定的含义：这表明需要更多的推理才能证明使用代码是安全的。  &lt;br/&gt;&lt;br/&gt;在 Unsafe 块之外，编译器实质上使用在类型系统中编码的信息来证明使用代码是安全的。 在Unsafe块中，会允许某些通常被禁止的事情，例如读取和写入原始指针。 &lt;br/&gt;&lt;br/&gt;对于不太了解Rust的人，建议阅读Rust书中的Unsafe Rust一章。 否则，很多讨论可能会造成混乱。&lt;br/&gt;&lt;br/&gt;在Rust社区的某些地方，人们倾向于认为Unsafe本身是很糟糕的，但是我认为这有一些微妙之处。 当然，用安全的Rust可以很容易地编写代码，使用Unsafe的方法获得一些可察觉的性能提升。但更糟的是，通过借用检查器来减少抱怨，这不是一个最佳实践。   &lt;br/&gt;&lt;br/&gt;然而，对于许多用途，尤其是与为其他语言设计的库或运行时集成，这是必不可少的，并且良好地使用它很重要。 其他有效的用例包括SIMD和基础数据结构的实现； Rust标准库具有良好的集合，但并不旨在全面涵盖所有可能的用例。  &lt;br/&gt;&lt;br/&gt;有时，避免安全性错误（UB）相当容易：只需在代码中的任何地方都不要使用“Unsafe”，并且不要依赖任何其他有安全性错误的库。 对于某些类别的问题，这是可行的。 通常，它是在性能和​​安全性之间进行权衡的，但是我还没有看到很多证据表明这确实是一种权衡。&lt;br/&gt;&lt;br/&gt;在大多数情况下，Rust为您提供了实现这两种功能的工具，但是有时确实需要额外的工作。 Rust中的许多安全保证都是零成本的。 其他一些方法（尤其是数组边界检查）需要一定的成本，但是即使在安全范围内，普通的性能调整技术也通常很有效。 对此的一个数据证据是pulldown-cmark，它现在具有同类最佳的性能，但不使用不安全的方法（存在可选的SIMD优化，但是性能与默认配置几乎没有不同，这要归功于通过 Marcus Klaas de Vries）。&lt;/blockquote&gt;&lt;p&gt;这篇文章很长，并且后面还列举了使用Rust和其他语言、库打交道过程中使用Unsafe的一些问题和看法，欢迎大家去仔细阅读，有欢迎翻译分享。&lt;/p&gt;&lt;p&gt;&lt;b&gt;总的来说，我们应该建立对 Unsafe的正确认知：「Unsafe Rust是一个锋利的工具」。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;对待Unsafe的态度是：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 对于那些知道如何正确使用Unsafe来完成目标的人，报以尊重。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 不要滥用Unsafe。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Rust库的可靠性承诺&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;为了避免出现同类的事件，RaphJ在上面的文章中还提出了一个建议：&lt;/p&gt;&lt;p&gt;就是在每个crate或框架中，引入这样的一句话：&lt;/p&gt;&lt;blockquote&gt;「“这个crate的目的是为了消除缺陷。 开发人员将尽最大努力避免它们，并欢迎在分析和修复它们方面提供帮助。”」&lt;/blockquote&gt;&lt;p&gt;加这样一句话的原因在文章里有阐述：&lt;/p&gt;&lt;blockquote&gt;虽然几乎每个人都同意可靠比不可靠要好，但是&lt;b&gt;不同的人对它的重要性有不同的优先级&lt;/b&gt;，特别是在编码工作和性能之间的权衡。大多数Rust开发者群体高度重视可靠性，但即使在其内部也存在显著的变异。我已经提出了一个承诺，一个真正的意向声明，我希望可以用来清楚地传达Rust工程的优先级别。现在，我是在邀请讨论，而不是提议把它作为一个正式的标志。&lt;/blockquote&gt;&lt;p&gt;正是因为每个人对安全和性能的期望有所不同，所以最好在自己的框架或crate里加上，你们侧重的是哪一点？这样使用者自己可以判断。&lt;/p&gt;&lt;h2&gt;&lt;b&gt; Actix作者最后的发言文章&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;翻译（来自于&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//rust.cc/article%3Fid%3Dfa0be236-131f-4f72-aa3c-23a2dff25bf7&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust中文社区Jim&lt;/a&gt;，请大家不要在评论此文翻译的如何，不是重点）：&lt;br/&gt;&lt;br/&gt;新的一天，又一个该屎的unsafe风波，我已经麻木了。&lt;br/&gt;&lt;br/&gt;断章取意的读评论这么容易，真是太有意思了。（尤其是母语非英语的人）写有清晰意图的评论又是这么难。怎么打补丁？ 很容易吧，直接，简单，一点都不用创意，一点也不用改多余的代码，目的就是把unsafe 去掉，多余的什么去根本的都不用多想哈。 我认为软件编程是一个世界上数一数二，最需要创意的工作，创意是人们爱软件编程的源泉。 特别是做一个实际的，世界人都能用的项目，这样的实际项目都有条条框框，需要创意才能满足的需求。这样的项目才有意思。一直在你挑战你能力的极限很有意思。 没有创意的修改方式很没有意思，（哦，那个作者终于不要这个补丁的版权了（好讽刺啊））。 我从来不是一个随便用unsafe的人。 我用它是因为我相信我的用法是unsafe但不影响我的安全性。不会有被黑的漏洞。我相信提出的这个问题的确属于mutable aliasing invariant， 我也很高兴有人找出来一个真正需要解决的问题。 我也希望解决这个问题，只是不是像这样解决，这个解决办法很没有创意。 要实在不行再用RefCell来解决。 比如我找到了一个我认可的解决方案，现在在master里，至少解决那个issue里面提到的一个问题。你们要是跨我的底线，至少要骂对。再说跨度也太没边界了。&lt;br/&gt;&lt;br/&gt;维护大型开源项目一点也不好玩。总有人没礼貌，传播恨，大家都知道怎么写软件，却没有人愿意仔细做功课，读官方文档，想一想，更没有人愿意做贡献。看来大家都以为我们actix团队超级庞大，每天无所事事，经费更是张口就来。 （在这里仍要感谢这写默默支持我们的人）。比如 async await花了三周一天十二个小时，很累人的，发布后又有人抱怨文档没更新，我又要更新。 真是令人身心鼓舞啊！你们发现这个该屎的unsafe风波后发没发现，我在社区出现的时间 越来越少。真的，这么努力的你看到如此不体贴的评论真的感觉自己被背叛了。我也知道删issue 是个挺二的主意，但是最后两个针对我的评论真是气不打一处来。特别是我看到这评论前我还在想解决方案。我不该。&lt;br/&gt;&lt;br/&gt;我写actix有三年了。我学到了很多，见到了好多新人，我找到了我心爱的语言，我想一辈子用。我找到了有意思的工作。但是损我项目的名声真是够了。我不认为我身心可以恢复了。我想Actix永远都是别人眼里的“一坨一坨的UB”，“跑分骗子” （我的tfb跑分是因为我想把rust的潜力都用出来，我争强好胜，我并不想把其他rust的项目比下来。所有actix 名下的项目，无论是actix-web还是 actix-net 我都花心思设计了，api也好，框架也好。每个项目我至少重写4-5次。我延伸了一些需求，一些新的写项目的方式与规律。我希望其他人看我的项目们的源码后收到启发，更上一层楼。现在我觉得支持actix没意思，在rust社区没意思。&lt;br/&gt;&lt;br/&gt;我不干开源了。&lt;br/&gt;&lt;br/&gt;备注： 我把actix-net 和 actix-web放到我私人的github上了。我会过几天做决定。我不想我的东西变成幽灵般的存在，要是有新的维护人员的话，他们必须明白怎么运作，那些已经或有可能忙着其他项目的人不合适。所以我现在的打算是把项目设到私人然后删除，跑分也会会被删除。除非有人有更好的主意。&lt;br/&gt;&lt;br/&gt;所有事情终将结束，一路上很有意思但现在该翻篇了。生活本该活的有意思。&lt;/blockquote&gt;&lt;p&gt;对于Nikolay的最终决定，我只能表示理解和尊重。&lt;/p&gt;&lt;p&gt;最后一句话，大家共勉：&lt;/p&gt;&lt;p&gt;&lt;b&gt;No matter your opinion on the whole technical discussion people should be treated with respect.&lt;/b&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2020-01-18-103353305</guid>
<pubDate>Sat, 18 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>【Rust水群夜话】盘点Rust 官方团队2019年进展</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2020-01-11-102322674.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102322674&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8a4ca27a9621448694eb55636fb5dcc4_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;夫天地者，万物之逆旅也；光阴者，百代之过客也。而浮生若梦，为欢几何。&lt;/blockquote&gt;&lt;p&gt;一年又过去了。&lt;/p&gt;&lt;p&gt;在Rust水群中，闲聊起Rust团队这一年的Roadmap进展，正好野喵君 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/ed03ecf35614762b5798badcee012e3d&quot; data-hash=&quot;ed03ecf35614762b5798badcee012e3d&quot; data-hovercard=&quot;p$b$ed03ecf35614762b5798badcee012e3d&quot;&gt;@CrLF0710&lt;/a&gt; 常年驻守Rust官方前哨，就即兴采访了一下，随之整理成贴，谓之水群夜话。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;b&gt;我Rust我骄傲： &lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;野喵君，Rust团队2019年的目标完成度如何？就是指2019 RoadMap。 &lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;野喵君： &lt;/b&gt;&lt;/p&gt;&lt;p&gt;官方RoadMap在这里：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.rust-lang.org/2019/04/23/roadmap.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust&amp;#39;s 2019 roadmap | Rust Blog&lt;/a&gt;   我们一个个来看。&lt;/p&gt;&lt;p&gt;首先，Theme Maturity 没完成。也就是，2019年关键字：成熟。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-73a6ffe31fa66be13b00620da73fb09d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;773&quot; data-rawheight=&quot;382&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;773&quot; data-original=&quot;https://pic2.zhimg.com/v2-73a6ffe31fa66be13b00620da73fb09d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-73a6ffe31fa66be13b00620da73fb09d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;773&quot; data-rawheight=&quot;382&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;773&quot; data-original=&quot;https://pic2.zhimg.com/v2-73a6ffe31fa66be13b00620da73fb09d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-73a6ffe31fa66be13b00620da73fb09d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Governance 工作组做了点事，把Aturon之前创建的各种无效组织进行了清理。Governance 工作组现在由Nikomatsakis直接管理。大概做了以下的工作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;团队日常沟通工具确定由irc转到&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zulipchat.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Zulip&lt;/a&gt;。&lt;/li&gt;&lt;li&gt;新的协作方式正在试点，一句话总结就是：&lt;b&gt;项目任务落实到人头上，由具体的人跟踪项目，谁的孩子谁抱走。每个人禁止负责超出自己管理能力的过多项目。&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;最主要，是把2018 edition的计划完成了。包括Async/Await和NLL，其中NLL后续清理工作持续到1.40~1.41版本。&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;RLS 2.0 进展比较大。自从nrc被PingCAP挖走以后，rls处于停滞状态，后来Rust团队挖来了intellij-rust的开发者，也就是rust-analyzer的开发者过来，那么rust-analyzer就是RLS2.0了。&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;我Rust我骄傲： &lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;那 Long-standing requests 进展如何？&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;野喵君：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bef0ca5612a49e40bce35d29c8c9562e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;793&quot; data-rawheight=&quot;425&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;793&quot; data-original=&quot;https://pic3.zhimg.com/v2-bef0ca5612a49e40bce35d29c8c9562e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bef0ca5612a49e40bce35d29c8c9562e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;793&quot; data-rawheight=&quot;425&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;793&quot; data-original=&quot;https://pic3.zhimg.com/v2-bef0ca5612a49e40bce35d29c8c9562e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-bef0ca5612a49e40bce35d29c8c9562e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt;关于Cargo和Custom Registry也做了点事。&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;DCjanus此时插话道：custom registry早就有了，但是一直没有成熟的部署方案。&lt;/blockquote&gt;&lt;p&gt;2.  Const Generics的核心功能有些停滞，但是周边Bug清理还在继续做。Const Fn在2019年进展不错。关键是Const Generics要依赖最新的推理引擎（Niko实现的chalk），但是Niko事情又太多，最主要是要协助完成Async/Await，而Chalk没几个人能完成，所以就耽误了。&lt;/p&gt;&lt;p&gt;3. UCG（Unsafe Code Guidelines）今年也做了不少事，主要是由Ralfjung来带领。2019年文档有所进展，但是没有形成RFC。总之一句话：&lt;b&gt;不，你不能像写C一样写Rust&lt;/b&gt;。这是在安全维度上。&lt;/p&gt;&lt;p&gt;4. 另外Rust语言团队的副Leader，Joshtripletts正在推进 C语言等同（C Parity），让Unsafe Rust可以在各个场景下使用。用另一句话来说：&lt;b&gt;你可以像写C一样写Rust&lt;/b&gt;。这是在语法和开发体验维度上，这样Unsafe Rust的表达力就可以有所提升。&lt;/p&gt;&lt;p&gt;5. 关于特化（Specialization），最近好像打算迈出一小步，但是还没有开始，预计2个月左右会有消息。&lt;/p&gt;&lt;p&gt;6.  还想顺便黑一下Rust的几个工作组。四个工作组（CLI/ 网络/ WASM/嵌入式）是在之前Aturon领导下创建的，但是现在Aturon因为一些原因修养身心，这些工作组就有些涣散。&lt;/p&gt;&lt;p&gt;&lt;b&gt;我Rust我骄傲&lt;/b&gt;：&lt;/p&gt;&lt;blockquote&gt;我插一句嘴，虽然网络工作组现在已经名存实亡，但是这些人还在，比如async-std，就是之前网络工作组的人带头参与开发的。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;野喵君：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Cli工作组，比较消极怠工。&lt;/p&gt;&lt;p&gt;WebAssembly工作组，目前由Mozilla外派可能在完成一些WASI相关的工作。&lt;/p&gt;&lt;p&gt;嵌入式工作组，Leader在忙别的事，其他人员也比较怠工，但还是每个月有所产出吧。&lt;/p&gt;&lt;p&gt;&lt;b&gt;我Rust我骄傲&lt;/b&gt;：&lt;/p&gt;&lt;blockquote&gt;野喵君，看你黑的，我都感觉Rust药丸了。。。 &lt;br/&gt;队伍大了，不好带了！&lt;br/&gt;好了，感谢来自Rust官方前哨的野喵同志带回来的最新消息。&lt;br/&gt;看来Rust 2020年还有很多要完善的，我们期待Rust更好。&lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;下期夜话，再见！&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2020-01-11-102322674</guid>
<pubDate>Sat, 11 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>《Rust Quiz 解读》汇总</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2020-01-07-101354383.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/101354383&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-45a4edeedfe0d38b17f5af81d07c26a1_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;一年前，在RustFest 2018大会上Alex Crichton 和 David Tolnay两位大佬共同进行了轻演讲，主题是《Rust Quiz》。我看到他们的视频和源码之后，非常感兴趣，于是做了一套Rust Quiz解读。&lt;/p&gt;&lt;p&gt;当然，官方也有一些提示和解读，但是我这个解读可能更加详尽一些。之前的文章比较分散，现在把这些文章做个汇总。&lt;/p&gt;&lt;p&gt;一年过去了，再回头看看这些Quiz，还是挺有意思，如何后续有时间，我会继续完善和提出新的Quiz。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/dtolnay/rust-quiz&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-quiz源码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//dtolnay.github.io/rust-quiz/18&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线练习和解答&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DQtDj9R6vtA8%26index%3D6%26list%3DPLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW%26t%3D0s&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;视频&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51304039&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读： Quiz 1&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51366804&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读： Quiz 2&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51433417&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 3&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51560682&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 4&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51616607&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 5&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51683754&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 6&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51759112&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 7&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51809530&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 8&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51891075&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 9&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51948290&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 10&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52032027&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：「付费阅读」 Rust Quiz 解读：Quiz 11&lt;/a&gt;&lt;p&gt;注意：Quiz11 曾经为付费阅读文章，但是我把原文给丢了，只剩下了PDF，所以，去百度网盘下载吧。&lt;/p&gt;&lt;p&gt;链接: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1g-xBstayyc4pChBpwq8gGw&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1g-xBst&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ayyc4pChBpwq8gGw&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; 提取码: xeq5 &lt;/p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52098828&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 12&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52189029&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 13&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52418867&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 14&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52508991&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 15&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52607988&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 16&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52608592&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 17&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52609791&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 18&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52661087&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 19&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52772684&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 20&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52986963&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 21&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53599961&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_180x120.jpg&quot; data-image-width=&quot;1073&quot; data-image-height=&quot;598&quot; class=&quot;internal&quot;&gt;张汉东：Rust Quiz 解读：Quiz 22&lt;/a&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2020-01-07-101354383</guid>
<pubDate>Tue, 07 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>分享：如何在阅读Rust项目源码中学习</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-10-14-86352307.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86352307&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1899a8ccbe3f918f6324a2082dcbd7af_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;今天做了一个Substrate相关的小分享，公开出来。&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;因为我平时也比较忙，昨天才选定了本次分享的主题，准备比较仓促，细节可能不是很充足，但分享的目的也是给大家提供一个学习的思路，更多的细节大家可以在平时学习中自行探索。&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;以下正文，阅读时间10分钟左右。&lt;/p&gt;&lt;hr/&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d06e29975446c05851dc1aa61c7a6e16_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;846&quot; data-rawheight=&quot;628&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;846&quot; data-original=&quot;https://pic3.zhimg.com/v2-d06e29975446c05851dc1aa61c7a6e16_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d06e29975446c05851dc1aa61c7a6e16_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;846&quot; data-rawheight=&quot;628&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;846&quot; data-original=&quot;https://pic3.zhimg.com/v2-d06e29975446c05851dc1aa61c7a6e16_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-d06e29975446c05851dc1aa61c7a6e16_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;今天我要分享的内容呢，是《如何在阅读Rust项目源码中学习》，一共分成两大部分内容。 &lt;/p&gt;&lt;p&gt;想要在阅读源码中学习，首先得学会如何阅读源码。然后才是在源码中学习。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d9c252192eba22f38d38e005bc68efff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;851&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;851&quot; data-original=&quot;https://pic4.zhimg.com/v2-d9c252192eba22f38d38e005bc68efff_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d9c252192eba22f38d38e005bc68efff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;851&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;851&quot; data-original=&quot;https://pic4.zhimg.com/v2-d9c252192eba22f38d38e005bc68efff_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-d9c252192eba22f38d38e005bc68efff_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;那么如何阅读Rust项目源码呢？&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3712c5b528788e22187c07f4da082a29_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;840&quot; data-rawheight=&quot;532&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;840&quot; data-original=&quot;https://pic2.zhimg.com/v2-3712c5b528788e22187c07f4da082a29_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3712c5b528788e22187c07f4da082a29_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;840&quot; data-rawheight=&quot;532&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;840&quot; data-original=&quot;https://pic2.zhimg.com/v2-3712c5b528788e22187c07f4da082a29_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3712c5b528788e22187c07f4da082a29_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;其实阅读源码和读一本书是一样的。我们是如何阅读一本书的呢？&lt;/p&gt;&lt;p&gt;第一步，是找书。你选择一本书去学习，是因为你有一个学习目标。&lt;/p&gt;&lt;p&gt;所以，阅读源码也是一样的，先确定自己的学习小目标。&lt;/p&gt;&lt;p&gt;确定一个小目标，非常关键。 如果没有目标，就会迷失在纷繁复杂的代码里，只有确定了目标，你才能从源码中发现线索。&lt;/p&gt;&lt;p&gt;但确定了目标之后，我们还不能马上就陷入到细节中。我们在选择好一本书之后，第一眼要看它的目录和文前。 这样有助于我们从整体上来把握整本书的内容。&lt;/p&gt;&lt;p&gt;所以，第二步就是要从整体出发。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4572b4077ea97f4eee54865b623b34e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;821&quot; data-rawheight=&quot;619&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;821&quot; data-original=&quot;https://pic3.zhimg.com/v2-4572b4077ea97f4eee54865b623b34e6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4572b4077ea97f4eee54865b623b34e6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;821&quot; data-rawheight=&quot;619&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;821&quot; data-original=&quot;https://pic3.zhimg.com/v2-4572b4077ea97f4eee54865b623b34e6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-4572b4077ea97f4eee54865b623b34e6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;那Rust项目源码的结构是什么呢？&lt;/p&gt;&lt;p&gt;首先肯定是它的包组织结构。&lt;/p&gt;&lt;p&gt;现代化的编程语言，要考虑到协作和开发效率，良好的包管理和模块化是必不可少的。Rust语言作为现代化的编程语言，自然全都包含了。但它最突出的其实就是包管理工具，Cargo。&lt;/p&gt;&lt;p&gt;Cargo其实已经突破了包管理工具，它其实已经算是一个工作流工具了。而Cargo管理的包，在rust里就叫crate，它是编译的最小单元。&lt;/p&gt;&lt;p&gt;要确定一个Rust开源项目代码写的好不好，首先要看它的组织结构，是不是按crate来划分的。像Substrate源码就划分的非常好，这样细粒度的划分也极大地提升了可读性。&lt;/p&gt;&lt;p&gt;所以，阅读一个Rust项目之前，先要了解Rust包管理、模块化等相关概念。关于Cargo的资料可以在&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//crates.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;crates.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;中找到详细的文档。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a255a0cf24472f102e4b4564d7d54abb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;832&quot; data-rawheight=&quot;574&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;832&quot; data-original=&quot;https://pic4.zhimg.com/v2-a255a0cf24472f102e4b4564d7d54abb_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a255a0cf24472f102e4b4564d7d54abb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;832&quot; data-rawheight=&quot;574&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;832&quot; data-original=&quot;https://pic4.zhimg.com/v2-a255a0cf24472f102e4b4564d7d54abb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a255a0cf24472f102e4b4564d7d54abb_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;一个项目的结构，除了最直观的模块组织结构之外，还有一个内在的结构，那就是抽象架构。&lt;/p&gt;&lt;p&gt;抽象架构是和程序想表达的业务思想相关联的。要分析一个项目的抽象架构，必须从两个方面着手：&lt;/p&gt;&lt;p&gt;1. 业务/领域知识&lt;/p&gt;&lt;p&gt;2. 所用语言的抽象工具。在Rust里呢，就是trait、泛型和结构体、枚举&lt;/p&gt;&lt;p&gt;所以，在阅读源码之前，先得对这两方面的知识有所了解。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d8e8d2427e4ba0681d1018db2dab17b4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;821&quot; data-rawheight=&quot;543&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;821&quot; data-original=&quot;https://pic1.zhimg.com/v2-d8e8d2427e4ba0681d1018db2dab17b4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d8e8d2427e4ba0681d1018db2dab17b4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;821&quot; data-rawheight=&quot;543&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;821&quot; data-original=&quot;https://pic1.zhimg.com/v2-d8e8d2427e4ba0681d1018db2dab17b4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d8e8d2427e4ba0681d1018db2dab17b4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;那么接下来，我们以substrate-network为例来实践一下上面的方法。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-97907bba515dae56a5080673106cec4e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;506&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;810&quot; data-original=&quot;https://pic3.zhimg.com/v2-97907bba515dae56a5080673106cec4e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-97907bba515dae56a5080673106cec4e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;810&quot; data-rawheight=&quot;506&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;810&quot; data-original=&quot;https://pic3.zhimg.com/v2-97907bba515dae56a5080673106cec4e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-97907bba515dae56a5080673106cec4e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;首先，我们来确定一个小目标。 &lt;/p&gt;&lt;p&gt;需要了解如何使用substrate框架写上层的应用，有很多资料，包括一块链习这个课程。但是如果要写更复杂的项目，就需要往深入探索。&lt;/p&gt;&lt;p&gt;拿我自己来说，我对libp2p就比较好奇。有人说，libp2p是未来的web协议，虽然这话有点夸张，但也说明了一个趋势。十多年前，我刚开始学习网络相关内容的时候，接触的是C/S结构，但是现在，网络已经开始向去中心化迁移，分布式对等网络很难说不会成为主流。所以我对libp2p比较感兴趣。&lt;/p&gt;&lt;p&gt;但是在深入libp2p之前，我想知道它是如何使用的，所以，substrate的network crate正好是一个起点。&lt;/p&gt;&lt;p&gt;那么就定了这个小目标：想要通过阅读network crate来了解libp2p。 &lt;/p&gt;&lt;p&gt;正好趁这次分享的机会，来了解下libp2p。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ae85bc4e2d15fe6f4bc7a073ef843c62_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;835&quot; data-rawheight=&quot;594&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;835&quot; data-original=&quot;https://pic3.zhimg.com/v2-ae85bc4e2d15fe6f4bc7a073ef843c62_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ae85bc4e2d15fe6f4bc7a073ef843c62_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;835&quot; data-rawheight=&quot;594&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;835&quot; data-original=&quot;https://pic3.zhimg.com/v2-ae85bc4e2d15fe6f4bc7a073ef843c62_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-ae85bc4e2d15fe6f4bc7a073ef843c62_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在确定了小目标之后，我们就来观察一下具体的代码组织结构了。先来看看substrate整个项目的组织结构。&lt;/p&gt;&lt;p&gt;首先它是一个大的workspace，也就是说，它包含了很多的子crate。这是非常好的代码组织习惯，不愧是substrate。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c056d6ceb89e94154746136871f1f700_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;841&quot; data-rawheight=&quot;634&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;841&quot; data-original=&quot;https://pic1.zhimg.com/v2-c056d6ceb89e94154746136871f1f700_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c056d6ceb89e94154746136871f1f700_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;841&quot; data-rawheight=&quot;634&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;841&quot; data-original=&quot;https://pic1.zhimg.com/v2-c056d6ceb89e94154746136871f1f700_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c056d6ceb89e94154746136871f1f700_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;接下来打开 core/network 的目录，可以看到，代码量其实不是很多。这就是划分为子crate的好处，让阅读代码的人，不会感到有太大压力。&lt;/p&gt;&lt;p&gt;通过Cargo.toml可以看得出来，这个库里依赖了哪些重要的库。libp2p是最基本的，最常用的serde序列化反序列化库，还有futures库，表示其代码里用到了异步功能，看版本是0.3，说明使用了Rust最新的异步语法。&lt;/p&gt;&lt;p&gt;通过这些初步的信息可以给我们留下一个整体的印象。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-264f4cfbf9614de5925dc1c7bc2a3366_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;804&quot; data-rawheight=&quot;532&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;804&quot; data-original=&quot;https://pic3.zhimg.com/v2-264f4cfbf9614de5925dc1c7bc2a3366_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-264f4cfbf9614de5925dc1c7bc2a3366_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;804&quot; data-rawheight=&quot;532&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;804&quot; data-original=&quot;https://pic3.zhimg.com/v2-264f4cfbf9614de5925dc1c7bc2a3366_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-264f4cfbf9614de5925dc1c7bc2a3366_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;接下来我们需要了解这个库的抽象架构。&lt;/p&gt;&lt;p&gt;抽象架构离不开业务领域知识。所以我们需要先去了解业务相关的知识，这里就不多说了，我们已经知道network库是substrate的底层网络组件，区块节点之间的通信和交易都将由它来提供底层的网络服务，包括交易池。&lt;/p&gt;&lt;p&gt;network是严重依赖于libp2p实现的。当然，这也是我选择这个库的原因，正好学习一下libp2p的用法。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cb2fef90232a05cc6d24f5ec96e5c773_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;832&quot; data-rawheight=&quot;545&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;832&quot; data-original=&quot;https://pic4.zhimg.com/v2-cb2fef90232a05cc6d24f5ec96e5c773_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cb2fef90232a05cc6d24f5ec96e5c773_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;832&quot; data-rawheight=&quot;545&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;832&quot; data-original=&quot;https://pic4.zhimg.com/v2-cb2fef90232a05cc6d24f5ec96e5c773_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-cb2fef90232a05cc6d24f5ec96e5c773_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;接下来要看看trait和结构体。&lt;/p&gt;&lt;p&gt;在Rust里，trait可以说是灵魂般的存在，它是抽象的基石。trait可以作为接口，也可以作为类型的限定，但我把它统一看作是一种「行为的抽象」。&lt;/p&gt;&lt;p&gt;而结构体，则是实体的抽象。&lt;/p&gt;&lt;p&gt;实体和行为，构成了这个世界。以这种视角来看待源码，理解起来更容易一些。&lt;/p&gt;&lt;p&gt;然后我们可以直接打开这个包的文档来看具体的结构体和trait。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1bf70209a9d15985f7c1ca155958d035_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;853&quot; data-rawheight=&quot;610&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;853&quot; data-original=&quot;https://pic2.zhimg.com/v2-1bf70209a9d15985f7c1ca155958d035_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1bf70209a9d15985f7c1ca155958d035_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;853&quot; data-rawheight=&quot;610&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;853&quot; data-original=&quot;https://pic2.zhimg.com/v2-1bf70209a9d15985f7c1ca155958d035_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-1bf70209a9d15985f7c1ca155958d035_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首先看一下这个trait，这只是公开的trait，但从这些trait中可以发现一些蛛丝马迹。&lt;/p&gt;&lt;p&gt;首先，这个包里包含了client的本地抽象，以及网络相关的上下文信息。&lt;/p&gt;&lt;p&gt;其次，还有用于节点发现的网络行为 DiscoveryBehaviour &lt;/p&gt;&lt;p&gt;还有交易池接口等等。&lt;/p&gt;&lt;p&gt;看到这里，你可以结合业务来思考一下，为什么要这么抽象。比如交易池为什么是个接口，为什么是个trait呢？这样的思考就可以帮助你学习如何用Rust来思考和抽象业务。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a2ae8276e5de58c697bfbb2804b9962c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;844&quot; data-rawheight=&quot;609&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;844&quot; data-original=&quot;https://pic1.zhimg.com/v2-a2ae8276e5de58c697bfbb2804b9962c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a2ae8276e5de58c697bfbb2804b9962c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;844&quot; data-rawheight=&quot;609&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;844&quot; data-original=&quot;https://pic1.zhimg.com/v2-a2ae8276e5de58c697bfbb2804b9962c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a2ae8276e5de58c697bfbb2804b9962c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;再来看结构体&lt;/p&gt;&lt;p&gt;你会发现很多和网络 networker相关的实体，包括Peerid，看到Peerid我很自然地想到了操作系统里的进程，每个进程都有进程ID，这样类比的话，理解起来就比较具象化，尤其是初次接触分布式网络的人。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2766d50f67c49759584a1d74ba8d4a1d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;837&quot; data-rawheight=&quot;604&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;837&quot; data-original=&quot;https://pic2.zhimg.com/v2-2766d50f67c49759584a1d74ba8d4a1d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2766d50f67c49759584a1d74ba8d4a1d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;837&quot; data-rawheight=&quot;604&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;837&quot; data-original=&quot;https://pic2.zhimg.com/v2-2766d50f67c49759584a1d74ba8d4a1d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-2766d50f67c49759584a1d74ba8d4a1d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;经过上面的探索，我们基本了解了network的一些抽象架构。但是对于libp2p的知识还是有些朦胧。&lt;/p&gt;&lt;p&gt;但是好在网上还有很多资料，可以让我们从libp2p有一个整体认知。&lt;/p&gt;&lt;p&gt;做分布式网络，要面对复杂的异构的网络环境。有句话怎么说来着，「计算机科学中的任何问题，都可以通过加上一层逻辑层来解决」。那么libp2p就是在传统的网络协议上，重新做了统一的抽象层。&lt;/p&gt;&lt;p&gt;就像右边这个图，在传统的tcp协议上，又加了secio加密层，yamux多路复用层等等。 重点在于多路复用，同一个端口就把所有的事干了。开发者再也不用去为了兼容复杂的网络环境去干那些脏活累活了，可以专心专注于业务。&lt;/p&gt;&lt;p&gt;这就是分层的好处。当然，libp2p还有很多功能，这里就不列了。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a64b13684bb98500c584119ab05599ed_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;825&quot; data-rawheight=&quot;628&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;825&quot; data-original=&quot;https://pic2.zhimg.com/v2-a64b13684bb98500c584119ab05599ed_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a64b13684bb98500c584119ab05599ed_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;825&quot; data-rawheight=&quot;628&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;825&quot; data-original=&quot;https://pic2.zhimg.com/v2-a64b13684bb98500c584119ab05599ed_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a64b13684bb98500c584119ab05599ed_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;经过这些梳理，然后再去看代码，线索就非常清晰了。&lt;/p&gt;&lt;p&gt;这份简单的脑图是我做PPT的时候同时整理出来的，大家可以根据这个思路自己去看看源码，自己去整理一下。&lt;/p&gt;&lt;p&gt;简单来说明一下这个结构。&lt;/p&gt;&lt;p&gt;network crate源码主要可以分成这么6个结构。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;service主要用于处理网络I/O和管理连接，也包括交易池的管理，广播交易什么的。&lt;/li&gt;&lt;li&gt;而discorery部分，主要定义了通用的网络行为，这里整合了所有的网络协议。用于发现节点。&lt;/li&gt;&lt;li&gt;protocol部分，是用于处理请求，主要是协议升级，比如从tcp按需给请求升级到相应的协议。这里面有一个substream 子流的概念，子流才是真正的请求。具体这里处理的时候使用了Rust的异步。&lt;/li&gt;&lt;li&gt;transpot是底层的公共传输基础，相当于是对libp2p底层的网络初始配置，比如配置yamux的多路复用之类。&lt;/li&gt;&lt;li&gt;chains是对本地客户端的抽象&lt;/li&gt;&lt;li&gt;config是网络初始化的一些配置。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;总的来说，这个库内容并不多。&lt;/p&gt;&lt;p&gt;但是看的过程中，发现了很多还不太懂的知识点，比如我罗列的这些问题列表。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-513cebff03f5f1eea9b8f7079759deca_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;589&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;830&quot; data-original=&quot;https://pic3.zhimg.com/v2-513cebff03f5f1eea9b8f7079759deca_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-513cebff03f5f1eea9b8f7079759deca_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;830&quot; data-rawheight=&quot;589&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;830&quot; data-original=&quot;https://pic3.zhimg.com/v2-513cebff03f5f1eea9b8f7079759deca_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-513cebff03f5f1eea9b8f7079759deca_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;交易池的具体细节是什么？优先级啊，还有什么双花交易啊，标准交易啊，这些如何体现？&lt;/p&gt;&lt;p&gt;yamux多路复用的细节，cossip协议和共识、kademlia算法和结构化网络、以及如何自定义网络协议等。&lt;/p&gt;&lt;p&gt;这些知识点，是从看源码过程中挖掘出来的，如果没有看这些源码，我根本不知道我不懂这些，甚至不知道这些知识点的存在。&lt;/p&gt;&lt;p&gt;这些问题也可以成为我后面深入学习的方向。&lt;/p&gt;&lt;h3&gt;小结&lt;/h3&gt;&lt;p&gt;希望这篇分享，能给大家带来一些启迪。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-10-14-86352307</guid>
<pubDate>Mon, 14 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>通告</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-09-13-82357718.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/82357718&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感谢大家订阅我的专栏。&lt;/p&gt;&lt;p&gt;Rust周报有段时间没有更新了，主要是本人这段时间事情比较多，没有抽出时间梳理。昨天看到有人问起，特此说明。&lt;/p&gt;&lt;p&gt;忙完这段时间，专栏会给大家带来更多精彩。&lt;/p&gt;&lt;p&gt;顺祝大家中秋快乐！&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-09-13-82357718</guid>
<pubDate>Fri, 13 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Facebook如何引入Rust</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-08-17-78549374.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/78549374&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c2c5f4a560bb472893b71db23185a769_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;今天刚看到Facebook内部meetup流出的Slides，原文标题很有意思：&lt;b&gt;Bringing Rust Home to Meet the Parents （带Rust去见父母）。&lt;/b&gt;该分享主要是讲了Facebook引入Rust的过程，我也没有看过Meetup的内容，&lt;b&gt;只是想通过Slides来解读并还原一下Facebook引入Rust的历程&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;Slides地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.google.com/presentation/d/1RLNyr3riO2LyqQsMAOvMMyGTllhx1wPmfkXXcbtOB00/edit%23slide%3Did.p&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;docs.google.com/present&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ation/d/1RLNyr3riO2LyqQsMAOvMMyGTllhx1wPmfkXXcbtOB00/edit#slide=id.p&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;hr/&gt;&lt;p&gt;该Topic的作者是一名资深的工程师，他在操作系统内核领域&lt;b&gt;使用C语言有30多年&lt;/b&gt;，入职Facebook三年。作者坦言：&lt;b&gt;C语言只是他趁手的工具，但不是他喜欢的工具&lt;/b&gt;。Facebook是他有意加入，为了学习在大规模的组织中如何工作。看得出来，是一名非常有独立思想的工程师。当他看到Facebook内部还没有人使用Rust，他就想，为什么不尝试引入Rust呢？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;引入的条件&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在大公司中引入新技术本身是一件非常困难的事情，更何况还是Facebook如此巨大的公司，而且Rust还是要替代C来做很多基础设施。所以，要想在Facebook中引入Rust，需要满足以下条件：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust不仅仅是「好」而已。它还需要在某些地方「突出地好（much better）」。（什么叫突出的好呢？在《从0到1》一书中有过相关的考量，那就是「十倍」的好）&lt;/li&gt;&lt;li&gt;在其他方面至少能持平现有技术（比如，持平C）。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;而且，引入新的语言不仅仅是技术问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;新语言具有潜在的风险：这个赌注是长期的，无法马上获得回报&lt;/li&gt;&lt;li&gt;大多数人对完成工作比使用新语言更加感兴趣&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此，必须让大家了解：Rust是胜任工作的最佳工具。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Rust的10倍优势&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;那么Rust的十倍优势是什么呢？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust可以在编译期检测到大量严重的错误。&lt;/li&gt;&lt;li&gt;编译期出错的成本要比生产时出错的成本低好几个数量级&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对于Facebook这种企业，生产时出错的成本可想而知会很高。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;引入的起点&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Facebook内部使用的主流语言是：Cpp、Java和Python。但其实有很多通晓多种语言的人，他们可以自由选择语言和技术。但他们通常都是务实的，在选择语言的时候，必须有充分的理由去选择它。&lt;/p&gt;&lt;p&gt;庞大的代码仓库，有数亿行代码。这些庞大的代码资源，都是通过自定义的专门工具来处理，从源码控制、构建、CI到测试、部署，以及监控和分析等生产基础设施。那么想引入Rust该从何入手？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;聪明的选择&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;他回顾了Rust的世界观：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;安全。安全是一切的基础。&lt;/li&gt;&lt;li&gt;新语言，意味着，新的项目，或者是实验性项目可以使用。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;等等。&lt;/p&gt;&lt;p&gt;同时，他思考，如何才能让Facebook内部这个庞大的生态系统感受到Rust的好呢？这是一个很好的出发点，于是他选择了一个「版本管理系统 Mercurial」。因为版本管理系统是在内部应用最广的，而且Mercurial之前是Python实现的，性能急需改进。&lt;/p&gt;&lt;p&gt;所以，用Rust从头开始实现源码版本控制系统的后端被提上了日程。于是就有了现在的 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/facebookexperimental/mononoke&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mononoke&lt;/a&gt; 项目（差不多快3年了）。&lt;/p&gt;&lt;p&gt;Mononoke项目的生产实践，证明了Rust值得进一步投资。并且，Rust帮助他们降低了Bug的成本。&lt;/p&gt;&lt;p&gt;Facebook运行中出问题是一个非常恐怖的事情，因为会造成很大的损失。所以FB在代码的质量上投入了大量的资源：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;代码审查&lt;/li&gt;&lt;li&gt;静态分析&lt;/li&gt;&lt;li&gt;测试基础设施&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;等等，这些属于内部开发循环。工程师们会在不同的上下文中切换，来修复其中的问题。而使用Rust，则可以减少内部循环中的大量错误，因此可以帮助工程师们减少不必要的上下文切换。&lt;/p&gt;&lt;p&gt;但是Rust也并不是万能的，如何量化那些未在编译期发现的Bug的成本呢？在这一点，Rust也给予了很大的帮助：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;升级了代码审查的体验：审查人员不需要关心底层的细节，只需要专注于更高层次的抽象架构设计。因为Rust的类型系统，和强调显式表达等特性。&lt;/li&gt;&lt;li&gt;降低了代码维护的风险。即便一个完全不了解业务背景的工程师（或者几个月之后的原作者）接手了一个Rust程序，在修改Bug的时候也能得心应手，因为有类型和生命周期（lifetime）约束等信息。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过这个实际的案例，他们明显地体会到了Rust的十倍优势，因此有更多人想使用Rust。&lt;/p&gt;&lt;p&gt;FB内部最先积极采用Rust的群体是Python开发者，它们想寻求性能上的改进，对于Rust推广者来说，这是一个惊喜的转变。&lt;/p&gt;&lt;p&gt;然后Rust就越来越受更多人关注了，最后是那些只追求于完成任务的群体，他们也开始尝试Rust。现在FB已经有很多高价值的项目采用Rust，比如最近流行的Libra。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Facebook在招人&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;并且该Topic作者还透露了一个重点信息：&lt;b&gt;Facebook在招Rust开发者&lt;/b&gt;！ Rust在Facebook的旅程才走了1%，需要更多的人参与，走完剩下的99%。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ec4f45c53ad73e44bfcf111693f3402a_b.jpg&quot; data-rawwidth=&quot;1142&quot; data-rawheight=&quot;625&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1142&quot; data-original=&quot;https://pic3.zhimg.com/v2-ec4f45c53ad73e44bfcf111693f3402a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ec4f45c53ad73e44bfcf111693f3402a_b.jpg&quot; data-rawwidth=&quot;1142&quot; data-rawheight=&quot;625&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1142&quot; data-original=&quot;https://pic3.zhimg.com/v2-ec4f45c53ad73e44bfcf111693f3402a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-ec4f45c53ad73e44bfcf111693f3402a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;小结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;在这次分享中，还包含了作者如何看待Rust发展前景中要解决的各种问题，这里就不细说了，感兴趣的去看Slides吧。后续如果有视频，我也会补上来链接。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;如果你想在自己的公司推广Rust，那么Facebook的这段经历可能对你有帮助。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;感谢阅读。&lt;/b&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-08-17-78549374</guid>
<pubDate>Sat, 17 Aug 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust官网翻译那些事</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-07-02-71899874.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/71899874&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-dae7b88292e96b0abe749562eae2226e_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;上个月17个号，&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.rust-lang.org/zh-CN&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust官网简体中文版&lt;/a&gt;上线了。本来计划在上线那几天就写这篇文章，可是被种种事情耽误了。今天终于抽时间来写下这篇纪念文。&lt;br/&gt;谨以此文感谢参与Rust官网翻译活动的每个小伙伴！&lt;/blockquote&gt;&lt;h2&gt;缘起&lt;/h2&gt;&lt;p&gt;Rust官网召集中文翻译这件事，最早是在日报小组内部讨论组由Mike（Rustcc坛主）发出来的。当时Mike说，要不要咱们翻译一下？我一想，官网那么多页面，这翻译得多久，于是就跟Mike说，我恐怕没有时间搞这个事。然后就搁置了。&lt;br/&gt;&lt;br/&gt;过了两天，Aimee（from 秘猿）在社区QQ群里也在召集中文译者，想把这事推动起来。此时，我又一想，也许召集大伙一起干这事，可以高效完成这件事。而且，如果官网有了中文的支持，对于Rust在中国的推广更有好处。于是我和Mike一起创建了一个翻译小组群，开始在社区招募感兴趣的译者参与。与此同时，联络Aimee。此时Aimee已经和Rust官方网站翻译负责人Florian联系好了。&lt;/p&gt;&lt;p&gt;最初还以为不会有很多人参与，没想到大家的热情还挺高涨，而且远在澳洲的Rust tg群群主Xidorn Quan也热心参与了进来。由此还发现原来社区里默默隐藏着一个翻译组织（主要成员Aaran Xu和OlingCat），&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rust-lang-cn&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/rust-lang-cn&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，已经翻译了不少Rust官方的相关资源。后来就干脆以该组织为基地，来组织这次官网的翻译工作。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1db1d73533f7ec377da36c03a7310b72_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3268&quot; data-rawheight=&quot;2556&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3268&quot; data-original=&quot;https://pic3.zhimg.com/v2-1db1d73533f7ec377da36c03a7310b72_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1db1d73533f7ec377da36c03a7310b72_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3268&quot; data-rawheight=&quot;2556&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3268&quot; data-original=&quot;https://pic3.zhimg.com/v2-1db1d73533f7ec377da36c03a7310b72_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1db1d73533f7ec377da36c03a7310b72_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;于是翻译就这样顺利开始进行了。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-54d24d022b8be82072770df4bf72c866_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1200&quot; data-rawheight=&quot;991&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1200&quot; data-original=&quot;https://pic3.zhimg.com/v2-54d24d022b8be82072770df4bf72c866_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-54d24d022b8be82072770df4bf72c866_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1200&quot; data-rawheight=&quot;991&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1200&quot; data-original=&quot;https://pic3.zhimg.com/v2-54d24d022b8be82072770df4bf72c866_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-54d24d022b8be82072770df4bf72c866_b.jpg&quot;/&gt;&lt;figcaption&gt;成员和协作方式&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;协作&lt;/h2&gt;&lt;p&gt;Rust官网多语言支持是通过Fluent和Pontoon共同支持完成的。关于Fluent可以参考我这篇文章: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/67402361&quot; class=&quot;internal&quot;&gt;Rust I18N 方案梳理&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;简单来说，Fluent是一个翻译规范，它的特点是翻译和项目分离，并且可以独立于源语言（比如说英语），让翻译人员释放更多的自然语言表现力。&lt;/p&gt;&lt;p&gt;在Rust官网源码中，使用flt文件对应不同的页面内容，为翻译工作的协作也提供了方便。再配合Pontoon这个所见即所得的编辑工具，可以很方便地进行各种语言翻译工作的审校和协作。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-26623857e9a48d5780c7e563d03aec01_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;1614&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1000&quot; data-original=&quot;https://pic2.zhimg.com/v2-26623857e9a48d5780c7e563d03aec01_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-26623857e9a48d5780c7e563d03aec01_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;1614&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1000&quot; data-original=&quot;https://pic2.zhimg.com/v2-26623857e9a48d5780c7e563d03aec01_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-26623857e9a48d5780c7e563d03aec01_b.jpg&quot;/&gt;&lt;figcaption&gt;Rust官网github源码i18n文件&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在最初敲定协作方案的时候，大家下意识地都默认使用GitHub fork仓库的方式，因为大家都是技术开发，习惯了以往的这种方式。很快，我们敲定了协作的方式： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;分为翻译和校对两种角色。&lt;/li&gt;&lt;li&gt;按flt文件来领任务。&lt;/li&gt;&lt;li&gt;先翻译，后通过发PR的方式来进行校对。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;基本上任务推进的非常快、非常自然。两三天的功能基本上页面都翻译完了。虽然速度很快，但是大家都很认真对待这件事。常常因为某个术语的翻译而讨论半天，所以大部分时间都在校对上。&lt;/p&gt;&lt;p&gt;比如官网首页的两处翻译。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Rust的宣传语：「Rust，一门赋予每个人构建可靠且高效软件能力的语言。」&lt;/li&gt;&lt;li&gt;npm工程师对Rust的赞美： 「“对 Rust 最大的赞美，就是它让我太无聊了。这太令人惊叹了！”  – Chris Dickinson，来自 npm 公司的工程师」&lt;/li&gt;&lt;/ol&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7ee189661c8a3360278c8f34b2608de5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1240&quot; data-rawheight=&quot;652&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1240&quot; data-original=&quot;https://pic2.zhimg.com/v2-7ee189661c8a3360278c8f34b2608de5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7ee189661c8a3360278c8f34b2608de5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1240&quot; data-rawheight=&quot;652&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1240&quot; data-original=&quot;https://pic2.zhimg.com/v2-7ee189661c8a3360278c8f34b2608de5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7ee189661c8a3360278c8f34b2608de5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Rust的宣传语，原文是「A language empowering everyone to build reliable and efficient software.」这句话原文含有「赋能（empowering）」之意。短短的几个字，大家讨论了半天，最终才决定了现在这句话。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-338e061c04fa119b769a44d35cfad7f0_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2570&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2570&quot; data-original=&quot;https://pic1.zhimg.com/v2-338e061c04fa119b769a44d35cfad7f0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-338e061c04fa119b769a44d35cfad7f0_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2570&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2570&quot; data-original=&quot;https://pic1.zhimg.com/v2-338e061c04fa119b769a44d35cfad7f0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-338e061c04fa119b769a44d35cfad7f0_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;npm工程师对于Rust的赞美，不了解Rust的人恐怕看了之后会一头雾水。最初的翻译是：「对Rust最大的赞美，就是它太无聊了，这是令人惊叹的赞美」。&lt;/p&gt;&lt;p&gt;其实，这句话是出自npm的一次分享，大概意思是：他们用Rust写了一个服务，在线上稳定运行了一年半，他们几乎都要忘记这个服务的存在了。所以，他说Rust让他太无聊了，连修Bug的机会都没有。他同时也十分惊叹Rust语言的这种能力，如果是其他语言写的程序，他肯定就不会无聊了。&lt;/p&gt;&lt;p&gt;所以，这句话的翻译最终改为了：「对 Rust 最大的赞美，就是它让我太无聊了。这太令人惊叹了！」&lt;/p&gt;&lt;p&gt;除了首页的这两处之外，还有很多地方大家都十分认真地参与了讨论和建议。最终展现在大家面前的翻译结果，不敢说信雅达，但一定是做到了正确和通顺。&lt;/p&gt;&lt;h2&gt;交付&lt;/h2&gt;&lt;p&gt;本来以为翻译完，直接通过GitHub给官方提交PR即可。但是后来和Florian聊天才发现，官方本就没有打算让翻译小队通过GitHub PR的方式来交付翻译成果。&lt;/p&gt;&lt;p&gt;所以，只能通过Pontoon来直接交付。不过，经过GitHub的一番严格认真的协作，我们只需要复制粘贴即可。然后官方运维组成员Manish，会处理翻译好的文件。经过和Manish的交流，得知官方源码仓库和Pontoon已经设置了自动同步，Pontoon这边的修改，都会定时自动地同步到官方源码仓库。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8c215ba3551effe91fa2868bd9efeeff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;5114&quot; data-rawheight=&quot;2662&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;5114&quot; data-original=&quot;https://pic4.zhimg.com/v2-8c215ba3551effe91fa2868bd9efeeff_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8c215ba3551effe91fa2868bd9efeeff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;5114&quot; data-rawheight=&quot;2662&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;5114&quot; data-original=&quot;https://pic4.zhimg.com/v2-8c215ba3551effe91fa2868bd9efeeff_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8c215ba3551effe91fa2868bd9efeeff_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;当我们把翻译成果交付到Pontoon上面之后，把Pontoon的链接公布到社区里，让更多的人来参与校对。事实证明，这个决定是正确的。有好几个社区的热心朋友，虽然没有加入翻译小组的QQ群，但是可以通过GitHub登录到Pontoon直接参与审校，并且提出了好几个漂亮的改进翻译和错误。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8592ca724a1d1fa9e4b9cdbc75b77370_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2126&quot; data-rawheight=&quot;2608&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2126&quot; data-original=&quot;https://pic1.zhimg.com/v2-8592ca724a1d1fa9e4b9cdbc75b77370_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8592ca724a1d1fa9e4b9cdbc75b77370_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2126&quot; data-rawheight=&quot;2608&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2126&quot; data-original=&quot;https://pic1.zhimg.com/v2-8592ca724a1d1fa9e4b9cdbc75b77370_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-8592ca724a1d1fa9e4b9cdbc75b77370_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;Rust的开源文化，深深的影响着社区。包括这次翻译活动，也是一次开源协作的尝试。最终的翻译成果，是中文社区共同完成的。最后，再次感谢每个参与翻译的朋友。&lt;/p&gt;&lt;p&gt;这次翻译活动，也带动了台湾Rust群组翻译官网的兴致和热情，台湾繁体翻译也在近日上线了官网。&lt;/p&gt;&lt;p&gt;预告：Rust中文社区翻译小组，还在计划翻译官方Rustc导读，感兴趣的朋友也可以参与进来。可以加QQ群：7 1 6 3 4 8 0 5 6。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-07-02-71899874</guid>
<pubDate>Tue, 02 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「源码阅读」qrcode-rs源码学习分享</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-06-15-69269688.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69269688&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f2b909b8160155ad662ea6e38e98ab48_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;本篇的分享是基于&lt;a href=&quot;https://zhuanlan.zhihu.com/p/59517478&quot; class=&quot;internal&quot;&gt;混沌学社&lt;/a&gt;的某位学员，近两周的学习成果分享。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;他的学习任务是： &lt;/p&gt;&lt;p&gt;阅读 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/kennytm/qrcode-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;qrcode-rs&lt;/a&gt; （该代码的作者是Rust运维团队成员，也是Rust重要贡献者之一）的代码去学习。主要目的不是为了学习如何创建二维码，而是为了通过阅读一个实际的项目，去学习利用Rust思维抽象问题的方法，以及训练如何阅读Rust项目代码，在阅读源码中学习。&lt;/p&gt;&lt;p&gt;下面是脑图分享，目前只有图。&lt;/p&gt;&lt;p&gt;完整清晰图片地址： &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news/blob/master/img/%25E4%25BA%258C%25E7%25BB%25B4%25E7%25A0%2581%25E7%2594%259F%25E6%2588%2590.png&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/RustStudy/ru&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;st_daily_news/blob/master/img/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90.png&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;br/&gt;结构：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-62e311bfd6ae569cef5252778dff65f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3137&quot; data-rawheight=&quot;4207&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3137&quot; data-original=&quot;https://pic1.zhimg.com/v2-62e311bfd6ae569cef5252778dff65f4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-62e311bfd6ae569cef5252778dff65f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3137&quot; data-rawheight=&quot;4207&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3137&quot; data-original=&quot;https://pic1.zhimg.com/v2-62e311bfd6ae569cef5252778dff65f4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-62e311bfd6ae569cef5252778dff65f4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-06-15-69269688</guid>
<pubDate>Sat, 15 Jun 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
