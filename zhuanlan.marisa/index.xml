<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>雾雨魔法店</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/</link>
<description>http://zhuanlan.zhihu.com/marisa/20419321</description>
<language>zh-cn</language>
<lastBuildDate>Wed, 05 Feb 2020 00:41:51 +0800</lastBuildDate>
<item>
<title>凉爽的 CuTT 介绍（2）--带有路径构造子的归纳类型</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2020-02-04-104929162.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/104929162&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;文本译自&lt;a href=&quot;https://www.zhihu.com/people/67ebe1bd8e4a63f17a42572e40afaac7&quot; class=&quot;internal&quot;&gt;@千里冰封 你懂吗&lt;/a&gt;介绍&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/2019/10-01-Cutt2.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;立方类型论&lt;/a&gt;的文章。&lt;/blockquote&gt;&lt;p&gt;回忆&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103565709&quot; class=&quot;internal&quot;&gt;上一章&lt;/a&gt;，我们有了高维的路径（方形），而且可以通过路径应用来归约（降低）它们的维度。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;{-# OPTIONS --cubical --allow-unsolved-metas #-}
module 2019-10-1-Cutt2 where
open import Cubical.Core.Everything
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import Agda.Builtin.Nat

variable A : Set&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回忆经典的整数定义（点击 &lt;code&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/lagda/Cubical.Data.Int.Base.html%23142&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 查看）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;import Cubical.Data.Int using (Int)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这玩意儿看着很不爽，因为它不对称——以数字 2 为例，&lt;code&gt;+2&lt;/code&gt; 是 &lt;code&gt;pos 2&lt;/code&gt;，而 &lt;code&gt;-2&lt;/code&gt; 却是 &lt;code&gt;negsuc 1&lt;/code&gt;。证明这种不对称整数的加法交换律很让人蛋疼（瞅一眼&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ice1k/Theorems/blob/master/src/Ints/Add/Assoc.agda&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这儿&lt;/a&gt;） （由于整数的定义不是对称的，因此其上的运算自然也不对称）。&lt;/p&gt;&lt;p&gt;我们想要一种对称的整数定义，它大概是这样的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;data Int : Set where
  pos : Nat -&amp;gt; Int
  neg : Nat -&amp;gt; Int&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过这样我们就有两个零了：&lt;code&gt;pos 0&lt;/code&gt;和&lt;code&gt;neg 0&lt;/code&gt;。我们&lt;b&gt;之所以&lt;/b&gt;把经典的整数定义成不对称的，是为了避免存在两种零，虽然从数学上讲零既非正数也非负数（从另一个角度上也可以说是只有正零而没有负零）。&lt;/p&gt;&lt;p&gt;于是问题来了：&lt;b&gt;我们能告诉 Agda&lt;/b&gt; &lt;b&gt;&lt;code&gt;pos 0&lt;/code&gt;&lt;/b&gt; &lt;b&gt;等于&lt;/b&gt; &lt;b&gt;&lt;code&gt;neg 0&lt;/code&gt;&lt;/b&gt; &lt;b&gt;吗？&lt;/b&gt; 如果可以，那上面的定义就很有用了！&lt;/p&gt;&lt;p&gt;答案当然是：&lt;b&gt;确定！一定！以及肯定可以！&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;路径构造子&lt;/h2&gt;&lt;p&gt;回忆一下，路径它：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;被定义为一种函数，其定义域为间点，陪域为端点的类型&lt;/li&gt;&lt;li&gt;可以视作一种等价关系&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我们可以为数据类型添加&lt;b&gt;路径构造子（Path Constructor）&lt;/b&gt;，比如添加 &lt;code&gt;pos 0 ≡ neg 0&lt;/code&gt;，它是一条映射到 &lt;code&gt;Int&lt;/code&gt; 的路径（并且如果这种路径有定义，那么它就是一个从间点到 &lt;code&gt;Int&lt;/code&gt; 的函数）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;zro : pos 0 ≡ neg 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们用函数类型重写 &lt;code&gt;zro&lt;/code&gt; 的类型（&lt;code&gt;zro&lt;/code&gt; 本身就有一个路径类型），那么就得到了一个构造子式的类型（它的返回类型就是它所构造的类型）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;zroFn : I -&amp;gt; Int
zroFn i = zro i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于 &lt;code&gt;zro&lt;/code&gt; 返回一个 &lt;code&gt;Int&lt;/code&gt; 和它的构造子，因此我们称之为&lt;b&gt;路径构造子（Path Constructor）&lt;/b&gt;。在介绍路径构造子的高级属性前，我们已经知道很多有趣的东西了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;posneg : pos 0 ≡ neg 0
posneg = zro

negpos : neg 0 ≡ pos 0
negpos i = zro (~ i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;路径约束&lt;/h2&gt;&lt;p&gt;路径构造子的特殊之处在于，当带有路径构造子的数据类型出现在模式匹配从句的左侧时， 它们也&lt;b&gt;约束（Constraint）&lt;/b&gt;了你的模式匹配从句。以 &lt;code&gt;succ&lt;/code&gt; 函数为例， 在为 &lt;code&gt;Int&lt;/code&gt; 写出 &lt;code&gt;succ&lt;/code&gt; 函数时，我们需要对路径构造子进行模式匹配：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;succ : Int -&amp;gt; Int
succ (pos x) = pos (suc x)
succ (neg zero) = pos 1
succ (neg (suc x)) = neg x
-- 上面三个从句很平凡

succ (zro i) = -- 这种情况我们要返回什么？&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种情况的路径构造子的规则是，我们可以返回任何满足以下条件的东西（以 &lt;code&gt;Int&lt;/code&gt; 上的 &lt;code&gt;succ&lt;/code&gt; 为例）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;succ (zro i)&lt;/code&gt; 按照定义的等价性应被规约为：&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;succ (pos 0)&lt;/code&gt;（&lt;code&gt;pos 0&lt;/code&gt; 来自 &lt;code&gt;zro i0&lt;/code&gt;），当 &lt;code&gt;i0&lt;/code&gt; 被代入 &lt;code&gt;i&lt;/code&gt; 时&lt;/li&gt;&lt;li&gt;&lt;code&gt;succ (neg 0)&lt;/code&gt;（&lt;code&gt;neg 0&lt;/code&gt; 来自 &lt;code&gt;zro i1&lt;/code&gt;），当 &lt;code&gt;i1&lt;/code&gt; 被代入 &lt;code&gt;i&lt;/code&gt; 时&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;我们将此性质简称为「路径的端点需要被遵守」&lt;/p&gt;&lt;p&gt;而由于 &lt;code&gt;succ (pos 0)&lt;/code&gt; 和 &lt;code&gt;succ (neg 0)&lt;/code&gt; 均等于 &lt;code&gt;pos 1&lt;/code&gt;，因此 &lt;code&gt;zro&lt;/code&gt; 情况的唯一可能就是 &lt;code&gt;pos 1&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;succ : Int -&amp;gt; Int
succ (pos x) = pos (suc x)
succ (neg zero) = pos 1
succ (neg (suc x)) = neg x
succ (zro i) = pos 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上，Agda 的约束求解器可以求出此函数的一些从句。 我们可以将上面的函数写成带&lt;b&gt;洞（Hole）&lt;/b&gt;的形式：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;succ′ : Int -&amp;gt; Int
succ′ (pos x) = pos (suc x)
succ′ (neg zero) = {!!}
succ′ (neg (suc x)) = neg x
succ′ (zro i) = {!!}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在你的 Agda 编辑器中加载本文中的代码并对它使用「Auto」。两个洞都可以被解决。&lt;/p&gt;&lt;p&gt;由于这里出现的路径构造子类型为 &lt;code&gt;pos 0 ≡ neg 0&lt;/code&gt;，因此 Agda 知道 &lt;code&gt;succ&amp;#39; (neg zero)&lt;/code&gt; 等于 &lt;code&gt;succ&amp;#39; (pos zero)&lt;/code&gt;，其中 &lt;code&gt;succ&amp;#39; (pos x)&lt;/code&gt; 定义为 &lt;code&gt;pos (suc x)&lt;/code&gt;， 对 &lt;code&gt;pos zero&lt;/code&gt; 应用此模式的结果为 &lt;code&gt;pos (suc zero)&lt;/code&gt;，它等于 &lt;code&gt;pos 1&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;同样，我们可以定义 &lt;code&gt;pred&lt;/code&gt; 函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pred : Int -&amp;gt; Int
pred (pos zero) = neg 1
pred (pos (suc x)) = pos x
pred (neg x) = neg (suc x)
pred (zro i) = neg 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;同构&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;module IsoInt where
open Cubical.Data.Int renaming (Int to StdInt)
pattern spos n = StdInt.pos n
pattern nsuc n = StdInt.negsuc n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;给出标准整数的定义，我们可以证明 HIT（高阶归纳类型，Higher-Inductive Type 的缩写， 即带有路径构造子的归纳类型）的整数与它同构。要在类型论下证明同构，我们需要给出两个 （实际上只有我们知道的）互逆的函数，并证明它们的互逆关系（以此来说服 Agda 它们是互逆的）。&lt;/p&gt;&lt;p&gt;从 &lt;code&gt;StdInt&lt;/code&gt; 到 &lt;code&gt;Int&lt;/code&gt;，我们将 &lt;code&gt;pos&lt;/code&gt; 转换为 &lt;code&gt;pos&lt;/code&gt;，将 &lt;code&gt;negsuc&lt;/code&gt; 转换为 &lt;code&gt;neg ∘ suc&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;StdInt-&amp;gt;Int : StdInt -&amp;gt; Int
StdInt-&amp;gt;Int (spos n) = pos n
StdInt-&amp;gt;Int (nsuc n) = neg (suc n)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一方面，由于标准定义中缺少路径构造子，因此我们将 &lt;code&gt;zro i&lt;/code&gt; 映射为 &lt;code&gt;pos 0&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Int-&amp;gt;StdInt : Int -&amp;gt; StdInt
Int-&amp;gt;StdInt (pos x) = spos x
Int-&amp;gt;StdInt (neg zero) = spos 0
Int-&amp;gt;StdInt (neg (suc x)) = nsuc x
Int-&amp;gt;StdInt (zro i) = spos 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们来试着证明两函数互逆。此同构的一面很平凡：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;StdInt-&amp;gt;Int-&amp;gt;StdInt : (n : StdInt) -&amp;gt; Int-&amp;gt;StdInt (StdInt-&amp;gt;Int n) ≡ n
StdInt-&amp;gt;Int-&amp;gt;StdInt (spos _) = refl
StdInt-&amp;gt;Int-&amp;gt;StdInt (nsuc _) = refl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它可以证明是因为我们的两个模式将 &lt;code&gt;Int-&amp;gt;StdInt (StdInt-&amp;gt;Int n)&lt;/code&gt; 代换成了 &lt;code&gt;Int-&amp;gt;StdInt (StdInt-&amp;gt;Int (spos n))&lt;/code&gt; 和 &lt;code&gt;Int-&amp;gt;StdInt (StdInt-&amp;gt;Int (nsuc n))&lt;/code&gt;， 它们可展开为 &lt;code&gt;spos n&lt;/code&gt; 和 &lt;code&gt;nsuc n&lt;/code&gt;，二者与返回类型中路径的右式一致。&lt;/p&gt;&lt;p&gt;此同构另一面的两种情况则要稍微难一些，我们来逐个讨论。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Int-&amp;gt;StdInt-&amp;gt;Int : (n : Int) -&amp;gt; StdInt-&amp;gt;Int (Int-&amp;gt;StdInt n) ≡ n
Int-&amp;gt;StdInt-&amp;gt;Int (pos x) = refl
Int-&amp;gt;StdInt-&amp;gt;Int (neg zero) =&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此从句是第一个非平凡的情况。如果我们将 &lt;code&gt;neg zero&lt;/code&gt; 代入 &lt;code&gt;Int-&amp;gt;StdInt n&lt;/code&gt;，就会得到 &lt;code&gt;spos 0&lt;/code&gt;，而将 &lt;code&gt;spos 0&lt;/code&gt; 代入 &lt;code&gt;StdInt-&amp;gt;Int n&lt;/code&gt; 则会得到 &lt;code&gt;pos 0&lt;/code&gt;。于是此从句的类型为 &lt;code&gt;pos 0 ≡ neg 0&lt;/code&gt;，它就是 &lt;code&gt;zro&lt;/code&gt; 的类型。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  zro&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着我们填上另一个平凡的情况。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Int-&amp;gt;StdInt-&amp;gt;Int (neg (suc x)) = refl
Int-&amp;gt;StdInt-&amp;gt;Int (zro i) = lemma
  where&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后一种情况也有点复杂，我们为了可读性引入了一条引理。 进行一些简单代换后我们可以得到以下签名：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  lemma : pos 0 ≡ zro i
  lemma j =&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它是上下文中一条带有一个间点变量的路径，它可以看做两个路径间一条的路径， 该路径的两边分别为 &lt;code&gt;pos 0&lt;/code&gt; 和 &lt;code&gt;zro i&lt;/code&gt;。如下图所示，如果把 &lt;code&gt;j = i0&lt;/code&gt; 看做 &lt;code&gt;x = y&lt;/code&gt; 的形式，那么 &lt;code&gt;x&lt;/code&gt; 是间点变量，&lt;code&gt;y&lt;/code&gt; 是 &lt;code&gt;i0&lt;/code&gt; 或 &lt;code&gt;i1&lt;/code&gt; 这样的端点。以 &lt;code&gt;x&lt;/code&gt; 索引的路径的 &lt;code&gt;y&lt;/code&gt; 端，即 &lt;code&gt;j = i0&lt;/code&gt;，也就是 &lt;code&gt;pos 0&lt;/code&gt; 的那条边（图的左边）是一个常量路径，而 &lt;code&gt;zro i&lt;/code&gt;，即 &lt;code&gt;j = i1&lt;/code&gt; 的那条边（图的右边） 有两个不同的边：&lt;code&gt;pos 0&lt;/code&gt;（&lt;code&gt;i = i0&lt;/code&gt; 的那条边，即底边）和 &lt;code&gt;neg 0&lt;/code&gt;（&lt;code&gt;i = i1&lt;/code&gt; 的那条边， 即顶边）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b88ebb8d46a6245b439130a515a55f8e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;427&quot; data-rawheight=&quot;445&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;427&quot; data-original=&quot;https://pic3.zhimg.com/v2-b88ebb8d46a6245b439130a515a55f8e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b88ebb8d46a6245b439130a515a55f8e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;427&quot; data-rawheight=&quot;445&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;427&quot; data-original=&quot;https://pic3.zhimg.com/v2-b88ebb8d46a6245b439130a515a55f8e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b88ebb8d46a6245b439130a515a55f8e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;它刚好就是上一篇文章中引入的 &lt;code&gt;minSq&lt;/code&gt;（将 &lt;code&gt;pos 0&lt;/code&gt; 代入 &lt;code&gt;a&lt;/code&gt;，将 &lt;code&gt;neg 0&lt;/code&gt; 代入 &lt;code&gt;b&lt;/code&gt;）！ 回想 &lt;code&gt;minSq&lt;/code&gt; 是以 &lt;code&gt;min&lt;/code&gt; 运算符定义的，我们这里也可以应用同样的技术：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;    zro (i ∧ j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;搞定！&lt;/p&gt;&lt;h2&gt;同构与路径&lt;/h2&gt;&lt;p&gt;立方类型论可以带给你的一点好处是你可以在同构的类型之间创建一条路径。 其背后的理论超出了本文讨论的范围，但我们可以试一下基于该理论的库函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;Int≡StdInt : Int ≡ StdInt
Int≡StdInt = isoToPath (iso Int-&amp;gt;StdInt StdInt-&amp;gt;Int StdInt-&amp;gt;Int-&amp;gt;StdInt Int-&amp;gt;StdInt-&amp;gt;Int)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;一个问题&lt;/h2&gt;&lt;p&gt;还有一种定义为 HIT 的整数类型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;infixl 5 _⊝_
data DeltaInt : Set where
  _⊝_    : Nat -&amp;gt; Nat -&amp;gt; DeltaInt
  cancel : ∀ a b -&amp;gt; a ⊝ b ≡ suc a ⊝ suc b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它是以一个自然数减去另一个来定义的。这是一种全新的 HIT， 因此我建议读者为它定义一些常见的运算并证明它们的性质以熟悉这个 HIT。&lt;/p&gt;&lt;p&gt;我们可以找出一条它的引理：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;cancelDiamond : ∀ a b i → cancel a b i ≡ cancel (suc a) (suc b) i
cancelDiamond a b = {!!}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于 &lt;code&gt;a ⊝ b&lt;/code&gt; 等于 &lt;code&gt;suc a ⊝ suc b&lt;/code&gt;，因此我们可以在一个间点上泛化这种相等关系（它正是 &lt;code&gt;cancelDiamond&lt;/code&gt;）。但我们要如何证明它？试着画出 &lt;code&gt;cancelDiamond&lt;/code&gt;，我们会看到一个方形，但它既不是 min 方形也不是 max 方形。&lt;/p&gt;&lt;p&gt;答案将在下一篇文章中使用新的 CuTT 运算来揭晓。&lt;/p&gt;</description>
<author>Oling Cat</author>
<guid isPermaLink="false">2020-02-04-104929162</guid>
<pubDate>Tue, 04 Feb 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>用 APL 写 Cellular Automaton (A NEW KIND OF SCIENCE)</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2020-02-02-104622595.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/104622595&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-aea51532371c88be451db5dbd6ca25ea_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;⍝ CA 的原理很簡單，用 APL 的 primitive ⌺ (Stencil) 就可以表示&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍪&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍺⍺&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;⌺&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↑&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;⍝ two-color ca 的映射&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;⎕IO&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;⋄&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊥&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌷⌽&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊤&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍺⍺&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;⍝ three-color ca&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;⎕IO&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;⋄&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌷⌽&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊤&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍺⍺&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;⍝from APL matrics to Netpbm format&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pgm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;P2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍕⌽⍴&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍕&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,⍕&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;⍨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌈&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;題图(code2040 size:1001×1001)生成方式&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pgm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2040&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;⍣&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initi&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;⎕NPUT&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a.pgm&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;⍝ from shell $ pnmtopng a.pgm &amp;gt; z.png&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-13dc8eff273d2e7c02250b3f20e788f2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;870&quot; data-rawheight=&quot;212&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;870&quot; data-original=&quot;https://pic3.zhimg.com/v2-13dc8eff273d2e7c02250b3f20e788f2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-13dc8eff273d2e7c02250b3f20e788f2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;870&quot; data-rawheight=&quot;212&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;870&quot; data-original=&quot;https://pic3.zhimg.com/v2-13dc8eff273d2e7c02250b3f20e788f2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-13dc8eff273d2e7c02250b3f20e788f2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;mobile automaton 就相当于两个 two-color ca。&lt;/p&gt;&lt;p&gt;不过我们可以先把 accumulator 给 abstract 出來。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍺&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;⋄&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊢⍪&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍺⍺&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;∘&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↑⊢&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;⍣&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍺&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;⍝ 这样之前的可以写成 (⊂pgm 1000 (2040 cell code acc) initi 500)⎕NPUT&amp;#39;a.pgm&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后是 mobile automaton 的原理&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;mobile&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍺⍺&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;⍵⍵&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌷&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;⍨&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊣&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;⍸&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和替換规则&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;ma&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;⍣&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊣&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊤&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;⍨&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1a599d7da6e88a3dcb082c04116803cd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1210&quot; data-rawheight=&quot;660&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1210&quot; data-original=&quot;https://pic2.zhimg.com/v2-1a599d7da6e88a3dcb082c04116803cd_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1a599d7da6e88a3dcb082c04116803cd_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1210&quot; data-rawheight=&quot;660&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1210&quot; data-original=&quot;https://pic2.zhimg.com/v2-1a599d7da6e88a3dcb082c04116803cd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-1a599d7da6e88a3dcb082c04116803cd_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们就可以把这个 encode 成 14570 ← → 255⊥57 35, 57 ←→ 2⊥0 0 1 1 1 0 0 1, 85 ←→ 2⊥0 0 1 0 0 0 1 1.&lt;/p&gt;&lt;p&gt;于是可以用&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;14570&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mobile&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ma&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initi&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;画出&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-cc2724161bd9a716d9b39e2029b23588_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;608&quot; data-rawheight=&quot;830&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;608&quot; data-original=&quot;https://pic1.zhimg.com/v2-cc2724161bd9a716d9b39e2029b23588_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-cc2724161bd9a716d9b39e2029b23588_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;608&quot; data-rawheight=&quot;830&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;608&quot; data-original=&quot;https://pic1.zhimg.com/v2-cc2724161bd9a716d9b39e2029b23588_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-cc2724161bd9a716d9b39e2029b23588_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;最后&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7cc06252b678869e89214760e560bada_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1208&quot; data-rawheight=&quot;368&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1208&quot; data-original=&quot;https://pic3.zhimg.com/v2-7cc06252b678869e89214760e560bada_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7cc06252b678869e89214760e560bada_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1208&quot; data-rawheight=&quot;368&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1208&quot; data-original=&quot;https://pic3.zhimg.com/v2-7cc06252b678869e89214760e560bada_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-7cc06252b678869e89214760e560bada_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>LdBeth</author>
<guid isPermaLink="false">2020-02-02-104622595</guid>
<pubDate>Sun, 02 Feb 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>函数式的动态规划</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2020-01-28-104238120.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/104238120&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9a78a9c6e24193617a4cadf4b6b59d41_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;函数式的动态规划&lt;/h2&gt;&lt;p&gt;动态规划是一类很常用的算法，在C/C++/Java中一般使用于数组进行记忆化。而函数式编程语言一般无法方便地操作数组这些依赖副作用的数据结构，函数式的记忆化便要另寻他法。&lt;/p&gt;&lt;p&gt;本文就是一个简单的笔记，用一些代码片段展示我所知的函数式动态规划的技巧。&lt;/p&gt;&lt;h2&gt;Course-of-Values Recursion&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Course-of-Values Recursion&lt;/i&gt;是我认为最直观的一种技巧，就是将遍历过的结果当作返回值的一部分保留下来，在递归的时候可以取得运算过的值。&lt;/p&gt;&lt;p&gt;对于递归函数&lt;code&gt;f&lt;/code&gt;，定义一个辅助的函数&lt;code&gt;bar&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D+%5Coverline%7Bf%7D%28n%29+%3D+%5Bf%28n%29%2C+f%28n-1%29%2C...%2Cf%280%29%5D+%5Cend%7Balign%7D&quot; alt=&quot;\begin{align} \overline{f}(n) = [f(n), f(n-1),...,f(0)] \end{align}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;则原递归函数&lt;code&gt;f&lt;/code&gt;可以用&lt;code&gt;bar&lt;/code&gt;表示出来：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=head%28%5Coverline%7Bf%7D%28n%29%29&quot; alt=&quot;head(\overline{f}(n))&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;斐波那契数列：&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;fibBar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fibBar&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fibBar&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fibBar&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fibBar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibBar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- [fib(n-1)..fib(0)]&lt;/span&gt;
           &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- fib(n-1)&lt;/span&gt;
           &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- fib(n-2)&lt;/span&gt;
           &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &amp;gt;&amp;gt;&amp;gt; fibBar 10&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- [55,34,21,13,8,5,3,2,1,1,0]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Binary Partitions：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;数的二次幂拆分方法有多少种，其状态转移方程为：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D++a_0+%26+%3D+1+%5C%5C+a_%7B2n%7D+%26+%3D+a_%7B2n+-+1%7D+%2B+a_%7Bn%7D+%5C%5C+a_%7Bn%7D+%26+%3D+a_%7Bn-1%7D++%5Cend%7Balign%7D+&quot; alt=&quot;\begin{align}  a_0 &amp;amp; = 1 \\ a_{2n} &amp;amp; = a_{2n - 1} + a_{n} \\ a_{n} &amp;amp; = a_{n-1}  \end{align} &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;则：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;bpBar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bpBar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
             &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;-- bp (n-1)&lt;/span&gt;
             &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- bp (n/2)&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bpBar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &amp;gt;&amp;gt;&amp;gt; bpBar 20&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- [60,46,46,36,36,26,26,20,20,14,14,10,10,6,6,4,4,2,2,1,1]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但遗憾的是，其复杂度并不是&lt;code&gt;O(n)&lt;/code&gt;，因为每次都会索引链表，这很糟糕。&lt;/p&gt;&lt;p&gt;&lt;b&gt;0-1背包问题：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;其状态转移方程为：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D+Knapsack%280%2C+y%29+%26+%3D+0+%5C%5C+Knapsack%28i%2C+y%29+%26+%3D+Knapsack%28i-1%2C+y%29+%26+%5Ctext%7Bif%7D%5C+w_i+%5Cge+y+%5C%5C+Knapsack%28i%2C+y%29+%26+%3D+max%28Knapsack%28i-1%2C+y%29%2C+v_j+%2B+Knapsack%28i-1%2C+y-w_i%29%29+%26+%5Ctext%7Botherwise%7D+%5Cend%7Balign%7D&quot; alt=&quot;\begin{align} Knapsack(0, y) &amp;amp; = 0 \\ Knapsack(i, y) &amp;amp; = Knapsack(i-1, y) &amp;amp; \text{if}\ w_i \ge y \\ Knapsack(i, y) &amp;amp; = max(Knapsack(i-1, y), v_j + Knapsack(i-1, y-w_i)) &amp;amp; \text{otherwise} \end{align}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这里也需要将这个&lt;code&gt;n*W&lt;/code&gt;状态空间塞到&lt;code&gt;course&lt;/code&gt;里：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D%5Coverline%7BKnapsack%7D%28i%2C+y%29+%3D++%26%5BKnapsack%28i%2C+y%29%2C+Knapsack%28i%2C+y-1%29%2C...%2CKnapsack%28i%2C+0%29%2C%5C%5C+++%26Knapsack%28i-1%2C+capacity%29%2C...%2CKnapscak%280%2C+0%29%5D%5Cend%7Balign%7D&quot; alt=&quot;\begin{align}\overline{Knapsack}(i, y) =  &amp;amp;[Knapsack(i, y), Knapsack(i, y-1),...,Knapsack(i, 0),\\   &amp;amp;Knapsack(i-1, capacity),...,Knapscak(0, 0)]\end{align}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;则：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Weight&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Items&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;knapsack&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Items&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Weight&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;knapsack&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Items&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Weight&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;             &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capacity&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;             &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
                   &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v1&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;-- knapsack(i-1, y)&lt;/span&gt;
                   &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v2&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- knapsack(i-1, y-wi)&lt;/span&gt;
                   &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
                   &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; 
                      &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;-- &amp;gt;&amp;gt;&amp;gt; knapsack [(2, 6.0), (2, 3.0), (6, 5.0), (5, 4.0), (4, 6.0)] 10&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 15.0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CoV除了经常要索引链表意外还有其它限制，并非所有的递归函数都能转化为这种形式，比如阿克曼函数（Ackermann&amp;#39;s function）。&lt;/p&gt;&lt;h2&gt;Streaming&lt;/h2&gt;&lt;p&gt;这是专属于Haskell的优雅的方法。&lt;/p&gt;&lt;p&gt;斐波那契数列就是一个经典的例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;fibs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fibs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zipWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &amp;gt;&amp;gt;&amp;gt; take 10 fibs&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- [1,1,2,3,5,8,13,21,34,55]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要把&lt;code&gt;fibs&lt;/code&gt;看作一个流，&lt;code&gt;fibs&lt;/code&gt;前两个元素为&lt;code&gt;1&lt;/code&gt;且剩余部分由其自身(&lt;code&gt;fibs&lt;/code&gt;)与自身去首(&lt;code&gt;tail fibs&lt;/code&gt;)合成(&lt;code&gt;zipWith (+)&lt;/code&gt;)。取“下一个”的时候才会计算，并且不会重复计算，这就是Haskell惰性求值的威力。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1675f7b414cad247defe6750650885e3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;938&quot; data-rawheight=&quot;460&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;938&quot; data-original=&quot;https://pic4.zhimg.com/v2-1675f7b414cad247defe6750650885e3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1675f7b414cad247defe6750650885e3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;938&quot; data-rawheight=&quot;460&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;938&quot; data-original=&quot;https://pic4.zhimg.com/v2-1675f7b414cad247defe6750650885e3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1675f7b414cad247defe6750650885e3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;类似的，阶乘流由[1..]和其自身合成：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;facts&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;facts&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zipWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;facts&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &amp;gt;&amp;gt;&amp;gt; take 10 facts&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- [1,1,2,6,24,120,720,5040,40320,362880]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;流还可以表达更复杂的问题，比如刚刚的Binary Partitions：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;bps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;bps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zipWith3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt; 
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
          &lt;span class=&quot;nf&quot;&gt;bps&lt;/span&gt; 
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- bp (n/2) 组成的流&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 每个元素个数*2&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &amp;gt;&amp;gt;&amp;gt; take 21 bps&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- [1,1,2,2,4,4,6,6,10,10,14,14,20,20,26,26,36,36,46,46,60]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以发现顺序是和CoV的反过来的。同时，这里还没有了索引的开销，很&lt;code&gt;O(n)&lt;/code&gt;，很棒。&lt;/p&gt;&lt;p&gt;流的形式很优美，当然也很少的情况能将流写的很优美，毕竟算法本身就是丑陋的，比如刚刚0-1背包问题换成什么写法都只能写得这样丑陋（但这已经是很简单的算法了）。&lt;/p&gt;&lt;h2&gt;Dynamorphism&lt;/h2&gt;&lt;p&gt;&lt;i&gt;dynamorphism&lt;/i&gt;是&lt;i&gt;recursion schemes&lt;/i&gt;的一种，是&lt;i&gt;anamorphism&lt;/i&gt;和&lt;i&gt;histomorphism&lt;/i&gt;的组合，由&lt;i&gt;anamorphism&lt;/i&gt;构造递归树，由&lt;i&gt;histomorphism&lt;/i&gt;完成记忆化和规约。&lt;/p&gt;&lt;p&gt;过程上可以看作是CoV的抽象，自动完成&lt;i&gt;记忆化&lt;/i&gt;和&lt;i&gt;递归&lt;/i&gt;，并且推广了course的结构（但一般还是用List）。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- dynamorphism&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dyna&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cofree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dyna&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&amp;lt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uncurry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- dyna phi psi = histo psi . ana phi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Binary Partitions：&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;bpDyna&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;bpDyna&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dyna&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;             &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
               &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
               &lt;span class=&quot;nf&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;half&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cofree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&amp;lt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&amp;lt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hole&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;         &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;-- &amp;gt;&amp;gt;&amp;gt; map bpDyna [0..20]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- [1,1,2,2,4,4,6,6,10,10,14,14,20,20,26,26,36,36,46,46,60]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;最长公共子序列：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;也是一道经典的dp题，我也不再赘述内容，其状态转移方程为：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D+lcs%28%5B%5D%2C+ys%29+%26+%3D+%5B%5D+%5C%5C+lcs%28xs%2C+%5B%5D%29+%26+%3D+%5B%5D+%5C%5C+lcs%28x%3Axs%2C+y%3Ays%29+%26+%3D+x%3Alcs%28xs%2C+ys%29+%26+%5Ctext%7Bif+%7D+x%3Dy+%5C%5C+lcs%28x%3Axs%2C+y%3Ays%29+%26+%3D+lcs%28x%3Axs%2C+ys%29+%26+%5Ctext%7Bif+%7D+%5C%23lcs%28x%3Axs%2C+ys%29+%5Cgt+%5C%23lcs%28xs%2C+y%3Ays%29+%5C%5C+lcs%28x%3Axs%2C+y%3Ays%29+%26+%3D+lcs%28xs%2C+y%3Ays%29+%26+%5Ctext%7Botherwise%7D+%5Cend%7Balign%7D&quot; alt=&quot;\begin{align} lcs([], ys) &amp;amp; = [] \\ lcs(xs, []) &amp;amp; = [] \\ lcs(x:xs, y:ys) &amp;amp; = x:lcs(xs, ys) &amp;amp; \text{if } x=y \\ lcs(x:xs, y:ys) &amp;amp; = lcs(x:xs, ys) &amp;amp; \text{if } \#lcs(x:xs, ys) \gt \#lcs(xs, y:ys) \\ lcs(x:xs, y:ys) &amp;amp; = lcs(xs, y:ys) &amp;amp; \text{otherwise} \end{align}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;lcsDyna&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lcsDyna&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dyna&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;aslen&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zs&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aslen&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;zs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aslen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;0-1背包问题&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;knapsackDyna&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Items&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Weight&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;knapsackDyna&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;goods&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dyna&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wv&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;              &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goods&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rest&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- course[i-1][w]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;      
          &lt;span class=&quot;nf&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookupCourse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;course&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;w&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- course[i-1][w - w&amp;#39;]&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &amp;gt;&amp;gt;&amp;gt; knapsackDyna [(2, 6.0), (2, 3.0), (6, 5.0), (5, 4.0), (4, 6.0)] 10&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 15.0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，这里的recursion schemes的库是直接在hackage里找的。懒得自己写了。dynamorphisim的介绍，我可能会令写一篇文章吧（咕咕咕）。其实我觉得这也没减少什么复杂度。。。&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;没啥想总结的23333。总之，我觉得除了streaming以外，都很丑陋。recursion schemes也是，还是最多用到hylomorphism就算了，同时我认为应用将recursion schemes在“不是处理数据”的递归上，也不是正确的用途，因为这并不直观。&lt;/p&gt;</description>
<author>脚趾头</author>
<guid isPermaLink="false">2020-01-28-104238120</guid>
<pubDate>Tue, 28 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>凉爽的 CuTT 介绍（0）--路径与间点</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2020-01-22-102323224.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102323224&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;文本译自 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/67ebe1bd8e4a63f17a42572e40afaac7&quot; data-hash=&quot;67ebe1bd8e4a63f17a42572e40afaac7&quot; data-hovercard=&quot;p$b$67ebe1bd8e4a63f17a42572e40afaac7&quot;&gt;@千里冰封 你懂吗&lt;/a&gt; 介绍&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/2019/08-01-Cutt0.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;立方类型论&lt;/a&gt;的文章。&lt;/blockquote&gt;&lt;h2&gt;动机&lt;/h2&gt;&lt;p&gt;我打算写一系列介绍立方类型论（Cubical Type Theory，简称 CuTT）的文章， 文中会使用 Agda 证明助理。我的动机是现有的立方类型论（以及 Cubical Agda） 的教程都不可避免地需要同伦类型论（Homotopy Type Theory，简称 HoTT）方面的知识。 然而，我始终认为没有 HoTT 的背景也是可以学习 CuTT 的，只是需要一个理解 Cubical 的引路者把教程写出来而已。&lt;/p&gt;&lt;blockquote&gt;注：Cubical 是指 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ncatlab.org/nlab/show/model%2Bstructure%2Bon%2Bcubical%2Bsets&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;立方集合模型（Cubical sets model）&lt;/a&gt;, CuTT 即是建立在该集合模型上的类型论。与此对应的还有 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ncatlab.org/nlab/show/model%2Bstructure%2Bon%2Bsimplicial%2Bsets&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;单纯形集合模型（Simplical sets model）&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;我参加了 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hott.github.io/HoTT-2019/summer-school/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HoTT 2019&lt;/a&gt; 的暑期班，在 Anders Mörtberg 关于 Cubical 模型的演讲中 解决了很多疑惑。我觉得现在是时候成为 Cubical 的传道者，编写一份真正易读的 立方类型论介绍了。&lt;/p&gt;&lt;p&gt;这个介绍一点也不「热（HoTT）」，所以我称之为「凉爽（Cold）」的 CuTT 介绍。&lt;/p&gt;&lt;h2&gt;前置知识&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;非 Cubical 的 Agda（即原版 Agda）的经验&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（私货：可参阅《&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//agda-zh.github.io/PLFA-zh/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;编程语言基础：Agda 语言描述&lt;/a&gt;》）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;λ-演算的基本概念，如柯里化（Currying）等&lt;/li&gt;&lt;li&gt;小学几何（线段、正方形、立方体）&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;{-# OPTIONS --cubical --omega-in-omega #-}
module 2019-8-1-Cutt0 where
open import Cubical.Core.Everything&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;走起！&lt;/h2&gt;&lt;p&gt;我们先从一个问题入手：&lt;b&gt;如何用编程语言表示证明？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在 Agda 的根基，Martin-Löf 类型论（MLTT）中，相等性关系使用名为 &lt;code&gt;_≡_&lt;/code&gt; 的类型来表示， 它只有一个&lt;b&gt;居留元（Inhabitant）&lt;/b&gt;&lt;code&gt;refl&lt;/code&gt;，被定义为&lt;b&gt;自反性（Reflexivity）&lt;/b&gt;的证明，我们可通过此元素来参数化并索引该类型。而 CuTT 则引入了另一种相等性类型，它比起 MLTT 来说更适合 HoTT。由于这是一个「凉爽」的介绍，所以我们不会在这里解释 「为什么要用 CuTT」。&lt;/p&gt;&lt;blockquote&gt;译注：类型索引（Indexed）和参数化（Parameterized）参见&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//wiki.haskell.org/GHC/Type_families&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;类型族（Type Families）&lt;/a&gt;&lt;/blockquote&gt;&lt;h2&gt;间点&lt;/h2&gt;&lt;p&gt;有种类型在论文中叫做&lt;b&gt;间点（Interval）&lt;/b&gt;，在 Agda 中则被称为 &lt;code&gt;I&lt;/code&gt;。 你可以点击&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/lagda/Agda.Primitive.Cubical.html%2386&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;此处&lt;/a&gt;或原文代码中的 &lt;code&gt;I&lt;/code&gt; 查看它的定义。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;--         ↓
interval = I
--         ↑&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类型 &lt;code&gt;I&lt;/code&gt; 的最佳解释是，一条&lt;b&gt;路径（Path）&lt;/b&gt;上的点（Point）所属的类型。 想象一下 &lt;code&gt;i : I&lt;/code&gt;，我们可以画图将 &lt;code&gt;i&lt;/code&gt; 表示出来：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;458&quot; data-rawheight=&quot;87&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;458&quot; data-original=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;458&quot; data-rawheight=&quot;87&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;458&quot; data-original=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从几何上来说，我们有一条从 0 到 1 的路径，路径上的每点都是 &lt;code&gt;I&lt;/code&gt; 的一个实例。 当然，0 和 1 也是 &lt;code&gt;I&lt;/code&gt; 的有效实例。间点的性质如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;间点上可以使用量词——例如，&lt;code&gt;∀ (i : I), blabla&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;它们总是大于或等于 0，小于或等于 1。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 Agda 中，我们用 &lt;code&gt;i0&lt;/code&gt; 来表示 0，用 &lt;code&gt;i1&lt;/code&gt; 来表示 1：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;_ : I
_ = i0

_ : I
_ = i1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;间点上没什么原语操作，至少无法对它们下&lt;b&gt;断言（Predicate）&lt;/b&gt;，例如 &lt;code&gt;λ i → if i == 0 then bla else rua&lt;/code&gt; 是不行的（不过我们可以在其它结构上对间点下断言）。不过我们还是有几个基本操作的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;min&lt;/code&gt; 接受两个间点，返回更接近 0 的那个&lt;/li&gt;&lt;li&gt;&lt;code&gt;max&lt;/code&gt; 接受两个间点，返回更接近 1 的那个&lt;/li&gt;&lt;li&gt;&lt;code&gt;neg&lt;/code&gt; 接受一个间点，返回与它对称的点&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 Agda 中，它们用让人有点慌的数学符号来表记：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;min : I → I → I
min = _∧_

max : I → I → I
max = _∨_

neg : I → I
neg = ~_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它们遵循&lt;b&gt;德摩根定律（De Morgan&amp;#39;s theorem）&lt;/b&gt;，就是说了&lt;code&gt;~ (i ∧ j)&lt;/code&gt;等价于&lt;code&gt;~ i ∨ ~ j&lt;/code&gt; 的那个。端点的行为相当于：&lt;code&gt;i ∧ 0&lt;/code&gt; 等于 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;i ∨ 0&lt;/code&gt; 等于 &lt;code&gt;i&lt;/code&gt;，诸如此类。 然而，间点并非布尔值，它们是路径上的点，路径上存在无穷多的点， 而布尔值只有两个。&lt;/p&gt;&lt;blockquote&gt;译注：在 C-H 同构中，类型即命题，而该类型若存在&lt;b&gt;居留元（Inhabitant）&lt;/b&gt;，也就意味着其对应的命题得证。在 MLTT 中，由于包含 K 公理，因此&lt;b&gt;相等性（Equality）&lt;/b&gt;类型只有一个居留元 &lt;code&gt;refl&lt;/code&gt;，于是 MLTT 直接放弃了讨论相等性证明本身的内容。然而 HoTT 认为，相等性证明可以被视为 Path，而 Path 和 Path 可以是不同的，于是我们就有了这样一种类型来建立起新的相等性关系：它拥有无穷多的证明， 而每一个证明都是这个相等性关系的居留元。在 CuTT 中，这样的相等性关系叫做&lt;b&gt;路径（Path）&lt;/b&gt;，而其上的居留元就是&lt;b&gt;间点（Interval）&lt;/b&gt;。&lt;/blockquote&gt;&lt;p&gt;我们可以构造一些有趣的东西：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;andNot : I → I → I
andNot i j = ~ (i ∧ j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它等价于：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;andNot&amp;#39; : I → I → I
andNot&amp;#39; i j = ~ i ∨ ~ j&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们已经对间点有了直观的理解。很好！&lt;/p&gt;&lt;h2&gt;路径类型&lt;/h2&gt;&lt;p&gt;之所以有这样一个奇怪的类型 &lt;code&gt;I&lt;/code&gt; 的原因是我们需要引入&lt;b&gt;路径（Path）&lt;/b&gt;类型。 从几何上来说，每一条路径都由两个值来定义，即它的两个端点。&lt;/p&gt;&lt;p&gt;想象一个类型 &lt;code&gt;A&lt;/code&gt; 和它的两个居留元 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;myImagination
  : (A : Set)
  → (a b : A)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在类型 &lt;code&gt;A&lt;/code&gt; 上的 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间，我们可以有一个&lt;b&gt;路径类型&lt;/b&gt;（我把它的参数柯里化了）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  → Set
  myImagination = Path&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间&lt;b&gt;路径&lt;/b&gt;的类型写作 &lt;code&gt;Path A a b&lt;/code&gt;，其中 &lt;code&gt;A&lt;/code&gt; 是 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 的类型。 路径的居留元是接受间点作为参数的 λ-表达式。我们称之为&lt;b&gt;路径-λ（Path lambda）&lt;/b&gt;。 通常的函数也可以接受间点作为参数，然而 路径-λ 相对于普通的 λ-表达式 来说有更加特殊的构造。&lt;/p&gt;&lt;h2&gt;自反性&lt;/h2&gt;&lt;p&gt;例如，我们可以有&lt;b&gt;常量路径-λ（Constant Path Lambda）&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;-- 希望在你的设备上能正常显示

constantPathLam : (A : Set) → (a : A) → Path A a a
constantPathLam    A           a        i = a
--                 ↑           ↑        ↑
--               类型          |       间点
--                       两个端点都是 `a`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 Agda 针对类型 &lt;code&gt;Path A a b&lt;/code&gt; 检查你的路径-λ &lt;code&gt;p&lt;/code&gt;（也就是定型判断 &lt;code&gt;Gamma |- p : Path A a b&lt;/code&gt;）时，它会检查 &lt;code&gt;p i0&lt;/code&gt; 的返回值在定义上是否等于 &lt;code&gt;a&lt;/code&gt;， 以及 &lt;code&gt;p i1&lt;/code&gt; 的返回值在定义上是否等于 &lt;code&gt;b&lt;/code&gt;。（这里的 &lt;code&gt;p&lt;/code&gt; 是接受一个间点作为参数的 λ，我们可以把它应用到一个实参上！） 由于 &lt;code&gt;λ i → a&lt;/code&gt; 是 &lt;code&gt;Path A a a&lt;/code&gt; 的一个有效实例，因此 &lt;code&gt;(λ i → a) i0&lt;/code&gt; 本质上就是 &lt;code&gt;a&lt;/code&gt;（同理 &lt;code&gt;(λ i → a) i1&lt;/code&gt; 也是）。&lt;/p&gt;&lt;p&gt;我们可以把 &lt;code&gt;constantPathLam&lt;/code&gt; 路径画成这样：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;431&quot; data-rawheight=&quot;68&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;431&quot; data-original=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;431&quot; data-rawheight=&quot;68&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;431&quot; data-original=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们将 &lt;code&gt;a ≡ b&lt;/code&gt; 作为 &lt;code&gt;Path _ a b&lt;/code&gt; 的简写，因为&lt;b&gt;路径类型就是 CuTT 版的相等性类型&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;使用 &lt;code&gt;≡&lt;/code&gt; 重写以上定义：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;constantPathLam′ : (A : Set) → (a : A) → a ≡ a
constantPathLam′ A a i = a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;constantPathLam′&lt;/code&gt; 就是立方类型论中对自反性的证明。 它已经在 Cubical Agda 的库中了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;import Cubical.Foundations.Prelude as Prelude
_ : {A : Set} {a : A} → a ≡ a
_ = Prelude.refl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以把路径当作一个大小无限的只读数组，其索引就是间点，它由数组元素的 getter 来定义。&lt;/p&gt;&lt;h2&gt;对称性&lt;/h2&gt;&lt;p&gt;正如我们可以找到间点的对称点一样，我们也可以反转一条路径 （代码中的参数重新对齐了，以便与类型签名一致）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;invert : (A : Set) (a b : A) (p : a ≡ b) → b ≡ a
invert    A         a b       p = λ i → p (~ i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为解释此函数，想象一条类型为 &lt;code&gt;a ≡ b&lt;/code&gt; 的路径 &lt;code&gt;p&lt;/code&gt;。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;101&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;101&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们构造了一个新的路径-λ，它将每一个间点都映射到「&lt;code&gt;p&lt;/code&gt; 上对称的间点」上， 因此它的类型就是「与 &lt;code&gt;a ≡ b&lt;/code&gt; 对称的路径」也就是 &lt;code&gt;b ≡ a&lt;/code&gt;。下面是它的图解， 其中一条从 &lt;code&gt;i&lt;/code&gt; 到 &lt;code&gt;~ i&lt;/code&gt; 的映射被显式地画了出来（你需要自己脑补上方路径上所有的间点， 例如 &lt;code&gt;i&lt;/code&gt;，都被映射到了下方路径对应的点上，例如 &lt;code&gt;~ i&lt;/code&gt;）：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;483&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;483&quot; data-original=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;483&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;483&quot; data-original=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot;/&gt;&lt;figcaption&gt;在此图中，从路径 p 上的间点 i 开始指向某个 a 的箭头表示 「与 i 对应的值（或者说点）为 a 」或「p i 的求值结果为 a」&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们刚才做了什么？我们创建了一个新的路径-λ，它返回某种由一个给定路径和 它接受的间点构成的复合表达式。利用类似的技术和一点函数式编程，我们可以再玩两个魔法。&lt;/p&gt;&lt;h2&gt;合同性&lt;/h2&gt;&lt;p&gt;首先，我们可以在 MLTT 中证明&lt;b&gt;合同性（Congruence）&lt;/b&gt;。我们创建一个函数，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;congruence
  : {A B : Set}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它接受一个从 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;B&lt;/code&gt; 的函数，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ (f : A → B)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和一条 &lt;code&gt;A&lt;/code&gt; 上两个居留元之间的路径，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ {x y : A}
  → (p : x ≡ y)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后返回一条类型为 &lt;code&gt;f x ≡ f y&lt;/code&gt; 的路径。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ f x ≡ f y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们要如何证明它？嗯…通过创建一条路径，然后对它接受的间点和其它提供的变量施一些魔法，就像这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;congruence f p = λ i → f (p i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码做了什么？它：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;创建了一个路径-λ，于是我们有了一个间点 &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;&lt;li&gt;把&lt;code&gt;i&lt;/code&gt; 传给 &lt;code&gt;p&lt;/code&gt; ，注意我们的路径 &lt;code&gt;p&lt;/code&gt; 上全都是类型为 &lt;code&gt;A&lt;/code&gt; 的值，它在 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;把从 &lt;code&gt;p&lt;/code&gt; 中提取的值传给函数 &lt;code&gt;f&lt;/code&gt;，该函数接受一个 &lt;code&gt;A&lt;/code&gt; 的实例并返回一个 &lt;code&gt;B&lt;/code&gt; 的实例。&lt;/p&gt;&lt;p&gt;就是这样！我们可以可视化此过程。 首先我们将间点传给 &lt;code&gt;p&lt;/code&gt;：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;437&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;503&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;437&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;503&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;接着我们在其结果上应用了 &lt;code&gt;f&lt;/code&gt; 后返回来：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;489&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;489&quot; data-original=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;489&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;489&quot; data-original=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;搞定！&lt;/p&gt;&lt;h2&gt;函数外延性&lt;/h2&gt;&lt;p&gt;&lt;b&gt;函数外延性（Function Extensionality）&lt;/b&gt;是这样一个命题：若两函数上的每一点都等价， 则两函数等价。以前我们无法结构化地证明它，然而现在有了 CuTT，我们就可以证明它了。 我们可以将函数外延性表示为一个函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;functionExtensionality
  : {A B : Set}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它接受两个从 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;B&lt;/code&gt; 的函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ {f g : A → B}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及一个二者上的每一点都相等的证明 &lt;code&gt;p&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ (p : ∀ a → f a ≡ g a)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并返回一个两函数等价的证明：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ f ≡ g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以构造一条返回一个函数的路径，其中的函数用 &lt;code&gt;p&lt;/code&gt; 来实现，从而证明函数外延性：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;functionExtensionality p i = λ a → p a i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一次，我们：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;创建了一个路径-λ，因此有了一个间点 &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;&lt;li&gt;它返回的另一个 λ 接受一个类型为 &lt;code&gt;A&lt;/code&gt; 的参数 &lt;code&gt;a&lt;/code&gt;，就像 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;g&lt;/code&gt; 那样&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;a&lt;/code&gt; 上应用 &lt;code&gt;p&lt;/code&gt;，我们就得到了一条类型为 &lt;code&gt;f a ≡ g a&lt;/code&gt; 的路径 （注意 &lt;code&gt;f a&lt;/code&gt; 和 &lt;code&gt;g a&lt;/code&gt; 的类型为 &lt;code&gt;B&lt;/code&gt;）&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;i&lt;/code&gt; 上应用该路径，我们就得到了一个 &lt;code&gt;B&lt;/code&gt; 的实例&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了图示此证明，我们首先画出 &lt;code&gt;p&lt;/code&gt;，即每一点相等的证明，它是一个返回一条路径的函数：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;438&quot; data-rawheight=&quot;271&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;438&quot; data-original=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;438&quot; data-rawheight=&quot;271&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;438&quot; data-original=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot;/&gt;&lt;figcaption&gt;图中从路径以外的任意一点开始，到路径上间点的每一根箭头都是一个函数&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;其中的 &lt;code&gt;p&lt;/code&gt; 是一个从 &lt;code&gt;a&lt;/code&gt; 到一条路径的函数，如果我们用间点来表示它原本会返回的点， 那么我们可以将它特化为一个从 &lt;code&gt;a&lt;/code&gt; 到路径上任意特定的点上的函数。 这样我们就创建了一条新的路径，它将每一个间点 &lt;code&gt;i&lt;/code&gt; 都映射成了一个通过 &lt;code&gt;i&lt;/code&gt; 将 &lt;code&gt;p&lt;/code&gt; 特化后所得到的函数。下面是它的图示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;463&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;463&quot; data-original=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;463&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;463&quot; data-original=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;blockquote&gt;译注：我们可以换一种描述：&lt;code&gt;p&lt;/code&gt; 通过将任意类型为 &lt;code&gt;A&lt;/code&gt; 的值 &lt;code&gt;a&lt;/code&gt; 分别代入 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;g&lt;/code&gt;， 为 &lt;code&gt;f a&lt;/code&gt; 和 &lt;code&gt;g a&lt;/code&gt; 建立了一条证明二者等价的路径，而每一个具体的 &lt;code&gt;a&lt;/code&gt; 都可以被映射到 这条路径上的一个间点，把这样的每一个映射本身都看做一个个间点，这些间点连缀而成的路径也就成了 &lt;code&gt;f≡g&lt;/code&gt; 的证明。&lt;/blockquote&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;现在我们相当熟悉简单的路径了（希望如此）。 作为练习，请定义「高阶」路径，它的端点也是路径，这意味着我们的路径-λ 也会返回路径-λ， 例如，&lt;code&gt;λ i j → a&lt;/code&gt; 其中的 &lt;code&gt;a&lt;/code&gt; 包含自由变量 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt;。 请思考一下这样的路径，我们会在下一章中讨论它。&lt;/p&gt;</description>
<author>Oling Cat</author>
<guid isPermaLink="false">2020-01-22-102323224</guid>
<pubDate>Wed, 22 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>凉爽的 CuTT 介绍（1）--方形与对角线</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2020-01-20-103565709.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103565709&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;文本译自 &lt;a href=&quot;https://www.zhihu.com/people/67ebe1bd8e4a63f17a42572e40afaac7&quot; class=&quot;internal&quot;&gt;@千里冰封 你懂吗&lt;/a&gt; 介绍&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/2019/08-20-Cutt1.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;立方类型论&lt;/a&gt;的文章。&lt;/blockquote&gt;&lt;p&gt;（注意：本章尽量简短了些）&lt;/p&gt;&lt;p&gt;回忆&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102323224&quot; class=&quot;internal&quot;&gt;上一章&lt;/a&gt;的内容，我们有了 &lt;code&gt;max&lt;/code&gt;、&lt;code&gt;min&lt;/code&gt;和&lt;code&gt;neg&lt;/code&gt;，且构造出了对称（symmetry）的路径。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;{-# OPTIONS --cubical --allow-unsolved-metas #-}
module 2019-8-20-Cutt1 where
open import Cubical.Core.Everything

variable A : Set&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;路径的路径&lt;/h2&gt;&lt;p&gt;现在我们用路径（Path）做些有趣的事情。我们从常量路径（Constant Path）开始：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;reflEx : (a : A) → a ≡ a
reflEx a = λ i → a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们在 &lt;code&gt;reflEx a&lt;/code&gt; 之间构造一个路径：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;reflReflEx : (a : A) → reflEx a ≡ reflEx a
reflReflEx a = λ j i → a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以直观地把 &lt;code&gt;reflReflEx a&lt;/code&gt; 画成一条路径，其端点同样也是路径：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9d988f350e5423558d5e0bb916893a7c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;538&quot; data-rawheight=&quot;201&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;538&quot; data-original=&quot;https://pic1.zhimg.com/v2-9d988f350e5423558d5e0bb916893a7c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9d988f350e5423558d5e0bb916893a7c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;538&quot; data-rawheight=&quot;201&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;538&quot; data-original=&quot;https://pic1.zhimg.com/v2-9d988f350e5423558d5e0bb916893a7c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-9d988f350e5423558d5e0bb916893a7c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们可以把上图重绘成平面的形式：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-35d84bc1769629fb64bddea3401e4e42_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;430&quot; data-rawheight=&quot;452&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;430&quot; data-original=&quot;https://pic3.zhimg.com/v2-35d84bc1769629fb64bddea3401e4e42_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-35d84bc1769629fb64bddea3401e4e42_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;430&quot; data-rawheight=&quot;452&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;430&quot; data-original=&quot;https://pic3.zhimg.com/v2-35d84bc1769629fb64bddea3401e4e42_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-35d84bc1769629fb64bddea3401e4e42_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;看起来就是个方形（Square）！&lt;/p&gt;&lt;h2&gt;方形&lt;/h2&gt;&lt;p&gt;为了彻底理解方形，我们需要深入研究刚才所做的事情。&lt;/p&gt;&lt;p&gt;路径是接受&lt;b&gt;一个&lt;/b&gt;间点作为参数的 λ-表达式。而方形只不过是接受&lt;b&gt;两个&lt;/b&gt;间点的 λ-表达式。&lt;/p&gt;&lt;p&gt;我们的方形 &lt;code&gt;reflReflEx a = λ j i → a&lt;/code&gt; 之所以能够通过类型检查，是因为它就是个常量方形。 类型检查器可以向 &lt;code&gt;reflReflEx a&lt;/code&gt; 传入任意间点作为参数，而它们都会返回 &lt;code&gt;a&lt;/code&gt;， 正如我们写在类型中写的那样。假设 &lt;code&gt;p = reflReflEx a&lt;/code&gt;，我们可以列出一些编译器可以执行的检查：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;p i0 i0&lt;/code&gt; 是否可转换为 &lt;code&gt;reflEx a i0&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（这里的 &lt;code&gt;reflEx a&lt;/code&gt; 是类型 &lt;code&gt;reflEx a ≡ reflEx a&lt;/code&gt; 的&lt;b&gt;左式&lt;/b&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;p i1 i0&lt;/code&gt; 是否可转换为 &lt;code&gt;reflEx a i0&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（这里的 &lt;code&gt;reflEx a&lt;/code&gt; 是类型 &lt;code&gt;reflEx a ≡ reflEx a&lt;/code&gt; 的&lt;b&gt;右式&lt;/b&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;p i0 i1&lt;/code&gt; 是否可转换为 &lt;code&gt;reflEx a i1&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（这里的 &lt;code&gt;reflEx a&lt;/code&gt; 是类型 &lt;code&gt;reflEx a ≡ reflEx a&lt;/code&gt; 的&lt;b&gt;左式&lt;/b&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;p i1 i1&lt;/code&gt; 是否可转换为 &lt;code&gt;reflEx a i1&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（这里的 &lt;code&gt;reflEx a&lt;/code&gt; 是类型 &lt;code&gt;reflEx a ≡ reflEx a&lt;/code&gt; 的&lt;b&gt;右式&lt;/b&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;p i0 j&lt;/code&gt; 是否可转换为 &lt;code&gt;reflEx a j&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（这里的 &lt;code&gt;reflEx a&lt;/code&gt; 是类型 &lt;code&gt;reflEx a ≡ reflEx a&lt;/code&gt; 的&lt;b&gt;左式&lt;/b&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;p i1 j&lt;/code&gt; 是否可转换为 &lt;code&gt;reflEx a j&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（这里的 &lt;code&gt;reflEx a&lt;/code&gt; 是类型 &lt;code&gt;reflEx a ≡ reflEx a&lt;/code&gt; 的&lt;b&gt;右式&lt;/b&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;如果我们想要一条两个未知路径之间的路径，事情就会变得有些复杂：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pathPath : (a : A) → (p q : a ≡ a) → p ≡ q
pathPath a p q = λ j i → {!a!}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们无法在目标中填入 &lt;code&gt;a&lt;/code&gt;， 因为即便 &lt;code&gt;p i0&lt;/code&gt; 和 &lt;code&gt;p i1&lt;/code&gt; 明显可以转换为 &lt;code&gt;a&lt;/code&gt;（而 &lt;code&gt;a&lt;/code&gt; 就是我们想要在路径-λ 中返回的东西），我们也不能说对于所有的 &lt;code&gt;i : I&lt;/code&gt;，&lt;code&gt;p i&lt;/code&gt; 都能转换为 &lt;code&gt;a&lt;/code&gt; – 我们不知道两个已知端点 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;q&lt;/code&gt; &lt;b&gt;之间&lt;/b&gt;的东西是什么。我们无法对于所有的间点参数都简单地返回 &lt;code&gt;a&lt;/code&gt;，因为它并不涉及 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;q&lt;/code&gt; 的间点。此时我们也可以说 &lt;code&gt;p ≡ q&lt;/code&gt; &lt;b&gt;并不是&lt;/b&gt;一个常量方形。&lt;/p&gt;&lt;p&gt;我们可以对常量方形执行 &lt;code&gt;λ j i → a&lt;/code&gt; 是因为 &lt;code&gt;reflEx a&lt;/code&gt; 的间点已知为 &lt;code&gt;λ i → a&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;方形的性质&lt;/h2&gt;&lt;p&gt;我们首先假设有一个方形，其四个端点为 &lt;code&gt;a b c d : A&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;module UseOfSquares
  (a b c d : A)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着我们需要两条路径 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;q&lt;/code&gt;，一条从 &lt;code&gt;a&lt;/code&gt; 到 &lt;code&gt;b&lt;/code&gt;，另一条从 &lt;code&gt;c&lt;/code&gt; 到 &lt;code&gt;d&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  (p : a ≡ b)
  (q : c ≡ d)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，如果我们想要一条从 &lt;code&gt;p&lt;/code&gt; 到 &lt;code&gt;q&lt;/code&gt; 的路径，就不能简单地写成 &lt;code&gt;something : p ≡ q&lt;/code&gt;， 因为 &lt;code&gt;≡&lt;/code&gt; 的定义需要两个端点的类型相同，而 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;q&lt;/code&gt; 的类型不同。 该方形的另一个名字叫做 &lt;b&gt;异质相等性（Heterogeneous Equality）&lt;/b&gt;。 幸运的是，路径类型的设计考虑到了这种情况：有一种类型叫 &lt;code&gt;PathP&lt;/code&gt;，它首先接受一条类型 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 之间的路径（于是你要证明 &lt;code&gt;A&lt;/code&gt; 等于 &lt;code&gt;B&lt;/code&gt;），然后接受 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; 的实例各一个。&lt;/p&gt;&lt;p&gt;所以，为了绕过这个定型的问题，我们在 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间建立两条不同的路径 &lt;code&gt;p&lt;/code&gt; 和 &lt;code&gt;q&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  (p : a ≡ b)
  (q : a ≡ b)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后我们就有了这个方形：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  (s : p ≡ q)
  where&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的图形如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f1693cef33717831d951ddd4237a6087_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;450&quot; data-rawheight=&quot;438&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;450&quot; data-original=&quot;https://pic4.zhimg.com/v2-f1693cef33717831d951ddd4237a6087_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f1693cef33717831d951ddd4237a6087_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;450&quot; data-rawheight=&quot;438&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;450&quot; data-original=&quot;https://pic4.zhimg.com/v2-f1693cef33717831d951ddd4237a6087_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f1693cef33717831d951ddd4237a6087_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;现在我们来做些有趣的事情。首先，此方形的左侧边和右侧边就是方形的端点， 毕竟方形就是路径的路径：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;  left : a ≡ b
  left = s i0

  right : a ≡ b
  right = s i1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过顶边和底边是什么？好吧，这次我就不卖关子了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  top : a ≡ a
  top = λ i → s i i0

  bottom : b ≡ b
  bottom = λ i → s i i1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而反柯里化（uncurrying）后的 &lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;right&lt;/code&gt; 能让 &lt;code&gt;top&lt;/code&gt; 和 &lt;code&gt;bottom&lt;/code&gt; 更加清晰：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  left′ : a ≡ b
  left′ = λ i → s i0 i

  right′ : a ≡ b
  right′ = λ i → s i1 i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（请图形化地想象上面的四个函数，你应该可以想象出这种简单的图像）&lt;/p&gt;&lt;p&gt;我们也可以将 &lt;code&gt;s&lt;/code&gt; 旋转 180 度，即将它上下翻转后左右翻转（&lt;code&gt;sym&lt;/code&gt; 即对称翻转， 你可以点击&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/lagda/Cubical.Foundations.Prelude.html%23893&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这里&lt;/a&gt;查看它的定义）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;open import Cubical.Foundations.Prelude

rotate : (sym q) ≡ (sym p)
rotate = λ i j → s (~ i) (~ j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的图像如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-fe1cbe308b2eabfd721cf63a4bad8d72_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;457&quot; data-rawheight=&quot;444&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;457&quot; data-original=&quot;https://pic3.zhimg.com/v2-fe1cbe308b2eabfd721cf63a4bad8d72_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-fe1cbe308b2eabfd721cf63a4bad8d72_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;457&quot; data-rawheight=&quot;444&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;457&quot; data-original=&quot;https://pic3.zhimg.com/v2-fe1cbe308b2eabfd721cf63a4bad8d72_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-fe1cbe308b2eabfd721cf63a4bad8d72_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;对角线&lt;/h2&gt;&lt;p&gt;我们也可以找出 &lt;code&gt;s&lt;/code&gt; 的对角线（Diagonal）。 考虑一条从左下角到右上角的线，这条对角线也是一条路径，它的端点 &lt;code&gt;i0&lt;/code&gt; 是 &lt;code&gt;s&lt;/code&gt; 的左下角，而端点 &lt;code&gt;i1&lt;/code&gt; 是 &lt;code&gt;s&lt;/code&gt; 的右上角：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;diagonal : a ≡ b
diagonal = λ i → s i i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的图象是：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bb883ce5d0ccf92e027e50d741ad86f2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;454&quot; data-rawheight=&quot;429&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;454&quot; data-original=&quot;https://pic3.zhimg.com/v2-bb883ce5d0ccf92e027e50d741ad86f2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bb883ce5d0ccf92e027e50d741ad86f2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;454&quot; data-rawheight=&quot;429&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;454&quot; data-original=&quot;https://pic3.zhimg.com/v2-bb883ce5d0ccf92e027e50d741ad86f2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-bb883ce5d0ccf92e027e50d741ad86f2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我觉得它很好理解了。&lt;/p&gt;&lt;h2&gt;方形的构造&lt;/h2&gt;&lt;p&gt;玩过一会儿现有的方形后，我们来构造一些新的！这此我们同样假设 &lt;code&gt;p : a ≡ b&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;module ConstructionOfSquares
  (a b : A)
  (p : a ≡ b)
  where&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最简单的方形就是 &lt;code&gt;p&lt;/code&gt; 的常量路径：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  easist : p ≡ p
  easist = reflEx _&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然我们还可以做更多：我们可以把 &lt;code&gt;p&lt;/code&gt; 看作一个未知方形的对角线：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ea87254323599b00d08625b9f4e589b4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;450&quot; data-rawheight=&quot;432&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;450&quot; data-original=&quot;https://pic1.zhimg.com/v2-ea87254323599b00d08625b9f4e589b4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ea87254323599b00d08625b9f4e589b4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;450&quot; data-rawheight=&quot;432&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;450&quot; data-original=&quot;https://pic1.zhimg.com/v2-ea87254323599b00d08625b9f4e589b4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ea87254323599b00d08625b9f4e589b4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;还有两个端点是未知的。&lt;/p&gt;&lt;p&gt;很容易想到几种构造方形的方式：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 在左上角，&lt;code&gt;b&lt;/code&gt; 在右下角（一个常量路径的路径）&lt;/li&gt;&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 在左上角，&lt;code&gt;a&lt;/code&gt; 在右下角（一个常量路径）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不过，我们还可以让它们都是 &lt;code&gt;a&lt;/code&gt;，或者都是 &lt;code&gt;b&lt;/code&gt;！ 关键在于使用 &lt;code&gt;∧&lt;/code&gt; (min) 和 &lt;code&gt;∨&lt;/code&gt; (max) 运算符。&lt;/p&gt;&lt;p&gt;当二者均为 &lt;code&gt;a&lt;/code&gt; 时，该方形的表达式为 &lt;code&gt;λ i j → p (i ∧ j)&lt;/code&gt; （此方形后面称之为 &lt;code&gt;&lt;b&gt;minSq&lt;/b&gt;&lt;/code&gt;）。然而我们目前还无法确定此方形的类型， 不过我们可以画出它的图像（我们还会在下一章使用此结构）！&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-91e1321169b4a1e185a052a3783811ba_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;454&quot; data-rawheight=&quot;449&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;454&quot; data-original=&quot;https://pic3.zhimg.com/v2-91e1321169b4a1e185a052a3783811ba_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-91e1321169b4a1e185a052a3783811ba_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;454&quot; data-rawheight=&quot;449&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;454&quot; data-original=&quot;https://pic3.zhimg.com/v2-91e1321169b4a1e185a052a3783811ba_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-91e1321169b4a1e185a052a3783811ba_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我在方形中挑选了两个点 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 来解释为什么此图像表示 &lt;code&gt;p (i ∧ j)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;方形中的每个点都可以看作该方形应用到两个间点后的值，其中一个间点可以看作横坐标， 而另一则是纵坐标。例如，我们可以将 &lt;code&gt;minSq i j&lt;/code&gt; 看作下图中对应的点：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-416087b28a1016e27155a587ffa90007_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;430&quot; data-rawheight=&quot;436&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;430&quot; data-original=&quot;https://pic4.zhimg.com/v2-416087b28a1016e27155a587ffa90007_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-416087b28a1016e27155a587ffa90007_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;430&quot; data-rawheight=&quot;436&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;430&quot; data-original=&quot;https://pic4.zhimg.com/v2-416087b28a1016e27155a587ffa90007_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-416087b28a1016e27155a587ffa90007_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从这个视角来看，&lt;code&gt;x&lt;/code&gt; 在对角线的上方，我们可以说 &lt;code&gt;x&lt;/code&gt; 的纵坐标&lt;b&gt;大于&lt;/b&gt;横坐标。&lt;code&gt;y&lt;/code&gt; 在对角线的下方，因此它与 &lt;code&gt;x&lt;/code&gt; 相反。&lt;/p&gt;&lt;p&gt;如果我们说 &lt;code&gt;x&lt;/code&gt; 是 &lt;code&gt;minSq i j&lt;/code&gt;（它求值为 &lt;code&gt;p (i ∧ j)&lt;/code&gt;），并且我们已知 &lt;code&gt;j &amp;gt; i&lt;/code&gt;，那么我们可以将 &lt;code&gt;i ∧ j&lt;/code&gt; 化简为 &lt;code&gt;i&lt;/code&gt;，于是 &lt;code&gt;x&lt;/code&gt; 就成为了 &lt;code&gt;p i&lt;/code&gt;。&lt;code&gt;y&lt;/code&gt; 则会变成 &lt;code&gt;p j&lt;/code&gt;。 而左上角就是 &lt;code&gt;minSq i0 i1&lt;/code&gt;，它可规约为 &lt;code&gt;p (i0 ∧ i1)&lt;/code&gt;，接着规约为 &lt;code&gt;p i0&lt;/code&gt;，然后规约为 &lt;code&gt;a&lt;/code&gt;。 右下角则是 &lt;code&gt;minSq i1 i0&lt;/code&gt;，它会归约为 &lt;code&gt;a&lt;/code&gt;。 &lt;/p&gt;&lt;p&gt;我们可以将这种映射画成下图：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f2942ddcbec5ef0490448944e3b05ff1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;467&quot; data-rawheight=&quot;461&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;467&quot; data-original=&quot;https://pic2.zhimg.com/v2-f2942ddcbec5ef0490448944e3b05ff1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f2942ddcbec5ef0490448944e3b05ff1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;467&quot; data-rawheight=&quot;461&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;467&quot; data-original=&quot;https://pic2.zhimg.com/v2-f2942ddcbec5ef0490448944e3b05ff1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-f2942ddcbec5ef0490448944e3b05ff1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;练习&lt;/h3&gt;&lt;p&gt;请模仿我的解释过程来解释 &lt;code&gt;λ i j → p (i ∨ j)&lt;/code&gt; 并画出它的图像。我想你可以在脑子里想出来！&lt;/p&gt;</description>
<author>Oling Cat</author>
<guid isPermaLink="false">2020-01-20-103565709</guid>
<pubDate>Mon, 20 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>凉爽的 CuTT 介绍（0）--路径与间点</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2020-01-20-102323224.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102323224&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;文本译自 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/67ebe1bd8e4a63f17a42572e40afaac7&quot; data-hash=&quot;67ebe1bd8e4a63f17a42572e40afaac7&quot; data-hovercard=&quot;p$b$67ebe1bd8e4a63f17a42572e40afaac7&quot;&gt;@千里冰封 你懂吗&lt;/a&gt; 介绍&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/2019/08-01-Cutt0.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;立方类型论&lt;/a&gt;的文章。&lt;/blockquote&gt;&lt;h2&gt;动机&lt;/h2&gt;&lt;p&gt;我打算写一系列介绍立方类型论（Cubical Type Theory，简称 CuTT）的文章， 文中会使用 Agda 证明助理。我的动机是现有的立方类型论（以及 Cubical Agda） 的教程都不可避免地需要同伦类型论（Homotopy Type Theory，简称 HoTT）方面的知识。 然而，我始终认为没有 HoTT 的背景也是可以学习 CuTT 的，只是需要一个理解 Cubical 的引路者把教程写出来而已。&lt;/p&gt;&lt;blockquote&gt;注：Cubical 是指 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ncatlab.org/nlab/show/model%2Bstructure%2Bon%2Bcubical%2Bsets&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;立方集合模型（Cubical sets model）&lt;/a&gt;, CuTT 即是建立在该集合模型上的类型论。与此对应的还有 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ncatlab.org/nlab/show/model%2Bstructure%2Bon%2Bsimplicial%2Bsets&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;单纯形集合模型（Simplical sets model）&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;我参加了 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hott.github.io/HoTT-2019/summer-school/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HoTT 2019&lt;/a&gt; 的暑期班，在 Anders Mörtberg 关于 Cubical 模型的演讲中 解决了很多疑惑。我觉得现在是时候成为 Cubical 的传道者，编写一份真正易读的 立方类型论介绍了。&lt;/p&gt;&lt;p&gt;这个介绍一点也不「热（HoTT）」，所以我称之为「凉爽（Cold）」的 CuTT 介绍。&lt;/p&gt;&lt;h2&gt;前置知识&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;非 Cubical 的 Agda（即原版 Agda）的经验&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（私货：可参阅《&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//agda-zh.github.io/PLFA-zh/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;编程语言基础：Agda 语言描述&lt;/a&gt;》）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;λ-演算的基本概念，如柯里化（Currying）等&lt;/li&gt;&lt;li&gt;小学几何（线段、正方形、立方体）&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;{-# OPTIONS --cubical --omega-in-omega #-}
module 2019-8-1-Cutt0 where
open import Cubical.Core.Everything&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;走起！&lt;/h2&gt;&lt;p&gt;我们先从一个问题入手：&lt;b&gt;如何用编程语言表示证明？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在 Agda 的根基，Martin-Löf 类型论（MLTT）中，相等性关系使用名为 &lt;code&gt;_≡_&lt;/code&gt; 的类型来表示， 它只有一个&lt;b&gt;居留元（Inhabitant）&lt;/b&gt;&lt;code&gt;refl&lt;/code&gt;，被定义为&lt;b&gt;自反性（Reflexivity）&lt;/b&gt;的证明，我们可通过此元素来参数化并索引该类型。而 CuTT 则引入了另一种相等性类型，它比起 MLTT 来说更适合 HoTT。由于这是一个「凉爽」的介绍，所以我们不会在这里解释 「为什么要用 CuTT」。&lt;/p&gt;&lt;blockquote&gt;译注：类型索引（Indexed）和参数化（Parameterized）参见&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//wiki.haskell.org/GHC/Type_families&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;类型族（Type Families）&lt;/a&gt;&lt;/blockquote&gt;&lt;h2&gt;间点&lt;/h2&gt;&lt;p&gt;有种类型在论文中叫做&lt;b&gt;间点（Interval）&lt;/b&gt;，在 Agda 中则被称为 &lt;code&gt;I&lt;/code&gt;。 你可以点击&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/lagda/Agda.Primitive.Cubical.html%2386&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;此处&lt;/a&gt;或原文代码中的 &lt;code&gt;I&lt;/code&gt; 查看它的定义。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;--         ↓
interval = I
--         ↑&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类型 &lt;code&gt;I&lt;/code&gt; 的最佳解释是，一条&lt;b&gt;路径（Path）&lt;/b&gt;上的点（Point）所属的类型。 想象一下 &lt;code&gt;i : I&lt;/code&gt;，我们可以画图将 &lt;code&gt;i&lt;/code&gt; 表示出来：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;458&quot; data-rawheight=&quot;87&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;458&quot; data-original=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;458&quot; data-rawheight=&quot;87&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;458&quot; data-original=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从几何上来说，我们有一条从 0 到 1 的路径，路径上的每点都是 &lt;code&gt;I&lt;/code&gt; 的一个实例。 当然，0 和 1 也是 &lt;code&gt;I&lt;/code&gt; 的有效实例。间点的性质如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;间点上可以使用量词——例如，&lt;code&gt;∀ (i : I), blabla&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;它们总是大于或等于 0，小于或等于 1。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 Agda 中，我们用 &lt;code&gt;i0&lt;/code&gt; 来表示 0，用 &lt;code&gt;i1&lt;/code&gt; 来表示 1：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;_ : I
_ = i0

_ : I
_ = i1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;间点上没什么原语操作，至少无法对它们下&lt;b&gt;断言（Predicate）&lt;/b&gt;，例如 &lt;code&gt;λ i → if i == 0 then bla else rua&lt;/code&gt; 是不行的（不过我们可以在其它结构上对间点下断言）。不过我们还是有几个基本操作的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;min&lt;/code&gt; 接受两个间点，返回更接近 0 的那个&lt;/li&gt;&lt;li&gt;&lt;code&gt;max&lt;/code&gt; 接受两个间点，返回更接近 1 的那个&lt;/li&gt;&lt;li&gt;&lt;code&gt;neg&lt;/code&gt; 接受一个间点，返回与它对称的点&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 Agda 中，它们用让人有点慌的数学符号来表记：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;min : I → I → I
min = _∧_

max : I → I → I
max = _∨_

neg : I → I
neg = ~_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它们遵循&lt;b&gt;德摩根定律（De Morgan&amp;#39;s theorem）&lt;/b&gt;，就是说了&lt;code&gt;~ (i ∧ j)&lt;/code&gt;等价于&lt;code&gt;~ i ∨ ~ j&lt;/code&gt; 的那个。端点的行为相当于：&lt;code&gt;i ∧ 0&lt;/code&gt; 等于 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;i ∨ 0&lt;/code&gt; 等于 &lt;code&gt;i&lt;/code&gt;，诸如此类。 然而，间点并非布尔值，它们是路径上的点，路径上存在无穷多的点， 而布尔值只有两个。&lt;/p&gt;&lt;blockquote&gt;译注：在 C-H 同构中，类型即命题，而该类型若存在&lt;b&gt;居留元（Inhabitant）&lt;/b&gt;，也就意味着其对应的命题得证。在 MLTT 中，由于包含 K 公理，因此&lt;b&gt;相等性（Equality）&lt;/b&gt;类型只有一个居留元 &lt;code&gt;refl&lt;/code&gt;，于是 MLTT 直接放弃了讨论相等性证明本身的内容。然而 HoTT 认为，相等性证明可以被视为 Path，而 Path 和 Path 可以是不同的，于是我们就有了这样一种类型来建立起新的相等性关系：它拥有无穷多的证明， 而每一个证明都是这个相等性关系的居留元。在 CuTT 中，这样的相等性关系叫做&lt;b&gt;路径（Path）&lt;/b&gt;，而其上的居留元就是&lt;b&gt;间点（Interval）&lt;/b&gt;。&lt;/blockquote&gt;&lt;p&gt;我们可以构造一些有趣的东西：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;andNot : I → I → I
andNot i j = ~ (i ∧ j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它等价于：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;andNot&amp;#39; : I → I → I
andNot&amp;#39; i j = ~ i ∨ ~ j&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们已经对间点有了直观的理解。很好！&lt;/p&gt;&lt;h2&gt;路径类型&lt;/h2&gt;&lt;p&gt;之所以有这样一个奇怪的类型 &lt;code&gt;I&lt;/code&gt; 的原因是我们需要引入&lt;b&gt;路径（Path）&lt;/b&gt;类型。 从几何上来说，每一条路径都由两个值来定义，即它的两个端点。&lt;/p&gt;&lt;p&gt;想象一个类型 &lt;code&gt;A&lt;/code&gt; 和它的两个居留元 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;myImagination
  : (A : Set)
  → (a b : A)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在类型 &lt;code&gt;A&lt;/code&gt; 上的 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间，我们可以有一个&lt;b&gt;路径类型&lt;/b&gt;（我把它的参数柯里化了）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  → Set
  myImagination = Path&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间&lt;b&gt;路径&lt;/b&gt;的类型写作 &lt;code&gt;Path A a b&lt;/code&gt;，其中 &lt;code&gt;A&lt;/code&gt; 是 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 的类型。 路径的居留元是接受间点作为参数的 λ-表达式。我们称之为&lt;b&gt;路径-λ（Path lambda）&lt;/b&gt;。 通常的函数也可以接受间点作为参数，然而 路径-λ 相对于普通的 λ-表达式 来说有更加特殊的构造。&lt;/p&gt;&lt;h2&gt;自反性&lt;/h2&gt;&lt;p&gt;例如，我们可以有&lt;b&gt;常量路径-λ（Constant Path Lambda）&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- 希望在你的设备上能正常显示

constantPathLam : (A : Set) → (a : A) → Path A a a
constantPathLam    A           a        i = a
--                 ↑           ↑        ↑
--               类型          |       间点
--                       两个端点都是 `a`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 Agda 针对类型 &lt;code&gt;Path A a b&lt;/code&gt; 检查你的路径-λ &lt;code&gt;p&lt;/code&gt;（也就是定型判断 &lt;code&gt;Gamma |- p : Path A a b&lt;/code&gt;）时，它会检查 &lt;code&gt;p i0&lt;/code&gt; 的返回值在定义上是否等于 &lt;code&gt;a&lt;/code&gt;， 以及 &lt;code&gt;p i1&lt;/code&gt; 的返回值在定义上是否等于 &lt;code&gt;b&lt;/code&gt;。（这里的 &lt;code&gt;p&lt;/code&gt; 是接受一个间点作为参数的 λ，我们可以把它应用到一个实参上！） 由于 &lt;code&gt;λ i → a&lt;/code&gt; 是 &lt;code&gt;Path A a a&lt;/code&gt; 的一个有效实例，因此 &lt;code&gt;(λ i → a) i0&lt;/code&gt; 本质上就是 &lt;code&gt;a&lt;/code&gt;（同理 &lt;code&gt;(λ i → a) i1&lt;/code&gt; 也是）。&lt;/p&gt;&lt;p&gt;我们可以把 &lt;code&gt;constantPathLam&lt;/code&gt; 路径画成这样：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;431&quot; data-rawheight=&quot;68&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;431&quot; data-original=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;431&quot; data-rawheight=&quot;68&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;431&quot; data-original=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们将 &lt;code&gt;a ≡ b&lt;/code&gt; 作为 &lt;code&gt;Path _ a b&lt;/code&gt; 的简写，因为&lt;b&gt;路径类型就是 CuTT 版的相等性类型&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;使用 &lt;code&gt;≡&lt;/code&gt; 重写以上定义：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;constantPathLam′ : (A : Set) → (a : A) → a ≡ a
constantPathLam′ A a i = a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;constantPathLam′&lt;/code&gt; 就是立方类型论中对自反性的证明。 它已经在 Cubical Agda 的库中了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;import Cubical.Foundations.Prelude as Prelude
_ : {A : Set} {a : A} → a ≡ a
_ = Prelude.refl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以把路径当作一个大小无限的只读数组，其索引就是间点，它由数组元素的 getter 来定义。&lt;/p&gt;&lt;h2&gt;对称性&lt;/h2&gt;&lt;p&gt;正如我们可以找到间点的对称点一样，我们也可以反转一条路径 （代码中的参数重新对齐了，以便与类型签名一致）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;invert : (A : Set) (a b : A) (p : a ≡ b) → b ≡ a
invert    A         a b       p = λ i → p (~ i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为解释此函数，想象一条类型为 &lt;code&gt;a ≡ b&lt;/code&gt; 的路径 &lt;code&gt;p&lt;/code&gt;。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;101&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;101&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们构造了一个新的路径-λ，它将每一个间点都映射到「&lt;code&gt;p&lt;/code&gt; 上对称的间点」上， 因此它的类型就是「与 &lt;code&gt;a ≡ b&lt;/code&gt; 对称的路径」也就是 &lt;code&gt;b ≡ a&lt;/code&gt;。下面是它的图解， 其中一条从 &lt;code&gt;i&lt;/code&gt; 到 &lt;code&gt;~ i&lt;/code&gt; 的映射被显式地画了出来（你需要自己脑补上方路径上所有的间点， 例如 &lt;code&gt;i&lt;/code&gt;，都被映射到了下方路径对应的点上，例如 &lt;code&gt;~ i&lt;/code&gt;）：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;483&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;483&quot; data-original=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;483&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;483&quot; data-original=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot;/&gt;&lt;figcaption&gt;在此图中，从路径 p 上的间点 i 开始指向某个 a 的箭头表示 「与 i 对应的值（或者说点）为 a 」或「p i 的求值结果为 a」&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们刚才做了什么？我们创建了一个新的路径-λ，它返回某种由一个给定路径和 它接受的间点构成的复合表达式。利用类似的技术和一点函数式编程，我们可以再玩两个魔法。&lt;/p&gt;&lt;h2&gt;合同性&lt;/h2&gt;&lt;p&gt;首先，我们可以在 MLTT 中证明&lt;b&gt;合同性（Congruence）&lt;/b&gt;。我们创建一个函数，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;congruence
  : {A B : Set}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它接受一个从 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;B&lt;/code&gt; 的函数，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ (f : A → B)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和一条 &lt;code&gt;A&lt;/code&gt; 上两个居留元之间的路径，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ {x y : A}
  → (p : x ≡ y)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后返回一条类型为 &lt;code&gt;f x ≡ f y&lt;/code&gt; 的路径。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ f x ≡ f y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们要如何证明它？嗯…通过创建一条路径，然后对它接受的间点和其它提供的变量施一些魔法，就像这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;congruence f p = λ i → f (p i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码做了什么？它：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;创建了一个路径-λ，于是我们有了一个间点 &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;&lt;li&gt;把&lt;code&gt;i&lt;/code&gt; 传给 &lt;code&gt;p&lt;/code&gt; ，注意我们的路径 &lt;code&gt;p&lt;/code&gt; 上全都是类型为 &lt;code&gt;A&lt;/code&gt; 的值，它在 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;把从 &lt;code&gt;p&lt;/code&gt; 中提取的值传给函数 &lt;code&gt;f&lt;/code&gt;，该函数接受一个 &lt;code&gt;A&lt;/code&gt; 的实例并返回一个 &lt;code&gt;B&lt;/code&gt; 的实例。&lt;/p&gt;&lt;p&gt;就是这样！我们可以可视化此过程。 首先我们将间点传给 &lt;code&gt;p&lt;/code&gt;：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;437&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;503&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;437&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;503&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;接着我们在其结果上应用了 &lt;code&gt;f&lt;/code&gt; 后返回来：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;489&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;489&quot; data-original=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;489&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;489&quot; data-original=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;搞定！&lt;/p&gt;&lt;h2&gt;函数外延性&lt;/h2&gt;&lt;p&gt;&lt;b&gt;函数外延性（Function Extensionality）&lt;/b&gt;是这样一个命题：若两函数上的每一点都等价， 则两函数等价。以前我们无法结构化地证明它，然而现在有了 CuTT，我们就可以证明它了。 我们可以将函数外延性表示为一个函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;functionExtensionality
  : {A B : Set}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它接受两个从 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;B&lt;/code&gt; 的函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ {f g : A → B}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及一个二者上的每一点都相等的证明 &lt;code&gt;p&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ (p : ∀ a → f a ≡ g a)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并返回一个两函数等价的证明：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ f ≡ g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以构造一条返回一个函数的路径，其中的函数用 &lt;code&gt;p&lt;/code&gt; 来实现，从而证明函数外延性：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;functionExtensionality p i = λ a → p a i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一次，我们：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;创建了一个路径-λ，因此有了一个间点 &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;&lt;li&gt;它返回的另一个 λ 接受一个类型为 &lt;code&gt;A&lt;/code&gt; 的参数 &lt;code&gt;a&lt;/code&gt;，就像 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;g&lt;/code&gt; 那样&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;a&lt;/code&gt; 上应用 &lt;code&gt;p&lt;/code&gt;，我们就得到了一条类型为 &lt;code&gt;f a ≡ g a&lt;/code&gt; 的路径 （注意 &lt;code&gt;f a&lt;/code&gt; 和 &lt;code&gt;g a&lt;/code&gt; 的类型为 &lt;code&gt;B&lt;/code&gt;）&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;i&lt;/code&gt; 上应用该路径，我们就得到了一个 &lt;code&gt;B&lt;/code&gt; 的实例&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了图示此证明，我们首先画出 &lt;code&gt;p&lt;/code&gt;，即每一点相等的证明，它是一个返回一条路径的函数：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;438&quot; data-rawheight=&quot;271&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;438&quot; data-original=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;438&quot; data-rawheight=&quot;271&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;438&quot; data-original=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot;/&gt;&lt;figcaption&gt;图中从路径以外的任意一点开始，到路径上间点的每一根箭头都是一个函数&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;其中的 &lt;code&gt;p&lt;/code&gt; 是一个从 &lt;code&gt;a&lt;/code&gt; 到一条路径的函数，如果我们用间点来表示它原本会返回的点， 那么我们可以将它特化为一个从 &lt;code&gt;a&lt;/code&gt; 到路径上任意特定的点上的函数。 这样我们就创建了一条新的路径，它将每一个间点 &lt;code&gt;i&lt;/code&gt; 都映射成了一个通过 &lt;code&gt;i&lt;/code&gt; 将 &lt;code&gt;p&lt;/code&gt; 特化后所得到的函数。下面是它的图示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;463&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;463&quot; data-original=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;463&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;463&quot; data-original=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;blockquote&gt;译注：我们可以换一种描述：&lt;code&gt;p&lt;/code&gt; 通过将任意类型为 &lt;code&gt;A&lt;/code&gt; 的值 &lt;code&gt;a&lt;/code&gt; 分别代入 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;g&lt;/code&gt;， 为 &lt;code&gt;f a&lt;/code&gt; 和 &lt;code&gt;g a&lt;/code&gt; 建立了一条证明二者等价的路径，而每一个具体的 &lt;code&gt;a&lt;/code&gt; 都可以被映射到 这条路径上的一个间点，把这样的每一个映射本身都看做一个个间点，这些间点连缀而成的路径也就成了 &lt;code&gt;f≡g&lt;/code&gt; 的证明。&lt;/blockquote&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;现在我们相当熟悉简单的路径了（希望如此）。 作为练习，请定义「高阶」路径，它的端点也是路径，这意味着我们的路径-λ 也会返回路径-λ， 例如，&lt;code&gt;λ i j → a&lt;/code&gt; 其中的 &lt;code&gt;a&lt;/code&gt; 包含自由变量 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt;。 请思考一下这样的路径，我们会在下一章中讨论它。&lt;/p&gt;</description>
<author>Oling Cat</author>
<guid isPermaLink="false">2020-01-20-102323224</guid>
<pubDate>Mon, 20 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>凉爽的 CuTT 介绍（0）--路径与间点</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2020-01-14-102323224.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102323224&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文本译自 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/67ebe1bd8e4a63f17a42572e40afaac7&quot; data-hash=&quot;67ebe1bd8e4a63f17a42572e40afaac7&quot; data-hovercard=&quot;p$b$67ebe1bd8e4a63f17a42572e40afaac7&quot;&gt;@千里冰封 你懂吗&lt;/a&gt; 介绍&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/2019/08-01-Cutt0.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;立方类型论&lt;/a&gt;的文章。&lt;/p&gt;&lt;h2&gt;动机&lt;/h2&gt;&lt;p&gt;我打算写一系列介绍立方类型论（Cubical Type Theory，简称 CuTT）的文章， 文中会使用 Agda 证明助理。我的动机是现有的立方类型论（以及 Cubical Agda） 的教程都不可避免地需要同伦类型论（Homotopy Type Theory，简称 HoTT）方面的知识。 然而，我始终认为没有 HoTT 的背景也是可以学习 CuTT 的，只是需要一个理解 Cubical 的引路者把教程写出来而已。&lt;/p&gt;&lt;blockquote&gt;注：Cubical 是指 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ncatlab.org/nlab/show/model%2Bstructure%2Bon%2Bcubical%2Bsets&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;立方集合模型（Cubical sets model）&lt;/a&gt;, CuTT 即是建立在该集合模型上的类型论。与此对应的还有 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ncatlab.org/nlab/show/model%2Bstructure%2Bon%2Bsimplicial%2Bsets&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;简单集合模型（Simplical sets model）&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;我参加了 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//hott.github.io/HoTT-2019/summer-school/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HoTT 2019&lt;/a&gt; 的暑期班，在 Anders Mörtberg 关于 Cubical 模型的演讲中 解决了很多疑惑。我觉得现在是时候成为 Cubical 的传道者，编写一份真正易读的 立方类型论介绍了。&lt;/p&gt;&lt;p&gt;这个介绍一点也不「热（HoTT）」，所以我称之为「凉爽（Cold）」的 CuTT 介绍。&lt;/p&gt;&lt;h2&gt;前置知识&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;非 Cubical 的 Agda（即原版 Agda）的经验&lt;/li&gt;&lt;ul&gt;&lt;li&gt;（私货：可参阅《&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//agda-zh.github.io/PLFA-zh/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;编程语言基础：Agda 语言描述&lt;/a&gt;》）&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;λ-演算的基本概念，如柯里化（Currying）等&lt;/li&gt;&lt;li&gt;小学几何（线段、正方形、立方体）&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;{-# OPTIONS --cubical --omega-in-omega #-}
module 2019-8-1-Cutt0 where
open import Cubical.Core.Everything&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;走起！&lt;/h2&gt;&lt;p&gt;我们先从一个问题入手：&lt;b&gt;如何用编程语言表示证明？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在 Agda 的根基，Martin-Löf 类型论（MLTT）中，相等性关系使用名为 &lt;code&gt;_≡_&lt;/code&gt; 的类型来表示， 它只有一个&lt;b&gt;居留元（Inhabitant）&lt;/b&gt;&lt;code&gt;refl&lt;/code&gt;，被定义为&lt;b&gt;自反性（Reflexivity）&lt;/b&gt;的证明，我们可通过此元素来参数化并索引该类型。而 CuTT 则引入了另一种相等性类型，它比起 MLTT 来说更适合 HoTT。由于这是一个「凉爽」的介绍，所以我们不会在这里解释 「为什么要用 CuTT」。&lt;/p&gt;&lt;blockquote&gt;译注：类型索引（Indexed）和参数化（Parameterized）参见&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//wiki.haskell.org/GHC/Type_families&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;类型族（Type Families）&lt;/a&gt;&lt;/blockquote&gt;&lt;h2&gt;间点&lt;/h2&gt;&lt;p&gt;有种类型在论文中叫做&lt;b&gt;间点（Interval）&lt;/b&gt;，在 Agda 中则被称为 &lt;code&gt;I&lt;/code&gt;。 你可以点击&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//ice1000.org/lagda/Agda.Primitive.Cubical.html%2386&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;此处&lt;/a&gt;或原文代码中的 &lt;code&gt;I&lt;/code&gt; 查看它的定义。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;--         ↓
interval = I
--         ↑&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类型 &lt;code&gt;I&lt;/code&gt; 的最佳解释是，一条&lt;b&gt;路径（Path）&lt;/b&gt;上的点（Point）所属的类型。 想象一下 &lt;code&gt;i : I&lt;/code&gt;，我们可以画图将 &lt;code&gt;i&lt;/code&gt; 表示出来：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;458&quot; data-rawheight=&quot;87&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;458&quot; data-original=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;458&quot; data-rawheight=&quot;87&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;458&quot; data-original=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a9bed0e1cacb96422c64b32b16b016ff_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;从几何上来说，我们有一条从 0 到 1 的路径，路径上的每点都是 &lt;code&gt;I&lt;/code&gt; 的一个实例。 当然，0 和 1 也是 &lt;code&gt;I&lt;/code&gt; 的有效实例。间点的性质如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;间点上可以使用量词——例如，&lt;code&gt;∀ (i : I), blabla&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;它们总是大于或等于 0，小于或等于 1。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 Agda 中，我们用 &lt;code&gt;i0&lt;/code&gt; 来表示 0，用 &lt;code&gt;i1&lt;/code&gt; 来表示 1：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;_ : I
_ = i0

_ : I
_ = i1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;间点上没什么原语操作，至少无法对它们下&lt;b&gt;断言（Predicate）&lt;/b&gt;，例如 &lt;code&gt;λ i → if i == 0 then bla else rua&lt;/code&gt; 是不行的（不过我们可以在其它结构上对间点下断言）。不过我们还是有几个基本操作的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;min&lt;/code&gt; 接受两个间点，返回更接近 0 的那个&lt;/li&gt;&lt;li&gt;&lt;code&gt;max&lt;/code&gt; 接受两个间点，返回更接近 1 的那个&lt;/li&gt;&lt;li&gt;&lt;code&gt;neg&lt;/code&gt; 接受一个间点，返回与它对称的点&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 Agda 中，它们用让人有点慌的数学符号来表记：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;min : I → I → I
min = _∧_

max : I → I → I
max = _∨_

neg : I → I
neg = ~_&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它们遵循&lt;b&gt;德摩根定律（De Morgan&amp;#39;s theorem）&lt;/b&gt;，就是说了&lt;code&gt;~ (i ∧ j)&lt;/code&gt;等价于&lt;code&gt;~ i ∨ ~ j&lt;/code&gt; 的那个。端点的行为相当于：&lt;code&gt;i ∧ 0&lt;/code&gt; 等于 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;i ∨ 0&lt;/code&gt; 等于 &lt;code&gt;i&lt;/code&gt;，诸如此类。 然而，间点并非布尔值，它们是路径上的点，路径上存在无穷多的点， 而布尔值只有两个。&lt;/p&gt;&lt;blockquote&gt;译注：在 C-H 同构中，类型即命题，而该类型若存在&lt;b&gt;居留元（Inhabitant）&lt;/b&gt;，也就意味着其对应的命题得证。在 MLTT 中，由于包含 K 公理，因此&lt;b&gt;相等性（Equality）&lt;/b&gt;类型只有一个居留元 &lt;code&gt;refl&lt;/code&gt;，于是 MLTT 直接放弃了讨论相等性证明本身的内容。然而 HoTT 认为，相等性证明可以被视为 Path，而 Path 和 Path 可以是不同的，于是我们就有了这样一种类型来建立起新的相等性关系：它拥有无穷多的证明， 而每一个证明都是这个相等性关系的居留元。在 CuTT 中，这样的相等性关系叫做&lt;b&gt;路径（Path）&lt;/b&gt;，而其上的居留元就是&lt;b&gt;间点（Interval）&lt;/b&gt;。&lt;/blockquote&gt;&lt;p&gt;我们可以构造一些有趣的东西：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;andNot : I → I → I
andNot i j = ~ (i ∧ j)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它等价于：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;andNot&amp;#39; : I → I → I
andNot&amp;#39; i j = ~ i ∨ ~ j&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们已经对间点有了直观的理解。很好！&lt;/p&gt;&lt;h2&gt;路径类型&lt;/h2&gt;&lt;p&gt;之所以有这样一个奇怪的类型 &lt;code&gt;I&lt;/code&gt; 的原因是我们需要引入&lt;b&gt;路径（Path）&lt;/b&gt;类型。 从几何上来说，每一条路径都由两个值来定义，即它的两个端点。&lt;/p&gt;&lt;p&gt;想象一个类型 &lt;code&gt;A&lt;/code&gt; 和它的两个居留元 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;myImagination
  : (A : Set)
  → (a b : A)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在类型 &lt;code&gt;A&lt;/code&gt; 上的 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间，我们可以有一个&lt;b&gt;路径类型&lt;/b&gt;（我把它的参数柯里化了）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  → Set
  myImagination = Path&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间&lt;b&gt;路径&lt;/b&gt;的类型写作 &lt;code&gt;Path A a b&lt;/code&gt;，其中 &lt;code&gt;A&lt;/code&gt; 是 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 的类型。 路径的居留元是接受间点作为参数的 λ-表达式。我们称之为&lt;b&gt;路径-λ（Path lambda）&lt;/b&gt;。 通常的函数也可以接受间点作为参数，然而 路径-λ 相对于普通的 λ-表达式 来说有更加特殊的构造。&lt;/p&gt;&lt;h2&gt;自反性&lt;/h2&gt;&lt;p&gt;例如，我们可以有&lt;b&gt;常量路径-λ（Constant Path Lambda）&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-- 希望在你的设备上能正常显示

constantPathLam : (A : Set) → (a : A) → Path A a a
constantPathLam    A           a        i = a
--                 ↑           ↑        ↑
--               类型          |       间点
--                       两个端点都是 `a`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 Agda 针对类型 &lt;code&gt;Path A a b&lt;/code&gt; 检查你的路径-λ &lt;code&gt;p&lt;/code&gt;（也就是定型判断 &lt;code&gt;Gamma |- p : Path A a b&lt;/code&gt;）时，它会检查 &lt;code&gt;p i0&lt;/code&gt; 的返回值在定义上是否等于 &lt;code&gt;a&lt;/code&gt;， 以及 &lt;code&gt;p i1&lt;/code&gt; 的返回值在定义上是否等于 &lt;code&gt;b&lt;/code&gt;。（这里的 &lt;code&gt;p&lt;/code&gt; 是接受一个间点作为参数的 λ，我们可以把它应用到一个实参上！） 由于 &lt;code&gt;λ i → a&lt;/code&gt; 是 &lt;code&gt;Path A a a&lt;/code&gt; 的一个有效实例，因此 &lt;code&gt;(λ i → a) i0&lt;/code&gt; 本质上就是 &lt;code&gt;a&lt;/code&gt;（同理 &lt;code&gt;(λ i → a) i1&lt;/code&gt; 也是）。&lt;/p&gt;&lt;p&gt;我们可以把 &lt;code&gt;constantPathLam&lt;/code&gt; 路径画成这样：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;431&quot; data-rawheight=&quot;68&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;431&quot; data-original=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;431&quot; data-rawheight=&quot;68&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;431&quot; data-original=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ea492113221cbc4ab8d93bb13d7f892c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们将 &lt;code&gt;a ≡ b&lt;/code&gt; 作为 &lt;code&gt;Path _ a b&lt;/code&gt; 的简写，因为&lt;b&gt;路径类型就是 CuTT 版的相等性类型&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;使用 &lt;code&gt;≡&lt;/code&gt; 重写以上定义：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;constantPathLam′ : (A : Set) → (a : A) → a ≡ a
constantPathLam′ A a i = a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;constantPathLam′&lt;/code&gt; 就是立方类型论中对自反性的证明。 它已经在 Cubical Agda 的库中了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;import Cubical.Foundations.Prelude as Prelude
_ : {A : Set} {a : A} → a ≡ a
_ = Prelude.refl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以把路径当作一个大小无限的只读数组，其索引就是间点，它由数组元素的 getter 来定义。&lt;/p&gt;&lt;h2&gt;对称性&lt;/h2&gt;&lt;p&gt;正如我们可以找到间点的对称点一样，我们也可以反转一条路径 （代码中的参数重新对齐了，以便与类型签名一致）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;invert : (A : Set) (a b : A) (p : a ≡ b) → b ≡ a
invert    A         a b       p = λ i → p (~ i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为解释此函数，想象一条类型为 &lt;code&gt;a ≡ b&lt;/code&gt; 的路径 &lt;code&gt;p&lt;/code&gt;。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;101&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;101&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-eb21a23a83557bb96cfe3055e339aba7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们构造了一个新的路径-λ，它将每一个间点都映射到「&lt;code&gt;p&lt;/code&gt; 上对称的间点」上， 因此它的类型就是「与 &lt;code&gt;a ≡ b&lt;/code&gt; 对称的路径」也就是 &lt;code&gt;b ≡ a&lt;/code&gt;。下面是它的图解， 其中一条从 &lt;code&gt;i&lt;/code&gt; 到 &lt;code&gt;~ i&lt;/code&gt; 的映射被显式地画了出来（你需要自己脑补上方路径上所有的间点， 例如 &lt;code&gt;i&lt;/code&gt;，都被映射到了下方路径对应的点上，例如 &lt;code&gt;~ i&lt;/code&gt;）：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;483&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;483&quot; data-original=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;483&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;483&quot; data-original=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-19ac6bc5c36a72d3bec130a98f553f11_b.jpg&quot;/&gt;&lt;figcaption&gt;在此图中，从路径 p 上的间点 i 开始指向某个 a 的箭头表示 「与 i 对应的值（或者说点）为 a 」或「p i 的求值结果为 a」&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们刚才做了什么？我们创建了一个新的路径-λ，它返回某种由一个给定路径和 它接受的间点构成的复合表达式。利用类似的技术和一点函数式编程，我们可以再玩两个魔法。&lt;/p&gt;&lt;h2&gt;合同性&lt;/h2&gt;&lt;p&gt;首先，我们可以在 MLTT 中证明&lt;b&gt;合同性（Congruence）&lt;/b&gt;。我们创建一个函数，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;congruence
  : {A B : Set}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它接受一个从 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;B&lt;/code&gt; 的函数，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ (f : A → B)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和一条 &lt;code&gt;A&lt;/code&gt; 上两个居留元之间的路径，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ {x y : A}
  → (p : x ≡ y)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后返回一条类型为 &lt;code&gt;f x ≡ f y&lt;/code&gt; 的路径。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ f x ≡ f y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们要如何证明它？嗯…通过创建一条路径，然后对它接受的间点和其它提供的变量施一些魔法，就像这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;congruence f p = λ i → f (p i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码做了什么？它：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;创建了一个路径-λ，于是我们有了一个间点 &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;&lt;li&gt;把&lt;code&gt;i&lt;/code&gt; 传给 &lt;code&gt;p&lt;/code&gt; ，注意我们的路径 &lt;code&gt;p&lt;/code&gt; 上全都是类型为 &lt;code&gt;A&lt;/code&gt; 的值，它在 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 之间&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;把从 &lt;code&gt;p&lt;/code&gt; 中提取的值传给函数 &lt;code&gt;f&lt;/code&gt;，该函数接受一个 &lt;code&gt;A&lt;/code&gt; 的实例并返回一个 &lt;code&gt;B&lt;/code&gt; 的实例。&lt;/p&gt;&lt;p&gt;就是这样！我们可以可视化此过程。 首先我们将间点传给 &lt;code&gt;p&lt;/code&gt;：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;437&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;503&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;437&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;503&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-8ee61c27be761b10003af417ee245bc6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;接着我们在其结果上应用了 &lt;code&gt;f&lt;/code&gt; 后返回来：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;489&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;489&quot; data-original=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;489&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;489&quot; data-original=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-19adbd1b69e65d8eba27e9bcc32d31f4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;搞定！&lt;/p&gt;&lt;h2&gt;函数外延性&lt;/h2&gt;&lt;p&gt;&lt;b&gt;函数外延性（Function Extensionality）&lt;/b&gt;是这样一个命题：若两函数上的每一点都等价， 则两函数等价。以前我们无法结构化地证明它，然而现在有了 CuTT，我们就可以证明它了。 我们可以将函数外延性表示为一个函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;functionExtensionality
  : {A B : Set}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它接受两个从 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;B&lt;/code&gt; 的函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ {f g : A → B}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及一个二者上的每一点都相等的证明 &lt;code&gt;p&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ (p : ∀ a → f a ≡ g a)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并返回一个两函数等价的证明：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;→ f ≡ g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以构造一条返回一个函数的路径，其中的函数用 &lt;code&gt;p&lt;/code&gt; 来实现，从而证明函数外延性：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;functionExtensionality p i = λ a → p a i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一次，我们：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;创建了一个路径-λ，因此有了一个间点 &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;&lt;li&gt;它返回的另一个 λ 接受一个类型为 &lt;code&gt;A&lt;/code&gt; 的参数 &lt;code&gt;a&lt;/code&gt;，就像 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;g&lt;/code&gt; 那样&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;a&lt;/code&gt; 上应用 &lt;code&gt;p&lt;/code&gt;，我们就得到了一条类型为 &lt;code&gt;f a ≡ g a&lt;/code&gt; 的路径 （注意 &lt;code&gt;f a&lt;/code&gt; 和 &lt;code&gt;g a&lt;/code&gt; 的类型为 &lt;code&gt;B&lt;/code&gt;）&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;i&lt;/code&gt; 上应用该路径，我们就得到了一个 &lt;code&gt;B&lt;/code&gt; 的实例&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;为了图示此证明，我们首先画出 &lt;code&gt;p&lt;/code&gt;，即每一点相等的证明，它是一个返回一条路径的函数：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;438&quot; data-rawheight=&quot;271&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;438&quot; data-original=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;438&quot; data-rawheight=&quot;271&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;438&quot; data-original=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-200c3c2e6ac6b70cd459c857d5c37c57_b.jpg&quot;/&gt;&lt;figcaption&gt;图中从路径以外的任意一点开始，到路径上间点的每一根箭头都是一个函数&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;其中的 &lt;code&gt;p&lt;/code&gt; 是一个从 &lt;code&gt;a&lt;/code&gt; 到一条路径的函数，如果我们用间点来表示它原本会返回的点， 那么我们可以将它特化为一个从 &lt;code&gt;a&lt;/code&gt; 到路径上任意特定的点上的函数。 这样我们就创建了一条新的路径，它将每一个间点 &lt;code&gt;i&lt;/code&gt; 都映射成了一个通过 &lt;code&gt;i&lt;/code&gt; 将 &lt;code&gt;p&lt;/code&gt; 特化后所得到的函数。下面是它的图示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;463&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;463&quot; data-original=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;463&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;463&quot; data-original=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b3168f6dc66397c7b4d91591cb6e817a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;blockquote&gt;译注：我们可以换一种描述：&lt;code&gt;p&lt;/code&gt; 通过将任意类型为 &lt;code&gt;A&lt;/code&gt; 的值 &lt;code&gt;a&lt;/code&gt; 分别代入 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;g&lt;/code&gt;， 为 &lt;code&gt;f a&lt;/code&gt; 和 &lt;code&gt;g a&lt;/code&gt; 建立了一条证明二者等价的路径，而每一个具体的 &lt;code&gt;a&lt;/code&gt; 都可以被映射到 这条路径上的一个间点，把这样的每一个映射本身都看做一个个间点，这些间点连缀而成的路径也就成了 &lt;code&gt;f≡g&lt;/code&gt; 的证明。&lt;/blockquote&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;现在我们相当熟悉简单的路径了（希望如此）。 作为练习，请定义「高阶」路径，它的端点也是路径，这意味着我们的路径-λ 也会返回路径-λ， 例如，&lt;code&gt;λ i j → a&lt;/code&gt; 其中的 &lt;code&gt;a&lt;/code&gt; 包含自由变量 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt;。 请思考一下这样的路径，我们会在下一章中讨论它。&lt;/p&gt;</description>
<author>Oling Cat</author>
<guid isPermaLink="false">2020-01-14-102323224</guid>
<pubDate>Tue, 14 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>面向组合编程之可应用组合子</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2020-01-04-100941479.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/100941479&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4ed559ef2fa14f4f46ff2c74cc5de65f_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;函数式编程的核心思想就是组合，其他一切的设计都是围绕着组合来的。什么不可变性，什么纯函数，都不是函数式编程的真正关心的。有了组合，我们可以将小的东西组合成大的复杂的更有用的东西。有了组合，我们可以将副作用（不纯的函数）组合起来，将不同的副作用组合成大的复杂的更有用的副作用。这样，编写有副作用的程序时会非常简洁，容易改变行为，也容易测试，比如使用有名的polysemy库。&lt;/p&gt;&lt;p&gt;组合是如此的强大和美好，有没有简单的具体例子来展示其威力呢？下面我就以可应用函子为基础的组合子来给大家演示一下组合在parser上的应用。&lt;/p&gt;&lt;p&gt;让我们来完成这么一个简单的任务，写一个有四则运算和指数运算的表达式解析器，然后对解析后的表达式求值。这个表达式的运算符是带优先级的，并且支持括号嵌套，一个具体例子如下所示：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;  3 * (23 + 54 * (6 - 2) + 6)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以使用如下这个文法来描述我们要解析的表达式，这样我们就知道解析这个表达式需要的最基本的parser是什么了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;expr         ::= subExpr | binOpExpr
subExpr      ::= &amp;#39;(&amp;#39; expr &amp;#39;)&amp;#39; | const | neg | zero
binOpExpr    ::= sumOpExpr | prodOpExpr | expOpExpr
sumOpExpr    ::= &amp;#39;(&amp;#39; subExpr &amp;#39; &amp;#39; sumOp  &amp;#39; &amp;#39;subExpr &amp;#39;)&amp;#39;
sumOp        ::= &amp;#39;+&amp;#39; | &amp;#39;-&amp;#39;
prodOpExpr   ::= &amp;#39;(&amp;#39; subExpr &amp;#39; &amp;#39; prodOp &amp;#39; &amp;#39;subExpr &amp;#39;)&amp;#39;
prodOp       ::= &amp;#39;*&amp;#39; | &amp;#39;/&amp;#39;
expOpExpr    ::= &amp;#39;(&amp;#39; subExpr &amp;#39; &amp;#39; expOp  &amp;#39; &amp;#39;subExpr &amp;#39;)&amp;#39;
expOp        ::= &amp;#39;^&amp;#39;
const        ::= int
neg          ::= &amp;#39;-&amp;#39; subExpr
zero         ::= &amp;#39;z&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上面的文法描述我们可以看到，最基本的parser就是解析一个字符的parser。我们把最基本的parser按照文法的描述组合起来，就可以得到一个解析整个表达式的parser。也就是将如下所示的charP组合起来得到exprP：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- combine the charP to get exprP&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;exprP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如何将小的charP组合起来得到解析整个表达式的exprP呢，关键在于数据类型 Parser a 是可组合的。我们知道Monad m是可组合的，显然是可以满足这个需求的。但Monad m过于强大了，我们可以使用更简单些的同样是可组合的Applicative f，即我们将Parser 定义为一个可应用函子，就可以把小的charP组合起来得到大的exprP。于是我们定义Parser 为下面这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- | An ambiguous parser.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- | Change the result of a parser.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- fmap :: (a -&amp;gt; b) -&amp;gt; Parser a -&amp;gt; Parser b&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- | Inject a value into an identity parser.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- pure :: a -&amp;gt; Parser a&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- | Given a parser with a function value and another parser, parse the function&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- first and then the value, return a parser which applies the function to the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- value.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- (&amp;lt;*&amp;gt;) :: Parser (a -&amp;gt; b) -&amp;gt; Parser a -&amp;gt; Parser b&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了更方便的组合parser，还定义了下面几个便于使用的组合子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- infix form of function fmap&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- replace value in functor by a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- combine fa and fb, discard the value in fb&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fb&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- combine fa and fb, discard the value in fa&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fb&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们已经定义好了可应用函子 Parser，但似乎有这些还不够。比如我们在解析整数时，知道整数是由一个或多个数字组成的。那如何表示由一个或多个数字组成的组合运算呢，以及由零个或一个、或多个空格组成的空白这个组合运算呢。我们知道，这就是类似正则表达式中的 * 和 + 的匹配，这就要求Parser 具有Kleene 代数的结构，于是Parser 也必须是一个半环。上面的Applicative Parser的 &amp;lt;*&amp;gt; 和 pure 定义了半环的乘法和乘法的单位元，我们还需要定义Parser 这个半环的加法和加法的单位元，我们用Alternative 来完成这个定义。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alternative&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- | Construct a parser that never parses anything.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- empty :: Parser a&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- | Combine two parsers: When given an input, provide the results of both parser&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- run on the input.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- (&amp;lt;|&amp;gt;) :: Parser a -&amp;gt; Parser a -&amp;gt; Parser a&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Apply the parser zero or more times.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- many :: Parser a -&amp;gt; Parser [a]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- many p = some p &amp;lt;|&amp;gt; pure []&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Apply the parser one or more times.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- some :: Parser a -&amp;gt; Parser [a]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- some p = (:) &amp;lt;$&amp;gt; p &amp;lt;*&amp;gt; many p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Alternative中， &amp;lt;|&amp;gt; 和 empty 就是半环的加法和加法的单位元，many就是Kleene代数的 * 运算，而some就对应了 + 匹配。因为Alternative中已经有了many和some的缺省定义，所以在这里将many和some的实现注释掉了。&lt;/p&gt;&lt;p&gt;到此为止，我们就把解析这个表达式需要的组合子都已经定义好了，有empty、&amp;lt;|&amp;gt;、pure、&amp;lt;*&amp;gt;、many、some这些组合子。接下来我们就从最基本的parser开始，将这个基本的parser一步一步的组合成表达式的parser。&lt;/p&gt;&lt;p&gt;先定义predP和charP，stringP这些基本的parser。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- | Parse a character only when a predicate matches.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;predP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;predP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
                      &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;                 &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;       &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
                             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Succeed only when parsing the given character.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Parse a whole string.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;stringP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;stringP&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;stringP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，我们按要解析的表达式的文法来将上面这些基本的parser组合起来，得到exprP 这个解析整个表达式的parser。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;exprP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;exprP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binOpExprP&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zeroP&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;binOpExprP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOpExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prodOpExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expOpExprP&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;sumOpExprP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BinOpE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prodOpExprP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spaceP&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOpP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spaceP&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOpExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prodOpExprP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;sumOpP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AddBO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SubBO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;prodOpExprP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BinOpE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expOpExprP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spaceP&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prodOpP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spaceP&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prodOpExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expOpExprP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;prodOpP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MulBO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DivBO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;expOpExprP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BinOpE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spaceP&lt;/span&gt;
                           &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expOpP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spaceP&lt;/span&gt;
                           &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;expOpP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExpBO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;^&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;constP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConstE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;digitP&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;negP&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NegE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subExprP&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;zeroP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ZeroE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;digitP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isDigit&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;spaceP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charP&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，上面的代码几乎是直接翻译自表达式的文法，除了sumOpExprP和prodOpExprP稍微有些不同。&lt;/p&gt;&lt;p&gt;下面我们给出表达式 Expr 的定义和求值函数，用于保存parser的结果，求得表达式的值。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- | Kinds of binary operators.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BinOp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AddBO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SubBO&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MulBO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DivBO&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExpBO&lt;/span&gt;
           &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Some kind of arithmetic expression.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConstE&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BinOpE&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;BinOp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NegE&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ZeroE&lt;/span&gt;
          &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConstE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BinOpE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AddBO&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SubBO&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MulBO&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DivBO&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExpBO&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt;       &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Not support operator &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NegE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;negate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ZeroE&lt;/span&gt;      &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，我们将解析整个表达式的parser传给函数runParser，就可以从给定的一个字符串中解析得到表达式了。我们可以再进一步将其封装为函数 parseExpr，给这个函数输入一个字符串，我们可以得到一个可能的唯一表达式。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- | Apply a parser and return all ambiguous results,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- but only those where the input was fully consumed.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runParser&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runParser&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unP&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cs&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Apply a parser and only return a result, if there&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- was only one unambiguous result with output fully consumed.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runParserUnique&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runParserUnique&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runParser&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cs&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;getResult&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;parseExpr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;parseExpr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runParserUnique&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exprP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在ghci中用parseExpr 函数运行我们一开始给出的字符串，其结果如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lhs&quot;&gt;*ApplicativeParser&amp;gt; parseExpr &amp;#34;3 * (23 + 54 * (6 - 2) + 6)&amp;#34;
Just (BinOpE MulBO (ConstE 3) (BinOpE AddBO (ConstE 23) (BinOpE AddBO
 (BinOpE MulBO (ConstE 54) (BinOpE SubBO (ConstE 6) (ConstE 2))) (ConstE 6))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对这个表达式求值后的结果如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lhs&quot;&gt;*ApplicativeParser&amp;gt; fmap evalExpr $ parseExpr &amp;#34;3 * (23 + 54 * (6 - 2) + 6)&amp;#34;
Just 735&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后总结一下。我们通过构造Parser的可应用函子(Applicative)和可选函子(Alternative)，得到了empty、&amp;lt;|&amp;gt;、pure、&amp;lt;*&amp;gt;、many、some这些组合子，使得Parser a 是一个半环，有kleene 代数结构。从而让我们可以通过这些组合子将基本的parser (charP) 组合起来得到一个可以解析完整表达式的parser (exprP)。而且实现非常优雅、简单、直观，让我们体会到了组合的威力。&lt;/p&gt;</description>
<author>parker liu</author>
<guid isPermaLink="false">2020-01-04-100941479</guid>
<pubDate>Sat, 04 Jan 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>演算空明诀 — 用 Emacs Lisp 实现 Simply Untyped λ Calculus</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-12-29-99992921.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/99992921&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近为了了解PL，开始看 &lt;i&gt;Types and Programming Languages&lt;/i&gt; （下称TAPL）。知乎上说最好自己实现一遍解释器才会对λ演算有深入的了解，所以我就实现了一遍。实现过以后好像没有对λ演算醍醐灌顶， de Bruijn index 倒确实比以前明白了。&lt;/p&gt;&lt;p&gt;首先是Term和Context的（伪）定义：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;;; Term = (Var index context-size)
;;      | (Abs term bound-var-name)
;;      | (App term term)
;; Context = [(name, nil)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和书里不同的是去除了info，Context里的Binding用nil代替，其他一样。由于Emacs Lisp没有与Haskell、OCaml类似的类型系统，我就用S表达式代替（所以周围加了括号）这样正好方便类型匹配（pattern matching是这么说么）。类型匹配用的是Stefan Monnier写的pcase库。&lt;/p&gt;&lt;p&gt;下面是几个方便函数。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context-elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Get name of CONTEXT-ELM.&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context-elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;add-var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Add VAR (string) to CONTEXT&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;valuep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;打印&lt;/h2&gt;&lt;p&gt;把de Bruijin index转成变量名（x, y, etc）的函数。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index2name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Translate INDEX to variable name in CONTEXT.&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unique-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Return a list (CONTEXT’ NAME’).
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;If NAME is in CONTEXT, generate a unique one (NAME’) and push to
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CONTEXT (CONTEXT’), otherwise return (CONTEXT NAME).&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cl-labels&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context-elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context-elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;;; f returns t if CONTEXT-ELM has the same name as NAME&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;or2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; or is a special form&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cl-reduce&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;or2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; exists another NAME&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unique-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;;; NAME is unique, push to context&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来就是打印函数。用pcase匹配 &lt;code&gt;term&lt;/code&gt; 处理三种情况。打印的时候尽量不用括号，除非application里左边是abstraction，或者右边是application。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Display TERM in CONTEXT.&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; variable&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;number-to-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;index2name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Bad index: %s, term: %s context: %s&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; abstraction&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pcase-let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unique-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;λ%s.%s&amp;#34;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; application&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;;; add parenthesis for abs and app, but not var&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;Var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1t&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2t&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;No matching pattern: %s&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在scratch buffer里试试：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;y&amp;#34;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;xy&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;y&amp;#34;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λx.xy&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;解析&lt;/h2&gt;&lt;p&gt;手写内部结构有点痛苦，正好Emacs Lisp有方便的S表达式，写个简单的parser很容易。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; Term := Abs | App | Var | (Term)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; Abs  := λ Var Term&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; App  := Term Term&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; Var  := Symbol&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Parse TERM into internal structure.
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CONTEXT is current context.&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbolp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cl-labels&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cl-position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;No previous declaration: %s&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;No matching pattern: %s&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，在scratch buffer里试试：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λx.x&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λx.λy.xy&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;(λx.λy.xy)λx.x&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λx.λx&amp;#39;.x&amp;#39;x&amp;#39;&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λx.(λx&amp;#39;.x&amp;#39;)x&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以看看de Bruijin index&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λ.(λ.0)0&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λ.λ.10&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λ.λ.λ.(21)0&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;Shift &amp;amp; substitution&lt;/h2&gt;&lt;p&gt;书里用了一个本地的匿名函数（所以省略了 &lt;code&gt;d&lt;/code&gt; ），我觉得分开写更清楚。基本上把书里shift和substitution的规则转化成代码就好了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shift1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shift1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Shift up D for indexes &amp;gt;= C in TERM.&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; when we shift up, that always means we are put into another&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; layer of abstraction, so size + 1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; go into one more layer of abstraction, c+1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shift1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; simply recurs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shift1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                          &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shift1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;No matching pattern: %s&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Substitute J with S in TERM.
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;I.e. “[j → s] t”.&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;No matching pattern: %s&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Perform β-reduction.
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;T1 is body of function, V is argument.&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;No matching pattern: %s&amp;#34;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TAPL把shift和substitution抽象成一个，不太好理解。所以我就没费劲，还是写成两个。&lt;/p&gt;&lt;h2&gt;Evaluation&lt;/h2&gt;&lt;p&gt;同样，基本上是TAPL里三个evaluation规则的直译：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#34;Evaluate TERM in CONTEXT.
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;STEP, if non-nil, is the number of steps to evaluate.&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;1.0e+INF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; t := var | abs | app&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; v := abs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Abs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; first reduce t1 to a value&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;valuep&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; then reduce t2 to a value&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;valuep&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; finally apply&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;valuep&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;valuep&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;beta&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; no more to apply&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是Typed lambda calculus，遇到最后没有下一步可走的情况应该报错，但是这里只是停止。来试几个简单的例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;(λx.x)λy.y&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λy.y&amp;#34;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;((λx.x)λn.λm.mn)((λy.y)λz.z)&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;(λn.λm.mn)((λy.y)λz.z)&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;(λn.λm.mn)λz.z&amp;#34;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#34;λm.mλz.z&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;感觉没问题，如果读者有发现错误，请不吝赐教。&lt;/p&gt;</description>
<author>安仁人</author>
<guid isPermaLink="false">2019-12-29-99992921</guid>
<pubDate>Sun, 29 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>半环和迷宫</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-12-28-99863777.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/99863777&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;故事要靠设置悬念吸引读者，比如迷宫探险。希腊神话有米诺斯的迷宫，讲的是可怜的王子要去斩杀牛头怪，借助了公主赠与的毛线团才成功走出迷宫。中国的迷宫故事有点不一样，走迷宫从来不是技术活，重点是心魔，至于打破心魔拿到宝物以后故事就没有悬念了。跟米诺斯迷宫比较类似的是蚁穿九珠曲，讲的是松赞干布的求婚使者借助蚂蚁和蜜糖完成丝穿九曲明珠的的故事。我觉得迷宫故事有悬念跟递归程序有结果很类似，弹性毛线团就像尾递归的返回值，处理好探索迷宫的顺序，找到牛头怪就对了，而蚂蚁身上绑的丝线就像是原始递归的高阶carrier，可以用来标记或者缓存所有中间结果，借助CPS风格还能让我们逆转这些结果的构造顺序，有人用thread描述在递归函数中把普通carrier提升为高阶carrier的行为，我觉得非常形象，另外Haskell的tying the knot甚至能让我们在探索过程中同时使用来自过去和未来的结果。在Haskell里实现递归如此自然而美好得益于inductive type和recursion schemes，递归程序变成了递归数据结构之间的整体变换，最好的情况是分而治之用pattern functor把输入展开再折叠成输出&lt;sup data-text=&quot;&quot; data-url=&quot;https://bartoszmilewski.com/2018/12/20/open-season-on-hylomorphisms/&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;1&quot;&gt;[1]&lt;/sup&gt;，数据结构动态地驱动计算逻辑，想避免类型封闭的坏处还可以用finally tagless直接表示输出结果抽象语法树的折叠过程，这样就省掉了展开这一步，往往比较复杂的情况是在动态规划折叠过程中如何选择carrier，了解一些常见的代数结构非常有帮助。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE TypeFamilies      #-}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE ViewPatterns      #-}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE DeriveFunctor     #-}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE FlexibleContexts  #-}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.String&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test.QuickCheck&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hiding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Monoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isAlphaNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Foldable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Lens&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hiding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Arrow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Applicative&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;liftA2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftA3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.IntSet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IS&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.IntMap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;今天我们来聊聊一个同时存在两种折叠方法的代数结构——半环。文中很多例子都可以用catamorphism，histomorphism，hylomorphism来写，当然有些在五行之外，比如图，我们会聊到Andrey Mokhov和Martin Erwig在Algebraic Graph方面的探索。半环是包含两种兼容幺半群的一种代数结构（R，+，*，0，1），这套表示来源于自然数，对应着计数的加法原理和乘法原理。半环需要满足环的一系列公理，比如加法和乘法满足幺半群公理，严格来说环的乘法并不需要幺元的存在，此外还要求加法可交换。所谓兼容意味着乘法之于加法可分配，另外加法的幺元可吸收，这是额外添加的半环公理，因为相比于环缺少了加法逆元无法证明加法幺元可吸收。如果定义好合适的相等关系，这些公理都可以作为QuickCheck的特性。自然数和布尔代数是最常见的两种半环结构，布尔代数常常用来解释闭包性质，比如连通性或者判定问题。此外两种半环类型的积仍然是半环，类似于predicate可组合，返回值是半环的一元函数是半环。任何的半环都包含两种幺半群，可以定义相应的加法幺半群和乘法幺半群wrapper，接着定义对应半环列表的折叠，即累和累积，布尔代数的add其实就是any，mul其实就是all。把半环和自然数的类比继续下去，还可以定义向量的点乘，即乘积和。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- (R, +, *, 0, 1)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- (R, +, 0) commutative monoid&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- (R, *, 1) monoid&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- distributive: (r1 + r2) * r3 = r1 * r3 + r2 * r3, r1 * (r2 + r3) = r1 * r2 + r1 * r3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- annihilating: zero * r = zero = r * zero&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;dot&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dot&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zipWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;
  
&lt;span class=&quot;nf&quot;&gt;law_commA&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;law_unitA&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;law_asscA&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;law_unitM&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;law_asscM&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;law_anniL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;law_anniR&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;law_distL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;law_distR&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftA2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftA2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;在看具体的例子之前，再介绍几个辅助类型类。类似于自由幺半群的生成元或者生成文法的字符，我们定义一个类型类Language来把字符提升为半环。如果半环存在偏序关系，给半环添加求不动点的闭包运算就构成Kleene Algebra，可以用来解决图的最短最长最宽路径问题，其实就是Floyd–Warshall最短路径算法。事实上半环与动态规划的联系比这还要紧密，许多最优子结构都依赖半环的单调有序性。之前聊到偏序关系可以由格用代数方法定义，我们可以用半环的加法运算往半环上加序结构。为什么是加法呢？因为乘法不可交换。直觉上可以想成编写词典，乘法是用字符构造单词，加法把单词总结为词典，类似的乘法对应着动态规划的不同阶段，加法对应着每个阶段的总结，单调性保证了最后得到的是整个问题的最大值或者最小值，也就是最优子结构&lt;sup data-text=&quot;Huang, Liang. 2008. Advanced Dynamic Programming in Semiring and Hypergraph Frameworks&quot; data-url=&quot;&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;2&quot;&gt;[2]&lt;/sup&gt;。半环跟许多代数结构联系非常紧密，比如分配格就是一种加法乘法满足幂等律的半环，半模是定义在半环基础上的一种代数结构，典型的例子就是线性代数的向量空间。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- idempotent: r + r = r&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- partial order: a &amp;lt;= b &amp;lt;=&amp;gt; lub a b = b&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- idepotent imply monotonic: a &amp;lt;= b =&amp;gt; a &amp;lt;+&amp;gt; r &amp;lt;= b &amp;lt;+&amp;gt; r, &amp;lt;.&amp;gt; r &amp;lt;= b &amp;lt;.&amp;gt; r, r &amp;lt;.&amp;gt; a &amp;lt;= r &amp;lt;.&amp;gt; b    &lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IdempotentSemiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;lub&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;lub&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- (S, +, *, 0, 1), closed&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- fixpoint: star r = one + r * star r&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IdempotentSemiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KleeneAlgebra&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;第一个例子是集合，集合加上最常见的两种运算交与并就构成一个满足公理的半环，这里为了避免谈论集合的有限性，我们添加了特殊集合表示全集，如果仅仅考虑有限集合的幂集就不必如此，此外集合的差和交，并和补两两也都构成半环。如果集合的元素是幺半群，那么集合还有另外一种半环结构，这几乎可以算是自由半环，其实Haskell定义自由半环不太容易，主要是因为表示自由可交换幺半群不易，如果用Set [a]则增添了多余的公理，而用[[a]]则缺少必需的公理。这种表示是定义形式语言的基础，形式语言可能是用到半环最多的领域了，表示形式语言的形式文法，自动机，状态机以及正则表达式都跟半环有关，识别形式语言的CKY算法和Viterbi算法也都是半环的应用，Dolan的Fun With Semiring&lt;sup data-text=&quot;Stephen Dolan. 2013. Fun with semirings: a functional pearl on the abuse of linear algebra&quot; data-url=&quot;&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;3&quot;&gt;[3]&lt;/sup&gt;强烈建议读一读，里面讲到了线性变换作为半环的各种有趣应用。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- semiring over set, powerset, upper sets&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- (union, intersection) (symmetic difference, intersection) (union, relative complement)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Arbitrary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Arbitrary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;arbitrary&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sized&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resize&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arbitrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;intersection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- semiring over set of monoid, almost free semiring [[a]], formal language (define regular language algebraically)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Arbitrary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Arbitrary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;arbitrary&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arbitrary&lt;/span&gt; 
  
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foldMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;下面是分别用递归函数，recursion scheme，final tagless风格实现的正则表达式，这里我们分别只写了一种函数，algebra或者interpreter，但却得到了一类东西。这种通过在原结构里面加carrier实现多态的方法其实很常见，形式语言叫weight，程序语言叫annotation，动态规划叫memoization，自动微分叫derivation，图论叫label。通过选择不同的半环类型carrier可以得到不同的解释器，如果是同态那正确性更容易得到保证，比如选择布尔代数，那它就是正则匹配，如果选择自然数，那它就是在计算不同正则匹配方式的数目。这样的定义几乎算得上是Free Kleene Algebra，唯一不足的是无法保证Kleene Algebra闭包运算的公理，所以比如在计算（ab）*匹配空字符串时数目其实是不对的&lt;sup data-text=&quot;Sebastian Fischer, Frank Huch, and Thomas Wilke. 2010. A play on regular expressions&quot; data-url=&quot;&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;4&quot;&gt;[4]&lt;/sup&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Regex r&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showString&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showString&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;      
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showString&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showString&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showString&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tok&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enumFromTo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minBound&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maxBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alt&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showParen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showString&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showParen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showParen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showsPrec&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showString&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
    
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Arbitrary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;arbitrary&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sized&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arbitraryASCIIChar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;suchThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAlphaNum&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;      
      &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frequency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ra&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt; 
  &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ra&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IdempotentSemiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KleeneAlgebra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;  
&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tok&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uncurry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;splitAt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- recursion scheme&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmpF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EpsF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TokF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AltF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CatF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RepF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmpF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emp&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EpsF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eps&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TokF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AltF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CatF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RepF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Emp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmpF&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EpsF&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tok&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TokF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AltF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CatF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RepF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- finally tagless&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;eps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;eps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;tok&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tok&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;alt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;alt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uncurry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;splitAt&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt;列表或者树都有良好的代数性质，无论是折叠还是展开都非常方便，图算得上异类，形象点说线头太多，没法一手拎起来，如果退一步，选择两种不同的数据结构在Haskell里处理图，我们还是能在正确性，灵活性甚至性能方面取得良好的平衡。构造图可以用基于半环的点边集合表示&lt;sup data-text=&quot;Andrey Mokhov. 2017. Algebraic graphs with class&quot; data-url=&quot;&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;5&quot;&gt;[5]&lt;/sup&gt;，加法运算定义为点边集合的并，乘法定义类似，除了新增添的桥接左右两边点的边集合，可以验证加法乘法满足结合律和分配律，与半环相比不同点在于加法幺元和乘法幺元重合导致不存在消去零元，这一般不影响我们用半环构造图，可以证明所有的有向图和无向图都可以如此构造，背后用到的是图和关系的同构。我们还可以把图声明为数类型类的实例，这样可以用普通的算术式表示图，比如数的阶乘表示链，0*（1+2+3）表示星图，还可以重载字符串类型类，我们可以非常简洁直观地写各种图相关的DSL，比如计算图或者Todo List。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Relation v e&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vy&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ey&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vy&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ey&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;fromInteger&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromInteger&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;signum&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;negate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IsString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IsString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;fromString&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromString&lt;/span&gt;
      
&lt;span class=&quot;c1&quot;&gt;-- Path a&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
      
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Tree a&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forest&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Tropical a&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tropical&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tropical&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;
  
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tropical&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Infinity&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tropical&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tropical&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;  
  &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dist&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IdempotentSemiring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tropical&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KleeneAlgebra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tropical&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt;我们知道图的点边集合表示无法高效地表达各类图算法，在Haskell里也无法做类型匹配，解决这个问题可以把图换成邻接表，注意到IntMap在Haskell可以支持最坏情况几乎常数级的查找和删除操作，可以再做一个优化把点encode成自然数，结合ViewPatterns扩展，我们就能用类型匹配来表达各类图算法，这就是Inductive Graphs and Functional Graph Algorithm&lt;sup data-text=&quot;Erwig, Martin. 2001. Inductive Graphs and Functional Graph Algorithms &quot; data-url=&quot;&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;6&quot;&gt;[6]&lt;/sup&gt;这篇文章表达的意思。为了缓存遍历图的过程，我们再定义几个辅助类，Path用来记录前向遍历Fanin的所有路径，Tree用来记录后向遍历Fanout的所有路径，乘法定义的不同体现了方向；Tropical半环以及引申出的其他半环则常常用于路径长度宽度相关的算法。mkGraph负责将点边集合表示转换为邻接表，context用在类型匹配中从图中剥离一个特定的点，如果用Haskell的IntMap实现可以假定常数复杂度。BFS和DFS的表示也非常直观，并且是多态的，选择不同的label得到不同的递归函数，比如把Seq String用在BFS得到的是从根到这一点的所有最短路径，把Seq String换为Path（Seq String）得到的是所有路径以及它们的所有子路径，把Tropical半环(max,+)用在DFS得到高度，如果用Dist（-1）标记所有边就能得到深度，别忘了半环可以组合，比如可以把它们wrap进Path或者Tree，这样其实是缓存了所有计算过程，两个半环的和仍然是半环，BFS用(Tropical Int, Seq String)可以计算图的半径以及给出所有可能的半径。有向无环图拓扑排序也可以表达，比如今年Advent of code第六天的两道题用这套方法解决起来就很顺手，数DAG里面有序对的数目可以用自然数半环，最后每个顶点总结时额外加一就行。之前说过幂等半环可以定义偏序，我们还可以表达更一般的最短路径算法Dijkstra。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;mkGraph&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mkGraph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foldrWithKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\k&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;succ&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insertWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\nv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;succ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insertWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\nv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;bft&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;bft&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;     &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;                                &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;bft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bft&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;bft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftA3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapMaybeWithKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;dft&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dft&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;     &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;                                &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dft&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uncurry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftA3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapMaybeWithKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;dag&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dag&amp;#39;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;     &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;                                &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dag&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dag&amp;#39;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dag&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dag&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dag&amp;#39;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IntMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftA3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapMaybeWithKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Language&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alphabet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uncurry&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unzip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapWithKey&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foldrWithKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foldrWithKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;dag&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Semiring&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dag&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foldrWithKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dag&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;了解半环能够让我们更深刻地理解问题和算法，避免当局者迷，直觉上半环代表着两种计算模式，并行和串行，也正好对应着走迷宫的两种情形，在分岔路口做选择和埋头往前走扩展当前的路径。半环的应用不止于此，下面的文章还会聊到多项式，自动微分和字典树Trie。&lt;/p&gt;</description>
<author>anselyoung</author>
<guid isPermaLink="false">2019-12-28-99863777</guid>
<pubDate>Sat, 28 Dec 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
