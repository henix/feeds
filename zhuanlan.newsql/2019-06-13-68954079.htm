<div class="title-image"><img src="https://pic4.zhimg.com/v2-b5f498470ddbe833aa913d5a12886a90_b.jpg" alt=""></div><p>作者：李建俊</p><p>上一篇《<a href="https://link.zhihu.com/?target=https%3A//pingcap.com/blog-cn/tikv-source-code-reading-7/" class=" wrap external" target="_blank" rel="nofollow noreferrer">gRPC Server 的初始化和启动流程</a>》为大家介绍了 gRPC Server 的初始化和启动流程，本篇将带大家深入到 <a href="https://link.zhihu.com/?target=https%3A//github.com/pingcap/grpc-rs" class=" wrap external" target="_blank" rel="nofollow noreferrer">grpc-rs</a> 这个库里，查看 RPC 请求是如何被封装和派发的，以及它是怎么和 Rust Future 进行结合的。</p><h2>gRPC C Core</h2><p>gRPC 包括了一系列复杂的协议和流控机制，如果要为每个语言都实现一遍这些机制和协议，将会是一个很繁重的工作。因此 gRPC 提供了一个统一的库来提供基本的实现，其他语言再基于这个实现进行封装和适配，提供更符合相应语言习惯或生态的接口。这个库就是 gRPC C Core，grpc-rs 就是基于 gRPC C Core 进行封装的。</p><p>要说明 grpc-rs 的实现，需要先介绍 gRPC C Core 的运行方式。gRPC C Core 有三个很关键的概念 <code>grpc_channel</code>、<code>grpc_completion_queue</code>、<code>grpc_call</code>。<code>grpc_channel</code> 在 RPC 里就是底层的连接，<code>grpc_completion_queue</code> 就是一个处理完成事件的队列。<code>grpc_call</code> 代表的是一个 RPC。要进行一次 RPC，首先从 <code>grpc_channel</code> 创建一个 grpc_call，然后再给这个 <code>grpc_call</code> 发送请求，收取响应。而这个过程都是异步，所以需要调用 <code>grpc_completion_queue</code> 的接口去驱动消息处理。整个过程可以通过以下代码来解释（为了让代码更可读一些，以下代码和实际可编译运行的代码有一些出入）。</p><div class="highlight"><pre><code class="language-text">grpc_completion_queue* queue = grpc_completion_queue_create_for_next(NULL);
grpc_channel* ch = grpc_insecure_channel_create(&#34;example.com&#34;, NULL);
grpc_call* call = grpc_channel_create_call(ch, NULL, 0, queue, &#34;say_hello&#34;);
grpc_op ops[6];
memset(ops, 0, sizeof(ops));
char* buffer = (char*) malloc(100);
ops[0].op = GRPC_OP_SEND_INITIAL_METADATA;
ops[1].op = GRPC_OP_SEND_MESSAGE;
ops[1].data.send_message.send_message = &#34;gRPC&#34;;
ops[2].op = GRPC_OP_SEND_CLOSE_FROM_CLIENT;
ops[3].op = GRPC_OP_RECV_INITIAL_METADATA;
ops[4].op = GRPC_OP_RECV_MESSAGE;
ops[4].data.recv_message.recv_message = buffer;
ops[5].op = GRPC_OP_RECV_STATUS_ON_CLIENT;
void* tag = malloc(1);
grpc_call_start_batch(call, ops, 6, tag);
grpc_event ev = grpc_completion_queue_next(queue);
ASSERT_EQ(ev.tag, tag);
ASSERT(strcmp(buffer, &#34;Hello gRPC&#34;));</code></pre></div><p>可以看到，对 <code>grpc_call</code> 的操作是通过一次 <code>grpc_call_start_batch</code> 来指定的。这个 start batch 会将指定的操作放在内存 buffer 当中，然后通过 <code>grpc_completion_queue_next</code> 来实际执行相关操作，如收发消息。这里需要注意的是 <code>tag</code> 这个变量。当这些操作都完成以后，<code>grpc_completion_queue_next</code> 会返回一个包含 tag 的消息来通知这个操作完成了。所以在代码的末尾就可以在先前指定的 <code>buffer</code> 读出预期的字符串。</p><p>由于篇幅有限，对于 gRPC C Core 的解析就不再深入了，对这部分很感兴趣的朋友也可以在 <a href="https://link.zhihu.com/?target=https%3A//github.com/grpc/grpc" class=" wrap external" target="_blank" rel="nofollow noreferrer">github.com/grpc/grpc</a> 阅读相关文档和源码。</p><h2>封装与实现细节</h2><p>通过上文的分析可以明显看到，gRPC C Core 的通知机制其实和 Rust Future 的通知机制非常类似。Rust Future 提供一个 poll 方法来检验当前 Future 是否已经 ready。如果尚未 ready，poll 方法会注册一个通知钩子 <code>task</code>。等到 ready 时，<code>task</code> 会被调用，从而触发对这个 Future 的再次 poll，获取结果。<code>task</code> 其实和上文中的 <code>tag</code> 正好对应起来了，而在 grpc-rs 中，<code>tag</code> 就是一个储存了 <code>task</code> 的 enum。</p><div class="highlight"><pre><code class="language-text">pub enum CallTag {
   Batch(BatchPromise),
   Request(RequestCallback),
   UnaryRequest(UnaryRequestCallback),
   Abort(Abort),
   Shutdown(ShutdownPromise),
   Spawn(SpawnNotify),
}</code></pre></div><p><code>tag</code> 之所以是一个 enum 是因为不同的 call 会对应不同的行为，如对于服务器端接受请求的处理和客户端发起请求的处理就不太一样。</p><p>grpc-rs 在初始化时会创建多个线程来不断调用 <code>grpc_completion_queue_next</code> 来获取已经完成的 <code>tag</code>，然后根据 <code>tag</code>的类型，将数据存放在结构体中并通知 <code>task</code> 来获取。下面是这个流程的代码。</p><div class="highlight"><pre><code class="language-text">// event loop
fn poll_queue(cq: Arc&lt;CompletionQueueHandle&gt;) {
   let id = thread::current().id();
   let cq = CompletionQueue::new(cq, id);
   loop {
       let e = cq.next();
       match e.event_type {
           EventType::QueueShutdown =&gt; break,
           // timeout should not happen in theory.
           EventType::QueueTimeout =&gt; continue,
           EventType::OpComplete =&gt; {}
       }

       let tag: Box&lt;CallTag&gt; = unsafe { Box::from_raw(e.tag as _) };

       tag.resolve(&amp;cq, e.success != 0);
   }
}</code></pre></div><p>可以看到，<code>tag</code> 会被强转成为一个 <code>CallTag</code>，然后调用 <code>resolve</code> 方法来处理结果。不同的 enum 类型会有不同的 <code>resolve</code> 方式，这里挑选其中 <code>CallTag::Batch</code> 和 <code>CallTag::Request</code> 来进行解释，其他的 <code>CallTag</code> 流程类似。</p><p><code>BatchPromise</code> 是用来处理上文提到的 <code>grpc_call_start_batch</code> 返回结果的 <code>tag</code>。<code>RequestCallback</code> 则用来接受新的 RPC 请求。下面是 <code>BatchPromise</code> 的定义及其 <code>resolve</code> 方法。</p><div class="highlight"><pre><code class="language-text">/// A promise used to resolve batch jobs.
pub struct BatchPromise {
   ty: BatchType,
   ctx: BatchContext,
   inner: Arc&lt;Inner&lt;Option&lt;MessageReader&gt;&gt;&gt;,
}

impl BatchPromise {
   fn handle_unary_response(&amp;mut self) {
       let task = {
           let mut guard = self.inner.lock();
           let status = self.ctx.rpc_status();
           if status.status == RpcStatusCode::Ok {
               guard.set_result(Ok(self.ctx.recv_message()))
           } else {
               guard.set_result(Err(Error::RpcFailure(status)))
           }
       };
       task.map(|t| t.notify());
   }

   pub fn resolve(mut self, success: bool) {
       match self.ty {
           BatchType::CheckRead =&gt; {
               assert!(success);
               self.handle_unary_response();
           }
           BatchType::Finish =&gt; {
               self.finish_response(success);
           }
           BatchType::Read =&gt; {
               self.read_one_msg(success);
           }
       }
   }
}</code></pre></div><p>上面代码中的 <code>ctx</code> 是用来储存响应的字段，包括响应头、数据之类的。当 <code>next</code> 返回时，gRPC C Core 会将对应内容填充到这个结构体里。<code>inner</code> 储存的是 <code>task</code> 和收到的消息。当 <code>resolve</code> 被调用时，先判断这个 <code>tag</code> 要执行的是什么任务。<code>BatchType::CheckRead</code> 表示是一问一答式的读取任务，<code>Batch::Finish</code> 表示的是没有返回数据的任务，<code>BatchType::Read</code> 表示的是流式响应里读取单个消息的任务。拿 <code>CheckRead</code> 举例，它会将拉取到的数据存放在 <code>inner</code>里，并通知 <code>task</code>。而 <code>task</code> 对应的 Future 再被 poll 时就可以拿到对应的数据了。这个 Future 的定义如下：</p><div class="highlight"><pre><code class="language-text">/// A future object for task that is scheduled to `CompletionQueue`.
pub struct CqFuture&lt;T&gt; {
    inner: Arc&lt;Inner&lt;T&gt;&gt;,
}

impl&lt;T&gt; Future for CqFuture&lt;T&gt; {
    type Item = T;
    type Error = Error;

    fn poll(&amp;mut self) -&gt; Poll&lt;T, Error&gt; {
        let mut guard = self.inner.lock();
        if guard.stale {
            panic!(&#34;Resolved future is not supposed to be polled again.&#34;);
        }

        if let Some(res) = guard.result.take() {
            guard.stale = true;
            return Ok(Async::Ready(res?));
        }

        // So the task has not been finished yet, add notification hook.
        if guard.task.is_none() || !guard.task.as_ref().unwrap().will_notify_current() {
            guard.task = Some(task::current());
        }

        Ok(Async::NotReady)
    }
}</code></pre></div><p><code>Inner</code> 是一个 <code>SpinLock</code>。如果在 poll 时还没拿到结果时，会将 <code>task</code> 存放在锁里，在有结果的时候，存放结果并通过 <code>task</code> 通知再次 poll。如果有结果则直接返回结果。</p><p>下面是 <code>RequestCallback</code> 的定义和 <code>resolve</code> 方法。</p><div class="highlight"><pre><code class="language-text">pub struct RequestCallback {
   ctx: RequestContext,
}

impl RequestCallback {
   pub fn resolve(mut self, cq: &amp;CompletionQueue, success: bool) {
       let mut rc = self.ctx.take_request_call_context().unwrap();
       if !success {
           server::request_call(rc, cq);
           return;
       }

       match self.ctx.handle_stream_req(cq, &amp;mut rc) {
           Ok(_) =&gt; server::request_call(rc, cq),
           Err(ctx) =&gt; ctx.handle_unary_req(rc, cq),
       }
   }
}</code></pre></div><p>上面代码中的 <code>ctx</code> 是用来储存请求的字段，主要包括请求头。和 <code>BatchPromise</code> 类似，<code>ctx</code> 的内容也是在调用 <code>next</code> 方法时被填充。在 <code>resolve</code> 时，如果失败，则再次调用 <code>request_call</code> 来接受下一个 RPC，否则会调用对应的 RPC 方法。</p><p><code>handle_stream_req</code> 的定义如下：</p><div class="highlight"><pre><code class="language-text">pub fn handle_stream_req(
   self,
   cq: &amp;CompletionQueue,
   rc: &amp;mut RequestCallContext,
) -&gt; result::Result&lt;(), Self&gt; {
   let handler = unsafe { rc.get_handler(self.method()) };
   match handler {
       Some(handler) =&gt; match handler.method_type() {
           MethodType::Unary | MethodType::ServerStreaming =&gt; Err(self),
           _ =&gt; {
               execute(self, cq, None, handler);
               Ok(())
           }
       },
       None =&gt; {
           execute_unimplemented(self, cq.clone());
           Ok(())
       }
   }
}</code></pre></div><p>从上面可以看到，整个过程先通过 <code>get_handler</code>，根据 RPC 想要执行的方法名字拿到方法并调用，如果方法不存在，则向客户端报错。可以看到这里对于 <code>Unary</code> 和 <code>ServerStreaming</code> 返回了错误。这是因为这两种请求都是客户端只发一次请求，所以返回错误让 <code>resolve</code> 继续拉取消息体然后再执行对应的方法。</p><p>为什么 <code>get_handler</code> 可以知道调用的是什么方法呢？这是因为 gRPC 编译器在生成代码里对这些方法进行了映射，具体的细节在生成的 <code>create_xxx_service</code> 里，本文就不再展开了。</p><h2>小结</h2><p>最后简要总结一下 grpc-rs 的封装和实现过程。当 grpc-rs 初始化时，会创建数个线程轮询消息队列（<code>grpc_completion_queue</code>）并 <code>resolve</code>。当 server 被创建时，RPC 会被注册起来，server 启动时，grpc-rs 会创建数个 <code>RequestCall</code> 来接受请求。当有 RPC 请求发到服务器端时，<code>CallTag::Request</code> 就会被返回并 <code>resolve</code>，并在 <code>resolve</code> 中调用对应的 RPC 方法。而 client 在调用 RPC 时，其实都是创建了一个 Call，并产生相应的 <code>BatchPromise</code> 来异步通知 RPC 方法是否已经完成。</p><p>还有很多 grpc-rs 的源码在我们的文章中暂未涉及，其中还有不少有趣的技巧，比如，如何减少唤醒线程的次数而减少切换、如何无锁地注册调用各个 service 钩子等。欢迎有好奇心的小伙伴自行阅读源码，也欢迎大家提 issue 或 PR 一起来完善这个项目。</p><p><b>原文阅读：</b></p><a href="https://link.zhihu.com/?target=https%3A//www.pingcap.com/blog-cn/tikv-source-code-reading-8/" data-draft-node="block" data-draft-type="link-card" data-image="https://pic2.zhimg.com/v2-60ab5bd867c2434d70c957a02a2169e1_ipico.jpg" data-image-width="1200" data-image-height="1200" class=" wrap external" target="_blank" rel="nofollow noreferrer">TiKV 源码解析系列文章（八）grpc-rs 的封装与实现</a><p></p>