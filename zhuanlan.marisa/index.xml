<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>雾雨魔法店</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/</link>
<description>http://zhuanlan.zhihu.com/marisa/20419321</description>
<language>zh-cn</language>
<lastBuildDate>Sat, 21 Dec 2019 05:54:34 +0800</lastBuildDate>
<item>
<title>Haskell tutorial -- Chapter 1（Introduction）</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-12-20-97925709.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/97925709&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9a6025dbe14402f9c4e1030ba2d8e9e1_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;latest edition: 19/12/2019&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;从17/12/2019开始我就开始正式更新我自己的Haskell整理啦！本教学大概会持续到IO流左右，本文整理了《Haskell趣学指南》 以及 爱大信院正常的FP（function programming）教学，有幸能够听一学期Haskell创始人之一的&lt;/b&gt;菲利普·瓦德勒 (Philip Wadler)的fp教学。本文&lt;b&gt;会以一个彻彻底底的新人视角去带着大家学习haskell这门语言，希望大家能跟我一起学习呀，祝学有所成！&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;（ps：请注意我放上去的每一个网址，对于帮助你的理解是非常有用的，因为我本人在国外，就很多都是用了wiki或者一些需要外网登录的网址，我会在文章内给出国内的小伙伴解决的方法（比较基础网速也相对慢一点可能，你们也可以联系我，我可以给你们我当初买梯子的地方），希望有帮助，如果不能用了请&lt;/b&gt;@我&lt;b&gt;）&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;213&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;213&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-54514f9a665ecd753a85c9d846410bdc_b.jpg&quot;/&gt;&lt;figcaption&gt;可以在extension里面寻找，无论是chrome和firefox应该都有，然后好像也有window版本的&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1e6c186219bf9052d65c46d6c8526d9c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;223&quot; class=&quot;content_image&quot; width=&quot;300&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1e6c186219bf9052d65c46d6c8526d9c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;223&quot; class=&quot;content_image lazy&quot; width=&quot;300&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-1e6c186219bf9052d65c46d6c8526d9c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;i&gt;&lt;b&gt;一丶Introduction to Haskell&lt;/b&gt;&lt;/i&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;首先呢，作为一个对Haskell感兴趣的同学，你要对haskell有一个基本的认知。Haskell 是一门纯粹函数式程序语言（purely functional programming langage），在这一点上我相信对于熟悉C或者java以及别的命令式编程语言的小伙伴应该会挺迷惑的，再此附上一个命令是编程语言和函数式编程语言的区别，望周知！&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.csdn.net/u012611878/article/details/78495165&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;命令式与函数式编程的区别&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.aqee.net/post/dijkstra-on-haskell-and-java.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-186fa7b536d244f8914dcf569291f293_180x120.jpg&quot; data-image-width=&quot;560&quot; data-image-height=&quot;345&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;计算机大师Dijkstra谈Haskell和Java -&lt;/a&gt;&lt;p&gt;&lt;b&gt;纯函数式语言可以给那些习惯了命令式编程语言的学生一个新的思路，也能良好的作为初学者接触编程的第一门语言，同时也体现出编程世界的多样性以及有趣性，这也是为什么部分国外的大学第一年都以haskell为新生入门课程。&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;此外，Haskell是一门非常懒惰的语言。除非特殊指定声明，函数在真正需要结果之前不会被求值！&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//openhome.cc/Gossip/CodeData/HaskellTutorial/Laziness.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-78c02a0071361e558019e39ba9b55c34_ipico.jpg&quot; data-image-width=&quot;200&quot; data-image-height=&quot;200&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Haskell Tutorial（8）懶惰是美德之一&lt;/a&gt;&lt;p&gt;&lt;b&gt;同样的，Haskell也是一门静态类型的语言。haskell并没有那么聪明，当你开始编译程序时，编译器需要明确参数的类型，但是参数的类型不能出错（你总不能拿一个数字（Int）去加上一个字符串（String）吧）。haskell有自己的一套强大的类型系统，支持自动推导（type inference），所以很多时候你就可以不在代码的最上面给出type（但是你自己最好清楚自己要写的是什么东西，可以用:t的命令在ghci里面查看类型）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Haskell是一门很高级的语言，最初在1987年就开始有模型了，在1999年给出了一个haskell 98 的版本。本文就不细讲当初的历史了，在此附上wiki和百度的haskell历史介绍。&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/Haskell&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;zh.wikipedia.org/wiki/H&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;askell&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/Haskell&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-a64774de231eee7f3449f6649c9cdaef_180x120.jpg&quot; data-image-width=&quot;320&quot; data-image-height=&quot;105&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Haskell_百度百科&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;&lt;i&gt;二丶Haskell的编译&lt;/i&gt;&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;在学习的最开始，&lt;/i&gt;你需要用到一个编辑器和一个编译器，编辑器的话我本人用的是vscode（说句实话，微软的东西还挺香的，多行同时编译功能！！（按住ctrl然后鼠标点就可以了，或者鼠标的滚轮往下滑）），但是没所谓大家使用什么版本的编辑器，无论是atom还是别的都没所谓，主要是自己用的习惯。编译器呢，就没得跑了，我们要用GHC。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;vscode下载地址：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//code.visualstudio.com/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-beaba009c542a9f6fe1d2034a7ed568b_180x120.jpg&quot; data-image-width=&quot;1012&quot; data-image-height=&quot;506&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Visual Studio Code - Code Editing. Redefined&lt;/a&gt;&lt;p&gt;&lt;b&gt;vscode extension推荐：&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;1.Haskell Syntax Highlighting   https://marketplace.visualstudio.com/items?itemName=justusadam.language-haskell
2.Haskelly                      https://marketplace.visualstudio.com/items?itemName=UCL.haskelly
3.hlint                         https://marketplace.visualstudio.com/items?itemName=lunaryorn.hlint
4.ghc-mod                       https://marketplace.visualstudio.com/items?itemName=hoovercj.vscode-ghc-mod&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面的网址是插件的一写简介之类的。先推荐安装前面两个插件，后面的插件用cabal有概率导致安装不成功（源的问题），我自己之后就直接使用前面两个插件了，后面的直接就不装了。&lt;/p&gt;&lt;p&gt;后面两个插件的话可以先试一下cabal，如果不成功则用stack安装。&lt;/p&gt;&lt;p&gt;再此也额外附上一个link&lt;/p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/20739339&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot;internal&quot;&gt;aaaron7：打造令人愉悦的 Haskell 开发环境&lt;/a&gt;&lt;p&gt;&lt;b&gt;atom下载地址：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//atom.io/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-9cfc3ee2778c9affa1906d93250e37f3_180x120.jpg&quot; data-image-width=&quot;1200&quot; data-image-height=&quot;630&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;A hackable text editor for the 21st Century&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;GHC的安装，就花样很多了，&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.haskell.org/platform/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;haskell.org/platform/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，&lt;b&gt;这个是haskell官方的网址，可以下载GHC，按照自己的版本下载完之后就一路安装吧！冲啊！（正常来说不会出什么问题，如果有问题的话，也可以&lt;/b&gt;@我&lt;b&gt;，我看看咋回事），正常来说，里面会包含一个ghc和cabal。（如果你想用stack也可以，stack特别强大，但是对于新手来说没有cabal那么方便）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;GHC主要有三个部分组成&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;ghc&lt;/b&gt;是生成快速本底代码的优化编译器。&lt;/li&gt;&lt;li&gt;&lt;b&gt;ghci&lt;/b&gt;是一个交互解析器和调试器。&lt;/li&gt;&lt;li&gt;&lt;b&gt;runghc&lt;/b&gt;是一个以脚本形式(并不要首先编译)运行Haskell代码的程序。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;ghci程序是GHC的交互式解析器。它可以让用户输入Haskell表达式并对其求值，浏览模块以及调试代码。&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;输入ghci在terminal（终端）试试，如果会出现&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;94&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;713&quot; data-original=&quot;https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;94&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;713&quot; data-original=&quot;https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-ffc36c062dfaaf2216d70a7038726730_b.png&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;这种则代表没啥问题了老铁，然后就退出运行环境（ctrl+D），然后开始先更新一下你的cabal（对于新手来说，用cabal更新一切都比较方便）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;在terminal上输入&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;cabal update 
cabal upgrade（基本用不到第二个）&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//wiki.haskell.org/Cabal-Install&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wiki.haskell.org/Cabal-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;（cabal的介绍）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;cabal没有uninstall，如果一个包版本不对，可以使用&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;code&gt;cabal install --reinstall package_name&lt;/code&gt;进行重装。&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;19/12/2019更新，由于评论区有大佬提醒可以用stack，我就去搜寻了一些资料，对比cabal的最开始可能会复杂一些，不过如果有感兴趣的朋友，也可以去尝试着安装一下。再次附上links（ps：顺便感谢大家的一些支持以及资料不全的提醒，今晚会继续更新chapter2的内容）&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/hellmonky/note/blob/master/%25E8%25AF%25AD%25E8%25A8%2580%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25AE%25B0%25E5%25BD%2595/%25E5%2585%25B3%25E4%25BA%258Evscode%25E6%2590%25AD%25E5%25BB%25BAh%25E7%258E%25AF%25E5%25A2%2583%25E7%259A%2584%25E8%25BF%2587%25E7%25A8%258B.md&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在window的环境下配置haskell&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//notes.shinemic.cn/setting-up-haskell-stack-development-environment/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;notes.shinemic.cn/setti&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ng-up-haskell-stack-development-environment/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//blog.ramdoot.in/installing-haskell-stack-in-windows-7c8fd2c79f&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.ramdoot.in/install&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ing-haskell-stack-in-windows-7c8fd2c79f&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;&lt;b&gt;以下的图片是上课的时候philip推荐的书，大家有兴趣的可以自己去看看，也可以看看中文版（没有的话可以&lt;/b&gt;@&lt;b&gt;我，我可以发给你们），新手比较推荐看下面那本&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1002&quot; data-rawheight=&quot;385&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1002&quot; data-original=&quot;https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1002&quot; data-rawheight=&quot;385&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1002&quot; data-original=&quot;https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-5326f2552a0bcc4abee3f5d322b1c606_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;最后，从第二章开始具体讲解haskell的具体教学，希望多多支持，谢谢！&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;（ps：第二章字数有点多，希望大家慢慢消化，不要着急，有问题可以私信我，祝武运昌盛）&lt;/b&gt;&lt;/p&gt;</description>
<author>Mr.Rainbow</author>
<guid isPermaLink="false">2019-12-20-97925709</guid>
<pubDate>Fri, 20 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>南京大学「程序设计语言与静态分析」研究组</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-12-16-97615883.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/97615883&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-863310927f107800c5c7b30a628f3e6a_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;打扰各位一下，在知识分享平台上占用大家一点时间，为南京大学计算机科学与技术系「程序设计语言与静态分析」（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//pascal-group.bitbucket.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;PASCAL Research Group@Nanjing University&lt;/a&gt;）研究组做一个广告。&lt;/p&gt;&lt;p&gt;目前，我国高校和科研院所PL（Programming Languages）相关研究组十分稀少，而今天向大家介绍的南京大学PASCAL研究组就是其中最新的一员。该研究组由刚刚结束七年海外学术生活的两位青年教师&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//yuelee.bitbucket.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;李樾&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//silverbullettt.bitbucket.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;谭添&lt;/a&gt;共同建立（谭添是我们的一位知友 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/f87c102df451bc1ec42085ea759c82fb&quot; data-hash=&quot;f87c102df451bc1ec42085ea759c82fb&quot; data-hovercard=&quot;p$b$f87c102df451bc1ec42085ea759c82fb&quot;&gt;@甜品专家&lt;/a&gt; ）。他们在今年9月份回国并选择加入了南京大学计算机科学与技术系，其中李樾被聘为副教授（登峰B计划），谭添被聘为助理教授。我对两位老师十分了解（笑），他们志同道合，致力于为咱们国家培养更多的PL人才贡献自己的一份力量。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e32038bb3a633dac3d1519b2ff167d0a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;335&quot; data-rawheight=&quot;179&quot; class=&quot;content_image&quot; width=&quot;335&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e32038bb3a633dac3d1519b2ff167d0a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;335&quot; data-rawheight=&quot;179&quot; class=&quot;content_image lazy&quot; width=&quot;335&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-e32038bb3a633dac3d1519b2ff167d0a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;两位老师在静态程序分析研究领域耕耘（打工）七年，论文工作主要发表在PLDI、OOPSLA、ECOOP等PL相关会议和期刊，也是一些其它PL会议和期刊如POPL、TOPLAS等的审稿人，在业内，很多工作受到了国际著名学者的高度评价，一些工作已经被集成到知名程序分析工具或知名企业内部软件分析工具当中。&lt;/p&gt;&lt;p&gt;静态程序分析是当前保障大规模复杂软件可靠性、安全性的一类关键技术，因此受到了国内外巨头IT企业的重视。尤其是近些年，国外企业如Google、Microsoft、Oracle、Facebook以及国内的华为等企业都陆续成立了自己的软件分析团队，设计并使用静态程序分析技术来分析本公司软件的可靠性、安全性等。随着软件变得越来越复杂，对于静态程序分析的需求也会越来越大。&lt;/p&gt;&lt;p&gt;然而，由于静态程序分析学习和研究的门槛较高，且国内很少有高校开设相关课程或开展相关研究，目前我国真正掌握静态分析技术的人才仍十分稀少。（插播另一则广告：据我所知，两位老师将在明年上半年，在南京大学开始开设静态程序分析课程《软件分析》，感兴趣的同学可以去围观）。&lt;/p&gt;&lt;p&gt;两位老师由于年龄还不算大，所以画风会不太一样，比如说下面是他们的办公室：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d3aff31d9140adb8342e8f8b58690f07_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic4.zhimg.com/v2-d3aff31d9140adb8342e8f8b58690f07_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d3aff31d9140adb8342e8f8b58690f07_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;720&quot; data-original=&quot;https://pic4.zhimg.com/v2-d3aff31d9140adb8342e8f8b58690f07_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-d3aff31d9140adb8342e8f8b58690f07_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-db0df31ba51fc2b9f99e7d16e03ec03b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic4.zhimg.com/v2-db0df31ba51fc2b9f99e7d16e03ec03b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-db0df31ba51fc2b9f99e7d16e03ec03b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;720&quot; data-original=&quot;https://pic4.zhimg.com/v2-db0df31ba51fc2b9f99e7d16e03ec03b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-db0df31ba51fc2b9f99e7d16e03ec03b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;考研或保研的童鞋们，如果你对PL或静态程序分析非常感兴趣 且 你觉得自己有很强的编程能力，可以联系他们（上文有他们主页的链接）。如果你是南京大学的学生（无论几年级），可以直接敲他们的门。&lt;/p&gt;&lt;p&gt;各位知友，我是有任务的！请举起你们点赞和分享的小手，求扩散！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>啥玩应啊</author>
<guid isPermaLink="false">2019-12-16-97615883</guid>
<pubDate>Mon, 16 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>一个抽象的 binary addition 算法</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-11-18-92381693.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/92381693&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ab78974f11ac5d246038b7f47a3f1c15_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DECODE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊥&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ENCODE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊤&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ENCODE32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊤&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ENCODE64&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊤&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;⍝ example&lt;/span&gt;
      &lt;span class=&quot;vg&quot;&gt;⎕&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ENCODE64&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;865940890845960854&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;DECODE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;8.659408908E17&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;⍝ GG&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正常情況下都会这么用 loop 写吧&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;⍝ BINARY ADDITION&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NOTEST&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;DERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;∧&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;∧&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BEGIN&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;⍝ RESET OVERFLOW&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;OVERFLOW&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOOP&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;⍝ FIND CARRY&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=+&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;END&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍳⍴&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;⍝ CHECK OVERFLOW&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;OVERFLOW&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OVERFLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;∨&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↑&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOOP&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说白了就是进位法。&lt;/p&gt;&lt;p&gt;不过发现了一个规律沒有&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;单个的 &amp;#34;2&amp;#34; 会变成 &amp;#34;10&amp;#34;，&amp;#34;12&amp;#34; 变成 &amp;#34;100&amp;#34;，&amp;#34;1112&amp;#34; 会变成 &amp;#34;10000&amp;#34;，&amp;#34;22&amp;#34; 则是 &amp;#34;110&amp;#34;。&lt;/p&gt;&lt;p&gt;这样看來根本不用 loop 麻。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;      &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─┬───┬─────┬─┬─┬─┬───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─┴───┴─────┴─┴─┴─┴───────┘&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─┬───┬─────┬─┬─┬─┬───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─┴───┴─────┴─┴─┴─┴───────┘&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─┬───┬─────┬─┬─┬─┬───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─┴───┴─────┴─┴─┴─┴───────┘&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
      &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─────┬─┬───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─────┴─┴───────┘&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─────┬─┬───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─────┴─┴───────┘&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─────┬─┬───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─────┴─┴───────┘&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─┬───┬─────┬─┬─┬─┬───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─┴───┴─────┴─┴─┴─┴───────┘&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;⍸&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─┬───┬─────┬─┬─┬─┬───────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─┴───┴─────┴─┴─┴─┴───────┘&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;∊&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是有 version1&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ADDK&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;⍸&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↑&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;⍸&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;∊⌽&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;试一试&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ADDK&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;⍝ seems ok&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ADDK&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;      
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GG, WTF?&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;K&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;┌─────┐&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└─────┘&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;額⋯⋯&lt;/p&gt;&lt;p&gt;说明 2 要額外做 partition。&lt;/p&gt;&lt;p&gt;那么干脆就一开始先 reverse 好了&lt;/p&gt;&lt;p&gt;于是最后版本 &lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;∨&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⊂&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;⍝ Partition&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=⊃&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;⍝ Find pattern &amp;#34;1*2&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;⍸&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;⍝ substitution&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;OVERFLOW&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴⌽&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-⍴&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↑&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;¯1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;↓&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;⍝ carry&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;⍸&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;⍵&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⍴&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;¨&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;←&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;⌽∊&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;∇&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;试试&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apl&quot;&gt;      &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;OVERFLOW&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;∇&lt;/p&gt;</description>
<author>LdBeth</author>
<guid isPermaLink="false">2019-11-18-92381693</guid>
<pubDate>Mon, 18 Nov 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>自由单子的C实现 -- Algebraic Effects in C（上）</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-10-21-84963327.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/84963327&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上篇文章&lt;a href=&quot;https://zhuanlan.zhihu.com/p/79704063&quot; class=&quot;internal&quot;&gt;parker liu：单位半群和单子的自由构造&lt;/a&gt;中，给大家介绍了在Haskell中是如何构造出自由单子的。在很多嵌入式系统中是没法使用Haskell的，只有C语言可用，那能否用C语言来构造自由单子呢？&lt;/p&gt;&lt;p&gt;自由单子主要是分离了接口和具体操作的语义，这样我们可以使用统一的接口（或者叫作用指令 -- effect instruction）来写程序，通过不同的解释器来实现不同的操作语义。对同一个程序，通过提供不同的解释器来动态改变程序执行的行为和作用。就如上面这篇文章中的基于堆栈的简单计算器程序，两个不同的解释器runAlg和showAlg分别实现了求值和打印程序的行为。其中Push、Pop、Top、Add、Mul这些值构造子可以看成是effect instruction，runAlg和showAlg中对值构造子的模式匹配的每一个实现就是effect instruction对应的操作语义实现。&lt;/p&gt;&lt;p&gt;我们也可以用C语言来实现这种Algebraic Effects，定义effect instruction，实现每一个effect instruction的操作语义。于是我们就用C语言构造出了自由单子。&lt;/p&gt;&lt;p&gt;我们先来看状态处理的Algebraic Effect，先用Haskell定义状态处理State的行为，如下所示：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Put&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里Get 和Put 是State的effect instruction，从Oleg Kiselyov的论文Freer Monads&lt;sup data-text=&quot;Freer Monads: &quot; data-url=&quot;http://okmij.org/ftp/Haskell/extensible/more.pdf&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;1&quot;&gt;[1]&lt;/sup&gt;中， 我们可以由State s k得到一个自由单子，称之为effect monad。于是我们就可以在自己的程序中使用Get和Put来实现带状态处理的程序。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- ^ Pure value (@&amp;#39;return&amp;#39; = &amp;#39;pure&amp;#39; = &amp;#39;Val&amp;#39;@).&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Union&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Arrs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- ^ Sending a request of type @Union effs@ with the continuation&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- @&amp;#39;Arrs&amp;#39; r b a@.&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;{-# INLINE fmap #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;{-# INLINE pure #-}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;{-# INLINE (&amp;lt;*&amp;gt;) #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;{-# INLINE (&amp;gt;&amp;gt;=) #-}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | “Sends” an effect, which should be a value defined as part of an effect&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- algebra (see the module documentation for &amp;#34;Control.Monad.Freer&amp;#34;), to an&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- effectful computation. This is used to connect the definition of an effect to&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- the &amp;#39;Eff&amp;#39; monad so that it can be used and handled.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inj&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tsingleton&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;{-# INLINE send #-}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;-- | Retrieve the current value of the state of type @s :: *@.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Get&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Set the current state to a specified value of type @s :: *@.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Put&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Handler for &amp;#39;State&amp;#39; effects.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runState&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;: effs) a -&amp;gt; Eff effs (a, s)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;runState s0 = handleRelayS s0 (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;s x -&amp;gt; pu&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e (x, s)) $ &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;s x k -&amp;gt; c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;se x of
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;  Get -&amp;gt; k s s
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;  Put &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;s&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&amp;#39;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- A count donw example by use State effect&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;countDown&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;countDown&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;runState&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们再来看异常错误处理的Algebraic Effect，先用Haskell定义异常错误处理Error的行为。同样的，可以由这个Error e r 得到一个effect Monad，在我们的程序中处理异常错误Error，如下所示：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- | Exceptions of the type @e :: *@ with no resumption.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Throws an error carrying information of type @e :: *@.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;throwError&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;throwError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- | Handler for exception effects. If there are no exceptions thrown, returns&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- &amp;#39;Right&amp;#39;. If exceptions are thrown and not handled, returns &amp;#39;Left&amp;#39;, while&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- interrupting the execution of any other effect handlers.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runError&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;effs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;: effs) a -&amp;gt; Eff effs (Either e a)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;runError = handleRelay (pure . Right) (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(E&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ror e) _ -&amp;gt; pure (Left e))
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-- | A catcher for Exceptions. Handlers are allowed to rethrow exceptions.
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;catchError
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;  :: forall e effs a
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;   . Member (Error e) effs
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;  =&amp;gt; Eff effs a
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;  -&amp;gt; (e -&amp;gt; Eff effs a)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;  -&amp;gt; Eff effs a
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;catchError m handle = interposeWith (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(E&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ror e) _ -&amp;gt; handle e) m
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;countDownExc :: Int -&amp;gt; Either String (Int,Int)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;countDownExc start = run $ runError (runState start go)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;  where go = get &amp;gt;&amp;gt;= (&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; -&amp;gt; if n &amp;lt;= (0 :: Int)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;                            then throwError &amp;#34;wat&amp;#34;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;                            else put (n-1) &amp;gt;&amp;gt; go)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而自由单子是可组合的，因此这里得到的effect monad也是可以组合的，我们可以将由State得到的effect monad和由Error得到的effect monad组合起来，得到一个有更多的effect的可扩展的effect monad。所以Oleg Kiselyov的论文的另一个标题是More Extensible Effects。&lt;/p&gt;&lt;p&gt;注： 以上的Haskell代码节选自github上的Freer Monad的一个实现freer simple&lt;sup data-text=&quot;freer simple: &quot; data-url=&quot;https://github.com/lexi-lambda/freer-simple&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;2&quot;&gt;[2]&lt;/sup&gt;。&lt;/p&gt;&lt;p&gt;同样的，我们也可以使用C语言来实现些可组合的effect monad，首先，对应的C语言的State的get 和put 指令和实现如下所示：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_state_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unreferenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//trace_printf(&amp;#34;state result: %i, %li\n&amp;#34;, *((int*)local), (long)(x));
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_state_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_resume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unreferenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//trace_printf(&amp;#34;state get: %i\n&amp;#34;, *((int*)local));
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_tail_resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_state_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_resume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//trace_printf(&amp;#34;state put: %i, %li\n&amp;#34;, *((int*)local), (long)(arg));
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_tail_resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_operation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_state_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_OP_TAIL_NOOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_OPTAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_state_get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_OP_TAIL_NOOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_OPTAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_state_put&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_OP_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_op_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_handlerdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LH_EFFECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_state_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_state_ops&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;state_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码中的 _state_ops 列出了State 这个effect 所支持的所有effect instruction。而函数_state_result 则是State 这个effect monad 自由单子构造里的Pure，和 _state_ops 里的effect instructions 合在一起用结构体state_def 定义了State 这个effect monad 自由单子。我们再来看一下经典的自由单子的定义：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;-- ^ 对应函数 _state_result&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;-- ^ 对应effect instruction列表_state_ops&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后的state_handle 函数则等同于前面Haskell 实现的State 自由单子的runState 函数，而使用State 这个effect 的get 和 put 的状态处理的程序则是通过action 这个参数传进来。具体使用如下所示：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;state_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unreferenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trace_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;counter: %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;test_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;final result counter: %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_int_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们再来看一下C语言实现的异常错误处理的Algebraic Effect，类似的，先定义异常错误处理Exception 这个effect 的excn_raise 指令。然后是Exception 这个effect monad自由单子的定义，同样的excn_ops 中是Exception 这个effect 所支持的所有指令，这里只有一个。很特殊的一点是Exception 不需要定义Pure。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_excn_raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_resume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unreferenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unreferenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unreferenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;test_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;exception raised: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_lh_string_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_operation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_excn_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_OP_NORESUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_OPTAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_excn_raise&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_OP_NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_op_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_handlerdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excn_def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LH_EFFECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_excn_ops&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;excn_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excn_def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和State 这个effect 类似，excn_handle 等同于前面Haskell 实现的Error 自由单子的runError 函数。我们的使用异常错误处理Exception 的程序是通过参数action 传进来的。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id_raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;excn_raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;an error message from &amp;#39;id_raise&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excn_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;test_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;final result &amp;#39;id&amp;#39;: %li&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_long_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excn_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;test_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;final result &amp;#39;id_raise&amp;#39;: %li&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_long_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样的，C语言实现的自由单子也是可以组合的，我们可以把这些独立的自由单子组合起来，得到一个支持更多的effect 的自由单子。下面的程序通过excn_handle，state_handle，amb_handle 的层层调用，将Exception、State、Amb 这三个effect monad组合在一起。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;raising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amb_flip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;state_put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;excn_raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;raise inside state/amb from &amp;#39;raising&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;raising_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unreferenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_amb_raising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amb_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raising_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_state_amb_raising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lh_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle_amb_raising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blist&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_exn_state_amb_raising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_blist_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excn_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle_state_amb_raising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh_value_null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// test release of local state
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;blist&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_exn_state_amb_raising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;blist_print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;final result exn/state/amb raising&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们已经知道了C语言也是可以实现自由单子的，那更具体的实现细节是怎么样的呢？有兴趣的可以等待下一篇文章：自由单子的C实现 -- Algebraic Effects in C（下）。&lt;/p&gt;&lt;p&gt;更具体的实现可以看微软的论文Monads for free in C&lt;sup data-text=&quot;Free Monads in C: &quot; data-url=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2017/06/algeff-in-c-tr-v2.pdf&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;3&quot;&gt;[3]&lt;/sup&gt;&lt;/p&gt;</description>
<author>parker liu</author>
<guid isPermaLink="false">2019-10-21-84963327</guid>
<pubDate>Mon, 21 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>晚了三年的(划掉)计算机常识纠正-APL 和 J 和 Dyalog</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-10-15-86682657.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86682657&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-571f867e6b9708388f8023b102401d08_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;看到一篇反映了一些多数人对 APL 的误解的 art，决定写点文章让更多人了解真正的 APL。&lt;/p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21601402&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot;internal&quot;&gt;bhuztez：函数式-21天入门教程&lt;/a&gt;&lt;blockquote&gt;在原始APL里，求平均数，通常的写法是&lt;br/&gt; &lt;img src=&quot;https://www.zhihu.com/equation?tex=avg%5Cleftarrow+%5C%7B%28%2B%5Comega%29%5Cdiv%5Cnot%5Cequiv+%5Comega%5C%7D&quot; alt=&quot;avg\leftarrow \{(+\omega)\div\not\equiv \omega\}&quot; eeimg=&quot;1&quot;/&gt; &lt;/blockquote&gt;&lt;p&gt;我不知道原始的 APL 指的是啥，不过 direct definition (用 {} 定义匿名函数， &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%5C+%5Comega&quot; alt=&quot;\alpha\ \omega&quot; eeimg=&quot;1&quot;/&gt; 指代参数) 是 Dyalog 搞的，叫 D-function，后來改叫 dfns，然後其它如 GNU APL 仿了 Dyalog 的这个feature，而且这个实现的历史可沒那么早&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;857&quot; data-rawheight=&quot;621&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;857&quot; data-original=&quot;https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;857&quot; data-rawheight=&quot;621&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;857&quot; data-original=&quot;https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f4c027e1c15836cb3dcf63088dcf4a4b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;你看，2010 年的 APLX&lt;sup data-text=&quot;APLX&quot; data-url=&quot;https://www.dyalog.com/aplx.htm&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;1&quot;&gt;[1]&lt;/sup&gt; 都压根不支持 dfns。(APLX 是比較接近 APL2 的，不过 IBM 的 APL2&lt;sup data-text=&quot;IBM APL2&quot; data-url=&quot;https://www.ibm.com/us-en/marketplace/apl2&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;2&quot;&gt;[2]&lt;/sup&gt; 当然是最标准的，可惜我沒有 mainframe 可以用)&lt;/p&gt;&lt;p&gt;可以查到的是 &lt;/p&gt;&lt;blockquote&gt;These ideas were first presented in the Dyadic Vendor Forum at APL96 where they appeared to meet with general approval. Dfns were introduced with APL/W version 8.1 release 1 in early 1997.&lt;sup data-text=&quot;Vector, Vol. 13.2, 88 “Dynamic Functions in Dyalog APL”&quot; data-url=&quot;https://www.dyalog.com/uploads/documents/Papers/dfns.pdf&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;3&quot;&gt;[3]&lt;/sup&gt;&lt;/blockquote&gt;&lt;p&gt;direct definition 设计的來源可以查到 Ken Iverson 的 Turing Award lecture&lt;i&gt; Notation as a Tool of Thought。&lt;/i&gt;不过那时只有个很粗浅的 direct definition to header form 的 subroutine，并不能直接用 arrow 赋值，更沒有能让 dfsn 被称为 FP lang 的 lexical scope，guard。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1194&quot; data-rawheight=&quot;598&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1194&quot; data-original=&quot;https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1194&quot; data-rawheight=&quot;598&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1194&quot; data-original=&quot;https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-205ec00b06ea9d11924559c6861693fc_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;So，J 是什么时候的，&lt;/p&gt;&lt;blockquote&gt;The first line of code in the J implementation was&lt;br/&gt;written on Sunday, August 27, 1989&lt;sup data-text=&quot;&quot; data-url=&quot;http://jsoftware.com/pipermail/general/2002-March/010962.html&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;4&quot;&gt;[4]&lt;/sup&gt;&lt;/blockquote&gt;&lt;p&gt;但是保守一点，最晚 1991 年吧，这个时候 Ken Iverson 用 J 写的 Arithmetic&lt;sup data-text=&quot; Iverson, K.E., Arithmetic, Iverson Software Inc., 1991&quot; data-url=&quot;http://www.jsoftware.com/books/pdf/arithmetic.zip&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;5&quot;&gt;[5]&lt;/sup&gt;里己有用文章提到的 [ ] op 了。而且同书中 J 也有和 direct definition 相似但出奇鬼畜的 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.jsoftware.com/help/dictionary/d310n.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Explicit Definition&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;所以硬要用个更新的 feature 当成 legacy 和一个语言中不能起到 eliminate 更难用的同类功能作用的 feature 比较，这样的讲理说服力堪优啊。&lt;/p&gt;&lt;blockquote&gt;J使用了 [ 和 ] 这两个函数&lt;br/&gt;&lt;br/&gt;x [ y = x&lt;br/&gt;x ] y = y&lt;/blockquote&gt;&lt;p&gt;这不就是 APL 的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cdashv%5C+%5Cvdash&quot; alt=&quot;\dashv\ \vdash&quot; eeimg=&quot;1&quot;/&gt; 么。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;790&quot; data-rawheight=&quot;786&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;790&quot; data-original=&quot;https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;790&quot; data-rawheight=&quot;786&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;790&quot; data-original=&quot;https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-64d4a884e2260fcce68adf5eea42c72f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;694&quot; data-rawheight=&quot;790&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;694&quot; data-original=&quot;https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;694&quot; data-rawheight=&quot;790&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;694&quot; data-original=&quot;https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7b2231228c06453c942e138c94fc5ae5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这个是 2000 年的 ISO 标准，咋了，太新了？那我给你们看看 1987 的 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.jsoftware.com/papers/APLDictionary.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;A Dictionary of APL&lt;/a&gt; 吧，(网页版字体不能显示，老夫 copy 进 emacs 截个图)&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1528&quot; data-rawheight=&quot;224&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1528&quot; data-original=&quot;https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1528&quot; data-rawheight=&quot;224&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1528&quot; data-original=&quot;https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-393bc84176dd40308d6218b92b619095_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;为什么会这样呢&lt;/p&gt;&lt;blockquote&gt;Roger and I then began a collaboration on the design and implementation of a dialect of APL(later named J by Roger), first deciding to roughly follow &amp;#34;A Dictionary of APL&amp;#34;&lt;sup data-text=&quot;A Personal View of APL&quot; data-url=&quot;https://web.archive.org/web/20040812193452/http://home1.gte.net/res057qw/APL_J/IversonAPL.htm&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;6&quot;&gt;[6]&lt;/sup&gt;&lt;/blockquote&gt;&lt;p&gt;于是就䃼正个了这样几个微妙的误解。&lt;/p&gt;&lt;p&gt;ps. Dyalog 有个 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//dfns.dyalog.com/n_tacit.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dfns to tacit 的 tut&lt;/a&gt; ，不过只对 Dyalog 适用。GNU APL 用不來。&lt;/p&gt;&lt;p&gt;另外下一篇更正式的关于 APL 的介绍也在写呢&lt;/p&gt;&lt;blockquote&gt;APL 是四门语言，一是 A Programming Language 书设计的 elements of programming。&lt;br/&gt;二为 IBM Selectric 上的正交性非常的 symbol notation。&lt;br/&gt;三为据传來自 &lt;i&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.jsoftware.com/jwiki/Doc/Elementary%2520Analysis&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Elementary Analysis&lt;/a&gt;&lt;/i&gt; (这书太老找不到) 的 direct definition form，Dyalog 叫 dfns 的 FP language。&lt;br/&gt;四为 Ken Iverson 后來重新发明的 J。&lt;/blockquote&gt;&lt;h2&gt;FAQ:&lt;/h2&gt;&lt;p&gt;Q: J 比 APL 先进吗？&lt;/p&gt;&lt;p&gt;A: J 比 J 之前的 APL 先进。J 之后的包括 Dyalog 在內吸收了不少 J 的特性呢。&lt;/p&gt;&lt;p&gt;Q: J 和 APL 什么关系？&lt;/p&gt;&lt;p&gt;A: 两个都是加拿大数学家 K. E. Iverson 参与设计的。比較有意思的是 JSoftware 是 Ken Iversion 他儿子 Eric Iversion 的公司，也就是老子给儿子打工。&lt;/p&gt;&lt;p&gt;Q: 我能用 APL 找到工作吗？&lt;/p&gt;&lt;p&gt;A: 我听说过有个在 STSC 搞 APL 的离职以后被大学資助读了个数学 phd 教书的说。&lt;/p&gt;</description>
<author>LdBeth</author>
<guid isPermaLink="false">2019-10-15-86682657</guid>
<pubDate>Tue, 15 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>内容搬运（Swift 并发宣言）</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-10-13-86456179.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;能直接开 gist 的可以打开链接，无需看内文&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;gist.github.com/lattner&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/31ed37682ef1576b16bca1432ea9f782&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.github.com/yxztj/7744e97eaf8031d673338027d89eea76&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;gist.github.com/yxztj/7&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;744e97eaf8031d673338027d89eea76&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;Swift 并发宣言&lt;/p&gt;&lt;p&gt;作者: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/lattner&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chris Lattner&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;内容&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/edit#%E4%BB%8B%E7%BB%8D&quot; class=&quot;internal&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/edit#%E6%80%BB%E7%9A%84%E6%84%BF%E6%99%AF&quot; class=&quot;internal&quot;&gt;总的愿景&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/edit#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9AAsync/Await%EF%BC%8C%E6%BC%82%E4%BA%AE%E7%9A%84%E5%BC%82%E6%AD%A5API&quot; class=&quot;internal&quot;&gt;第一部分：Async/Await，漂亮的异步API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/edit#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%EF%BC%9AActor%EF%BC%9A%E6%B6%88%E7%81%AD%E5%85%B1%E4%BA%AB%E5%8F%AF%E5%8F%98%E7%8A%B6%E6%80%81&quot; class=&quot;internal&quot;&gt;第二部分：Actor：消灭共享可变状态&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/edit#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%EF%BC%9A%E9%94%99%E8%AF%AF%E9%9A%94%E7%A6%BB%E5%B8%A6%E6%9D%A5%E5%8F%AF%E9%9D%A0%E6%80%A7&quot; class=&quot;internal&quot;&gt;第三部分：错误隔离带来可靠性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/edit#%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86%EF%BC%9A%E6%94%B9%E8%BF%9B%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84&quot; class=&quot;internal&quot;&gt;第四部分：改进系统架构&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/edit#%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86%EF%BC%9A%E7%96%AF%E7%8B%82%E5%8F%88%E7%81%BF%E7%83%82%E7%9A%84%E6%9C%AA%E6%9D%A5&quot; class=&quot;internal&quot;&gt;第五部分：疯狂又灿烂的未来&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/edit#%E4%BB%8E%E5%85%B6%E4%BB%96%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BE%E8%AE%A1%E4%B8%AD%E5%AD%A6%E4%B9%A0&quot; class=&quot;internal&quot;&gt;从其他的并发设计中学习&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;介绍&lt;/h2&gt;&lt;p&gt;这篇文档是以“Swift进化宣言&amp;#34;的形式发布的，概述了以长期视角来看，如何处理一个非常大型的问题。它探索了&lt;i&gt;一个可能的&lt;/i&gt;方案，来为Swift添加一种”最高层级“的并发模型，进而促进有益的讨论，最终得到一个最优的设计方案。因为如此，它并不是一个已经被采纳或定稿的、Swift最终会采用的设计。在公开的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/apple/swift-evolution&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;swift-evolution邮件列表&lt;/a&gt;中的讨论和迭代，才应该对这项工作负责，而且我们可能会得到一个完全不同的方案。&lt;/p&gt;&lt;p&gt;我们会聚焦在客户端和服务端应用中经常遇到的，基于任务的并发抽象，特别是那些高度事件驱动化的场景（比如，响应UI的事件或者请求）。这里并不是要尝试全面研究所有的可能性，也不是要尝试解决并发中所有可能遇到的问题。相反，它概述了一个连贯的设计思路，来驱动Swift在几年时间内慢慢变得更加优秀&lt;/p&gt;&lt;h3&gt;在Swift1...4中的并发&lt;/h3&gt;&lt;p&gt;到目前为止，为了避开大多数并发的话题，Swift被小心翼翼地设计着，因为我们特别不想丧失任何未来可能的方向。相反的，Swift程序员使用操作系统提供的抽象（例如GCD, pthreads等等）来启动和管理任务。GCD的设计和Swift的尾闭包契合得很好，特别是在Swift 3中对于GCD的API作出了重大更新之后&lt;/p&gt;&lt;p&gt;即使Swift一般都远离并发的话题，在实践中还是作出了一些让步。例如，ARC的引用计数操作是原子的，使类的引用可以在线程间被共享。弱引用也保证是线程原子性的，写时复制的类型比如字典和字符串是可共享的，并且runtime还提供了一些其他的基本保证&lt;/p&gt;&lt;h3&gt;本宣言的目标以及避开的方向&lt;/h3&gt;&lt;p&gt;并发是一个广阔而全面的概念，可以包含很多的话题。为了把讨论范围缩小，以下列了一些本提案避免讨论的内容：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们会集中在基于任务的并发，而不是数据并行。这也就是为什么我们基于GCD和线程来讨论，而完全不会关注SIMD向量化、循环的数据并行等等&lt;/li&gt;&lt;li&gt;就系统编程而言，Swift开发者能够选择性地接触到底层的一些东西是很重要的，如C或C++的内存一致性模型。这肯定是一个有趣的方向，但是和本工作无关&lt;/li&gt;&lt;li&gt;我们不会讨论去优化现有并发模式的API（如原子整型，更好的GCD API等等）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么我们的具体目标是什么？因为我们已经能够用GCD来编写并发的app，我们的目标是，通过利用Swift的核心价值：减少编程者从想法到实现必须花费的时间，使体验远远优于现有方案。具体来说，我们的目标是，通过以下一些来改进Swift的并发方案：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;设计：Swift应该提供（刚好）足够的语言上和库的支持，让开发者明白，在考虑并发抽象时应该使用什么。应该有一个结构化的”正确“的方法来实现大多数任务&lt;/li&gt;&lt;li&gt;可维护性：这些抽象应该让Swift代码变得更易于理解。例如，经常我们会很难搞清楚哪个GCD队列保护了哪些数据，或者一个堆数据结构的不变量是哪些&lt;/li&gt;&lt;li&gt;安全性：Swift目前的模型没有对竞态条件、死锁或其他并发问题给予任何帮助。完成回调可能会在一个意想不到的队列上被调用。这些问题应该被改善，我们最好能找到一个”默认安全“的编程模型。&lt;/li&gt;&lt;li&gt;可伸缩性：尤其是在服务端程序，成千上万的活跃的任务可能会同时出现（例如每一个活跃的客户端都需要一个任务）&lt;/li&gt;&lt;li&gt;性能：作为一个不易实现的目标，能提升性能是非常好的，例如减少需要执行的同步操作，甚至可能减少许多ARC操作中的原子访问操作。我们需要帮助编译器理解，当数据在何时何地，它们可以跨越任务间的边界&lt;/li&gt;&lt;li&gt;优秀：更抽象来说，我们应该参考其他语言和框架所提供的并发模型，把我们找到的所有最好的想法聚在一起，最终实现整体上比任何竞争者更优秀&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;也就是说，必不可少的是，任何新的模型会与现有的并发概念和API并存。我们不能构建一个概念上非常优美，但却无法兼容现有app的新世界。&lt;/p&gt;&lt;h3&gt;为什么是一个”最高层级“并发模型？&lt;/h3&gt;&lt;p&gt;非常明确的是，多核的世界不是未来：而是现在！因为如此，必不可少的是，Swift需要让开发者直接地使用已经普遍存在于世上的硬件。同时，我们现在已经能写出并发程序：由于在Swift中加入并发模型会使它变复杂，我们需要一个非常强的理由来这么做。为了展示优化的可能性，我们先看下目前情况下Swift开发者所面临的的痛苦。因为几乎所有Swift开发者都使用GCD，这里我们会关注它。&lt;/p&gt;&lt;h3&gt;异步API非常难以使用&lt;/h3&gt;&lt;p&gt;现代Cocoa开发涉及到很多使用闭包和完成回调的异步编程，但是这些API使用起来不方便。在许多异步操作、错误回调被一起使用时，或控制流需要在异步调用中切换时，问题尤其突出。&lt;/p&gt;&lt;p&gt;这里有许多的问题，包括经常发生的”回调地狱“&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processImageData1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;dataprofile.txt&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataResource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;imagedata.dat&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;decodeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageTmp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dewarpAndCleanupImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;错误处理尤其不好看，因为Swift自带的错误处理机制此时无法使用。你最终会写出这样的代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processImageData2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;dataprofile.txt&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataResource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;imagedata.dat&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;decodeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageTmp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageTmp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dewarpAndCleanupImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部分原因是异步API使用起来非常繁重，有许多API具有阻塞的同步形式（如UIImage(named: ...)），并且它们其中有许多没有异步版本。如果有一个自然、规范的方法来定义和使用这些API，可以使他们被更广泛地使用。这点对于新兴的Swift开发尤其重要，如Swift on Server组。&lt;/p&gt;&lt;h3&gt;我在哪个队列上？&lt;/h3&gt;&lt;p&gt;除了语法上的不便，完成回调的问题还在于，它们语法上暗示了自身会在当前队列上被调用，但这却不一定。举例来说，StackOverflow上最推荐的做法是，像这样实现你自定义的异步操作（Objective-C 语法）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asynchronousTaskWithCompletion:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Some long running task you want on another thread
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意它硬编码了完成回调会在主线程上被调用。这是一个不易被发现的问题，会造成意料之外的结果，和类似竞态条件的bug。例如，由于很多iOS代码已经在主线程上运行，你可能使用了由它们构建的API也没遇到问题。但是，一个把代码移动到后台队列的简单重构，就会造成一个非常难以处理的问题，代码会隐式地等待队列跳转，进而引入不易察觉的未定义行为！&lt;/p&gt;&lt;p&gt;解决这种情况有几种直观的办法，比如更好的GCD的API文档。然而，本质的问题在于，队列和在它们其中运行的代码之间，并没有显然的联系。这使得代码变得难以设计、理解和维护，并且让调试、测试性能和找到问题原因变得更有挑战。&lt;/p&gt;&lt;h3&gt;共享可变状态不利于软件开发者&lt;/h3&gt;&lt;p&gt;让我们先定义什么是”共享可变状态“：”状态“是指程序使用的数据。”共享“指的是数据在不同的任务（线程、队列，以及任何并发抽象）中被共享。只是自己使用的状态是无害的：只要没有人修改数据，有多个读取者也是没问题的。&lt;/p&gt;&lt;p&gt;问题在于，当共享的数据可变，就会存在有人在改变它的同时，有其他人同时也在读取它。这打开了一个巨大的虫罐子，数十年来整个世界都在努力克服它。由于有多个来源正在查看和修改数据，必须要有某种同步机制，不然就会带来竞态条件、语义上不一致或其他的一些问题&lt;/p&gt;&lt;p&gt;自然地，开始第一步是使用mutex和锁。我不打算展开讨论这个话题，而是想说明锁和mutex带来了一系列问题：你必须保证数据一直被正确的锁保护着（不然会带来bug和内存安全问题）、决定锁的粒度、避免死锁，并且处理一些其他的问题。已经有一些优化这种情况的尝试，著名的Java中的&lt;code&gt;synchronized&lt;/code&gt;方法（后来也被引入了Objective-C）。这种做法改进了语法的这一边，但是没有修复深层的问题。&lt;/p&gt;&lt;p&gt;当一个app开始运行，你会遇到性能问题，因为mutex通常是非常低效的——尤其是在多核多线程的情况下。由于这个模型的使用了数十年，已经有了许多方案去尝试解决一部分问题，包括&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Readers%25E2%2580%2593writer_lock&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;读写锁&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Double-checked_locking&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;双重检查锁定&lt;/a&gt;、底层&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Linearizability%23Primitive_atomic_instructions&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;原子操作&lt;/a&gt;和类似&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Read-copy-update&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;read/copy/update&lt;/a&gt;的高级技术。他们每一个都在某种程度上优化了mutex，但是带来的超高的复杂度、不安全和不可靠的方案，本身也是一个问题。&lt;/p&gt;&lt;p&gt;说了这么多，共享可变状态当你在进行系统编程时非常重要：比如你在用Swift实现GCD API或者内核，你必须有做到这些的全部能力。这就是为什么Swift最终需要一个默认的、内存一致的模型。尽管有一天这件事会变得很重要，这些努力是从另一个角度，因此不是本提案的重点&lt;/p&gt;&lt;p&gt;对每个对此感兴趣的人，我建议阅读&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Is Parallel Programming Hard, And, If So, What Can You Do About It&lt;/a&gt;? 这是Paul E. McKenny所写的一篇很好的调查研究，他一直在努力使Linux内核扩展到大规模的多核机（数百个核心）。不仅是作为一篇印象深刻的硬件特点总结和软件同步方案，它也揭示了当你需要去考虑多核的扩展性和共享可变状态时，存在大量的、复杂的情况。&lt;/p&gt;&lt;h3&gt;共享可变状态不利于硬件&lt;/h3&gt;&lt;p&gt;从硬件角度，共享的可变状态有许多问题。简而言之，当前的世界里多核是普遍的——尽管把他们看成是共享内存的设备，事实上他们其实是&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Non-uniform_memory_access&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;NUMA/non-uniform&lt;/a&gt;&lt;/p&gt;&lt;p&gt;粗略地说，考虑两个不同的核心尝试去读写同一块内存数据：储存数据的缓存通路由&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/MESI_protocol&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MESI协议&lt;/a&gt;控制，在单个处理器中只允许一条缓存通路的数据是可变的。这样一来，性能断崖式地下跌：缓存通路在不同核心中来回，并且在其中的数据变化，需要被分发到其他正在读取它的核心中。&lt;/p&gt;&lt;p&gt;这还带来一系列其他的冲击：处理器已经快速演进到具有&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Consistency_model&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;relaxed consistency models&lt;/a&gt;，让共享内存的编程变得更加复杂。原子性访问（以及其他与并发相关的原语，如比较/交换）现在比非原子性访问慢20~100倍。这些开销和问题随着核心数量而继续增长，而且当今要找到一台具有几十甚至上百个核心的机器并不困难。&lt;/p&gt;&lt;p&gt;如果你关注一下最新的硬件性能的突破，他们都来自于那些去掉了共享内存的硬件。值得注意的是，GPU因为可以扩展到非常多的核心数而非常成功，同样值得注意的是，这是因为他们使用了极高速的本地内存，而不是使用全局内存的编程模型。超级计算机经常使用&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Message_Passing_Interface&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MPI&lt;/a&gt;来做显式的可控内存传输，等等。如果你从第一性原理来看，光速和线缆的延迟变成了超大型共享内存系统的限制因素。&lt;/p&gt;&lt;p&gt;这些说明的问题是，Swift非常需要朝着一个方向而演进——Swift程序可以在大型的、多核的机器上很好的运行。如果有幸的话，这可能会帮助开启下一次硬件革命。&lt;/p&gt;&lt;h3&gt;共享可变状态无法突破单进程&lt;/h3&gt;&lt;p&gt;是的，这有点啰嗦，但是任何共享可变状态都无法摆脱共享内存。&lt;/p&gt;&lt;p&gt;因为如此，软件产业在进程间通信系统上的复杂性剧烈地增长：如&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.mikeash.com/pyblog/friday-qa-2009-01-16.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sockets，信号、管道、MIG、XPC&lt;/a&gt;和其他一些东西。操作系统总是在单个进程中引入一些同一个概念的变体，包括锁（文件锁）、共享可变状态（内存映射文件）等等。除了进程间通信，&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Distributed_computing&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;分布式计算&lt;/a&gt;和云API也重新用另一种方式实现了同样的抽象，因为共享内存在那些情况下是无法实现的。&lt;/p&gt;&lt;p&gt;这里的关键点在于，事情处于一个令人遗憾的状态。一个更好的世界应该是，让app开发者们有能力，在大型的、甚至是正运行着多台机器的云环境中，来构建数据抽象、并发抽象，并且理解他们的应用程序。如果你希望你的单进程应用在一个进程间通信，或者分布式的设定中运行，你应该只需要让你的类型学会自行序列化/编码、处理可能的新的错误，然后配置需要在哪里运行每段代码。你不需要重写应用的大的部分——显然不应该在一个全新的技术栈中这样做。&lt;/p&gt;&lt;p&gt;毕竟，app的开发者们不会把JSON作为每个方法的输入和输出，那云开发者又为什么要这么做呢？&lt;/p&gt;&lt;h2&gt;总的愿景&lt;/h2&gt;&lt;p&gt;这份宣言概述了几个主要的步骤来解决这些问题，它们可以在未来几年里被逐渐地加入到Swift中。第一步是非常确定的，但是接下来的几步越来越不确定：这还是一份比较早期的宣言，还有更多的设计工作要做。注意这里的目标并不是要提出本质上虚幻的想法，而是把我们所能得到的最好的想法放在一起，然后把这些想法合成为一个自洽的、适合Swift其余部分的东西。&lt;/p&gt;&lt;p&gt;首先需要有的洞察是，存在四个主要的计算抽象，在他们之上来建立一个模型比较有意思：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;传统控制流&lt;/li&gt;&lt;li&gt;异步控制流&lt;/li&gt;&lt;li&gt;信息传递和数据隔离&lt;/li&gt;&lt;li&gt;分布式数据和计算&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对于第一点Swift已经有了一个完整实现的模型，在这几年被不断提炼和改进，因此我们不再讨论它。比较重要需要了解的是，绝大部分底层的计算受益于命令式的控制流、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.apple.com/videos/play/wwdc2015/414/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;使用值语义改变&lt;/a&gt;和类的引用语义。这些是重要的底层原语，计算过程建立在其之上，它们也反映了CPU的基本抽象。&lt;/p&gt;&lt;p&gt;异步是接下来Swift会处理的抽象，因为这是在真实世界中编程所必要的，在与其他机器通信、与低速设备（旋转着的碟片还是存在的！）或者想要在互相独立的操作中实现并发时，必须要面对的。进一步来说，明显是相同操作的延时会受到剧烈抖动的影响，例如：网络丢失了一个包（超时重试）和快路径/慢路径优化（如缓存）。&lt;/p&gt;&lt;p&gt;幸运的是，Swift并不是第一个面对这些挑战的语言：整个业界已经一起与这条巨龙搏斗，并且选定了&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Await&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;async/await&lt;/a&gt;作为正确的抽象。我们会直接选择这个已经被证明的概念（语法上Swift化）。采用async/await会极大地改善现有的Swift代码，与现有和未来的异步处理的方法相吻合。&lt;/p&gt;&lt;p&gt;下一步是定义一个面对开发者的抽象，来定义并为独立程序中的任务以及他们所包含的数据建模。我们提议一种最高层级的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Actor_model&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Actor模型&lt;/a&gt;，来定义和思考互相之间异步通信的、互相独立的任务。Actor模型有着长久的历史，也被&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.erlang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Erlang&lt;/a&gt;和&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//akka.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Akka&lt;/a&gt;所采用和证实，这两者对大量可伸缩的可靠系统提供支持。以Actor模型为基线，我们相信，通过保证被发送给Actor的数据不会带来共享可变状态，进而能够实现数据的隔离。&lt;/p&gt;&lt;p&gt;谈及可靠系统，引入Actor模型是一个很好的机会和理由，来引入一种处理、从运行时错误中部分恢复的机制（比如强制解包失败，数组越界等等）。我们探索几种可能的选项来实现，并推荐一种我们认为适合UI和服务端应用的方法。&lt;/p&gt;&lt;p&gt;最后一步是处理系统性问题，让Actor能在不同的进程，甚至是在不同的机器上运行，同时仍然能通过发送信息来实现异步通信。这样可以推断出一些长期的可行性，我们会简单探索下。&lt;/p&gt;&lt;h2&gt;第一部分：Async/Await，漂亮的异步API&lt;/h2&gt;&lt;p&gt;注意：这一部分已经非常确定，有一个完全的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.github.com/lattner/429b9070918248274f25b714dcfc7619&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;细化的提案&lt;/a&gt;&lt;/p&gt;&lt;p&gt;无论Swift的全局并发的模型是怎样的，我们很难忽视使用异步API的问题。异步在处理互相独立的运行中系统是无法避免的：比如涉及到I/O（磁盘、网络等等）、服务器、甚至是同一个系统中的其他进程。通常，由于有些东西需要一段时间来加载就阻塞当前执行线程是无法接受的。在一个多核机器上并行执行多个独立操作通常也会遇到异步的问题。&lt;/p&gt;&lt;p&gt;当前Swift中对于这个问题的解决方案是采用闭包形式的完成回调。这种做法被&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//grokswift.com/completion-handlers-in-swift/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;广泛地理解&lt;/a&gt;，但也有许多著名的问题：它们经常会堆起来变成一个”回调地狱“，使错误处理变得尴尬，也让控制流变得处理困难。&lt;/p&gt;&lt;p&gt;对于这个问题有一个著名的解决方案，被称为&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Await&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;async/await&lt;/a&gt;。这是一个流行的编程风格，被首次应用于C#，而后在很多其他语言中也被采纳，包括Python, Javascript, Scala, Hack, Dart等等。由于它在业界中的广泛的成功和接受度，我建议我们在Swift中也显然应该实现它。&lt;/p&gt;&lt;h3&gt;给Swift设计async/await&lt;/h3&gt;&lt;p&gt;async/await的总体设计可以直接适用于Swift，不过如果添加一些修改，就可以让它与Swift的其他部分更加一致。我们建议把async作为方法的修饰符，类似已有的throws方法修饰符。函数（和函数类型）可以被声明为async，这将意味着这个函数是一个&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Coroutine&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;协程&lt;/a&gt;。协程是这样的一种函数：要么正常返回一个值，要么暂停，并在内部返回后继续执行。&lt;/p&gt;&lt;p&gt;这种方案使完成回调被融合进语言中。例如，以前你可能会写：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decodeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dewarpAndCleanupImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processImageData1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;dataprofile.txt&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataResource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;imagedata.dat&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;decodeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageTmp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dewarpAndCleanupImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而现在你可以写：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decodeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dewarpAndCleanupImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processImageData1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataResource&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;dataprofile.txt&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadWebResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;imagedata.dat&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageTmp&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decodeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageResult&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dewarpAndCleanupImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResult&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;await&lt;/code&gt;是个有点像现有&lt;code&gt;try&lt;/code&gt;的关键字：在运行时是一个空操作，但对管理者表明此时本地没有控制流可以执行。除了增加&lt;code&gt;await&lt;/code&gt;关键字，async/await模型也让你能写出清晰干净的命令式代码，并且编译器会帮你生成状态机和回调处理。&lt;/p&gt;&lt;p&gt;总的来说，添加它们可以使处理完成回调的体验大幅度改进，并且提供一个自然的模型来创建futures和其他API。更多的细节包含在这个&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.github.com/lattner/429b9070918248274f25b714dcfc7619&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;完整的提案&lt;/a&gt;里。&lt;/p&gt;&lt;h3&gt;新的异步API&lt;/h3&gt;&lt;p&gt;在语言中引入async/await，给在Cocoa、甚至是一整个新的框架扩展中引入更多异步API，提供了很好的机会（例如一个修改后的异步文件I/O API）。&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//swift.org/server-apis/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Server APIs Project&lt;/a&gt;也在积极地定义新的Swift API，其中很多天然都是异步的。&lt;/p&gt;&lt;h2&gt;第二部分：Actor：消灭共享可变状态&lt;/h2&gt;&lt;p&gt;拥有了定义和使用富有表现力的”命令式“控制流异步API，我们现在可以思考提供给开发一个途径，来把他们的应用分成多个并发任务。我们提议采用[Actor模型](&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Actor_model&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;en.wikipedia.org/wiki/A&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ctor_model&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;：Actor天然代表着真实世界中的概念，如”一个文档“、”一个设备“、”一个网络请求“，特别适合事件驱动的架构，如UI应用程序、服务器、设备驱动程序等等。&lt;/p&gt;&lt;p&gt;那什么是一个Actor？作为一个Swift开发者，最简单的理解方式是把他想象成一个组合：由&lt;code&gt;DispatchQueue&lt;/code&gt;、被队列保护的数据和队列中运行的消息组成。因为他们由一个（内部的）队列抽象来表达，你与Actor异步地通信，并且Actor保证，他们所保护的数据只允许被运行在那个队列上的代码来操作。这实现了”并发的海洋中串行的岛屿“。&lt;/p&gt;&lt;p&gt;把现有的软件来适配Actor的接口是很直观的，并且也可以逐步地在采用GCD或者其他并发原语的系统中，采用Actor模式。&lt;/p&gt;&lt;h3&gt;Actor模型理论&lt;/h3&gt;&lt;p&gt;Actor有一个非常深入的理论基础，自从1970年代就被学术界发现——如果你想深入研究支持它的理论基础的话，维基百科上的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Actor_model&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Actor页&lt;/a&gt;和&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//wiki.c2.com/%3FActorsModel&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;c2的维基页&lt;/a&gt;是很好的参考。这个工作的挑战之一（为了Swift的目标）是，学术界假定的是一个纯净的Actor模式（”所有东西都是Actor“），也假定了一个非常受限制的通信模型，不适合Swift。我会提供这种纯净模型的一个总结，然后探讨如何解决这些问题。&lt;/p&gt;&lt;p&gt;维基百科上说到：&lt;/p&gt;&lt;blockquote&gt; 当响应一个收到的消息时，一个Actor能够：做出本地的决策、创建更多Actor、发送更多消息，并且决定如何回复下一条收到的消息。Actor可以修改私有的状态，但是只能通过发送消息来影响到其他人（避免了使用任何锁）。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;Actor创建起来成本很低，并且你能够用高效的单向异步消息来与之通信（&amp;#34;往信箱里发送一个消息&amp;#34;）。因为这些消息是单向的，不会有等待，因此死锁是不可能发生的。在理论模型中，所有被发送的数据是被深拷贝的，也就意味着不可能在Actor之间共享任何数据。因为Actor不能触碰其他人的状态（也没有权限访问全局状态），就不需要任何同步的结构，消除了所有共享可变状态的问题。&lt;/p&gt;&lt;p&gt;为了让它在Swift编程中可行，我们需要解决几个问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们需要为一个任务中所有的计算建立坚实的计算基础。好消息是：在Swift 1...4中已经做到了！&lt;/li&gt;&lt;li&gt;单向异步消息非常棒，但是某些情况下不够方便。我们需要这样一个模型：允许消息返回一个值（即使我们不希望它们这么做），这样一来就需要一种等待那个值的方式。这就是为什么要增加async/await。&lt;/li&gt;&lt;li&gt;我们需要让消息发送非常高效：深拷贝每一个参数是无法接受的。幸运但也不意外的是——我们已经有了写时复制的值类型和&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86456179/(https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md)&quot; class=&quot;internal&quot;&gt;转移语义&lt;/a&gt;作为基础。这个技巧就是使用引用类型，接下来会讨论。&lt;/li&gt;&lt;li&gt;我们需要找到如何处理全局可变状态（已经在Swift中存在）的方法。下面考虑了一种可能。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;对于Swift的Actor模型设计范例&lt;/h3&gt;&lt;p&gt;把Actor模型加入到Swift有好几种可能的办法。就本宣言的目的而言，我会用一个新的Swift类型来描述，因为这是最不会让人迷惑的办法，何况这也不是一个正式的提案。我在这里预先说明，这只是一种可能的设计：真正正确的方法可能是让Actor作为一种特殊的类，如以下所展现的模型。&lt;/p&gt;&lt;p&gt;在这种设计中，你会定用&lt;code&gt;actor&lt;/code&gt;关键字定义一个Actor。正如你所期望的那样，一个Actor能够包含任意数量的数据成员来作为实例成员，可以有普通的方法，可以有扩展。Actor是引用类型，也有一个可以被作为值来传递的标识。正如你所期望的那样，Actor可以实现一个协议，也具有另外一些已有的Swift特性。&lt;/p&gt;&lt;p&gt;我们需要一个简单的可以运行的例子，那么就假设，我们正在为一个展示一列字符串的tableView构建数据模型。这个app包含了添加和操作数据的UI。可能会像这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TableModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mainActor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TheMainActor&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;theList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;didSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mainActor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updateTableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainActor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TheMainActor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainActor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainActor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// this checks to see if all the entries in the list are capitalized:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if so, it capitalize the string before returning it to encourage&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// capitalization consistency in the list.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prettify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Details omitted: it inspects theList, adjusting the&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// string before returning it if necessary.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这展现了一个Actor模型的关键的几点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actor定义了作为实例数据的本地状态，在这个例子中就是对&lt;code&gt;mainActor&lt;/code&gt;和&lt;code&gt;theList&lt;/code&gt;的引用。&lt;/li&gt;&lt;li&gt;Actor能够给任何其他他们所引用的Actor发送消息，使用经典的点语法。&lt;/li&gt;&lt;li&gt;出于方便，普通（非Actor）方法也可以被定义在Actor中，他们对于自己的状态有完全的访问权限。&lt;/li&gt;&lt;li&gt;&lt;code&gt;actor&lt;/code&gt;方法就是Actor可以接受的消息。把一个方法标记为&lt;code&gt;actor&lt;/code&gt;会加入某些限制，以下会说到。&lt;/li&gt;&lt;li&gt;在范例中没有展现，不过新的Actor实例会像任何其他类型一样，使用他们的初始化方法来创建：&lt;code&gt;let dataModel = TableModel(mainActor)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;同样在范例中没有展现，但是&lt;code&gt;actor&lt;/code&gt;方法含有隐式的&lt;code&gt;async&lt;/code&gt;关键字，所以他们能自由的调用&lt;code&gt;async&lt;/code&gt;方法，并&lt;code&gt;await&lt;/code&gt;他们的返回结果&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在其他的Actor系统中已经被发现，像这样的Actor抽象会促使应用程序采用”正确“的抽象，并且与开发者脑海中所思考的数据形式十分契合。例如，使用这个数据模型可以非常简单地创建Actor的多个实例，在MDI应用中每个文档创建一个。&lt;/p&gt;&lt;p&gt;这是在Swift中一个非常直接的Actor模型的实现，并且已经足够实现基本的优点。然而，注意这些也很重要：这里引入了一些不是那么明显的局限性，包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一个&lt;code&gt;actor&lt;/code&gt;方法不能返回一个值、抛出一个error或拥有一个&lt;code&gt;inout&lt;/code&gt;的参数&lt;/li&gt;&lt;li&gt;所有的参数需要在被拷贝时生成独立的值（参见以下）。&lt;/li&gt;&lt;li&gt;本地状态和非&lt;code&gt;actor&lt;/code&gt;方法只能被语法上定义在Actor中，或其extension之中的方法所访问。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;通过await来拓展模型&lt;/h3&gt;&lt;p&gt;如同我们已经提到的，第一个限制（actor方法无法返回值）很容易解决。假如一个app开发者需要一个快速的办法来获取列表中成员的数量，而这个办法也可以被其他的Actor看到。我们应该简单地让他们来定义：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TableModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNumberOfEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这能够让他们await来自其他Actor的结果：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;bp&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumberOfEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这与async/await模型中的其他部分完美吻合。这与本宣言无关，但我们会发现，把以上例子定义成&lt;code&gt;actor var&lt;/code&gt;是更通顺的。Swift目前不允许属性的访问器来&lt;code&gt;throw&lt;/code&gt;或者成为&lt;code&gt;async&lt;/code&gt;。当这个限制被放开时，更直接的做法是采用&lt;code&gt;actor var&lt;/code&gt;来提供更加自然的API。&lt;/p&gt;&lt;p&gt;注意这个扩展让模型能够产生比这多得多的用途，但是打破了Actor模型的”免死锁“的保证。在一个actor方法上await会暂停当前任务，又因为你可能会遇到循环等待，这样就会死锁。这是因为一个actor在同一时间只能处理一个消息。这个简单的场景当一个Actor等待自身的时候就会发生（可能通过一个引用链）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TableModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumberOfEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// trivial deadlock.&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个简单的情况也能被编译器简单地诊断出来。复杂的情况理想中会根据运行时的实现，在运行时利用trap来诊断，。&lt;/p&gt;&lt;p&gt;针对这个情况的解法，是鼓励人们使用返回&lt;code&gt;Void&lt;/code&gt;的&lt;code&gt;actor&lt;/code&gt;方法，”触发后不管“。有几个理由可以相信这会变成主流：async/await模型在语法上鼓励人们不要去使用（因为要求标记），许多使用Actor的应用是事件驱动的应用（本质上是单向的），最终UI和其他系统框架可以鼓励开发者使用正确的模式，当然文档也可以描述最佳的实践。&lt;/p&gt;&lt;h3&gt;关于主线程&lt;/h3&gt;&lt;p&gt;以上的例子展示了&lt;code&gt;mainActor&lt;/code&gt;被传入（到初始化方法），满足了理论上的纯粹的Actor。然而，在UIKit和AppKit中的主线程已经是全局状态，因此我们还不如承认这个现状，并把各处的代码变得更好。因此，有理由让AppKit和UIKit定义并提供一个全局常量的Actor引用，比如像这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainActor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Bikeshed: could be named &amp;#34;actor UI {}&amp;#34;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// You can&amp;#39;t make another one of these.&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Helpful public stuff could be put here to make app developers happy. :-)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mainActor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainActor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这可以让app开发者把拓展加入到&lt;code&gt;MainActor&lt;/code&gt;，使他们的代码变得更明确清楚地说明，什么&lt;i&gt;需要&lt;/i&gt;在主线程上运行。如果我们再激进一些，有一天Swift应该让数据成员可以在类的扩展中被定义，那么app开发者就可以把必须要在主线程上操作的状态直接定义在MainActor中&lt;/p&gt;&lt;h3&gt;数据隔离&lt;/h3&gt;&lt;p&gt;Actor消除共享可变状态以及显式同步的方法，是通过深拷贝所有通过消息发送给Actor的数据，并阻止直接而不经过这些消息发送来访问Actor的状态。这些做起来很漂亮，但是很快会带来实际上的低效，因为所有的数据都要被拷贝。&lt;/p&gt;&lt;p&gt;Swift很好地处理了这些，有一些原因：它非常强调值语义，也就是说所有的Swift开发者都了解，拷贝这些值是一个核心操作。其次，写时复制是一个非常适合这个模型的实现。注意，在以上的例子中，DataModelActor发送了一份&lt;code&gt;theList&lt;/code&gt;数组的副本到UI线程，来更新自身。在Swift中，这是一个O(1)的非常高效的操作，做了一些ARC的工作：但它并没有拷贝或者触碰到数组中的元素。&lt;/p&gt;&lt;p&gt;第三点正在开发中，会作为&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/apple/swift/blob/master/docs/OwnershipManifesto.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;所有权宣言&lt;/a&gt;的成果加入到Swift。当它可以使用的时候，高级的开发者会具备在Actor间&lt;i&gt;移动&lt;/i&gt;复杂值的能力，这也是非常高效的O(1)操作。&lt;/p&gt;&lt;p&gt;这给我们带来了三个未解决的问题：1) 我们如何得知某个东西具有合适的值语义，2) 我们应该对引用类型做些什么（类和闭包），3) 我们应该对全局状态做些什么。所有这三个选项应该被仔细探索，因为可能有很多种可能的解法。以下我会探索一种简单的模型，来证明一种设计的存在，但是我不会说这是能找到的最好的模型。&lt;/p&gt;&lt;h3&gt;一个类型能提供合适的值语义吗？&lt;/h3&gt;&lt;p&gt;这是一个很多Swift开发者都想知道的答案，比如定义在只面对值语义时正确的通用算法。有大量的提案来讨论如何确定这件事，这里我不会总结它们，而是概述一个简单的提案，来证明一个答案的存在性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;以定义一个简单的、只有一个要求的标识协议开始（我故意取了个傻名字来防止过早的琐碎的讨论）&lt;code&gt;protocol ValueSemantical { func valueSemanticCopy() -&amp;gt; Self }&lt;/code&gt;&lt;/li&gt;&lt;li&gt;使所有标准库中的类型实现&lt;code&gt;ValueSemantical&lt;/code&gt;。例如，如果一个数组的元素遵从这个协议，那么数组本身也就遵从它——注意一个由引用类型组成的数组并不总是提供我们需要的语义。&lt;/li&gt;&lt;li&gt;就像我们为&lt;code&gt;Codable&lt;/code&gt;做的一样，如果结构体和枚举的成员都是&lt;code&gt;ValueSemantical的话&lt;/code&gt;，教编译器学会如何也为他们实现这个协议。&lt;/li&gt;&lt;li&gt;编译器只检查是否遵从&lt;code&gt;ValueSemantical&lt;/code&gt;协议，并拒绝任何不遵从的参数或返回值&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;重申一下，&lt;code&gt;ValueSemantical&lt;/code&gt;并不是一个正确的名字：举例来说如&lt;code&gt;UnsafePointer&lt;/code&gt;就不应该遵从它。列举所有可能的选项，并评估他们的取舍是将来的任务。&lt;/p&gt;&lt;p&gt;认识到一点比较重要：这个设计&lt;i&gt;并不保证内存安全&lt;/i&gt;。有人可能会错误地实现这个协议（也就是假装实现了要求），那么共享可变状态会出现。在作者的意见里，这是一个正确的取舍：解决这个问题会需要引入繁重的类型系统技术（如同在&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.ponylang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Pony&lt;/a&gt;语言中的capabilities system）。Swift已经提供了一个模型，让内存安全的API（如数组）以内存不安全的的形式实现（如&lt;code&gt;UnsafePointer&lt;/code&gt;），这里描述的方法也是类似的。&lt;/p&gt;&lt;p&gt;&lt;i&gt;另一种设计&lt;/i&gt;：另一种实现是移除协议中的要求：只是把协议作为一个标识，应用在已经有着正确行为的类型上。当有必要自定义复制操作时（比如对引用类型），解决的方案是把那个类型用提供值语义的结构体包起来。这会让遵从（协议）变得更奇怪，但是这个设计避免了“另一种复制”操作，并鼓励更多的类型提供值语义。&lt;/p&gt;&lt;h3&gt;引用类型：类&lt;/h3&gt;&lt;p&gt;这个解决方案很简单：类必须合理地遵从&lt;code&gt;ValueSemantical&lt;/code&gt;（并实现要求），不然他们不能在一个&lt;code&gt;actor&lt;/code&gt;方法中被用作参数或返回结果。在作者的意见中，把合适的值语义加到类，并不是一件大事，有以下一些原因：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;默认的（没有遵从协议）是正确的缺省做法：只有人们认为（需要遵从）的类才会遵从（协议）&lt;/li&gt;&lt;li&gt;追溯一致性使app开发者能够处理框架工程师没有解决的问题&lt;/li&gt;&lt;li&gt;Cocoa有一些只能在主线程上使用的类（如整个UI框架）。根据定义，他们不会被四处分发。&lt;/li&gt;&lt;li&gt;一些Cocoa中的类是语义上不可变的，这使得他们要遵从（协议）变得简单和低成本。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除此之外，当你开始使用一个Actor系统，不去分配和传递大的对象图会变成与生俱来的设计：你只在需要操作他们的Actor中分配他们。这在Scala/Akka中已经被证明是对的。&lt;/p&gt;&lt;h3&gt;引用类型：闭包和函数&lt;/h3&gt;&lt;p&gt;在一个Actor的消息中传递一个函数类型的值是不安全的，因为它可能包含了任意的、属于Actor的数据。如果那些数据是通过引用的形式被包在里面，那么接收方的Actor就可以任意地访问发送方Actor的状态。那样一来，就至少有一个非常重要的例外：当一个闭包&lt;i&gt;字面量&lt;/i&gt;中包含的数据是被复制的，那么传递他就是安全的：使用以上提到的相同的&lt;code&gt;ValueSemantical&lt;/code&gt;复制语义。&lt;/p&gt;&lt;p&gt;这碰巧成为了一个非常有用的副产品，因为它允许一些有趣的“回调”抽象可以被自然地表达，而并不在Actor之间耦合。这里有个傻例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;otherActor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incrementCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中OtherActor并不需要知道selfActor中定义的incrementCount，减少了Actor之间的耦合&lt;/p&gt;&lt;h3&gt;全局可变状态&lt;/h3&gt;&lt;p&gt;既然我们是朋友，我会直接告诉你：这个没有很好的答案。Swift和C已经支持了全局可变状态，所以我们能做的最好的就是尽量不使用它。我们不能自动发现一个问题，因为Actor需要传递地使用并没有定义在其中的任意代码。举例来说：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;没有实际的方法能够知道&amp;#39;calculate&amp;#39;是不是线程安全的。唯一的方法是去到处寻找大量的注释/注解，包括C代码的头文件。我认为不太能做到。&lt;/p&gt;&lt;p&gt;实际操作中，这并不像听起来那么糟糕，因为大家最常使用的操作已经在内部实现（线程）同步，大部分因为人们已经在编写多线程的代码。尽管能魔术般地解决这个长期存在于已有系统中以来的问题会很好，我认为更好的办法是完全忽略它，并告诉开发者不要去定义或者使用全局变量（全局let是安全的）&lt;/p&gt;&lt;p&gt;这并不是已经没有希望了：也许我们可以考虑把全局&lt;code&gt;var&lt;/code&gt;从Swift中废弃，来促使大家远离它们。同时，任何从Actor中访问不安全的全局可变状态能够也应该被警告。使用这些方法能够消灭大部分明显的bug。&lt;/p&gt;&lt;h3&gt;可伸缩运行时&lt;/h3&gt;&lt;p&gt;到目前为止我们一直在回避一个问题：Actor的运行时应该怎么实现。我是故意的，因为我不是运行时方面的专家！从我的角度来看，以GCD作为基础来开发就很好（如果可以的话），因为它久经考验，并可以减少并发设计带来的风险。我也认为GCD是一个合理的出发点：它提供了正确的语义，有着很好的底层性能，并且它有一些高级功能，比如QoS支持，对Actor和其他东西都很有用。如果要给每个Actor提供这些高级功能，通过给他们添加&lt;code&gt;gimmeYourQueue()&lt;/code&gt;方法会很方便。&lt;/p&gt;&lt;p&gt;使用GCD有一些潜在的问题需要我们解决：&lt;/p&gt;&lt;p&gt;&lt;b&gt;内核线程激增&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们的目标是，让Actor作为一个程序中的核心抽象来使用，也就意味着，我们想让开发者能够创建任意他们想要的数量，而不会遇到性能问题。如果伸缩性问题出现，你就不得不把逻辑上分开的东西合并到一起，来减少Actor数量，带来复杂度并失去一些数据隔离的好处。因此这个被提出的模型应该有着很好的伸缩性，但是实际的实现需要依赖运行时。&lt;/p&gt;&lt;p&gt;GCD已经有着很好的伸缩性，但一个担忧是，当一个GCD任务以内核和运行时无法了解的形式阻塞，就会受到内核线程激增的影响。作为回应，GCD运行时会分配新的内核线程，它们每个都会得到一个栈……然后这些栈会使堆碎片化。这在一个会生成成千上万Actor的服务器上会带来问题——至少每个网络连接会需要一个Actor。&lt;/p&gt;&lt;p&gt;在一个需要调用C代码和非纯Swift编写的现有系统的运行时上，可靠地解决线程激增的问题是不可能或者不实际的。在那种情况下，完美不是必须的：我们只需要一条朝着那个方向的路，并在用到一个不合作的框架或API时，给开发者一个方法来完成他们的工作。我建议采用三个步骤来解决这个问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;随着时间推移，让已有的框架逐渐变得”异步安全“。确保新的API采用正确的方式实现，并确保已有的API不会从”异步安全“变得”异步不安全“&lt;/li&gt;&lt;li&gt;提供一种机制，让开发者能够处理他们实际中遇到的有问题的API。可能是一种类似”用一个闭包把你的调用包起来，并传给一个特殊的GCD方法“，或者其他具有类似复杂度的方法&lt;/li&gt;&lt;li&gt;继续优化性能和调试工具来帮助找到实际中可能有问题的情况。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这种聚焦在开发者实际中遇到的有问题的API的方法，应该对服务器的工作尤其适合，这种情况下很可能同时需要非常多的Actor。已有的服务器的库也很有可能对异步比对C代码更加友好。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Actor的销毁&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Actor如何被销毁也有一些疑问。理想的模型是，当Actor的引用计数降为0且队列中最后的消息完成后，会被隐式释放。这可能需要一些运行时集成的时间。&lt;/p&gt;&lt;p&gt;&lt;b&gt;有限的队列深度&lt;/b&gt;&lt;/p&gt;&lt;p&gt;另一个潜在的担忧是GCD队列有无限的深度：如果你有一个生产者/消费者的情景，一个快速的生产者生产的速度，可能超过消费者消费的速度，并持续地积累队列中的任务。在这种情况下，研究这些可能会比较有趣：提供有限的队列来控制或阻塞生产者生产的速度。另一个选项是，把这看成一个纯粹的API问题，促使采用响应流和其他提供back pressure的抽象。&lt;/p&gt;&lt;h3&gt;其他的设计：Actor成为类&lt;/h3&gt;&lt;p&gt;以上的设计是简单且自洽的，但可能不是正确的模型，因为Actor与类在概念上有非常多的重合。看下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actor有着引用语义，和类一样&lt;/li&gt;&lt;li&gt;Actor能形成一张图，这意味着我们需要能够对他们有&lt;code&gt;weak&lt;/code&gt;/&lt;code&gt;unowned&lt;/code&gt;引用&lt;/li&gt;&lt;li&gt;Actor的子类就像类的子类一样，也会有相同的行为&lt;/li&gt;&lt;li&gt;有些人错误地认为Swift讨厌类：这是恢复一些它们之前的荣耀的机会&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;然而，Actor并不是&lt;i&gt;简单的类&lt;/i&gt;，这里有一些区别：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;只有Actor能含有&lt;code&gt;actor&lt;/code&gt;方法。这些方法有一些额外的要求，用以在编程模型中提供我们所需要安全性。&lt;/li&gt;&lt;li&gt;”Actor类“不能继承自”非Actor基类“，因为基类可能把self或者本地状态通过不安全的方式泄露出去&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;讨论中一个重要的枢轴点在于，是否有继承Actor的需要。如果可以的话，用一种特殊的类为他们建模，会是一个非常好的简化的假设，因为类已经提供了很多复杂的特性（包括所有的初始化规则等等）。如果不这么做，那么把他们定义成一种新的类型也是说得通的，因为那样会很简单，而且成为一个另外的类型，可以更简单地解释他们所具有的额外规则。&lt;/p&gt;&lt;p&gt;语法上，如果我们决定把他们作为类，让它变成一个类的修饰符，这是可以理解的，因为Actor本质上改变了类的条件。例如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeBaseActor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者说，因为你总是不能从非Actor类来继承，我们可以把Actor用作基类：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Actor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;更多扩展&lt;/h3&gt;&lt;p&gt;上面的设计草稿是一个为语言构造并发抽象的最小化、但重要的前进的一步，但如果要实际上让模型变得丰满，几乎肯定还需要一些其他的通用抽象。例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Reactive_Streams&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reactive streams&lt;/a&gt;是一个通用的、处理异步Actor之间的通信的方法，并且也为backpressure提供了方案。&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.dartlang.org/tutorials/language/streams&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Dart&amp;#39;s stream design&lt;/a&gt;就是一个例子&lt;/li&gt;&lt;li&gt;相关的，有理由把&lt;code&gt;for/in&lt;/code&gt;循环拓展到异步的序列里——可能通过一种新的&lt;code&gt;AsyncSequence&lt;/code&gt;协议。无论如何，它可能会被加入到&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//channel9.msdn.com/Blogs/Seth-Juarez/A-Preview-of-C-8-with-Mads-Torgersen%23time%3D16m30s&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;C# 8.0&lt;/a&gt;中&lt;/li&gt;&lt;li&gt;一个最高层级的&lt;code&gt;Future&lt;/code&gt;类型经常被要求实现。我预计它的重要性相比那些没有（或一开始没有）async/await的语言来说要弱地多，但是对于想在一个方法中启动多个重叠的计算来说，还是一个很有用的抽象。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Actor内部并发&lt;/h3&gt;&lt;p&gt;另一个可以考虑的高级的概念是让人可以定义一个”多线程的Actor“，它提供标准的ActorAPI，但是同步和任务调度是由Actor自己处理的，不使用GCD而是用传统的同步抽象。添加这些意味着Actor内部会有共享可变状态，但是在Actor之间的隔离还是得以保留。有一些原因使这个考虑变得有意思：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;这让编程模型具有一致性（Actor的实例表示一个东西），即使这个东西可以用内部并发来实现。例如，考虑一个网卡/网络栈的抽象：它可能想根据自己的规则，来为运行中的任务做内部的调度和优先级安排，但是也可以在其之上提供一个简单易用的ActorAPI。Actor能够处理多个并发请求这件事，是一个实现细节，使用者并不需要重写一遍来理解。&lt;/li&gt;&lt;li&gt;把这作为非默认可以提供合适的、渐进的复杂度暴露。&lt;/li&gt;&lt;li&gt;你还是会得到更好的安全性和整体的系统隔离，即使单个Actor是以这个方式优化的&lt;/li&gt;&lt;li&gt;当逐渐把代码迁移到Actor模型时，为已有的、建立在共享可变状态上的并发子系统添加Actor的外壳，变得简单很多&lt;/li&gt;&lt;li&gt;像这样的做法，对能够支持多个并发同步请求的引入的RPC服务而言，可能也是正确的抽象。&lt;/li&gt;&lt;li&gt;这种抽象就内存安全的角度而言是不安全的，但这在Swift中有很多先例。许多安全的抽象建立在内存不安全的原语之上——想一想&lt;code&gt;Array&lt;/code&gt;如何建立在&lt;code&gt;UnsafePointer&lt;/code&gt;之上——这是Swift编程模型中实用主义和”把事情做成“里一个重要的部分。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这样来说，这绝对是一个高级用户的功能，并且我们需要先理解、建造和体验基础的系统，然后再添加类似这些的东西&lt;/p&gt;&lt;h2&gt;第三部分：错误隔离带来可靠性&lt;/h2&gt;&lt;p&gt;Swift在设计上有很多方面，考虑使编程错误（也就是软件bug）能在编译时被发现：静态类型系统，optionals，鼓励覆盖switch cases等等。然而，有些错误只能在运行时被发现，包括数组越界访问，整型溢出，和强制解包为空。&lt;/p&gt;&lt;p&gt;如同在&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/apple/swift/blob/master/docs/ErrorHandlingRationale.rst&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Swift错误处理原理&lt;/a&gt;中提到的，必须要做一些取舍：不应该强迫开发者处理每一个能想到的边缘情况：就算不考虑带来的样板（重复），这些逻辑本身也可能是无法很好测试，因此包含很多bug。我们必须对这些复杂的问题作出很好的权衡和取舍，来获得一个平衡的设计。这些取舍带来了Swift的做法：让开发者去思考和编写所有需要处理可能为空的指针引用的代码，但不需要为每一个算数操作考虑整型溢出。这个新的挑战是，整型溢出仍然会在某种程度上被发现和处理，并且开发者不需要写任何恢复的代码。&lt;/p&gt;&lt;p&gt;Swift通过&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Fail-fast&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;快速失败&lt;/a&gt;的哲学来处理这个问题：最好是尽快地发现并报告一个编程问题，而不是继续错下去并祈求错误不会带来影响。与严格的测试相结合（可能未来会有静态分析技术），目标是让bug不太严重，并且在发生时提供栈的追踪和其他一些信息。这会促使它们在开发的早期就被发现和修复。然而，当app上线后，这个哲学只有在所有bug都被发现时才是好的，因为一个未被发现的错误会使app突然自己关闭。&lt;/p&gt;&lt;p&gt;突然的进程停止如果损坏了用户数据，甚至在服务端app中同时有几百个用户正在连接的时候，会是一个很大的问题。即使使用通用的方法来完美地解决任意的程序错误是不可能的，已经有一些优雅地处理常见错误的办法。举例来说，在Cocoa中，如果一个&lt;code&gt;NSException&lt;/code&gt;传播到了runloop的顶层，尝试保存修改后的文档到一个另外的位置会很有用。这不保证在每个情况下都有效，但是当它有效的时候，用户会很高兴并没有丢失他们的工作进程。类似的，如果一台服务器在处理一个用户的请求时崩溃，一个可能的恢复方式是，完成当前进程中其他已经建立的连接，但是把新的连接请求转移到一个重新启动的服务器进程中去。&lt;/p&gt;&lt;p&gt;Actor的引入是一个改进这个情况的好机会，因为当开发者思考他们维护的不变量时，Actor提供了一个介于”整个进程“和”单个类“之间的有趣的粒度。确实，现在已经有了一些创建可靠Actor系统的技术，并且再一次的，Erlang是其中的领袖之一（想详细了解的话查看&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//erlang.org/download/armstrong_thesis_2003.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Joe Armstrong的博士论文&lt;/a&gt;）。我们会从设计基础模型开始，然后讨论一个可能的设计方案。&lt;/p&gt;&lt;h3&gt;Actor可靠模型&lt;/h3&gt;&lt;p&gt;这里基本的概念是，一个出错的Actor违反了本身的不变性，但是其他Actor中的不变性仍然成立：因为我们没有在里面定义共享可变状态。这就给了我们一个选择，终止这个破坏了本身不变性的单个Actor，而不是不关闭整个进程。根据基础Actor模型发送单向异步消息的定义，有可能运行时可以直接丢弃任何发送给Actor的新消息，并且系统中的其余部分可以继续运行，甚至不知道那个Actor已经崩溃了。&lt;/p&gt;&lt;p&gt;采用这个简单的方法，会有两个问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;具有返回值的Actor方法可能会正处于被&lt;code&gt;await&lt;/code&gt;的过程，如果Actor崩溃了，那些awaits就永远完成不了了。&lt;/li&gt;&lt;li&gt;丢弃消息可能本身会造成死锁，因为更高级的通信不变性被打破了。举例来说，考虑这个Actor，它在等待10个消息后传递消息：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Merge10Notifications&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;otherActor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// set up by the init.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;otherActor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果10个给这个Actor发送通知的Actor其中之一崩溃了，那么程序就会永远等待那第10个通知。因为如此，设计一个”可靠“Actor的人需要考虑更多的问题，并且付出略微更多努力来实现这样的可靠性。&lt;/p&gt;&lt;h3&gt;建立可靠性&lt;/h3&gt;&lt;p&gt;由于建造一个可靠的Actor需要比建造简单的Actor需要更多的思考，需要去找寻默认提供&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Progressive_disclosure&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;渐进的复杂度暴露&lt;/a&gt;的模型。你最先需要的是一个建立它的方法。在具有Actor语法的条件下，有两个广泛的选择：最高层级的Actor语法，或是一个类型定义标识，也就是以下之一：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;reliable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Notifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reliable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当一个人为Actor建立了可靠性，一个新的条件会被添加到所有具有返回值的&lt;code&gt;actor&lt;/code&gt;方法上：它们现在也需要被声明为&lt;code&gt;throws&lt;/code&gt;。这强制使Actor的调用方为Actor的崩溃做好准备。&lt;/p&gt;&lt;p&gt;隐式地丢弃消息仍然是一个问题。我不太熟悉其他系统中采用的方式，但我想象了两种可能的方案：&lt;/p&gt;&lt;p&gt;1) 提供一个为Actor注册失败处理的标准库API，让更高层级有能力去思考如何处理和应对这些失败。一个Actor的&lt;code&gt;init()&lt;/code&gt;方法可以使用这个API来在系统中注册失败处理逻辑。 2) 强迫&lt;i&gt;所有的&lt;/i&gt;&lt;code&gt;actor&lt;/code&gt;方法来抛出错误，使用Actor一旦崩溃就抛出的语义。一个可靠Actor的调用方被强制要求处理一个潜在的崩溃，并且以所有发送给他的消息的粒度来做。&lt;/p&gt;&lt;p&gt;在两种方案之间，第一种方案更吸引我，因为它把通用的失败逻辑抽取到一个地方，而不是让每个调用者去编写（难以测试）的的逻辑来细粒度地处理失败。举例来说，一个文档Actor可能会注册一个失败处理逻辑，在它崩溃之后尝试把数据保存到另一个地方。&lt;/p&gt;&lt;p&gt;也就是说，两种方案都是可行的，并且需要被细化。&lt;/p&gt;&lt;p&gt;&lt;i&gt;另一种设计&lt;/i&gt;：另一种方案是让所有的Actor都变成”可靠的“Actor，通过把额外的限制变成一个Actor模型的一个简单部分来实现。这减少了一个Swift开发者需要或不得不做的选择。如果async/await模型，最终变成async会隐式地抛出错误，那么这可能是正确的方向，因为在一个带有返回值的方法上&lt;code&gt;await&lt;/code&gt;也隐式地带有&lt;code&gt;try&lt;/code&gt;标识。&lt;/p&gt;&lt;h3&gt;运行时模型的可靠性&lt;/h3&gt;&lt;p&gt;除了编程者面对的高层的语义模型的问题，也存在运行时应该是什么样的问题。当一个Actor崩溃时：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;他的内存处于什么状态？&lt;/li&gt;&lt;li&gt;进程能从失败中清理到什么程度？&lt;/li&gt;&lt;li&gt;我们是否要释放Actor管理的内存和其他资源（如文件标识符）？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有几种可能的设计，但我鼓励采用一种&lt;b&gt;没有清理操作&lt;/b&gt;的设计：如果一个Actor崩溃了，运行时会把错误传播给其他Actor，运行恢复的处理逻辑（如在之前段落描述的那样），但是它&lt;b&gt;不应该&lt;/b&gt;进一步清理Actor拥有的资源。&lt;/p&gt;&lt;p&gt;这么做有很多原因，但是最重要的是，Actor刚刚才通过进行无效的操作破坏了他自身的一致性。在这个时间点，他可能开启了一个事务但还没有完成，或者可能处于一些其他形式的不一致的、未定义的状态。考虑到内部不一致性有非常大的可能，有可能有一些类的更高层级的不变性变得不完整，也就是说运行类&lt;code&gt;deinit&lt;/code&gt;方法是不安全的。&lt;/p&gt;&lt;p&gt;除了我们面对的语义问题，还有实际上的复杂度和效率问题：它需要代码和元数据来具备展开Actor的栈和释放活跃资源的能力。这些代码和元数据会在应用中占据一些空间，并且也需要一些时间来编译生成。这样的话，如果要提供一个具备从这些错误中恢复的能力的模型，意味着消耗大量的代码体积和编译时间，而这些本来不应该发生。&lt;/p&gt;&lt;p&gt;一个最终的（我承认较弱）采用这个方案的理由是，一个”过于干净“的清理会带来一个风险，就是开发者会将快速失败的情况作为一个软错误，而不会紧急处理它。我们非常希望这些bug能被找到以及修复，来实现一个我们追求的高可靠性的软件系统。&lt;/p&gt;&lt;h2&gt;第四部分：改进系统架构&lt;/h2&gt;&lt;p&gt;就如在动机部分描述的，单个应用进程运行在一个更大的系统中：通过&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.mikeash.com/pyblog/friday-qa-2009-01-16.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;IPC&lt;/a&gt;通信的多进程（如一个应用和一个XPC守护进程），或客户端和服务端通过网络通信，或服务端在&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tr4.cbsistatic.com/hub/i/r/2016/11/29/9ea5f375-d0dd-4941-891b-f35e7580ae27/resize/770x/982bcf36f7a68242dce422f54f8d445c/49nocloud.jpg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;云环境&lt;/a&gt;中互相通信（使用JSON，protobuf，GRPC等等）。他们的共同点是，都包含互相独立的、把结构化数据作为异步消息发送来互相通信的任务，他们实际上不能使用共享可变状态。这听起来开始变得熟悉了。&lt;/p&gt;&lt;p&gt;也就是说，他们也存在不同，并且尝试把他们封装起来（就像在之前在Objective-C中做的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.mikeash.com/pyblog/friday-qa-2009-02-20-the-good-and-bad-of-distributed-objects.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;分布式对象&lt;/a&gt;系统）会造成严重问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;客户端和服务端通常是不同的人来写的，也就是说API必须独立地演进。Swift在这一点已经很好了。&lt;/li&gt;&lt;li&gt;网络会引入一些原始API几乎一定不会预料到的错误模式。这会被上面提到的”可靠Actor“所涵盖。&lt;/li&gt;&lt;li&gt;消息中的数据需要是已知的&lt;code&gt;Codable&lt;/code&gt;&lt;/li&gt;&lt;li&gt;远程系统的延迟会高得多，因为过于精细的API会工作得很差&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了与Swift的目标相一致，我们不能故意忽视这些问题：我们想要让开发过程迅速，但是”启动并运行一个东西“并不是目标：它真的需要能够工作——即使是在失败的情况下。&lt;/p&gt;&lt;h3&gt;进程间和远程计算的设计草稿&lt;/h3&gt;&lt;p&gt;在这个领域中Actor模型是一个著名的方案，并且已经被成功部署在不那么主流的语言中，如&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Erlang_%28programming_language%29%23Concurrency_and_distribution_orientation&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Erlang&lt;/a&gt;。把它带入到Swift需要我们确定它非常干净地融入到现有的设计中，利用好Swift的特性，并确保一直符合它的指导原则。&lt;/p&gt;&lt;p&gt;这些原则之一是&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Progressive_disclosure&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;渐进的复杂度暴露&lt;/a&gt;：一个Swift开发者如果不关心IPC或分布式计算，他就不应该担心这些。这就意味着Actor需要通过一个新的声明标识来引入，与他最终的设计相匹配，也就是以下之一：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;distributed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyDistributedCache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;distributed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyDistributedCache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为它已经做了这些，Actor现在需要接受两个额外的要求：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actor必须满足&lt;code&gt;可靠Actor&lt;/code&gt;的要求，因为&lt;code&gt;分布式Actor&lt;/code&gt;是由可靠Actor进一步提炼而来。例如，这意味着所有带返回值的&lt;code&gt;actor&lt;/code&gt;方法必须可以抛出错误。&lt;/li&gt;&lt;li&gt;&lt;code&gt;actor&lt;/code&gt;方法的参数和返回值必须遵从&lt;code&gt;Codable&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;额外的，Actor的作者必须考虑在分布式环境下&lt;code&gt;actor&lt;/code&gt;方法是否有意义，考虑到所面对的更高的延迟。使用粗粒度的API可能在性能上有很大优势。&lt;/p&gt;&lt;p&gt;做了这些以后，开发者就能够正常地编写他们的Actor：不用改变语言或工具，不用改变API，没有大量概念上的改变。不管你是在通过JSON还是用protobuf和/或GRPC与云服务通信，都是如此。模型中几乎没有缺陷，而那些不完美之处也有非常明确的理由：改变全局状态的代码不会在整个app架构中被看到，在文件系统中创建的文件可以在IPC上下文中工作，而不是分布式的上下文中，等等&lt;/p&gt;&lt;p&gt;应用开发者现在可以把他们的Actor放进一个打包中，在他们的应用和服务之间共享。主要的代码改变是在&lt;code&gt;MyDistributedCache&lt;/code&gt;的初始化的地方，现在需要使用一个在其他进程中创建Actor的API，而不是直接调用初始化方法。如果你开始使用标准云API，你应该可以通过引入一个提供Actor接口的API的包，让你的代码可以摆脱JSON。&lt;/p&gt;&lt;h3&gt;需要的新API&lt;/h3&gt;&lt;p&gt;这项工作的主要的困难之处在框架这一边，例如，开始构建这些会很有趣：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;需要构建新的API，在有趣的地方启动Actor：IPC上下文，云服务等等。这些API应该是互相一致的&lt;/li&gt;&lt;li&gt;下层的运行时需要被构建，具有处理序列化、握手、Actor的分布式引用计数等等&lt;/li&gt;&lt;li&gt;为了调优共享内存间的IPC通信（mmap），引入一个新的协议来提炼&lt;code&gt;ValueSemantical&lt;/code&gt;。重型的类就可以在合适的时机来选择它。&lt;/li&gt;&lt;li&gt;一个描述云API的DSL应该被创建（或者采用一个已有的），自动生成必要的样板代码来提供一个云服务的ActorAPI。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不论哪种情况，这里都有很多工作需要做，并且会需要好几年来创建原型、建造、迭代，来使它变得完美。当我们最终达到那里，会是美好的一天。&lt;/p&gt;&lt;h2&gt;第五部分：疯狂又灿烂的未来&lt;/h2&gt;&lt;p&gt;在这条路上往远处看，存在更多的机会去消灭意外的复杂度，通过在我们的语言、工具和API中消灭任意的差别。你可以在这些地方找到它们：查看带有异步通信模式、消息发送和事件驱动模型，和共享可变状态工作得不太好的地方。&lt;/p&gt;&lt;p&gt;例如，GPU计算和DSP加速器具备所有这些特征：CPU通过异步命令与GPU通信（如通过DMA请求和中断）。有可能可以使用Swift代码的一个子集（加上GPU的特殊操作，如纹理获取API）来处理GPU计算任务。&lt;/p&gt;&lt;p&gt;另一个可以关注的是事件驱动应用，比如嵌入式系统的中断处理程序，或者是Unix中的异步信号。如果一个Swift脚本想要注册&lt;code&gt;SIGWINCH&lt;/code&gt;的通知，通过注册你的Actor并实现正确的方法会比较简单。&lt;/p&gt;&lt;p&gt;进一步，这样的模型会需要重新评估一些在软件社区中的长期讨论，比如微内核和宏内核。微内核通常在学术上被认为是更好的（比如不同模块的内存隔离，独立于内核核心之外的驱动开发等等），但是宏内核倾向于更务实（更有效率）。这个提案中的模型允许一些非常有趣的混合的方法，允许子系统在需要效率时被移入进程，或者在它们不受信任或者可靠性非常重要的情况下被移出进程，而不需要写很多代码来实现它。Swift聚焦于稳定的API和API弹性，也促使并使内核和驱动开发分开成为可能。&lt;/p&gt;&lt;p&gt;无论如何，有很多让软件世界变得更好的机会，但是采用深思熟虑和有意的方法来设计和构建每一各部分，也是一条很长的路。我们一次只走一步，确保每一步都是我们能做到的最好的。&lt;/p&gt;&lt;h2&gt;从其他的并发设计中学习&lt;/h2&gt;&lt;p&gt;当为Swift设计一个并发系统，我们需要从其他语言的设计中学习，并确保我们实现最好的系统。有成千上万种不同的编程语言，但是大多数只有很小的社区，也就很难从这些社区中吸取好的经验。这里我们来看一些不同的系统，集中注意看他们的并发设计如何工作，忽略在他们设计中的语法上以及其他无关的方面。&lt;/p&gt;&lt;h3&gt;Pony&lt;/h3&gt;&lt;p&gt;也许最相关的活跃的研究语言是&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.ponylang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Pony编程语言&lt;/a&gt;。它是基于Actor的，并将它和其他技术一起使用来提供一个类型安全、内存安全、免死锁，和免数据竞争的编程模型。Pony和Swift设计中最大的语义区别是，Pony花费了很多的设计复杂性来提供引用能力，带来很高的学习曲线。相反的，这里提出的模型建立在Swift成熟的值语义系统之上。如果在Actor之间转移对象图在未来变得重要（以保证内存安全的方式），我们可以研究扩展&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/apple/swift/blob/master/docs/OwnershipManifesto.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Swift所有权模型&lt;/a&gt;来覆盖更多的使用场景。&lt;/p&gt;&lt;h3&gt;Akka Scala中的Actor&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//akka.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Akka&lt;/a&gt;是一个用&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.scala-lang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Scala&lt;/a&gt;编写的框架，它的使命是”更简单地建立强大的响应式、并发的、分布式应用“。这里的关键使他们设计良好的&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//doc.akka.io/docs/akka/current/scala/actors.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Akka actor系统&lt;/a&gt;，作为开发者使用的原则的抽象来实现这些目标（它反过来也是受到了&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.erlang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Erlang&lt;/a&gt;的很大影响）。Akka最好的一个特点是，它很成熟并且被很多不同的组织和人使用。这意味着我们可以从它的设计、它的社区探索的模式和描述它实际中工作得多好的经验报告中学习。&lt;/p&gt;&lt;p&gt;Akka的设计与这里的提案有很多相似之处，因为它是以同样的Actor模型来实现的。它建立在futures、异步消息发送，每个Actor是并发的一个单位，有著名的模型来描述Actor应该在什么时候、用怎样的方法来通信，并且Akka支持简单的分布式计算（他们称之为”位置透明“）&lt;/p&gt;&lt;p&gt;Akka和这里提到的模型的一个区别是，Akka是一个基于库的功能，而不是基于语言的功能。这意味着它不能提供我们这里描述的模型提供的、额外的类型系统和安全功能。例如，有可能意外地&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//manuel.bernhardt.io/2016/08/02/akka-anti-patterns-shared-mutable-state/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;共享可变状态&lt;/a&gt;，带来bug并破坏模型。他们的消息循环也是用模式匹配手动实现的，而不是自动被分发到&lt;code&gt;actor&lt;/code&gt;方法——这带来一些样板代码。Akka Actor消息是无类型的（由Any表示），可能会引起意外的bug，也很难推断出一个Actor的API是什么（虽然&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//doc.akka.io/docs/akka/2.5.3/scala/typed.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Akka Typed&lt;/a&gt;研究项目正在研究如何修复这个问题）。除此以外，这两个模型非常有可比性，并且这不是一个意外。&lt;/p&gt;&lt;p&gt;记住这些不同后，我们通过阅读很多的博客和其他的在线文档，来学习这个模型实际中能运行的多好，比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;非常多的&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//danielwestheide.com/blog/2013/02/27/the-neophytes-guide-to-scala-part-14-the-actor-approach-to-concurrency.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.safaribooksonline.com/library/view/applied-akka-patterns/9781491934876/ch04.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;最佳实践和设计模式&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//michalplachta.com/2016/01/23/scalability-using-sharding-from-akka-cluster/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;使用Akka实现的分片服务器&lt;/a&gt;带来的好处&lt;/li&gt;&lt;li&gt;从很多人那里来的成功报告&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;进一步的，有可能Swift社区中有一些成员已经遇到了这个模型，如果他们能分享他们的经验会很棒，包括正面和负面的。&lt;/p&gt;&lt;h3&gt;Go&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//golang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go编程语言&lt;/a&gt;支持一个最高层级的方法来实现编写并发程序，通过goroutines和（双向的）频道。这个模型在Go社区中非常流行，直接反映了很多Go语言中的核心价值，包括简单性以及在底层抽象编程的偏好。我并没有证据证明它，但是我推测这个模型受到了Go繁荣的领域的影响：Go的频道和独立goroutine通信模型几乎直接反映了服务器如何在网络连接上通信（包括核心操作，如&lt;code&gt;select&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;Swift的设计提案相比Go模型有更高的抽象，但是直接反映了Go中最常见的模式：goroutine的主体是在一个频道上的无限循环，对发到频道上的消息进行解码并对它们进行操作。可能最简单的例子是这个Go代码（从这个&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.golang-book.com/books/intro/10&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;博客&lt;/a&gt;上改编而来）&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;... 基本上和这个提出的Swift代码类似：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Swift的设计比Go而言更加声明式，但并没有在如此小的角度上展现太多优缺点。然而，在更实际的例子中，高层级的声明式方法展现了优点。例如，goroutines监听多个频道是很普遍的，对于每个它们响应的消息各一个频道。这个例子（来自&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这篇博客&lt;/a&gt;）很典型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Worker represents the worker that executes the job
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;WorkerPool&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;JobChannel&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;quit&lt;/span&gt;        &lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NewWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;workerPool&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;JobChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JobChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Stop signals the worker to stop listening for work requests.
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种东西在我们提案的模型中被表现得自然的多：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说了这些，Go模型也有一些优点和取舍。Go基于&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Communicating_sequential_processes&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSP&lt;/a&gt;构建，它允许更多临时通信的结构。例如，因为goroutines可以监听多个频道，偶尔会更容易建立一些（高级的）通信模式。发往一个频道的同步消息，只能在有人监听和等待它们的时候被完全地发送，这可能带来性能优势（和一些劣势）。Go并不尝试去提供任何的内存安全和数据隔离，所以goroutines有着mutexes和其他API供使用，并且会遇到一些标准的bug如死锁和&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//accelazh.github.io/go/Goroutine-Can-Race&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;数据竞争&lt;/a&gt;。竞争甚至可能会破坏&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//research.swtch.com/gorace&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;内存安全&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;我认为Swift社区能从Go的并发模型中学到的最重要的是，一个高度可伸缩的运行时带来的大量好处。经常会有成千上万甚至百万的goroutines运行在同一台服务器上。具备不再担心”线程不够用“的能力很重要，并且也是在云中使用Go的一个关键决定点。&lt;/p&gt;&lt;p&gt;另一个教训是（即使在并发世界中实现有一个”最好的默认“方案非常重要），我们不应该过度限制开发者能够表达的模式。这是async/await设计独立于futures或者其他抽象的一个关键原因。一个Swift中的频道库会和Go之中的一样高效，并且如果共享可变状态和频道是某个问题的最好方案，那么我们应该拥抱现实，而不是逃避它。虽然这么说，我期待这些情况非常罕见 :-)&lt;/p&gt;&lt;h3&gt;Rust&lt;/h3&gt;&lt;p&gt;Rust的并发方案建立在它的所有权系统之上，使基于库的并发模式可以在它之上建立。Rust支持消息传递（通过频道），但是也支持锁和其他共享可变状态的典型抽象。Rust的方法非常适合系统开发者，他们也是Rust的主要用户。&lt;/p&gt;&lt;p&gt;好的方面是，Rust的设计提供了很多灵活性、更多的不同并发原语可供选择，也对C++开发者是更熟悉的抽象。&lt;/p&gt;&lt;p&gt;不好的方面是，它们的所有权模型比这里的设计有更高的学习曲线，它们的抽象一般在很低的层级（对系统开发者是好事，但是不如高层那么有帮助），并且它们也没有提供编程者指导来选择哪个抽象，或者如何构建一个应用等等。Rust也没有提供如何扩展到分布式应用的显而易见的模型。&lt;/p&gt;&lt;p&gt;这样来说，当&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/apple/swift/blob/master/docs/OwnershipManifesto.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Swift所有权模型&lt;/a&gt;的基础实现以后，为Swift系统编程者改进同步会变成一个目标。到那个时候，有理由再看一下Rust的抽象，决定哪些东西可以被带入到Swift。&lt;/p&gt;</description>
<author>neo lin</author>
<guid isPermaLink="false">2019-10-13-86456179</guid>
<pubDate>Sun, 13 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>单位半群和单子的自由构造</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-10-13-79704063.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/79704063&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在上一篇文章&lt;a href=&quot;https://zhuanlan.zhihu.com/p/70609434&quot; class=&quot;internal&quot;&gt;parker liu：从单位半群到单子&lt;/a&gt; 中，已经给大家详细介绍了如何从单位半群一步步得到单子。但单子是如何构造出来的呢，即如何从类型得到单位半群，从函子得到单子呢？在这篇文章中，我将给大家介绍最一般的单位半群和单子的构造方式，即单位半群和单子的自由构造。&lt;/p&gt;&lt;p&gt;我们知道一些具体的单位半群，如自然数、布尔值，那有没有一种方法从一般的类型构造出单位半群呢？答案是有的，这就是单位半群的自由构造。同样的，单子也存在着自由构造。&lt;/p&gt;&lt;p&gt;我们先来看看单位半群的自由构造是怎么样的。我们知道单位半群有如下的定义：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;                       &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这就是单位元&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这就是二元运算&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那我们如何来从类型 a 来构造出一个单位半群 m 呢？假装我们是万能的上帝，上帝说要有光，于是就有了光。我们说要有单位半群 m，于是就有了单位半群 m。&lt;/p&gt;&lt;p&gt;假设下面的List a 就是我们说要有的单位半群：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMon&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的Nil是一个无参数构造子，等价于Unit（也就是()），即Hask这个幺半范畴的单位元i，而Cons则和Hask这个幺半范畴的张量积⊗等价。于是上面的List a的定义相当于定义了一个函子 F x = i + a ⊗ x，其中List a是函子 F x 的不动点，(List a, in)则是F x这个函子构造的 F-Alg 范畴的初始对象。可以证明函子 F x = i + a ⊗ x 的不动点是一个单位半群，于是就有了单位半群List a。&lt;/p&gt;&lt;p&gt;我们考虑以所有单位半群 m 为对象的由F x构造的 F-Alg 子范畴，因 (List a, in) 是F-Alg 范畴的初始对象，所以必然存在一个唯一的从 (List a, in) 到 (m, fm) 的态射，这个态射也是 List a 到 m 的态射。于是单位半群 List a和单位半群 m 之间存在唯一的态射。&lt;/p&gt;&lt;p&gt;若我们把单位半群看成一个对象，则单位半群之间存在态射，于是所有单位半群构成了单位半群范畴 &lt;b&gt;Mon&lt;/b&gt;。上面的单位半群 List a是这个单位半群范畴 &lt;b&gt;Mon&lt;/b&gt;的初始对象，称之为自由单位半群。List a 是函子 F x 的不动点，我们将其展开，即不停的将x = i + a ⊗ x 代入到 i + a ⊗ x 中，得到下面的表达式：&lt;/p&gt;&lt;p&gt;   List a = i + a ⊗ i + a ⊗ a ⊗ i + a ⊗ a ⊗ a ⊗ i + a ⊗ a ⊗ a ⊗ a ⊗ i + ...&lt;/p&gt;&lt;p&gt;这样我们就有了从类型 a 到单位半群 List a 的最一般的构造方式，上式就是单位半群上的自由构造。&lt;/p&gt;&lt;p&gt;对于由自函子构成的幺半范畴，其对象是自函子 F，单位元是自函子 Id，张量积是函子的组合运算 ◦，我们也同样的有从自函子到自函子的幺半范畴上的单位半群（就是自由单子）的最一般的构造方式，自由单子是高阶函子 HF (Free F) = Id + F ◦ Free F 的不动点，是所有单子构成的单子范畴的初始对象，这个自由单子的Haskell代码定义如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到，自由单子和自由单位半群类似，都是形如 F x = i + a ⊗ x 的函子的不动点。因此，自由单子也有类似自由单位半群的展开式：&lt;/p&gt;&lt;p&gt;    Free F = Id + F ◦ Id + F ◦ F ◦ Id + F ◦ F ◦ F ◦ Id + F ◦ F ◦ F ◦ F ◦ Id + ...&lt;/p&gt;&lt;p&gt;这就是单子的自由构造。我们使用自由单子的Haskell代码的定义，可以得到更直观的展开式：&lt;/p&gt;&lt;p&gt;    Free f a = Pure a + Free (f (Pure a)) + Free (f (Free (f (Pure a)))) + ...&lt;/p&gt;&lt;p&gt;有了单位半群和单子的一般构造方式，我们就可以用来构造自由单位半群和自由单子，再将其求值到具体的特定的单位半群和单子。&lt;/p&gt;&lt;p&gt;我们先来看单位半群，从任意类型 a 得到的自由单位半群List a定义如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是函子 F x = i + a ⊗ x 的不动点 Fix F，(Fix F, in) 是这个函子构成的 F-Alg 范畴的初始对象，用Haskell表示如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alg&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Fix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Fix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;(In (&amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;))&amp;#34;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alg&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;out&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Fix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixl2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixl2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;fixl1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixl1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixl1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixl2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fixl1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixl2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ls2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ls2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ls1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ls1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ls1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ls2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ls1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ls2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的ListF a就是函子 F x = i + a ⊗ x 的Haskell代码的表示，List a 就是Fix (ListF a)，也就是ListF a的不动点，都是单位半群，也是自由单位半群。我们只要定义一个Alg就可以对List a求值了，例如定义一个计算长度的Alg，就可以得到List a 也就是Fix (ListF a) 的长度了，而定义一个计算和的Alg，就可以得到List Int 也就是Fix (ListF Int) 的和了&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;lengthAlg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lengthAlg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lengthAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;lengthListF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lengthListF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lengthAlg&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;sumAlg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sumAlg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sumAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;l&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;sumListF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sumListF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumAlg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来我们来看单子的情况，从任意函子 F 得到的自由单子 Free F 定义如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pure&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这也是函子 F x = i + a ⊗ x 的不动点 Fix F，(Fix F, in) 是这个函子构成的 F-Alg 范畴的初始对象。不过这里的函子 F 中的 x 也是一个函子，函子 F 是一个高阶函子，即作用在函子上的函子。对应的F-Alg范畴也是高阶的，Fix F是一个函子，不是一个类型。用Haskell表示如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;infixr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:~&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- define a natural transformation&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:~&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- define Higher order functor&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HFunctor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;hfmap&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:~&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:~&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ffmap&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- define Higher order F-Alg&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HAlg&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:~&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HFix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outH&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HFix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HFix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HFix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hfix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;(InH (&amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hfix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;))&amp;#34;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;hcata&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HFunctor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HAlg&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HFix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hf&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:~&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;hcata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;halg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;halg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hfmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hcata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;halg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;高阶F-Alg范畴形式的自由单子的定义如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- FList f a is same as Free f a&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FNil&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FCons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FList&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FNil&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;FNil &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FCons&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Fcons &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fx&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FNilF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FConsF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FNilF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;FNilF &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;FConsF &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HFunctor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FListF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;hfmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FNilF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FNilF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;hfmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FConsF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ffmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FNilF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FNilF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ffmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FConsF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- FreeMF f g a is same as FListF f g a&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HFunctor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;hfmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;hfmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ffmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ffmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Free f =  FList f = HFix (FListF f) = HFix (FreeMF f)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMonad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HFix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;liftMF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMonad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;liftMF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMonad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ffmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMonad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixmf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixmf&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixmf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frf&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMonad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fga&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的FList f 就是我们前面定义的自由单子Free f，这个名字揭示了自由单子实际上就是函子 f 的列表，对应了自由单子的展开式 。FListF f g 就是高阶函子 (F f) g = Id + f ◦ g 的Haskell代码的表示，FList f 就是HFix (FListF f)，是FListF f的不动点，也就是自由单子。&lt;/p&gt;&lt;p&gt;liftMF是一个非常有用的函数，其将任意一个函子的值提升为自由单子的值，使得我们可以方便的构造自由单子。构造好自由单子后，再定义一个HAlg，我们就可以对自由单子Flist f求值了。下面我们定义了一个函子StackF，由这个函子构造了一个自由单子HFix (FreeMF StackF)，然后定义了两个不同的HAlg，分别用于计算自由单子HFix (FreeMF StackF)的值，和打印自由单子HFix (FreeMF StackF)的表达式。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StackF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Top&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
              &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;pushF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Push&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;popF&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;topF&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Top&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addF&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mulF&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;calcF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;nf&quot;&gt;pushF&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pushF&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;addF&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pushF&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;mulF&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;topF&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;popF&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MemState&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;runAlg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StackF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MemState&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Push&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Pop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Top&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ik&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Const String is not a monad, but can get generate all calculation string&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runShow&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HAlg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StackF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runShow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PureMF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Const&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Done!&amp;#34;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runShow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Push&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Push &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getConst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runShow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Pop&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Pop, &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getConst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runShow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Top&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ik&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Top, &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getConst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ik&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runShow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Add, &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getConst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runShow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FreeMF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Mul, &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getConst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的runAlg中，StackF k中的k是一个Monad，是类型MemState。通过hcata函数，我们可以将calcF求值为类型MemState的值，再通过runState得到最后的calcF表达式的值，结果是35。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;calcState&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hcata&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runAlg&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calcF&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;calcValue&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runState&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calcState&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>parker liu</author>
<guid isPermaLink="false">2019-10-13-79704063</guid>
<pubDate>Sun, 13 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>写出来一个可能是对的CPS变换</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-10-12-82267434.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/82267434&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cps变换就是说，调用都多长出一个参数，k，表示接下来干啥，也就是continuation，如果你算出来了结果，那就直接丢给你的上级，如果你当前是个复杂调用，那就拆开，从子结构开始算，然后构造一个lambda，把子结构的结果丢出去，在这个lambda里，最终会有所有的结果，然后把这些结果拼成最终结果丢给k。下面举个例子&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;(define (revlist l)
  (cond
    [(null? l) &amp;#39;()]
    [else (append (revlist (cdr l)) `(,(car l)))]))

(define (revlist-k l k)
  (cond
    [(null? l) (k &amp;#39;())]
    [else (revlist-k (cdr l) (lambda (cdrlres)
                               (k (append cdrlres `(,(car l))))))])) ;此处append是库函数
                                                                     ;把 (append cdrlres `(,(car l))) 视作结果&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;做cps变换的程序本身就是contiuation passing style的，真是很有趣。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#lang racket
(define (atom? expr)
  (match expr
    [x #:when (or (number? x) (symbol? x)) #t]
    [`(lambda (,x k) ,body) #t]
    [default #f]))

(define (cps expr)  
  (letrec ([id-gen (lambda (expr) `(k ,expr))]
           [cps1 (lambda (expr codegen)
                   (match expr
                     [atom #:when (atom? atom) (codegen expr)]
                     [`(,app ,rand) #:when (and (atom? app) (atom? rand))
                                     (if (eq? codegen id-gen)
                                         `(,app ,rand k) ;eta reduction
                                         (let ([x (gensym &amp;#34;var&amp;#34;)])
                                           `(,app ,rand (lambda (,x) ,(codegen x)))))]
                     [`(,app ,rand) (cps1 rand (lambda (r-atom)
                                                   (cps1 app (lambda (a-atom)
                                                               (cps1 `(,a-atom ,r-atom) codegen)))))]
                     [`(lambda (,x) ,body) (codegen `(lambda (,x k) ,(cps1 body id-gen)))]))])
    (cps1 expr id-gen)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一些值得关注的例子,我自己造的，不保证符合论文cps定义&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#;(x -&amp;gt; (k x))
#;((m n) -&amp;gt; (m n k))
#;((m n) -&amp;gt; (m n (lambda (mnv) (k mnv)))) ;without eta reduction
#;((x (y z)) -&amp;gt; (y z (lambda (yzres) (x yzres k))))
#;(((lambda (x) (m x)) (lambda (a) b)) -&amp;gt; ((lambda (x k) (m x k)) (k (lambda (a k) (k b))) k))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里最后一个例子卡了我好久，我一直以为 (lambda (x) x) 的cps后结果是 (lambda (x k) (k x)) ， 后来才发现，应该把lambda视作值(绝了),也就是结果，传给上层k，才更合理。所以应该是 (k (lambda (x k) (k x)))&lt;/p&gt;&lt;p&gt;分case聊一下，&lt;/p&gt;&lt;h2&gt;case一&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[atom #:when (atom? atom) (codegen expr)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果处理的是值了，直接把值丢给 codegen 去生成答案就行了，伏笔一下，对于cps这种代码优化器来说，值就是不用再进一步处理的代码。可能是原始代码就不用处理了，也可能是我们自己生成的最终代码。&lt;/p&gt;&lt;p&gt;只凭这一个case就能处理 (x -&amp;gt; (k x)) 了。简单吧。&lt;/p&gt;&lt;h2&gt;case二&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[`(,app ,rand) #:when (and (atom? app) (atom? rand))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个case是处理简单调用的，也就是applier和operand 都是最终代码不用再进一步处理的情况。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;(let ([x (gensym &amp;#34;var&amp;#34;)])
      `(,app ,rand (lambda (,x) ,(codegen x))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里就是造了一个变量 var几几几 ，表示(app rand)运算的结果，然后把这个存放有这个结果的变量的代码交给代码生成器就好。&lt;/p&gt;&lt;p&gt;就是说，生成器，你别看我case二复杂，其实不难，我case二自己干了啥你别管，最后我丢你一个变量去处理就行，你就当没我case二，变量你还不懂么，不就是case一么。这个属于一种reduction。&lt;/p&gt;&lt;p&gt;((m n) -&amp;gt; (m n (lambda (var几几几) (#用了var几几几生成的最终代码))) = (m n (lambda (var几几几) (k var几几几))))&lt;/p&gt;&lt;p&gt;然后那个if就是在可能的时候做 eta reduction， 能写成k 就不写成 (lambda (x) (k x)) 了&lt;/p&gt;&lt;h2&gt;case三&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[`(,app ,rand) (cps1 rand (lambda (r-atom)
                             (cps1 app (lambda (a-atom)
                                  (cps1 `(,a-atom ,r-atom) codegen)))))]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个case用来处理复杂调用，如果 app 或者 rand 不是最终代码，那么我们就先调用cps1把它变成最终代码，然后把这个最终代码片段遗留的不知道怎么用的 a-atom和r-atom 扔出来，拼成一个简单调用，再调用codegen去完成收尾工作。&lt;/p&gt;&lt;p&gt;这么说有点抽象，举个栗子&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cps1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id-gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cps1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big-gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;big-gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;big-gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cps1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest-gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest-gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cps1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id-gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;varYZ&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到case三最后一定能转化为case二，所以这个递归是可以结束的。&lt;/p&gt;&lt;h2&gt;case四&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[`(lambda (,x) ,body) (codegen `(lambda (,x k) ,(cps1 body id-gen)))]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;case四的要点在于把生成的代码直接丢出去，并且需要把这种生成的代码的形状也在atom?里注册上，视为最终代码，让case一和case二能认识case四生成的代码。&lt;/p&gt;&lt;p&gt;lambda会生成一个新世界，有自己的scope，所以对body直接进行cps变换就行了，(cps1 body id-gen)写成(cps body) 也ok的，然后给原来lambda增加一个新的参数 k 表示这个scope里的天外来客最终归宿之顶层continuation，把生成的代码丢给codegen就可以了。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这东西最早当然是从yinwang那听说的，一直是一个心结，毕竟总是写不出来又看不懂很难过的，不过昨天机缘巧合之下写出来的(之前看过yinwang的cps.ss，但是没看懂，有点印象)，8成是对的。赶紧写篇文章纪念一下，以后就不用因为这个浪费时间了。代码丢到这里了[1]&lt;/p&gt;&lt;p&gt;[1] &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/hgztheyoung/CasuallyWrittenCode/blob/master/cps.rkt&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/hgztheyoung/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;CasuallyWrittenCode/blob/master/cps.rkt&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
<author>naiveman</author>
<guid isPermaLink="false">2019-10-12-82267434</guid>
<pubDate>Sat, 12 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>递归的五种定式</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-10-07-84452538.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/84452538&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;曾经有同事问我, 写递归代码有什么秘诀么? 彼时的我说不出什么秘诀, 只觉得写递归代码, 是像呼吸一般自然的事情, 在这之前, 我还真不觉得会有人问 “怎么写递归代码” 这样的问题, 就好像不会有人问你 “怎么呼吸空气” 一样.&lt;/p&gt;&lt;p&gt;但是秉着 “你表达不出来是因为你理解得不够深入” 的信念, 我一直没有忘记这个问题. 虽然那时我已经 刷完了hackerrank上的FP领域所有recursion标签的习题, 以及codewars上的几乎所有Haskell 1kyu习题, 能用组合子和递归程序解决生产环境的各种编码需求,并且一直坚持避免手写任何无谓的循环, 但是, 不能把我脑子里的技巧, 总结成方法, 或者说不能把我脑子里的方法, 写成纸面上的方法, 这的确一直让我耿耿于怀.&lt;/p&gt;&lt;p&gt;今天, 在学习函数式编程多年后, 我觉得我终于可以尝试对 “递归” 这个话题, 做一个阶段性的小结了. 本文标题 “递归的五种定式” 中, 之所以借用围棋术语 “定式”, 是因为递归程序正如围棋一样, 规则简单而又千变万化, 这里提到的 “五种” 绝不是一种严格的分类, 它们只是对这万千变化之中的一些常见模式的捕捉和总结.&lt;/p&gt;&lt;p&gt;这篇文章需要你对编写递归程序有一定经验和体会, 才能领会各种定式之间的差别, 所以, 另一种阅读本文的推荐方式是, 先把里面的习题找出来做一遍, 再回过头来读这篇文章.&lt;/p&gt;&lt;p&gt;总之, 希望我对这些递归定式的分类和总结能给后来人的学习提供一些帮助.&lt;/p&gt;&lt;p&gt;&lt;i&gt;(备注: 本文还有很多未完善的地方, 比如有些定式缺少一些典型的例子进行说明, 但是我一时间可能很难在脑子里搜寻出这么一个既简单又典型的问题作为例子. 所以如果你有好的例子可以提供, 或者任何改进的建议, 欢迎评论或私信联系)&lt;/i&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;Cata型递归 (cata style recursion)&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所谓cata型递归, 就是可以利用子结构的计算结果直接构造出父结构的计算结果的情形. 它通常沿着某个递归数据结构 (如列表, 玫瑰树, 抽象语法树等) 进行, 用来求取递归结构的某些归纳性质 (如大小, 总和, 最值等等).&lt;/p&gt;&lt;p&gt;典型的比如:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subtrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subtrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cata 类型的递归是首选的考虑, 它很常见, 并且它的停机性, 正确性, 复杂度等性质非常易于分析.&lt;/p&gt;&lt;p&gt;另外, 值得一提的是, cata型递归, 其实还可以用 cata 函数来实现, 当然前提是你要处理的这个递归结构是个函子 (Functor):&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConsF&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cata 函数的意思就是, 如果你要求取一个递归结构的某个归纳属性, 那么你只需要提供这样的逻辑片段即可:&lt;/p&gt;&lt;p&gt;&lt;i&gt;“把容器中盛放的递归子结构给替换成要归纳求取的属性值, 然后你据此返回根结构的属性值“&lt;/i&gt;&lt;/p&gt;&lt;p&gt;值得注意的是, 这个逻辑片段中是不需要递归调用的, 所以使用 cata 就可以在不使用显式递归的情况下, 实现递归逻辑了.  (不妨想想看, 类似的函数你还能想到哪些呢?&lt;/p&gt;&lt;p&gt;另外, 列表的 fold 其实可以看作是 cata 函数针对列表的一个特化实现, 比如上述的 sum 就可以类似地用 foldr 实现为:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;事实上, 通用的 cata 函数的类型是比较复杂的, 其中涉及到 base functor 啊 recursion schemes 啊等等这些 Haskell 里的的高阶概念, 这里暂时不赘述.&lt;/p&gt;&lt;p&gt;由于典型的 cata型递归 通常都是比较朴素的, 可能出现在代码里就是一个 fold 或者是一个很简单的直接递归, 所以这里并没有给出专门的练习题, 如果你有兴趣的话, 可以尝试将其它练习题刻意转换为 cata 型递归来完成.&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;直接递归 (direct recursion)&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;所谓直接递归, 就是直接利用递归子调用的返回结果, 构造当前调用的返回结果, 的递归过程.&lt;/p&gt;&lt;p&gt;例如比较简单且典型的阶乘运算:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及经典的斐波那契数列:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里值得一提的是, 虽然说 n 是个自然数, 没有结构, 但是其实可以根据皮亚诺公理想象一个递归结构, 或者也可以把 n 构造成 [0..n] 这样的递归结构, 从而将问题转化为可以用cata型递归来解决.&lt;/p&gt;&lt;p&gt;这一类按照递归分支的数量可以分为线型递归和树型递归两种, 这两种在思维方式上基本是相似的, 主要是对复杂度的预期不同. 如果是线型递归那么一般可以预期它的最坏复杂度上限是线性复杂度. 但是如果是树型递归, 那么它的最坏复杂度上限则是指数的, 其底数是多少其实取决于所有逻辑分支中, 递归分支最多的递归分支数量, 比如上面的 fib 函数, 它的前两个逻辑分支 (当n 等于 0 或 1 时) 中, 递归分支个数都是零 (即并未出现递归调用), 而最后一个分支中, 递归分支个数则是2, 所以它的最坏复杂度上限是 2 的 n 次方, 但这仅仅是一个上限估计, 并非意味着树型递归总是指数复杂度的, 一个典型的例子是比如我们遍历二维格点 (比如棋盘) 的时候, 也会用到树型递归, 但是它的复杂度则是平方级的, 因为树并不满. 当然以上的分析都基于一个基本的前提: 递归参数总是严格减小的, 如果这个前提不满足, 例如3n+1问题这种的话, 那么其实并不能对其复杂度有任何预期, 因为它甚至有可能不会停机.&lt;/p&gt;&lt;p&gt;Cata型递归 可以认为是 直接递归 的一种特殊情形, 你完全可以用 直接递归 来解决 cata型递归 可以解决的问题, 另一方面你也可以通过构造(或者想象)递归结构来把 直接递归 转化为 cata型递归.&lt;/p&gt;&lt;p&gt;习题:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.hackerrank.com/challenges/string-mingling/problem&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hackerrank.com/challeng&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/string-mingling/problem&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.hackerrank.com/challenges/string-o-permute/problem&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hackerrank.com/challeng&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/string-o-permute/problem&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.hackerrank.com/challenges/prefix-compression/problem&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hackerrank.com/challeng&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/prefix-compression/problem&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.hackerrank.com/challenges/functional-programming-warmups-in-recursion---gcd/problem&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hackerrank.com/challeng&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/functional-programming-warmups-in-recursion---gcd/problem&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.hackerrank.com/challenges/super-digit/problem&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hackerrank.com/challeng&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/super-digit/problem&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.hackerrank.com/challenges/pascals-triangle/problem&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hackerrank.com/challeng&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/pascals-triangle/problem&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.codewars.com/kata/simple-repeated-words/train/haskell&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codewars.com/kata/simpl&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;e-repeated-words/train/haskell&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.codewars.com/kata/title-case/train/haskell&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codewars.com/kata/title&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;-case/train/haskell&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;间接递归 (indirect recursion)&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;直接递归非常容易想到, 但是有些时候, 你要实现的目标函数可能不适合直接用于递归, 有时候是因为, 它们需要递归向下传递一些额外的状态参数, 另一些时候是因为, 它们需要向上传递一些额外的返回值.  这些时候, 就需要寻找一个更加合适的递归函数, 我称之为 “递归核”,  然后, 目标函数其实就是对递归核函数的一层很薄的封装, 它只需要对输入做一些简单的预处理, 然后把它们交给递归核, 并且把递归核返回的结果做一些后处理即可.&lt;/p&gt;&lt;p&gt;例如, 在利用矩阵的快速幂运算实现一个高效的 fib 函数的时候, 我们的递归函数并不是 fib 本身, 而是带有一个额外的矩阵作为状态参数的 matPow 函数, 并且这个递归核的返回值也是一个矩阵而并非我们直接要返回的 fib n 的值:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Matrix&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElem&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matPow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;matPow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;matPow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matPow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multStd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;matPow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matPow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multStd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multStd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;习题:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.hackerrank.com/challenges/sequence-full-of-colors/problem&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hackerrank.com/challeng&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/sequence-full-of-colors/problem&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.hackerrank.com/challenges/functional-programming-the-sums-of-powers/problem&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hackerrank.com/challeng&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/functional-programming-the-sums-of-powers/problem&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;尾递归 (tail recursion)&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;有时候, 你并不希望为每一步都构造返回结果, 你希望只有到达特定状态的时候, 再去构造返回结果, 而其它时候, 只需要更新一些状态变量即可.&lt;/p&gt;&lt;p&gt;这种情况下, 对于熟悉命令式编程的程序员来说, 最容易想到的实现方式是循环, 你可以在每一步维护状态变量, 然后当循环结束的时候, 再根据之前构造的状态变量去构造最终结果.&lt;/p&gt;&lt;p&gt;比如当我们想写一个更高效一丢丢的, 线性复杂度版本的 fib 的时候:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//迭代(循环)实现
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而在FP风格中, 我们使用尾递归来做这样的事情. 所谓尾递归, 是指在递归函数的函数体的每一个逻辑分支中, 所有递归调用都是尾调用, 即被直接 return 而外面没有包裹其它额外运算. 不满足尾递归定义的递归也被称为 guarded recursion (意指递归的返回值会被守在递归出口的运算逻辑捕获).&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//尾递归实现
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上 cpp 代码等价的 haskell 代码:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你已经写就循环版本, 那么通过一个非常 trivial 的转换即可得到对应的尾递归版本, 没错, 尾递归和循环这两种形式的代码是等价的, 它们可以很容易地进行互转, 这在我之前的一篇回答中已经提到了: &lt;a href=&quot;https://www.zhihu.com/question/20761771/answer/20672305&quot; class=&quot;internal&quot;&gt;什么是尾递归？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;之前一些组里的小盆友反馈学习Haskell的体验时表示, 很多题给他循环都能写出来的, 但是不给循环就不会写了, 这其实是不熟悉尾递归的原因, 遇到这种情况其实大不了先把循环版本写下来, 再手动改成尾递归即可, 熟悉之后你就会更乐于写尾递归版本了, 毕竟尾递归版本不用关心对迭代变量的赋值顺序, 只需要专注于构造下一个状态即可.&lt;/p&gt;&lt;p&gt;还有人说递归没有 break 和 continue 不方便, 其实还是不够动脑筋, continue 相当于直接递归调用转移到下一个状态即可, break 的话, 因为你写尾递归版本, 可以在任何一个逻辑分支直接构造最终结果并返回, 所以本来就相当于可以随时 break, 真正写一下就知道这根本不会是问题.&lt;/p&gt;&lt;p&gt;一个不方便使用结果递归但是很适合使用尾递归的例子:  &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.codewars.com/kata/range-extraction/train/haskell&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codewars.com/kata/range&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;-extraction/train/haskell&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;由于尾递归会引入额外的状态参数, 一般至少会引入一个用来存储将要返回的结果的状态参数, 所以尾递归常常被用作递归核, 而很少会直接对外暴露.&lt;/p&gt;&lt;p&gt;尾递归也可以和直接递归互相转换:&lt;/p&gt;&lt;p&gt;一方面, 尾递归本身就可以被视为一种特殊的线型直接递归, 它的特殊之处在于, 它在所有包含递归调用的逻辑分支中, 总是直接返回递归调用的返回值, 而不会对返回值进行更多的处理.&lt;/p&gt;&lt;p&gt;另一方面, 直接递归, 不论是线型, 还是树型, 都可以转换为尾递归形式:&lt;/p&gt;&lt;p&gt;将线型直接递归转换为尾递归的方式是, 引入一个额外的状态参数, 用于储存部分结果.&lt;/p&gt;&lt;p&gt;而将树型直接递归转换为尾递归时, 则需要引入一个额外的状态参数, 用于存储调用栈的栈帧. 这和通常说的 “递归转循环” 是类似的过程.&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;习题(尝试不用循环实现):&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.codewars.com/kata/can-you-get-the-loop/train/haskell&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codewars.com/kata/can-y&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ou-get-the-loop/train/haskell&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.codewars.com/kata/valid-braces/train/haskell&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codewars.com/kata/valid&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;-braces/train/haskell&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.codewars.com/kata/simple-assembler-interpreter/train/haskell&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codewars.com/kata/simpl&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;e-assembler-interpreter/train/haskell&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.codewars.com/kata/longest-consecutive-sequence-of-squares/train/haskell&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codewars.com/kata/longe&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;st-consecutive-sequence-of-squares/train/haskell&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;互递归 (mutual recursion)&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;互递归的一个典型例子就是自顶向下的手写 parser.&lt;/p&gt;&lt;p&gt;理论上, 互递归和直接递归也可以互相转换:&lt;/p&gt;&lt;p&gt;一方面, 直接递归本来就是一种特殊的互递归 (trivial case).&lt;/p&gt;&lt;p&gt;另一方面, 互递归可以通过代入消除 (类似 inline 的过程) 的方式, 转换为直接递归, 一些情况下, 这样转换产生的代码长度不会发生太大的变化, 仍然在可接受范围内, 而另一些情况下, 这样转换之后的代码将变得冗长而不可读, 所以这种转换也可以当成是判断是否真的有必要使用互递归的一个标准.&lt;/p&gt;&lt;p&gt;有些时候, 我们会把直接递归代码中, 递归部分的一些重复模式提出来, 作为函数去调用, 以减少重复, 这种时候就会很自然地得到互递归的代码了.&lt;/p&gt;&lt;p&gt;(关于互递归的习题, 除了 parser 题之外, 我一时没有找到特别典型的例子, 如果后续碰到, 我会在这里补上, 如果你遇到了很好的例子, 也欢迎告诉我&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;它们的关系&lt;/h2&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Cata型递归 和 尾递归 其实是从直接递归中剥离出来的两类特殊情形. 它们因为其各自的独特性质而被拎出来单独探讨.&lt;/p&gt;&lt;p&gt;而 间接递归 和 互递归 其实都是对直接递归的拓展, 只是它们各自拓展的维度不同.&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;              ~~~~~~~~     ~~~~
             cata型递归   尾递归
             ~~~~~~~~~~~~~~~~~~~
                  直接递归 
~~~~~~~~~~~~~~~~~~~~~~~~~~~
    间接递归     ~~~~~~~~~~~~~~~~~~~~~~~
                            互递归&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最后, 需要注意的是, 这里对习题的分类不是严格和强制的, 同一个问题, 我们总是可以尝试用各种不同的方法去解决. 我这里会尽量选择典型的习题, 也即, 这些习题用相应的方式去解, 是最直接的, 当然这个 “直接” 也会因人而异, 所以我并不能对此做任何保证, 但是尝试用不同的方式去解决同一个问题, 这本身也是一种极有趣的练习, 不是么 :)&lt;/p&gt;&lt;p&gt;&lt;br/&gt;(题图待补充, 欢迎热心观众赞助 :)&lt;/p&gt;</description>
<author>罗宸</author>
<guid isPermaLink="false">2019-10-07-84452538</guid>
<pubDate>Mon, 07 Oct 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>半条命</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-10-01-84927997.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/84927997&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近观察到一些人跟事，有感而发。&lt;/p&gt;&lt;p&gt;假设你听说编程很厉害，有很多用，想学编程，但是编程有这么多不同的分支，有手机APP开发，有算法，有深度学习，有区块链，有编程语言。。。你该学什么好呢？&lt;/p&gt;&lt;p&gt;很明显，因为你基本上不懂编程，所以你无法做技术上的分析，那你只能从表面上分析：越热门火爆，越缺人的东西，越适合 - 供需关系，基础经济学嘛，人才越缺，我越好找工作，工资越高，热门的方向，发paper更多人cite，做出项目也有更多star，更多人用，谁不想被更多人需要呢？&lt;/p&gt;&lt;p&gt;如果这方向还比较简单，这就更好了：同等条件下，为什么要选更辛苦的工作，而不是轻轻松松攒钱？&lt;/p&gt;&lt;p&gt;但是如果你真这样选，那就把自己坑了。&lt;/p&gt;&lt;p&gt;在说原因之前，我们先来考虑一些问题。&lt;/p&gt;&lt;p&gt;众所周知，技术会过时，30年前学的visual foxpro到现在价值为零，而你不希望你学的东西毫无用处，那你应该去学更不会过时的技术（半衰期更长）。而什么技术半衰期更长？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;更新迭代比较慢的技术。大版本号每上升一次/新框架推出一次，你就要重新学习一次新的API（比如啥tensorflow啥react），然后还要把旧的代码升级上去。&lt;/li&gt;&lt;li&gt;已经活了很久的技术。如果大公司推出了一个新平台，很可能过几年就打入冷宫，重新选个新欢（Objective C）。或者更惨的，这个方向直接凉凉（VR），你学的东西全部变废物，好不好玩？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;很不巧的是，热门的方向正好这两点都不具备。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;热门的方向，自然有各大公司卖力的去推平台推框架竞争，飙版本号，生怕落后一点点就丧失掉大蛋糕。这样迭代周期一两年一单位，你要不停翻新你会的知识，君不见tensorflow2.0一出，一推叫着我不行了，不能再学的？（&lt;a href=&quot;https://www.zhihu.com/question/314903950&quot; class=&quot;internal&quot;&gt;如何评价 TensorFlow 2.0 版本，是否是 Google 再一次力挽狂澜？&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;如果一个方向活了很久，那为什么最近才变得热门？就算我们去考虑特例，比如大环境变了，突然这个方向变得可行（GPU跟大量数据导致深度学习效果很好），那以前学的东西也变得没用了 - 因为玩法变了。90年代那些链接主义NN在现代还有什么用吗？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果你选了个更简单的工作，那你处境更危险：本来低半衰期就导致你难以积累技术，现在再加上积累了的技术也不会带来太多竞争力，那过个五年，你不能再经常996，工资也变高了，然后跟新员工技术上拉不出差距，然后当方向慢慢变冷，竞争变激烈的时候，老板不炒你，难不成留着你过年？注意，有的工作准入门槛低，但这不等于简单 - 因为提升能力的最有效方法就是让你做刚好在能力范围外的事情。&lt;/p&gt;&lt;p&gt;你可能会反问‘难不成我看啥方向冷门，然后一头扎进去饿死？’&lt;/p&gt;&lt;p&gt;也不是。你应该做的是去学习基本功。比如啥操作系统，算法，编程语言，体系结构这些。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;这些东西都出来半世纪多了，能发掘的都发掘得差不多了，所以你能随便打开任意优质大学的公开课，然后毫无违和感的假装自己活在1990。&lt;/li&gt;&lt;li&gt;半世纪多的东西也不会一天突然凉凉，被打入冷宫需要重新学习。这些东西也不是一个公司能左右的 - 谁家产品这么长命？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;同时，做这些基础方向，也不代表你不能做有实际impact的工作，只能去grind 1% gain，或者直接呆象牙塔，无实际应用（不一定是坏事）- 你完全可以打好基础，然后去用这些基础做各种热门应用，这样大家都需要你，但是你的半衰期则是几十年，等你的应用方向凉凉，人老珠黄了你拔吊无情，去接着做其他的应用方向，岂不美哉？&lt;/p&gt;&lt;p&gt;&lt;br/&gt;比如我表面上看上去是在做深度学习框架（TVM），其实天天都在写SML Compiler，一边在看Abstracting Abstract Machine打算实现下，另一边写的代码却被deploy到亚马逊，爽歪歪。&lt;/p&gt;&lt;p&gt;再举个反面例子：在这么多深度学习框架/算法中，有很多（我数出了五个，其中还有citation就快上万的教授的paper，不想点名，因为这是体制的问题，就lantern没问题）都自称对自动求导做出了创新，但是其实90年代的啥ADIFOR ADIC就已经覆盖了所有的所谓创新（其中还有这些新work由于缺乏自动求导常识做的负优化）。如果这些人肯耐着性子去看几十年前的自动求导书，从头翻到尾，也不至于闹这种笑话。&lt;/p&gt;&lt;p&gt;PS：我本来觉得这些道理本科生也都懂的，但是认识了好几个不好好打基础去学新潮东西的高中生，写上来希望对这种人有帮助。&lt;/p&gt;</description>
<author>圆角骑士魔理沙</author>
<guid isPermaLink="false">2019-10-01-84927997</guid>
<pubDate>Tue, 01 Oct 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
