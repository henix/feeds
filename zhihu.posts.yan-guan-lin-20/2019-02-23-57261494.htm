<div class="title-image"><img src="https://pic3.zhimg.com/v2-ed6371b2843d60a77ffc90f05bc02fad_r.jpg" alt=""></div><p><b>本系列依旧秉承着完美避开一切有关波动率“预测”，“交易策略”，”期权策略“等一切和量化交易有关的”比较入行“的内容的原则。不感兴趣的知有可以继续右上角了。</b></p><p><b>前言:</b></p><p>黑猫很无聊于是去随便瞎xx搞了个网课,里面介绍了一种启发式的针对纯黑箱无目标函数的优化方法:粒子群优化法(PSO)</p><p>方法的启发有些玄学:</p><p><i>Each particle's movement is influenced by its local best known position, but is also guided toward the best known positions in the search-space, which are updated as better positions are found by other particles. This is expected to move the swarm toward the best solutions.  </i></p><p><i>PSO is originally attributed to</i><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/James_Kennedy_%28social_psychologist%29" class=" wrap external" target="_blank" rel="nofollow noreferrer">Kennedy</a><i>,</i><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Russell_C._Eberhart" class=" wrap external" target="_blank" rel="nofollow noreferrer">Eberhart</a><i>and Shi</i><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Particle_swarm_optimization%23cite_note-kennedy95particle-2" class=" wrap external" target="_blank" rel="nofollow noreferrer">[2]</a><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Particle_swarm_optimization%23cite_note-shi98modified-3" class=" wrap external" target="_blank" rel="nofollow noreferrer">[3]</a><i>and was first intended for</i><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Computer_simulation" class=" wrap external" target="_blank" rel="nofollow noreferrer">simulating</a><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Social_behaviour" class=" wrap external" target="_blank" rel="nofollow noreferrer">social behaviour</a><i>,</i><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Particle_swarm_optimization%23cite_note-kennedy97particle-4" class=" wrap external" target="_blank" rel="nofollow noreferrer">[4]</a><i>as a stylized representation of the movement of organisms in a bird</i><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Flocking_%28behavior%29" class=" wrap external" target="_blank" rel="nofollow noreferrer">flock</a><i> or </i><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Fish_school" class=" wrap external" target="_blank" rel="nofollow noreferrer">fish school</a><i>.   --</i>from wiki</p><p>方法模拟了一群一开始位置随机,有着一个不一定存在的初始个人目标和群体目标的一群粒子(咸鱼, 鸟群...) 不断朝着群体目标修正个人目标的历史进程(误). 方法利用了每一步随机搜索方向来扩大搜索面积从而找到全局最小值.</p><p><br></p><p><b>算法:</b></p><p>假设在给定的搜索范围内,有k只咸鱼想去地图上最深的地方,他们随机的散落在地图(搜索空间)里,坐标用:</p><p><img src="https://www.zhihu.com/equation?tex=P%28a_i%5Et%2Cb_i%5Et%2Cc_i%5Et%2Cd_i%5Et%2C+...%29" alt="P(a_i^t,b_i^t,c_i^t,d_i^t, ...)" eeimg="1"> </p><p>其中t表示时间(迭代步数),i表示咸鱼的index.</p><p>这些咸鱼们有那么一些地图上他们想去的地方和其对应的目标值(因为大家都是咸鱼,所以这些想去的地方跟最深没啥关系，但是大家总是会选出<b>相对低</b>的地方):</p><p><img src="https://www.zhihu.com/equation?tex=Best%28a_i%5Et%2Cb_i%5Ed%2Cc_i%5Et%2Cd_i%5Et...%29%EF%BC%8C+Best%28a_i%5Et%2Cb_i%5Ed%2Cc_i%5Et%2Cd_i%5Et...%29_O" alt="Best(a_i^t,b_i^d,c_i^t,d_i^t...)， Best(a_i^t,b_i^d,c_i^t,d_i^t...)_O" eeimg="1"> </p><p>咸鱼群们是民主的,所以每时刻都会充分根据每一条鱼的意见得出一个（或者多个）群体最想去的地方和其对应的目标值（也是<b>相对低</b>):</p><p><img src="https://www.zhihu.com/equation?tex=Global%28a%5Et%2Cb%5Et%2Cc%5Et%2Cd%5Et%29%EF%BC%8C+Global%28a%5Et%2Cb%5Et%2Cc%5Et%2Cd%5Et%29_O+" alt="Global(a^t,b^t,c^t,d^t)， Global(a^t,b^t,c^t,d^t)_O " eeimg="1"> </p><p>群体目标虽然会根据每一条鱼的目标更新，但是只会有一个。咸鱼们希望经过多轮探索后，这个全局目标会变成最深的地方（这也是这个启发式优化的原理）。</p><p>算法的过程如下，在给定目标函数f之后。 不同咸鱼们以不同的位置被随机洒向海内，然后对于任意一只咸鱼，如果他所处位置目标函数比他的“最佳地点”的目标函数值要小，<b>则更新他的“最佳地点”坐标</b>。 同时每一只限于的当前目标函数都可以跟群体目标的函数值标并<b>更新群体目标。</b></p><p> if <img src="https://www.zhihu.com/equation?tex=f%28P%28a_i%5E%7Bt%2B1%7D%2Cb_i%5E%7Bt%2B1%7D%2Cc_i%5E%7Bt%2B1%7D%2Cd_i%5E%7Bt%2B1%7D%2C+...%29%29+%3CBest%28a_i%5Et%2Cb_i%5Ed%2Cc_i%5Et%2Cd_i%5Et...%29_O++" alt="f(P(a_i^{t+1},b_i^{t+1},c_i^{t+1},d_i^{t+1}, ...)) <Best(a_i^t,b_i^d,c_i^t,d_i^t...)_O  " eeimg="1"> </p><p>then <img src="https://www.zhihu.com/equation?tex=Best%28a_i%5E%7Bt%2B1%7D%2Cb_i%5E%7Bt%2B1%7D%2Cc_i%5E%7Bt%2B1%7D%2Cd_i%5E%7Bt%2B1%7D%2C+...%29_O+%3D+f%28P%28a_i%5E%7Bt%2B1%7D%2Cb_i%5E%7Bt%2B1%7D%2Cc_i%5E%7Bt%2B1%7D%2Cd_i%5E%7Bt%2B1%7D%2C+...%29%29%5C%5C+Best%28a_i%5E%7Bt%2B1%7D%2Cb_i%5E%7Bt%2B1%7D%2Cc_i%5E%7Bt%2B1%7D%2Cd_i%5E%7Bt%2B1%7D%2C+...%29+%3DP%28a_i%5E%7Bt%2B1%7D%2Cb_i%5E%7Bt%2B1%7D%2Cc_i%5E%7Bt%2B1%7D%2Cd_i%5E%7Bt%2B1%7D%2C+...%29" alt="Best(a_i^{t+1},b_i^{t+1},c_i^{t+1},d_i^{t+1}, ...)_O = f(P(a_i^{t+1},b_i^{t+1},c_i^{t+1},d_i^{t+1}, ...))\\ Best(a_i^{t+1},b_i^{t+1},c_i^{t+1},d_i^{t+1}, ...) =P(a_i^{t+1},b_i^{t+1},c_i^{t+1},d_i^{t+1}, ...)" eeimg="1"> </p><p>群体目标更新法则同理</p><p>在更新后，咸鱼群开始游动改变坐标，<b>并更新速度（</b>注意速度是个向量<b>）</b>。更新速度时，以每一条咸鱼的上一个个体目标和群体目标为权重更新，这样做会使得每条咸鱼的新速度，会同时朝着个体和群体目标改变：</p><p><img src="https://www.zhihu.com/equation?tex=P%28a_i%5E%7Bt%2B1%7D%2Cb_i%5E%7Bt%2B1%7D%2Cc_i%5E%7Bt%2B1%7D%2Cd_i%5E%7Bt%2B1%7D%2C+...%29+%3D+P%28a_i%5Et%2Cb_i%5Et%2Cc_i%5Et%2Cd_i%5Et%2C+...%29+%2B+V%28a_i%5E%7Bt%2B1%7D%2Cb_i%5E%7Bt%2B1%7D%2Cc_i%5E%7Bt%2B1%7D%2Cd_i%5E%7Bt%2B1%7D%2C+...%29" alt="P(a_i^{t+1},b_i^{t+1},c_i^{t+1},d_i^{t+1}, ...) = P(a_i^t,b_i^t,c_i^t,d_i^t, ...) + V(a_i^{t+1},b_i^{t+1},c_i^{t+1},d_i^{t+1}, ...)" eeimg="1"> </p><p><img src="https://www.zhihu.com/equation?tex=V%28a_i%5E%7Bt%2B1%7D%2Cb_i%5E%7Bt%2B1%7D%2Cc_i%5E%7Bt%2B1%7D%2Cd_i%5E%7Bt%2B1%7D%2C+...%29+%3D+wV%28a_i%5Et%2Cb_i%5Et%2Cc_i%5Et%2Cd_i%5Et%2C+...%29+%2B+%5Cphi_1U_1%28Best%28a_i%5Et%2Cb_i%5Ed%2Cc_i%5Et%2Cd_i%5Et...%29+-+P%28a_i%5Et%2Cb_i%5Et%2Cc_i%5Et%2Cd_i%5Et%2C+...%29%29%5C%5C+%2B%5Cphi_2U_2%28Global%28a_i%5Et%2Cb_i%5Ed%2Cc_i%5Et%2Cd_i%5Et...%29+-+P%28a_i%5Et%2Cb_i%5Et%2Cc_i%5Et%2Cd_i%5Et%2C+...%29%29" alt="V(a_i^{t+1},b_i^{t+1},c_i^{t+1},d_i^{t+1}, ...) = wV(a_i^t,b_i^t,c_i^t,d_i^t, ...) + \phi_1U_1(Best(a_i^t,b_i^d,c_i^t,d_i^t...) - P(a_i^t,b_i^t,c_i^t,d_i^t, ...))\\ +\phi_2U_2(Global(a_i^t,b_i^d,c_i^t,d_i^t...) - P(a_i^t,b_i^t,c_i^t,d_i^t, ...))" eeimg="1"> </p><p>(由于速度是个矢量，也有同样的坐标个数，因此猫不厌其烦的对每一个变量都附上了坐标，也就是变量）</p><p>其中\phi1 和 \phi2为个体和群体速度的权重，可以大于1（因为下一步的速度不一定比上一步的小），U_1和U_2是为了增加咸鱼搜索面积的随机变量，可以是单维也可以是多维（多维随机变量会使得搜索的面积更大，但是收敛速度更低）。</p><p>因为第一步的时候咸鱼群没有移动，所以初始速度可以为0。</p><p>多个咸鱼（粒子）可以视为多值开始优化。但是由于每次更新的速度随机加上方向各异，即使有一只咸鱼陷入了局部最优，因为和其他咸鱼的位置不一样（各异的初始位置和随机速度会使得咸鱼们陷入同一个局部最优的概率非常低）</p><p>个体和群体的速度更新权重都不宜过低：</p><p>个体速度权重过低会导致咸鱼群过快地向群体目标移动（在群体目标收敛到全局最优前），这会容易导致大量闲鱼群陷入某个局部最优（甚至不是局部最优）</p><p>群体权重过低会导致每个咸鱼会快速的收敛到局部最优而“缺乏外界沟通”，难以逃出。</p><p><br></p><p><b>效果：</b></p><div class="highlight"><pre><code class="language-python3"><span></span><span class="c1">#Girewank</span>
<span class="n">ObjectiveFunc2</span> <span class="o"><-</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">){</span>
  <span class="n">cumsumiter</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">cumproiter</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="nb">iter</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">){</span>
    <span class="n">cumsumiter</span> <span class="o">=</span> <span class="n">cumsumiter</span> <span class="o">+</span>  <span class="n">i</span><span class="o">^</span><span class="mi">2</span><span class="o">/</span><span class="mi">400</span> 
    <span class="n">cumproiter</span> <span class="o">=</span> <span class="n">cumproiter</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">i</span><span class="o">/</span><span class="n">sqrt</span><span class="p">(</span><span class="nb">iter</span><span class="p">))</span>
    <span class="nb">iter</span> <span class="o">=</span> <span class="nb">iter</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="p">}</span>
  
  <span class="k">return</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">cumsumiter</span> <span class="o">-</span> <span class="n">cumproiter</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">#def detail</span>
<span class="n">nVar</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">upperb</span> <span class="o">=</span> <span class="mi">10</span><span class="o">*</span><span class="n">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
<span class="n">lowerb</span> <span class="o">=</span> <span class="mi">10</span><span class="o">*</span><span class="n">array</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>

<span class="c1">#PSO param </span>
<span class="n">nPartical</span> <span class="o">=</span> <span class="mi">30</span>
<span class="n">maxIter</span> <span class="o">=</span> <span class="mi">500</span>
<span class="c1">#inital weight range</span>
<span class="n">wMax</span> <span class="o">=</span> <span class="mf">0.9</span>
<span class="n">wMin</span> <span class="o">=</span> <span class="mf">0.2</span> 
<span class="c1"># personal and public component</span>
<span class="n">c1</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">c2</span> <span class="o">=</span> <span class="mi">2</span>
<span class="c1">#veolocity range</span>
<span class="n">vMax</span> <span class="o">=</span>  <span class="p">(</span><span class="n">upperb</span> <span class="o">-</span> <span class="n">lowerb</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span>
<span class="n">vMin</span> <span class="o">=</span> <span class="o">-</span><span class="n">vMax</span>

<span class="c1">#the PSO algo ------------------</span>
<span class="c1">#initialize particles</span>
<span class="c1">#position #veolocity #objective #personal best direction(position objective)</span>

<span class="c1">#initializing</span>
<span class="c1">#一群想游到原点，但没有目标的咸鱼</span>
<span class="n">GlobalPosition</span> <span class="o">=</span> <span class="n">rep</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">nVar</span><span class="p">)</span> <span class="c1">#global start at 0</span>
<span class="n">GlobalObjective</span> <span class="o">=</span> <span class="n">Inf</span> <span class="c1">#global objective as Inf</span>

<span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="n">SwamParticles</span><span class="o">.</span><span class="n">PersonalPostion</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="n">SwamParticles</span><span class="o">.</span><span class="n">PersonalObjective</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>


<span class="k">for</span><span class="p">(</span><span class="n">k</span> <span class="ow">in</span> <span class="mi">1</span><span class="p">:</span> <span class="n">nPartical</span><span class="p">){</span>
  <span class="n">Position</span> <span class="o">=</span> <span class="p">(</span><span class="n">upperb</span> <span class="o">-</span> <span class="n">lowerb</span><span class="p">)</span><span class="o">*</span><span class="n">runif</span><span class="p">(</span><span class="n">nVar</span><span class="p">)</span> <span class="o">+</span> <span class="n">lowerb</span> <span class="c1">#random position </span>
  <span class="n">Veolocity</span> <span class="o">=</span> <span class="n">rep</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">nVar</span><span class="p">)</span> <span class="c1">#0 starting veolocity</span>
  
  <span class="c1">#一条咸鱼， 想游到原点，没有目标。。。。</span>
  <span class="n">PersonalPostion</span> <span class="o">=</span> <span class="n">rep</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">nVar</span><span class="p">)</span> <span class="c1">#start personal position at 0</span>
  <span class="n">PersonalObjective</span> <span class="o">=</span> <span class="n">Inf</span> <span class="c1">#personal objective as Inf, a not defineded position </span>
  
  <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o"><-</span> <span class="n">Position</span>
  <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o"><-</span>  <span class="n">Veolocity</span>
  <span class="n">SwamParticles</span><span class="o">.</span><span class="n">PersonalPostion</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o"><-</span>  <span class="n">PersonalPostion</span>
  <span class="n">SwamParticles</span><span class="o">.</span><span class="n">PersonalObjective</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o"><-</span> <span class="n">PersonalObjective</span> 
<span class="p">}</span>

<span class="c1">#main algo</span>
<span class="n">SwamParticles</span><span class="o">.</span><span class="n">Objective</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="n">covergencyplot</span> <span class="o">=</span> <span class="n">vector</span><span class="p">()</span>
<span class="n">itersteps</span> <span class="o">=</span> <span class="n">vector</span><span class="p">()</span>

<span class="k">for</span><span class="p">(</span><span class="n">t</span> <span class="ow">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">maxIter</span><span class="p">){</span> 
  <span class="c1">#t for step </span>
  
  <span class="k">for</span><span class="p">(</span><span class="n">k</span> <span class="ow">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">nPartical</span><span class="p">){</span>
    <span class="c1">#update current position</span>
    <span class="n">CurrentPosition</span> <span class="o">=</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span>
    <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Objective</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">=</span> <span class="n">ObjectiveFunc2</span><span class="p">(</span><span class="n">CurrentPosition</span><span class="p">)</span>

    
    <span class="c1">#update personal details</span>
    <span class="k">if</span><span class="p">(</span><span class="n">SwamParticles</span><span class="o">.</span><span class="n">Objective</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span>  <span class="o"><</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">PersonalObjective</span><span class="p">[[</span><span class="n">k</span><span class="p">]]){</span>
      <span class="n">SwamParticles</span><span class="o">.</span><span class="n">PersonalPostion</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">=</span> <span class="n">CurrentPosition</span>
      <span class="n">SwamParticles</span><span class="o">.</span><span class="n">PersonalObjective</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">=</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Objective</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span>
    <span class="p">}</span>
    
    <span class="c1">#update global details</span>
    <span class="k">if</span><span class="p">(</span><span class="n">SwamParticles</span><span class="o">.</span><span class="n">Objective</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span>  <span class="o"><</span> <span class="n">GlobalObjective</span><span class="p">){</span>
      <span class="n">GlobalPosition</span> <span class="o">=</span>  <span class="n">CurrentPosition</span>
      <span class="n">GlobalObjective</span> <span class="o">=</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Objective</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span>
    <span class="p">}</span>
    
    <span class="c1">#update postion and velecoity</span>
    <span class="n">w</span> <span class="o">=</span> <span class="n">wMax</span> <span class="o">-</span> <span class="n">t</span> <span class="o">*</span><span class="p">(</span><span class="n">wMax</span> <span class="o">-</span> <span class="n">wMin</span><span class="p">)</span><span class="o">/</span><span class="n">maxIter</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">k</span> <span class="ow">in</span> <span class="mi">1</span><span class="p">:</span><span class="n">nPartical</span><span class="p">){</span>
      <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">=</span> <span class="n">w</span> <span class="o">*</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">+</span> 
        <span class="c1">#personal update</span>
        <span class="n">c1</span><span class="o">*</span><span class="n">runif</span><span class="p">(</span><span class="n">nVar</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">SwamParticles</span><span class="o">.</span><span class="n">PersonalPostion</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">-</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]])</span> <span class="o">+</span>
        <span class="c1">#global update</span>
        <span class="n">c2</span><span class="o">*</span><span class="n">runif</span><span class="p">(</span><span class="n">nVar</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">GlobalPosition</span> <span class="o">-</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]])</span>
      
      <span class="c1">#speed limit 司机不能超速了</span>
      <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span><span class="p">[[</span><span class="n">k</span><span class="p">]][</span><span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o"><</span> <span class="n">vMin</span><span class="p">]</span> <span class="o">=</span> <span class="n">vMin</span>
      <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span><span class="p">[[</span><span class="n">k</span><span class="p">]][</span><span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">></span> <span class="n">vMax</span><span class="p">]</span> <span class="o">=</span> <span class="n">vMax</span>
      
      <span class="c1">#boundary check</span>
      <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]][</span><span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">></span> <span class="n">upperb</span><span class="p">]</span> <span class="o">=</span> <span class="n">upperb</span>
      <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]][</span><span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o"><</span> <span class="n">lowerb</span><span class="p">]</span> <span class="o">=</span> <span class="n">lowerb</span>
      
      
      <span class="c1">#position update, each partical move</span>
      <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">=</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Position</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span> <span class="o">+</span> <span class="n">SwamParticles</span><span class="o">.</span><span class="n">Veolocity</span><span class="p">[[</span><span class="n">k</span><span class="p">]]</span>
    <span class="p">}</span>
    
  <span class="p">}</span>
  
  <span class="nb">print</span><span class="p">(</span><span class="s2">"Iteration:"</span><span class="p">)</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
  <span class="nb">print</span><span class="p">(</span><span class="s2">"globalObjective = "</span><span class="p">)</span>
  <span class="nb">print</span><span class="p">(</span><span class="n">GlobalObjective</span><span class="p">)</span>
  <span class="n">covergencyplot</span> <span class="o"><-</span> <span class="n">c</span><span class="p">(</span><span class="n">covergencyplot</span><span class="p">,</span> <span class="n">GlobalObjective</span><span class="p">)</span>
  <span class="n">itersteps</span> <span class="o"><-</span> <span class="n">c</span><span class="p">(</span><span class="n">itersteps</span> <span class="p">,</span> <span class="n">t</span><span class="p">)</span>
<span class="p">}</span>

<span class="n">plot</span><span class="p">(</span><span class="n">itersteps</span><span class="p">,</span> <span class="n">log</span><span class="p">(</span><span class="n">covergencyplot</span><span class="p">))</span>
<span class="n">GlobalObjective</span>
</code></pre></div><p><br></p><p>目标函数选取了臭名昭著的无穷local min 但是有明确全局最优原点的Girewank</p><p>可以看到，在初始算法之外，增加量咸鱼限速的和防止出边界的判断。超速和撞边都会使得收敛速度变慢.</p><p>限速前：</p><figure><noscript><img src="https://pic1.zhimg.com/v2-eab3557c1efca658199c3fd1796764f8_b.jpg" data-size="normal" data-rawwidth="462" data-rawheight="719" class="origin_image zh-lightbox-thumb" width="462" data-original="https://pic1.zhimg.com/v2-eab3557c1efca658199c3fd1796764f8_r.jpg"></noscript><img src="https://pic1.zhimg.com/v2-eab3557c1efca658199c3fd1796764f8_b.jpg" data-size="normal" data-rawwidth="462" data-rawheight="719" class="origin_image zh-lightbox-thumb lazy" width="462" data-original="https://pic1.zhimg.com/v2-eab3557c1efca658199c3fd1796764f8_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-eab3557c1efca658199c3fd1796764f8_b.jpg"><figcaption>全局目标：0 对应解： [1] -3.769498e-09 -2.429174e-09 -1.349293e-09 [4] -1.241532e-07 -4.952926e-09  1.251139e-09 [7] -2.243184e-08 -2.757501e-08 -3.018247e-08[10] -3.099296e-08 </figcaption></figure><p><br></p><p>（由于最后咸鱼群会找到共同目标而聚在一起，所以所有咸鱼的最终位置高度近似，因此可以选任意一组的位置作为最终解的对应坐标</p><p><br></p><p>限速后：</p><figure><noscript><img src="https://pic2.zhimg.com/v2-4d98ab6d2ee933d74f983c5c3fbee6c9_b.jpg" data-size="normal" data-rawwidth="462" data-rawheight="719" class="origin_image zh-lightbox-thumb" width="462" data-original="https://pic2.zhimg.com/v2-4d98ab6d2ee933d74f983c5c3fbee6c9_r.jpg"></noscript><img src="https://pic2.zhimg.com/v2-4d98ab6d2ee933d74f983c5c3fbee6c9_b.jpg" data-size="normal" data-rawwidth="462" data-rawheight="719" class="origin_image zh-lightbox-thumb lazy" width="462" data-original="https://pic2.zhimg.com/v2-4d98ab6d2ee933d74f983c5c3fbee6c9_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-4d98ab6d2ee933d74f983c5c3fbee6c9_b.jpg"><figcaption>全局目标： 0 对应解： [1]  9.188740e-09  4.627266e-08  3.170781e-09 [4]  4.793561e-09 -1.763600e-08  1.199305e-08 [7]  1.788095e-08 -1.650197e-08 -2.424048e-08[10]  2.963797e-08</figcaption></figure><p><br></p><p>logplot是为了观察在小数量级的收敛速度，限速对于小数量级的收敛速度没有什么差别</p><p>可以看到限速前， 群体值几乎是在200步以后瞬间收敛的，说面咸鱼群在boundary里做了一些漫无目的随机游走。限速后在大数量级的收敛速度显著提升，并且解显然靠谱了。</p><p>本文为了确保收敛，把初始的个人位置和群体位置都设成了原点。还没来得及时测试各种不同初值的效果，以后有空补上。</p><p><br></p><p><b>后记（私货）：</b></p><p>最开始看到PSO这种启发式优化法的时候，猫的反感程度甚至一度超过了看到神经网络时的量级，毕竟把：”<i>在寻求一致的认知过程中，个体往往记住自身的信念，并同时考虑同事们的信念。当其察觉同事的信念较好的时候，将进行适应性地调整。</i>"这种玄学作为原理的优化法怎么看都有点扯淡。</p><p><b>这里有一个反思</b>：翻阅了一些文献，看到这类算法的应用场景的时候也就不那么反感了。这是一个针对纯黑箱函数的优化（比如脑CT成像的误差函数，真纯黑箱），这类函数连梯度存不存在都不知道，甚至无法知道这个函数是不是凸的。对付这种问题，数学上的优化基本上是抓瞎了，连目标函数长什么样都不知道。 </p><p>况且这个算法虽然玄学，但是他的收敛速度是可以证明的，详见：</p><a href="http://link.zhihu.com/?target=https%3A//pdfs.semanticscholar.org/4bba/0752b8ec81b0e3b58849adb03f4e71aa2f24.pdf" data-draft-node="block" data-draft-type="link-card" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">pdfs.semanticscholar.org</span><span class="invisible">/4bba/0752b8ec81b0e3b58849adb03f4e71aa2f24.pdf</span><span class="ellipsis"></span></a><p><br></p><p><b>但是还有一个反反思：</b>纯黑箱问题虽然也许只能用玄学的启发式方法去优化，但是这是优化层面的问题。 <b>这不代表我们非要把一些能做白箱处理，可以找到一些有意义的度量的问题强行变成黑箱问题然后用玄学去做。 </b>这也是为什么黑猫即使接受了这种启发是优化法也无法接受在一些金融问题上强行使用深度学习的原因，<b>因为金融问题恰恰是最需要有意义的度量的问题。放着有意义的度量不去研究，而把研究强行转化为半黑箱的神经网络，即使有很好的效果仍旧是不可接受的。</b></p>