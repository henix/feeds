<div class="title-image"><img src="https://pic2.zhimg.com/v2-4e37ba0ae005e61b81940845b835f14f_b.jpg" alt=""></div><p></p><a href="https://zhuanlan.zhihu.com/p/47761108" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-9588129d54beb9d0453920510a3318e4_180x120.jpg" data-image-width="1280" data-image-height="720" class="internal">Fitz Hoo：Data Visualization With Bokeh : Part I</a><a href="https://zhuanlan.zhihu.com/p/50995405" data-draft-node="block" data-draft-type="link-card" data-image="https://pic2.zhimg.com/v2-52ee3b8a2c9854fd32466a249d9032ed_180x120.jpg" data-image-width="960" data-image-height="500" class="internal">Fitz Hoo：Data Visualization With Bokeh: Part II</a><a class="video-box" href="http://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1068466769261481984" target="_blank" data-video-id="" data-video-playable="true" data-name="Sina Real Time Streaming Data" data-poster="https://pic4.zhimg.com/v2-94906f1a399fb482e06b3072fdac163f_b.jpg" data-lens-id="1068466769261481984">              <img class="thumbnail" src="https://pic4.zhimg.com/v2-94906f1a399fb482e06b3072fdac163f_b.jpg">              <span class="content">                <span class="title">Sina Real Time Streaming Data<span class="z-ico-extern-gray"></span><span class="z-ico-extern-blue"></span></span>                <span class="url"><span class="z-ico-video"></span>https://www.zhihu.com/video/1068466769261481984</span>              </span>            </a>            <p>在<a href="https://zhuanlan.zhihu.com/p/47761108" class="internal">Part I</a>和 <a href="https://zhuanlan.zhihu.com/p/50995405" class="internal">Part II</a> 部分，我们分别介绍了Bokeh数据交互的常用工具（HoverTools &amp; Widgets）和Bokeh App的框架搭建技巧（Data, Plotting, Update, Layouts）。在本部分我们将会讨论如何利用Bokeh生成动态图，这也是本系列的最后一篇。</p><p>利用Bokeh构建动态图与静态图并没有本质的区别，最大的差别来自于数据的更新方式。在静态图中，数据更新通过<b>source.data.update(new_data)</b>实现，而在动态图中则依赖于<b>source.stream(new_data</b><i>)。</i>二者的主要区别在于前者是对原始数据的替换，后者则是对原始数据进行拼接。同时，动态图会多依赖一个定期回调的函数<b>add_periodic_callback </b>。</p><p>为了方便，在调用新浪实时数据接口前，我们首先通过虚构指数价格变化数据来生成指数走势图。为了更真实的模拟指数走势，我们假设其服从几何布朗运动（Geometric Brownian Motion）。这里简单介绍一下GBM（以下内容来自wikipedia）：</p><p>几何布朗运动（GBM）是连续时间情况下的随机过程（Stochastic Process），其中随机变量的对数遵循布朗运动，也称维纳过程（Winner Process）。若某个随机变量 <img src="https://www.zhihu.com/equation?tex=S_%7Bt%7D" alt="S_{t}" eeimg="1"> 满足以下随机微分方程，则认为其遵循几何布朗运动，其中 <img src="https://www.zhihu.com/equation?tex=%5Cmu" alt="\mu" eeimg="1"> 是漂移项， <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="\sigma" eeimg="1"> 是波动率大小， <img src="https://www.zhihu.com/equation?tex=W_%7Bt%7D" alt="W_{t}" eeimg="1"> 是一个维纳过程。 </p><p><img src="https://www.zhihu.com/equation?tex=dS_%7Bt%7D+%3D+%5Cmu+S_%7Bt%7Ddt+%2B+%5Csigma+S_%7Bt%7DW_%7Bt%7D" alt="dS_{t} = \mu S_{t}dt + \sigma S_{t}W_{t}" eeimg="1"> </p><p>给定初始值 <img src="https://www.zhihu.com/equation?tex=S_%7B0%7D" alt="S_{0}" eeimg="1"> ，根据伊藤积分，可以得到：</p><p><img src="https://www.zhihu.com/equation?tex=S_%7Bt%7D+%3D+S_%7B0%7Dexp%28%28%5Cmu+-+%5Csigma%5E2%2F2%29t+%2B+%5Csigma+W_%7Bt%7D%29" alt="S_{t} = S_{0}exp((\mu - \sigma^2/2)t + \sigma W_{t})" eeimg="1"> </p><p>基于过去一年（2018.01.01~2018.12.31）沪深300指数的收益情况，我们求解得到漂移项 <img src="https://www.zhihu.com/equation?tex=%5Cmu+%3D+-0.001109+" alt="\mu = -0.001109 " eeimg="1"> 和扩散项 <img src="https://www.zhihu.com/equation?tex=%5Csigma+%3D+0.013496" alt="\sigma = 0.013496" eeimg="1"> ，并据此生成一条沪深300指数未来可能的路径。</p><div class="highlight"><pre><code class="language-python3"><span></span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">1008</span><span class="p">)</span>

<span class="n">S</span> <span class="o">=</span> <span class="mf">3010.6536</span>        <span class="c1"># 初始价</span>
<span class="n">r</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.001109</span>        <span class="c1"># 漂移项</span>
<span class="n">sigma</span> <span class="o">=</span> <span class="mf">0.013496</span>     <span class="c1"># 扩散项</span>
<span class="n">T</span> <span class="o">=</span> <span class="mi">1</span>                <span class="c1"># 年数</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">252</span>              

<span class="k">def</span> <span class="nf">bsm_func</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">S0</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">sigma</span>
    <span class="n">dt</span> <span class="o">=</span> <span class="n">T</span> <span class="o">/</span> <span class="n">n</span>
    <span class="n">S</span> <span class="o">=</span> <span class="n">S</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">((</span><span class="n">r</span> <span class="o">-</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">sigma</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="n">dt</span> <span class="o">+</span> <span class="n">sigma</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">standard_normal</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">S</span>
</code></pre></div><a class="video-box" href="http://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1068950828819386368" target="_blank" data-video-id="" data-video-playable="true" data-name="Geometric Brownian Motion" data-poster="https://pic4.zhimg.com/80/v2-3f432dc571c2fba3eecffd70390b005f_b.jpg" data-lens-id="1068950828819386368">              <img class="thumbnail" src="https://pic4.zhimg.com/80/v2-3f432dc571c2fba3eecffd70390b005f_b.jpg">              <span class="content">                <span class="title">Geometric Brownian Motion<span class="z-ico-extern-gray"></span><span class="z-ico-extern-blue"></span></span>                <span class="url"><span class="z-ico-video"></span>https://www.zhihu.com/video/1068950828819386368</span>              </span>            </a>            <p>根据Part II部分的内容，为了保持数据更新，我们需要构建回调函数（Callback）。注意，数据的更新方式（替换或者拼接）并不影响回调函数的使用。在回调函数中，我们根据几何布朗运动来更新未来指数的走势。</p><div class="highlight"><pre><code class="language-text"><span></span>from bokeh.models import ColumnDataSource, HoverTool
from bokeh.plotting import curdoc, figure
from bokeh.driver import count

TOOLS = 'xpan, xwheel_zoom, xbox_zoom, reset'

source = ColumnDataSource(dict(time=[], close=[]))

hover = HoverTool(tooltips=[
    ("time", "@time"),  
    ('close', '@close{6.2f}')
])

p = figure(plot_width=1000, plot_height=450, tools=TOOLS)
p.line(x='time', y='close', color='gray', source=source)
p.add_tools(hover)

@count()
def update(time):
    S = bsm_func()
    new_data = dict(time=[time], close=[S])
    source.stream(new_data, rollover=None)  # rollover控制列的大小

curdoc().add_root(p)
curdoc().add_periodic_callback(update, 1000)  # 更新频率，这里是以毫秒为单位
</code></pre></div><p>在以上的回调函数中，我们通过调用<b>source.stream(new_data, rollover=None)</b>来对原始数据进行拼接，其中的rollover用来控制拼接数据的长度，默认为None，表示一直拼接下去，若设置为固定数字，比如100，则拼接转成滚动拼接（rolling append），第101个数据会挤掉第1个数据，以此类推，数据的长度始终保持为100。</p><p>同时，区别于静态图，动态图多了一条命令，<b>curdoc().add_periodic_callback(update, period_milliseconds</b>)。其表示回调函数的定期更新，参数period_milliseconds则表示更新的频率，默认是以毫秒为单位，若想转变为一秒更新一次，则需设置参数值为1000。</p><p>细心的读者可能会发现，在回调函数部分，我们使用了装饰器（decorator）count，其来自于模块bokeh.driver。bokeh.driver提供了一系列装饰器，用于在每次调用函数时以指定方式重复更新函数参数，这样不仅能优化代码结构，还能使代码看上去更专业。简言之，这些装饰器在Bokeh服务器应用程序中与周期性回调结合使用时非常有用。</p><p>行文至此，实时更新数据的动态图的基本要素已经陈述完毕，后面的工作则是根据项目或实际需要，不断去丰富、完善图形界面展示。为了学以致用，接下来我们尝试将所理解的内容应用到实际需求的环境中。</p><p>区别于虚拟数据，我们更关注市场中真实交易产生的数据。为此，我们尝试调用新浪实时数据接口来完成图形绘制。在编写程序前，我们需要明白新浪数据接口的数据返回格式。新浪提供的股票数据接口为<a href="http://link.zhihu.com/?target=http%3A//hq.sinajs.cn/list%3Dsz002916" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">hq.sinajs.cn/list=sz002</span><span class="invisible">916</span><span class="ellipsis"></span></a>，其中=后面的ID为查询的股票ID，返回格式是一个字符串，并以逗号分隔，具体如下：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-c168c861ca80998e1d0f52a64b82750a_b.png" data-caption="" data-size="normal" data-rawwidth="2864" data-rawheight="396" class="origin_image zh-lightbox-thumb" width="2864" data-original="https://pic3.zhimg.com/v2-c168c861ca80998e1d0f52a64b82750a_r.jpg"></noscript><img src="https://pic3.zhimg.com/v2-c168c861ca80998e1d0f52a64b82750a_b.png" data-caption="" data-size="normal" data-rawwidth="2864" data-rawheight="396" class="origin_image zh-lightbox-thumb lazy" width="2864" data-original="https://pic3.zhimg.com/v2-c168c861ca80998e1d0f52a64b82750a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-c168c861ca80998e1d0f52a64b82750a_b.png"></figure><p>各数据对应的字段分别是：</p><div class="highlight"><pre><code class="language-text"><span></span>['深南电路',         # 股票名称
 '86.080',          # 开盘价
 '85.190',          # 昨收盘价
 '85.210',          # 当前价
 '87.380',          # 最高价
 '84.220',          # 最低价
 '85.070',          # 买一价
 '85.210',          # 卖一价
 '2953218',         # 成交量（股）
 '253135209.690',   # 成交金额（元）
 '600',             # 买一量
 '85.070',          # 买一价
 '2200',            # 买二量
 '85.050',          # 买二价
 '300',             # 买三量
 '85.030',          # 买三价
 '700',             # 买四量
 '85.020',          # 买四价
 '3100',            # 买五量
 '85.000',          # 买五价
 '1900',            # 卖一量
 '85.210',          # 卖一价
 '1703',            # 卖二量
 '85.230',          # 卖二价
 '800',             # 卖三量
 '85.240',          # 卖三价
 '1200',            # 卖四量
 '85.250',          # 卖四价
 '3400',            # 卖五量
 '85.260',          # 卖五价
 '2019-01-14',      # 日期
 '11:30:00',        # 时间
 '00']              # 状态？
</code></pre></div><p>若要查询指数的信息，例如沪深300指数，则ID需变更为s_sh000300，此时的数据返回格式有些许差异，如下所示：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-7f03f26addd1e09c95baea35b74e4897_b.png" data-caption="" data-size="normal" data-rawwidth="2862" data-rawheight="160" class="origin_image zh-lightbox-thumb" width="2862" data-original="https://pic4.zhimg.com/v2-7f03f26addd1e09c95baea35b74e4897_r.jpg"></noscript><img src="https://pic4.zhimg.com/v2-7f03f26addd1e09c95baea35b74e4897_b.png" data-caption="" data-size="normal" data-rawwidth="2862" data-rawheight="160" class="origin_image zh-lightbox-thumb lazy" width="2862" data-original="https://pic4.zhimg.com/v2-7f03f26addd1e09c95baea35b74e4897_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-7f03f26addd1e09c95baea35b74e4897_b.png"></figure><p>分别表示：指数名称、当前价、涨跌幅度、涨跌比率、成交量（手）、成交金额（万元）</p><p>这里股票数据接口返回的信息更丰富，我们以股票为例来进行说明，画图步骤依然按照Part II部分的四段论来进行。</p><p><b>一、数据提取</b></p><p>数据爬取通过强大的requests来实现。由于新浪数据接口返回的数据格式并不能够拿来直接使用，所以我们需要先通过正则表达式（regular expression）对原始数据进行解析，得到我们想要的形式，其具体返回形式为list，各位置对应的含义见上文股票字段解释。</p><div class="highlight"><pre><code class="language-text"><span></span>import re
import requests
from datetime import datetime

url = "http://hq.sinajs.cn/list={}".format('sz002916')
def get_streaming_data():
    original_data = requests.get(url).text
    data = re.findall(r'"(.*?)"', original_data)[0].split(',')

    symbol = data[0]
    # date = datetime.strptime(data[-3], '%Y-%m-%d').date()
    time = datetime.strptime(data[-2], '%H:%M:%S').time()
    # dt = datetime.combine(date, time)
    open = float(data[1])
    last = float(data[3])
    high = float(data[4])
    low = float(data[5])
    volume = int(float(data[8]) / 100)  # 手
    value = round(float(data[9]) / 10000, 2)  # 万元

    temp = data[10: 30]
    index = ['卖五', '卖四', '卖三', '卖二', '卖一', '买一', '买二', '买三', '买四', '买五']
    _ask_bid_volume = [float(j) for i, j in enumerate(temp) if i % 2 == 0]
    ask_bid_volume = _ask_bid_volume[5:][::-1] + _ask_bid_volume[:5]
    _ask_bid_price = [float(j) for i, j in enumerate(temp) if i % 2 != 0]
    ask_bid_price = _ask_bid_price[5:][::-1] + _ask_bid_price[:5]  # 从卖五到买五

    return symbol, time, open, last, high, low, volume, value, ask_bid_price, ask_bid_volume, index
</code></pre></div><p><b>二、 图形绘制</b></p><p>这里为了显示标的股票的高开低收以及成交的情况，我们添加了一个DataTable，并为其提供了新的source。添加新source主要是因为不同的source数据更新方式不一样，一个替换，一个拼接，从而导致不能共用。</p><div class="highlight"><pre><code class="language-text"><span></span>source = ColumnDataSource(dict(time=[], low=[], high=[], open=[], last=[]))
source_1 = ColumnDataSource(dict(low=[], high=[], open=[], last=[], volume=[], value=[]))
source_2 = ColumnDataSource(dict(ask_bid_price=[], ask_bid_volume=[], index=[]))

fig = figure(x_axis_type='datetime', plot_width=1000, plot_height=500)
fig.line(x="time", y="last", color="navy", line_width=2, source=source)
# fig.background_fill_color = "black"

columns_1 = [TableColumn(field='open', title='开盘价'),
             TableColumn(field='last', title='最新价'),
             TableColumn(field='high', title='最高价'),
             TableColumn(field='low', title='最低价'),
             TableColumn(field='volume', title='成交量(手)'),
             TableColumn(field='value', title='成交金额(万元)')]

columns_2 = [TableColumn(field='index', title='明细'),
             TableColumn(field='ask_bid_price', title='五档委托价'),
             TableColumn(field='ask_bid_volume', title='五档委托量')]

data_table_1 = DataTable(source=source_1, columns=columns_1, width=fig.plot_width, height=50)
data_table_2 = DataTable(source=source_2, columns=columns_2, height=fig.plot_height, width=300)
</code></pre></div><p><b>三、回调更新</b></p><p>回调更新时，我们可以根据自身的需要来设置更新频率，这里设置为0.5秒。一般而言，用户可以根据股票交易的流动性大小来设置更新频率大小，流动性越高，更新频率可以适当越高。</p><div class="highlight"><pre><code class="language-text"><span></span>def update():
    symbol, time, open, last, high, low, volume, value, ask_bid_price, ask_bid_volume, index = get_streaming_data()

    fig.title.text = symbol
    new_data = dict(time=[time], open=[open], last=[last], high=[high], low=[low])
    new_data_1 = dict(open=[open], last=[last], high=[high], low=[low], volume=[volume], value=[value])
    new_data_2 = dict(ask_bid_price=ask_bid_price, ask_bid_volume=ask_bid_volume, index=index)
    source.stream(new_data, rollover=fig.plot_width)
    source_1.data.update(new_data_1)
    source_2.data.update(new_data_2)

curdoc().add_periodic_callback(update, 500)  # 每半秒更新一次
</code></pre></div><p><b>四、位置编排</b></p><p>位置编排根据个人偏好可以有不同的形式，这里简单地参考了同花顺的排版模式。</p><div class="highlight"><pre><code class="language-text"><span></span>layout = column(row(data_table_1, Spacer(height=data_table_1.height, width=data_table_2.width)), row(fig, data_table_2))
curdoc().add_root(layout)
</code></pre></div><p>以上，Bokeh可视化系列的第三节在拖延症的阻碍下总算是有个交代了。至此，Bokeh可视化系列（Part I、Part II、Part III）全部完结。当然，限于本人能力，对Bokeh的介绍仅仅是一些最基本的使用技巧，其更多好玩的功能还需大家自己去挖掘。有任何疑问欢迎大家在评论区讨论。</p><p>代码请戳：</p><a href="http://link.zhihu.com/?target=https%3A//github.com/FitzHoo/DataVisualization" data-draft-node="block" data-draft-type="link-card" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/FitzHoo/Data</span><span class="invisible">Visualization</span><span class="ellipsis"></span></a><p></p>