<p>上篇文章<a href="https://zhuanlan.zhihu.com/p/79704063" class="internal">parker liu：单位半群和单子的自由构造</a>中，给大家介绍了在Haskell中是如何构造出自由单子的。在很多嵌入式系统中是没法使用Haskell的，只有C语言可用，那能否用C语言来构造自由单子呢？</p><p>自由单子主要是分离了接口和具体操作的语义，这样我们可以使用统一的接口（或者叫作用指令 -- effect instruction）来写程序，通过不同的解释器来实现不同的操作语义。对同一个程序，通过提供不同的解释器来动态改变程序执行的行为和作用。就如上面这篇文章中的基于堆栈的简单计算器程序，两个不同的解释器runAlg和showAlg分别实现了求值和打印程序的行为。其中Push、Pop、Top、Add、Mul这些值构造子可以看成是effect instruction，runAlg和showAlg中对值构造子的模式匹配的每一个实现就是effect instruction对应的操作语义实现。</p><p>我们也可以用C语言来实现这种Algebraic Effects，定义effect instruction，实现每一个effect instruction的操作语义。于是我们就用C语言构造出了自由单子。</p><p>我们先来看状态处理的Algebraic Effect，先用Haskell定义状态处理State的行为，如下所示：</p><div class="highlight"><pre><code class="language-haskell"><span class="kr">data</span> <span class="kt">State</span> <span class="nf">s</span> <span class="nf">k</span> <span class="kr">where</span>
  <span class="kt">Get</span> <span class="ow">::</span> <span class="kt">State</span> <span class="nf">s</span> <span class="nf">s</span>
  <span class="kt">Put</span> <span class="ow">::</span> <span class="o">!</span><span class="nf">s</span> <span class="ow">-&gt;</span> <span class="kt">State</span> <span class="nf">s</span> <span class="nb">()</span></code></pre></div><p>这里Get 和Put 是State的effect instruction，从Oleg Kiselyov的论文Freer Monads<sup data-text="Freer Monads: " data-url="http://okmij.org/ftp/Haskell/extensible/more.pdf" data-draft-node="inline" data-draft-type="reference" data-numero="1">[1]</sup>中， 我们可以由State s k得到一个自由单子，称之为effect monad。于是我们就可以在自己的程序中使用Get和Put来实现带状态处理的程序。</p><div class="highlight"><pre><code class="language-haskell"><span class="kr">data</span> <span class="kt">Eff</span> <span class="nf">effs</span> <span class="nf">a</span>
  <span class="ow">=</span> <span class="kt">Val</span> <span class="nf">a</span>
  <span class="c1">-- ^ Pure value (@&#39;return&#39; = &#39;pure&#39; = &#39;Val&#39;@).</span>
  <span class="o">|</span> <span class="nf">forall</span> <span class="nf">b</span><span class="o">.</span> <span class="kt">E</span> <span class="p">(</span><span class="kt">Union</span> <span class="nf">effs</span> <span class="nf">b</span><span class="p">)</span> <span class="p">(</span><span class="kt">Arrs</span> <span class="nf">effs</span> <span class="nf">b</span> <span class="nf">a</span><span class="p">)</span>
  <span class="c1">-- ^ Sending a request of type @Union effs@ with the continuation</span>
  <span class="c1">-- @&#39;Arrs&#39; r b a@.</span>

<span class="kr">instance</span> <span class="kt">Functor</span> <span class="p">(</span><span class="kt">Eff</span> <span class="nf">effs</span><span class="p">)</span> <span class="kr">where</span>
  <span class="nf">fmap</span> <span class="nf">f</span> <span class="p">(</span><span class="kt">Val</span> <span class="nf">x</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Val</span> <span class="p">(</span><span class="nf">f</span> <span class="nf">x</span><span class="p">)</span>
  <span class="nf">fmap</span> <span class="nf">f</span> <span class="p">(</span><span class="kt">E</span> <span class="nf">u</span> <span class="nf">q</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">E</span> <span class="nf">u</span> <span class="p">(</span><span class="nf">q</span> <span class="o">|&gt;</span> <span class="p">(</span><span class="kt">Val</span> <span class="o">.</span> <span class="nf">f</span><span class="p">))</span>
  <span class="cm">{-# INLINE fmap #-}</span>

<span class="kr">instance</span> <span class="kt">Applicative</span> <span class="p">(</span><span class="kt">Eff</span> <span class="nf">effs</span><span class="p">)</span> <span class="kr">where</span>
  <span class="nf">pure</span> <span class="ow">=</span> <span class="kt">Val</span>
  <span class="cm">{-# INLINE pure #-}</span>

  <span class="kt">Val</span> <span class="nf">f</span> <span class="o">&lt;*&gt;</span> <span class="kt">Val</span> <span class="nf">x</span> <span class="ow">=</span> <span class="kt">Val</span> <span class="o">$</span> <span class="nf">f</span> <span class="nf">x</span>
  <span class="kt">Val</span> <span class="nf">f</span> <span class="o">&lt;*&gt;</span> <span class="kt">E</span> <span class="nf">u</span> <span class="nf">q</span> <span class="ow">=</span> <span class="kt">E</span> <span class="nf">u</span> <span class="p">(</span><span class="nf">q</span> <span class="o">|&gt;</span> <span class="p">(</span><span class="kt">Val</span> <span class="o">.</span> <span class="nf">f</span><span class="p">))</span>
  <span class="kt">E</span> <span class="nf">u</span> <span class="nf">q</span> <span class="o">&lt;*&gt;</span> <span class="nf">m</span>     <span class="ow">=</span> <span class="kt">E</span> <span class="nf">u</span> <span class="p">(</span><span class="nf">q</span> <span class="o">|&gt;</span> <span class="p">(`</span><span class="nf">fmap</span><span class="p">`</span> <span class="nf">m</span><span class="p">))</span>
  <span class="cm">{-# INLINE (&lt;*&gt;) #-}</span>

<span class="kr">instance</span> <span class="kt">Monad</span> <span class="p">(</span><span class="kt">Eff</span> <span class="nf">effs</span><span class="p">)</span> <span class="kr">where</span>
  <span class="kt">Val</span> <span class="nf">x</span> <span class="o">&gt;&gt;=</span> <span class="nf">k</span> <span class="ow">=</span> <span class="nf">k</span> <span class="nf">x</span>
  <span class="kt">E</span> <span class="nf">u</span> <span class="nf">q</span> <span class="o">&gt;&gt;=</span> <span class="nf">k</span> <span class="ow">=</span> <span class="kt">E</span> <span class="nf">u</span> <span class="p">(</span><span class="nf">q</span> <span class="o">|&gt;</span> <span class="nf">k</span><span class="p">)</span>
  <span class="cm">{-# INLINE (&gt;&gt;=) #-}</span>

<span class="c1">-- | “Sends” an effect, which should be a value defined as part of an effect</span>
<span class="c1">-- algebra (see the module documentation for &#34;Control.Monad.Freer&#34;), to an</span>
<span class="c1">-- effectful computation. This is used to connect the definition of an effect to</span>
<span class="c1">-- the &#39;Eff&#39; monad so that it can be used and handled.</span>
<span class="nf">send</span> <span class="ow">::</span> <span class="kt">Member</span> <span class="nf">eff</span> <span class="nf">effs</span> <span class="ow">=&gt;</span> <span class="nf">eff</span> <span class="nf">a</span> <span class="ow">-&gt;</span> <span class="kt">Eff</span> <span class="nf">effs</span> <span class="nf">a</span>
<span class="nf">send</span> <span class="nf">t</span> <span class="ow">=</span> <span class="kt">E</span> <span class="p">(</span><span class="nf">inj</span> <span class="nf">t</span><span class="p">)</span> <span class="p">(</span><span class="nf">tsingleton</span> <span class="kt">Val</span><span class="p">)</span>
<span class="cm">{-# INLINE send #-}</span>


<span class="c1">-- | Retrieve the current value of the state of type @s :: *@.</span>
<span class="nf">get</span> <span class="ow">::</span> <span class="nf">forall</span> <span class="nf">s</span> <span class="nf">effs</span><span class="o">.</span> <span class="kt">Member</span> <span class="p">(</span><span class="kt">State</span> <span class="nf">s</span><span class="p">)</span> <span class="nf">effs</span> <span class="ow">=&gt;</span> <span class="kt">Eff</span> <span class="nf">effs</span> <span class="nf">s</span>
<span class="nf">get</span> <span class="ow">=</span> <span class="nf">send</span> <span class="kt">Get</span>

<span class="c1">-- | Set the current state to a specified value of type @s :: *@.</span>
<span class="nf">put</span> <span class="ow">::</span> <span class="nf">forall</span> <span class="nf">s</span> <span class="nf">effs</span><span class="o">.</span> <span class="kt">Member</span> <span class="p">(</span><span class="kt">State</span> <span class="nf">s</span><span class="p">)</span> <span class="nf">effs</span> <span class="ow">=&gt;</span> <span class="nf">s</span> <span class="ow">-&gt;</span> <span class="kt">Eff</span> <span class="nf">effs</span> <span class="nb">()</span>
<span class="nf">put</span> <span class="nf">s</span> <span class="ow">=</span> <span class="nf">send</span> <span class="p">(</span><span class="kt">Put</span> <span class="nf">s</span><span class="p">)</span>

<span class="c1">-- | Handler for &#39;State&#39; effects.</span>
<span class="nf">runState</span> <span class="ow">::</span> <span class="nf">forall</span> <span class="nf">s</span> <span class="nf">effs</span> <span class="nf">a</span><span class="o">.</span> <span class="nf">s</span> <span class="ow">-&gt;</span> <span class="kt">Eff</span> <span class="p">(</span><span class="kt">State</span> <span class="nf">s</span> <span class="sc">&#39;</span><span class="err">: effs) a -&gt; Eff effs (a, s)
</span><span class="err">runState s0 = handleRelayS s0 (</span><span class="se">\</span><span class="err">s x -&gt; pu</span><span class="se">r</span><span class="err">e (x, s)) $ </span><span class="se">\</span><span class="err">s x k -&gt; c</span><span class="se">a</span><span class="err">se x of
</span><span class="err">  Get -&gt; k s s
</span><span class="err">  Put </span><span class="sc">s&#39;</span> <span class="ow">-&gt;</span> <span class="nf">k</span> <span class="nf">s&#39;</span> <span class="nb">()</span>

<span class="c1">-- A count donw example by use State effect</span>
<span class="nf">countDown</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span>
<span class="nf">countDown</span> <span class="nf">start</span> <span class="ow">=</span> <span class="nf">run</span> <span class="p">(</span><span class="nf">runState</span> <span class="nf">start</span> <span class="nf">go</span><span class="p">)</span>
  <span class="kr">where</span> <span class="nf">go</span> <span class="ow">=</span> <span class="nf">get</span> <span class="o">&gt;&gt;=</span> <span class="p">(</span><span class="nf">\n</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="nf">n</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="nf">pure</span> <span class="nf">n</span> <span class="kr">else</span> <span class="nf">put</span> <span class="p">(</span><span class="nf">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="nf">go</span><span class="p">)</span></code></pre></div><p>我们再来看异常错误处理的Algebraic Effect，先用Haskell定义异常错误处理Error的行为。同样的，可以由这个Error e r 得到一个effect Monad，在我们的程序中处理异常错误Error，如下所示：</p><div class="highlight"><pre><code class="language-haskell"><span class="c1">-- | Exceptions of the type @e :: *@ with no resumption.</span>
<span class="kr">newtype</span> <span class="kt">Error</span> <span class="nf">e</span> <span class="nf">r</span> <span class="kr">where</span>
  <span class="kt">Error</span> <span class="ow">::</span> <span class="nf">e</span> <span class="ow">-&gt;</span> <span class="kt">Error</span> <span class="nf">e</span> <span class="nf">r</span>

<span class="c1">-- | Throws an error carrying information of type @e :: *@.</span>
<span class="nf">throwError</span> <span class="ow">::</span> <span class="nf">forall</span> <span class="nf">e</span> <span class="nf">effs</span> <span class="nf">a</span><span class="o">.</span> <span class="kt">Member</span> <span class="p">(</span><span class="kt">Error</span> <span class="nf">e</span><span class="p">)</span> <span class="nf">effs</span> <span class="ow">=&gt;</span> <span class="nf">e</span> <span class="ow">-&gt;</span> <span class="kt">Eff</span> <span class="nf">effs</span> <span class="nf">a</span>
<span class="nf">throwError</span> <span class="nf">e</span> <span class="ow">=</span> <span class="nf">send</span> <span class="p">(</span><span class="kt">Error</span> <span class="nf">e</span><span class="p">)</span>

<span class="c1">-- | Handler for exception effects. If there are no exceptions thrown, returns</span>
<span class="c1">-- &#39;Right&#39;. If exceptions are thrown and not handled, returns &#39;Left&#39;, while</span>
<span class="c1">-- interrupting the execution of any other effect handlers.</span>
<span class="nf">runError</span> <span class="ow">::</span> <span class="nf">forall</span> <span class="nf">e</span> <span class="nf">effs</span> <span class="nf">a</span><span class="o">.</span> <span class="kt">Eff</span> <span class="p">(</span><span class="kt">Error</span> <span class="nf">e</span> <span class="sc">&#39;</span><span class="err">: effs) a -&gt; Eff effs (Either e a)
</span><span class="err">runError = handleRelay (pure . Right) (</span><span class="se">\</span><span class="err">(E</span><span class="se">r</span><span class="err">ror e) _ -&gt; pure (Left e))
</span><span class="err">
</span><span class="err">-- | A catcher for Exceptions. Handlers are allowed to rethrow exceptions.
</span><span class="err">catchError
</span><span class="err">  :: forall e effs a
</span><span class="err">   . Member (Error e) effs
</span><span class="err">  =&gt; Eff effs a
</span><span class="err">  -&gt; (e -&gt; Eff effs a)
</span><span class="err">  -&gt; Eff effs a
</span><span class="err">catchError m handle = interposeWith (</span><span class="se">\</span><span class="err">(E</span><span class="se">r</span><span class="err">ror e) _ -&gt; handle e) m
</span><span class="err">
</span><span class="err">countDownExc :: Int -&gt; Either String (Int,Int)
</span><span class="err">countDownExc start = run $ runError (runState start go)
</span><span class="err">  where go = get &gt;&gt;= (</span><span class="se">\n</span><span class="err"> -&gt; if n &lt;= (0 :: Int)
</span><span class="err">                            then throwError &#34;wat&#34;
</span><span class="err">                            else put (n-1) &gt;&gt; go)</span></code></pre></div><p>而自由单子是可组合的，因此这里得到的effect monad也是可以组合的，我们可以将由State得到的effect monad和由Error得到的effect monad组合起来，得到一个有更多的effect的可扩展的effect monad。所以Oleg Kiselyov的论文的另一个标题是More Extensible Effects。</p><p>注： 以上的Haskell代码节选自github上的Freer Monad的一个实现freer simple<sup data-text="freer simple: " data-url="https://github.com/lexi-lambda/freer-simple" data-draft-node="inline" data-draft-type="reference" data-numero="2">[2]</sup>。</p><p>同样的，我们也可以使用C语言来实现些可组合的effect monad，首先，对应的C语言的State的get 和put 指令和实现如下所示：</p><div class="highlight"><pre><code class="language-c"><span class="k">static</span> <span class="n">lh_value</span> <span class="nf">_state_result</span><span class="p">(</span><span class="n">lh_value</span> <span class="n">local</span><span class="p">,</span> <span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">unreferenced</span><span class="p">(</span><span class="n">local</span><span class="p">);</span>
  <span class="c1">//trace_printf(&#34;state result: %i, %li\n&#34;, *((int*)local), (long)(x));
</span><span class="c1"></span>  <span class="k">return</span> <span class="n">arg</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">lh_value</span> <span class="nf">_state_get</span><span class="p">(</span><span class="n">lh_resume</span> <span class="n">rc</span><span class="p">,</span> <span class="n">lh_value</span> <span class="n">local</span><span class="p">,</span> <span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">unreferenced</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
  <span class="c1">//trace_printf(&#34;state get: %i\n&#34;, *((int*)local));
</span><span class="c1"></span>  <span class="k">return</span> <span class="n">lh_tail_resume</span><span class="p">(</span><span class="n">rc</span><span class="p">,</span> <span class="n">local</span><span class="p">,</span> <span class="n">local</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">lh_value</span> <span class="nf">_state_put</span><span class="p">(</span><span class="n">lh_resume</span> <span class="n">rc</span><span class="p">,</span> <span class="n">lh_value</span> <span class="n">local</span><span class="p">,</span> <span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//trace_printf(&#34;state put: %i, %li\n&#34;, *((int*)local), (long)(arg));
</span><span class="c1"></span>  <span class="k">return</span> <span class="n">lh_tail_resume</span><span class="p">(</span><span class="n">rc</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">lh_value_null</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">const</span> <span class="n">lh_operation</span> <span class="n">_state_ops</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">{</span> <span class="n">LH_OP_TAIL_NOOP</span><span class="p">,</span> <span class="n">LH_OPTAG</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">get</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">_state_get</span> <span class="p">},</span>
  <span class="p">{</span> <span class="n">LH_OP_TAIL_NOOP</span><span class="p">,</span> <span class="n">LH_OPTAG</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">put</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">_state_put</span> <span class="p">},</span>
  <span class="p">{</span> <span class="n">LH_OP_NULL</span><span class="p">,</span> <span class="n">lh_op_null</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">}</span>
<span class="p">};</span>
<span class="k">static</span> <span class="k">const</span> <span class="n">lh_handlerdef</span> <span class="n">state_def</span> <span class="o">=</span> <span class="p">{</span>
  <span class="n">LH_EFFECT</span><span class="p">(</span><span class="n">state</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_state_result</span><span class="p">,</span> <span class="n">_state_ops</span> <span class="p">};</span>

<span class="n">lh_value</span> <span class="nf">state_handle</span><span class="p">(</span><span class="n">lh_value</span><span class="p">(</span><span class="o">*</span><span class="n">action</span><span class="p">)(</span><span class="n">lh_value</span><span class="p">),</span> <span class="kt">int</span> <span class="n">state0</span><span class="p">,</span> <span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">lh_handle</span><span class="p">(</span><span class="o">&amp;</span><span class="n">state_def</span><span class="p">,</span> <span class="n">lh_value_int</span><span class="p">(</span><span class="n">state0</span><span class="p">),</span> <span class="n">action</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
<span class="p">}</span></code></pre></div><p>上面的代码中的 _state_ops 列出了State 这个effect 所支持的所有effect instruction。而函数_state_result 则是State 这个effect monad 自由单子构造里的Pure，和 _state_ops 里的effect instructions 合在一起用结构体state_def 定义了State 这个effect monad 自由单子。我们再来看一下经典的自由单子的定义：</p><div class="highlight"><pre><code class="language-haskell"><span class="kr">data</span> <span class="kt">Free</span> <span class="nf">op</span> <span class="nf">a</span> <span class="ow">=</span> <span class="kt">Pure</span> <span class="nf">a</span>
              <span class="c1">-- ^ 对应函数 _state_result</span>
              <span class="o">|</span> <span class="kt">Free</span> <span class="p">(</span><span class="nf">op</span> <span class="p">(</span><span class="kt">Free</span> <span class="nf">op</span> <span class="nf">a</span><span class="p">))</span>
              <span class="c1">-- ^ 对应effect instruction列表_state_ops</span></code></pre></div><p>最后的state_handle 函数则等同于前面Haskell 实现的State 自由单子的runState 函数，而使用State 这个effect 的get 和 put 的状态处理的程序则是通过action 这个参数传进来。具体使用如下所示：</p><div class="highlight"><pre><code class="language-c"><span class="n">lh_value</span> <span class="nf">state_counter</span><span class="p">(</span><span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">unreferenced</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">((</span><span class="n">i</span> <span class="o">=</span> <span class="n">state_get</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">trace_printf</span><span class="p">(</span><span class="s">&#34;counter: %i</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
    <span class="n">state_put</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">lh_value_int</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">lh_value</span> <span class="n">res1</span> <span class="o">=</span> <span class="n">state_handle</span><span class="p">(</span><span class="n">state_counter</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">lh_value_null</span><span class="p">);</span>
  <span class="n">test_printf</span><span class="p">(</span><span class="s">&#34;final result counter: %i</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lh_int_value</span><span class="p">(</span><span class="n">res1</span><span class="p">));</span>
<span class="p">}</span></code></pre></div><p>我们再来看一下C语言实现的异常错误处理的Algebraic Effect，类似的，先定义异常错误处理Exception 这个effect 的excn_raise 指令。然后是Exception 这个effect monad自由单子的定义，同样的excn_ops 中是Exception 这个effect 所支持的所有指令，这里只有一个。很特殊的一点是Exception 不需要定义Pure。</p><div class="highlight"><pre><code class="language-c"><span class="k">static</span> <span class="n">lh_value</span> <span class="nf">_excn_raise</span><span class="p">(</span><span class="n">lh_resume</span> <span class="n">sc</span><span class="p">,</span> <span class="n">lh_value</span> <span class="n">local</span><span class="p">,</span> <span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">unreferenced</span><span class="p">(</span><span class="n">sc</span><span class="p">);</span>
  <span class="n">unreferenced</span><span class="p">(</span><span class="n">local</span><span class="p">);</span>
  <span class="n">unreferenced</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
  <span class="n">test_printf</span><span class="p">(</span><span class="s">&#34;exception raised: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lh_lh_string_value</span><span class="p">(</span><span class="n">arg</span><span class="p">));</span>
  <span class="k">return</span> <span class="n">lh_value_null</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">const</span> <span class="n">lh_operation</span> <span class="n">_excn_ops</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">{</span> <span class="n">LH_OP_NORESUME</span><span class="p">,</span> <span class="n">LH_OPTAG</span><span class="p">(</span><span class="n">excn</span><span class="p">,</span><span class="n">raise</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">_excn_raise</span> <span class="p">},</span>
  <span class="p">{</span> <span class="n">LH_OP_NULL</span><span class="p">,</span> <span class="n">lh_op_null</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">}</span>
<span class="p">};</span>
<span class="k">static</span> <span class="k">const</span> <span class="n">lh_handlerdef</span> <span class="n">excn_def</span> <span class="o">=</span> <span class="p">{</span> <span class="n">LH_EFFECT</span><span class="p">(</span><span class="n">excn</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_excn_ops</span> <span class="p">};</span>

<span class="n">lh_value</span> <span class="nf">excn_handle</span><span class="p">(</span><span class="n">lh_value</span><span class="p">(</span><span class="o">*</span><span class="n">action</span><span class="p">)(</span><span class="n">lh_value</span><span class="p">),</span> <span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">lh_handle</span><span class="p">(</span><span class="o">&amp;</span><span class="n">excn_def</span><span class="p">,</span> <span class="n">lh_value_null</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>和State 这个effect 类似，excn_handle 等同于前面Haskell 实现的Error 自由单子的runError 函数。我们的使用异常错误处理Exception 的程序是通过参数action 传进来的。</p><div class="highlight"><pre><code class="language-c"><span class="n">lh_value</span> <span class="nf">id</span><span class="p">(</span><span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">arg</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">lh_value</span> <span class="nf">id_raise</span><span class="p">(</span><span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">excn_raise</span><span class="p">(</span><span class="s">&#34;an error message from &#39;id_raise&#39;&#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">arg</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">lh_value</span> <span class="n">res1</span> <span class="o">=</span> <span class="n">excn_handle</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">lh_value_long</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span>
  <span class="n">test_printf</span><span class="p">(</span><span class="s">&#34;final result &#39;id&#39;: %li</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lh_long_value</span><span class="p">(</span><span class="n">res1</span><span class="p">));</span>
  <span class="n">lh_value</span> <span class="n">res2</span> <span class="o">=</span> <span class="n">excn_handle</span><span class="p">(</span><span class="n">id_raise</span><span class="p">,</span> <span class="n">lh_value_long</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span>
  <span class="n">test_printf</span><span class="p">(</span><span class="s">&#34;final result &#39;id_raise&#39;: %li</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lh_long_value</span><span class="p">(</span><span class="n">res2</span><span class="p">));</span>
<span class="p">}</span></code></pre></div><p>同样的，C语言实现的自由单子也是可以组合的，我们可以把这些独立的自由单子组合起来，得到一个支持更多的effect 的自由单子。下面的程序通过excn_handle，state_handle，amb_handle 的层层调用，将Exception、State、Amb 这三个effect monad组合在一起。</p><div class="highlight"><pre><code class="language-c"><span class="k">static</span> <span class="kt">bool</span> <span class="nf">raising</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">bool</span> <span class="n">p</span> <span class="o">=</span> <span class="n">amb_flip</span><span class="p">();</span>
  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">state_get</span><span class="p">();</span>
  <span class="n">state_put</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">excn_raise</span><span class="p">(</span><span class="s">&#34;raise inside state/amb from &#39;raising&#39;&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">lh_value</span> <span class="nf">raising_action</span><span class="p">(</span><span class="n">lh_value</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">unreferenced</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
  <span class="kt">bool</span> <span class="n">p</span> <span class="o">=</span> <span class="n">raising</span><span class="p">();</span>
  <span class="k">return</span> <span class="n">lh_value_bool</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">static</span> <span class="n">lh_value</span> <span class="nf">handle_amb_raising</span><span class="p">(</span><span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">amb_handle</span><span class="p">(</span><span class="n">raising_action</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">lh_value</span> <span class="nf">handle_state_amb_raising</span><span class="p">(</span><span class="n">lh_value</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">state_handle</span><span class="p">(</span><span class="n">handle_amb_raising</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">blist</span> <span class="nf">handle_exn_state_amb_raising</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">lh_blist_value</span><span class="p">(</span><span class="n">excn_handle</span><span class="p">(</span><span class="n">handle_state_amb_raising</span><span class="p">,</span> <span class="n">lh_value_null</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">// test release of local state
</span><span class="c1"></span>  <span class="n">blist</span> <span class="n">res4</span> <span class="o">=</span> <span class="n">handle_exn_state_amb_raising</span><span class="p">();</span>
  <span class="n">blist_print</span><span class="p">(</span><span class="s">&#34;final result exn/state/amb raising&#34;</span><span class="p">,</span> <span class="n">res4</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
<span class="p">}</span></code></pre></div><p>现在我们已经知道了C语言也是可以实现自由单子的，那更具体的实现细节是怎么样的呢？有兴趣的可以等待下一篇文章：自由单子的C实现 -- Algebraic Effects in C（下）。</p><p>更具体的实现可以看微软的论文Monads for free in C<sup data-text="Free Monads in C: " data-url="https://www.microsoft.com/en-us/research/wp-content/uploads/2017/06/algeff-in-c-tr-v2.pdf" data-draft-node="inline" data-draft-type="reference" data-numero="3">[3]</sup></p>