<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>雾雨魔法店</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/</link>
<description>http://zhuanlan.zhihu.com/marisa/20419321</description>
<language>zh-cn</language>
<lastBuildDate>Fri, 09 Aug 2019 05:16:47 +0800</lastBuildDate>
<item>
<title>如何少快好省地写一个optparser</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-08-08-77136288.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/77136288&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大多数编程语言都有自己的命令行程序参数解析库，C/C++有getopt，Gflags，Python有optparse，除了可扩展性不足之外，用起来都还趁手。Hackage上也有不少类似的库，其中optparser-appilicative特别能体现Haskell编程风格，里面用到半群Semigroup，幺半群Monoid，函子Functor，合用函子Applicative Functor以及范畴论的自由构造Free Construction，不过源代码非常臃肿，很难让人理清思路。我扒了原始论文&lt;sup data-text=&quot;Capriotti, Paolo &amp;amp; Kaposi, Ambrus. (2014). Free Applicative Functors. Electronic Proceedings in Theoretical Computer Science. 153. 10.4204/EPTCS.153.2.&quot; data-url=&quot;&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;1&quot;&gt;[1]&lt;/sup&gt;，决定从头开始写一个简易版本的optparser。这篇文章用Literature Haskell写的，可以直接在GHC解释器里打开。首先打开几个GHC编译器扩展，前面四个是方便书写的语法糖，RankNTypes用于写智能构造器Smart Constructor，主要数据结构只用到GADTs扩展。导入的模块也比较常见，无需多介绍。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; {-# LANGUAGE OverloadedStrings #-}
&amp;gt; {-# LANGUAGE TupleSections     #-}
&amp;gt; {-# LANGUAGE DeriveFunctor     #-}
&amp;gt; {-# LANGUAGE ViewPatterns      #-}
&amp;gt; {-# LANGUAGE RankNTypes        #-}
&amp;gt; {-# LANGUAGE GADTs             #-}
&amp;gt;
&amp;gt; import qualified Data.Text as T
&amp;gt; import qualified Data.Set as S
&amp;gt; import Data.Time (UTCTime)
&amp;gt; import Data.Time.Format (parseTimeM, defaultTimeLocale)
&amp;gt; import Data.String (IsString, fromString)
&amp;gt; import Data.Semigroup (Semigroup, (&amp;lt;&amp;gt;))
&amp;gt; import Data.Monoid (Endo(..))
&amp;gt; import Control.Applicative (Const(..), getConst)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;参数解析库大概包括这几个部分，用户输入解析（tokenize），解析目标的数据结构，解析过程和错误报告。输入解析是为了滤去噪音（比如多余的空白字符）和预处理，把原始字符串数据拆分为词条列表，如果忽略单双引号转义，这部分其实就是Haskell现成的函数words。解析过程依赖于记录解析目标信息的数据结构设计。写好Haskell第一步就是设计数据类型，良好的类型是对数据内部静态结构的抽象，依赖Haskell强大的类型系统和全局类型推导，即使想重构数据类型，也比大多数语言轻松多了。阅读POSIX程序参数语法约定发现，词条可以分成命令Command，参数Argument，标志位Flag和选项Option，标志位和选项以连字符(&amp;#39;-&amp;#39;)开头，选项分长短两种，短选项只有一个字母并且和紧跟的参数之间空白可以省略，长选项用空白或者等号(&amp;#39;=&amp;#39;)来引导参数，只要没有歧义，选项和参数可以乱序混合使用。&lt;/p&gt;&lt;p&gt;这里我只实现了选项。实现标志位比较容易实现，只是对于并列标志位可以合并这项灵活语法的解析稍微麻烦一点；位置相关的参数则是optName为空的选项，解析过程必定有一个Monadic风格的状态机，Applicative风格的数据结构完全可以用Monadic风格来deconstruction；要解析子命令需要添加Free Alternative的构造器，比如Perforce的语法结构，“p4 [global options] command [command-specific options] [command arguments]”，作者对这种Ad Hoc做法比较犹豫，因为Alternative并没有很好的公理，不过我看见Edward A. Kmett的free库有这种自由构造，应该不至于没有公理。&lt;br/&gt;&lt;br/&gt;选项类型包括名称，默认值以及选项目标的解析器。我选择给选项名称新的类型，这样短选项只能用单字母构造，以后扩展加入标志位也比较容易。选项是解析目标的计算上下文，自然而然就是函子。最终的解析器其实就是把这一堆子解析器合并起来，一旦解析完命令行参数原始数据，只要把子解析器和词条对应起来应用解析目标的构造器就能得到最后目标。这种对应是静态的，因为POSIX明确说这几种种程序参数可以是乱序的，除了命令，命令得是Alternative风格的。静态对应并不是说一一对应，可能是一对多，比如选项，也可能是多对一，比如说合并标志位的灵活语法，还可能是是零对多，比如说参数。这里的静态应该理解为结构已经包含在解析目标的数据结构中，单个子解析器是可以并行的。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; data OptName  = LName T.Text | SName Char deriving (Show)
&amp;gt; 
&amp;gt; data Option a = Option
&amp;gt;   { optName :: [OptName]
&amp;gt;   , optValue :: Maybe a
&amp;gt;   , optReader :: T.Text -&amp;gt; Result a
&amp;gt;   } deriving (Functor)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;但现在的问题是解析目标类型不止一种，Haskell不是Python那种unitype的动态语言，也不像OOP语言用继承多态做类型擦除，如果结合类型类（type class）和存在代数数据类型Existential ADT，在Haskell里面确实也能构造类型擦除的列表，但据我所知，并没有办法能把解析完的参数组合起来。这里用到是自由合用函子Free Applicative，也就是说对于任意的函子都有办法能提升为自由合用函子，自由单子Free Monad可能更为常见，因为它能极大帮助我们写EDSL，自由合用函子构造相当类似，只是换了种张量乘法。列表，自由单子和自由合用函子都属于自由构造Free Construction&lt;sup data-text=&quot;&quot; data-url=&quot;http://oleg.fi/gists/posts/2018-02-21-single-free.html&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;2&quot;&gt;[2]&lt;/sup&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;
&amp;gt; class Functor f =&amp;gt; Applicative&amp;#39; f where
&amp;gt;   azero :: f ()
&amp;gt;   aplus :: f x -&amp;gt; f y -&amp;gt; f (x, y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;如果你熟悉合用函子在范畴论中的定义，那么你会发现合用函子就是用来收集多元函数的参数，最后通过uncurry和fmap就能得到在上下文中函数应用的结果。合用函子的这两种定义是同构的，我在文末给出了两者之间相互转化的函数。感兴趣的可以验证一下自由合用函子符合合用函子的四条公理。多说一句第一条自然性公理其实在Haskell里是定理，可以用Free Theorem证明，剩余的三条公理如果用范畴论的合用函子定义表述无非还是范畴论的单位律和结合律。&lt;br/&gt;&lt;br/&gt;好了，下面就是整个解析器的类型。为了表明和列表之间的相似性，我借用了Lisp列表的构造器nil和cons，类比列表我们有左偏Cons和右偏Snoc，同样存在右偏的解析器定义，我在文末给出。原文作者用的是右偏形式的，似乎是定义起来更简单，不过我觉得左偏形式的更直观，可以看出最终的解析器其实就是包含了一个合并子解析器结果的纯函数以及若干子解析器。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; data Parser a where
&amp;gt;   NilP :: a -&amp;gt; Parser a
&amp;gt;   ConsP:: Parser (x -&amp;gt; a) -&amp;gt; Option x -&amp;gt; Parser a 
&amp;gt; 
&amp;gt; instance Functor Parser where
&amp;gt;   fmap f (NilP a) = NilP (f a)
&amp;gt;   fmap f (ConsP pg px) = ConsP ((f.) &amp;lt;$&amp;gt; pg) px
&amp;gt; 
&amp;gt; instance Applicative Parser where
&amp;gt;   pure = NilP
&amp;gt;   NilP f &amp;lt;*&amp;gt; pa = f &amp;lt;$&amp;gt; pa
&amp;gt;   ConsP pf px &amp;lt;*&amp;gt; pa = ConsP (flip &amp;lt;$&amp;gt; pf &amp;lt;*&amp;gt; pa) px
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;接下来是解析过程。首先定义一个错误类型的ADT，准确打印出错误信息直接关系着库代码的质量，毕竟大部分时候都是写一小时debug十小时。我还定义了半群来指定错误优先级以及两个智能构造器来帮助类型提升。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; data OptError = ExpectArgErr | UnexpectedOptErr | MissingOptErr | ParseArgErr | ErrMsg T.Text deriving (Show)
&amp;gt;
&amp;gt; newtype Result a = Result (Either OptError a) deriving (Show, Functor)
&amp;gt;
&amp;gt; instance Semigroup (Result a) where
&amp;gt;   (Result (Right a           )) &amp;lt;&amp;gt; _                             = Result (Right a           )
&amp;gt;   _                             &amp;lt;&amp;gt; (Result (Right a          ))  = Result (Right a           )
&amp;gt;   (Result (Left ParseArgErr  )) &amp;lt;&amp;gt; _                             = Result (Left ParseArgErr  )
&amp;gt;   _                             &amp;lt;&amp;gt; (Result (Left ParseArgErr ))  = Result (Left ParseArgErr  )
&amp;gt;   (Result (Left ExpectArgErr )) &amp;lt;&amp;gt; _                             = Result (Left ExpectArgErr )
&amp;gt;   _                             &amp;lt;&amp;gt; (Result (Left ExpectArgErr))  = Result (Left ExpectArgErr )
&amp;gt;   (Result (Left MissingOptErr)) &amp;lt;&amp;gt; _                             = Result (Left MissingOptErr)
&amp;gt;   _                             &amp;lt;&amp;gt; (Result (Left MissingOptErr)) = Result (Left MissingOptErr)
&amp;gt;   err                           &amp;lt;&amp;gt; _                             = err
&amp;gt;
&amp;gt; failWith :: T.Text -&amp;gt; Result a  
&amp;gt; failWith = Result . Left . ErrMsg
&amp;gt; 
&amp;gt; okHas :: a -&amp;gt; Result a
&amp;gt; okHas = Result . Right
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;运行子解析器就是逐个扫描词条，如果匹配再调用子解析器里面的reader完成参数解析并且把它从词条列表中删除，如果不匹配就移至下一个，直至词条列表末尾，最后查看有没有预设值否则报错。这里的复杂度是N2，如果预处理排序或者Hash复杂度可能降低，不过预处理选项可能比较麻烦。这里有一个改进效率的地方就是每次词条解析都得重组列表，可以用DList来提高append的效率，大家可以试一下。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; runParser :: Parser a -&amp;gt; ([T.Text], [T.Text]) -&amp;gt; ([T.Text], Result a)
&amp;gt; runParser (NilP a)      (ls, rs) = (ls ++ rs, okHas a)
&amp;gt; runParser (ConsP pf pa) (ls, []) = maybe (ls, Result (Left MissingOptErr)) (\a -&amp;gt; runParser (($ a) &amp;lt;$&amp;gt; pf) ([], ls)) (optValue pa)
&amp;gt; runParser (ConsP pf pa) (ls, rs) = case runOption pa rs of
&amp;gt;   Result (Right (a, ts)     ) -&amp;gt; runParser (($ a) &amp;lt;$&amp;gt; pf) ([], ls ++ ts)
&amp;gt;   Result (Left ExpectArgErr ) -&amp;gt; (rs, Result (Left ExpectArgErr))
&amp;gt;   Result (Left ParseArgErr  ) -&amp;gt; (rs, Result (Left ParseArgErr))
&amp;gt;   Result (Left MissingOptErr) -&amp;gt; (rs, Result (Left MissingOptErr))  
&amp;gt;   _                           -&amp;gt; runParser (ConsP pf pa) (ls ++ [head rs], tail rs)
&amp;gt;    
&amp;gt; runOption :: Option a -&amp;gt; [T.Text] -&amp;gt; Result (a, [T.Text])
&amp;gt; runOption opt [] = maybe (failWith &amp;#34;missing&amp;#34;) (okHas . (,[])) (optValue opt)
&amp;gt; runOption opt (t:ts) = if null (optName opt)
&amp;gt;   then maybe (Result (Left MissingOptErr)) (okHas . (,[])) (optValue opt)
&amp;gt;   else foldl1 (&amp;lt;&amp;gt;) (flip stepOption t &amp;lt;$&amp;gt; optName opt)
&amp;gt;   where
&amp;gt;     stepOption n (matchPrefix n -&amp;gt; (Nothing, False)) = failWith &amp;#34;mismatch&amp;#34;
&amp;gt;     stepOption n (matchPrefix n -&amp;gt; (Nothing, True )) = if null ts
&amp;gt;       then Result (Left ExpectArgErr)
&amp;gt;       else if T.head (head ts) == &amp;#39;-&amp;#39; then Result (Left ExpectArgErr) else (,tail ts) &amp;lt;$&amp;gt; optReader opt (head ts)
&amp;gt;     stepOption n (matchPrefix n -&amp;gt; (Just as, _    )) = (,ts) &amp;lt;$&amp;gt; optReader opt as
&amp;gt;         
&amp;gt;     matchPrefix (SName n) (T.stripPrefix (T.snoc   &amp;#34;-&amp;#34;  n) -&amp;gt; Nothing) = (Nothing, False)
&amp;gt;     matchPrefix (LName n) (T.stripPrefix (T.append &amp;#34;--&amp;#34; n) -&amp;gt; Nothing) = (Nothing, False)
&amp;gt;     matchPrefix (SName n) (T.stripPrefix (T.snoc   &amp;#34;-&amp;#34;  n) -&amp;gt; Just as) = if T.null as
&amp;gt;       then (Nothing, True)
&amp;gt;       else (Just as, False)
&amp;gt;     matchPrefix (LName n) (T.stripPrefix (T.append &amp;#34;--&amp;#34; n) -&amp;gt; Just as) = if T.null as
&amp;gt;       then (Nothing, True)
&amp;gt;       else if T.head as == &amp;#39;=&amp;#39; then (Just (T.tail as), False) else (Nothing, False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;好了，到这里整个库差不多写完了。不过我还会加一些智能构造器，这会极大提高程序可读性和排版美感（强迫症，很多问题到最后都是审美问题，编程何尝不是？）。Edward Z. Yang在博客&lt;sup data-text=&quot;&quot; data-url=&quot;http://blog.ezyang.com/2012/08/applicative-functors/&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-numero=&quot;3&quot;&gt;[3]&lt;/sup&gt;里说API编程的灵活性和数据结构满足抽象公理的“美感”是矛盾的，智能构造器正是桥接灵活和抽象的重要一环。为了让智能构造器可组合，我用了一种特殊的幺半群Endo。Endo是定义域和值域相同的一元函数之上的wrapper，可以理解为动作Action，每一次动作，状态机都会响应，合并若干连续动作还是一个动作，另外还有一种特殊动作不使状态机发生任何变化，上文提到的DList优化也是一种Endo的实例化。除了用Endo，还可以用comonad来实现，毕竟comonad本质也是一种状态机。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; auto :: Read a =&amp;gt; T.Text -&amp;gt; Result a
&amp;gt; auto t = case reads (T.unpack t) of
&amp;gt;   [(a, &amp;#34;&amp;#34;)] -&amp;gt; Result (Right a)
&amp;gt;   _         -&amp;gt; Result (Left ParseArgErr)
&amp;gt; 
&amp;gt; str :: IsString s =&amp;gt; T.Text -&amp;gt; Result s
&amp;gt; str = Result . Right . fromString . T.unpack
&amp;gt;
&amp;gt; long :: T.Text -&amp;gt; Endo (Option a)
&amp;gt; long t = Endo $ \opt -&amp;gt; opt { optName = LName t : optName opt } 
&amp;gt;
&amp;gt; short :: Char -&amp;gt; Endo (Option a)
&amp;gt; short c = Endo $ \opt -&amp;gt; opt { optName = SName c : optName opt } 
&amp;gt;
&amp;gt; value :: a -&amp;gt; Endo (Option a)
&amp;gt; value a = Endo $ \opt -&amp;gt; opt { optValue = maybe (Just a) Just (optValue opt) }
&amp;gt;
&amp;gt; strOption :: IsString s =&amp;gt; Endo (Option s) -&amp;gt; Parser s
&amp;gt; strOption = option str
&amp;gt;
&amp;gt; option :: (T.Text -&amp;gt; Result a) -&amp;gt; Endo (Option a) -&amp;gt; Parser a
&amp;gt; option p = lift . flip appEndo (Option [] Nothing p)
&amp;gt;
&amp;gt; autoOption :: Read a =&amp;gt; Endo (Option a) -&amp;gt; Parser a
&amp;gt; autoOption = option auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;关于扩展，一个完整的命令行参数解析器还包括显示帮助和版本信息，bash长选项自动补全。要显示帮助只需要在选项类型里加一项，然后用下面的collect函数重新format一下就行。版本信息就是一个总是成功的子解析器。既然整个parser是静态，我们还可以进行静态分析，比如统计子解析器的个数。我这里给出一个disambiguation的例子，如果标志位或者短选项有重合就提前报错，同样用到了collect函数。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; type NatF f g = forall a. f a -&amp;gt; g a -- f, g must be Functor
&amp;gt; type NatA f g = forall a. f a -&amp;gt; g a -- f, g must be Applicative
&amp;gt; 
&amp;gt; hoist :: Applicative f =&amp;gt; NatF Option f -&amp;gt; NatA Parser f
&amp;gt; hoist _ (NilP p)      = pure p
&amp;gt; hoist t (ConsP pf pa) = hoist t pf &amp;lt;*&amp;gt; t pa
&amp;gt; 
&amp;gt; lower :: Applicative f =&amp;gt; NatA Parser f -&amp;gt; NatF Option f
&amp;gt; lower t = t . ConsP (pure id)
&amp;gt;
&amp;gt; lift :: Option a -&amp;gt; Parser a
&amp;gt; lift = lower id
&amp;gt;
&amp;gt; collect :: Parser a -&amp;gt; (forall x. Option x -&amp;gt; b) -&amp;gt; (b -&amp;gt; r -&amp;gt; r) -&amp;gt; r -&amp;gt; r
&amp;gt; collect p f acc = flip (foldr acc) (getConst (hoist (\opt -&amp;gt; Const [f opt]) p))

&amp;gt; disamb :: Parser a -&amp;gt; Either OptError Bool
&amp;gt; disamb p = const True &amp;lt;$&amp;gt; collect p (S.unions . fmap sname . optName) acc (Right S.empty)
&amp;gt;   where
&amp;gt;     acc _ (Left err) = Left err
&amp;gt;     acc a (Right as) = if S.null (S.intersection a as) then Right (S.union a as) else Left (ErrMsg &amp;#34;ambigous&amp;#34;)
&amp;gt;     sname (LName _)  = S.empty
&amp;gt;     sname (SName c)  = S.singleton c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br/&gt;下面是一个简单的例子，大家可以试一下。短短一百多行我们实现了一个可扩展的optparser，Haskell还是足够简洁的。我觉得用Haskell解决问题思路就一个字——退，退回去解决更普遍更抽象的问题，虽然你最后找到的数据结构可能很抽象，但最初的问题也就成了实例化数据结构之后的特例，往往不值一提。另外Typeclassopedia定义出来的类型类是Hakell的common knowledge，抽象层次非常清晰，数学性质足够良好，大多数时候你的数据结构都能在里面找到一个位置。&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; data Bsub = Bsub
&amp;gt;   { host_name :: T.Text
&amp;gt;   , user_name :: T.Text
&amp;gt;   , threads   :: Int
&amp;gt;   , sch_time  :: UTCTime
&amp;gt;   , error_file:: T.Text
&amp;gt;   } deriving (Show)
&amp;gt; 
&amp;gt; 
&amp;gt; bsub = Bsub
&amp;gt;   &amp;lt;$&amp;gt; strOption (long &amp;#34;host_name&amp;#34; &amp;lt;&amp;gt; short &amp;#39;h&amp;#39;)
&amp;gt;   &amp;lt;*&amp;gt; strOption (long &amp;#34;user_name&amp;#34; &amp;lt;&amp;gt; short &amp;#39;u&amp;#39; &amp;lt;&amp;gt; value &amp;#34;anonymous&amp;#34;)
&amp;gt;   &amp;lt;*&amp;gt; autoOption (short &amp;#39;m&amp;#39; &amp;lt;&amp;gt; value 6)
&amp;gt;   &amp;lt;*&amp;gt; option timeP (long &amp;#34;post_time&amp;#34; &amp;lt;&amp;gt; short &amp;#39;p&amp;#39; &amp;lt;&amp;gt; short &amp;#39;t&amp;#39;)
&amp;gt;   &amp;lt;*&amp;gt; strOption (short &amp;#39;e&amp;#39; &amp;lt;&amp;gt; value &amp;#34;/dev/null&amp;#34;)
&amp;gt;   where
&amp;gt;     timeP = Result . parseTimeM True defaultTimeLocale &amp;#34;%Y-%m-%d::%H:%M:%S&amp;#34; . T.unpack
&amp;gt;
&amp;gt; argument :: String -&amp;gt; [T.Text]
&amp;gt; argument = drop 1 . fmap T.pack . words
&amp;gt;
&amp;gt; execParser :: Parser a -&amp;gt; String -&amp;gt; Result a 
&amp;gt; execParser p args = case runParser p ([], argument args) of
&amp;gt;   ([], r) -&amp;gt; r
&amp;gt;   (_ , _) -&amp;gt; Result (Left UnexpectedOptErr)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说明&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一次写知乎文章，知乎把我的初稿格式完全弄乱了，非常抱歉。&lt;/li&gt;&lt;li&gt;既然是写Haskell，如果发现错误，请重（Zhong）拍。&lt;/li&gt;&lt;li&gt;关于Alternative的公理，我现在才反应过来为啥论文作者犹豫。问题出在Applicative可左偏可右偏甚至并行，构造的时候没啥问题，关键deconstruction的时候，Alternative的操作语义是必须严格左偏或者严格右偏，否则effect无法撤销。比较之下MonadPlus就没有这个问题。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;附录&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; pure&amp;#39; :: Applicative&amp;#39; f =&amp;gt; a -&amp;gt; f a
&amp;gt; pure&amp;#39; a = const a &amp;lt;$&amp;gt; azero
&amp;gt; 
&amp;gt; ap&amp;#39; :: Applicative&amp;#39; f =&amp;gt; f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b
&amp;gt; ap&amp;#39; ff fa = (\(f, a) -&amp;gt; f a) &amp;lt;$&amp;gt; aplus ff fa
&amp;gt; 
&amp;gt; azero&amp;#39; :: Applicative f =&amp;gt; f ()
&amp;gt; azero&amp;#39; = pure ()
&amp;gt; 
&amp;gt; aplus&amp;#39; :: Applicative f =&amp;gt; f x -&amp;gt; f y -&amp;gt; f (x, y)
&amp;gt; aplus&amp;#39; fx fy = (,) &amp;lt;$&amp;gt; fx &amp;lt;*&amp;gt; fy
&amp;gt;
&amp;gt; data Parser&amp;#39; a where
&amp;gt;   NilP&amp;#39; :: a -&amp;gt; Parser&amp;#39; a
&amp;gt;   ConsP&amp;#39;:: Option (x -&amp;gt; a) -&amp;gt; Parser&amp;#39; x -&amp;gt; Parser&amp;#39; a
&amp;gt; 
&amp;gt; instance Functor Parser&amp;#39; where
&amp;gt;   fmap f (NilP&amp;#39; a) = NilP&amp;#39; (f a)
&amp;gt;   fmap f (ConsP&amp;#39; pg px) = ConsP&amp;#39; ((f.) &amp;lt;$&amp;gt; pg) px
&amp;gt; 
&amp;gt; instance Applicative Parser&amp;#39; where
&amp;gt;   pure = NilP&amp;#39;
&amp;gt;   NilP&amp;#39; f &amp;lt;*&amp;gt; pa = f &amp;lt;$&amp;gt; pa
&amp;gt;   ConsP&amp;#39; pf px &amp;lt;*&amp;gt; pa = ConsP&amp;#39; (uncurry &amp;lt;$&amp;gt; pf) ((,) &amp;lt;$&amp;gt; px &amp;lt;*&amp;gt; pa)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>anselyoung</author>
<guid isPermaLink="false">2019-08-08-77136288</guid>
<pubDate>Thu, 08 Aug 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>深度规范科学（DeepSpec）简介：科研篇</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-08-06-75028703.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/75028703&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-5e48dd90d980cdbb9a0b3e4b855f4c24_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;DeepSpec 是由&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.nsf.gov/cise/about.jsp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;美国国家科学基金会（NSF）&lt;/a&gt;赞助的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.nsf.gov/news/news_summ.jsp%3Fpreview%3Dy%26cntn_id%3D137328&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;计算远征项目&lt;/a&gt;，专注于软硬件全功能正确性的规范和验证。&lt;br/&gt;DeepSpec 有几个主要的研究项目，其远大目标是按照规范接口将它们连接起来，端到端地证明整个系统的正确性。&lt;br/&gt;本文主要译自 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//deepspec.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;DeepSpec 官方网站&lt;/a&gt;，译文按照 &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//creativecommons.org/licenses/by-sa/4.0/deed.zh&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;创作共用 署名-相同方式共享 4.0 (CC BY-SA 4.0) 国际许可协议&lt;/a&gt;授权。&lt;br/&gt;本介绍为系列文章，分为&lt;b&gt;科研篇&lt;/b&gt;、&lt;b&gt;教育篇&lt;/b&gt;、&lt;b&gt;项目篇&lt;/b&gt;和&lt;b&gt;人物篇&lt;/b&gt;。本文为&lt;b&gt;科研篇。&lt;/b&gt;&lt;/blockquote&gt;&lt;h2&gt;序&lt;/h2&gt;&lt;p&gt;在我们的互联世界中，软件错误和安全漏洞带来了巨大的成本和风险，而深度规范（Deep Specification，后称 DeepSpec）项目就要解决这个问题。DeepSpec 展示了如何构建行为精确符合预期的软件，即不多做也不少做：不会有后门让黑客入侵，也不会有 Bug 导致你的应用程序、计算机或汽车崩溃。「软件应该做什么」，或者说软件的预期&lt;b&gt;行为（Behavior）&lt;/b&gt;称作它的&lt;b&gt;规范（Specification）&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;为了指明程序应该做什么，为了构建符合规范的程序，也为了验证程序的行为与预期行为精确匹配，&lt;b&gt;DeepSpec 联盟&lt;/b&gt;将会发展新的科学、技术和工具。我们专注于核心软件系统的基础设施建设，如操作系统、编程语言的编译器以及计算机芯片，还有选举和投票系统、汽车系统以及智能手机这类的应用。&lt;/p&gt;&lt;p&gt;经验表明，为软件编写良好的规范极具挑战性。最大限度可用的接口规范必须同时满足：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;丰富（Rich）&lt;/b&gt;的表达能力：能够详细描述复杂组件的行为&lt;/li&gt;&lt;li&gt;&lt;b&gt;兼顾（Two-sided）&lt;/b&gt;上层和下层：能够将自身的实现和使用者连接起来&lt;/li&gt;&lt;li&gt;&lt;b&gt;形式化（Formal）&lt;/b&gt;的方法：将清晰的语义用数学记法书写，以支持如类型检查器、代码分析和测试工具，自动化或机器辅助的证明器，以及高级 IDE 等工具&lt;/li&gt;&lt;li&gt;&lt;b&gt;有活力（Live）&lt;/b&gt;：通过可机器检查的证明，将规范与实现和使用者的代码相连接&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们将满足这些性质的规范称作&lt;b&gt;深度规范（Deep Specification）&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;研究概览&lt;/h2&gt;&lt;p&gt;在软件工程中，模块会导出接口（API），而模块本身又依赖于下层接口。在软件验证中，我们会为每个接口编写对应的规范，之后就能通过检查规范来证明接口的正确性：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-15ce209338cdfa7eb0f39576998fbe08_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1372&quot; data-rawheight=&quot;270&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1372&quot; data-original=&quot;https://pic1.zhimg.com/v2-15ce209338cdfa7eb0f39576998fbe08_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-15ce209338cdfa7eb0f39576998fbe08_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1372&quot; data-rawheight=&quot;270&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1372&quot; data-original=&quot;https://pic1.zhimg.com/v2-15ce209338cdfa7eb0f39576998fbe08_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-15ce209338cdfa7eb0f39576998fbe08_b.jpg&quot;/&gt;&lt;figcaption&gt;模块及其证明&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在软件工程中，接口通常以编程语言编写，例如包含函数原型的 C 语言头文件，或者 Java 语言中类的描述。它们可以描述接口函数的类型，但却无法指定它们的行为。UML 之类的建模语言可以做得稍好一些，但表达能力不够&lt;b&gt;丰富（Rich）&lt;/b&gt;，不足以刻画出我们想要该模块做什么。&lt;/p&gt;&lt;p&gt;程序验证逻辑可利用&lt;b&gt;形式逻辑（Formal Logic）&lt;/b&gt;完整的表达能力来刻画行为，但由于历史原因，它们没有「&lt;b&gt;活力（Live）&lt;/b&gt;」：它们一直注重程序的模型，却没有将其自身与程序直接而机械式地连接起来。（相比之下，编译器的类型检查器则能在每次编译时，确保 API 规范中的类型会与实现中的类型相匹配。）&lt;/p&gt;&lt;p&gt;使用&lt;b&gt;形式化（Formal）&lt;/b&gt;逻辑能让我们用自动证明器和证明检查器来验证程序，从而保证实现满足接口。&lt;/p&gt;&lt;p&gt;然而还有一个重点需要考量：规范是&lt;b&gt;兼顾（Two-sided）&lt;/b&gt;的吗？即它的上层和下层都被验证过了吗？具体来说，我们的研究主要在组件的规范和验证上，如操作系统内核，编译器和程序分析工具。例如，CertiKOS 是一个用 C 实现的&lt;b&gt;虚拟层（Hypervisor）&lt;/b&gt;内核。它应当遵循操作系统的规范（如进程独立和调度公平等性质）以证明其正确性。然而它的证明依赖于 C 语言规范，若没有 C 的&lt;b&gt;形式语义（Formal Semantics）&lt;/b&gt;，我们对代码行为的论证便无从谈起了。而 CompCert 正是这样一种 C 编译器，它遵循 C 语言的形式化语义，所产生的机器码同样遵循形式化语义，这样便证明了它的正确性：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-cbdb2fa8e18d46340aade037c97e468e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;732&quot; data-rawheight=&quot;270&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;732&quot; data-original=&quot;https://pic3.zhimg.com/v2-cbdb2fa8e18d46340aade037c97e468e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-cbdb2fa8e18d46340aade037c97e468e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;732&quot; data-rawheight=&quot;270&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;732&quot; data-original=&quot;https://pic3.zhimg.com/v2-cbdb2fa8e18d46340aade037c97e468e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-cbdb2fa8e18d46340aade037c97e468e_b.jpg&quot;/&gt;&lt;figcaption&gt;CertiKOS 与 CompCert&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;例如在实践中，我们经常会发现证明 CertiKOS 时用到的 C 语言规范与 CompCert 提供的 C 语言规范并不匹配。CompCert 的 C 语言规范是专为证明 CompCert 的正确性而设计的，因而从使用者的角度来看，就显得所有不足或过度限制了。CertiKOS 可能需要 CompCert 的规范中未提供的特性。而我们只有将这些模块组合在一起时，才能以兼顾的方式运用 C 语言规范，并从中学习如何改进并加强规范。&lt;/p&gt;&lt;p&gt;每位 DeepSpec 团队中的研究员都在推进重大的研究项目。每个项目都会导入一些规范，导出其它规范。它们的规范是富于表现力，有活力且形式化的。但只有将它们连接在一起时，才能确保规范是兼顾的。于是，我们设想了这个经过验证的软件组件网络，它通过&lt;b&gt;富于表现力（Rich）&lt;/b&gt;、&lt;b&gt;有活力（Live）&lt;/b&gt;、&lt;b&gt;形式化（Formal）&lt;/b&gt;且&lt;b&gt;兼顾（Two-sided）&lt;/b&gt;的，DeepSpec（Deep Specifications，深度规范）构建的规范连接起来。&lt;/p&gt;&lt;h2&gt;规范之网&lt;/h2&gt;&lt;p&gt;普适性的洞见一定是从特定系统的详细描述和实现开始的。此远征项目的核心目标，就是从软件系统中高安全性要求的「中间层」中创建一组相互关联的规范，以及连接它们的&lt;b&gt;工件（Artifact）&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;译注：&lt;b&gt;组件（Component）&lt;/b&gt;即构成系统的原件，而&lt;b&gt;工件（Artifact）&lt;/b&gt;则是在构建系统时用到的工具。举例来说，螺丝是组件，而螺丝刀是工件。在程序开发时，代码中导入的库是组件；而编译器、IDE、测试用例，甚至调试所用到的各种信息都是工件。在本文中，为程序构造的证明只是为了保证程序的正确性，并不会作为软件的一部分实际交付给用户，因此它属于工件。&lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ae67bbfdac669aeebb7bbf7cf57b5f0e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2220&quot; data-rawheight=&quot;1486&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2220&quot; data-original=&quot;https://pic3.zhimg.com/v2-ae67bbfdac669aeebb7bbf7cf57b5f0e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ae67bbfdac669aeebb7bbf7cf57b5f0e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2220&quot; data-rawheight=&quot;1486&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2220&quot; data-original=&quot;https://pic3.zhimg.com/v2-ae67bbfdac669aeebb7bbf7cf57b5f0e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-ae67bbfdac669aeebb7bbf7cf57b5f0e_b.jpg&quot;/&gt;&lt;figcaption&gt;规范、组件与工件&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;上图展示了深度规范网络与工件（实现，翻译或证明）之间的联系，即我们在远征结束时的构想。图中不同区域内纵向的标签和括号标明了哪位主要的研究员负责该项目。紫色标签标注的组件由外部协作者负责。&lt;/p&gt;&lt;p&gt;图的顶部为应用级接口的规范，如 &lt;code&gt;SQL&lt;/code&gt; 查询语言的语义，或者管理公平选举（&lt;code&gt;Elections&lt;/code&gt;）的规则。底部是某些特定微处理器的&lt;b&gt;寄存器传递语言（Register-Transfer Language,&lt;/b&gt; &lt;b&gt;&lt;code&gt;RTL&lt;/code&gt;）&lt;/b&gt;实现的语义，如 x86。投票或数据库系统以遵循「C 程序规范」（&lt;code&gt;Spec of C Program&lt;/code&gt;）的 C 程序实现，它按照「可验证的 C」（&lt;code&gt;Verifiable C&lt;/code&gt;）的程序逻辑编写。我们用 Coq 配合 Floyd 自动证明系统，证明了该 C 程序通过将程序逻辑应用到程序上从而正确实现了 SQL。「可验证的 C」是一组程序正确性的论证规则，无论关于程序的何种性质被证明，该性质都会在程序运行时成立。这一点在 Coq 中被形式化为「将『可验证的 C』连接到 &lt;code&gt;C-light&lt;/code&gt; 的操作语义」的&lt;b&gt;可靠性证明（Soundness Proof）&lt;/b&gt;。CompCert 优化编译器将 C-light 编译为 ARM、PowerPC 或 &lt;code&gt;x86-ISA&lt;/code&gt; 上的机器码。CompCert 的翻译正确性由 Coq 证明。最后，硬件也是正确的：x86-ISA 指令集架构由 &lt;code&gt;Bluespec&lt;/code&gt; 硬件描述语言指定，该语言通过深度规范精确定义了它的语义。Kami 合成器将它翻译为 &lt;code&gt;Verilog&lt;/code&gt;（同样，它也有深度规范）编写的寄存器传递。&lt;/p&gt;&lt;p&gt;当然，用户层的应用不会在裸机上运行，它需要操作系统。操作系统中的错误和漏洞可能会危害整个系统，因为它可能会错误理解操作系统-客户端之间的接口。因此我们也需要在这一层建立规范和验证。CertiKOS 就是经过形式化验证的&lt;b&gt;虚拟层（Supervisor）&lt;/b&gt; 内核，以及对应的 &lt;code&gt;CertiKOS-spec&lt;/code&gt; 规范。它在 &lt;code&gt;CertiClight&lt;/code&gt; 程序逻辑中通过&lt;b&gt;精化证明（Refinement Proof）&lt;/b&gt;的方法证明了其&lt;b&gt;正确性（Correctness）&lt;/b&gt;，而与之对应的通过 CompCert 编译的 &lt;code&gt;C-light&lt;/code&gt;语言变体则保证了其&lt;b&gt;可靠性（Soundness）&lt;/b&gt;。这样它就建立了从 &lt;code&gt;x86-ISA&lt;/code&gt; 到 &lt;code&gt;x86-RTL&lt;/code&gt; 的&lt;b&gt;端到端（End-to-End）&lt;/b&gt;的连接。&lt;/p&gt;&lt;p&gt;LLVM 是 21 世纪的工业标准编译器的中间表示和工具集。它有一个深度规范 &lt;code&gt;LLVM&lt;/code&gt;，以及与之对应的，关键的 LLVM 编译&lt;b&gt;阶段（Phase）&lt;/b&gt;的正确性证明。CompCert 的 &lt;code&gt;C-light&lt;/code&gt; 前端通过一个经验证的，C-light 到 LLVM 的翻译器被连接到 LLVM 后端。&lt;/p&gt;&lt;p&gt;Haskell 是一种广泛应用的函数式编程语言。Glasgow Haskell 编译器（GHC）将它翻译到一种高级的内部语言，我们会将它深度规范化为 &lt;code&gt;Core-Haskell&lt;/code&gt; GHC，它用于将 Core Haskell 翻译到 LLVM。&lt;/p&gt;&lt;p&gt;对于函数式编程而言，Haskell 之外的另一种选择是嵌入到 Coq 自身逻辑系统之内的 &lt;code&gt;Gallina&lt;/code&gt; 语言。Gallina 语言会通过一个经验证的工具链，以&lt;b&gt;续体传递风格（&lt;code&gt;CPS&lt;/code&gt;）&lt;/b&gt;的中间表示被连接到 CompCert &lt;code&gt;C-light&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;最终的结果是一个 x86-RTL 电路，它是一种操作系统和用户代码指令的二进制表示；还有一个端到端的证明，用于在电路上执行这些指令，并产生由用户层规范（如 &lt;code&gt;SQL&lt;/code&gt;、&lt;code&gt;Elections&lt;/code&gt;、&lt;code&gt;Gallina&lt;/code&gt; 或 Haskell 程序等）描述的行为。&lt;/p&gt;&lt;p&gt;图中的实线框表示形式化验证。然而即便是未验证的虚线框部分，也可以通过建立在深度规范之上的，&lt;b&gt;基于性质（Property-based）&lt;/b&gt;的随机测试来提供极高的保障。严格的随机测试也可用于开发或调试最终用于形式化验证的组件和规范，也就是图中的其它部分。这部分的工作交由 QuickChick 完成。&lt;/p&gt;&lt;p&gt;图中的一些规范和连接组件已经作为独立的攻坚点而存在了。为了实现图中所展现的端到端连接验证的愿景，我们必须缩小关键规范之间的差距。这需要持续地研究，大部分情况下还需要不断地突破。实际上，「C-light」的规范可以说是整个图中唯一真正的深度规范，因为它已经在上层（可验证 C 的可靠性证明）和下层（CompCert 的正确性证明）中被着力运用了。然而即便是 C-light 的规范，还需要处理并发和分布式编程。同样，目前的 &lt;code&gt;CertiKOS-spec&lt;/code&gt;尚未在上层广泛应用；&lt;code&gt;x86-ISA&lt;/code&gt; 规范也尚未在下层应用；&lt;code&gt;LLVM&lt;/code&gt; 规范的模块化程度尚不足以应对工业 LLVM 的可扩展性；目前 &lt;code&gt;BlueSpec&lt;/code&gt; 和 &lt;code&gt;Verilog&lt;/code&gt; 的规范只有一个很小子集的演示原型；而 &lt;code&gt;Core-Haskell&lt;/code&gt; 规范尚未开始。&lt;/p&gt;&lt;p&gt;现有的 &lt;code&gt;CertiClight&lt;/code&gt; 和 &lt;code&gt;Verifiable C&lt;/code&gt; 都很接近深度规范了，然而二者之间的差距还比较明显。此远征计划的主要目标之一就是将基于&lt;b&gt;精化（Refinement）&lt;/b&gt;的 &lt;code&gt;CertiClight&lt;/code&gt; 方法与基于&lt;b&gt;分离逻辑（Separation Logic）&lt;/b&gt;的 &lt;code&gt;Verifiable C&lt;/code&gt; 统一到程序验证中。另一个目标就是扩展 &lt;code&gt;Verifiable C&lt;/code&gt; 的程序逻辑，使其可以验证并发和分布式的程序。&lt;/p&gt;&lt;p&gt;若能够将我们心目中的，由规范化/经验证的工件构成的一致性系统构建出来，那将会是一项重大的突破。被选择用于实现接口的，特定的经验证的组件也可以广泛地应用于此远征项目之外的情景中，例如 C 和 x86 汇编。然而，最大的回报在于它可以阐明深度规范作为抽象和模块化技术的概念基础，它还具有潜在的与数据抽象等概念等同甚至更大的实际效益，而且效益会随着规模不断增加。对于内部规范，如 &lt;code&gt;C-light&lt;/code&gt; 语言的定义，人们不必考虑「我是否为程序指定了正确的行为？」因为关于 SQL 的端到端证明已经通过 &lt;code&gt;SQL&lt;/code&gt; 和 &lt;code&gt;x86-RTL&lt;/code&gt; 的规范得证了。我们会研究构建完整系统的&lt;b&gt;语用学（Pragmatics）&lt;/b&gt;，其暴露的规范仅涉及 Verilog 和 SQL 的语义，确保对于所有的中间实现和验证都有的可靠的措施。&lt;/p&gt;&lt;blockquote&gt;译注：&lt;b&gt;语用学（Pragmatics）&lt;/b&gt;主要研究&lt;b&gt;语境（Context）&lt;/b&gt;对语言含义产生的影响以及做出的贡献。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;目录&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/75028703&quot; class=&quot;internal&quot;&gt;深度规范科学（DeepSpec）简介：科研篇&lt;/a&gt;&lt;/p&gt;&lt;p&gt;深度规范科学（DeepSpec）简介：教育篇&lt;/p&gt;&lt;p&gt;深度规范科学（DeepSpec）简介：项目篇&lt;/p&gt;&lt;p&gt;深度规范科学（DeepSpec）简介：人物篇&lt;/p&gt;</description>
<author>Oling Cat</author>
<guid isPermaLink="false">2019-08-06-75028703</guid>
<pubDate>Tue, 06 Aug 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>用Rust愉悦地编写Parser Combinator</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-08-04-76283535.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/76283535&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-afdf2f96257fd7725ea091c786d4dcbb_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;本人有个小小的习惯，就是在学习一门语言的开始，为了熟悉这门语言的基础设施，我都会写一个最最简单的parserc（当然那些9012年都没有支持泛型的语言，就不写了）。&lt;/p&gt;&lt;p&gt;这次就试着用Rust来写一个。&lt;/p&gt;&lt;h2&gt;从Iterator中来&lt;/h2&gt;&lt;p&gt;用过Rust的Iterator的人，一定会觉得这用起来十分的愉悦，这说明Iterator设计得很不错。而parserc的使用方式其实和使用Rust的Iterator的方式十分相似的——先将小的组合子构造成大的组合子，然后再使用，parserc是&lt;code&gt;.parse()&lt;/code&gt;，Iterator是&lt;code&gt;.next()&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;所以借鉴一下Iterator的思路，Rust版parserc也试着由这几部分构成：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;parser的trait&lt;/li&gt;&lt;li&gt;一些adapter&lt;/li&gt;&lt;li&gt;自定义一些combinator&lt;/li&gt;&lt;li&gt;组合出来的一些combinator&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;用起来大概是这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// a+(b|c)
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aaab_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;aaab&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aaab_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;Parser trait&lt;/h2&gt;&lt;p&gt;先定义parser的一般行为&lt;code&gt;parse&lt;/code&gt;，“照搬”Iterator的结构。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#[derive(Clone, Debug)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Haskell中，最简单的parse function的类型是&lt;code&gt;String -&amp;gt; Maybe (a, String)&lt;/code&gt;：吞进去一个String，得到解析结果a，还有未匹配的字符串，或者没有结果，也就是匹配失败。这里也采用了类似的结构，有所不同的是，因为Rust是有mut的，可以直接改变状态，于是可以去掉用返回值表示的状态，改为可变引用；然后，parse的状态加上了行和列，为了方便，用字符迭代器表示要解析的字符串。&lt;/p&gt;&lt;h2&gt;从零开始的Parser&lt;/h2&gt;&lt;p&gt;有了parser trait，我们可以来定义一个简单的combinator：&lt;code&gt;char&lt;/code&gt;用来匹配一个字符。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;sd&quot;&gt;/// char
&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 要判断的字符
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 解析结果的类型是字符型
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 判断字符是否相等
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 更新位置
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 错误恢复
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在就可以使用char这个combinator了&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;aaab&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;复杂一点点：&lt;code&gt;satisfy&lt;/code&gt;组合子，用来判断字符是否满足某个表达式：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Satisfy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 表达式
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satisfy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 判断下个字符是否满足表达式
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 更新位置
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 错误恢复
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;satisfy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Satisfy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satisfy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用起来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;aaab&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_uppercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 匹配大写字符
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来可以用类似的方法定义很多很多的combinator了，比如匹配一段字符的，匹配数字的，甚至匹配正则表达式的。（然而我没写）&lt;/p&gt;&lt;p&gt;还有，错误恢复的逻辑是需要的，这单独抽出来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;一些adapter&lt;/h2&gt;&lt;p&gt;有了我们自己定义的一个个combinator之后，我们当然可以“裸着”调用，先parse a再parse b，但这样非常不composable。需要定义一些像Iterator中Map，Chain，Zip这些adapter，用来组合parser combinator。&lt;/p&gt;&lt;p&gt;那对于一个parser来说，顺序匹配&lt;code&gt;and&lt;/code&gt;，和选择&lt;code&gt;or&lt;/code&gt;是比较常用的combinator，我们先来看看怎么定义他们。&lt;/p&gt;&lt;p&gt;&lt;code&gt;and&lt;/code&gt;，顺序匹配两个combinator，取第二个combinator的结果：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;sd&quot;&gt;/// and
&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在Parser trait里加上：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Sized&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;十分简单。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;or&lt;/code&gt;，选择匹配两个组合子，若第一个失败则重新匹配第二个：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 为了保证两个组合子得到的结果具有一样的类型
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后同时在Parser trait里加上：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Sized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;map&lt;/code&gt;组合子，不进行匹配，给里面的值做变换：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;sd&quot;&gt;/// map
&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;and_then&lt;/code&gt;组合子（就是&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;，实现上下文相关的匹配）&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AndThen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndThen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 注意：这里返回的类型只有一个
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 根据第一个匹配的结果选择parser继续匹配。
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;还可以实现&lt;code&gt;many&lt;/code&gt;和&lt;code&gt;some&lt;/code&gt;组合子（匹配多次）等。&lt;/p&gt;&lt;p&gt;其实，这都是将平时使用parser function的一些普遍的pattern抽象成出来作为一些adapter而已。值的注意的是，将他们组合起来的时候，其实并没有发生parse的计算，做的仅仅是将一个个结构体包在一起而已。&lt;/p&gt;&lt;h2&gt;堆起来&lt;/h2&gt;&lt;p&gt;总之，我们可以将parser组合起来了，名副其实的combinator：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// a+(b|c)
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aaab_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过其实到目前为止还是“暗含危机”的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 匹配数字
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_uppercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 数字是偶数，则接下来匹配大写字母
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 数字是奇数，则接下来匹配小写字母
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码逻辑是很简单，也是很常见的需求。但是这段代码是无法通过编译的。&lt;/p&gt;&lt;p&gt;为什么呢？给读者思考2秒钟……&lt;/p&gt;&lt;p&gt;1……&lt;/p&gt;&lt;p&gt;2……&lt;/p&gt;&lt;p&gt;ok！揭晓：&lt;b&gt;是因为两个satisfy返回的组合子类型不一样！&lt;/b&gt;（别忘了在Rust里，每一个闭包的类型都是不一样的）&lt;/p&gt;&lt;p&gt;这的确是个棘手的问题呢！如果&lt;code&gt;and_then&lt;/code&gt;里不能放不同的parserc，这个功能不就是残废的吗？&lt;/p&gt;&lt;h2&gt;静中生动&lt;/h2&gt;&lt;p&gt;到目前为止，咱们的parserc都是静态派分的，还并没有用到动态派分的功能。事实上上面遇到的问题，闭包就常常会有，这时候就要用到&lt;b&gt;trait object&lt;/b&gt;了。&lt;/p&gt;&lt;p&gt;所谓trait object一般指的是一个指向类型为&lt;code&gt;dyn trait&lt;/code&gt;的对象的胖指针。比如说实现了&lt;code&gt;Fn()&lt;/code&gt;的闭包都可以被装到&lt;code&gt;Box&amp;lt;dyn Fn()&amp;gt;&lt;/code&gt;的指针中。而因为&lt;code&gt;Box&amp;lt;dyn Fn()&amp;gt;&lt;/code&gt;也实现了&lt;code&gt;Fn()&lt;/code&gt;，所以也可以当做函数被调用。在这里trait object就做了「类型擦除」的工作。&lt;/p&gt;&lt;p&gt;同样的，我希望parserc也可以被包在Box或者其它指针中成为trait object，消除上面遇到的问题：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_uppercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 别忘了要型转
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，现在是不行的，因为&lt;code&gt;Box&amp;lt;dyn Parser&amp;gt;&lt;/code&gt;还没实现Parser，现在加上：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 别忘了加?Sized，因为dyn trait是DST，是不确定大小的类型
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Sized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// deref一次&amp;amp;，一次Box，不然就会递归调用
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其它指针的也可以加上（&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;到目前为止，就得到了一个很简单地Rust版parserc。写Rust，脑子里还是少带点monad，写起来还是十分愉悦的。想起知乎上也有篇文章是Rust版parsec，好像是很复杂很复杂的，各种Rc什么的，不知道这里要实现类似的功能要不要变得如此复杂呢……？&lt;/p&gt;&lt;p&gt;不过就算写了个parserc，我觉得我还是没有入门rust，毕竟前面还有啥Send/Sync，async/await，unsafe等着我。（诶，你说async/await还是没有稳定？）&lt;/p&gt;&lt;h2&gt;后记&lt;/h2&gt;&lt;p&gt;其实在我大半年前刚接触Rust的时候，我就干过这样的事。想0基础，硬撸parserc，结果被rustc打得鼻青脸肿，直接导致了我后来一直都没有再碰Rust，直至到上个学期末试着用Rust写操作系统的作业。。&lt;/p&gt;&lt;p&gt;为了再现当时的惨像，我又写了过去的代码：&lt;/p&gt;&lt;p&gt;当时的想法就是直接将Haskell的代码搬过去（java和scala的parserc我也是这样做的），直接包一个Parser的类型&lt;code&gt;String -&amp;gt; Maybe (a, String)&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 不过当时不是这样的，是用Box将里面的parse function包起来
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;PhantomData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;嗯，第一个组合子就碰壁了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_a&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;PhantomData&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;报错是&lt;code&gt;cannot move out of captured outer variable in an  Fn closure&lt;/code&gt;。嘛，现在明白原因了，因为Fn是“可以多次调用的闭包”，但是当调用parser的时候，x就被move出来了，就不能调用第二次了。为了方便就给A加上了Clone的约束。&lt;/p&gt;&lt;p&gt;接下来是&lt;code&gt;and_then&lt;/code&gt; (&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;)，记得当时死活写不出来的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and_then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                               &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;……？写出来了？&lt;code&gt;or&lt;/code&gt;(&lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;)呢？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                 &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;or_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;satisfy&lt;/code&gt;组合子&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;satisfy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;……………………瞬间有一种之前的代码白给了的感觉。死活想不起来，为什么之前写不出来。不过，按照设计模式上说，还是前面的设计比较好一点，在usage也不需要写后面impl一串东西。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;后后记：又尝试将parse function用Box包起来之后，生命期就变得复杂了，我当时没搞懂的估计也就是这个……现在折腾一下也ok：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// parse function生命期为&amp;#39;f，A活的至少比parse function久
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;: &lt;span class=&quot;na&quot;&gt;&amp;#39;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;&amp;#39;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>脚趾头</author>
<guid isPermaLink="false">2019-08-04-76283535</guid>
<pubDate>Sun, 04 Aug 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>AST with Scope</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-07-25-75073557.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/75073557&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AST是用来表示语法构造的数据结构，而在大多数语言中都有“变量”的概念。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;那么应在AST中用什么方式表示一个“变量”呢？&lt;/li&gt;&lt;li&gt;怎么进行变量的替换呢？&lt;/li&gt;&lt;li&gt;怎么进行变量作用域的检查呢？&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;First-Order Abstract Syntax&lt;/h2&gt;&lt;p&gt;最简单直接的方法就是直接用字符串保存变量名，以lambda calculus为例：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种AST被称为FOAS，一般是parse完得到的。但这种裸的AST几乎不包含任何信息，变量和作用域之间&lt;i&gt;没有直接的关系&lt;/i&gt;，bindings也只是由&lt;i&gt;匹配字符串&lt;/i&gt;来表示。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在这个层面上对AST操作是十分不安全的，稍不注意就可能改变了语义&lt;/b&gt;。比如说不带更名的substitution：&lt;code&gt;(λy.λx.y)x&lt;/code&gt;→&lt;code&gt;λx.x&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;若要写出正确的substitution还得花点小心思，这是wiki上lambda calculus的substitution的定义（少了一种情况）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;x[x := N]       ≡ N
y[x := N]       ≡ y, if x ≠ y
(M1 M2)[x := N] ≡ (M1[x := N]) (M2[x := N])
(λx.M)[x := N]  ≡ λx.M
(λy.M)[x := N]  ≡ λy.(M[x := N]), if x ≠ y, provided y ∉ FV(N)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;“翻译到”haskell：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;       &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fvs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newName&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;fvs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;vs0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fvs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; 

&lt;span class=&quot;nf&quot;&gt;newName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;newName&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时，这种替换效率很低。&lt;/p&gt;&lt;p&gt;我认为AST里面带上scope的信息是很必要的（本身字符串就表达不了变量名“指代”这样的语义），或许可以为之后的分析和优化提供更多的信息，主要是防止AST变换导致语义发生改变。&lt;/p&gt;&lt;h2&gt;High-Other Abstract Syntax&lt;/h2&gt;&lt;p&gt;HOAS一种十分简洁的带有scope信息的AST：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; 
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它直接将meta language的binding借了过去：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;omega&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;suc&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;甚至将求值器也借了过来。substitution直接就是apply。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而且HOAS的这种substitution特别的快。&lt;/p&gt;&lt;p&gt;不过HOAS的缺点也是十分明显的，我们不能“看进”一颗HOAS里，于是就不能对其做很多操作，比如pretty print、优化等。当然现在有一个比较简单的方法，为HOAS开个“洞”，通过这个“洞”看到里面的东西：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hole&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- store some meta objects&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在就可以写一个pretty print了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;pretty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pretty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Hole&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&amp;#34;(lam &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;. &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;succ&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Hole&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但就算是这样，HOAS的性质还是极差的（顺便还有PHOAS这样的改版，连evaluator都写不顺）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;无法实现Functor, Travesable, Foldable等typeclass，更不要说Monad了&lt;/li&gt;&lt;li&gt;在有dt的语言里，HOAS过不了strictly positive check(Agda, Coq)，也过不了total check。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所以一般只把HOAS用临时要求值的情况下，比如dt的type checker里可以用到，&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Normalisation_by_evaluation&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HOAS可以拿到normal form&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;De Bruijn Indices&lt;/h2&gt;&lt;p&gt;在LC(lambda calculus)中，这是一种用索引来指代变量的表示法：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8f4a16126b728854fcea13ba95b71a74_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;208&quot; data-rawheight=&quot;61&quot; class=&quot;content_image&quot; width=&quot;208&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8f4a16126b728854fcea13ba95b71a74_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;208&quot; data-rawheight=&quot;61&quot; class=&quot;content_image lazy&quot; width=&quot;208&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-8f4a16126b728854fcea13ba95b71a74_b.jpg&quot;/&gt;&lt;figcaption&gt;λx. (λy. y (λz. z)) (λy. x y)&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;代表一个变量的索引 为 距离 该变量所定义的 作用域之间 的距离（之间嵌套了多少个作用域），比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;λx. x&lt;/code&gt;就是&lt;code&gt;λ 1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;λx. λy. λz. x z (y z)&lt;/code&gt;就是&lt;code&gt;λ λ λ 3 1 (2 1)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这种表示法不仅干掉了α-conversion，还干掉了shadow和capture，处理起来会方便不少（疑似）。当然，这种表示法不单单可以用在LC上，在所有有“变量”/“作用域”的语言中都可以用这样一种方式来表示变量。&lt;/p&gt;&lt;p&gt;（其实用索引代表变量是一个很常见的操作）（对了 除了dbi，还有co-dbi）&lt;/p&gt;&lt;p&gt;将DBI应用在AST上，我们将变量区分为“绑定”/“自由”变量：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;稍微抽象一下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 表示有一个Bound Var的作用域&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; 
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 自由变量不一定用String表示&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;顺便定义两个组合子，一个用于将自由变量提出，一个用于替换：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;succ&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;succ&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如可以用来定义一些smart constructor和evaluator：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unScope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在这个AST可以看做一个放着FV的容器，并实现了Functor，Foldable，Traversable（甚至可以实现Monad），可以通过一些通用的函数对AST进行操作，比如说判定一颗语法树对应的项是否是闭项：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- True&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DBI是一个很好的让变量带上作用域信息的方案，但是就上面定义的AST的定义来说还不够安全，还无法禁止构造像&lt;code&gt;Lam (BV 2)&lt;/code&gt;这样的不合法项。&lt;/p&gt;&lt;h2&gt;DBI in dependent type&lt;/h2&gt;&lt;p&gt;如果在有dependent type的语言下，上面的问题就很好解决了，只需要限制DBI在每个项的大小就好：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kt&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fin&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 新的作用域 变量的索引可以加一&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 是否可以实现 Monad (Scope n f)?&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Bound Variable, 限制index小于n&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 闭项&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Closed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Closed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- demo&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;demo1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;demo1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;demo2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Closed&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;demo2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;demo3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;demo3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加上那两个重要的组合子，但这里需要点证明：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weaken&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weaken&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FS&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decEq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Yes&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;believe_me&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
                        &lt;span class=&quot;c1&quot;&gt;-- 抱歉，我偷懒了&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一种简单直接的方法，非要说缺点的话，就是有dt的语言实在是太少了。不过用上了dt，限制也会很大，这里就很难进一步抽象，abstract和instantiate就只能依赖于Expr了。&lt;/p&gt;&lt;p&gt;一个类型index上一个值之后，就很难实现其它的typeclass了。&lt;/p&gt;&lt;h2&gt;DBI as a nested datatype&lt;/h2&gt;&lt;p&gt;有些dt是可以编码进数据结构里的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以编码为：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;infixr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; 
  &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 长度为3的vec&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，下面这种要麻烦得多，且一些关于长度的性质会很难表达（要上TypeFamilies，DataKinds等等扩展）。但是用于限制长度来说，这种足够了。&lt;/p&gt;&lt;p&gt;可以受此启发，dbi也可以编码到结构中：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Nothing             =&amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Just Nothing        =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Just (Just Nothing) =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Just (Just (Just a)) =&amp;gt; Free var&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- :: Maybe (Maybe (Maybe a)) -- &amp;lt; 3&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- λx.λy.x&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam (BV 1)) &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam (Var (Just Nothing)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- λx.λy.x y z&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam (BV 1 @@ BV 0 @@ FV &amp;#34;z&amp;#34;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam (Var (Just Nothing) @@ Var Nothing @@ Var (Just (Just &amp;#34;z&amp;#34;))))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Lam _ &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- hole 的类型是 Expr (Maybe a)，能填Var Nothing，也就是BV 0&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam _)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- hole 的类型是 Expr (Maybe (Maybe a))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 能填Var (Just Nothing)，也就是BV 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 或者填 Var Nothing，也就是BV 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（注：&lt;code&gt;forall a. Expr a&lt;/code&gt;或者&lt;code&gt;Expr Void&lt;/code&gt;是闭项）&lt;/p&gt;&lt;p&gt;像之前那样稍作抽象，将Scope拿出来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unScope&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ap&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unScope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadTrans&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;lift&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftM&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，那两个组合子也只需要依赖于Scope就可以了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么AST就可以这样定义了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ap&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 这个monad可用来遍历Expr里的Free var&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- smart constructor&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; 

&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就很inductive，很abstract，很safe，很nice。（来自于&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.cs.ox.ac.uk/richard.bird/online/BirdPaterson99DeBruijn.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;paper&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;到目前为止，我们就得到了一个比较完整的在AST中表示“变量”/“作用域”的方案（并不）。haskell的&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//hackage.haskell.org/package/bound&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bound&lt;/a&gt;包就有很完整的实现。&lt;/p&gt;&lt;h2&gt;Scope Check&lt;/h2&gt;&lt;p&gt;我们当然可以这样scope check：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这样操作稍微low了一点。如果能将裸的AST转换为上面介绍的几种带Scope的AST，相当于“证明了”原表达式是个闭项，也就是过了scope check：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; 
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarE&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppE&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LamE&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarT&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LamT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 为原AST附加上scope信息，也相当于证明了原表达式是闭项&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fromExpr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fromExpr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HashMap&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VarE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LamE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LamT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们还可以进一步从dbi的AST的到HOAS。因为HOAS和dbi带有的信息是一致的，所以它们之间还能互转。这里留作习题。&lt;/p&gt;&lt;p&gt;当一个AST过了scope check之后，就可以着手type check了，接下来的事情也是十分有趣的，先给自己挖个坑，再写一篇AST with Type。&lt;/p&gt;&lt;p&gt;有一个很有意思的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/AndrasKovacs/elaboration-zoo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;项目&lt;/a&gt;，讲的是dt的type check和elaboration，有兴趣可以去看一下。&lt;/p&gt;</description>
<author>脚趾头</author>
<guid isPermaLink="false">2019-07-25-75073557</guid>
<pubDate>Thu, 25 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>可持久化的trie以及二进制trie</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-07-10-73010152.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/73010152&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9f45089d17fb0ea88ebe8c4252b17473_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;这里不会对 trie 本身进行介绍。&lt;/p&gt;&lt;p&gt;让我们首先从一道题目说起 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/916/D&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CF916D Jamie and To-do List&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题目要求设计出一种储存字符串的优先级的数据结构，支持如下操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;set a x，将字符串 a 的 priority 设置为x，假若a原本存在，则将原优先级修改为x。&lt;/li&gt;&lt;li&gt;remove a，将字符串 a 的记录移除，假若 a 不存在，则do nothing。&lt;/li&gt;&lt;li&gt;query a，查询有多少个字符串的 priority 严格小于 a&lt;/li&gt;&lt;li&gt;undo d，假设当前是第 i 次操作，则将结构恢复到第 i-d-1 操作后的状态&lt;/li&gt;&lt;li&gt;操作次数上限为10^5，字符串长度不会超过15，x 范围是[1,10^9]，保证 undo 操作合法&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我们首先不考虑 undo 操作的话，经过思考，我们会发现应该需要两个数据结构，第一个用于维护字符串和 priority 的对应关系；第二个用于储存所有的 priority 用于查询 rank。显然，第一个结构随便用一个 hashmap 或者 trie，第二个使用一个能够查询 rank 的BST，e.g. treap, splay就能够完成。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;ds&amp;lt;-&amp;gt; data structure &lt;/p&gt;&lt;p&gt;然而，现在+上了undo操作，这意味着我们需要把历史记录保存下来。具体实现便是使用两个数组 firstds[max_operation_num], secondds[max_operation_num] 在进行第i次操作时便读取 firstds[i-1] 和 secondds[i-1] 中的数据结构，然后将修改之后的数据结构放入 firstds[i] 和 secondds[i] 中，注意！我们这里不能够对第i-1位上的两个数据结构进行任何修改。&lt;/p&gt;&lt;p&gt;假设我们依然采用之前的 hashmap 和 BST，每一次操作我们都需要将之前的结构 copy 一遍然后再进行操作，无论是空间上还是时间上都感觉......太暴力了。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;让我们考虑一下第一个结构使用 trie 以及 set 一个原本不存在的字符串的情况。无妨说第一条指令是 set aaa 5，insert 之后的结果就是&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;916&quot; data-rawheight=&quot;522&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;916&quot; data-original=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;916&quot; data-rawheight=&quot;522&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;916&quot; data-original=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_b.jpg&quot;/&gt;&lt;figcaption&gt;图1&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;第二条指令是 set bbb 4，再次 insert 之后的结果就是&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;986&quot; data-rawheight=&quot;591&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;986&quot; data-original=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;986&quot; data-rawheight=&quot;591&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;986&quot; data-original=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_b.jpg&quot;/&gt;&lt;figcaption&gt;图2&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可以看出，前后的 trie 仅仅只有一条链的变化。说得更加详细一点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;一个 set a x 操作后的 trie 必然会至少多出一个新节点 n，就是用于存储新字符串优先级的节点(图一中的5和图二中的4，因为该字符串原本不存在&lt;/li&gt;&lt;li&gt;对于1中所说的新节点 n，我们需要一个新节点 n&amp;#39; 来使 n&amp;#39; 成为 n 的父亲，其中 n&amp;#39; 通过 a 中的最后一个字符指向 n&lt;/li&gt;&lt;li&gt;由于 n&amp;#39; 同样是一个新节点，我们依然需要一个新节点 n&amp;#39;&amp;#39; 来使 n&amp;#39;&amp;#39; 成为 n&amp;#39; 的父亲，其中 n&amp;#39;&amp;#39; 通过a中的倒数第二个字符指向 n&amp;#39;&lt;/li&gt;&lt;li&gt;......按照上述做法不断往上新建节点，最终就形成了一条链&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;同样也是前后只有一条链的变化，很容易让人联想到可持久化线段树中的操作。&lt;/p&gt;&lt;p&gt;因此我们 copy 实际上并不是 copy 整个 trie 树，而是&lt;b&gt;仅仅只是新建一条链，剩下的节点和之前的树共用&lt;/b&gt;。下图是存有 aaa 的 trie 中先插入 aab 再插入 cc 的过程。第一排代表着理论上发生的情况，第二排是实际上共用了节点的情况&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1525&quot; data-rawheight=&quot;815&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1525&quot; data-original=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1525&quot; data-rawheight=&quot;815&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1525&quot; data-original=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_b.jpg&quot;/&gt;&lt;figcaption&gt;图3&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;刚刚讨论的情况是 set 一个原本不存在的字符串，假若是 set 是更新一个字符串的 priority 呢？按照如上的分析，结果是一样的，同样是修改了一条链而已。对于 remove a 操作呢？看做 set a 0 即可。可持久化 trie 的基本思想到此结束&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;二进制 trie：用于储存整数的 trie，可以用于查询 rank。对于一个 int，我们由高位向低位储存一个整数。与普通 trie 不同的是，二进制 trie 在插入的时候并不是仅仅是最后一个节点有特别的值，而是从根节点开始到最后一个节点整条链上的值都进行修改。例如，向二进制 trie中插入1、2和3如图4&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1377&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1377&quot; data-original=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1377&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1377&quot; data-original=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_b.jpg&quot;/&gt;&lt;figcaption&gt;图4&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们可以发现，从根节点到某一个节点n所经过的路径 path，节点n上的对应的值就是以 path为前缀的 int 出现次数。那么对应某一个 int n 我们如何查询它的 rank 呢？算法描述如下：&lt;/p&gt;&lt;p&gt;定义局部变量 now=root，ans=0表示答案，迭代变量 i : 从 n 的最高位-&amp;gt;n 的最低位&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now经过0所指向的节点上的值&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now经过i所指向的节点&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正确性？想一想就知道了嘛&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最后，题目的 AC 代码:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//codeforces.com/contest/916/submission/34342389&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;好懂的递归写法&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//codeforces.com/contest/916/submission/56698896&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;可读性没有上面好的循环写法&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在循环写法中 set 与 add 的时候为什么需要一个 tmp 变量呢？答案是我们需要让新节点指向原来的相同位置上的节点的子节点来达到共用的效果，tmp 变量跟随着 now 同时向下移动来进行 copy node 的操作。假若 tmp 为空了，那么也就没有子节点可以共用了，tmp 也就没有意义了。&lt;/p&gt;</description>
<author>不会编程的Spica</author>
<guid isPermaLink="false">2019-07-10-73010152</guid>
<pubDate>Wed, 10 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>从单位半群到单子</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-07-04-70609434.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/70609434&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接触函数式编程的人越来越多了，学习Haskell的人也多了起来。很多人在逐渐深入学习的过程中，都不可避免的会遇到一个Haskell等函数式编程中一个常用的重要概念---单子（monad）。&lt;/p&gt;&lt;p&gt;单子是什么呢？这是一个困扰很多人的问题。很多时候貌似搞懂了，可回过头来仔细一想，又不明白了，总是觉得有那么一层不清晰的东西蒙在上面。本文试图从单位半群（monoid）开始一步一步的揭开这层不清晰的东西，带领大家看到真正的单子（monad）的样子。&lt;/p&gt;&lt;p&gt;&lt;b&gt;读者提醒：对已经会在实际编程中熟练的使用单子，但对深究单子的数学意义和范畴论不感兴趣的朋友，可以不用继续往下阅读了。以下内容对在编程实践中更好的使用单子帮助不大，不过对理解函数式编程理论中的概念和Haskell中的一些高深的代码会有一个更好的基础。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;约定：下面统一用中文的单子表示monad，单位半群表示monoid。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们常常听到，单子就是一个自函子范畴上的单位半群。既然单子就是一个单位半群，那我们就从单位半群开始，看看单子究竟是什么。&lt;/p&gt;&lt;p&gt;&lt;b&gt;集合上的单位半群&lt;/b&gt;&lt;/p&gt;&lt;p&gt;单位半群我们已经很熟悉了，当集合 S 上存在一个闭合的二元运算 *: S &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctimes&quot; alt=&quot;\times&quot; eeimg=&quot;1&quot;/&gt; S -&amp;gt; S， 和一个单位元 e。对集合 S 中的任意元素 a、b、c，满足如下的性质，我们就说这个集合是一个单位半群。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;              e * a = a                        --- 左单位元定律
              a * e = a                        --- 右单位元定律
        (a * b) * c = a * (b * c)              --- 结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是单位半群的元素和运算的示意图&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;576&quot; data-rawheight=&quot;849&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;576&quot; data-original=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;576&quot; data-rawheight=&quot;849&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;576&quot; data-original=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_b.jpg&quot;/&gt;&lt;figcaption&gt;单位半群的二元运算&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;605&quot; data-rawheight=&quot;833&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;605&quot; data-original=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;605&quot; data-rawheight=&quot;833&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;605&quot; data-original=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_b.jpg&quot;/&gt;&lt;figcaption&gt;左单位元定律&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;571&quot; data-rawheight=&quot;819&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;571&quot; data-original=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;571&quot; data-rawheight=&quot;819&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;571&quot; data-original=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_b.jpg&quot;/&gt;&lt;figcaption&gt;右单位元定律&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;（还有结合律的图等我家小学生期末考试后再补上吧）&lt;/p&gt;&lt;p&gt;在Haskell中可以用类型类Monoid来表示：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;                       &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这就是单位元&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这就是二元运算&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mempty和mappend需要由程序员来保证满足如下的单位半群定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   mempty `mappend` a = a            --^ 左单位元定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   a `mappend` mempty = a            --^ 右单位元定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--  (a `mappend` b) `mappend` c = a `mappend` (b `mappend` c)   --^ 结合律&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们先来看一个常用的64位无符号整数组成的集合，我们知道这个集合有单位元0，其二元运算是加法 +，对任意的64位无符号整数a、b、c，有如下的性质：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;               0 + a = a                        --- 左单位元定律
               a + 0 = a                        --- 右单位元定律
         (a + b) + c = a + (b + c)              --- 加法的结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是我们可以说这个64位无符号整数组成的集合是一个单位半群，有如下的单位半群实例。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Word64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;单位元是&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;二元运算是加法&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们再来看一个更简单的布尔集合，这个集合只有True和False两个元素。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;702&quot; data-rawheight=&quot;489&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;702&quot; data-original=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;702&quot; data-rawheight=&quot;489&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;702&quot; data-original=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;  （等我家小学生期末考试后换个好看的图）&lt;/p&gt;&lt;p&gt;当二元运算是与操作 &amp;amp;&amp;amp; 时，单位元是True，得到了一个单位半群。有如下的性质：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;               True &amp;amp;&amp;amp; a = a                        --- 左单位元定律
               a &amp;amp;&amp;amp; True = a                        --- 右单位元定律
           (a &amp;amp;&amp;amp; b) &amp;amp;&amp;amp; c = a &amp;amp;&amp;amp; (b &amp;amp;&amp;amp; c)            --- 与操作的结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Haskell中，用All来表示这个单位半群。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAll&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当二元运算是或操作 || 时，单位元是False，也得到了一个单位半群。有如下的性质：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;              False || a = a                        --- 左单位元定律
              a || False = a                        --- 右单位元定律
           (a || b) || c = a || (b || c)            --- 或操作的结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Haskell中，用Any来表示这个单位半群。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAny&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他的单位半群实例就不一一举例了，有兴趣的可以看看Haskell的Data.Monoid中的例子。&lt;/p&gt;&lt;p&gt;&lt;b&gt;自态射上的单位半群&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们现在来看另一种形式的单位半群。给定一个范畴 C，我们假定这个范畴的两个对象 a 和 b 之间的所有态射组成了一个集合，叫Hom-set，简记为 C(a, b)。这个集合中的每一个元素都是 a 和 b 之间的态射。&lt;/p&gt;&lt;p&gt;当这个范畴 C 只有一个对象 a 时，对象 a 和 a 之间的态射是 a 上的自态射，a 上的所有自态射同样也组成了一个集合。根据范畴的定义，这个自态射的集合存在一个二元运算 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccdot&quot; alt=&quot;\cdot&quot; eeimg=&quot;1&quot;/&gt; ，即态射的组合运算，两个态射的组合 g &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccdot&quot; alt=&quot;\cdot&quot; eeimg=&quot;1&quot;/&gt; f 依然是一个态射，还存在一个单位元即态射 id。满足如下性质：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;               id . f = f                        --- 左单位元定律
               f . id = f                        --- 右单位元定律
          (h . g) . f = h . (g . f)              --- 态射组合的结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是一个对象上的自态射的集合 C(a, a) 就是一个单位半群。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;699&quot; data-rawheight=&quot;599&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;699&quot; data-original=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;699&quot; data-rawheight=&quot;599&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;699&quot; data-original=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_b.jpg&quot;/&gt;&lt;figcaption&gt;自态射单位半群示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在Haskell中用Endo a类型来表示这个单位半群。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;appEndo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以将多个Endo a类型的函数放到一个列表里，这样我们就可以把多个简单的步骤组合成一个复杂的步骤，这个可以定义一个foldEndo 函数来完成。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;foldEndo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;foldEndo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是将几个自态射组合成一个自态射的应用例子，给定一个数，输出一个数。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appEndo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldEndo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;幺半范畴和丰化范畴&lt;/b&gt;&lt;/p&gt;&lt;p&gt;范畴的对象之间的所有态射可以组成一个集合，具有这个性质的范畴叫局部小范畴。但还有很多范畴不具有这个性质。那我们怎么来表示一般范畴的对象之间的所有态射呢？&lt;/p&gt;&lt;p&gt;我们可以用另一个范畴上的对象来表示范畴 C 上的对象之间的所有态射，称为Hom-object，同样简记为 C(a, b)，这个范畴叫范畴 V。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;523&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;713&quot; data-original=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;523&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;713&quot; data-original=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_b.jpg&quot;/&gt;&lt;figcaption&gt;范畴 C 和 范畴 V&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;如果范畴 V 上存在张量积 ⊗ : V &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctimes&quot; alt=&quot;\times&quot; eeimg=&quot;1&quot;/&gt; V -&amp;gt; V ，同时还具有这个张量积运算的单位元 i ，满足左右单位元定律，使得有自然变换 λ: i ⊗ C(a, b) ≃ C(a, b)，和  ρ: C(a, b) ⊗ i ≃ C(a, b)。而且如果张量积运算满足结合律，即有自然变换 α: (C(c, d) ⊗ C(b, c)) ⊗ C(a,b) ≃ C(c, d) ⊗ (C(b, c) ⊗ C(a,b))。这些自然变换满足如下的同归图，为了简化图，使用a、b、c、d 来表示范畴 V 上的对象：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1235&quot; data-rawheight=&quot;574&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1235&quot; data-original=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1235&quot; data-rawheight=&quot;574&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1235&quot; data-original=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_b.jpg&quot;/&gt;&lt;figcaption&gt;幺半范畴的张量积运算的结合一致性&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;685&quot; data-rawheight=&quot;286&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;685&quot; data-original=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;685&quot; data-rawheight=&quot;286&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;685&quot; data-original=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_b.jpg&quot;/&gt;&lt;figcaption&gt;幺半范畴的单位元的左右结合一致性&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;则我们得到了幺半范畴（Monoidal Category）。可以有如下的Haskell的类型类的实例。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoidal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(,)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(,)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;snd&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fst&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;coidl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;coidr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;coassoc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr和assoc是自然同构&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coidr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coidl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;coidl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;coidr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coassoc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;coassoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr和assoc满足如下的幺半范畴的张量积运算的单位元定律和结合律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- first 和 second是Arrow的函数&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coassoc&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为一般范畴上的对象内部是不可见的，我们不能象集合那样从内部选一个元素来作为单位元。但我们可以用一个态射来表示Hom-object上的单位元，即如果可以在范畴 V 上找到态射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=j_a&quot; alt=&quot;j_a&quot; eeimg=&quot;1&quot;/&gt;: i -&amp;gt; C(a, a)，满足如下的同归图，那我们就可以把态射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=j_a&quot; alt=&quot;j_a&quot; eeimg=&quot;1&quot;/&gt;: i -&amp;gt; C(a, a) 作为 C(a, a)上的单位元。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;696&quot; data-rawheight=&quot;301&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;696&quot; data-original=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;696&quot; data-rawheight=&quot;301&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;696&quot; data-original=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;625&quot; data-rawheight=&quot;275&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;625&quot; data-original=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;625&quot; data-rawheight=&quot;275&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;625&quot; data-original=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如果范畴 C 上的态射的组合可以表示为范畴 V 上的组合运算 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccirc+&quot; alt=&quot;\circ &quot; eeimg=&quot;1&quot;/&gt; :  C(b, c) ⊗  C(a, b) -&amp;gt; C(a, c)，将两个Hom-object组合成一个Hom-object，且满足如下的同归图。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1241&quot; data-rawheight=&quot;351&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1241&quot; data-original=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1241&quot; data-rawheight=&quot;351&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1241&quot; data-original=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;则我们得到了幺半范畴 V 上的丰化范畴（Enriched Category）。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;603&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;713&quot; data-original=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;603&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;713&quot; data-original=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如果幺半范畴 V 的张量积运算是可交换的，即有自然变换 γ : C(b, c) ⊗  C(a, b) ≃ C(a, b) ⊗  C(b, c)，则幺半范畴 V 是对称幺半范畴。&lt;/p&gt;&lt;p&gt;另外如果幺半范畴 V 中的所有对象 A 都存在如下的自然同构，此时存在一对伴随函子 &lt;img src=&quot;https://www.zhihu.com/equation?tex=-+%5Cotimes+A+%5C+%5Cdashv+%5C+-%5EA&quot; alt=&quot;- \otimes A \ \dashv \ -^A&quot; eeimg=&quot;1&quot;/&gt; ，则幺半范畴 V 是闭范畴。其中&lt;img src=&quot;https://www.zhihu.com/equation?tex=B%5EA&quot; alt=&quot;B^A&quot; eeimg=&quot;1&quot;/&gt;是这个闭范畴中的一个对象，称为指数对象。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%3A+V%28X+%5Cotimes+A%2C+B%29+%5Csimeq+V%28X%2C+B%5EA%29+%3A+%5Cpsi&quot; alt=&quot;\phi: V(X \otimes A, B) \simeq V(X, B^A) : \psi&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;当幺半范畴 V 既是对称范畴又是闭范畴时，称之为对称闭幺半范畴。可以证明，对称闭幺半范畴 V 是其自身上的丰化范畴。&lt;/p&gt;&lt;p&gt;Haskell 中的 Hask 范畴就是一个幺半范畴，其张量积是Haskell的元组 (,)，单位对象是Unit，也即 ()。其结合律由 (a, (b, c)) ≃ ((a, b), c) 表示，左单位元定律由 ((), a) ≃ a 表示，右单位元定律由 (a, ()) ≃ a 表示。Hask 范畴也是一个对称幺半范畴，其交换律由 (a, b) ≃ (b, a) 表示。&lt;/p&gt;&lt;p&gt;Hask 范畴的指数对象 &lt;img src=&quot;https://www.zhihu.com/equation?tex=B%5EA&quot; alt=&quot;B^A&quot; eeimg=&quot;1&quot;/&gt; 就是函数类型 A -&amp;gt; B，且对任意对象 A，都存在指数化函子 &lt;img src=&quot;https://www.zhihu.com/equation?tex=-%5EA&quot; alt=&quot;-^A&quot; eeimg=&quot;1&quot;/&gt;  ，因此是一个对称闭幺半范畴。&lt;/p&gt;&lt;p&gt;于是我们得到Hask 范畴是其自身上的丰化范畴，单位元态射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=j_a&quot; alt=&quot;j_a&quot; eeimg=&quot;1&quot;/&gt; 是 () -&amp;gt; a，组合运算 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccirc+&quot; alt=&quot;\circ &quot; eeimg=&quot;1&quot;/&gt; 是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccdot&quot; alt=&quot;\cdot&quot; eeimg=&quot;1&quot;/&gt; : (b -&amp;gt; c) -&amp;gt; (a -&amp;gt; b) -&amp;gt; (a -&amp;gt; c)。&lt;/p&gt;&lt;p&gt;&lt;b&gt;幺半范畴上的单位半群&lt;/b&gt;&lt;/p&gt;&lt;p&gt;接下来，我们开始在幺半范畴 V 上构造一个单位半群。首先，我们来看只有一个对象 a 的范畴 C，其对象上的态射都是自态射。我们可以找到其对应的幺半范畴 V 。&lt;/p&gt;&lt;p&gt;这个幺半范畴 V 的对象表示了范畴 C 的自态射的Hom-object，简记为 C(a, a)。同样的，有张量积 ⊗ : V &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctimes&quot; alt=&quot;\times&quot; eeimg=&quot;1&quot;/&gt; V -&amp;gt; V ，这个张量积运算有单位元 i ，即有自然变换 λ: i ⊗ C(a, a) ≃ C(a, a)，和  ρ: C(a, a) ⊗ i ≃ C(a, a)。而且张量积运算满足结合律，即有自然变换 α: (C(a, a) ⊗ C(a, a)) ⊗ C(a,a) ≃ C(a, a) ⊗ (C(a, a) ⊗ C(a,a))。这些自然变换满足上面的结合律一致性和单位元左右结合一致性的同归图。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;653&quot; data-rawheight=&quot;1062&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;653&quot; data-original=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;653&quot; data-rawheight=&quot;1062&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;653&quot; data-original=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_b.jpg&quot;/&gt;&lt;figcaption&gt;自态射的Enriched V&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;类似的，我们可以证明这个幺半范畴 V 是对称闭幺半范畴，因此是其自身的丰化范畴。这个丰化范畴的单位元是态射 e: i -&amp;gt; C(a, a)，二元运算是态射mu: C(a, a) ⊗  C(a, a) -&amp;gt; C(a, a)。满足如下的左右单位元定律：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;         mu . e ⊗ id ≃ λ
         mu . id ⊗ e ≃ ρ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和结合律：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;    mu . mu ⊗ id ≃ mu . id ⊗ mu&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是我们就在幺半范畴 V 上构造出了一个单位半群，这个单位半群的单位元是态射 e，二元运算是 mu 。&lt;/p&gt;&lt;p&gt;&lt;b&gt;自函子范畴上的单位半群&lt;/b&gt;&lt;/p&gt;&lt;p&gt;对象是范畴的范畴我们称之为 &lt;b&gt;Cat&lt;/b&gt; 范畴，这个范畴的对象之间的态射是函子，例如范畴 C 到范畴 D 的函子记为 F: C -&amp;gt; D。函子之间的态射称为自然变换，例如有自然变换 α : F -&amp;gt; G 。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;658&quot; data-rawheight=&quot;526&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;658&quot; data-original=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;658&quot; data-rawheight=&quot;526&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;658&quot; data-original=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_b.jpg&quot;/&gt;&lt;figcaption&gt;Cat 范畴和函子，自然变换&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;现在我们来看只有一个对象的 &lt;b&gt;Cat&lt;/b&gt; 范畴，其对象是范畴 C，态射是范畴 C 上的自态射，也就是自函子。所有在范畴 C 上的自函子构成了一个自函子范畴，这个范畴的对象是范畴 C 上的自函子，态射是自函子之间的自然变换。&lt;/p&gt;&lt;p&gt;如果把函子的组合运算 ◦，看成是一个张量运算，两个同样的自函子的张量积也记为 M (M a)。于是有得到一系列的自函子Id，M ◦ M ，M ◦ M ◦ M ，· · · ，则这些自函子构成的自函子范畴也是一个幺半范畴，这个幺半范畴的单位对象是自函子 Id 。这个幺半范畴同时也是其自身上的丰化范畴。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;680&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;680&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;750&quot; data-original=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_b.jpg&quot;/&gt;&lt;figcaption&gt;自函子范畴是其自身的丰化范畴&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;于是同样的，我们在这个自函子范畴上得到一个单位半群，其单位元是自然变换 e: Id -&amp;gt; M，二元运算是自然变换 mu: M ◦ M  -&amp;gt; M，这就是单子。满足如下的同归图。 &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;565&quot; data-rawheight=&quot;264&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;565&quot; data-original=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;565&quot; data-rawheight=&quot;264&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;565&quot; data-original=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_b.jpg&quot;/&gt;&lt;figcaption&gt;单子的左右单位元定律&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;687&quot; data-rawheight=&quot;486&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;687&quot; data-original=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;687&quot; data-rawheight=&quot;486&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;687&quot; data-original=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_b.jpg&quot;/&gt;&lt;figcaption&gt;单子的结合律定律&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在Haskell中，单子就是一个类型构造子 M，这个类型构造子接受一个类型参数 a，构造出一个更复杂的类型 M a。同时这个类型构造子具有如下两个函数，也是两个自然变换：&lt;/p&gt;&lt;p&gt;其中一个自然变换eta: Id -&amp;gt; M，也记为eta: a -&amp;gt; M a，可以将类型 a 的值提升为更复杂的类型 M a 的值。&lt;/p&gt;&lt;p&gt;另一个自然变换 mu: M ◦ M  -&amp;gt; M，也记为mu: M (M a) -&amp;gt; M a，当我们两次应用类型构造子 M 时，会得到两层的更复杂的类型 M (M a)。自然变换 mu 可以将这个两层的更复杂的类型 M (M a) 的值，拍扁为稍简单的只有一层的类型 M a 的值。&lt;/p&gt;&lt;p&gt;自然变换eta 和自然变换mu满足单位半群也即单子的左右单位元定律和结合律定律。&lt;/p&gt;&lt;p&gt;单子的左右单位元定律&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;               mu . eta ◦ id ≃ id
               mu . id ◦ eta ≃ id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;单子的结合律定律&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;            mu . mu ◦ id ≃ mu . id ◦ mu&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在数学的范畴论中，用符号 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ceta&quot; alt=&quot;\eta&quot; eeimg=&quot;1&quot;/&gt; 来表示 eta, 用符号 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu&quot; alt=&quot;\mu&quot; eeimg=&quot;1&quot;/&gt; 来表示 mu。而eta ◦ id 表示为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ceta+M&quot; alt=&quot;\eta M&quot; eeimg=&quot;1&quot;/&gt;，id ◦ eta则表示为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=M+%5Ceta&quot; alt=&quot;M \eta&quot; eeimg=&quot;1&quot;/&gt;，相应的mu ◦ id 表示为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu+M&quot; alt=&quot;\mu M&quot; eeimg=&quot;1&quot;/&gt;，id ◦ mu 则表示为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=M+%5Cmu&quot; alt=&quot;M \mu&quot; eeimg=&quot;1&quot;/&gt;。于是我们有常见的范畴论描述的单子的左右单位元定律：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu+%5Ccdot+%5Ceta+M+%5Csimeq+%5Cmu+%5Ccdot+M+%5Ceta&quot; alt=&quot;\mu \cdot \eta M \simeq \mu \cdot M \eta&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;和结合律定律：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu+%5Ccdot+%5Cmu+M+%5Csimeq+%5Cmu+%5Ccdot+M+%5Cmu&quot; alt=&quot;\mu \cdot \mu M \simeq \mu \cdot M \mu&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;于是，我们就得到了数学上的精确描述的Haskell单子 M。在单子 M 构造的自函子范畴中，存在一个单位半群，使得无论我们应用这个单子 M 在类型 a 上多少次（0次或多次），我们都可以将其看成是只应用了一次单子 M 在类型 a 上。我想这就是为何叫 M 是单子的原因吧。自然变换 eta 和 mu 满足的单位元定律和结合律则保证了单子 M 的自相似性。&lt;/p&gt;&lt;p&gt;在Haskell中，有如下的monad类型类来表示单子。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return和join需要由程序员来保证满足如下的单子定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   join . return      = id               --^ 左单位元定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   join . fmap return = id               --^ 右单位元定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   join . join  =  join . fmap join      --^ 结合律&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个简单的单子的例子是Maybe，这是一个很常用的类型构造子，Maybe a表示要么什么都没有，要么正好有类型 a 的一个值。在C++中是Optional模板类，在Rust中是Option。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maybe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maybe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以很容易证明上面的Maybe单子满足单子的单位元定律和结合律。&lt;/p&gt;&lt;p&gt;另一个常用的单子是列表，也就是Haskell中的类型构造子 [ ]，[a] 表示要么没有元素，要么有一个元素，要么有二个元素，要么有三个元素，· · · 。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样可以证明列表单子 [ ] 满足单子的单位元定律和结合律。&lt;/p&gt;&lt;p&gt;&lt;b&gt;结语&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这篇文章主要给大家讲了单子为什么是一个单位半群，这个单位半群的基底也即自函子的幺半范畴是怎么样的。特别是讲明白了为什么单子这个单位半群的单位元是一个自然变换eta: I -&amp;gt; M，这是很多人理解单子的一个大的障碍。&lt;/p&gt;&lt;p&gt;最后，我们再总结一下：&lt;/p&gt;&lt;p&gt;&lt;b&gt;单子就是一个自函子 M 加上单位半群的两个自然变换 eta 和 mu，这两个自然变换满足单子的左右单位元定律和结合律。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;限于篇幅，很多地方讲的不够详细，有兴趣的可以看下面的参考链接。&lt;/p&gt;&lt;p&gt;&lt;b&gt;参考链接：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//bartoszmilewski.com/2018/05/16/free-monoidal-functors-categorically/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;bartoszmilewski.com/201&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;8/05/16/free-monoidal-functors-categorically/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//bartoszmilewski.com/%3Fs%3Denriched%2Bcategory&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;bartoszmilewski.com/?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;s=enriched+category&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>parker liu</author>
<guid isPermaLink="false">2019-07-04-70609434</guid>
<pubDate>Thu, 04 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.四</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-07-01-71767830.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/71767830&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3af51a30d83fa9ef4677cd19ee72b83d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;终于我们可以给&lt;b&gt;MLsub&lt;/b&gt;添加一个类型界面了&lt;b&gt;Type Interface&lt;/b&gt;自从我们上次重新整理了类型规则之后我们现在的主要问题是找到&lt;i&gt;主要类型方案&lt;/i&gt; &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta_p%5D%5Ctau_p&quot; alt=&quot;[\Delta_p]\tau_p&quot; eeimg=&quot;1&quot;/&gt; 再有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi%2Ce&quot; alt=&quot;\Pi,e&quot; eeimg=&quot;1&quot;/&gt; 并有以下关系&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi+%5CVdash+e%3A%5B%5CDelta%5D%5Ctau%5C+iff%5C+%5B%5CDelta_p%5D%5Ctau_p%5Cleq%5E%5Cforall%5B%5CDelta%5D%5Ctau&quot; alt=&quot;\Pi \Vdash e:[\Delta]\tau\ iff\ [\Delta_p]\tau_p\leq^\forall[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;我们知道&lt;b&gt;AlgoW(Algorithm W)&lt;/b&gt;使用 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma%2Ce&quot; alt=&quot;\Gamma,e&quot; eeimg=&quot;1&quot;/&gt;使用替换规则去更改 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma%2C%5Ctau&quot; alt=&quot;\Gamma,\tau&quot; eeimg=&quot;1&quot;/&gt; , 假如&lt;b&gt;e&lt;/b&gt;他是关闭的(closed)然后我们有个主要类型方案 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5D%5Ctau_p+&quot; alt=&quot;[]\tau_p &quot; eeimg=&quot;1&quot;/&gt; , 所以他就会满足(上回讲的那个定理6)&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A+%5Ctau%5C+iff%5C+%5Crho%28%5Ctau_p%29%5Cleq%5Ctau%5C+for%5C+some%5C+subtitution%5C+%5Crho&quot; alt=&quot;\vdash e: \tau\ iff\ \rho(\tau_p)\leq\tau\ for\ some\ subtitution\ \rho&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;所以我们必须创建一个函数 &lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3Be%29&quot; alt=&quot;P(\Pi;e)&quot; eeimg=&quot;1&quot;/&gt;, 这个函数会接受所有的极类型环境 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi&quot; alt=&quot;\Pi&quot; eeimg=&quot;1&quot;/&gt; 和一个语句&lt;b&gt;e&lt;/b&gt;然后构造一个主要类型方案(我们只好假设用户没瞎写 ,&lt;b&gt;e&lt;/b&gt;有类型) &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3B%5Chat%7Bx%7D%29+%3D+%5CPi%28%5Chat%7Bx%7D%29%5C%5C+P%28%5CPi%3Bx%29+%3D+%5Bx%3Aa%5Da%5C%5C+P%28%5CPi%3Blet%5C+%5Chat%7Bx%7D%3De_1%5C+in%5C+e_2%29+%3D+%5B%5CDelta_1%5Csqcap%5CDelta_2%5D%5Ctau_2%5C%5Cwhere%5B%5CDelta_1%5D%5Ctau_1+%3D+P%28%5CPi%3Be_1%29%5C%5C+and%5B%5CDelta_2%5D%5Ctau_2%3DP%28%5CPi+%2C+%5Chat%7Bx%7D%3A%5B%5CDelta_1%5D%5Ctau_1%29&quot; alt=&quot;P(\Pi;\hat{x}) = \Pi(\hat{x})\\ P(\Pi;x) = [x:a]a\\ P(\Pi;let\ \hat{x}=e_1\ in\ e_2) = [\Delta_1\sqcap\Delta_2]\tau_2\\where[\Delta_1]\tau_1 = P(\Pi;e_1)\\ and[\Delta_2]\tau_2=P(\Pi , \hat{x}:[\Delta_1]\tau_1)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;我们为了实现 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+&quot; alt=&quot;\lambda &quot; eeimg=&quot;1&quot;/&gt; 类型推导 , 我们不得不使用一种很简单的技巧 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta_x&quot; alt=&quot;\Delta_x&quot; eeimg=&quot;1&quot;/&gt;表示 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x&quot; alt=&quot;x&quot; eeimg=&quot;1&quot;/&gt; 被拿出 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt;, 同时添加规则 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta%28x%29&quot; alt=&quot;\Delta(x)&quot; eeimg=&quot;1&quot;/&gt; , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta%28x%29%3D%5Ctop&quot; alt=&quot;\Delta(x)=\top&quot; eeimg=&quot;1&quot;/&gt; 用于 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x+%5Cnotin+dom%5C+%5CDelta&quot; alt=&quot;x \notin dom\ \Delta&quot; eeimg=&quot;1&quot;/&gt; 所以不使用任何传入的参数的函数类型就会成为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop%5Crightarrow%5Ctau&quot; alt=&quot;\top\rightarrow\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3B%5Clambda+x.e%29%3D%5B%5CDelta_x%5D%28%5CDelta%28x%29%5Crightarrow%5Ctau%29%5C%5Cwhere%5B%5CDelta%5D%5Ctau+%3D+P%28%5CPi%3Be%29%5C%5C+P%28%5CPi%3B%5C%7Bl_1%3De_1+%2C+...+%2C+l_n%3De_n%5C%7D%29%3D%5B%5Cprod_%7Bi%7D%5CDelta_i%5D%5C%7Bl_1%3A%5Ctau_1+%2C+...+%2C+l_n%3A%5Ctau_n%5C%7D%5C%5Cwhere+%5B%5CDelta_i%5D%5Ctau_i+%3D+%5CPi%28%5CPi%3Be_i%29&quot; alt=&quot;P(\Pi;\lambda x.e)=[\Delta_x](\Delta(x)\rightarrow\tau)\\where[\Delta]\tau = P(\Pi;e)\\ P(\Pi;\{l_1=e_1 , ... , l_n=e_n\})=[\prod_{i}\Delta_i]\{l_1:\tau_1 , ... , l_n:\tau_n\}\\where [\Delta_i]\tau_i = \Pi(\Pi;e_i)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;根据 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cleq%5E%5Cforall&quot; alt=&quot;\leq^\forall&quot; eeimg=&quot;1&quot;/&gt;的定义 , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau&quot; alt=&quot;[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; 的实例符合下列规矩&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cuparrow%5C%7B%5Crho%28%5B%5CDelta%5D%5Ctau%7C%5Crho%5C+a%5C+substitution%5C%7D&quot; alt=&quot;\uparrow\{\rho([\Delta]\tau|\rho\ a\ substitution\}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这里的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cuparrow&quot; alt=&quot;\uparrow&quot; eeimg=&quot;1&quot;/&gt;指的是子类型规则下的一个上闭包 , 假如有实例 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau%7C%5Ctau_1+%5Cleq+%5Ctau_2&quot; alt=&quot;[\Delta]\tau|\tau_1 \leq \tau_2&quot; eeimg=&quot;1&quot;/&gt;那么我们就有限制&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cuparrow%5C%7B%5Crho%28%5B%5CDelta%5D%5Ctau%29%7C%5Crho%28%5Ctau_1%29%5Cleq%5Crho%28%5Ctau_2%29%5C%7D&quot; alt=&quot;\uparrow\{\rho([\Delta]\tau)|\rho(\tau_1)\leq\rho(\tau_2)\}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后根据上面的规则假如我们有一个函数的应用 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e_1%5C+e_2&quot; alt=&quot;e_1\ e_2&quot; eeimg=&quot;1&quot;/&gt; 我们就有以下规则&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cuparrow%5C%7B%5Crho%28%5B%5CDelta_1+%5Csqcap+%5CDelta_2%5D%5Calpha%29%7C%5Crho%28%5Ctau_1%29%5Cleq%5Crho%28%5Ctau_2%29%5Crightarrow+%5Crho%28%5Calpha%29%5C%7D&quot; alt=&quot;\uparrow\{\rho([\Delta_1 \sqcap \Delta_2]\alpha)|\rho(\tau_1)\leq\rho(\tau_2)\rightarrow \rho(\alpha)\}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;为了推导这个类型 , 我们就必须找到 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau&quot; alt=&quot;[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; 我们就可以定义 &lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3Be_1%5C+e_2%29&quot; alt=&quot;P(\Pi;e_1\ e_2)&quot; eeimg=&quot;1&quot;/&gt; 符合以下规则&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3Be_1%5C+e_2%29%3D%5B%5CDelta%5D%5Ctau%5C%5C+%5Cquad+where%5C+inst%28%E5%AE%9E%E4%BE%8B%29%28%5B%5CDelta%5D%5Ctau%29%3Dinst%28%5B%5CDelta_1%5Csqcap%5CDelta_2%5D%5Calpha%7C%5Ctau_1+%5Cleq%5Ctau_2%5Crightarrow%5Calpha0%29%5C%5C+%5Cqquad+and%5C+%5B%5CDelta_1%5D%5Ctau_1+%3D+P%28%5CPi%3Be_1%29+%2C+%5B%5CDelta_2%5D%5Ctau_2+%3D+P%28%5CPi%3Be_2%29&quot; alt=&quot;P(\Pi;e_1\ e_2)=[\Delta]\tau\\ \quad where\ inst(实例)([\Delta]\tau)=inst([\Delta_1\sqcap\Delta_2]\alpha|\tau_1 \leq\tau_2\rightarrow\alpha0)\\ \qquad and\ [\Delta_1]\tau_1 = P(\Pi;e_1) , [\Delta_2]\tau_2 = P(\Pi;e_2)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;那么投射就可以被定义为&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3Be.l%29%3D%5B%5CDelta%5D%5Ctau%5C%5C+where%5C+inst%28%5B%5CDelta%5D%5Ctau%29%3Dinst%28%5B%5CDelta_1%5D%5Calpha%7C%5Ctau_1%5Cleq%5C%7Bl%3A%5Calpha%5C%7D%29%5C%5C+and%5C+%5B%5CDelta_1%5D%5Ctau_1+%3D+P%28%5CPi%3Be%29&quot; alt=&quot;P(\Pi;e.l)=[\Delta]\tau\\ where\ inst([\Delta]\tau)=inst([\Delta_1]\alpha|\tau_1\leq\{l:\alpha\})\\ and\ [\Delta_1]\tau_1 = P(\Pi;e)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;所以我们想要定义一个基类型我们就必须找到某种方法使得&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=inst%28%5B%5CDelta%5D%5Ctau%29%3Dinst%28%5B%5CDelta%27%5D%5Ctau%27%7CC%29&quot; alt=&quot;inst([\Delta]\tau)=inst([\Delta&amp;#39;]\tau&amp;#39;|C)&quot; eeimg=&quot;1&quot;/&gt;&lt;b&gt;C&lt;/b&gt;是一个限制的集合. &lt;/p&gt;&lt;h2&gt;归一化&lt;/h2&gt;&lt;p&gt;前置知识&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=fv%28x%29%3Dx%5C%5C+fv%28%5Clambda+x.e%29%3Dfv%28e%29-%5C%7Bx%5C%7D%5C%5C+fv%28e_1e_2%29%3Dfv%28e_1%29%5Ccup+fv%28e_2%29%5C%5C+ftv%28%5Calpha%29+%3D+%5C%7B+%5Calpha+%5C%7D+%5C%5C+ftv%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%3D+ftv%28%5Ctau_1%29+%5Ccup+ftv%28%5Ctau_2%29+%5C%5C+ftv%28%5Cforall+x.+t%29+%3D+ftv%28t%29+-+%5C%7B+x+%5C%7D+%5C%5C+&quot; alt=&quot;fv(x)=x\\ fv(\lambda x.e)=fv(e)-\{x\}\\ fv(e_1e_2)=fv(e_1)\cup fv(e_2)\\ ftv(\alpha) = \{ \alpha \} \\ ftv(\tau_1 \rightarrow \tau_2)= ftv(\tau_1) \cup ftv(\tau_2) \\ ftv(\forall x. t) = ftv(t) - \{ x \} \\ &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;下面是最经典的归一化(&lt;b&gt;Unification&lt;/b&gt;)算法的数学表示&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=sub_u%28%5Ctau_1%5Crightarrow%5Ctau_2%3D%5Ctau_3%5Crightarrow%5Ctau_4%29%3D%5C%7B%5Ctau_1+%3D+%5Ctau_3+%2C+%5Ctau_2+%3D+%5Ctau_4%5C%7D%5C%5C+sub_u%28%5C%7Bf%5C%7D%3D%5C%7Bg%5C%7D%29%3D%5C%7Bf%28l%29%3Dg%28l%29%7Cl%5Cin+D%5C%7D%5C%5C+%5Cqquad+where%5C+D%3Ddom%5C+f%3Ddom%5C+g%5C%5C+U%28%5Coslash%29%3D%5B%5D%5C%5C+U%28%5Calpha%3D%5Calpha+%2C+C%29+%3D+U%28C%29%5C%5C+U%28%5Calpha%3D%5Ctau+%2C+C%29%3DU%28%5Ctheta_%7B%5Calpha%3D%5Ctau%7DC%5Ccirc%5Ctheta_%7B%5Calpha%3D%5Ctau%7D%5Cquad%5Calpha%5Cnotin+ftv%28%5Ctau%29%29%5C%5C+U%28%5Ctau%3D%5Calpha+%2C+C%29%3DU%28%5Ctheta_%7B%5Calpha%3D%5Ctau%7DC%5Ccirc%5Ctheta_%7B%5Calpha%3D%5Ctau%7D%5Cquad%5Calpha%5Cnotin+ftv%28%5Ctau%29%29%5C%5C+U%28c+%2C+C%29%3DU%28sub_u%28c%29+%2C+C%29&quot; alt=&quot;sub_u(\tau_1\rightarrow\tau_2=\tau_3\rightarrow\tau_4)=\{\tau_1 = \tau_3 , \tau_2 = \tau_4\}\\ sub_u(\{f\}=\{g\})=\{f(l)=g(l)|l\in D\}\\ \qquad where\ D=dom\ f=dom\ g\\ U(\oslash)=[]\\ U(\alpha=\alpha , C) = U(C)\\ U(\alpha=\tau , C)=U(\theta_{\alpha=\tau}C\circ\theta_{\alpha=\tau}\quad\alpha\notin ftv(\tau))\\ U(\tau=\alpha , C)=U(\theta_{\alpha=\tau}C\circ\theta_{\alpha=\tau}\quad\alpha\notin ftv(\tau))\\ U(c , C)=U(sub_u(c) , C)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;(垃圾知乎没\empty艹(日语))&lt;/p&gt;&lt;p&gt;好的 , 又有不少人被这些数学蒙住了双眼 , 一会儿我写个&lt;b&gt;Haskell&lt;/b&gt;的伪码好了&lt;/p&gt;&lt;p&gt;添加上递归类型就是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=sub_%7Bu%5E%5Cmu%7D%28%5Cmu.%5Calpha%5Ctau_1+%3D+%5Ctau_2%29%3D%5C%7B%5Ctau_1%5B%5Cmu%5Calpha.%5Ctau_1%5D%3D%5Ctau_2%5C%7D%5C%5C+sub_%7Bu%5E%5Cmu%7D%28%5Ctau_1+%3D+%5Cmu.%5Calpha%5Ctau_2%29%3D%5C%7B%5Ctau_1%5B%3D%5Ctau_2%5B%5Cmu%5Calpha.%5Ctau_2%5D%5C%7D%5C%5C++U%5E%5Cmu%28H%3B%5Coslash%29%3D%5B%5D%5C%5C+U%5E%5Cmu%28H%3B%5Calpha%3D%5Calpha+%2C+C%29+%3D+U%5E%5Cmu%28H%3BC%29%5C%5C+U%5E%5Cmu%28H%3B%5Ctau_1%3D%5Ctau_2+%2C+C%29+%3D+U%5E%5Cmu%28C%29%5Cquad%5Ctau_1%3D%5Ctau_2%5Cin+H%5C%5C+U%5E%5Cmu%28%5Calpha%3D%5Ctau+%2C+C%29%3DU%5E%5Cmu%28%5Ctheta_%7B%5Calpha%3D%5Ctau%7DC%3B%5Ctheta_%7B%5Calpha%3D%5Ctau%7DH%29%5Ccirc%5Ctheta_%7B%5Calpha%3D%5Ctau%7D%5C%5C+U%5E%5Cmu%28%5Ctau%3D%5Calpha+%2C+C%29%3DU%5E%5Cmu%28%5Ctheta_%7B%5Calpha%3D%5Ctau%7DC%3B%5Ctheta_%7B%5Calpha%3D%5Ctau%7DH%29%5Ccirc%5Ctheta_%7B%5Calpha%3D%5Ctau%7D%5C%5C+U%5E%5Cmu%28H%3Bc+%2C+C%29%3DU%5E%5Cmu%28H+%2C+c%3Bsub_%7Bu%5E%5Cmu%7D%28c%29+%2C+C%29&quot; alt=&quot;sub_{u^\mu}(\mu.\alpha\tau_1 = \tau_2)=\{\tau_1[\mu\alpha.\tau_1]=\tau_2\}\\ sub_{u^\mu}(\tau_1 = \mu.\alpha\tau_2)=\{\tau_1[=\tau_2[\mu\alpha.\tau_2]\}\\  U^\mu(H;\oslash)=[]\\ U^\mu(H;\alpha=\alpha , C) = U^\mu(H;C)\\ U^\mu(H;\tau_1=\tau_2 , C) = U^\mu(C)\quad\tau_1=\tau_2\in H\\ U^\mu(\alpha=\tau , C)=U^\mu(\theta_{\alpha=\tau}C;\theta_{\alpha=\tau}H)\circ\theta_{\alpha=\tau}\\ U^\mu(\tau=\alpha , C)=U^\mu(\theta_{\alpha=\tau}C;\theta_{\alpha=\tau}H)\circ\theta_{\alpha=\tau}\\ U^\mu(H;c , C)=U^\mu(H , c;sub_{u^\mu}(c) , C)&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt; 有缺陷! 我们有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%3D%5Ctau&quot; alt=&quot;\alpha=\tau&quot; eeimg=&quot;1&quot;/&gt;这个限制在使用替换规则 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctheta_%7B%5Calpha%3D%5Ctau%7D&quot; alt=&quot;\theta_{\alpha=\tau}&quot; eeimg=&quot;1&quot;/&gt;的时候会被淘汰&lt;/p&gt;&lt;p&gt;因为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;全部都被干掉了QWQ , 这个是由&lt;b&gt;解决方案&lt;/b&gt;的但是我们由于篇幅的原因先讲到这儿吧 !&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;这一章我鸽了很长时间因为第一我刚回国需要和同学吃吃饭什么的 , 第二是先要差不多写出来伪码的程度理解这个是在干什么之后再胡乱分析一波...&lt;br/&gt;这一章将是噩梦&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-07-01-71767830</guid>
<pubDate>Mon, 01 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.三</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-25-70664217.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/70664217&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-50d5e0dadc4d32a2414185f712f8c530_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;这一章我们重新整理一下之前的类型系统 , 因为之前定义的类型系统并不是特别的细化,所以这回我们将根据上回的类型系统添加细节&lt;/p&gt;&lt;p&gt;ML语言的优点是表达式只用写一次 , 然后使用&lt;b&gt;let&lt;/b&gt;可以在不同类型下使用多次,打个比方&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=let+%5C+g+%3D+%5Clambda+x.x+%5C+in+%5C+%28...g...g...%29&quot; alt=&quot;let \ g = \lambda x.x \ in \ (...g...g...)&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;g&lt;/b&gt;函数就会被类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha.%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha.\alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 约束然后&lt;b&gt;g&lt;/b&gt;就可以被当成&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_n+%5Crightarrow+%5Ctau_n&quot; alt=&quot;\tau_n \rightarrow \tau_n&quot; eeimg=&quot;1&quot;/&gt;但是 , 假如这个类型不能完全的泛化就操蛋了 就比如&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+f.let+%5C+g+%3D+%5Clambda+x.if+%5C+f+%5C+x+%5C+then+%5C+x+%5C+else+%5C+x+%5C+in+%5C+%28...g...g...%29&quot; alt=&quot;\lambda f.let \ g = \lambda x.if \ f \ x \ then \ x \ else \ x \ in \ (...g...g...)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;假如我们有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma%28f%29+%3D+%5Calpha+%5Crightarrow+bool&quot; alt=&quot;\Gamma(f) = \alpha \rightarrow bool&quot; eeimg=&quot;1&quot;/&gt;那么&lt;b&gt;g&lt;/b&gt;的类型就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt;但是这个就不能被完全的泛化因为 &lt;b&gt;g&lt;/b&gt;依赖于&lt;b&gt;f&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;添加了子类型之后呢 , 就更加的复杂 , 假如我们有一个函数&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma%28f%29+%3D+%5Ctau_0+%5Crightarrow+bool&quot; alt=&quot;\Gamma(f) = \tau_0 \rightarrow bool&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%2C+%5Ctau_2&quot; alt=&quot;\tau_1 , \tau_2&quot; eeimg=&quot;1&quot;/&gt; 都是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_0&quot; alt=&quot;\tau_0&quot; eeimg=&quot;1&quot;/&gt; 的子类型 , 为了保持 &lt;img src=&quot;https://www.zhihu.com/equation?tex=let%5C+x%3De_1%5C+in%5C+e_2&quot; alt=&quot;let\ x=e_1\ in\ e_2&quot; eeimg=&quot;1&quot;/&gt;的类型是合法的 , 我们就必须确定 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e_2%5Be_1%2Fx%5D&quot; alt=&quot;e_2[e_1/x]&quot; eeimg=&quot;1&quot;/&gt;(可替换) , 我们就必须让上边的类型同时满足 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%5Crightarrow%5Ctau_1&quot; alt=&quot;\tau_1\rightarrow\tau_1&quot; eeimg=&quot;1&quot;/&gt; 和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_2%5Crightarrow%5Ctau_2&quot; alt=&quot;\tau_2\rightarrow\tau_2&quot; eeimg=&quot;1&quot;/&gt;但是&lt;b&gt;g&lt;/b&gt;的类型是单调的 , 所以我们就必须满足这样的一个东西&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha+%5C+where%5C+%5Calpha+%5Cleq+%5Ctau_0.%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha \ where\ \alpha \leq \tau_0.\alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以是时候需要重新调整一下类型检查的规则了!&lt;/p&gt;&lt;h2&gt;类型模板&lt;/h2&gt;&lt;p&gt;根据&lt;b&gt;TrifonovSmith&lt;/b&gt;和&lt;b&gt;Pottier&lt;/b&gt;的规则我们把这个新的规则称为&lt;b&gt;Lambda-lifted&lt;/b&gt;, 我们使用一个新的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau&quot; alt=&quot;[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt;其 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt; 是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+-+bound&quot; alt=&quot;\lambda - bound&quot; eeimg=&quot;1&quot;/&gt; 类型变量的前结束映射 , 这就阻止了自由变量的诞生 , 使得所有的变量都隐士的被泛化 , 然后我们就可以扔掉 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall&quot; alt=&quot;\forall&quot; eeimg=&quot;1&quot;/&gt; 了 , 所有的类型都现实的携带他们的依赖信息(但是这并不叫依赖类型)这个我们叫他 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda-bound%5C+programme%5C+variables&quot; alt=&quot;\lambda-bound\ programme\ variables&quot; eeimg=&quot;1&quot;/&gt;虽然没有子类型的普通&lt;b&gt;ML&lt;/b&gt;没有这方面的问题就是了...&lt;/p&gt;&lt;p&gt;现在我们就可以给之前的那个&lt;b&gt;g&lt;/b&gt;赋予类型了&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Bf%3A%5Calpha%5Crightarrow%5Cbeta%5D%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;[f:\alpha\rightarrow\beta]\alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;嗯!看起来他是对的~ 为了重新制定规则 , 我们假设所有的表达式都有类型 , 其次通过了&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha+-renaming&quot; alt=&quot;\alpha -renaming&quot; eeimg=&quot;1&quot;/&gt; , 他的绑定是单一的(这个是为了避免一个叫shadowing的东西) , 所以我们就 把&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma&quot; alt=&quot;\Gamma&quot; eeimg=&quot;1&quot;/&gt;分成了两个部分 , 一个是单态的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt; , 另一个是多态的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi&quot; alt=&quot;\Pi&quot; eeimg=&quot;1&quot;/&gt;  , 其 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt;映射类型的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+-+bound&quot; alt=&quot;\lambda - bound&quot; eeimg=&quot;1&quot;/&gt;到单态类型 , 然后 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi&quot; alt=&quot;\Pi&quot; eeimg=&quot;1&quot;/&gt; 呢就是处理&lt;b&gt;let&lt;/b&gt;到一个多态的类型 , 下面是类型规则&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta+%3A%3A%3D+%5Cin+%7C+%5CDelta++%2C++x%3A%5Ctau%5C%5C+%5CPi+%3A%3A%3D+%5Cin+%7C+%5CPi+%2C+%5Chat%7Bx%7D%3A%5B%5CDelta%5D%5Ctau&quot; alt=&quot;\Delta ::= \in | \Delta  ,  x:\tau\\ \Pi ::= \in | \Pi , \hat{x}:[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;所以呢 , 我们可以推出这个东西 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi+%5CVdash+e%3A%5B%5CDelta%5D%5Ctau&quot; alt=&quot;\Pi \Vdash e:[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; , 同时 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta_1+%5Csqcap+%5CDelta_2&quot; alt=&quot;\Delta_1 \sqcap \Delta_2&quot; eeimg=&quot;1&quot;/&gt;标志了 &lt;img src=&quot;https://www.zhihu.com/equation?tex=dom%5C+%5CDelta+%3D+dom%5C+%5CDelta_1+%5Ccup+dom%5C+%5CDelta_2&quot; alt=&quot;dom\ \Delta = dom\ \Delta_1 \cup dom\ \Delta_2&quot; eeimg=&quot;1&quot;/&gt; , 同时呢 , 满足 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta%28x%29%3D%5CDelta_1%28x%29%5Csqcap%5CDelta_2%28x%29&quot; alt=&quot;\Delta(x)=\Delta_1(x)\sqcap\Delta_2(x)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;通常情况下 , 这个转换都会让 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt;的范围乱七八飞 , 除了new(SUB)规则使用的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cleq%5E%5Cforall&quot; alt=&quot;\leq^\forall&quot; eeimg=&quot;1&quot;/&gt;, 这个结合了子类型和类型变量的实例化的过程 , 这个呢...假设这个子类型是平凡的(我知道 , 数学家骂人都说你是个平凡的(AKA.&lt;b&gt;trivial&lt;/b&gt;) , 这里的意思是子类型和父类型相等) , 这个情况下呢&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cleq%5E%5Cforall&quot; alt=&quot;\leq^\forall&quot; eeimg=&quot;1&quot;/&gt;关系就被简化成了&lt;b&gt;Hindley-Milner instantiation&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;理论六 &lt;/b&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau%5C+iff+%5CVdash+e%3A%5B%5D%5Ctau&quot; alt=&quot;\vdash e:\tau\ iff \Vdash e:[]\tau&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;感谢我的上帝 , 这个是proof的!&lt;/p&gt;&lt;p&gt; 这个证明是使用了一个更强的理论 , 在不是空类型的情况下能用 , 这个的证明就是一个简单的常见的归纳虽然 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma+&quot; alt=&quot;\Gamma &quot; eeimg=&quot;1&quot;/&gt; 和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi%2F%5CDelta&quot; alt=&quot;\Pi/\Delta&quot; eeimg=&quot;1&quot;/&gt; 环境类型不太兼容&lt;/p&gt;&lt;p&gt;根据之前的证明 , 我们可以写一下新的类型规则了&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau%5Cleq%5E%5Cforall%5B%5CDelta%27%5D%5Ctau%27%5C+iff%5C+dom%28%5CDelta%29+%5Csubseteq+dom%28%5CDelta%27%29%5C%5C+and%5C+%5CDelta%27%28x%29%5Cleq+%5Crho%28%5CDelta%28x%29%29%5C+in+%5C+%5Cforall+x.x%5Cin+dom%28%5CDelta%29%5C%5C+and%5C+%5Crho%28%5Ctau%29%5Cleq+%5Ctau%27+%2C+for%5C+some%5C+substitution%5C+%5Crho%5C%5C&quot; alt=&quot;[\Delta]\tau\leq^\forall[\Delta&amp;#39;]\tau&amp;#39;\ iff\ dom(\Delta) \subseteq dom(\Delta&amp;#39;)\\ and\ \Delta&amp;#39;(x)\leq \rho(\Delta(x))\ in \ \forall x.x\in dom(\Delta)\\ and\ \rho(\tau)\leq \tau&amp;#39; , for\ some\ substitution\ \rho\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28VAR-%5CPi%29%5Cqquad+%5Cfrac%7B%7D%7B%5CPi%5CVdash%5Chat%7Bx%7D%3A%5B%5CDelta%5D%5Ctau%7D%5CPi%28%5Chat%7Bx%7D%29%3D%5B%5CDelta%5D%5Ctau%5C%5C+%28VAR-%5CDelta%29%5Cqquad%5Cfrac%7B%7D%7B%5CPi%5CVdash+x%3A%5Bx%3A%5Ctau%5D%5Ctau%7D%5C%5C+%28ABS%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e%3A%5B%5CDelta+%2C+x%3A%5Ctau%5D%5Ctau%27%7D%7B%5CPi+%5CVdash+%5Clambda+x.e%3A%5B%5CDelta%5D%5Ctau%5Crightarrow%5Ctau%27%7D%5C%5C+%28APP%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e_1%3A%5B%5CDelta%5D%5Ctau%5Crightarrow%5Ctau%27%5Cquad%5CPi%5CVdash+e_2%3A%5B%5CDelta%5D%5Ctau%7D%7B%5CPi+%5CVdash+e_1%5C+e_2%3A%5B%5CDelta%5D%5Ctau%27%7D%5C%5C+%28LET%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e_1%5B%5CDelta_1%5D%5Ctau_1%5Cquad%5CPi+%2C+%5Chat%7Bx%7D%3A%5B%5CDelta_1%5D%5Ctau_1+%5CVdash+e_2%3A%5B%5CDelta_2%5D%5Ctau_2%7D%7B+++++%5CPi%5CVdash+let%5C+%5Chat%7Bx%7D%3De_1%5C+in+%5C+e_2%3A%5B%5CDelta_1%5Csqcap%5CDelta_2%5D%5Ctau_2++%7D%5C%5C+%28PROJ%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e%3A%5B%5CDelta%5D%5C%7Bl%3A%5Ctau%5C%7D%7D%7B%5CPi%5CVdash+e.l%3A%5B%5CDelta%5D%5Ctau%7D%5C%5C+%28SUB%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e%3A%5B%5CDelta%5D%5Ctau%7D%7B%5CPi%5CVdash+e%3A%5B%5CDelta%27%5D%5Ctau%27%7D%5B%5CDelta%5D%5Ctau%5Cleq%5E%5Cforall%5B%5CDelta%27%5D%5Ctau%27&quot; alt=&quot;(VAR-\Pi)\qquad \frac{}{\Pi\Vdash\hat{x}:[\Delta]\tau}\Pi(\hat{x})=[\Delta]\tau\\ (VAR-\Delta)\qquad\frac{}{\Pi\Vdash x:[x:\tau]\tau}\\ (ABS)\qquad\frac{\Pi\Vdash e:[\Delta , x:\tau]\tau&amp;#39;}{\Pi \Vdash \lambda x.e:[\Delta]\tau\rightarrow\tau&amp;#39;}\\ (APP)\qquad\frac{\Pi\Vdash e_1:[\Delta]\tau\rightarrow\tau&amp;#39;\quad\Pi\Vdash e_2:[\Delta]\tau}{\Pi \Vdash e_1\ e_2:[\Delta]\tau&amp;#39;}\\ (LET)\qquad\frac{\Pi\Vdash e_1[\Delta_1]\tau_1\quad\Pi , \hat{x}:[\Delta_1]\tau_1 \Vdash e_2:[\Delta_2]\tau_2}{     \Pi\Vdash let\ \hat{x}=e_1\ in \ e_2:[\Delta_1\sqcap\Delta_2]\tau_2  }\\ (PROJ)\qquad\frac{\Pi\Vdash e:[\Delta]\{l:\tau\}}{\Pi\Vdash e.l:[\Delta]\tau}\\ (SUB)\qquad\frac{\Pi\Vdash e:[\Delta]\tau}{\Pi\Vdash e:[\Delta&amp;#39;]\tau&amp;#39;}[\Delta]\tau\leq^\forall[\Delta&amp;#39;]\tau&amp;#39;&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个就使得&lt;b&gt;MLsub&lt;/b&gt;带上子类型后和&lt;b&gt;ML&lt;/b&gt;有些定义并不太一样 , 就比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta_1%5D%5Ctau_1&quot; alt=&quot;[\Delta_1]\tau_1&quot; eeimg=&quot;1&quot;/&gt; 和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta_2%5D%5Ctau_2&quot; alt=&quot;[\Delta_2]\tau_2&quot; eeimg=&quot;1&quot;/&gt;我们说他们是相等当他们互相归入时.但是在我们蠢萌的&lt;b&gt;ML&lt;/b&gt;里两个类型相等仅当他们看起来一样的时候.&lt;/p&gt;&lt;p&gt;(这是虽然对的 , 但是蠢萌 , 就好比我说鸭子和一只鸟呱呱叫还喜欢游泳&lt;b&gt;ML&lt;/b&gt;告诉我他俩不相等一样) &lt;/p&gt;&lt;p&gt;我们拿&lt;b&gt;choose&lt;/b&gt;函数举例子&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=1.%5Cqquad%5B%5D%5Calpha%5Crightarrow%5Calpha%5Crightarrow%5Calpha%5C%5C+2.%5Cqquad%5B%5D%5Cbeta%5Crightarrow%5Cgamma%5Crightarrow%28%5Cbeta%5Csqcup%5Cgamma%29&quot; alt=&quot;1.\qquad[]\alpha\rightarrow\alpha\rightarrow\alpha\\ 2.\qquad[]\beta\rightarrow\gamma\rightarrow(\beta\sqcup\gamma)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;第一个在我们蠢萌的&lt;b&gt;ML&lt;/b&gt;里面就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha.%5Calpha%5Crightarrow%5Calpha%5Crightarrow%5Calpha&quot; alt=&quot;\forall \alpha.\alpha\rightarrow\alpha\rightarrow\alpha&quot; eeimg=&quot;1&quot;/&gt; , 第二个就引入了子类型 , 但是我们可以发现其实他们的定义时一样的但是第二个更加的细化 , 所以 &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5D%5Cbeta%5Crightarrow%5Cgamma%5Crightarrow%28%5Cbeta%5Csqcup%5Cgamma%29%5Cleq%5E%5Cforall%5B%5D%5Calpha%5Crightarrow%5Calpha%5Crightarrow%5Calpha+&quot; alt=&quot;[]\beta\rightarrow\gamma\rightarrow(\beta\sqcup\gamma)\leq^\forall[]\alpha\rightarrow\alpha\rightarrow\alpha &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;当我们断定 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cbeta+%3D%5Cgamma+%3D%5Calpha&quot; alt=&quot;\beta =\gamma =\alpha&quot; eeimg=&quot;1&quot;/&gt;时 , 我们甚至可以反过来写因为相等的. 再举一些蠢萌的&lt;b&gt;ML&lt;/b&gt;和我们&lt;b&gt;MLsub&lt;/b&gt;不一样的地方 , 假如我有第一个式子 , 在&lt;b&gt;ML&lt;/b&gt;里 , 输入的两个类型不许是一样的 , 但是在&lt;b&gt;MLsub&lt;/b&gt;里可以不一样 , 为什么呢? 因为对于任何&lt;i&gt;α&lt;/i&gt;我们都接受任意&lt;i&gt;α&lt;/i&gt;&lt;/p&gt;&lt;h2&gt;极类型(我们之前提到过)&lt;/h2&gt;&lt;p&gt;这个呢我就用自己的话简单的解释一下了&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5E%2B&quot; alt=&quot;\tau^+&quot; eeimg=&quot;1&quot;/&gt;就是我们可以用作一个函数的输出的类型&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5E%2B+%3A%3A%3D+%5Ctau_1%5E-%5Crightarrow%5Ctau_2%5E%2B+%7C%5C%7Bl_1%3A%5Ctau_1%5E%2B+%2C+...+%2C+l_n%3A%5Ctau_n%5E%2B%5C%7D%7C%5Calpha%7C%5Ctau_1%5E%2B%5Csqcup%5Ctau_2%5E%2B%7C%5Cbot%7C%5Cmu+%5Calpha+.+%5Ctau%5E%2B&quot; alt=&quot;\tau^+ ::= \tau_1^-\rightarrow\tau_2^+ |\{l_1:\tau_1^+ , ... , l_n:\tau_n^+\}|\alpha|\tau_1^+\sqcup\tau_2^+|\bot|\mu \alpha . \tau^+&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个确保了不会输出巨大无比的类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop&quot; alt=&quot;\top&quot; eeimg=&quot;1&quot;/&gt;相反的 , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5E-&quot; alt=&quot;\tau^-&quot; eeimg=&quot;1&quot;/&gt;就是用来输入的 ,  &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop&quot; alt=&quot;\top&quot; eeimg=&quot;1&quot;/&gt;类型是允许的 , 同时避免引入 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Csqcup&quot; alt=&quot;\sqcup&quot; eeimg=&quot;1&quot;/&gt; , 因为我们大多数的带有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop&quot; alt=&quot;\top&quot; eeimg=&quot;1&quot;/&gt;类型的输入的时候我们都不会用到233333&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5E-+%3A%3A%3D+%5Ctau_1%5E%2B%5Crightarrow%5Ctau_2%5E-+%7C%5C%7Bl_1%3A%5Ctau_1%5E-+%2C+...+%2C+l_n%3A%5Ctau_n%5E-%5C%7D%7C%5Calpha%7C%5Ctau_1%5E-%5Csqcap%5Ctau_2%5E-%7C%5Ctop%7C%5Cmu+%5Calpha+.+%5Ctau%5E-&quot; alt=&quot;\tau^- ::= \tau_1^+\rightarrow\tau_2^- |\{l_1:\tau_1^- , ... , l_n:\tau_n^-\}|\alpha|\tau_1^-\sqcap\tau_2^-|\top|\mu \alpha . \tau^-&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;hr/&gt;&lt;p&gt;这个是我在飞机上写的 , 我在吃饭前喝了一瓶威士忌 , 然后晕机吐了 , 吃完饭后肚子不舒服又吐了一次 , 多亏我这会买的商务舱座位宽敞 , 我可以把饭放在脚下跑去厕所 , 这回可能有很多不对因为到现在我整个人都是晕的(醉酒+晕机).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-06-25-70664217</guid>
<pubDate>Tue, 25 Jun 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.二</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-21-69889087.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69889087&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c9d6722460086c35f984571254f16343_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;上回我们讲完了类型推导,&lt;b&gt;HM&lt;/b&gt;类型推断中遇到的所有的困难都是来自于自身的短板,但是不使用子类型我们也可以使用无数的类型进行类型海作战达到这一目的,显然这是我们开发者和用户都不想看到的 (瞄一眼我们的垃圾JAWA)&lt;/p&gt;&lt;p&gt;因为&lt;b&gt;ML&lt;/b&gt;的变体太多了&lt;b&gt;MLf  &lt;/b&gt;,  &lt;b&gt;MLext-row  &lt;/b&gt;,  &lt;b&gt;MLrec  &lt;/b&gt;等 所以不介意我们再多加一种实现呢(笑嘻嘻)&lt;/p&gt;&lt;p&gt;所以下面就是作者给&lt;b&gt;MLsub&lt;/b&gt;定义的语法&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%3A%3A%3D+x%5C%5C+%7C%5Clambda+x.e%5C%5C+%7Ce_1+e_2%5C%5C+%7C%5C%7Bl_1+%3D+e_1%2Cl_2%3De_2%2C...%2Cl_n+%3D+e_n%5C%7D%5C%5C+%7Ce.l%5C%5C+%7C%5Chat%7Bx%7D%5C%5C+%7Clet+%5C+%5Chat%7Bx%7D+%5C+%3D+%5C+e_1+%5C+in+%5C+e_2&quot; alt=&quot;e ::= x\\ |\lambda x.e\\ |e_1 e_2\\ |\{l_1 = e_1,l_2=e_2,...,l_n = e_n\}\\ |e.l\\ |\hat{x}\\ |let \ \hat{x} \ = \ e_1 \ in \ e_2&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;解释一下啊,&lt;b&gt;{}&lt;/b&gt;包裹的是一个记录的构造器&lt;/p&gt;&lt;p&gt;然后环境变量的规则是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma+%3A%3A%3D+e%5C%5C+%7C%5CGamma%2Cx%3A%5Ctau%5C%5C+%7C%5CGamma%2C%5Chat%7Bx%7D%3A%5Cforall%5Cvec%5Calpha.%5Ctau&quot; alt=&quot;\Gamma ::= e\\ |\Gamma,x:\tau\\ |\Gamma,\hat{x}:\forall\vec\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;定义类型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;基本的有函数类型,记录类型,我可以添加基础的布尔类型,我们还有最大最小类型,还有那个上限下限类型运算符.&lt;/p&gt;&lt;p&gt;使用递归类型和&lt;b&gt;subtyping&lt;/b&gt;还有最大最小类型我们定义一个&lt;b&gt;Y组合子&lt;/b&gt;试试&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=Y%28%5Clambda+f.%5Clambda+x.f%29&quot; alt=&quot;Y(\lambda f.\lambda x.f)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个的类型我们写作 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop+%5Crightarrow+%28%5Ctop+%5Crightarrow+%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow....%29&quot; alt=&quot;\top \rightarrow (\top \rightarrow (\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow....)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;很好,写不下&lt;/p&gt;&lt;p&gt;那么我们姑且把&lt;i&gt;α&lt;/i&gt;当作递归类型处理吧,所以这个东西的类型是: &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop+%5Crightarrow+%5Calpha&quot; alt=&quot;\top \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 为了写的爽,干脆类型的语法也就这么来吧&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%3A%3A%3D+%5Ctau_1+%5Crightarrow+%5Ctau_2%5C%5C+%7C%5C%7Bl1%3A%5Ctau_1%2C...%5C%7D%5C%5C+%7C%5Calpha%5C%5C+%7C%5Ctop%5C%5C+%7C%5Cbot%5C%5C+%7C%5Ctau+%5Csqcap%5Ctau%5C%5C+%7C%5Ctau+%5Csqcup+%5Ctau&quot; alt=&quot;\tau ::= \tau_1 \rightarrow \tau_2\\ |\{l1:\tau_1,...\}\\ |\alpha\\ |\top\\ |\bot\\ |\tau \sqcap\tau\\ |\tau \sqcup \tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;好了,我们有了类型构造的语法,那么我们想一下,对于这些记录(record)该怎么搞&lt;/p&gt;&lt;p&gt;如果我们有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bl_1%3A%5Ctau_1%2Cl_2%3A%5Ctau_2%5C%7D&quot; alt=&quot;\{l_1:\tau_1,l_2:\tau_2\}&quot; eeimg=&quot;1&quot;/&gt;我们可以写成 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D&quot; alt=&quot;\{f\}&quot; eeimg=&quot;1&quot;/&gt;其 &lt;img src=&quot;https://www.zhihu.com/equation?tex=dom%5C+f+%3D+%5C%7Bl_1%2Cl_2%5C%7D&quot; alt=&quot;dom\ f = \{l_1,l_2\}&quot; eeimg=&quot;1&quot;/&gt; 我们就可以用这个操作获取类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=f%28l_1%29+%3D+%5Ctau_1&quot; alt=&quot;f(l_1) = \tau_1&quot; eeimg=&quot;1&quot;/&gt;,好的这个问题处理完了,我们接着处理函数的问题.&lt;/p&gt;&lt;p&gt;我们可以让语法树的类型部分是无限的,但是我们需要采用限制操作符就不是,比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Crightarrow+%28bool+%5Crightarrow%28bool+%5Crightarrow%28bool+%5Crightarrow%28....%29%29&quot; alt=&quot;bool \rightarrow (bool \rightarrow(bool \rightarrow(bool \rightarrow(....))&quot; eeimg=&quot;1&quot;/&gt;是合法的代码但是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Csqcap+%28bool+%5Csqcap%28bool+%5Csqcap%28bool+%5Csqcap%28....%29%29&quot; alt=&quot;bool \sqcap (bool \sqcap(bool \sqcap(bool \sqcap(....))&quot; eeimg=&quot;1&quot;/&gt;并不是合法的代码.&lt;/p&gt;&lt;p&gt;但是一般人是写不出来这种无限长的类型定义的,所以我们使用 &lt;b&gt;polar type&lt;/b&gt;进行操作,现在这一章先不讲,这是一种有限类型的子集,你知道方便写和推导就行了.&lt;/p&gt;&lt;p&gt;那么接着上一章提到的&lt;b&gt;分配格&lt;/b&gt;来讲,我们也设计一套规则&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Csqcup+%5Ctau+%5Cequiv+%5Ctau+%5Cqquad+%5Ctau+%5Csqcap+%5Ctau+%5Cequiv+%5Ctau%5C%5C+%5Ctau_1+%5Csqcup+%5Ctau_2+%5Cequiv+%5Ctau_2+%5Csqcup+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%5Ctau_2+%5Cequiv+%5Ctau_2+%5Csqcap+%5Ctau_1%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_2+%5Csqcup+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_2%29+%5Csqcup+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%28%5Ctau_2+%5Csqcap+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_2%29+%5Csqcap+%5Ctau_1%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_1+%5Csqcap+%5Ctau_2%29+%5Cequiv+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%28%5Ctau_1+%5Csqcup+%5Ctau_2%29+%5Cequiv+%5Ctau_1%5C%5C+%5Cbot+%5Csqcup+%5Ctau+%5Cequiv+%5Ctau+%5Cqquad+%5Cbot+%5Csqcap+%5Ctau+%5Cequiv+%5Cbot%5C%5C+%5Ctop+%5Csqcup+%5Ctau+%5Cequiv+%5Ctop+%5Cqquad+%5Ctop+%5Csqcap+%5Ctau+%5Cequiv+%5Ctau%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_2+%5Csqcap+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_2%29%5Csqcap%28%5Ctau_1%5Csqcup%5Ctau_3%29%5C%5C+%5Ctau_1+%5Csqcap+%28%5Ctau_2+%5Csqcup+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_2%29%5Csqcup%28%5Ctau_1%5Csqcap%5Ctau_3%29%5C%5C&quot; alt=&quot;\tau \sqcup \tau \equiv \tau \qquad \tau \sqcap \tau \equiv \tau\\ \tau_1 \sqcup \tau_2 \equiv \tau_2 \sqcup \tau_1 \qquad \tau_1 \sqcap \tau_2 \equiv \tau_2 \sqcap \tau_1\\ \tau_1 \sqcup (\tau_2 \sqcup \tau_3) \equiv (\tau_1\sqcup\tau_2) \sqcup \tau_1 \qquad \tau_1 \sqcap (\tau_2 \sqcap \tau_3) \equiv (\tau_1\sqcap\tau_2) \sqcap \tau_1\\ \tau_1 \sqcup (\tau_1 \sqcap \tau_2) \equiv \tau_1 \qquad \tau_1 \sqcap (\tau_1 \sqcup \tau_2) \equiv \tau_1\\ \bot \sqcup \tau \equiv \tau \qquad \bot \sqcap \tau \equiv \bot\\ \top \sqcup \tau \equiv \top \qquad \top \sqcap \tau \equiv \tau\\ \tau_1 \sqcup (\tau_2 \sqcap \tau_3) \equiv (\tau_1\sqcup\tau_2)\sqcap(\tau_1\sqcup\tau_3)\\ \tau_1 \sqcap (\tau_2 \sqcup \tau_3) \equiv (\tau_1\sqcap\tau_2)\sqcup(\tau_1\sqcap\tau_3)\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;...是不是跟布尔运算规则一个样&lt;br/&gt;下面是函数和记录的构造函数限制&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%5Csqcup%28%5Ctau_1%27+%5Crightarrow+%5Ctau_2%27%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_1%27%29%5Crightarrow%28%5Ctau_2%5Csqcup%5Ctau_2%27%29%5C%5C+%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%5Csqcap%28%5Ctau_1%27+%5Crightarrow+%5Ctau_2%27%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_1%27%29%5Crightarrow%28%5Ctau_2%5Csqcap%5Ctau_2%27%29%5C%5C++&quot; alt=&quot;(\tau_1 \rightarrow \tau_2)\sqcup(\tau_1&amp;#39; \rightarrow \tau_2&amp;#39;) \equiv (\tau_1\sqcap\tau_1&amp;#39;)\rightarrow(\tau_2\sqcup\tau_2&amp;#39;)\\ (\tau_1 \rightarrow \tau_2)\sqcap(\tau_1&amp;#39; \rightarrow \tau_2&amp;#39;) \equiv (\tau_1\sqcup\tau_1&amp;#39;)\rightarrow(\tau_2\sqcap\tau_2&amp;#39;)\\  &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Csqcup+%5C%7Bg%5C%7D+%5Cequiv+%5C%7Bh%5C%7D%5C%5C+%5Cqquad+where+%5C++dom+%5C+h++%3D+dom+%5C+f+%5Ccap+dom+%5C+g%5C%5C+%5Cqquad+and+%5C+h%28l%29+%3D+f%28l%29+%5Csqcup+g%28l%29%5C%5C&quot; alt=&quot;\{f\} \sqcup \{g\} \equiv \{h\}\\ \qquad where \  dom \ h  = dom \ f \cap dom \ g\\ \qquad and \ h(l) = f(l) \sqcup g(l)\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Csqcap+%5C%7Bg%5C%7D+%5Cequiv+%5C%7Bh%5C%7D%5C%5C+%5Cqquad+where+%5C++dom+%5C+h++%3D+dom+%5C+f+%5Ccup+dom+%5C+g%5C%5C+%5Cqquad+and+%5C+h%28l%29+%3D+%5Cleft%5C%7B+++++%5Cbegin%7Bmatrix%7D+++++++++++++f%28l%29+%5Csqcap+g%28l%29+%5Cquad+if+%5C+l+%5C+%5Cin+dom+%5C+f+%5Ccap+dom+%5C+g%5C%5C+++++++++++++f%28l%29+%5Cqquad+if+%5C+l+%5C+%5Cin+dom+%5C+f+-+dom+%5C+g%5C%5C+++++++++++++g%28l%29+%5Cqquad+if+%5C+l+%5C+%5Cin+dom+%5C+g+-+dom+%5C+f%5C%5C+++++%5Cend%7Bmatrix%7D+++++%5Cright%5C%7D&quot; alt=&quot;\{f\} \sqcap \{g\} \equiv \{h\}\\ \qquad where \  dom \ h  = dom \ f \cup dom \ g\\ \qquad and \ h(l) = \left\{     \begin{matrix}             f(l) \sqcap g(l) \quad if \ l \ \in dom \ f \cap dom \ g\\             f(l) \qquad if \ l \ \in dom \ f - dom \ g\\             g(l) \qquad if \ l \ \in dom \ g - dom \ f\\     \end{matrix}     \right\}&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;递归类型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;MLsub&lt;/b&gt;作为一个牛*的语言,肯定是要支持递归类型的!&lt;/p&gt;&lt;p&gt;经典的递归类型的处理方法是:首先我们有一个类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5Calpha.%5Ctau&quot; alt=&quot;\mu\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;我们会把他当成一个映射的不动点 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;这个就确定了 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu&quot; alt=&quot;\mu&quot; eeimg=&quot;1&quot;/&gt;的约束和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;,并获得了一下的推理原则:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5B%5Ctau_0%2F%5Calpha%5D+%3D+%5Ctau_0+%5CRightarrow+%5Cmu%5Calpha.%5Ctau+%3D+%5Ctau_0&quot; alt=&quot;\tau[\tau_0/\alpha] = \tau_0 \Rightarrow \mu\alpha.\tau = \tau_0&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;但是,我们并不是传统的&lt;b&gt;ML&lt;/b&gt;我们是&lt;b&gt;MLsub&lt;/b&gt;是有&lt;b&gt;subtyping&lt;/b&gt;的&lt;b&gt;ML&lt;/b&gt;,所以这个不⭐ 我们需要一种可以支持&lt;b&gt;subtyping&lt;/b&gt;的比如这样 &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5B%5Ctau_0%2F%5Calpha%5D+%5Cleq+%5Ctau_0+%5CRightarrow+%5Cmu%5Calpha.%5Ctau+%5Cleq+%5Ctau_0&quot; alt=&quot;\tau[\tau_0/\alpha] \leq \tau_0 \Rightarrow \mu\alpha.\tau \leq \tau_0&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个就需要 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5Calpha.%5Ctau&quot; alt=&quot;\mu\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;是一个 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi&quot; alt=&quot;\phi&quot; eeimg=&quot;1&quot;/&gt;最小的不动点, 简单(数学)的术语来描述就是映射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;单调的时候 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变,用人话讲就是所有的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;都出现在偶数的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Crightarrow&quot; alt=&quot;\rightarrow&quot; eeimg=&quot;1&quot;/&gt;的左侧. &lt;br/&gt;这里带来了两个引论: &lt;/p&gt;&lt;p&gt;&lt;b&gt;引论一&lt;/b&gt;,如果&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变,那么&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;就是有一个最小的前不动点,那么我们可以写作 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E%2B%5Calpha.%5Ctau&quot; alt=&quot;\mu^+\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt; 相对的,最大的后不动点就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E-%5Calpha.%5Ctau&quot; alt=&quot;\mu^-\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;但是,残念有问题 &lt;i&gt;α&lt;/i&gt;和&lt;i&gt;α&lt;/i&gt;是逆变的,所以我们需要引入&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Cmu%5E%2B%5Calpha.%5Ctau+%3D+%5Cbot%5C%5C%5Cmu%5E-%5Calpha.%5Ctau+%3D+%5Ctop%5C%5C&quot; alt=&quot;\\\mu^+\alpha.\tau = \bot\\\mu^-\alpha.\tau = \top\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;(您家的haskell就是这样的),那么假如所有的&lt;i&gt;α&lt;/i&gt;都有至少一种类型构造器,&lt;i&gt;α&lt;/i&gt;被&lt;i&gt;τ&lt;/i&gt;保护,这样凑合就能用了&lt;/p&gt;&lt;p&gt;&lt;b&gt;引论二&lt;/b&gt;,如果&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变同时被他保护,那么 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E%2B%5Calpha.%5Ctau+%3D+%5Cmu%5E-%5Calpha.%5Ctau&quot; alt=&quot;\mu^+\alpha.\tau = \mu^-\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;这种情况下&lt;i&gt;α&lt;/i&gt;没用 似乎看起来减少了需要处理的类型,那么就很好,然而有个叫&lt;b&gt;Bekic&lt;/b&gt;的科学家发现我们可以找到一种类型成立表达式 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Cequiv+%5Ctau+%5Crightarrow+%5Ctau&quot; alt=&quot;\tau \equiv \tau \rightarrow \tau&quot; eeimg=&quot;1&quot;/&gt; (当然连我觉得都很扯,这都是什么烂七八糟的东西,不过人家有理有据,看看他是怎么搞得)所以按照他的思路我们可以写出这个东西 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Ctau_2+%5Crightarrow+%5Ctau_1+%5Cqquad+%5Ctau_2%3D%5Ctau_1+%5Crightarrow+%5Ctau_2%5C%5C&quot; alt=&quot;\\\tau_1=\tau_2 \rightarrow \tau_1 \qquad \tau_2=\tau_1 \rightarrow \tau_2\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;顺着这个思路带入&lt;i&gt;μ&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Cmu%5Calpha.%5Ctau_2+%5Crightarrow+%5Calpha+%5Cqquad+%5Ctau_2%3D%5Cmu%5Cbeta.%5Ctau_1+%5Crightarrow+%5Cbeta%5C%5C&quot; alt=&quot;\\\tau_1=\mu\alpha.\tau_2 \rightarrow \alpha \qquad \tau_2=\mu\beta.\tau_1 \rightarrow \beta\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;替换一下就可以得到&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Cmu%5Calpha.%28%5Cmu%5Cbeta.%5Calpha+%5Crightarrow+%5Cbeta%29+%5Crightarrow+%5Calpha+%5Cqquad+%5Ctau_2%3D%5Cmu%5Cbeta.%28%5Cmu%5Calpha.%5Cbeta+%5Crightarrow+%5Calpha%29+%5Crightarrow+%5Cbeta%5C%5C&quot; alt=&quot;\\\tau_1=\mu\alpha.(\mu\beta.\alpha \rightarrow \beta) \rightarrow \alpha \qquad \tau_2=\mu\beta.(\mu\alpha.\beta \rightarrow \alpha) \rightarrow \beta\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后我们说过这种情况下&lt;i&gt;α&lt;/i&gt;,&lt;i&gt;β&lt;/i&gt;没蛋的用,所以利用模式匹配总结一下&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Cequiv+%5Ctau_2&quot; alt=&quot;\tau_1 \equiv \tau_2&quot; eeimg=&quot;1&quot;/&gt;所以....推出来了这个脑残的表达式 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Cequiv+%5Ctau+%5Crightarrow+%5Ctau&quot; alt=&quot;\tau \equiv \tau \rightarrow \tau&quot; eeimg=&quot;1&quot;/&gt;我们为了纪念他,给他放个特例叫他 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau_1%2C%5Ctau_2%29&quot; alt=&quot;\phi(\tau_1,\tau_2)&quot; eeimg=&quot;1&quot;/&gt;他的不动点就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Cmu.%5Calpha.%5Cphi%28%5Cmu%5Cbeta.%5Cphi%28%5Calpha%2C%5Cbeta%29%2C%5Calpha%29%5C%5C&quot; alt=&quot;\\\mu.\alpha.\phi(\mu\beta.\phi(\alpha,\beta),\alpha)\\&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;我知道我知道,里面可以继续展开我就不展开了....&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;稳健性(Soundness)&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们的&lt;b&gt;MLsub&lt;/b&gt;的&lt;b&gt;subtyping&lt;/b&gt;并不是一个由案例来定义的,同时靠着案例反演呀并不是一个非常有意义的操作(所以这就是我unsound的理由,咳咳咳) 实际上,仅仅给出 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Cleq+%5Ctau_2+%5Crightarrow+%5Ctau_3&quot; alt=&quot;\tau_1 \leq \tau_2 \rightarrow \tau_3&quot; eeimg=&quot;1&quot;/&gt;我们可以得到 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%3D+%5Cbot&quot; alt=&quot;\tau_1 = \bot&quot; eeimg=&quot;1&quot;/&gt; 或者是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%3D+%28%5Calpha+%5Crightarrow+%5Cbeta%29%5Csqcap+%5Calpha&quot; alt=&quot;\tau_1 = (\alpha \rightarrow \beta)\sqcap \alpha&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;引论三(反转性)&lt;/b&gt;, 如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%5Crightarrow%5Ctau_2%5Cleq%5Ctau_1%27%5Crightarrow%5Ctau_2%27&quot; alt=&quot;\tau_1\rightarrow\tau_2\leq\tau_1&amp;#39;\rightarrow\tau_2&amp;#39;&quot; eeimg=&quot;1&quot;/&gt; 则 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%27%5Cleq%5Ctau_1%2C%5Ctau_2%27%5Cleq%5Ctau_2&quot; alt=&quot;\tau_1&amp;#39;\leq\tau_1,\tau_2&amp;#39;\leq\tau_2&quot; eeimg=&quot;1&quot;/&gt;,如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Cleq+%5C%7Bg%5C%7D&quot; alt=&quot;\{f\} \leq \{g\}&quot; eeimg=&quot;1&quot;/&gt;则对于 &lt;img src=&quot;https://www.zhihu.com/equation?tex=l+%5Cin+dom%5C+g&quot; alt=&quot;l \in dom\ g&quot; eeimg=&quot;1&quot;/&gt;里 &lt;img src=&quot;https://www.zhihu.com/equation?tex=f%28l%29%5Cleq+g%28l%29&quot; alt=&quot;f(l)\leq g(l)&quot; eeimg=&quot;1&quot;/&gt;幸好这个有proof.&lt;br/&gt;&lt;br/&gt; &lt;b&gt;理论四(进展性),&lt;/b&gt;如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau&quot; alt=&quot;\vdash e:\tau&quot; eeimg=&quot;1&quot;/&gt; ,要么&lt;i&gt;e&lt;/i&gt;是个值,要么是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%5Crightarrow+e%27+forsome%5C+e&quot; alt=&quot;e \rightarrow e&amp;#39; forsome\ e&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;理论五(保留性)&lt;/b&gt;如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau&quot; alt=&quot;\vdash e:\tau&quot; eeimg=&quot;1&quot;/&gt; ,同时 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%5Crightarrow+e%27+forsome%5C+e&quot; alt=&quot;e \rightarrow e&amp;#39; forsome\ e&quot; eeimg=&quot;1&quot;/&gt; , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%27%3A%5Ctau&quot; alt=&quot;\vdash e&amp;#39;:\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;最后再吹一下牛逼的类型推导&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们知道&lt;b&gt;MLsub&lt;/b&gt;是一个非常的强大的东西,刚才我提到过&lt;b&gt;MLrec&lt;/b&gt;那么&lt;b&gt;MLsub&lt;/b&gt;是严格的包含了整个&lt;b&gt;MLrec&lt;/b&gt;的存在,所以看不懂很正常咳咳咳.&lt;/p&gt;&lt;p&gt;假如我们有个函数:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+f.%5Clambda+x.f%28f+x%29&quot; alt=&quot;\lambda f.\lambda x.f(f x)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;在一般的&lt;b&gt;ML&lt;/b&gt;下的类型回事这样式(shai)儿的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha.%28%5Calpha+%5Crightarrow+%5Calpha%29+%5Crightarrow+%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha.(\alpha \rightarrow \alpha) \rightarrow \alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 我们&lt;b&gt;MLsub&lt;/b&gt;能带来更加符合直觉,更好看的类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha%2C%5Cbeta.%28%28%5Calpha+%5Csqcup+%5Cbeta%29%5Crightarrow+%5Cbeta%29%5Crightarrow%28%5Calpha+%5Crightarrow+%5Cbeta%29&quot; alt=&quot;\forall \alpha,\beta.((\alpha \sqcup \beta)\rightarrow \beta)\rightarrow(\alpha \rightarrow \beta)&quot; eeimg=&quot;1&quot;/&gt; 这个栗子不是特别突出&lt;/p&gt;&lt;p&gt;再举一个栗子,大家都知道这个函数吧 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+x.+xx&quot; alt=&quot;\lambda x. xx&quot; eeimg=&quot;1&quot;/&gt; 我们蠢萌的&lt;b&gt;ML&lt;/b&gt;没法举出这个东西的类型,但是我们&lt;b&gt;MLsub&lt;/b&gt;就可以差不多的推出来个这样的东西&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha%2C%5Cbeta.%28%28%5Calpha+%5Crightarrow+%5Cbeta%29%5Csqcap+%5Calpha%29%5Crightarrow+%5Cbeta&quot; alt=&quot;\forall \alpha,\beta.((\alpha \rightarrow \beta)\sqcap \alpha)\rightarrow \beta&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;一看,哇,漂亮对吧,一个 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Csqcap&quot; alt=&quot;\sqcap&quot; eeimg=&quot;1&quot;/&gt;就解决了这个&lt;i&gt;x&lt;/i&gt;的类型归属问题,同时解决了递归. &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;这一章稍微有点长,有的没的的东西讲的有点多,还是老规矩,大佬觉得错了就赶紧评论&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-06-21-69889087</guid>
<pubDate>Fri, 21 Jun 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.二</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-20-69889087.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69889087&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c9d6722460086c35f984571254f16343_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;上回我们讲完了类型推导,&lt;b&gt;HM&lt;/b&gt;类型推断中遇到的所有的困难都是来自于自身的短板,但是不使用子类型我们也可以使用无数的类型进行类型海作战达到这一目的,显然这是我们开发者和用户都不想看到的 (瞄一眼我们的垃圾JAWA)&lt;/p&gt;&lt;p&gt;因为&lt;b&gt;ML&lt;/b&gt;的变体太多了&lt;b&gt;MLf  &lt;/b&gt;,  &lt;b&gt;MLext-row  &lt;/b&gt;,  &lt;b&gt;MLrec  &lt;/b&gt;等 所以不介意我们再多加一种实现呢(笑嘻嘻)&lt;/p&gt;&lt;p&gt;所以下面就是作者给&lt;b&gt;MLsub&lt;/b&gt;定义的语法&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%3A%3A%3D+x%5C%5C+%7C%5Clambda+x.e%5C%5C+%7Ce_1+e_2%5C%5C+%7C%5C%7Bl_1+%3D+e_1%2Cl_2%3De_2%2C...%2Cl_n+%3D+e_n%5C%7D%5C%5C+%7Ce.l%5C%5C+%7C%5Chat%7Bx%7D%5C%5C+%7Clet+%5C+%5Chat%7Bx%7D+%5C+%3D+%5C+e_1+%5C+in+%5C+e_2&quot; alt=&quot;e ::= x\\ |\lambda x.e\\ |e_1 e_2\\ |\{l_1 = e_1,l_2=e_2,...,l_n = e_n\}\\ |e.l\\ |\hat{x}\\ |let \ \hat{x} \ = \ e_1 \ in \ e_2&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;解释一下啊,&lt;b&gt;{}&lt;/b&gt;包裹的是一个记录的构造器&lt;/p&gt;&lt;p&gt;然后环境变量的规则是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma+%3A%3A%3D+e%5C%5C+%7C%5CGamma%2Cx%3A%5Ctau%5C%5C+%7C%5CGamma%2C%5Chat%7Bx%7D%3A%5Cforall%5Cvec%5Calpha.%5Ctau&quot; alt=&quot;\Gamma ::= e\\ |\Gamma,x:\tau\\ |\Gamma,\hat{x}:\forall\vec\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;定义类型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;基本的有函数类型,记录类型,我可以添加基础的布尔类型,我们还有最大最小类型,还有那个上限下限类型运算符.&lt;/p&gt;&lt;p&gt;使用递归类型和&lt;b&gt;subtyping&lt;/b&gt;还有最大最小类型我们定义一个&lt;b&gt;Y组合子&lt;/b&gt;试试&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=Y%28%5Clambda+f.%5Clambda+x.f%29&quot; alt=&quot;Y(\lambda f.\lambda x.f)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个的类型我们写作 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop+%5Crightarrow+%28%5Ctop+%5Crightarrow+%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow....%29&quot; alt=&quot;\top \rightarrow (\top \rightarrow (\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow....)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;很好,写不下&lt;/p&gt;&lt;p&gt;么我们姑且吧&lt;i&gt;α&lt;/i&gt;当作递归类型处理吧,所以这个东西的类型是: &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop+%5Crightarrow+%5Calpha&quot; alt=&quot;\top \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 为了写的爽,干脆类型的语法也就这么来吧&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%3A%3A%3D+%5Ctau_1+%5Crightarrow+%5Ctau_2%5C%5C+%7C%5C%7Bl1%3A%5Ctau_1%2C...%5C%7D%5C%5C+%7C%5Calpha%5C%5C+%7C%5Ctop%5C%5C+%7C%5Cbot%5C%5C+%7C%5Ctau+%5Csqcap%5Ctau%5C%5C+%7C%5Ctau+%5Csqcup+%5Ctau&quot; alt=&quot;\tau ::= \tau_1 \rightarrow \tau_2\\ |\{l1:\tau_1,...\}\\ |\alpha\\ |\top\\ |\bot\\ |\tau \sqcap\tau\\ |\tau \sqcup \tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;好了,我们有了类型构造的语法,那么我们想一下,对于这些记录(record)该怎么搞&lt;/p&gt;&lt;p&gt;如果我们有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bl_1%3A%5Ctau_1%2Cl_2%3A%5Ctau_2%5C%7D&quot; alt=&quot;\{l_1:\tau_1,l_2:\tau_2\}&quot; eeimg=&quot;1&quot;/&gt;我们可以写成 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D&quot; alt=&quot;\{f\}&quot; eeimg=&quot;1&quot;/&gt;其 &lt;img src=&quot;https://www.zhihu.com/equation?tex=dom%5C+f+%3D+%5C%7Bl_1%2Cl_2%5C%7D&quot; alt=&quot;dom\ f = \{l_1,l_2\}&quot; eeimg=&quot;1&quot;/&gt; 我们就可以用这个操作获取类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=f%28l_1%29+%3D+%5Ctau_1&quot; alt=&quot;f(l_1) = \tau_1&quot; eeimg=&quot;1&quot;/&gt;,好的这个问题处理完了,我们接着处理函数的问题.&lt;/p&gt;&lt;p&gt;我们可以让语法树的类型部分是无限的,但是我们需要采用限制操作符就不是,比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Crightarrow+%28bool+%5Crightarrow%28bool+%5Crightarrow%28bool+%5Crightarrow%28....%29%29&quot; alt=&quot;bool \rightarrow (bool \rightarrow(bool \rightarrow(bool \rightarrow(....))&quot; eeimg=&quot;1&quot;/&gt;是合法的代码但是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Csqcap+%28bool+%5Csqcap%28bool+%5Csqcap%28bool+%5Csqcap%28....%29%29&quot; alt=&quot;bool \sqcap (bool \sqcap(bool \sqcap(bool \sqcap(....))&quot; eeimg=&quot;1&quot;/&gt;并不是合法的代码.&lt;/p&gt;&lt;p&gt;但是一般人是写不出来这种无限长的类型定义的,所以我们使用 &lt;b&gt;polar type&lt;/b&gt;进行操作,现在这一章先不讲,这是一种有限类型的子集,你知道方便写和推导就行了.&lt;/p&gt;&lt;p&gt;那么接着上一章提到的&lt;b&gt;分配格&lt;/b&gt;来讲,我们也设计一套规则&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Csqcup+%5Ctau+%5Cequiv+%5Ctau+%5Cqquad+%5Ctau+%5Csqcap+%5Ctau+%5Cequiv+%5Ctau%5C%5C+%5Ctau_1+%5Csqcup+%5Ctau_2+%5Cequiv+%5Ctau_2+%5Csqcup+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%5Ctau_2+%5Cequiv+%5Ctau_2+%5Csqcap+%5Ctau_1%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_2+%5Csqcup+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_2%29+%5Csqcup+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%28%5Ctau_2+%5Csqcap+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_2%29+%5Csqcap+%5Ctau_1%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_1+%5Csqcap+%5Ctau_2%29+%5Cequiv+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%28%5Ctau_1+%5Csqcup+%5Ctau_2%29+%5Cequiv+%5Ctau_1%5C%5C+%5Cbot+%5Csqcup+%5Ctau+%5Cequiv+%5Ctau+%5Cqquad+%5Cbot+%5Csqcap+%5Ctau+%5Cequiv+%5Cbot%5C%5C+%5Ctop+%5Csqcup+%5Ctau+%5Cequiv+%5Ctop+%5Cqquad+%5Ctop+%5Csqcap+%5Ctau+%5Cequiv+%5Ctau%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_2+%5Csqcap+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_2%29%5Csqcap%28%5Ctau_1%5Csqcup%5Ctau_3%29%5C%5C+%5Ctau_1+%5Csqcap+%28%5Ctau_2+%5Csqcup+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_2%29%5Csqcup%28%5Ctau_1%5Csqcap%5Ctau_3%29%5C%5C&quot; alt=&quot;\tau \sqcup \tau \equiv \tau \qquad \tau \sqcap \tau \equiv \tau\\ \tau_1 \sqcup \tau_2 \equiv \tau_2 \sqcup \tau_1 \qquad \tau_1 \sqcap \tau_2 \equiv \tau_2 \sqcap \tau_1\\ \tau_1 \sqcup (\tau_2 \sqcup \tau_3) \equiv (\tau_1\sqcup\tau_2) \sqcup \tau_1 \qquad \tau_1 \sqcap (\tau_2 \sqcap \tau_3) \equiv (\tau_1\sqcap\tau_2) \sqcap \tau_1\\ \tau_1 \sqcup (\tau_1 \sqcap \tau_2) \equiv \tau_1 \qquad \tau_1 \sqcap (\tau_1 \sqcup \tau_2) \equiv \tau_1\\ \bot \sqcup \tau \equiv \tau \qquad \bot \sqcap \tau \equiv \bot\\ \top \sqcup \tau \equiv \top \qquad \top \sqcap \tau \equiv \tau\\ \tau_1 \sqcup (\tau_2 \sqcap \tau_3) \equiv (\tau_1\sqcup\tau_2)\sqcap(\tau_1\sqcup\tau_3)\\ \tau_1 \sqcap (\tau_2 \sqcup \tau_3) \equiv (\tau_1\sqcap\tau_2)\sqcup(\tau_1\sqcap\tau_3)\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;...是不是跟布尔运算规则一个样&lt;br/&gt;下面是函数和记录的构造函数限制&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%5Csqcup%28%5Ctau_1%27+%5Crightarrow+%5Ctau_2%27%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_1%27%29%5Crightarrow%28%5Ctau_2%5Csqcup%5Ctau_2%27%29%5C%5C+%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%5Csqcap%28%5Ctau_1%27+%5Crightarrow+%5Ctau_2%27%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_1%27%29%5Crightarrow%28%5Ctau_2%5Csqcap%5Ctau_2%27%29%5C%5C++&quot; alt=&quot;(\tau_1 \rightarrow \tau_2)\sqcup(\tau_1&amp;#39; \rightarrow \tau_2&amp;#39;) \equiv (\tau_1\sqcap\tau_1&amp;#39;)\rightarrow(\tau_2\sqcup\tau_2&amp;#39;)\\ (\tau_1 \rightarrow \tau_2)\sqcap(\tau_1&amp;#39; \rightarrow \tau_2&amp;#39;) \equiv (\tau_1\sqcup\tau_1&amp;#39;)\rightarrow(\tau_2\sqcap\tau_2&amp;#39;)\\  &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Csqcup+%5C%7Bg%5C%7D+%5Cequiv+%5C%7Bh%5C%7D%5C%5C+%5Cqquad+where+%5C++dom+%5C+h++%3D+dom+%5C+f+%5Ccap+dom+%5C+g%5C%5C+%5Cqquad+and+%5C+h%28l%29+%3D+f%28l%29+%5Csqcup+g%28l%29%5C%5C&quot; alt=&quot;\{f\} \sqcup \{g\} \equiv \{h\}\\ \qquad where \  dom \ h  = dom \ f \cap dom \ g\\ \qquad and \ h(l) = f(l) \sqcup g(l)\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Csqcap+%5C%7Bg%5C%7D+%5Cequiv+%5C%7Bh%5C%7D%5C%5C+%5Cqquad+where+%5C++dom+%5C+h++%3D+dom+%5C+f+%5Ccup+dom+%5C+g%5C%5C+%5Cqquad+and+%5C+h%28l%29+%3D+%5Cleft%5C%7B+++++%5Cbegin%7Bmatrix%7D+++++++++++++f%28l%29+%5Csqcap+g%28l%29+%5Cquad+if+%5C+l+%5C+%5Cin+dom+%5C+f+%5Ccap+dom+%5C+g%5C%5C+++++++++++++f%28l%29+%5Cqquad+if+%5C+l+%5C+%5Cin+dom+%5C+f+-+dom+%5C+g%5C%5C+++++++++++++g%28l%29+%5Cqquad+if+%5C+l+%5C+%5Cin+dom+%5C+g+-+dom+%5C+f%5C%5C+++++%5Cend%7Bmatrix%7D+++++%5Cright%5C%7D&quot; alt=&quot;\{f\} \sqcap \{g\} \equiv \{h\}\\ \qquad where \  dom \ h  = dom \ f \cup dom \ g\\ \qquad and \ h(l) = \left\{     \begin{matrix}             f(l) \sqcap g(l) \quad if \ l \ \in dom \ f \cap dom \ g\\             f(l) \qquad if \ l \ \in dom \ f - dom \ g\\             g(l) \qquad if \ l \ \in dom \ g - dom \ f\\     \end{matrix}     \right\}&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;递归类型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;MLsub&lt;/b&gt;作为一个牛*的语言,肯定是要支持递归类型的!&lt;/p&gt;&lt;p&gt;经典的递归类型的处理方法是:首先我们有一个类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5Calpha.%5Ctau&quot; alt=&quot;\mu\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;我们会把他当成一个映射的不动点 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;这个就确定了 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu&quot; alt=&quot;\mu&quot; eeimg=&quot;1&quot;/&gt;的约束和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;,并获得了一下的推理原则:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5B%5Ctau_0%2F%5Calpha%5D+%3D+%5Ctau_0+%5CRightarrow+%5Cmu%5Calpha.%5Ctau+%3D+%5Ctau_0&quot; alt=&quot;\tau[\tau_0/\alpha] = \tau_0 \Rightarrow \mu\alpha.\tau = \tau_0&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;但是,我们并不是传统的&lt;b&gt;ML&lt;/b&gt;我们是&lt;b&gt;MLsub&lt;/b&gt;是有&lt;b&gt;subtyping&lt;/b&gt;的&lt;b&gt;ML&lt;/b&gt;,所以这个不⭐ 我们需要一种可以支持&lt;b&gt;subtyping&lt;/b&gt;的比如这样 &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5B%5Ctau_0%2F%5Calpha%5D+%5Cleq+%5Ctau_0+%5CRightarrow+%5Cmu%5Calpha.%5Ctau+%5Cleq+%5Ctau_0&quot; alt=&quot;\tau[\tau_0/\alpha] \leq \tau_0 \Rightarrow \mu\alpha.\tau \leq \tau_0&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个就需要 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5Calpha.%5Ctau&quot; alt=&quot;\mu\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;是一个 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi&quot; alt=&quot;\phi&quot; eeimg=&quot;1&quot;/&gt;最小的不动点, 简单(数学)的术语来描述就是映射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;单调的时候 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变,用人话讲就是所有的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;都出现在偶数的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Crightarrow&quot; alt=&quot;\rightarrow&quot; eeimg=&quot;1&quot;/&gt;的左侧. &lt;br/&gt;这里带来了两个引论: &lt;/p&gt;&lt;p&gt;&lt;b&gt;引论一&lt;/b&gt;,如果&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变,那么&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;就是有一个最小的前不动点,那么我们可以写作 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E%2B%5Calpha.%5Ctau&quot; alt=&quot;\mu^+\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt; 相对的,最大的后不动点就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E-%5Calpha.%5Ctau&quot; alt=&quot;\mu^-\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;但是,残念有问题 &lt;i&gt;α&lt;/i&gt;和&lt;i&gt;α&lt;/i&gt;是逆变的,所以我们需要引入&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Cmu%5E%2B%5Calpha.%5Ctau+%3D+%5Cbot%5C%5C%5Cmu%5E-%5Calpha.%5Ctau+%3D+%5Ctop%5C%5C&quot; alt=&quot;\\\mu^+\alpha.\tau = \bot\\\mu^-\alpha.\tau = \top\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;(您家的haskell就是这样的),那么假如所有的&lt;i&gt;α&lt;/i&gt;都有至少一种类型构造器,&lt;i&gt;α&lt;/i&gt;被&lt;i&gt;τ&lt;/i&gt;保护,这样凑合就能用了&lt;/p&gt;&lt;p&gt;&lt;b&gt;引论二&lt;/b&gt;,如果&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变同时被他保护,那么 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E%2B%5Calpha.%5Ctau+%3D+%5Cmu%5E-%5Calpha.%5Ctau&quot; alt=&quot;\mu^+\alpha.\tau = \mu^-\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;这种情况下&lt;i&gt;α&lt;/i&gt;没用 似乎看起来减少了需要处理的类型,那么就很好,然而有个叫&lt;b&gt;Bekic&lt;/b&gt;的科学家发现我们可以找到一种类型成立表达式 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Cequiv+%5Ctau+%5Crightarrow+%5Ctau&quot; alt=&quot;\tau \equiv \tau \rightarrow \tau&quot; eeimg=&quot;1&quot;/&gt; (当然连我觉得都很扯,这都是什么烂七八糟的东西,不过人家有理有据,看看他是怎么搞得)所以按照他的思路我们可以写出这个东西 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Ctau_2+%5Crightarrow+%5Ctau_1+%5Cqquad+%5Ctau_2%3D%5Ctau_1+%5Crightarrow+%5Ctau_2%5C%5C&quot; alt=&quot;\\\tau_1=\tau_2 \rightarrow \tau_1 \qquad \tau_2=\tau_1 \rightarrow \tau_2\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;顺着这个思路带入&lt;i&gt;μ&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Cmu%5Calpha.%5Ctau_2+%5Crightarrow+%5Calpha+%5Cqquad+%5Ctau_2%3D%5Cmu%5Cbeta.%5Ctau_1+%5Crightarrow+%5Cbeta%5C%5C&quot; alt=&quot;\\\tau_1=\mu\alpha.\tau_2 \rightarrow \alpha \qquad \tau_2=\mu\beta.\tau_1 \rightarrow \beta\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;替换一下就可以得到&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Cmu%5Calpha.%28%5Cmu%5Cbeta.%5Calpha+%5Crightarrow+%5Cbeta%29+%5Crightarrow+%5Calpha+%5Cqquad+%5Ctau_2%3D%5Cmu%5Cbeta.%28%5Cmu%5Calpha.%5Cbeta+%5Crightarrow+%5Calpha%29+%5Crightarrow+%5Cbeta%5C%5C&quot; alt=&quot;\\\tau_1=\mu\alpha.(\mu\beta.\alpha \rightarrow \beta) \rightarrow \alpha \qquad \tau_2=\mu\beta.(\mu\alpha.\beta \rightarrow \alpha) \rightarrow \beta\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后我们说过这种情况下&lt;i&gt;α&lt;/i&gt;,&lt;i&gt;β&lt;/i&gt;没蛋的用,所以利用模式匹配总结一下&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Cequiv+%5Ctau_2&quot; alt=&quot;\tau_1 \equiv \tau_2&quot; eeimg=&quot;1&quot;/&gt;所以....推出来了这个脑残的表达式 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Cequiv+%5Ctau+%5Crightarrow+%5Ctau&quot; alt=&quot;\tau \equiv \tau \rightarrow \tau&quot; eeimg=&quot;1&quot;/&gt;我们为了纪念他,给他放个特例叫他 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau_1%2C%5Ctau_2%29&quot; alt=&quot;\phi(\tau_1,\tau_2)&quot; eeimg=&quot;1&quot;/&gt;他的不动点就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Cmu.%5Calpha.%5Cphi%28%5Cmu%5Cbeta.%5Cphi%28%5Calpha%2C%5Cbeta%29%2C%5Calpha%29%5C%5C&quot; alt=&quot;\\\mu.\alpha.\phi(\mu\beta.\phi(\alpha,\beta),\alpha)\\&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;我知道我知道,里面可以继续展开我就不展开了....&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;稳健性(Soundness)&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们的&lt;b&gt;MLsub&lt;/b&gt;的&lt;b&gt;subtyping&lt;/b&gt;并不是一个由案例来定义的,同时靠着案例反演呀并不是一个非常有意义的操作(所以这就是我unsound的理由,咳咳咳) 实际上,仅仅给出 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Cleq+%5Ctau_2+%5Crightarrow+%5Ctau_3&quot; alt=&quot;\tau_1 \leq \tau_2 \rightarrow \tau_3&quot; eeimg=&quot;1&quot;/&gt;我们可以得到 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%3D+%5Cbot&quot; alt=&quot;\tau_1 = \bot&quot; eeimg=&quot;1&quot;/&gt; 或者是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%3D+%28%5Calpha+%5Crightarrow+%5Cbeta%29%5Csqcap+%5Calpha&quot; alt=&quot;\tau_1 = (\alpha \rightarrow \beta)\sqcap \alpha&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;引论三(反转性)&lt;/b&gt;, 如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%5Crightarrow%5Ctau_2%5Cleq%5Ctau_1%27%5Crightarrow%5Ctau_2%27&quot; alt=&quot;\tau_1\rightarrow\tau_2\leq\tau_1&amp;#39;\rightarrow\tau_2&amp;#39;&quot; eeimg=&quot;1&quot;/&gt; 则 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%27%5Cleq%5Ctau_1%2C%5Ctau_2%27%5Cleq%5Ctau_2&quot; alt=&quot;\tau_1&amp;#39;\leq\tau_1,\tau_2&amp;#39;\leq\tau_2&quot; eeimg=&quot;1&quot;/&gt;,如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Cleq+%5C%7Bg%5C%7D&quot; alt=&quot;\{f\} \leq \{g\}&quot; eeimg=&quot;1&quot;/&gt;则对于 &lt;img src=&quot;https://www.zhihu.com/equation?tex=l+%5Cin+dom%5C+g&quot; alt=&quot;l \in dom\ g&quot; eeimg=&quot;1&quot;/&gt;里 &lt;img src=&quot;https://www.zhihu.com/equation?tex=f%28l%29%5Cleq+g%28l%29&quot; alt=&quot;f(l)\leq g(l)&quot; eeimg=&quot;1&quot;/&gt;幸好这个有proof.&lt;br/&gt;&lt;br/&gt; &lt;b&gt;理论四(进展性),&lt;/b&gt;如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau&quot; alt=&quot;\vdash e:\tau&quot; eeimg=&quot;1&quot;/&gt; ,要么&lt;i&gt;e&lt;/i&gt;是个值,要么是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%5Crightarrow+e%27+forsome%5C+e&quot; alt=&quot;e \rightarrow e&amp;#39; forsome\ e&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;理论五(保留性)&lt;/b&gt;如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau&quot; alt=&quot;\vdash e:\tau&quot; eeimg=&quot;1&quot;/&gt; ,同时 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%5Crightarrow+e%27+forsome%5C+e&quot; alt=&quot;e \rightarrow e&amp;#39; forsome\ e&quot; eeimg=&quot;1&quot;/&gt; , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%27%3A%5Ctau&quot; alt=&quot;\vdash e&amp;#39;:\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;最后再吹一下牛逼的类型推导&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们知道&lt;b&gt;MLsub&lt;/b&gt;是一个非常的强大的东西,刚才我提到过&lt;b&gt;MLrec&lt;/b&gt;那么&lt;b&gt;MLsub&lt;/b&gt;是严格的包含了整个&lt;b&gt;MLrec&lt;/b&gt;的存在,所以看不懂很正常咳咳咳.&lt;/p&gt;&lt;p&gt;假如我们有个函数:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+f.%5Clambda+x.f%28f+x%29&quot; alt=&quot;\lambda f.\lambda x.f(f x)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;在一般的&lt;b&gt;ML&lt;/b&gt;下的类型回事这样式(shai)儿的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha.%28%5Calpha+%5Crightarrow+%5Calpha%29+%5Crightarrow+%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha.(\alpha \rightarrow \alpha) \rightarrow \alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 我们&lt;b&gt;MLsub&lt;/b&gt;能带来更加符合直觉,更好看的类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha%2C%5Cbeta.%28%28%5Calpha+%5Csqcup+%5Cbeta%29%5Crightarrow+%5Cbeta%29%5Crightarrow%28%5Calpha+%5Crightarrow+%5Cbeta%29&quot; alt=&quot;\forall \alpha,\beta.((\alpha \sqcup \beta)\rightarrow \beta)\rightarrow(\alpha \rightarrow \beta)&quot; eeimg=&quot;1&quot;/&gt; 这个栗子不是特别突出&lt;/p&gt;&lt;p&gt;再举一个栗子,大家都知道这个函数吧 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+x.+xx&quot; alt=&quot;\lambda x. xx&quot; eeimg=&quot;1&quot;/&gt; 我们蠢萌的&lt;b&gt;ML&lt;/b&gt;没法举出这个东西的类型,但是我们&lt;b&gt;MLsub&lt;/b&gt;就可以差不多的推出来个这样的东西&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha%2C%5Cbeta.%28%28%5Calpha+%5Crightarrow+%5Cbeta%29%5Csqcap+%5Calpha%29%5Crightarrow+%5Cbeta&quot; alt=&quot;\forall \alpha,\beta.((\alpha \rightarrow \beta)\sqcap \alpha)\rightarrow \beta&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;一看,哇,漂亮对吧,一个 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Csqcap&quot; alt=&quot;\sqcap&quot; eeimg=&quot;1&quot;/&gt;就解决了这个&lt;i&gt;x&lt;/i&gt;的类型归属问题,同时解决了递归. &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;这一章稍微有点长,有的没的的东西讲的有点多,还是老规矩,大佬觉得错了就赶紧评论&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-06-20-69889087</guid>
<pubDate>Thu, 20 Jun 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
