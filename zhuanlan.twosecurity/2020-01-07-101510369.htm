<div class="title-image"><img src="https://pic4.zhimg.com/v2-b2b2d49e4d56b6cdc569d87e94aa3e13_b.jpg" alt=""></div><p>都 2020 年了，还在手工测 XSS ？</p><p>还在往各种输入框里提交 &lt;script&gt;alert(/xss/)&lt;/script&gt; ?</p><p>有这功夫不如喝喝茶、划划水？</p><p>试试这款“X矛”吧，绝对会给你带来意想不到的收获。</p><h2>XSpear</h2><blockquote>一个针对 XSS 的扫描器。</blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/hahwul/XSpear" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/hahwul/XSpea</span><span class="invisible">r</span><span class="ellipsis"></span></a></p><p>顾名思义，一款基于 RubyGems 的 XSS 漏洞扫描器。能够进行常见的 XSS 扫描测试以及参数分析。</p><h2>功能</h2><ul><li>基于模式匹配的XSS扫描</li><li>alert confirm prompt 在无痕浏览器上检测事件（使用 Selenium）</li><li>XSS保护绕过和反射参数的测试请求/响应</li><ul><li>反射参数</li><li>所有参数（适用于 XSS 和 Anytings）</li><li>过滤测试 event handler HTML tag Special Char Useful code </li></ul><li>测试 Blind XSS（使用 XSS Hunter，ezXSS，HBXSS，Etc 所有 url base 盲测...）</li><li>动态/静态分析</li><ul><li>查找 SQL 错误模式</li><li>分析 Security 头（CSP HSTS X-frame-options，XSS-protection 等...）</li><li>分析其他头文件（服务器版本，内容类型等）</li><li>XSS 测试到 URL 路径</li></ul><li>从原始文件扫描（Burp 套件，ZAP 请求）</li><li>XSpear 在 Ruby 代码上运行（带有 Gem 库）</li><li>显示 table base cli-report 和 filtered rule，testing raw query（url）</li><li>在所选参数上进行测试</li><li>支持输出格式 cli json</li><ul><li>cli：摘要，过滤规则（参数），原始查询</li></ul><li>支持详细级别（0〜3）</li><ul><li>0：相当模式（仅结果）</li><li>1：显示扫描状态（默认）</li><li>2：显示扫描日志</li><li>3：显示详细记录</li></ul><li>支持自定义回调代码以测试各种攻击媒介</li><li>支持配置文件</li></ul><h2>安装（Linux下）</h2><blockquote>Gem 是一个管理 Ruby 库和程序的标准包，它通过 Ruby Gem 源来查找、安装、升级和卸载软件包，非常的便捷。</blockquote><p>先安装依赖</p><div class="highlight"><pre><code class="language-text">$ gem install colorize
$ gem install selenium-webdriver
$ gem install terminal-table
$ gem install progress_bar</code></pre></div><p>再进行安装</p><div class="highlight"><pre><code class="language-text">$ gem install XSpear</code></pre></div><p>或者本地安装特定版本</p><p>下载地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/hahwul/XSpear/releases" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/hahwul/XSpea</span><span class="invisible">r/releases</span><span class="ellipsis"></span></a></p><p>再进行安装</p><div class="highlight"><pre><code class="language-text">$ gem install XSpear-1.3.1.gem</code></pre></div><p>将此行添加到应用程序的Gemfile：</p><div class="highlight"><pre><code class="language-text">gem &#39;XSpear&#39;</code></pre></div><p>然后执行</p><div class="highlight"><pre><code class="language-text">$ bundle</code></pre></div><figure data-size="small"><noscript><img src="https://pic1.zhimg.com/v2-c26c76dd2aadaf414dfca891640c38d0_b.jpg" data-caption="" data-size="small" data-rawwidth="1229" data-rawheight="908" class="origin_image zh-lightbox-thumb" width="1229" data-original="https://pic1.zhimg.com/v2-c26c76dd2aadaf414dfca891640c38d0_r.jpg"/></noscript><img src="https://pic1.zhimg.com/v2-c26c76dd2aadaf414dfca891640c38d0_b.jpg" data-caption="" data-size="small" data-rawwidth="1229" data-rawheight="908" class="origin_image zh-lightbox-thumb lazy" width="1229" data-original="https://pic1.zhimg.com/v2-c26c76dd2aadaf414dfca891640c38d0_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-c26c76dd2aadaf414dfca891640c38d0_b.jpg"/></figure><h2>CLI的用法</h2><div class="highlight"><pre><code class="language-text">Usage: xspear -u [target] -[options] [value]
[ e.g ]
$ xspear -u &#39;https://www.hahwul.com/?q=123&#39; --cookie=&#39;role=admin&#39; -v 1 -a 
$ xspear -u &#34;http://testphp.vulnweb.com/listproducts.php?cat=123&#34; -v 2

[ Options ]
    -u, --url=target_URL             [required] Target Url
    -d, --data=POST Body             [optional] POST Method Body data
    -a, --test-all-params            [optional] test to all params(include not reflected)
        --headers=HEADERS            [optional] Add HTTP Headers
        --cookie=COOKIE              [optional] Add Cookie
        --raw=FILENAME               [optional] Load raw file(e.g raw_sample.txt)
    -p, --param=PARAM                [optional] Test paramters
    -b, --BLIND=URL                  [optional] Add vector of Blind XSS
                                      + with XSS Hunter, ezXSS, HBXSS, etc...
                                      + e.g : -b https://hahwul.xss.ht
    -t, --threads=NUMBER             [optional] thread , default: 10
    -o, --output=FORMAT              [optional] Output format (cli , json)
    -c, --config=FILENAME            [optional] Using config.json
    -v, --verbose=0~3                [optional] Show log depth
                                      + v=0 : quite mode(only result)
                                      + v=1 : show scanning status(default)
                                      + v=2 : show scanning logs
                                      + v=3 : show detail log(req/res)
    -h, --help                       Prints this help
        --version                    Show XSpear version
        --update                     Show how to update</code></pre></div><h3>输出的结果类型</h3><ul><li>（I）NFO：获取信息（例如sql错误，过滤规则，反映的参数等。）</li><li>（V）UNL：易受攻击的XSS，已通过Selenium检查/警告/提示/确认</li><li>（L）OW：低级别问题</li><li>（M）EDIUM：中级问题</li><li>（H）IGH：高级别问题</li></ul><h2>测试</h2><p><b>[0]完全模式（仅显示结果）</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/listproducts.php?cat=123&#34; -v 0</code></pre></div><p><b>[1]显示进度条（默认）</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/listproducts.php?cat=123&#34; -v 1
[*] analysis request..
[*] used test-reflected-params mode(default)
[*] creating a test query [for reflected 2 param + blind XSS ]
[*] test query generation is complete. [249 query]
[*] starting XSS Scanning. [10 threads]

[#######################################] [249/249] [100.00%] [01:05] [00:00] [  3.83/s]
...</code></pre></div><p><b>[2]显示扫描日志</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/listproducts.php?cat=123&#34; -v 2
[*] analysis request..
[I] [22:42:41] [200/OK] [param: cat][Found SQL Error Pattern]
[-] [22:42:41] [200/OK] &#39;STATIC&#39; not reflected
[-] [22:42:41] [200/OK] &#39;cat&#39; not reflected &lt;script&gt;alert(45)&lt;/script&gt;
[I] [22:42:41] [200/OK] reflected rEfe6[param: cat][reflected parameter]
[*] used test-reflected-params mode(default)
[*] creating a test query [for reflected 2 param + blind XSS ]
[*] test query generation is complete. [249 query]
[*] starting XSS Scanning. [10 threads]
[I] [22:42:43] [200/OK] reflected onhwul=64[param: cat][reflected EHon{any} pattern]
[-] [22:42:54] [200/OK] &#39;cat&#39; not reflected &lt;img/src onerror=alert(45)&gt;
[-] [22:42:54] [200/OK] &#39;cat&#39; not reflected &lt;svg/onload=alert(45)&gt;
[H] [22:42:54] [200/OK] reflected &lt;script&gt;alert(45)&lt;/script&gt;[param: cat][reflected XSS Code]
[V] [22:42:59] [200/OK] found alert/prompt/confirm (45) in selenium!! &#39;&#34;&gt;&lt;svg/onload=alert(45)&gt;[param: cat][triggered &lt;svg/onload=alert(45)&gt;]
...</code></pre></div><p><b>[3]显示扫描详细日志</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/listproducts.php?cat=123&#34; -v 3
[*] analysis request..
[-] [22:56:21] [200/OK] http://testphp.vulnweb.com/listproducts.php?cat=123 in url
[ Request ]
{&#34;accept-encoding&#34;=&gt;[&#34;gzip;q=1.0,deflate;q=0.6,identity;q=0.3&#34;], &#34;accept&#34;=&gt;[&#34;*/*&#34;], &#34;user-agent&#34;=&gt;[&#34;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0&#34;], &#34;connection&#34;=&gt;[&#34;keep-alive&#34;], &#34;host&#34;=&gt;[&#34;testphp.vulnweb.com&#34;]}
[ Response ]
{&#34;server&#34;=&gt;[&#34;nginx/1.4.1&#34;], &#34;date&#34;=&gt;[&#34;Sun, 29 Dec 2019 13:53:23 GMT&#34;], &#34;content-type&#34;=&gt;[&#34;text/html&#34;], &#34;transfer-encoding&#34;=&gt;[&#34;chunked&#34;], &#34;connection&#34;=&gt;[&#34;keep-alive&#34;], &#34;x-powered-by&#34;=&gt;[&#34;PHP/5.3.10-1~lucid+2uwsgi2&#34;]}
[-] [22:56:21] [200/OK] &#39;STATIC&#39; not reflected
[-] [22:56:21] [200/OK] cat=123rEfe6 in url
...
[*] used test-reflected-params mode(default)
[*] creating a test query [for reflected 2 param + blind XSS ]
[*] test query generation is complete. [249 query]
[*] starting XSS Scanning. [10 threads]
...
[ Request ]
{&#34;accept-encoding&#34;=&gt;[&#34;gzip;q=1.0,deflate;q=0.6,identity;q=0.3&#34;], &#34;accept&#34;=&gt;[&#34;*/*&#34;], &#34;user-agent&#34;=&gt;[&#34;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0&#34;], &#34;connection&#34;=&gt;[&#34;keep-alive&#34;], &#34;host&#34;=&gt;[&#34;testphp.vulnweb.com&#34;]}
[ Response ]
{&#34;server&#34;=&gt;[&#34;nginx/1.4.1&#34;], &#34;date&#34;=&gt;[&#34;Sun, 29 Dec 2019 13:54:36 GMT&#34;], &#34;content-type&#34;=&gt;[&#34;text/html&#34;], &#34;transfer-encoding&#34;=&gt;[&#34;chunked&#34;], &#34;connection&#34;=&gt;[&#34;keep-alive&#34;], &#34;x-powered-by&#34;=&gt;[&#34;PHP/5.3.10-1~lucid+2uwsgi2&#34;]}
[H] [22:57:33] [200/OK] reflected &lt;keygen autofocus onfocus=alert(45)&gt;[param: cat][reflected onfocus XSS Code]
...</code></pre></div><h2>案例测试</h2><p><b>扫描XSS</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/search.php?test=query&#34; -d &#34;searchFor=yy&#34;</code></pre></div><p><b>输出 JSON</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/search.php?test=query&#34; -d &#34;searchFor=yy&#34; -o json -v 0</code></pre></div><p><b>设定线程数</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/search.php?test=query&#34; -t 30</code></pre></div><p><b>在所选参数下进行测试</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/search.php?test=query&amp;cat=123&amp;ppl=1fhhahwul&#34; -p cat,test</code></pre></div><p><b>在所有参数下测试</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/search.php?test=query&amp;cat=123&amp;ppl=1fhhahwul&#34; -a</code></pre></div><p><b>盲测 xss（所有参数）</b></p><div class="highlight"><pre><code class="language-text">$ xspear -u &#34;http://testphp.vulnweb.com/search.php?test=query&#34; -b &#34;https://hahwul.xss.ht&#34; -a

# Set your blind xss host. &lt;-b options&gt;</code></pre></div><h2>在 Burpsuite 上安装</h2><p>请参考：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/hahwul/XSpear/tree/master/forBurp" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/hahwul/XSpea</span><span class="invisible">r/tree/master/forBurp</span><span class="ellipsis"></span></a></p><p><a href="https://link.zhihu.com/?target=https%3A//www.hahwul.com/2019/12/run-other-application-on-burp-suiteburp.html" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://www.</span><span class="visible">hahwul.com/2019/12/run-</span><span class="invisible">other-application-on-burp-suiteburp.html</span><span class="ellipsis"></span></a></p><h2>使用</h2><figure data-size="small"><noscript><img src="https://pic3.zhimg.com/v2-656eb99244181c2f40f9b53ab615fe5e_b.jpg" data-caption="" data-size="small" data-rawwidth="1085" data-rawheight="1036" class="origin_image zh-lightbox-thumb" width="1085" data-original="https://pic3.zhimg.com/v2-656eb99244181c2f40f9b53ab615fe5e_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-656eb99244181c2f40f9b53ab615fe5e_b.jpg" data-caption="" data-size="small" data-rawwidth="1085" data-rawheight="1036" class="origin_image zh-lightbox-thumb lazy" width="1085" data-original="https://pic3.zhimg.com/v2-656eb99244181c2f40f9b53ab615fe5e_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-656eb99244181c2f40f9b53ab615fe5e_b.jpg"/></figure><p>更多有关内容请前往<a href="https://link.zhihu.com/?target=https%3A//www.baidu.com/link%3Furl%3DOcGTJIGtwpNYrGru7tSszpEf10ZQ0xIE7SvER9ejNcCar00KI-fG2lu214M4WKPc%26wd%3D%26eqid%3Da24dabb2002f492b000000065e13d46a" class=" wrap external" target="_blank" rel="nofollow noreferrer">二向箔安全</a>进行学习，最近推出了“挖洞”班，想了解更多资讯的，可咨询客服微信 <b>twosecurity02</b></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_b.jpg" data-caption="" data-size="normal" data-rawwidth="3041" data-rawheight="2000" class="origin_image zh-lightbox-thumb" width="3041" data-original="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_b.jpg" data-caption="" data-size="normal" data-rawwidth="3041" data-rawheight="2000" class="origin_image zh-lightbox-thumb lazy" width="3041" data-original="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-2222e29c6decda168e1be1f049d93ccf_b.jpg"/></figure>