<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>雾雨魔法店</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/</link>
<description>http://zhuanlan.zhihu.com/marisa/20419321</description>
<language>zh-cn</language>
<lastBuildDate>Sun, 28 Jul 2019 11:00:19 +0800</lastBuildDate>
<item>
<title>AST with Scope</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-07-25-75073557.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/75073557&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AST是用来表示语法构造的数据结构，而在大多数语言中都有“变量”的概念。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;那么应在AST中用什么方式表示一个“变量”呢？&lt;/li&gt;&lt;li&gt;怎么进行变量的替换呢？&lt;/li&gt;&lt;li&gt;怎么进行变量作用域的检查呢？&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;First-Order Abstract Syntax&lt;/h2&gt;&lt;p&gt;最简单直接的方法就是直接用字符串保存变量名，以lambda calculus为例：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种AST被称为FOAS，一般是parse完得到的。但这种裸的AST几乎不包含任何信息，变量和作用域之间&lt;i&gt;没有直接的关系&lt;/i&gt;，bindings也只是由&lt;i&gt;匹配字符串&lt;/i&gt;来表示。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在这个层面上对AST操作是十分不安全的，稍不注意就可能改变了语义&lt;/b&gt;。比如说不带更名的substitution：&lt;code&gt;(λy.λx.y)x&lt;/code&gt;→&lt;code&gt;λx.x&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;若要写出正确的substitution还得花点小心思，这是wiki上lambda calculus的substitution的定义（少了一种情况）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;x[x := N]       ≡ N
y[x := N]       ≡ y, if x ≠ y
(M1 M2)[x := N] ≡ (M1[x := N]) (M2[x := N])
(λx.M)[x := N]  ≡ λx.M
(λy.M)[x := N]  ≡ λy.(M[x := N]), if x ≠ y, provided y ∉ FV(N)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;“翻译到”haskell：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;       &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fvs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newName&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subst&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;fvs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;vs0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fvs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allVars&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; 

&lt;span class=&quot;nf&quot;&gt;newName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;newName&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时，这种替换效率很低。&lt;/p&gt;&lt;p&gt;我认为AST里面带上scope的信息是很必要的（本身字符串就表达不了变量名“指代”这样的语义），或许可以为之后的分析和优化提供更多的信息，主要是防止AST变换导致语义发生改变。&lt;/p&gt;&lt;h2&gt;High-Other Abstract Syntax&lt;/h2&gt;&lt;p&gt;HOAS一种十分简洁的带有scope信息的AST：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; 
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它直接将meta language的binding借了过去：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;omega&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;suc&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;甚至将求值器也借了过来。substitution直接就是apply。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而且HOAS的这种substitution特别的快。&lt;/p&gt;&lt;p&gt;不过HOAS的缺点也是十分明显的，我们不能“看进”一颗HOAS里，于是就不能对其做很多操作，比如pretty print、优化等。当然现在有一个比较简单的方法，为HOAS开个“洞”，通过这个“洞”看到里面的东西：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hole&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- store some meta objects&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在就可以写一个pretty print了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;pretty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pretty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Hole&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&amp;#34;(lam &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;. &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;succ&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Hole&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但就算是这样，HOAS的性质还是极差的（顺便还有PHOAS这样的改版，连evaluator都写不顺）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;无法实现Functor, Travesable, Foldable等typeclass，更不要说Monad了&lt;/li&gt;&lt;li&gt;在有dt的语言里，HOAS过不了strictly positive check(Agda, Coq)，也过不了total check。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所以一般只把HOAS用临时要求值的情况下，比如dt的type checker里可以用到，&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Normalisation_by_evaluation&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HOAS可以拿到normal form&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;De Bruijn Indices&lt;/h2&gt;&lt;p&gt;在LC(lambda calculus)中，这是一种用索引来指代变量的表示法：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8f4a16126b728854fcea13ba95b71a74_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;208&quot; data-rawheight=&quot;61&quot; class=&quot;content_image&quot; width=&quot;208&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8f4a16126b728854fcea13ba95b71a74_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;208&quot; data-rawheight=&quot;61&quot; class=&quot;content_image lazy&quot; width=&quot;208&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-8f4a16126b728854fcea13ba95b71a74_b.jpg&quot;/&gt;&lt;figcaption&gt;λx. (λy. y (λz. z)) (λy. x y)&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;代表一个变量的索引 为 距离 该变量所定义的 作用域之间 的距离（之间嵌套了多少个作用域），比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;λx. x&lt;/code&gt;就是&lt;code&gt;λ 1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;λx. λy. λz. x z (y z)&lt;/code&gt;就是&lt;code&gt;λ λ λ 3 1 (2 1)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这种表示法不仅干掉了α-conversion，还干掉了shadow和capture，处理起来会方便不少（疑似）。当然，这种表示法不单单可以用在LC上，在所有有“变量”/“作用域”的语言中都可以用这样一种方式来表示变量。&lt;/p&gt;&lt;p&gt;（其实用索引代表变量是一个很常见的操作）（对了 除了dbi，还有co-dbi）&lt;/p&gt;&lt;p&gt;将DBI应用在AST上，我们将变量区分为“绑定”/“自由”变量：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;稍微抽象一下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 表示有一个Bound Var的作用域&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; 
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 自由变量不一定用String表示&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;顺便定义两个组合子，一个用于将自由变量提出，一个用于替换：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;succ&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;succ&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如可以用来定义一些smart constructor和evaluator：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unScope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whnf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在这个AST可以看做一个放着FV的容器，并实现了Functor，Foldable，Traversable（甚至可以实现Monad），可以通过一些通用的函数对AST进行操作，比如说判定一颗语法树对应的项是否是闭项：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- True&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DBI是一个很好的让变量带上作用域信息的方案，但是就上面定义的AST的定义来说还不够安全，还无法禁止构造像&lt;code&gt;Lam (BV 2)&lt;/code&gt;这样的不合法项。&lt;/p&gt;&lt;h2&gt;DBI in dependent type&lt;/h2&gt;&lt;p&gt;如果在有dependent type的语言下，上面的问题就很好解决了，只需要限制DBI在每个项的大小就好：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kt&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fin&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 新的作用域 变量的索引可以加一&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 是否可以实现 Monad (Scope n f)?&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Bound Variable, 限制index小于n&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 闭项&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Closed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Closed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- demo&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;demo1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;demo1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;demo2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Closed&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;demo2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;demo3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;demo3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加上那两个重要的组合子，但这里需要点证明：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weaken&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weaken&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FS&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decEq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Yes&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;believe_me&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
                        &lt;span class=&quot;c1&quot;&gt;-- 抱歉，我偷懒了&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FV&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;weakenDBI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一种简单直接的方法，非要说缺点的话，就是有dt的语言实在是太少了。不过用上了dt，限制也会很大，这里就很难进一步抽象，abstract和instantiate就只能依赖于Expr了。&lt;/p&gt;&lt;p&gt;一个类型index上一个值之后，就很难实现其它的typeclass了。&lt;/p&gt;&lt;h2&gt;DBI as a nested datatype&lt;/h2&gt;&lt;p&gt;有些dt是可以编码进数据结构里的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以编码为：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;infixr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; 
  &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 长度为3的vec&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，下面这种要麻烦得多，且一些关于长度的性质会很难表达（要上TypeFamilies，DataKinds等等扩展）。但是用于限制长度来说，这种足够了。&lt;/p&gt;&lt;p&gt;可以受此启发，dbi也可以编码到结构中：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Nothing             =&amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Just Nothing        =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Just (Just Nothing) =&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Just (Just (Just a)) =&amp;gt; Free var&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- :: Maybe (Maybe (Maybe a)) -- &amp;lt; 3&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- λx.λy.x&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam (BV 1)) &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam (Var (Just Nothing)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- λx.λy.x y z&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam (BV 1 @@ BV 0 @@ FV &amp;#34;z&amp;#34;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam (Var (Just Nothing) @@ Var Nothing @@ Var (Just (Just &amp;#34;z&amp;#34;))))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Lam _ &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- hole 的类型是 Expr (Maybe a)，能填Var Nothing，也就是BV 0&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Lam (Lam _)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- hole 的类型是 Expr (Maybe (Maybe a))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 能填Var (Just Nothing)，也就是BV 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 或者填 Var Nothing，也就是BV 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（注：&lt;code&gt;forall a. Expr a&lt;/code&gt;或者&lt;code&gt;Expr Void&lt;/code&gt;是闭项）&lt;/p&gt;&lt;p&gt;像之前那样稍作抽象，将Scope拿出来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unScope&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ap&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unScope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadTrans&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;lift&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;liftM&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，那两个组合子也只需要依赖于Scope就可以了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么AST就可以这样定义了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;infixl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ap&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 这个monad可用来遍历Expr里的Free var&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pure&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:@&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- smart constructor&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; 

&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就很inductive，很abstract，很safe，很nice。（来自于&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.cs.ox.ac.uk/richard.bird/online/BirdPaterson99DeBruijn.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;paper&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;到目前为止，我们就得到了一个比较完整的在AST中表示“变量”/“作用域”的方案（并不）。haskell的&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//hackage.haskell.org/package/bound&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bound&lt;/a&gt;包就有很完整的实现。&lt;/p&gt;&lt;h2&gt;Scope Check&lt;/h2&gt;&lt;p&gt;我们当然可以这样scope check：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isClosed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lam&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这样操作稍微low了一点。如果能将裸的AST转换为上面介绍的几种带Scope的AST，相当于“证明了”原表达式是个闭项，也就是过了scope check：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; 
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarE&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppE&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LamE&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarT&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LamT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foldable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 为原AST附加上scope信息，也相当于证明了原表达式是闭项&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fromExpr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fromExpr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HashMap&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VarE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LamE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LamT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们还可以进一步从dbi的AST的到HOAS。因为HOAS和dbi带有的信息是一致的，所以它们之间还能互转。这里留作习题。&lt;/p&gt;&lt;p&gt;当一个AST过了scope check之后，就可以着手type check了，接下来的事情也是十分有趣的，先给自己挖个坑，再写一篇AST with Type。&lt;/p&gt;&lt;p&gt;有一个很有意思的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/AndrasKovacs/elaboration-zoo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;项目&lt;/a&gt;，讲的是dt的type check和elaboration，有兴趣可以去看一下。&lt;/p&gt;</description>
<author>脚趾头</author>
<guid isPermaLink="false">2019-07-25-75073557</guid>
<pubDate>Thu, 25 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>可持久化的trie以及二进制trie</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-07-10-73010152.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/73010152&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9f45089d17fb0ea88ebe8c4252b17473_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;这里不会对 trie 本身进行介绍。&lt;/p&gt;&lt;p&gt;让我们首先从一道题目说起 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//codeforces.com/problemset/problem/916/D&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CF916D Jamie and To-do List&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题目要求设计出一种储存字符串的优先级的数据结构，支持如下操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;set a x，将字符串 a 的 priority 设置为x，假若a原本存在，则将原优先级修改为x。&lt;/li&gt;&lt;li&gt;remove a，将字符串 a 的记录移除，假若 a 不存在，则do nothing。&lt;/li&gt;&lt;li&gt;query a，查询有多少个字符串的 priority 严格小于 a&lt;/li&gt;&lt;li&gt;undo d，假设当前是第 i 次操作，则将结构恢复到第 i-d-1 操作后的状态&lt;/li&gt;&lt;li&gt;操作次数上限为10^5，字符串长度不会超过15，x 范围是[1,10^9]，保证 undo 操作合法&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我们首先不考虑 undo 操作的话，经过思考，我们会发现应该需要两个数据结构，第一个用于维护字符串和 priority 的对应关系；第二个用于储存所有的 priority 用于查询 rank。显然，第一个结构随便用一个 hashmap 或者 trie，第二个使用一个能够查询 rank 的BST，e.g. treap, splay就能够完成。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;ds&amp;lt;-&amp;gt; data structure &lt;/p&gt;&lt;p&gt;然而，现在+上了undo操作，这意味着我们需要把历史记录保存下来。具体实现便是使用两个数组 firstds[max_operation_num], secondds[max_operation_num] 在进行第i次操作时便读取 firstds[i-1] 和 secondds[i-1] 中的数据结构，然后将修改之后的数据结构放入 firstds[i] 和 secondds[i] 中，注意！我们这里不能够对第i-1位上的两个数据结构进行任何修改。&lt;/p&gt;&lt;p&gt;假设我们依然采用之前的 hashmap 和 BST，每一次操作我们都需要将之前的结构 copy 一遍然后再进行操作，无论是空间上还是时间上都感觉......太暴力了。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;让我们考虑一下第一个结构使用 trie 以及 set 一个原本不存在的字符串的情况。无妨说第一条指令是 set aaa 5，insert 之后的结果就是&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;916&quot; data-rawheight=&quot;522&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;916&quot; data-original=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;916&quot; data-rawheight=&quot;522&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;916&quot; data-original=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-648a1a135dca27e0e618223bacf2bd6c_b.jpg&quot;/&gt;&lt;figcaption&gt;图1&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;第二条指令是 set bbb 4，再次 insert 之后的结果就是&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;986&quot; data-rawheight=&quot;591&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;986&quot; data-original=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;986&quot; data-rawheight=&quot;591&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;986&quot; data-original=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-bee381fb883c8143c81520ddd1655b7f_b.jpg&quot;/&gt;&lt;figcaption&gt;图2&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;可以看出，前后的 trie 仅仅只有一条链的变化。说得更加详细一点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;一个 set a x 操作后的 trie 必然会至少多出一个新节点 n，就是用于存储新字符串优先级的节点(图一中的5和图二中的4，因为该字符串原本不存在&lt;/li&gt;&lt;li&gt;对于1中所说的新节点 n，我们需要一个新节点 n&amp;#39; 来使 n&amp;#39; 成为 n 的父亲，其中 n&amp;#39; 通过 a 中的最后一个字符指向 n&lt;/li&gt;&lt;li&gt;由于 n&amp;#39; 同样是一个新节点，我们依然需要一个新节点 n&amp;#39;&amp;#39; 来使 n&amp;#39;&amp;#39; 成为 n&amp;#39; 的父亲，其中 n&amp;#39;&amp;#39; 通过a中的倒数第二个字符指向 n&amp;#39;&lt;/li&gt;&lt;li&gt;......按照上述做法不断往上新建节点，最终就形成了一条链&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;同样也是前后只有一条链的变化，很容易让人联想到可持久化线段树中的操作。&lt;/p&gt;&lt;p&gt;因此我们 copy 实际上并不是 copy 整个 trie 树，而是&lt;b&gt;仅仅只是新建一条链，剩下的节点和之前的树共用&lt;/b&gt;。下图是存有 aaa 的 trie 中先插入 aab 再插入 cc 的过程。第一排代表着理论上发生的情况，第二排是实际上共用了节点的情况&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1525&quot; data-rawheight=&quot;815&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1525&quot; data-original=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1525&quot; data-rawheight=&quot;815&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1525&quot; data-original=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-50b4ff314b0e57c943f30ea2e163ac0e_b.jpg&quot;/&gt;&lt;figcaption&gt;图3&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;刚刚讨论的情况是 set 一个原本不存在的字符串，假若是 set 是更新一个字符串的 priority 呢？按照如上的分析，结果是一样的，同样是修改了一条链而已。对于 remove a 操作呢？看做 set a 0 即可。可持久化 trie 的基本思想到此结束&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;二进制 trie：用于储存整数的 trie，可以用于查询 rank。对于一个 int，我们由高位向低位储存一个整数。与普通 trie 不同的是，二进制 trie 在插入的时候并不是仅仅是最后一个节点有特别的值，而是从根节点开始到最后一个节点整条链上的值都进行修改。例如，向二进制 trie中插入1、2和3如图4&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1377&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1377&quot; data-original=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1377&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1377&quot; data-original=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-9cd6f057699c8425de338323b5174bd8_b.jpg&quot;/&gt;&lt;figcaption&gt;图4&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我们可以发现，从根节点到某一个节点n所经过的路径 path，节点n上的对应的值就是以 path为前缀的 int 出现次数。那么对应某一个 int n 我们如何查询它的 rank 呢？算法描述如下：&lt;/p&gt;&lt;p&gt;定义局部变量 now=root，ans=0表示答案，迭代变量 i : 从 n 的最高位-&amp;gt;n 的最低位&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now经过0所指向的节点上的值&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now经过i所指向的节点&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正确性？想一想就知道了嘛&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最后，题目的 AC 代码:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//codeforces.com/contest/916/submission/34342389&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;好懂的递归写法&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//codeforces.com/contest/916/submission/56698896&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;可读性没有上面好的循环写法&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在循环写法中 set 与 add 的时候为什么需要一个 tmp 变量呢？答案是我们需要让新节点指向原来的相同位置上的节点的子节点来达到共用的效果，tmp 变量跟随着 now 同时向下移动来进行 copy node 的操作。假若 tmp 为空了，那么也就没有子节点可以共用了，tmp 也就没有意义了。&lt;/p&gt;</description>
<author>不会编程的Spica</author>
<guid isPermaLink="false">2019-07-10-73010152</guid>
<pubDate>Wed, 10 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>从单位半群到单子</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-07-04-70609434.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/70609434&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接触函数式编程的人越来越多了，学习Haskell的人也多了起来。很多人在逐渐深入学习的过程中，都不可避免的会遇到一个Haskell等函数式编程中一个常用的重要概念---单子（monad）。&lt;/p&gt;&lt;p&gt;单子是什么呢？这是一个困扰很多人的问题。很多时候貌似搞懂了，可回过头来仔细一想，又不明白了，总是觉得有那么一层不清晰的东西蒙在上面。本文试图从单位半群（monoid）开始一步一步的揭开这层不清晰的东西，带领大家看到真正的单子（monad）的样子。&lt;/p&gt;&lt;p&gt;&lt;b&gt;读者提醒：对已经会在实际编程中熟练的使用单子，但对深究单子的数学意义和范畴论不感兴趣的朋友，可以不用继续往下阅读了。以下内容对在编程实践中更好的使用单子帮助不大，不过对理解函数式编程理论中的概念和Haskell中的一些高深的代码会有一个更好的基础。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;约定：下面统一用中文的单子表示monad，单位半群表示monoid。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们常常听到，单子就是一个自函子范畴上的单位半群。既然单子就是一个单位半群，那我们就从单位半群开始，看看单子究竟是什么。&lt;/p&gt;&lt;p&gt;&lt;b&gt;集合上的单位半群&lt;/b&gt;&lt;/p&gt;&lt;p&gt;单位半群我们已经很熟悉了，当集合 S 上存在一个闭合的二元运算 *: S &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctimes&quot; alt=&quot;\times&quot; eeimg=&quot;1&quot;/&gt; S -&amp;gt; S， 和一个单位元 e。对集合 S 中的任意元素 a、b、c，满足如下的性质，我们就说这个集合是一个单位半群。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;              e * a = a                        --- 左单位元定律
              a * e = a                        --- 右单位元定律
        (a * b) * c = a * (b * c)              --- 结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是单位半群的元素和运算的示意图&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;576&quot; data-rawheight=&quot;849&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;576&quot; data-original=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;576&quot; data-rawheight=&quot;849&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;576&quot; data-original=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-99279827afe5fb268fdaf8f229a3cd8c_b.jpg&quot;/&gt;&lt;figcaption&gt;单位半群的二元运算&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;605&quot; data-rawheight=&quot;833&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;605&quot; data-original=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;605&quot; data-rawheight=&quot;833&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;605&quot; data-original=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f495365ad25c880961accd48c138668a_b.jpg&quot;/&gt;&lt;figcaption&gt;左单位元定律&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;571&quot; data-rawheight=&quot;819&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;571&quot; data-original=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;571&quot; data-rawheight=&quot;819&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;571&quot; data-original=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-53781b4360ec7eef10064a737a66fc66_b.jpg&quot;/&gt;&lt;figcaption&gt;右单位元定律&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;（还有结合律的图等我家小学生期末考试后再补上吧）&lt;/p&gt;&lt;p&gt;在Haskell中可以用类型类Monoid来表示：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;                       &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这就是单位元&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这就是二元运算&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mempty和mappend需要由程序员来保证满足如下的单位半群定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   mempty `mappend` a = a            --^ 左单位元定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   a `mappend` mempty = a            --^ 右单位元定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--  (a `mappend` b) `mappend` c = a `mappend` (b `mappend` c)   --^ 结合律&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们先来看一个常用的64位无符号整数组成的集合，我们知道这个集合有单位元0，其二元运算是加法 +，对任意的64位无符号整数a、b、c，有如下的性质：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;               0 + a = a                        --- 左单位元定律
               a + 0 = a                        --- 右单位元定律
         (a + b) + c = a + (b + c)              --- 加法的结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是我们可以说这个64位无符号整数组成的集合是一个单位半群，有如下的单位半群实例。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Word64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;单位元是&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;二元运算是加法&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们再来看一个更简单的布尔集合，这个集合只有True和False两个元素。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;702&quot; data-rawheight=&quot;489&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;702&quot; data-original=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;702&quot; data-rawheight=&quot;489&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;702&quot; data-original=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-102255d0fe81362ca940eea257c8e885_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;  （等我家小学生期末考试后换个好看的图）&lt;/p&gt;&lt;p&gt;当二元运算是与操作 &amp;amp;&amp;amp; 时，单位元是True，得到了一个单位半群。有如下的性质：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;               True &amp;amp;&amp;amp; a = a                        --- 左单位元定律
               a &amp;amp;&amp;amp; True = a                        --- 右单位元定律
           (a &amp;amp;&amp;amp; b) &amp;amp;&amp;amp; c = a &amp;amp;&amp;amp; (b &amp;amp;&amp;amp; c)            --- 与操作的结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Haskell中，用All来表示这个单位半群。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAll&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当二元运算是或操作 || 时，单位元是False，也得到了一个单位半群。有如下的性质：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;              False || a = a                        --- 左单位元定律
              a || False = a                        --- 右单位元定律
           (a || b) || c = a || (b || c)            --- 或操作的结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Haskell中，用Any来表示这个单位半群。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAny&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他的单位半群实例就不一一举例了，有兴趣的可以看看Haskell的Data.Monoid中的例子。&lt;/p&gt;&lt;p&gt;&lt;b&gt;自态射上的单位半群&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们现在来看另一种形式的单位半群。给定一个范畴 C，我们假定这个范畴的两个对象 a 和 b 之间的所有态射组成了一个集合，叫Hom-set，简记为 C(a, b)。这个集合中的每一个元素都是 a 和 b 之间的态射。&lt;/p&gt;&lt;p&gt;当这个范畴 C 只有一个对象 a 时，对象 a 和 a 之间的态射是 a 上的自态射，a 上的所有自态射同样也组成了一个集合。根据范畴的定义，这个自态射的集合存在一个二元运算 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccdot&quot; alt=&quot;\cdot&quot; eeimg=&quot;1&quot;/&gt; ，即态射的组合运算，两个态射的组合 g &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccdot&quot; alt=&quot;\cdot&quot; eeimg=&quot;1&quot;/&gt; f 依然是一个态射，还存在一个单位元即态射 id。满足如下性质：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;               id . f = f                        --- 左单位元定律
               f . id = f                        --- 右单位元定律
          (h . g) . f = h . (g . f)              --- 态射组合的结合律&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是一个对象上的自态射的集合 C(a, a) 就是一个单位半群。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;699&quot; data-rawheight=&quot;599&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;699&quot; data-original=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;699&quot; data-rawheight=&quot;599&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;699&quot; data-original=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-3de56554fc653ac69e372c0c32d2b6e7_b.jpg&quot;/&gt;&lt;figcaption&gt;自态射单位半群示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在Haskell中用Endo a类型来表示这个单位半群。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;appEndo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以将多个Endo a类型的函数放到一个列表里，这样我们就可以把多个简单的步骤组合成一个复杂的步骤，这个可以定义一个foldEndo 函数来完成。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;foldEndo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;foldEndo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mappend&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mempty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是将几个自态射组合成一个自态射的应用例子，给定一个数，输出一个数。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appEndo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldEndo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;幺半范畴和丰化范畴&lt;/b&gt;&lt;/p&gt;&lt;p&gt;范畴的对象之间的所有态射可以组成一个集合，具有这个性质的范畴叫局部小范畴。但还有很多范畴不具有这个性质。那我们怎么来表示一般范畴的对象之间的所有态射呢？&lt;/p&gt;&lt;p&gt;我们可以用另一个范畴上的对象来表示范畴 C 上的对象之间的所有态射，称为Hom-object，同样简记为 C(a, b)，这个范畴叫范畴 V。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;523&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;713&quot; data-original=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;523&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;713&quot; data-original=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c5face0db44d0b89175f6619693cd3d9_b.jpg&quot;/&gt;&lt;figcaption&gt;范畴 C 和 范畴 V&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;如果范畴 V 上存在张量积 ⊗ : V &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctimes&quot; alt=&quot;\times&quot; eeimg=&quot;1&quot;/&gt; V -&amp;gt; V ，同时还具有这个张量积运算的单位元 i ，满足左右单位元定律，使得有自然变换 λ: i ⊗ C(a, b) ≃ C(a, b)，和  ρ: C(a, b) ⊗ i ≃ C(a, b)。而且如果张量积运算满足结合律，即有自然变换 α: (C(c, d) ⊗ C(b, c)) ⊗ C(a,b) ≃ C(c, d) ⊗ (C(b, c) ⊗ C(a,b))。这些自然变换满足如下的同归图，为了简化图，使用a、b、c、d 来表示范畴 V 上的对象：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1235&quot; data-rawheight=&quot;574&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1235&quot; data-original=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1235&quot; data-rawheight=&quot;574&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1235&quot; data-original=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7db2771fbca4dc4a077cc08e96f92829_b.jpg&quot;/&gt;&lt;figcaption&gt;幺半范畴的张量积运算的结合一致性&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;685&quot; data-rawheight=&quot;286&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;685&quot; data-original=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;685&quot; data-rawheight=&quot;286&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;685&quot; data-original=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b1191157c54f989587e46a673c6ab79e_b.jpg&quot;/&gt;&lt;figcaption&gt;幺半范畴的单位元的左右结合一致性&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;则我们得到了幺半范畴（Monoidal Category）。可以有如下的Haskell的类型类的实例。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoidal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(,)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(,)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;snd&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fst&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;coidl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;coidr&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;coassoc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr和assoc是自然同构&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coidr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coidl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;coidl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;coidr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coassoc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;coassoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr和assoc满足如下的幺半范畴的张量积运算的单位元定律和结合律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- first 和 second是Arrow的函数&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coassoc&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为一般范畴上的对象内部是不可见的，我们不能象集合那样从内部选一个元素来作为单位元。但我们可以用一个态射来表示Hom-object上的单位元，即如果可以在范畴 V 上找到态射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=j_a&quot; alt=&quot;j_a&quot; eeimg=&quot;1&quot;/&gt;: i -&amp;gt; C(a, a)，满足如下的同归图，那我们就可以把态射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=j_a&quot; alt=&quot;j_a&quot; eeimg=&quot;1&quot;/&gt;: i -&amp;gt; C(a, a) 作为 C(a, a)上的单位元。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;696&quot; data-rawheight=&quot;301&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;696&quot; data-original=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;696&quot; data-rawheight=&quot;301&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;696&quot; data-original=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-eacfe0da18de6507f437c0222f00c068_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;625&quot; data-rawheight=&quot;275&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;625&quot; data-original=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;625&quot; data-rawheight=&quot;275&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;625&quot; data-original=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-fe8f9a3eb7f1f2ceb019ca8e6a6ece41_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如果范畴 C 上的态射的组合可以表示为范畴 V 上的组合运算 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccirc+&quot; alt=&quot;\circ &quot; eeimg=&quot;1&quot;/&gt; :  C(b, c) ⊗  C(a, b) -&amp;gt; C(a, c)，将两个Hom-object组合成一个Hom-object，且满足如下的同归图。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1241&quot; data-rawheight=&quot;351&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1241&quot; data-original=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1241&quot; data-rawheight=&quot;351&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1241&quot; data-original=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8fe02222feb02fb8c6cdb9c61164b9c3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;则我们得到了幺半范畴 V 上的丰化范畴（Enriched Category）。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;603&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;713&quot; data-original=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;713&quot; data-rawheight=&quot;603&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;713&quot; data-original=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-c9991cd4919f13938497b068547b1f74_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如果幺半范畴 V 的张量积运算是可交换的，即有自然变换 γ : C(b, c) ⊗  C(a, b) ≃ C(a, b) ⊗  C(b, c)，则幺半范畴 V 是对称幺半范畴。&lt;/p&gt;&lt;p&gt;另外如果幺半范畴 V 中的所有对象 A 都存在如下的自然同构，此时存在一对伴随函子 &lt;img src=&quot;https://www.zhihu.com/equation?tex=-+%5Cotimes+A+%5C+%5Cdashv+%5C+-%5EA&quot; alt=&quot;- \otimes A \ \dashv \ -^A&quot; eeimg=&quot;1&quot;/&gt; ，则幺半范畴 V 是闭范畴。其中&lt;img src=&quot;https://www.zhihu.com/equation?tex=B%5EA&quot; alt=&quot;B^A&quot; eeimg=&quot;1&quot;/&gt;是这个闭范畴中的一个对象，称为指数对象。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%3A+V%28X+%5Cotimes+A%2C+B%29+%5Csimeq+V%28X%2C+B%5EA%29+%3A+%5Cpsi&quot; alt=&quot;\phi: V(X \otimes A, B) \simeq V(X, B^A) : \psi&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;当幺半范畴 V 既是对称范畴又是闭范畴时，称之为对称闭幺半范畴。可以证明，对称闭幺半范畴 V 是其自身上的丰化范畴。&lt;/p&gt;&lt;p&gt;Haskell 中的 Hask 范畴就是一个幺半范畴，其张量积是Haskell的元组 (,)，单位对象是Unit，也即 ()。其结合律由 (a, (b, c)) ≃ ((a, b), c) 表示，左单位元定律由 ((), a) ≃ a 表示，右单位元定律由 (a, ()) ≃ a 表示。Hask 范畴也是一个对称幺半范畴，其交换律由 (a, b) ≃ (b, a) 表示。&lt;/p&gt;&lt;p&gt;Hask 范畴的指数对象 &lt;img src=&quot;https://www.zhihu.com/equation?tex=B%5EA&quot; alt=&quot;B^A&quot; eeimg=&quot;1&quot;/&gt; 就是函数类型 A -&amp;gt; B，且对任意对象 A，都存在指数化函子 &lt;img src=&quot;https://www.zhihu.com/equation?tex=-%5EA&quot; alt=&quot;-^A&quot; eeimg=&quot;1&quot;/&gt;  ，因此是一个对称闭幺半范畴。&lt;/p&gt;&lt;p&gt;于是我们得到Hask 范畴是其自身上的丰化范畴，单位元态射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=j_a&quot; alt=&quot;j_a&quot; eeimg=&quot;1&quot;/&gt; 是 () -&amp;gt; a，组合运算 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccirc+&quot; alt=&quot;\circ &quot; eeimg=&quot;1&quot;/&gt; 是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccdot&quot; alt=&quot;\cdot&quot; eeimg=&quot;1&quot;/&gt; : (b -&amp;gt; c) -&amp;gt; (a -&amp;gt; b) -&amp;gt; (a -&amp;gt; c)。&lt;/p&gt;&lt;p&gt;&lt;b&gt;幺半范畴上的单位半群&lt;/b&gt;&lt;/p&gt;&lt;p&gt;接下来，我们开始在幺半范畴 V 上构造一个单位半群。首先，我们来看只有一个对象 a 的范畴 C，其对象上的态射都是自态射。我们可以找到其对应的幺半范畴 V 。&lt;/p&gt;&lt;p&gt;这个幺半范畴 V 的对象表示了范畴 C 的自态射的Hom-object，简记为 C(a, a)。同样的，有张量积 ⊗ : V &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctimes&quot; alt=&quot;\times&quot; eeimg=&quot;1&quot;/&gt; V -&amp;gt; V ，这个张量积运算有单位元 i ，即有自然变换 λ: i ⊗ C(a, a) ≃ C(a, a)，和  ρ: C(a, a) ⊗ i ≃ C(a, a)。而且张量积运算满足结合律，即有自然变换 α: (C(a, a) ⊗ C(a, a)) ⊗ C(a,a) ≃ C(a, a) ⊗ (C(a, a) ⊗ C(a,a))。这些自然变换满足上面的结合律一致性和单位元左右结合一致性的同归图。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;653&quot; data-rawheight=&quot;1062&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;653&quot; data-original=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;653&quot; data-rawheight=&quot;1062&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;653&quot; data-original=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-cd08f9c668f7eab48327b9c07f0d5e25_b.jpg&quot;/&gt;&lt;figcaption&gt;自态射的Enriched V&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;类似的，我们可以证明这个幺半范畴 V 是对称闭幺半范畴，因此是其自身的丰化范畴。这个丰化范畴的单位元是态射 e: i -&amp;gt; C(a, a)，二元运算是态射mu: C(a, a) ⊗  C(a, a) -&amp;gt; C(a, a)。满足如下的左右单位元定律：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;         mu . e ⊗ id ≃ λ
         mu . id ⊗ e ≃ ρ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和结合律：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;    mu . mu ⊗ id ≃ mu . id ⊗ mu&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是我们就在幺半范畴 V 上构造出了一个单位半群，这个单位半群的单位元是态射 e，二元运算是 mu 。&lt;/p&gt;&lt;p&gt;&lt;b&gt;自函子范畴上的单位半群&lt;/b&gt;&lt;/p&gt;&lt;p&gt;对象是范畴的范畴我们称之为 &lt;b&gt;Cat&lt;/b&gt; 范畴，这个范畴的对象之间的态射是函子，例如范畴 C 到范畴 D 的函子记为 F: C -&amp;gt; D。函子之间的态射称为自然变换，例如有自然变换 α : F -&amp;gt; G 。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;658&quot; data-rawheight=&quot;526&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;658&quot; data-original=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;658&quot; data-rawheight=&quot;526&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;658&quot; data-original=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-e5e1249e7e59bf5b793439428fb1dd3f_b.jpg&quot;/&gt;&lt;figcaption&gt;Cat 范畴和函子，自然变换&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;现在我们来看只有一个对象的 &lt;b&gt;Cat&lt;/b&gt; 范畴，其对象是范畴 C，态射是范畴 C 上的自态射，也就是自函子。所有在范畴 C 上的自函子构成了一个自函子范畴，这个范畴的对象是范畴 C 上的自函子，态射是自函子之间的自然变换。&lt;/p&gt;&lt;p&gt;如果把函子的组合运算 ◦，看成是一个张量运算，两个同样的自函子的张量积也记为 M (M a)。于是有得到一系列的自函子Id，M ◦ M ，M ◦ M ◦ M ，· · · ，则这些自函子构成的自函子范畴也是一个幺半范畴，这个幺半范畴的单位对象是自函子 Id 。这个幺半范畴同时也是其自身上的丰化范畴。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;680&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;680&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;750&quot; data-original=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-63a0e0473f4f017e519992a718f9603f_b.jpg&quot;/&gt;&lt;figcaption&gt;自函子范畴是其自身的丰化范畴&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;于是同样的，我们在这个自函子范畴上得到一个单位半群，其单位元是自然变换 e: Id -&amp;gt; M，二元运算是自然变换 mu: M ◦ M  -&amp;gt; M，这就是单子。满足如下的同归图。 &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;565&quot; data-rawheight=&quot;264&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;565&quot; data-original=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;565&quot; data-rawheight=&quot;264&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;565&quot; data-original=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-edf4585b043c1ab5d5371c5596a8d0d0_b.jpg&quot;/&gt;&lt;figcaption&gt;单子的左右单位元定律&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;687&quot; data-rawheight=&quot;486&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;687&quot; data-original=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;687&quot; data-rawheight=&quot;486&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;687&quot; data-original=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-2e7725f5f7632285ee065d73db038711_b.jpg&quot;/&gt;&lt;figcaption&gt;单子的结合律定律&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在Haskell中，单子就是一个类型构造子 M，这个类型构造子接受一个类型参数 a，构造出一个更复杂的类型 M a。同时这个类型构造子具有如下两个函数，也是两个自然变换：&lt;/p&gt;&lt;p&gt;其中一个自然变换eta: Id -&amp;gt; M，也记为eta: a -&amp;gt; M a，可以将类型 a 的值提升为更复杂的类型 M a 的值。&lt;/p&gt;&lt;p&gt;另一个自然变换 mu: M ◦ M  -&amp;gt; M，也记为mu: M (M a) -&amp;gt; M a，当我们两次应用类型构造子 M 时，会得到两层的更复杂的类型 M (M a)。自然变换 mu 可以将这个两层的更复杂的类型 M (M a) 的值，拍扁为稍简单的只有一层的类型 M a 的值。&lt;/p&gt;&lt;p&gt;自然变换eta 和自然变换mu满足单位半群也即单子的左右单位元定律和结合律定律。&lt;/p&gt;&lt;p&gt;单子的左右单位元定律&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;               mu . eta ◦ id ≃ id
               mu . id ◦ eta ≃ id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;单子的结合律定律&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;            mu . mu ◦ id ≃ mu . id ◦ mu&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在数学的范畴论中，用符号 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ceta&quot; alt=&quot;\eta&quot; eeimg=&quot;1&quot;/&gt; 来表示 eta, 用符号 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu&quot; alt=&quot;\mu&quot; eeimg=&quot;1&quot;/&gt; 来表示 mu。而eta ◦ id 表示为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ceta+M&quot; alt=&quot;\eta M&quot; eeimg=&quot;1&quot;/&gt;，id ◦ eta则表示为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=M+%5Ceta&quot; alt=&quot;M \eta&quot; eeimg=&quot;1&quot;/&gt;，相应的mu ◦ id 表示为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu+M&quot; alt=&quot;\mu M&quot; eeimg=&quot;1&quot;/&gt;，id ◦ mu 则表示为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=M+%5Cmu&quot; alt=&quot;M \mu&quot; eeimg=&quot;1&quot;/&gt;。于是我们有常见的范畴论描述的单子的左右单位元定律：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu+%5Ccdot+%5Ceta+M+%5Csimeq+%5Cmu+%5Ccdot+M+%5Ceta&quot; alt=&quot;\mu \cdot \eta M \simeq \mu \cdot M \eta&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;和结合律定律：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu+%5Ccdot+%5Cmu+M+%5Csimeq+%5Cmu+%5Ccdot+M+%5Cmu&quot; alt=&quot;\mu \cdot \mu M \simeq \mu \cdot M \mu&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;于是，我们就得到了数学上的精确描述的Haskell单子 M。在单子 M 构造的自函子范畴中，存在一个单位半群，使得无论我们应用这个单子 M 在类型 a 上多少次（0次或多次），我们都可以将其看成是只应用了一次单子 M 在类型 a 上。我想这就是为何叫 M 是单子的原因吧。自然变换 eta 和 mu 满足的单位元定律和结合律则保证了单子 M 的自相似性。&lt;/p&gt;&lt;p&gt;在Haskell中，有如下的monad类型类来表示单子。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;--^&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return和join需要由程序员来保证满足如下的单子定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   join . return      = id               --^ 左单位元定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   join . fmap return = id               --^ 右单位元定律&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   join . join  =  join . fmap join      --^ 结合律&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个简单的单子的例子是Maybe，这是一个很常用的类型构造子，Maybe a表示要么什么都没有，要么正好有类型 a 的一个值。在C++中是Optional模板类，在Rust中是Option。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maybe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maybe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以很容易证明上面的Maybe单子满足单子的单位元定律和结合律。&lt;/p&gt;&lt;p&gt;另一个常用的单子是列表，也就是Haskell中的类型构造子 [ ]，[a] 表示要么没有元素，要么有一个元素，要么有二个元素，要么有三个元素，· · · 。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样可以证明列表单子 [ ] 满足单子的单位元定律和结合律。&lt;/p&gt;&lt;p&gt;&lt;b&gt;结语&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这篇文章主要给大家讲了单子为什么是一个单位半群，这个单位半群的基底也即自函子的幺半范畴是怎么样的。特别是讲明白了为什么单子这个单位半群的单位元是一个自然变换eta: I -&amp;gt; M，这是很多人理解单子的一个大的障碍。&lt;/p&gt;&lt;p&gt;最后，我们再总结一下：&lt;/p&gt;&lt;p&gt;&lt;b&gt;单子就是一个自函子 M 加上单位半群的两个自然变换 eta 和 mu，这两个自然变换满足单子的左右单位元定律和结合律。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;限于篇幅，很多地方讲的不够详细，有兴趣的可以看下面的参考链接。&lt;/p&gt;&lt;p&gt;&lt;b&gt;参考链接：&lt;/b&gt;&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//bartoszmilewski.com/2018/05/16/free-monoidal-functors-categorically/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;bartoszmilewski.com/201&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;8/05/16/free-monoidal-functors-categorically/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//bartoszmilewski.com/%3Fs%3Denriched%2Bcategory&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;bartoszmilewski.com/?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;s=enriched+category&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>parker liu</author>
<guid isPermaLink="false">2019-07-04-70609434</guid>
<pubDate>Thu, 04 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.四</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-07-01-71767830.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/71767830&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3af51a30d83fa9ef4677cd19ee72b83d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;终于我们可以给&lt;b&gt;MLsub&lt;/b&gt;添加一个类型界面了&lt;b&gt;Type Interface&lt;/b&gt;自从我们上次重新整理了类型规则之后我们现在的主要问题是找到&lt;i&gt;主要类型方案&lt;/i&gt; &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta_p%5D%5Ctau_p&quot; alt=&quot;[\Delta_p]\tau_p&quot; eeimg=&quot;1&quot;/&gt; 再有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi%2Ce&quot; alt=&quot;\Pi,e&quot; eeimg=&quot;1&quot;/&gt; 并有以下关系&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi+%5CVdash+e%3A%5B%5CDelta%5D%5Ctau%5C+iff%5C+%5B%5CDelta_p%5D%5Ctau_p%5Cleq%5E%5Cforall%5B%5CDelta%5D%5Ctau&quot; alt=&quot;\Pi \Vdash e:[\Delta]\tau\ iff\ [\Delta_p]\tau_p\leq^\forall[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;我们知道&lt;b&gt;AlgoW(Algorithm W)&lt;/b&gt;使用 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma%2Ce&quot; alt=&quot;\Gamma,e&quot; eeimg=&quot;1&quot;/&gt;使用替换规则去更改 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma%2C%5Ctau&quot; alt=&quot;\Gamma,\tau&quot; eeimg=&quot;1&quot;/&gt; , 假如&lt;b&gt;e&lt;/b&gt;他是关闭的(closed)然后我们有个主要类型方案 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5D%5Ctau_p+&quot; alt=&quot;[]\tau_p &quot; eeimg=&quot;1&quot;/&gt; , 所以他就会满足(上回讲的那个定理6)&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A+%5Ctau%5C+iff%5C+%5Crho%28%5Ctau_p%29%5Cleq%5Ctau%5C+for%5C+some%5C+subtitution%5C+%5Crho&quot; alt=&quot;\vdash e: \tau\ iff\ \rho(\tau_p)\leq\tau\ for\ some\ subtitution\ \rho&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;所以我们必须创建一个函数 &lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3Be%29&quot; alt=&quot;P(\Pi;e)&quot; eeimg=&quot;1&quot;/&gt;, 这个函数会接受所有的极类型环境 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi&quot; alt=&quot;\Pi&quot; eeimg=&quot;1&quot;/&gt; 和一个语句&lt;b&gt;e&lt;/b&gt;然后构造一个主要类型方案(我们只好假设用户没瞎写 ,&lt;b&gt;e&lt;/b&gt;有类型) &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3B%5Chat%7Bx%7D%29+%3D+%5CPi%28%5Chat%7Bx%7D%29%5C%5C+P%28%5CPi%3Bx%29+%3D+%5Bx%3Aa%5Da%5C%5C+P%28%5CPi%3Blet%5C+%5Chat%7Bx%7D%3De_1%5C+in%5C+e_2%29+%3D+%5B%5CDelta_1%5Csqcap%5CDelta_2%5D%5Ctau_2%5C%5Cwhere%5B%5CDelta_1%5D%5Ctau_1+%3D+P%28%5CPi%3Be_1%29%5C%5C+and%5B%5CDelta_2%5D%5Ctau_2%3DP%28%5CPi+%2C+%5Chat%7Bx%7D%3A%5B%5CDelta_1%5D%5Ctau_1%29&quot; alt=&quot;P(\Pi;\hat{x}) = \Pi(\hat{x})\\ P(\Pi;x) = [x:a]a\\ P(\Pi;let\ \hat{x}=e_1\ in\ e_2) = [\Delta_1\sqcap\Delta_2]\tau_2\\where[\Delta_1]\tau_1 = P(\Pi;e_1)\\ and[\Delta_2]\tau_2=P(\Pi , \hat{x}:[\Delta_1]\tau_1)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;我们为了实现 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+&quot; alt=&quot;\lambda &quot; eeimg=&quot;1&quot;/&gt; 类型推导 , 我们不得不使用一种很简单的技巧 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta_x&quot; alt=&quot;\Delta_x&quot; eeimg=&quot;1&quot;/&gt;表示 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x&quot; alt=&quot;x&quot; eeimg=&quot;1&quot;/&gt; 被拿出 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt;, 同时添加规则 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta%28x%29&quot; alt=&quot;\Delta(x)&quot; eeimg=&quot;1&quot;/&gt; , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta%28x%29%3D%5Ctop&quot; alt=&quot;\Delta(x)=\top&quot; eeimg=&quot;1&quot;/&gt; 用于 &lt;img src=&quot;https://www.zhihu.com/equation?tex=x+%5Cnotin+dom%5C+%5CDelta&quot; alt=&quot;x \notin dom\ \Delta&quot; eeimg=&quot;1&quot;/&gt; 所以不使用任何传入的参数的函数类型就会成为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop%5Crightarrow%5Ctau&quot; alt=&quot;\top\rightarrow\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3B%5Clambda+x.e%29%3D%5B%5CDelta_x%5D%28%5CDelta%28x%29%5Crightarrow%5Ctau%29%5C%5Cwhere%5B%5CDelta%5D%5Ctau+%3D+P%28%5CPi%3Be%29%5C%5C+P%28%5CPi%3B%5C%7Bl_1%3De_1+%2C+...+%2C+l_n%3De_n%5C%7D%29%3D%5B%5Cprod_%7Bi%7D%5CDelta_i%5D%5C%7Bl_1%3A%5Ctau_1+%2C+...+%2C+l_n%3A%5Ctau_n%5C%7D%5C%5Cwhere+%5B%5CDelta_i%5D%5Ctau_i+%3D+%5CPi%28%5CPi%3Be_i%29&quot; alt=&quot;P(\Pi;\lambda x.e)=[\Delta_x](\Delta(x)\rightarrow\tau)\\where[\Delta]\tau = P(\Pi;e)\\ P(\Pi;\{l_1=e_1 , ... , l_n=e_n\})=[\prod_{i}\Delta_i]\{l_1:\tau_1 , ... , l_n:\tau_n\}\\where [\Delta_i]\tau_i = \Pi(\Pi;e_i)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;根据 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cleq%5E%5Cforall&quot; alt=&quot;\leq^\forall&quot; eeimg=&quot;1&quot;/&gt;的定义 , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau&quot; alt=&quot;[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; 的实例符合下列规矩&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cuparrow%5C%7B%5Crho%28%5B%5CDelta%5D%5Ctau%7C%5Crho%5C+a%5C+substitution%5C%7D&quot; alt=&quot;\uparrow\{\rho([\Delta]\tau|\rho\ a\ substitution\}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这里的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cuparrow&quot; alt=&quot;\uparrow&quot; eeimg=&quot;1&quot;/&gt;指的是子类型规则下的一个上闭包 , 假如有实例 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau%7C%5Ctau_1+%5Cleq+%5Ctau_2&quot; alt=&quot;[\Delta]\tau|\tau_1 \leq \tau_2&quot; eeimg=&quot;1&quot;/&gt;那么我们就有限制&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cuparrow%5C%7B%5Crho%28%5B%5CDelta%5D%5Ctau%29%7C%5Crho%28%5Ctau_1%29%5Cleq%5Crho%28%5Ctau_2%29%5C%7D&quot; alt=&quot;\uparrow\{\rho([\Delta]\tau)|\rho(\tau_1)\leq\rho(\tau_2)\}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后根据上面的规则假如我们有一个函数的应用 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e_1%5C+e_2&quot; alt=&quot;e_1\ e_2&quot; eeimg=&quot;1&quot;/&gt; 我们就有以下规则&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cuparrow%5C%7B%5Crho%28%5B%5CDelta_1+%5Csqcap+%5CDelta_2%5D%5Calpha%29%7C%5Crho%28%5Ctau_1%29%5Cleq%5Crho%28%5Ctau_2%29%5Crightarrow+%5Crho%28%5Calpha%29%5C%7D&quot; alt=&quot;\uparrow\{\rho([\Delta_1 \sqcap \Delta_2]\alpha)|\rho(\tau_1)\leq\rho(\tau_2)\rightarrow \rho(\alpha)\}&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;为了推导这个类型 , 我们就必须找到 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau&quot; alt=&quot;[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; 我们就可以定义 &lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3Be_1%5C+e_2%29&quot; alt=&quot;P(\Pi;e_1\ e_2)&quot; eeimg=&quot;1&quot;/&gt; 符合以下规则&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3Be_1%5C+e_2%29%3D%5B%5CDelta%5D%5Ctau%5C%5C+%5Cquad+where%5C+inst%28%E5%AE%9E%E4%BE%8B%29%28%5B%5CDelta%5D%5Ctau%29%3Dinst%28%5B%5CDelta_1%5Csqcap%5CDelta_2%5D%5Calpha%7C%5Ctau_1+%5Cleq%5Ctau_2%5Crightarrow%5Calpha0%29%5C%5C+%5Cqquad+and%5C+%5B%5CDelta_1%5D%5Ctau_1+%3D+P%28%5CPi%3Be_1%29+%2C+%5B%5CDelta_2%5D%5Ctau_2+%3D+P%28%5CPi%3Be_2%29&quot; alt=&quot;P(\Pi;e_1\ e_2)=[\Delta]\tau\\ \quad where\ inst(实例)([\Delta]\tau)=inst([\Delta_1\sqcap\Delta_2]\alpha|\tau_1 \leq\tau_2\rightarrow\alpha0)\\ \qquad and\ [\Delta_1]\tau_1 = P(\Pi;e_1) , [\Delta_2]\tau_2 = P(\Pi;e_2)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;那么投射就可以被定义为&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=P%28%5CPi%3Be.l%29%3D%5B%5CDelta%5D%5Ctau%5C%5C+where%5C+inst%28%5B%5CDelta%5D%5Ctau%29%3Dinst%28%5B%5CDelta_1%5D%5Calpha%7C%5Ctau_1%5Cleq%5C%7Bl%3A%5Calpha%5C%7D%29%5C%5C+and%5C+%5B%5CDelta_1%5D%5Ctau_1+%3D+P%28%5CPi%3Be%29&quot; alt=&quot;P(\Pi;e.l)=[\Delta]\tau\\ where\ inst([\Delta]\tau)=inst([\Delta_1]\alpha|\tau_1\leq\{l:\alpha\})\\ and\ [\Delta_1]\tau_1 = P(\Pi;e)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;所以我们想要定义一个基类型我们就必须找到某种方法使得&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=inst%28%5B%5CDelta%5D%5Ctau%29%3Dinst%28%5B%5CDelta%27%5D%5Ctau%27%7CC%29&quot; alt=&quot;inst([\Delta]\tau)=inst([\Delta&amp;#39;]\tau&amp;#39;|C)&quot; eeimg=&quot;1&quot;/&gt;&lt;b&gt;C&lt;/b&gt;是一个限制的集合. &lt;/p&gt;&lt;h2&gt;归一化&lt;/h2&gt;&lt;p&gt;前置知识&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=fv%28x%29%3Dx%5C%5C+fv%28%5Clambda+x.e%29%3Dfv%28e%29-%5C%7Bx%5C%7D%5C%5C+fv%28e_1e_2%29%3Dfv%28e_1%29%5Ccup+fv%28e_2%29%5C%5C+ftv%28%5Calpha%29+%3D+%5C%7B+%5Calpha+%5C%7D+%5C%5C+ftv%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%3D+ftv%28%5Ctau_1%29+%5Ccup+ftv%28%5Ctau_2%29+%5C%5C+ftv%28%5Cforall+x.+t%29+%3D+ftv%28t%29+-+%5C%7B+x+%5C%7D+%5C%5C+&quot; alt=&quot;fv(x)=x\\ fv(\lambda x.e)=fv(e)-\{x\}\\ fv(e_1e_2)=fv(e_1)\cup fv(e_2)\\ ftv(\alpha) = \{ \alpha \} \\ ftv(\tau_1 \rightarrow \tau_2)= ftv(\tau_1) \cup ftv(\tau_2) \\ ftv(\forall x. t) = ftv(t) - \{ x \} \\ &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;下面是最经典的归一化(&lt;b&gt;Unification&lt;/b&gt;)算法的数学表示&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=sub_u%28%5Ctau_1%5Crightarrow%5Ctau_2%3D%5Ctau_3%5Crightarrow%5Ctau_4%29%3D%5C%7B%5Ctau_1+%3D+%5Ctau_3+%2C+%5Ctau_2+%3D+%5Ctau_4%5C%7D%5C%5C+sub_u%28%5C%7Bf%5C%7D%3D%5C%7Bg%5C%7D%29%3D%5C%7Bf%28l%29%3Dg%28l%29%7Cl%5Cin+D%5C%7D%5C%5C+%5Cqquad+where%5C+D%3Ddom%5C+f%3Ddom%5C+g%5C%5C+U%28%5Coslash%29%3D%5B%5D%5C%5C+U%28%5Calpha%3D%5Calpha+%2C+C%29+%3D+U%28C%29%5C%5C+U%28%5Calpha%3D%5Ctau+%2C+C%29%3DU%28%5Ctheta_%7B%5Calpha%3D%5Ctau%7DC%5Ccirc%5Ctheta_%7B%5Calpha%3D%5Ctau%7D%5Cquad%5Calpha%5Cnotin+ftv%28%5Ctau%29%29%5C%5C+U%28%5Ctau%3D%5Calpha+%2C+C%29%3DU%28%5Ctheta_%7B%5Calpha%3D%5Ctau%7DC%5Ccirc%5Ctheta_%7B%5Calpha%3D%5Ctau%7D%5Cquad%5Calpha%5Cnotin+ftv%28%5Ctau%29%29%5C%5C+U%28c+%2C+C%29%3DU%28sub_u%28c%29+%2C+C%29&quot; alt=&quot;sub_u(\tau_1\rightarrow\tau_2=\tau_3\rightarrow\tau_4)=\{\tau_1 = \tau_3 , \tau_2 = \tau_4\}\\ sub_u(\{f\}=\{g\})=\{f(l)=g(l)|l\in D\}\\ \qquad where\ D=dom\ f=dom\ g\\ U(\oslash)=[]\\ U(\alpha=\alpha , C) = U(C)\\ U(\alpha=\tau , C)=U(\theta_{\alpha=\tau}C\circ\theta_{\alpha=\tau}\quad\alpha\notin ftv(\tau))\\ U(\tau=\alpha , C)=U(\theta_{\alpha=\tau}C\circ\theta_{\alpha=\tau}\quad\alpha\notin ftv(\tau))\\ U(c , C)=U(sub_u(c) , C)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;(垃圾知乎没\empty艹(日语))&lt;/p&gt;&lt;p&gt;好的 , 又有不少人被这些数学蒙住了双眼 , 一会儿我写个&lt;b&gt;Haskell&lt;/b&gt;的伪码好了&lt;/p&gt;&lt;p&gt;添加上递归类型就是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=sub_%7Bu%5E%5Cmu%7D%28%5Cmu.%5Calpha%5Ctau_1+%3D+%5Ctau_2%29%3D%5C%7B%5Ctau_1%5B%5Cmu%5Calpha.%5Ctau_1%5D%3D%5Ctau_2%5C%7D%5C%5C+sub_%7Bu%5E%5Cmu%7D%28%5Ctau_1+%3D+%5Cmu.%5Calpha%5Ctau_2%29%3D%5C%7B%5Ctau_1%5B%3D%5Ctau_2%5B%5Cmu%5Calpha.%5Ctau_2%5D%5C%7D%5C%5C++U%5E%5Cmu%28H%3B%5Coslash%29%3D%5B%5D%5C%5C+U%5E%5Cmu%28H%3B%5Calpha%3D%5Calpha+%2C+C%29+%3D+U%5E%5Cmu%28H%3BC%29%5C%5C+U%5E%5Cmu%28H%3B%5Ctau_1%3D%5Ctau_2+%2C+C%29+%3D+U%5E%5Cmu%28C%29%5Cquad%5Ctau_1%3D%5Ctau_2%5Cin+H%5C%5C+U%5E%5Cmu%28%5Calpha%3D%5Ctau+%2C+C%29%3DU%5E%5Cmu%28%5Ctheta_%7B%5Calpha%3D%5Ctau%7DC%3B%5Ctheta_%7B%5Calpha%3D%5Ctau%7DH%29%5Ccirc%5Ctheta_%7B%5Calpha%3D%5Ctau%7D%5C%5C+U%5E%5Cmu%28%5Ctau%3D%5Calpha+%2C+C%29%3DU%5E%5Cmu%28%5Ctheta_%7B%5Calpha%3D%5Ctau%7DC%3B%5Ctheta_%7B%5Calpha%3D%5Ctau%7DH%29%5Ccirc%5Ctheta_%7B%5Calpha%3D%5Ctau%7D%5C%5C+U%5E%5Cmu%28H%3Bc+%2C+C%29%3DU%5E%5Cmu%28H+%2C+c%3Bsub_%7Bu%5E%5Cmu%7D%28c%29+%2C+C%29&quot; alt=&quot;sub_{u^\mu}(\mu.\alpha\tau_1 = \tau_2)=\{\tau_1[\mu\alpha.\tau_1]=\tau_2\}\\ sub_{u^\mu}(\tau_1 = \mu.\alpha\tau_2)=\{\tau_1[=\tau_2[\mu\alpha.\tau_2]\}\\  U^\mu(H;\oslash)=[]\\ U^\mu(H;\alpha=\alpha , C) = U^\mu(H;C)\\ U^\mu(H;\tau_1=\tau_2 , C) = U^\mu(C)\quad\tau_1=\tau_2\in H\\ U^\mu(\alpha=\tau , C)=U^\mu(\theta_{\alpha=\tau}C;\theta_{\alpha=\tau}H)\circ\theta_{\alpha=\tau}\\ U^\mu(\tau=\alpha , C)=U^\mu(\theta_{\alpha=\tau}C;\theta_{\alpha=\tau}H)\circ\theta_{\alpha=\tau}\\ U^\mu(H;c , C)=U^\mu(H , c;sub_{u^\mu}(c) , C)&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt; 有缺陷! 我们有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%3D%5Ctau&quot; alt=&quot;\alpha=\tau&quot; eeimg=&quot;1&quot;/&gt;这个限制在使用替换规则 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctheta_%7B%5Calpha%3D%5Ctau%7D&quot; alt=&quot;\theta_{\alpha=\tau}&quot; eeimg=&quot;1&quot;/&gt;的时候会被淘汰&lt;/p&gt;&lt;p&gt;因为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;全部都被干掉了QWQ , 这个是由&lt;b&gt;解决方案&lt;/b&gt;的但是我们由于篇幅的原因先讲到这儿吧 !&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;这一章我鸽了很长时间因为第一我刚回国需要和同学吃吃饭什么的 , 第二是先要差不多写出来伪码的程度理解这个是在干什么之后再胡乱分析一波...&lt;br/&gt;这一章将是噩梦&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-07-01-71767830</guid>
<pubDate>Mon, 01 Jul 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.三</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-25-70664217.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/70664217&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-50d5e0dadc4d32a2414185f712f8c530_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;这一章我们重新整理一下之前的类型系统 , 因为之前定义的类型系统并不是特别的细化,所以这回我们将根据上回的类型系统添加细节&lt;/p&gt;&lt;p&gt;ML语言的优点是表达式只用写一次 , 然后使用&lt;b&gt;let&lt;/b&gt;可以在不同类型下使用多次,打个比方&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=let+%5C+g+%3D+%5Clambda+x.x+%5C+in+%5C+%28...g...g...%29&quot; alt=&quot;let \ g = \lambda x.x \ in \ (...g...g...)&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;g&lt;/b&gt;函数就会被类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha.%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha.\alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 约束然后&lt;b&gt;g&lt;/b&gt;就可以被当成&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_n+%5Crightarrow+%5Ctau_n&quot; alt=&quot;\tau_n \rightarrow \tau_n&quot; eeimg=&quot;1&quot;/&gt;但是 , 假如这个类型不能完全的泛化就操蛋了 就比如&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+f.let+%5C+g+%3D+%5Clambda+x.if+%5C+f+%5C+x+%5C+then+%5C+x+%5C+else+%5C+x+%5C+in+%5C+%28...g...g...%29&quot; alt=&quot;\lambda f.let \ g = \lambda x.if \ f \ x \ then \ x \ else \ x \ in \ (...g...g...)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;假如我们有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma%28f%29+%3D+%5Calpha+%5Crightarrow+bool&quot; alt=&quot;\Gamma(f) = \alpha \rightarrow bool&quot; eeimg=&quot;1&quot;/&gt;那么&lt;b&gt;g&lt;/b&gt;的类型就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt;但是这个就不能被完全的泛化因为 &lt;b&gt;g&lt;/b&gt;依赖于&lt;b&gt;f&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;添加了子类型之后呢 , 就更加的复杂 , 假如我们有一个函数&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma%28f%29+%3D+%5Ctau_0+%5Crightarrow+bool&quot; alt=&quot;\Gamma(f) = \tau_0 \rightarrow bool&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%2C+%5Ctau_2&quot; alt=&quot;\tau_1 , \tau_2&quot; eeimg=&quot;1&quot;/&gt; 都是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_0&quot; alt=&quot;\tau_0&quot; eeimg=&quot;1&quot;/&gt; 的子类型 , 为了保持 &lt;img src=&quot;https://www.zhihu.com/equation?tex=let%5C+x%3De_1%5C+in%5C+e_2&quot; alt=&quot;let\ x=e_1\ in\ e_2&quot; eeimg=&quot;1&quot;/&gt;的类型是合法的 , 我们就必须确定 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e_2%5Be_1%2Fx%5D&quot; alt=&quot;e_2[e_1/x]&quot; eeimg=&quot;1&quot;/&gt;(可替换) , 我们就必须让上边的类型同时满足 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%5Crightarrow%5Ctau_1&quot; alt=&quot;\tau_1\rightarrow\tau_1&quot; eeimg=&quot;1&quot;/&gt; 和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_2%5Crightarrow%5Ctau_2&quot; alt=&quot;\tau_2\rightarrow\tau_2&quot; eeimg=&quot;1&quot;/&gt;但是&lt;b&gt;g&lt;/b&gt;的类型是单调的 , 所以我们就必须满足这样的一个东西&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha+%5C+where%5C+%5Calpha+%5Cleq+%5Ctau_0.%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha \ where\ \alpha \leq \tau_0.\alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以是时候需要重新调整一下类型检查的规则了!&lt;/p&gt;&lt;h2&gt;类型模板&lt;/h2&gt;&lt;p&gt;根据&lt;b&gt;TrifonovSmith&lt;/b&gt;和&lt;b&gt;Pottier&lt;/b&gt;的规则我们把这个新的规则称为&lt;b&gt;Lambda-lifted&lt;/b&gt;, 我们使用一个新的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau&quot; alt=&quot;[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt;其 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt; 是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+-+bound&quot; alt=&quot;\lambda - bound&quot; eeimg=&quot;1&quot;/&gt; 类型变量的前结束映射 , 这就阻止了自由变量的诞生 , 使得所有的变量都隐士的被泛化 , 然后我们就可以扔掉 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall&quot; alt=&quot;\forall&quot; eeimg=&quot;1&quot;/&gt; 了 , 所有的类型都现实的携带他们的依赖信息(但是这并不叫依赖类型)这个我们叫他 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda-bound%5C+programme%5C+variables&quot; alt=&quot;\lambda-bound\ programme\ variables&quot; eeimg=&quot;1&quot;/&gt;虽然没有子类型的普通&lt;b&gt;ML&lt;/b&gt;没有这方面的问题就是了...&lt;/p&gt;&lt;p&gt;现在我们就可以给之前的那个&lt;b&gt;g&lt;/b&gt;赋予类型了&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Bf%3A%5Calpha%5Crightarrow%5Cbeta%5D%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;[f:\alpha\rightarrow\beta]\alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;嗯!看起来他是对的~ 为了重新制定规则 , 我们假设所有的表达式都有类型 , 其次通过了&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha+-renaming&quot; alt=&quot;\alpha -renaming&quot; eeimg=&quot;1&quot;/&gt; , 他的绑定是单一的(这个是为了避免一个叫shadowing的东西) , 所以我们就 把&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma&quot; alt=&quot;\Gamma&quot; eeimg=&quot;1&quot;/&gt;分成了两个部分 , 一个是单态的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt; , 另一个是多态的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi&quot; alt=&quot;\Pi&quot; eeimg=&quot;1&quot;/&gt;  , 其 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt;映射类型的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+-+bound&quot; alt=&quot;\lambda - bound&quot; eeimg=&quot;1&quot;/&gt;到单态类型 , 然后 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi&quot; alt=&quot;\Pi&quot; eeimg=&quot;1&quot;/&gt; 呢就是处理&lt;b&gt;let&lt;/b&gt;到一个多态的类型 , 下面是类型规则&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta+%3A%3A%3D+%5Cin+%7C+%5CDelta++%2C++x%3A%5Ctau%5C%5C+%5CPi+%3A%3A%3D+%5Cin+%7C+%5CPi+%2C+%5Chat%7Bx%7D%3A%5B%5CDelta%5D%5Ctau&quot; alt=&quot;\Delta ::= \in | \Delta  ,  x:\tau\\ \Pi ::= \in | \Pi , \hat{x}:[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;所以呢 , 我们可以推出这个东西 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi+%5CVdash+e%3A%5B%5CDelta%5D%5Ctau&quot; alt=&quot;\Pi \Vdash e:[\Delta]\tau&quot; eeimg=&quot;1&quot;/&gt; , 同时 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta_1+%5Csqcap+%5CDelta_2&quot; alt=&quot;\Delta_1 \sqcap \Delta_2&quot; eeimg=&quot;1&quot;/&gt;标志了 &lt;img src=&quot;https://www.zhihu.com/equation?tex=dom%5C+%5CDelta+%3D+dom%5C+%5CDelta_1+%5Ccup+dom%5C+%5CDelta_2&quot; alt=&quot;dom\ \Delta = dom\ \Delta_1 \cup dom\ \Delta_2&quot; eeimg=&quot;1&quot;/&gt; , 同时呢 , 满足 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta%28x%29%3D%5CDelta_1%28x%29%5Csqcap%5CDelta_2%28x%29&quot; alt=&quot;\Delta(x)=\Delta_1(x)\sqcap\Delta_2(x)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;通常情况下 , 这个转换都会让 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CDelta&quot; alt=&quot;\Delta&quot; eeimg=&quot;1&quot;/&gt;的范围乱七八飞 , 除了new(SUB)规则使用的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cleq%5E%5Cforall&quot; alt=&quot;\leq^\forall&quot; eeimg=&quot;1&quot;/&gt;, 这个结合了子类型和类型变量的实例化的过程 , 这个呢...假设这个子类型是平凡的(我知道 , 数学家骂人都说你是个平凡的(AKA.&lt;b&gt;trivial&lt;/b&gt;) , 这里的意思是子类型和父类型相等) , 这个情况下呢&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cleq%5E%5Cforall&quot; alt=&quot;\leq^\forall&quot; eeimg=&quot;1&quot;/&gt;关系就被简化成了&lt;b&gt;Hindley-Milner instantiation&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;理论六 &lt;/b&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau%5C+iff+%5CVdash+e%3A%5B%5D%5Ctau&quot; alt=&quot;\vdash e:\tau\ iff \Vdash e:[]\tau&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;感谢我的上帝 , 这个是proof的!&lt;/p&gt;&lt;p&gt; 这个证明是使用了一个更强的理论 , 在不是空类型的情况下能用 , 这个的证明就是一个简单的常见的归纳虽然 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma+&quot; alt=&quot;\Gamma &quot; eeimg=&quot;1&quot;/&gt; 和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CPi%2F%5CDelta&quot; alt=&quot;\Pi/\Delta&quot; eeimg=&quot;1&quot;/&gt; 环境类型不太兼容&lt;/p&gt;&lt;p&gt;根据之前的证明 , 我们可以写一下新的类型规则了&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta%5D%5Ctau%5Cleq%5E%5Cforall%5B%5CDelta%27%5D%5Ctau%27%5C+iff%5C+dom%28%5CDelta%29+%5Csubseteq+dom%28%5CDelta%27%29%5C%5C+and%5C+%5CDelta%27%28x%29%5Cleq+%5Crho%28%5CDelta%28x%29%29%5C+in+%5C+%5Cforall+x.x%5Cin+dom%28%5CDelta%29%5C%5C+and%5C+%5Crho%28%5Ctau%29%5Cleq+%5Ctau%27+%2C+for%5C+some%5C+substitution%5C+%5Crho%5C%5C&quot; alt=&quot;[\Delta]\tau\leq^\forall[\Delta&amp;#39;]\tau&amp;#39;\ iff\ dom(\Delta) \subseteq dom(\Delta&amp;#39;)\\ and\ \Delta&amp;#39;(x)\leq \rho(\Delta(x))\ in \ \forall x.x\in dom(\Delta)\\ and\ \rho(\tau)\leq \tau&amp;#39; , for\ some\ substitution\ \rho\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28VAR-%5CPi%29%5Cqquad+%5Cfrac%7B%7D%7B%5CPi%5CVdash%5Chat%7Bx%7D%3A%5B%5CDelta%5D%5Ctau%7D%5CPi%28%5Chat%7Bx%7D%29%3D%5B%5CDelta%5D%5Ctau%5C%5C+%28VAR-%5CDelta%29%5Cqquad%5Cfrac%7B%7D%7B%5CPi%5CVdash+x%3A%5Bx%3A%5Ctau%5D%5Ctau%7D%5C%5C+%28ABS%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e%3A%5B%5CDelta+%2C+x%3A%5Ctau%5D%5Ctau%27%7D%7B%5CPi+%5CVdash+%5Clambda+x.e%3A%5B%5CDelta%5D%5Ctau%5Crightarrow%5Ctau%27%7D%5C%5C+%28APP%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e_1%3A%5B%5CDelta%5D%5Ctau%5Crightarrow%5Ctau%27%5Cquad%5CPi%5CVdash+e_2%3A%5B%5CDelta%5D%5Ctau%7D%7B%5CPi+%5CVdash+e_1%5C+e_2%3A%5B%5CDelta%5D%5Ctau%27%7D%5C%5C+%28LET%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e_1%5B%5CDelta_1%5D%5Ctau_1%5Cquad%5CPi+%2C+%5Chat%7Bx%7D%3A%5B%5CDelta_1%5D%5Ctau_1+%5CVdash+e_2%3A%5B%5CDelta_2%5D%5Ctau_2%7D%7B+++++%5CPi%5CVdash+let%5C+%5Chat%7Bx%7D%3De_1%5C+in+%5C+e_2%3A%5B%5CDelta_1%5Csqcap%5CDelta_2%5D%5Ctau_2++%7D%5C%5C+%28PROJ%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e%3A%5B%5CDelta%5D%5C%7Bl%3A%5Ctau%5C%7D%7D%7B%5CPi%5CVdash+e.l%3A%5B%5CDelta%5D%5Ctau%7D%5C%5C+%28SUB%29%5Cqquad%5Cfrac%7B%5CPi%5CVdash+e%3A%5B%5CDelta%5D%5Ctau%7D%7B%5CPi%5CVdash+e%3A%5B%5CDelta%27%5D%5Ctau%27%7D%5B%5CDelta%5D%5Ctau%5Cleq%5E%5Cforall%5B%5CDelta%27%5D%5Ctau%27&quot; alt=&quot;(VAR-\Pi)\qquad \frac{}{\Pi\Vdash\hat{x}:[\Delta]\tau}\Pi(\hat{x})=[\Delta]\tau\\ (VAR-\Delta)\qquad\frac{}{\Pi\Vdash x:[x:\tau]\tau}\\ (ABS)\qquad\frac{\Pi\Vdash e:[\Delta , x:\tau]\tau&amp;#39;}{\Pi \Vdash \lambda x.e:[\Delta]\tau\rightarrow\tau&amp;#39;}\\ (APP)\qquad\frac{\Pi\Vdash e_1:[\Delta]\tau\rightarrow\tau&amp;#39;\quad\Pi\Vdash e_2:[\Delta]\tau}{\Pi \Vdash e_1\ e_2:[\Delta]\tau&amp;#39;}\\ (LET)\qquad\frac{\Pi\Vdash e_1[\Delta_1]\tau_1\quad\Pi , \hat{x}:[\Delta_1]\tau_1 \Vdash e_2:[\Delta_2]\tau_2}{     \Pi\Vdash let\ \hat{x}=e_1\ in \ e_2:[\Delta_1\sqcap\Delta_2]\tau_2  }\\ (PROJ)\qquad\frac{\Pi\Vdash e:[\Delta]\{l:\tau\}}{\Pi\Vdash e.l:[\Delta]\tau}\\ (SUB)\qquad\frac{\Pi\Vdash e:[\Delta]\tau}{\Pi\Vdash e:[\Delta&amp;#39;]\tau&amp;#39;}[\Delta]\tau\leq^\forall[\Delta&amp;#39;]\tau&amp;#39;&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个就使得&lt;b&gt;MLsub&lt;/b&gt;带上子类型后和&lt;b&gt;ML&lt;/b&gt;有些定义并不太一样 , 就比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta_1%5D%5Ctau_1&quot; alt=&quot;[\Delta_1]\tau_1&quot; eeimg=&quot;1&quot;/&gt; 和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5CDelta_2%5D%5Ctau_2&quot; alt=&quot;[\Delta_2]\tau_2&quot; eeimg=&quot;1&quot;/&gt;我们说他们是相等当他们互相归入时.但是在我们蠢萌的&lt;b&gt;ML&lt;/b&gt;里两个类型相等仅当他们看起来一样的时候.&lt;/p&gt;&lt;p&gt;(这是虽然对的 , 但是蠢萌 , 就好比我说鸭子和一只鸟呱呱叫还喜欢游泳&lt;b&gt;ML&lt;/b&gt;告诉我他俩不相等一样) &lt;/p&gt;&lt;p&gt;我们拿&lt;b&gt;choose&lt;/b&gt;函数举例子&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=1.%5Cqquad%5B%5D%5Calpha%5Crightarrow%5Calpha%5Crightarrow%5Calpha%5C%5C+2.%5Cqquad%5B%5D%5Cbeta%5Crightarrow%5Cgamma%5Crightarrow%28%5Cbeta%5Csqcup%5Cgamma%29&quot; alt=&quot;1.\qquad[]\alpha\rightarrow\alpha\rightarrow\alpha\\ 2.\qquad[]\beta\rightarrow\gamma\rightarrow(\beta\sqcup\gamma)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;第一个在我们蠢萌的&lt;b&gt;ML&lt;/b&gt;里面就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha.%5Calpha%5Crightarrow%5Calpha%5Crightarrow%5Calpha&quot; alt=&quot;\forall \alpha.\alpha\rightarrow\alpha\rightarrow\alpha&quot; eeimg=&quot;1&quot;/&gt; , 第二个就引入了子类型 , 但是我们可以发现其实他们的定义时一样的但是第二个更加的细化 , 所以 &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5B%5D%5Cbeta%5Crightarrow%5Cgamma%5Crightarrow%28%5Cbeta%5Csqcup%5Cgamma%29%5Cleq%5E%5Cforall%5B%5D%5Calpha%5Crightarrow%5Calpha%5Crightarrow%5Calpha+&quot; alt=&quot;[]\beta\rightarrow\gamma\rightarrow(\beta\sqcup\gamma)\leq^\forall[]\alpha\rightarrow\alpha\rightarrow\alpha &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;当我们断定 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cbeta+%3D%5Cgamma+%3D%5Calpha&quot; alt=&quot;\beta =\gamma =\alpha&quot; eeimg=&quot;1&quot;/&gt;时 , 我们甚至可以反过来写因为相等的. 再举一些蠢萌的&lt;b&gt;ML&lt;/b&gt;和我们&lt;b&gt;MLsub&lt;/b&gt;不一样的地方 , 假如我有第一个式子 , 在&lt;b&gt;ML&lt;/b&gt;里 , 输入的两个类型不许是一样的 , 但是在&lt;b&gt;MLsub&lt;/b&gt;里可以不一样 , 为什么呢? 因为对于任何&lt;i&gt;α&lt;/i&gt;我们都接受任意&lt;i&gt;α&lt;/i&gt;&lt;/p&gt;&lt;h2&gt;极类型(我们之前提到过)&lt;/h2&gt;&lt;p&gt;这个呢我就用自己的话简单的解释一下了&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5E%2B&quot; alt=&quot;\tau^+&quot; eeimg=&quot;1&quot;/&gt;就是我们可以用作一个函数的输出的类型&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5E%2B+%3A%3A%3D+%5Ctau_1%5E-%5Crightarrow%5Ctau_2%5E%2B+%7C%5C%7Bl_1%3A%5Ctau_1%5E%2B+%2C+...+%2C+l_n%3A%5Ctau_n%5E%2B%5C%7D%7C%5Calpha%7C%5Ctau_1%5E%2B%5Csqcup%5Ctau_2%5E%2B%7C%5Cbot%7C%5Cmu+%5Calpha+.+%5Ctau%5E%2B&quot; alt=&quot;\tau^+ ::= \tau_1^-\rightarrow\tau_2^+ |\{l_1:\tau_1^+ , ... , l_n:\tau_n^+\}|\alpha|\tau_1^+\sqcup\tau_2^+|\bot|\mu \alpha . \tau^+&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个确保了不会输出巨大无比的类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop&quot; alt=&quot;\top&quot; eeimg=&quot;1&quot;/&gt;相反的 , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5E-&quot; alt=&quot;\tau^-&quot; eeimg=&quot;1&quot;/&gt;就是用来输入的 ,  &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop&quot; alt=&quot;\top&quot; eeimg=&quot;1&quot;/&gt;类型是允许的 , 同时避免引入 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Csqcup&quot; alt=&quot;\sqcup&quot; eeimg=&quot;1&quot;/&gt; , 因为我们大多数的带有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop&quot; alt=&quot;\top&quot; eeimg=&quot;1&quot;/&gt;类型的输入的时候我们都不会用到233333&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5E-+%3A%3A%3D+%5Ctau_1%5E%2B%5Crightarrow%5Ctau_2%5E-+%7C%5C%7Bl_1%3A%5Ctau_1%5E-+%2C+...+%2C+l_n%3A%5Ctau_n%5E-%5C%7D%7C%5Calpha%7C%5Ctau_1%5E-%5Csqcap%5Ctau_2%5E-%7C%5Ctop%7C%5Cmu+%5Calpha+.+%5Ctau%5E-&quot; alt=&quot;\tau^- ::= \tau_1^+\rightarrow\tau_2^- |\{l_1:\tau_1^- , ... , l_n:\tau_n^-\}|\alpha|\tau_1^-\sqcap\tau_2^-|\top|\mu \alpha . \tau^-&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;hr/&gt;&lt;p&gt;这个是我在飞机上写的 , 我在吃饭前喝了一瓶威士忌 , 然后晕机吐了 , 吃完饭后肚子不舒服又吐了一次 , 多亏我这会买的商务舱座位宽敞 , 我可以把饭放在脚下跑去厕所 , 这回可能有很多不对因为到现在我整个人都是晕的(醉酒+晕机).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-06-25-70664217</guid>
<pubDate>Tue, 25 Jun 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.二</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-21-69889087.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69889087&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c9d6722460086c35f984571254f16343_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;上回我们讲完了类型推导,&lt;b&gt;HM&lt;/b&gt;类型推断中遇到的所有的困难都是来自于自身的短板,但是不使用子类型我们也可以使用无数的类型进行类型海作战达到这一目的,显然这是我们开发者和用户都不想看到的 (瞄一眼我们的垃圾JAWA)&lt;/p&gt;&lt;p&gt;因为&lt;b&gt;ML&lt;/b&gt;的变体太多了&lt;b&gt;MLf  &lt;/b&gt;,  &lt;b&gt;MLext-row  &lt;/b&gt;,  &lt;b&gt;MLrec  &lt;/b&gt;等 所以不介意我们再多加一种实现呢(笑嘻嘻)&lt;/p&gt;&lt;p&gt;所以下面就是作者给&lt;b&gt;MLsub&lt;/b&gt;定义的语法&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%3A%3A%3D+x%5C%5C+%7C%5Clambda+x.e%5C%5C+%7Ce_1+e_2%5C%5C+%7C%5C%7Bl_1+%3D+e_1%2Cl_2%3De_2%2C...%2Cl_n+%3D+e_n%5C%7D%5C%5C+%7Ce.l%5C%5C+%7C%5Chat%7Bx%7D%5C%5C+%7Clet+%5C+%5Chat%7Bx%7D+%5C+%3D+%5C+e_1+%5C+in+%5C+e_2&quot; alt=&quot;e ::= x\\ |\lambda x.e\\ |e_1 e_2\\ |\{l_1 = e_1,l_2=e_2,...,l_n = e_n\}\\ |e.l\\ |\hat{x}\\ |let \ \hat{x} \ = \ e_1 \ in \ e_2&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;解释一下啊,&lt;b&gt;{}&lt;/b&gt;包裹的是一个记录的构造器&lt;/p&gt;&lt;p&gt;然后环境变量的规则是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma+%3A%3A%3D+e%5C%5C+%7C%5CGamma%2Cx%3A%5Ctau%5C%5C+%7C%5CGamma%2C%5Chat%7Bx%7D%3A%5Cforall%5Cvec%5Calpha.%5Ctau&quot; alt=&quot;\Gamma ::= e\\ |\Gamma,x:\tau\\ |\Gamma,\hat{x}:\forall\vec\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;定义类型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;基本的有函数类型,记录类型,我可以添加基础的布尔类型,我们还有最大最小类型,还有那个上限下限类型运算符.&lt;/p&gt;&lt;p&gt;使用递归类型和&lt;b&gt;subtyping&lt;/b&gt;还有最大最小类型我们定义一个&lt;b&gt;Y组合子&lt;/b&gt;试试&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=Y%28%5Clambda+f.%5Clambda+x.f%29&quot; alt=&quot;Y(\lambda f.\lambda x.f)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个的类型我们写作 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop+%5Crightarrow+%28%5Ctop+%5Crightarrow+%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow....%29&quot; alt=&quot;\top \rightarrow (\top \rightarrow (\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow....)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;很好,写不下&lt;/p&gt;&lt;p&gt;那么我们姑且把&lt;i&gt;α&lt;/i&gt;当作递归类型处理吧,所以这个东西的类型是: &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop+%5Crightarrow+%5Calpha&quot; alt=&quot;\top \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 为了写的爽,干脆类型的语法也就这么来吧&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%3A%3A%3D+%5Ctau_1+%5Crightarrow+%5Ctau_2%5C%5C+%7C%5C%7Bl1%3A%5Ctau_1%2C...%5C%7D%5C%5C+%7C%5Calpha%5C%5C+%7C%5Ctop%5C%5C+%7C%5Cbot%5C%5C+%7C%5Ctau+%5Csqcap%5Ctau%5C%5C+%7C%5Ctau+%5Csqcup+%5Ctau&quot; alt=&quot;\tau ::= \tau_1 \rightarrow \tau_2\\ |\{l1:\tau_1,...\}\\ |\alpha\\ |\top\\ |\bot\\ |\tau \sqcap\tau\\ |\tau \sqcup \tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;好了,我们有了类型构造的语法,那么我们想一下,对于这些记录(record)该怎么搞&lt;/p&gt;&lt;p&gt;如果我们有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bl_1%3A%5Ctau_1%2Cl_2%3A%5Ctau_2%5C%7D&quot; alt=&quot;\{l_1:\tau_1,l_2:\tau_2\}&quot; eeimg=&quot;1&quot;/&gt;我们可以写成 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D&quot; alt=&quot;\{f\}&quot; eeimg=&quot;1&quot;/&gt;其 &lt;img src=&quot;https://www.zhihu.com/equation?tex=dom%5C+f+%3D+%5C%7Bl_1%2Cl_2%5C%7D&quot; alt=&quot;dom\ f = \{l_1,l_2\}&quot; eeimg=&quot;1&quot;/&gt; 我们就可以用这个操作获取类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=f%28l_1%29+%3D+%5Ctau_1&quot; alt=&quot;f(l_1) = \tau_1&quot; eeimg=&quot;1&quot;/&gt;,好的这个问题处理完了,我们接着处理函数的问题.&lt;/p&gt;&lt;p&gt;我们可以让语法树的类型部分是无限的,但是我们需要采用限制操作符就不是,比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Crightarrow+%28bool+%5Crightarrow%28bool+%5Crightarrow%28bool+%5Crightarrow%28....%29%29&quot; alt=&quot;bool \rightarrow (bool \rightarrow(bool \rightarrow(bool \rightarrow(....))&quot; eeimg=&quot;1&quot;/&gt;是合法的代码但是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Csqcap+%28bool+%5Csqcap%28bool+%5Csqcap%28bool+%5Csqcap%28....%29%29&quot; alt=&quot;bool \sqcap (bool \sqcap(bool \sqcap(bool \sqcap(....))&quot; eeimg=&quot;1&quot;/&gt;并不是合法的代码.&lt;/p&gt;&lt;p&gt;但是一般人是写不出来这种无限长的类型定义的,所以我们使用 &lt;b&gt;polar type&lt;/b&gt;进行操作,现在这一章先不讲,这是一种有限类型的子集,你知道方便写和推导就行了.&lt;/p&gt;&lt;p&gt;那么接着上一章提到的&lt;b&gt;分配格&lt;/b&gt;来讲,我们也设计一套规则&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Csqcup+%5Ctau+%5Cequiv+%5Ctau+%5Cqquad+%5Ctau+%5Csqcap+%5Ctau+%5Cequiv+%5Ctau%5C%5C+%5Ctau_1+%5Csqcup+%5Ctau_2+%5Cequiv+%5Ctau_2+%5Csqcup+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%5Ctau_2+%5Cequiv+%5Ctau_2+%5Csqcap+%5Ctau_1%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_2+%5Csqcup+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_2%29+%5Csqcup+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%28%5Ctau_2+%5Csqcap+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_2%29+%5Csqcap+%5Ctau_1%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_1+%5Csqcap+%5Ctau_2%29+%5Cequiv+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%28%5Ctau_1+%5Csqcup+%5Ctau_2%29+%5Cequiv+%5Ctau_1%5C%5C+%5Cbot+%5Csqcup+%5Ctau+%5Cequiv+%5Ctau+%5Cqquad+%5Cbot+%5Csqcap+%5Ctau+%5Cequiv+%5Cbot%5C%5C+%5Ctop+%5Csqcup+%5Ctau+%5Cequiv+%5Ctop+%5Cqquad+%5Ctop+%5Csqcap+%5Ctau+%5Cequiv+%5Ctau%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_2+%5Csqcap+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_2%29%5Csqcap%28%5Ctau_1%5Csqcup%5Ctau_3%29%5C%5C+%5Ctau_1+%5Csqcap+%28%5Ctau_2+%5Csqcup+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_2%29%5Csqcup%28%5Ctau_1%5Csqcap%5Ctau_3%29%5C%5C&quot; alt=&quot;\tau \sqcup \tau \equiv \tau \qquad \tau \sqcap \tau \equiv \tau\\ \tau_1 \sqcup \tau_2 \equiv \tau_2 \sqcup \tau_1 \qquad \tau_1 \sqcap \tau_2 \equiv \tau_2 \sqcap \tau_1\\ \tau_1 \sqcup (\tau_2 \sqcup \tau_3) \equiv (\tau_1\sqcup\tau_2) \sqcup \tau_1 \qquad \tau_1 \sqcap (\tau_2 \sqcap \tau_3) \equiv (\tau_1\sqcap\tau_2) \sqcap \tau_1\\ \tau_1 \sqcup (\tau_1 \sqcap \tau_2) \equiv \tau_1 \qquad \tau_1 \sqcap (\tau_1 \sqcup \tau_2) \equiv \tau_1\\ \bot \sqcup \tau \equiv \tau \qquad \bot \sqcap \tau \equiv \bot\\ \top \sqcup \tau \equiv \top \qquad \top \sqcap \tau \equiv \tau\\ \tau_1 \sqcup (\tau_2 \sqcap \tau_3) \equiv (\tau_1\sqcup\tau_2)\sqcap(\tau_1\sqcup\tau_3)\\ \tau_1 \sqcap (\tau_2 \sqcup \tau_3) \equiv (\tau_1\sqcap\tau_2)\sqcup(\tau_1\sqcap\tau_3)\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;...是不是跟布尔运算规则一个样&lt;br/&gt;下面是函数和记录的构造函数限制&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%5Csqcup%28%5Ctau_1%27+%5Crightarrow+%5Ctau_2%27%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_1%27%29%5Crightarrow%28%5Ctau_2%5Csqcup%5Ctau_2%27%29%5C%5C+%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%5Csqcap%28%5Ctau_1%27+%5Crightarrow+%5Ctau_2%27%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_1%27%29%5Crightarrow%28%5Ctau_2%5Csqcap%5Ctau_2%27%29%5C%5C++&quot; alt=&quot;(\tau_1 \rightarrow \tau_2)\sqcup(\tau_1&amp;#39; \rightarrow \tau_2&amp;#39;) \equiv (\tau_1\sqcap\tau_1&amp;#39;)\rightarrow(\tau_2\sqcup\tau_2&amp;#39;)\\ (\tau_1 \rightarrow \tau_2)\sqcap(\tau_1&amp;#39; \rightarrow \tau_2&amp;#39;) \equiv (\tau_1\sqcup\tau_1&amp;#39;)\rightarrow(\tau_2\sqcap\tau_2&amp;#39;)\\  &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Csqcup+%5C%7Bg%5C%7D+%5Cequiv+%5C%7Bh%5C%7D%5C%5C+%5Cqquad+where+%5C++dom+%5C+h++%3D+dom+%5C+f+%5Ccap+dom+%5C+g%5C%5C+%5Cqquad+and+%5C+h%28l%29+%3D+f%28l%29+%5Csqcup+g%28l%29%5C%5C&quot; alt=&quot;\{f\} \sqcup \{g\} \equiv \{h\}\\ \qquad where \  dom \ h  = dom \ f \cap dom \ g\\ \qquad and \ h(l) = f(l) \sqcup g(l)\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Csqcap+%5C%7Bg%5C%7D+%5Cequiv+%5C%7Bh%5C%7D%5C%5C+%5Cqquad+where+%5C++dom+%5C+h++%3D+dom+%5C+f+%5Ccup+dom+%5C+g%5C%5C+%5Cqquad+and+%5C+h%28l%29+%3D+%5Cleft%5C%7B+++++%5Cbegin%7Bmatrix%7D+++++++++++++f%28l%29+%5Csqcap+g%28l%29+%5Cquad+if+%5C+l+%5C+%5Cin+dom+%5C+f+%5Ccap+dom+%5C+g%5C%5C+++++++++++++f%28l%29+%5Cqquad+if+%5C+l+%5C+%5Cin+dom+%5C+f+-+dom+%5C+g%5C%5C+++++++++++++g%28l%29+%5Cqquad+if+%5C+l+%5C+%5Cin+dom+%5C+g+-+dom+%5C+f%5C%5C+++++%5Cend%7Bmatrix%7D+++++%5Cright%5C%7D&quot; alt=&quot;\{f\} \sqcap \{g\} \equiv \{h\}\\ \qquad where \  dom \ h  = dom \ f \cup dom \ g\\ \qquad and \ h(l) = \left\{     \begin{matrix}             f(l) \sqcap g(l) \quad if \ l \ \in dom \ f \cap dom \ g\\             f(l) \qquad if \ l \ \in dom \ f - dom \ g\\             g(l) \qquad if \ l \ \in dom \ g - dom \ f\\     \end{matrix}     \right\}&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;递归类型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;MLsub&lt;/b&gt;作为一个牛*的语言,肯定是要支持递归类型的!&lt;/p&gt;&lt;p&gt;经典的递归类型的处理方法是:首先我们有一个类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5Calpha.%5Ctau&quot; alt=&quot;\mu\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;我们会把他当成一个映射的不动点 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;这个就确定了 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu&quot; alt=&quot;\mu&quot; eeimg=&quot;1&quot;/&gt;的约束和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;,并获得了一下的推理原则:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5B%5Ctau_0%2F%5Calpha%5D+%3D+%5Ctau_0+%5CRightarrow+%5Cmu%5Calpha.%5Ctau+%3D+%5Ctau_0&quot; alt=&quot;\tau[\tau_0/\alpha] = \tau_0 \Rightarrow \mu\alpha.\tau = \tau_0&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;但是,我们并不是传统的&lt;b&gt;ML&lt;/b&gt;我们是&lt;b&gt;MLsub&lt;/b&gt;是有&lt;b&gt;subtyping&lt;/b&gt;的&lt;b&gt;ML&lt;/b&gt;,所以这个不⭐ 我们需要一种可以支持&lt;b&gt;subtyping&lt;/b&gt;的比如这样 &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5B%5Ctau_0%2F%5Calpha%5D+%5Cleq+%5Ctau_0+%5CRightarrow+%5Cmu%5Calpha.%5Ctau+%5Cleq+%5Ctau_0&quot; alt=&quot;\tau[\tau_0/\alpha] \leq \tau_0 \Rightarrow \mu\alpha.\tau \leq \tau_0&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个就需要 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5Calpha.%5Ctau&quot; alt=&quot;\mu\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;是一个 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi&quot; alt=&quot;\phi&quot; eeimg=&quot;1&quot;/&gt;最小的不动点, 简单(数学)的术语来描述就是映射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;单调的时候 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变,用人话讲就是所有的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;都出现在偶数的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Crightarrow&quot; alt=&quot;\rightarrow&quot; eeimg=&quot;1&quot;/&gt;的左侧. &lt;br/&gt;这里带来了两个引论: &lt;/p&gt;&lt;p&gt;&lt;b&gt;引论一&lt;/b&gt;,如果&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变,那么&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;就是有一个最小的前不动点,那么我们可以写作 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E%2B%5Calpha.%5Ctau&quot; alt=&quot;\mu^+\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt; 相对的,最大的后不动点就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E-%5Calpha.%5Ctau&quot; alt=&quot;\mu^-\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;但是,残念有问题 &lt;i&gt;α&lt;/i&gt;和&lt;i&gt;α&lt;/i&gt;是逆变的,所以我们需要引入&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Cmu%5E%2B%5Calpha.%5Ctau+%3D+%5Cbot%5C%5C%5Cmu%5E-%5Calpha.%5Ctau+%3D+%5Ctop%5C%5C&quot; alt=&quot;\\\mu^+\alpha.\tau = \bot\\\mu^-\alpha.\tau = \top\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;(您家的haskell就是这样的),那么假如所有的&lt;i&gt;α&lt;/i&gt;都有至少一种类型构造器,&lt;i&gt;α&lt;/i&gt;被&lt;i&gt;τ&lt;/i&gt;保护,这样凑合就能用了&lt;/p&gt;&lt;p&gt;&lt;b&gt;引论二&lt;/b&gt;,如果&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变同时被他保护,那么 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E%2B%5Calpha.%5Ctau+%3D+%5Cmu%5E-%5Calpha.%5Ctau&quot; alt=&quot;\mu^+\alpha.\tau = \mu^-\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;这种情况下&lt;i&gt;α&lt;/i&gt;没用 似乎看起来减少了需要处理的类型,那么就很好,然而有个叫&lt;b&gt;Bekic&lt;/b&gt;的科学家发现我们可以找到一种类型成立表达式 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Cequiv+%5Ctau+%5Crightarrow+%5Ctau&quot; alt=&quot;\tau \equiv \tau \rightarrow \tau&quot; eeimg=&quot;1&quot;/&gt; (当然连我觉得都很扯,这都是什么烂七八糟的东西,不过人家有理有据,看看他是怎么搞得)所以按照他的思路我们可以写出这个东西 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Ctau_2+%5Crightarrow+%5Ctau_1+%5Cqquad+%5Ctau_2%3D%5Ctau_1+%5Crightarrow+%5Ctau_2%5C%5C&quot; alt=&quot;\\\tau_1=\tau_2 \rightarrow \tau_1 \qquad \tau_2=\tau_1 \rightarrow \tau_2\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;顺着这个思路带入&lt;i&gt;μ&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Cmu%5Calpha.%5Ctau_2+%5Crightarrow+%5Calpha+%5Cqquad+%5Ctau_2%3D%5Cmu%5Cbeta.%5Ctau_1+%5Crightarrow+%5Cbeta%5C%5C&quot; alt=&quot;\\\tau_1=\mu\alpha.\tau_2 \rightarrow \alpha \qquad \tau_2=\mu\beta.\tau_1 \rightarrow \beta\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;替换一下就可以得到&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Cmu%5Calpha.%28%5Cmu%5Cbeta.%5Calpha+%5Crightarrow+%5Cbeta%29+%5Crightarrow+%5Calpha+%5Cqquad+%5Ctau_2%3D%5Cmu%5Cbeta.%28%5Cmu%5Calpha.%5Cbeta+%5Crightarrow+%5Calpha%29+%5Crightarrow+%5Cbeta%5C%5C&quot; alt=&quot;\\\tau_1=\mu\alpha.(\mu\beta.\alpha \rightarrow \beta) \rightarrow \alpha \qquad \tau_2=\mu\beta.(\mu\alpha.\beta \rightarrow \alpha) \rightarrow \beta\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后我们说过这种情况下&lt;i&gt;α&lt;/i&gt;,&lt;i&gt;β&lt;/i&gt;没蛋的用,所以利用模式匹配总结一下&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Cequiv+%5Ctau_2&quot; alt=&quot;\tau_1 \equiv \tau_2&quot; eeimg=&quot;1&quot;/&gt;所以....推出来了这个脑残的表达式 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Cequiv+%5Ctau+%5Crightarrow+%5Ctau&quot; alt=&quot;\tau \equiv \tau \rightarrow \tau&quot; eeimg=&quot;1&quot;/&gt;我们为了纪念他,给他放个特例叫他 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau_1%2C%5Ctau_2%29&quot; alt=&quot;\phi(\tau_1,\tau_2)&quot; eeimg=&quot;1&quot;/&gt;他的不动点就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Cmu.%5Calpha.%5Cphi%28%5Cmu%5Cbeta.%5Cphi%28%5Calpha%2C%5Cbeta%29%2C%5Calpha%29%5C%5C&quot; alt=&quot;\\\mu.\alpha.\phi(\mu\beta.\phi(\alpha,\beta),\alpha)\\&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;我知道我知道,里面可以继续展开我就不展开了....&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;稳健性(Soundness)&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们的&lt;b&gt;MLsub&lt;/b&gt;的&lt;b&gt;subtyping&lt;/b&gt;并不是一个由案例来定义的,同时靠着案例反演呀并不是一个非常有意义的操作(所以这就是我unsound的理由,咳咳咳) 实际上,仅仅给出 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Cleq+%5Ctau_2+%5Crightarrow+%5Ctau_3&quot; alt=&quot;\tau_1 \leq \tau_2 \rightarrow \tau_3&quot; eeimg=&quot;1&quot;/&gt;我们可以得到 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%3D+%5Cbot&quot; alt=&quot;\tau_1 = \bot&quot; eeimg=&quot;1&quot;/&gt; 或者是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%3D+%28%5Calpha+%5Crightarrow+%5Cbeta%29%5Csqcap+%5Calpha&quot; alt=&quot;\tau_1 = (\alpha \rightarrow \beta)\sqcap \alpha&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;引论三(反转性)&lt;/b&gt;, 如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%5Crightarrow%5Ctau_2%5Cleq%5Ctau_1%27%5Crightarrow%5Ctau_2%27&quot; alt=&quot;\tau_1\rightarrow\tau_2\leq\tau_1&amp;#39;\rightarrow\tau_2&amp;#39;&quot; eeimg=&quot;1&quot;/&gt; 则 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%27%5Cleq%5Ctau_1%2C%5Ctau_2%27%5Cleq%5Ctau_2&quot; alt=&quot;\tau_1&amp;#39;\leq\tau_1,\tau_2&amp;#39;\leq\tau_2&quot; eeimg=&quot;1&quot;/&gt;,如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Cleq+%5C%7Bg%5C%7D&quot; alt=&quot;\{f\} \leq \{g\}&quot; eeimg=&quot;1&quot;/&gt;则对于 &lt;img src=&quot;https://www.zhihu.com/equation?tex=l+%5Cin+dom%5C+g&quot; alt=&quot;l \in dom\ g&quot; eeimg=&quot;1&quot;/&gt;里 &lt;img src=&quot;https://www.zhihu.com/equation?tex=f%28l%29%5Cleq+g%28l%29&quot; alt=&quot;f(l)\leq g(l)&quot; eeimg=&quot;1&quot;/&gt;幸好这个有proof.&lt;br/&gt;&lt;br/&gt; &lt;b&gt;理论四(进展性),&lt;/b&gt;如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau&quot; alt=&quot;\vdash e:\tau&quot; eeimg=&quot;1&quot;/&gt; ,要么&lt;i&gt;e&lt;/i&gt;是个值,要么是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%5Crightarrow+e%27+forsome%5C+e&quot; alt=&quot;e \rightarrow e&amp;#39; forsome\ e&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;理论五(保留性)&lt;/b&gt;如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau&quot; alt=&quot;\vdash e:\tau&quot; eeimg=&quot;1&quot;/&gt; ,同时 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%5Crightarrow+e%27+forsome%5C+e&quot; alt=&quot;e \rightarrow e&amp;#39; forsome\ e&quot; eeimg=&quot;1&quot;/&gt; , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%27%3A%5Ctau&quot; alt=&quot;\vdash e&amp;#39;:\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;最后再吹一下牛逼的类型推导&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们知道&lt;b&gt;MLsub&lt;/b&gt;是一个非常的强大的东西,刚才我提到过&lt;b&gt;MLrec&lt;/b&gt;那么&lt;b&gt;MLsub&lt;/b&gt;是严格的包含了整个&lt;b&gt;MLrec&lt;/b&gt;的存在,所以看不懂很正常咳咳咳.&lt;/p&gt;&lt;p&gt;假如我们有个函数:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+f.%5Clambda+x.f%28f+x%29&quot; alt=&quot;\lambda f.\lambda x.f(f x)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;在一般的&lt;b&gt;ML&lt;/b&gt;下的类型回事这样式(shai)儿的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha.%28%5Calpha+%5Crightarrow+%5Calpha%29+%5Crightarrow+%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha.(\alpha \rightarrow \alpha) \rightarrow \alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 我们&lt;b&gt;MLsub&lt;/b&gt;能带来更加符合直觉,更好看的类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha%2C%5Cbeta.%28%28%5Calpha+%5Csqcup+%5Cbeta%29%5Crightarrow+%5Cbeta%29%5Crightarrow%28%5Calpha+%5Crightarrow+%5Cbeta%29&quot; alt=&quot;\forall \alpha,\beta.((\alpha \sqcup \beta)\rightarrow \beta)\rightarrow(\alpha \rightarrow \beta)&quot; eeimg=&quot;1&quot;/&gt; 这个栗子不是特别突出&lt;/p&gt;&lt;p&gt;再举一个栗子,大家都知道这个函数吧 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+x.+xx&quot; alt=&quot;\lambda x. xx&quot; eeimg=&quot;1&quot;/&gt; 我们蠢萌的&lt;b&gt;ML&lt;/b&gt;没法举出这个东西的类型,但是我们&lt;b&gt;MLsub&lt;/b&gt;就可以差不多的推出来个这样的东西&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha%2C%5Cbeta.%28%28%5Calpha+%5Crightarrow+%5Cbeta%29%5Csqcap+%5Calpha%29%5Crightarrow+%5Cbeta&quot; alt=&quot;\forall \alpha,\beta.((\alpha \rightarrow \beta)\sqcap \alpha)\rightarrow \beta&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;一看,哇,漂亮对吧,一个 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Csqcap&quot; alt=&quot;\sqcap&quot; eeimg=&quot;1&quot;/&gt;就解决了这个&lt;i&gt;x&lt;/i&gt;的类型归属问题,同时解决了递归. &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;这一章稍微有点长,有的没的的东西讲的有点多,还是老规矩,大佬觉得错了就赶紧评论&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-06-21-69889087</guid>
<pubDate>Fri, 21 Jun 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.二</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-20-69889087.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69889087&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c9d6722460086c35f984571254f16343_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;上回我们讲完了类型推导,&lt;b&gt;HM&lt;/b&gt;类型推断中遇到的所有的困难都是来自于自身的短板,但是不使用子类型我们也可以使用无数的类型进行类型海作战达到这一目的,显然这是我们开发者和用户都不想看到的 (瞄一眼我们的垃圾JAWA)&lt;/p&gt;&lt;p&gt;因为&lt;b&gt;ML&lt;/b&gt;的变体太多了&lt;b&gt;MLf  &lt;/b&gt;,  &lt;b&gt;MLext-row  &lt;/b&gt;,  &lt;b&gt;MLrec  &lt;/b&gt;等 所以不介意我们再多加一种实现呢(笑嘻嘻)&lt;/p&gt;&lt;p&gt;所以下面就是作者给&lt;b&gt;MLsub&lt;/b&gt;定义的语法&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%3A%3A%3D+x%5C%5C+%7C%5Clambda+x.e%5C%5C+%7Ce_1+e_2%5C%5C+%7C%5C%7Bl_1+%3D+e_1%2Cl_2%3De_2%2C...%2Cl_n+%3D+e_n%5C%7D%5C%5C+%7Ce.l%5C%5C+%7C%5Chat%7Bx%7D%5C%5C+%7Clet+%5C+%5Chat%7Bx%7D+%5C+%3D+%5C+e_1+%5C+in+%5C+e_2&quot; alt=&quot;e ::= x\\ |\lambda x.e\\ |e_1 e_2\\ |\{l_1 = e_1,l_2=e_2,...,l_n = e_n\}\\ |e.l\\ |\hat{x}\\ |let \ \hat{x} \ = \ e_1 \ in \ e_2&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;解释一下啊,&lt;b&gt;{}&lt;/b&gt;包裹的是一个记录的构造器&lt;/p&gt;&lt;p&gt;然后环境变量的规则是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5CGamma+%3A%3A%3D+e%5C%5C+%7C%5CGamma%2Cx%3A%5Ctau%5C%5C+%7C%5CGamma%2C%5Chat%7Bx%7D%3A%5Cforall%5Cvec%5Calpha.%5Ctau&quot; alt=&quot;\Gamma ::= e\\ |\Gamma,x:\tau\\ |\Gamma,\hat{x}:\forall\vec\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;定义类型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;基本的有函数类型,记录类型,我可以添加基础的布尔类型,我们还有最大最小类型,还有那个上限下限类型运算符.&lt;/p&gt;&lt;p&gt;使用递归类型和&lt;b&gt;subtyping&lt;/b&gt;还有最大最小类型我们定义一个&lt;b&gt;Y组合子&lt;/b&gt;试试&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=Y%28%5Clambda+f.%5Clambda+x.f%29&quot; alt=&quot;Y(\lambda f.\lambda x.f)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个的类型我们写作 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop+%5Crightarrow+%28%5Ctop+%5Crightarrow+%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow%28%5Ctop+%5Crightarrow....%29&quot; alt=&quot;\top \rightarrow (\top \rightarrow (\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow(\top \rightarrow....)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;很好,写不下&lt;/p&gt;&lt;p&gt;么我们姑且吧&lt;i&gt;α&lt;/i&gt;当作递归类型处理吧,所以这个东西的类型是: &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctop+%5Crightarrow+%5Calpha&quot; alt=&quot;\top \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 为了写的爽,干脆类型的语法也就这么来吧&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%3A%3A%3D+%5Ctau_1+%5Crightarrow+%5Ctau_2%5C%5C+%7C%5C%7Bl1%3A%5Ctau_1%2C...%5C%7D%5C%5C+%7C%5Calpha%5C%5C+%7C%5Ctop%5C%5C+%7C%5Cbot%5C%5C+%7C%5Ctau+%5Csqcap%5Ctau%5C%5C+%7C%5Ctau+%5Csqcup+%5Ctau&quot; alt=&quot;\tau ::= \tau_1 \rightarrow \tau_2\\ |\{l1:\tau_1,...\}\\ |\alpha\\ |\top\\ |\bot\\ |\tau \sqcap\tau\\ |\tau \sqcup \tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;好了,我们有了类型构造的语法,那么我们想一下,对于这些记录(record)该怎么搞&lt;/p&gt;&lt;p&gt;如果我们有 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bl_1%3A%5Ctau_1%2Cl_2%3A%5Ctau_2%5C%7D&quot; alt=&quot;\{l_1:\tau_1,l_2:\tau_2\}&quot; eeimg=&quot;1&quot;/&gt;我们可以写成 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D&quot; alt=&quot;\{f\}&quot; eeimg=&quot;1&quot;/&gt;其 &lt;img src=&quot;https://www.zhihu.com/equation?tex=dom%5C+f+%3D+%5C%7Bl_1%2Cl_2%5C%7D&quot; alt=&quot;dom\ f = \{l_1,l_2\}&quot; eeimg=&quot;1&quot;/&gt; 我们就可以用这个操作获取类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=f%28l_1%29+%3D+%5Ctau_1&quot; alt=&quot;f(l_1) = \tau_1&quot; eeimg=&quot;1&quot;/&gt;,好的这个问题处理完了,我们接着处理函数的问题.&lt;/p&gt;&lt;p&gt;我们可以让语法树的类型部分是无限的,但是我们需要采用限制操作符就不是,比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Crightarrow+%28bool+%5Crightarrow%28bool+%5Crightarrow%28bool+%5Crightarrow%28....%29%29&quot; alt=&quot;bool \rightarrow (bool \rightarrow(bool \rightarrow(bool \rightarrow(....))&quot; eeimg=&quot;1&quot;/&gt;是合法的代码但是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Csqcap+%28bool+%5Csqcap%28bool+%5Csqcap%28bool+%5Csqcap%28....%29%29&quot; alt=&quot;bool \sqcap (bool \sqcap(bool \sqcap(bool \sqcap(....))&quot; eeimg=&quot;1&quot;/&gt;并不是合法的代码.&lt;/p&gt;&lt;p&gt;但是一般人是写不出来这种无限长的类型定义的,所以我们使用 &lt;b&gt;polar type&lt;/b&gt;进行操作,现在这一章先不讲,这是一种有限类型的子集,你知道方便写和推导就行了.&lt;/p&gt;&lt;p&gt;那么接着上一章提到的&lt;b&gt;分配格&lt;/b&gt;来讲,我们也设计一套规则&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Csqcup+%5Ctau+%5Cequiv+%5Ctau+%5Cqquad+%5Ctau+%5Csqcap+%5Ctau+%5Cequiv+%5Ctau%5C%5C+%5Ctau_1+%5Csqcup+%5Ctau_2+%5Cequiv+%5Ctau_2+%5Csqcup+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%5Ctau_2+%5Cequiv+%5Ctau_2+%5Csqcap+%5Ctau_1%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_2+%5Csqcup+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_2%29+%5Csqcup+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%28%5Ctau_2+%5Csqcap+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_2%29+%5Csqcap+%5Ctau_1%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_1+%5Csqcap+%5Ctau_2%29+%5Cequiv+%5Ctau_1+%5Cqquad+%5Ctau_1+%5Csqcap+%28%5Ctau_1+%5Csqcup+%5Ctau_2%29+%5Cequiv+%5Ctau_1%5C%5C+%5Cbot+%5Csqcup+%5Ctau+%5Cequiv+%5Ctau+%5Cqquad+%5Cbot+%5Csqcap+%5Ctau+%5Cequiv+%5Cbot%5C%5C+%5Ctop+%5Csqcup+%5Ctau+%5Cequiv+%5Ctop+%5Cqquad+%5Ctop+%5Csqcap+%5Ctau+%5Cequiv+%5Ctau%5C%5C+%5Ctau_1+%5Csqcup+%28%5Ctau_2+%5Csqcap+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_2%29%5Csqcap%28%5Ctau_1%5Csqcup%5Ctau_3%29%5C%5C+%5Ctau_1+%5Csqcap+%28%5Ctau_2+%5Csqcup+%5Ctau_3%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_2%29%5Csqcup%28%5Ctau_1%5Csqcap%5Ctau_3%29%5C%5C&quot; alt=&quot;\tau \sqcup \tau \equiv \tau \qquad \tau \sqcap \tau \equiv \tau\\ \tau_1 \sqcup \tau_2 \equiv \tau_2 \sqcup \tau_1 \qquad \tau_1 \sqcap \tau_2 \equiv \tau_2 \sqcap \tau_1\\ \tau_1 \sqcup (\tau_2 \sqcup \tau_3) \equiv (\tau_1\sqcup\tau_2) \sqcup \tau_1 \qquad \tau_1 \sqcap (\tau_2 \sqcap \tau_3) \equiv (\tau_1\sqcap\tau_2) \sqcap \tau_1\\ \tau_1 \sqcup (\tau_1 \sqcap \tau_2) \equiv \tau_1 \qquad \tau_1 \sqcap (\tau_1 \sqcup \tau_2) \equiv \tau_1\\ \bot \sqcup \tau \equiv \tau \qquad \bot \sqcap \tau \equiv \bot\\ \top \sqcup \tau \equiv \top \qquad \top \sqcap \tau \equiv \tau\\ \tau_1 \sqcup (\tau_2 \sqcap \tau_3) \equiv (\tau_1\sqcup\tau_2)\sqcap(\tau_1\sqcup\tau_3)\\ \tau_1 \sqcap (\tau_2 \sqcup \tau_3) \equiv (\tau_1\sqcap\tau_2)\sqcup(\tau_1\sqcap\tau_3)\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;...是不是跟布尔运算规则一个样&lt;br/&gt;下面是函数和记录的构造函数限制&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%5Csqcup%28%5Ctau_1%27+%5Crightarrow+%5Ctau_2%27%29+%5Cequiv+%28%5Ctau_1%5Csqcap%5Ctau_1%27%29%5Crightarrow%28%5Ctau_2%5Csqcup%5Ctau_2%27%29%5C%5C+%28%5Ctau_1+%5Crightarrow+%5Ctau_2%29%5Csqcap%28%5Ctau_1%27+%5Crightarrow+%5Ctau_2%27%29+%5Cequiv+%28%5Ctau_1%5Csqcup%5Ctau_1%27%29%5Crightarrow%28%5Ctau_2%5Csqcap%5Ctau_2%27%29%5C%5C++&quot; alt=&quot;(\tau_1 \rightarrow \tau_2)\sqcup(\tau_1&amp;#39; \rightarrow \tau_2&amp;#39;) \equiv (\tau_1\sqcap\tau_1&amp;#39;)\rightarrow(\tau_2\sqcup\tau_2&amp;#39;)\\ (\tau_1 \rightarrow \tau_2)\sqcap(\tau_1&amp;#39; \rightarrow \tau_2&amp;#39;) \equiv (\tau_1\sqcup\tau_1&amp;#39;)\rightarrow(\tau_2\sqcap\tau_2&amp;#39;)\\  &quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Csqcup+%5C%7Bg%5C%7D+%5Cequiv+%5C%7Bh%5C%7D%5C%5C+%5Cqquad+where+%5C++dom+%5C+h++%3D+dom+%5C+f+%5Ccap+dom+%5C+g%5C%5C+%5Cqquad+and+%5C+h%28l%29+%3D+f%28l%29+%5Csqcup+g%28l%29%5C%5C&quot; alt=&quot;\{f\} \sqcup \{g\} \equiv \{h\}\\ \qquad where \  dom \ h  = dom \ f \cap dom \ g\\ \qquad and \ h(l) = f(l) \sqcup g(l)\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Csqcap+%5C%7Bg%5C%7D+%5Cequiv+%5C%7Bh%5C%7D%5C%5C+%5Cqquad+where+%5C++dom+%5C+h++%3D+dom+%5C+f+%5Ccup+dom+%5C+g%5C%5C+%5Cqquad+and+%5C+h%28l%29+%3D+%5Cleft%5C%7B+++++%5Cbegin%7Bmatrix%7D+++++++++++++f%28l%29+%5Csqcap+g%28l%29+%5Cquad+if+%5C+l+%5C+%5Cin+dom+%5C+f+%5Ccap+dom+%5C+g%5C%5C+++++++++++++f%28l%29+%5Cqquad+if+%5C+l+%5C+%5Cin+dom+%5C+f+-+dom+%5C+g%5C%5C+++++++++++++g%28l%29+%5Cqquad+if+%5C+l+%5C+%5Cin+dom+%5C+g+-+dom+%5C+f%5C%5C+++++%5Cend%7Bmatrix%7D+++++%5Cright%5C%7D&quot; alt=&quot;\{f\} \sqcap \{g\} \equiv \{h\}\\ \qquad where \  dom \ h  = dom \ f \cup dom \ g\\ \qquad and \ h(l) = \left\{     \begin{matrix}             f(l) \sqcap g(l) \quad if \ l \ \in dom \ f \cap dom \ g\\             f(l) \qquad if \ l \ \in dom \ f - dom \ g\\             g(l) \qquad if \ l \ \in dom \ g - dom \ f\\     \end{matrix}     \right\}&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;递归类型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;MLsub&lt;/b&gt;作为一个牛*的语言,肯定是要支持递归类型的!&lt;/p&gt;&lt;p&gt;经典的递归类型的处理方法是:首先我们有一个类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5Calpha.%5Ctau&quot; alt=&quot;\mu\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;我们会把他当成一个映射的不动点 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;这个就确定了 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu&quot; alt=&quot;\mu&quot; eeimg=&quot;1&quot;/&gt;的约束和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;,并获得了一下的推理原则:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5B%5Ctau_0%2F%5Calpha%5D+%3D+%5Ctau_0+%5CRightarrow+%5Cmu%5Calpha.%5Ctau+%3D+%5Ctau_0&quot; alt=&quot;\tau[\tau_0/\alpha] = \tau_0 \Rightarrow \mu\alpha.\tau = \tau_0&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;但是,我们并不是传统的&lt;b&gt;ML&lt;/b&gt;我们是&lt;b&gt;MLsub&lt;/b&gt;是有&lt;b&gt;subtyping&lt;/b&gt;的&lt;b&gt;ML&lt;/b&gt;,所以这个不⭐ 我们需要一种可以支持&lt;b&gt;subtyping&lt;/b&gt;的比如这样 &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau%5B%5Ctau_0%2F%5Calpha%5D+%5Cleq+%5Ctau_0+%5CRightarrow+%5Cmu%5Calpha.%5Ctau+%5Cleq+%5Ctau_0&quot; alt=&quot;\tau[\tau_0/\alpha] \leq \tau_0 \Rightarrow \mu\alpha.\tau \leq \tau_0&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;这个就需要 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5Calpha.%5Ctau&quot; alt=&quot;\mu\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;是一个 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi&quot; alt=&quot;\phi&quot; eeimg=&quot;1&quot;/&gt;最小的不动点, 简单(数学)的术语来描述就是映射 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;单调的时候 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变,用人话讲就是所有的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha&quot; alt=&quot;\alpha&quot; eeimg=&quot;1&quot;/&gt;都出现在偶数的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Crightarrow&quot; alt=&quot;\rightarrow&quot; eeimg=&quot;1&quot;/&gt;的左侧. &lt;br/&gt;这里带来了两个引论: &lt;/p&gt;&lt;p&gt;&lt;b&gt;引论一&lt;/b&gt;,如果&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变,那么&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau%27%29+%3D+%5Ctau%5B%5Ctau%27%2F%5Calpha%5D&quot; alt=&quot;\phi(\tau&amp;#39;) = \tau[\tau&amp;#39;/\alpha]&quot; eeimg=&quot;1&quot;/&gt;就是有一个最小的前不动点,那么我们可以写作 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E%2B%5Calpha.%5Ctau&quot; alt=&quot;\mu^+\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt; 相对的,最大的后不动点就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E-%5Calpha.%5Ctau&quot; alt=&quot;\mu^-\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;但是,残念有问题 &lt;i&gt;α&lt;/i&gt;和&lt;i&gt;α&lt;/i&gt;是逆变的,所以我们需要引入&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Cmu%5E%2B%5Calpha.%5Ctau+%3D+%5Cbot%5C%5C%5Cmu%5E-%5Calpha.%5Ctau+%3D+%5Ctop%5C%5C&quot; alt=&quot;\\\mu^+\alpha.\tau = \bot\\\mu^-\alpha.\tau = \top\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;(您家的haskell就是这样的),那么假如所有的&lt;i&gt;α&lt;/i&gt;都有至少一种类型构造器,&lt;i&gt;α&lt;/i&gt;被&lt;i&gt;τ&lt;/i&gt;保护,这样凑合就能用了&lt;/p&gt;&lt;p&gt;&lt;b&gt;引论二&lt;/b&gt;,如果&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Calpha%2C%5Ctau&quot; alt=&quot;\alpha,\tau&quot; eeimg=&quot;1&quot;/&gt;协变同时被他保护,那么 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmu%5E%2B%5Calpha.%5Ctau+%3D+%5Cmu%5E-%5Calpha.%5Ctau&quot; alt=&quot;\mu^+\alpha.\tau = \mu^-\alpha.\tau&quot; eeimg=&quot;1&quot;/&gt;这种情况下&lt;i&gt;α&lt;/i&gt;没用 似乎看起来减少了需要处理的类型,那么就很好,然而有个叫&lt;b&gt;Bekic&lt;/b&gt;的科学家发现我们可以找到一种类型成立表达式 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Cequiv+%5Ctau+%5Crightarrow+%5Ctau&quot; alt=&quot;\tau \equiv \tau \rightarrow \tau&quot; eeimg=&quot;1&quot;/&gt; (当然连我觉得都很扯,这都是什么烂七八糟的东西,不过人家有理有据,看看他是怎么搞得)所以按照他的思路我们可以写出这个东西 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Ctau_2+%5Crightarrow+%5Ctau_1+%5Cqquad+%5Ctau_2%3D%5Ctau_1+%5Crightarrow+%5Ctau_2%5C%5C&quot; alt=&quot;\\\tau_1=\tau_2 \rightarrow \tau_1 \qquad \tau_2=\tau_1 \rightarrow \tau_2\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;顺着这个思路带入&lt;i&gt;μ&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Cmu%5Calpha.%5Ctau_2+%5Crightarrow+%5Calpha+%5Cqquad+%5Ctau_2%3D%5Cmu%5Cbeta.%5Ctau_1+%5Crightarrow+%5Cbeta%5C%5C&quot; alt=&quot;\\\tau_1=\mu\alpha.\tau_2 \rightarrow \alpha \qquad \tau_2=\mu\beta.\tau_1 \rightarrow \beta\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;替换一下就可以得到&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Ctau_1%3D%5Cmu%5Calpha.%28%5Cmu%5Cbeta.%5Calpha+%5Crightarrow+%5Cbeta%29+%5Crightarrow+%5Calpha+%5Cqquad+%5Ctau_2%3D%5Cmu%5Cbeta.%28%5Cmu%5Calpha.%5Cbeta+%5Crightarrow+%5Calpha%29+%5Crightarrow+%5Cbeta%5C%5C&quot; alt=&quot;\\\tau_1=\mu\alpha.(\mu\beta.\alpha \rightarrow \beta) \rightarrow \alpha \qquad \tau_2=\mu\beta.(\mu\alpha.\beta \rightarrow \alpha) \rightarrow \beta\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后我们说过这种情况下&lt;i&gt;α&lt;/i&gt;,&lt;i&gt;β&lt;/i&gt;没蛋的用,所以利用模式匹配总结一下&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Cequiv+%5Ctau_2&quot; alt=&quot;\tau_1 \equiv \tau_2&quot; eeimg=&quot;1&quot;/&gt;所以....推出来了这个脑残的表达式 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%5Cequiv+%5Ctau+%5Crightarrow+%5Ctau&quot; alt=&quot;\tau \equiv \tau \rightarrow \tau&quot; eeimg=&quot;1&quot;/&gt;我们为了纪念他,给他放个特例叫他 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cphi%28%5Ctau_1%2C%5Ctau_2%29&quot; alt=&quot;\phi(\tau_1,\tau_2)&quot; eeimg=&quot;1&quot;/&gt;他的不动点就是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%5C%5Cmu.%5Calpha.%5Cphi%28%5Cmu%5Cbeta.%5Cphi%28%5Calpha%2C%5Cbeta%29%2C%5Calpha%29%5C%5C&quot; alt=&quot;\\\mu.\alpha.\phi(\mu\beta.\phi(\alpha,\beta),\alpha)\\&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;我知道我知道,里面可以继续展开我就不展开了....&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;稳健性(Soundness)&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们的&lt;b&gt;MLsub&lt;/b&gt;的&lt;b&gt;subtyping&lt;/b&gt;并不是一个由案例来定义的,同时靠着案例反演呀并不是一个非常有意义的操作(所以这就是我unsound的理由,咳咳咳) 实际上,仅仅给出 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Cleq+%5Ctau_2+%5Crightarrow+%5Ctau_3&quot; alt=&quot;\tau_1 \leq \tau_2 \rightarrow \tau_3&quot; eeimg=&quot;1&quot;/&gt;我们可以得到 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%3D+%5Cbot&quot; alt=&quot;\tau_1 = \bot&quot; eeimg=&quot;1&quot;/&gt; 或者是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%3D+%28%5Calpha+%5Crightarrow+%5Cbeta%29%5Csqcap+%5Calpha&quot; alt=&quot;\tau_1 = (\alpha \rightarrow \beta)\sqcap \alpha&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;引论三(反转性)&lt;/b&gt;, 如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%5Crightarrow%5Ctau_2%5Cleq%5Ctau_1%27%5Crightarrow%5Ctau_2%27&quot; alt=&quot;\tau_1\rightarrow\tau_2\leq\tau_1&amp;#39;\rightarrow\tau_2&amp;#39;&quot; eeimg=&quot;1&quot;/&gt; 则 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%27%5Cleq%5Ctau_1%2C%5Ctau_2%27%5Cleq%5Ctau_2&quot; alt=&quot;\tau_1&amp;#39;\leq\tau_1,\tau_2&amp;#39;\leq\tau_2&quot; eeimg=&quot;1&quot;/&gt;,如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5C%7Bf%5C%7D+%5Cleq+%5C%7Bg%5C%7D&quot; alt=&quot;\{f\} \leq \{g\}&quot; eeimg=&quot;1&quot;/&gt;则对于 &lt;img src=&quot;https://www.zhihu.com/equation?tex=l+%5Cin+dom%5C+g&quot; alt=&quot;l \in dom\ g&quot; eeimg=&quot;1&quot;/&gt;里 &lt;img src=&quot;https://www.zhihu.com/equation?tex=f%28l%29%5Cleq+g%28l%29&quot; alt=&quot;f(l)\leq g(l)&quot; eeimg=&quot;1&quot;/&gt;幸好这个有proof.&lt;br/&gt;&lt;br/&gt; &lt;b&gt;理论四(进展性),&lt;/b&gt;如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau&quot; alt=&quot;\vdash e:\tau&quot; eeimg=&quot;1&quot;/&gt; ,要么&lt;i&gt;e&lt;/i&gt;是个值,要么是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%5Crightarrow+e%27+forsome%5C+e&quot; alt=&quot;e \rightarrow e&amp;#39; forsome\ e&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;理论五(保留性)&lt;/b&gt;如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%3A%5Ctau&quot; alt=&quot;\vdash e:\tau&quot; eeimg=&quot;1&quot;/&gt; ,同时 &lt;img src=&quot;https://www.zhihu.com/equation?tex=e+%5Crightarrow+e%27+forsome%5C+e&quot; alt=&quot;e \rightarrow e&amp;#39; forsome\ e&quot; eeimg=&quot;1&quot;/&gt; , &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cvdash+e%27%3A%5Ctau&quot; alt=&quot;\vdash e&amp;#39;:\tau&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;最后再吹一下牛逼的类型推导&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们知道&lt;b&gt;MLsub&lt;/b&gt;是一个非常的强大的东西,刚才我提到过&lt;b&gt;MLrec&lt;/b&gt;那么&lt;b&gt;MLsub&lt;/b&gt;是严格的包含了整个&lt;b&gt;MLrec&lt;/b&gt;的存在,所以看不懂很正常咳咳咳.&lt;/p&gt;&lt;p&gt;假如我们有个函数:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+f.%5Clambda+x.f%28f+x%29&quot; alt=&quot;\lambda f.\lambda x.f(f x)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;在一般的&lt;b&gt;ML&lt;/b&gt;下的类型回事这样式(shai)儿的 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha.%28%5Calpha+%5Crightarrow+%5Calpha%29+%5Crightarrow+%5Calpha+%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha.(\alpha \rightarrow \alpha) \rightarrow \alpha \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; 我们&lt;b&gt;MLsub&lt;/b&gt;能带来更加符合直觉,更好看的类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha%2C%5Cbeta.%28%28%5Calpha+%5Csqcup+%5Cbeta%29%5Crightarrow+%5Cbeta%29%5Crightarrow%28%5Calpha+%5Crightarrow+%5Cbeta%29&quot; alt=&quot;\forall \alpha,\beta.((\alpha \sqcup \beta)\rightarrow \beta)\rightarrow(\alpha \rightarrow \beta)&quot; eeimg=&quot;1&quot;/&gt; 这个栗子不是特别突出&lt;/p&gt;&lt;p&gt;再举一个栗子,大家都知道这个函数吧 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Clambda+x.+xx&quot; alt=&quot;\lambda x. xx&quot; eeimg=&quot;1&quot;/&gt; 我们蠢萌的&lt;b&gt;ML&lt;/b&gt;没法举出这个东西的类型,但是我们&lt;b&gt;MLsub&lt;/b&gt;就可以差不多的推出来个这样的东西&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha%2C%5Cbeta.%28%28%5Calpha+%5Crightarrow+%5Cbeta%29%5Csqcap+%5Calpha%29%5Crightarrow+%5Cbeta&quot; alt=&quot;\forall \alpha,\beta.((\alpha \rightarrow \beta)\sqcap \alpha)\rightarrow \beta&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;一看,哇,漂亮对吧,一个 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Csqcap&quot; alt=&quot;\sqcap&quot; eeimg=&quot;1&quot;/&gt;就解决了这个&lt;i&gt;x&lt;/i&gt;的类型归属问题,同时解决了递归. &lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;这一章稍微有点长,有的没的的东西讲的有点多,还是老规矩,大佬觉得错了就赶紧评论&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-06-20-69889087</guid>
<pubDate>Thu, 20 Jun 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>MLsub大概是个什么鬼.一</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-18-69565293.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69565293&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4b66c35b47a7a554e4fc8f7ff2da185b_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;我们知道(PS:不知道的可以不看了) &lt;b&gt;Hindley-Milner&lt;/b&gt; 类型系统是一个非常流行(PS:荼毒万年,又让人无可奈何)的类型系统,&lt;b&gt;ML&lt;/b&gt;又是一个很基本的一种函数式编程语言(家族).&lt;/p&gt;&lt;p&gt;&lt;b&gt;ML&lt;/b&gt;使用了&lt;b&gt;Hindley-Milner&lt;/b&gt;类型系统,但是,现在来讲&lt;b&gt;HM&lt;/b&gt;类型系统已经过时了,因为&lt;b&gt;OOP&lt;/b&gt;(面向对象编程)的范式越来越多的被人们熟知,而&lt;b&gt;HM&lt;/b&gt;并不支持&lt;b&gt;OOP&lt;/b&gt;赖以生存的&lt;b&gt;Subtyping&lt;/b&gt;,这就是为什么我们要把&lt;b&gt;subtyping&lt;/b&gt;加入到&lt;b&gt;HM&lt;/b&gt;里了,当然这并不是一个非常简单的过程,既然是学术文章,那么我们就不能摆出来&lt;b&gt;Java&lt;/b&gt;之类的残废语言讨论,真正的&lt;b&gt;subtyping&lt;/b&gt;还应该(道德绑架)支持&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;br/&gt;&lt;b&gt;Extensible records&lt;/b&gt;来自&lt;b&gt;ELM&lt;/b&gt;语言的例子&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Positioned&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;polymorphic variants&lt;/b&gt;这是一个&lt;b&gt;ReasonML&lt;/b&gt;里的一个例子&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbnormal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Redn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greenn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bluen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgbvariants&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Redv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Greenv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bluev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了支持&lt;b&gt;subtyping&lt;/b&gt;我们需要很好的考虑类型和数据流的关系,数据流的方向,一个信息源必须提供一个目的地.&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;ML&lt;/b&gt;里的类型信息&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha+.%28%5Calpha+%5Crightarrow+bool%29%5Crightarrow+%5Calpha++%5Crightarrow+%5Calpha++%5Crightarrow+%5Calpha&quot; alt=&quot;\forall \alpha .(\alpha \rightarrow bool)\rightarrow \alpha  \rightarrow \alpha  \rightarrow \alpha&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;不用想都知道,这肯定不对,有人建议我们写对的&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28%5Calpha+%5Crightarrow+bool%29%5Crightarrow+%5Calpha+%5Crightarrow+%5Cbeta+%5Crightarrow+%5Cgamma+%7C%5Calpha+%5Cleq+%5Cgamma+%2C+%5Cbeta+%5Cleq+%5Cgamma&quot; alt=&quot;(\alpha \rightarrow bool)\rightarrow \alpha \rightarrow \beta \rightarrow \gamma |\alpha \leq \gamma , \beta \leq \gamma&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;对是对了,然后那群科学家发现者玩意儿怎么TM用,太难了! 于是有一个人 &lt;b&gt;Pottier&lt;/b&gt; 觉得我们可以化简一波&lt;/p&gt;&lt;p&gt;于是就有了&lt;b&gt;MLsubj&lt;/b&gt;的s小本本里建议的这种写法&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cforall+%5Calpha+%2C+%5Cbeta+.%28%5Calpha+%5Crightarrow+bool%29+%5Crightarrow+%5Calpha+%5Crightarrow+%5Cbeta+%5Crightarrow+%28%5Calpha+%5Csqcup+%5Cbeta%29&quot; alt=&quot;\forall \alpha , \beta .(\alpha \rightarrow bool) \rightarrow \alpha \rightarrow \beta \rightarrow (\alpha \sqcup \beta)&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;乍一看是对的,这个&lt;b&gt;select&lt;/b&gt;函数的定义就跟符合直觉了&lt;/p&gt;&lt;p&gt;所以本质上&lt;b&gt;MLsub&lt;/b&gt;的主要贡献大概有四点&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;MLsub类型系统&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;我们扩充了&lt;b&gt;ML&lt;/b&gt;的类型系统,添加了&lt;b&gt;subtyping&lt;/b&gt;的特性,然后我们采用了一些输入输出上的规则,简化了类型推断&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;类型推断&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;我们引入了一种处理&lt;b&gt;subtype&lt;/b&gt;的&lt;b&gt;unification&lt;/b&gt;算法 &lt;b&gt;(biunification)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;类型化简&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;MLsub&lt;/b&gt;里面会产生很多的类型实质上一样但是表述上有区别的类型,就比如 &lt;img src=&quot;https://www.zhihu.com/equation?tex=bool+%5Csqcup+bool+%5Csqcup+%5Cbot&quot; alt=&quot;bool \sqcup bool \sqcup \bot&quot; eeimg=&quot;1&quot;/&gt; 实际上和&lt;i&gt;bool&lt;/i&gt;是一个类型的,我们将会使用一个自动机来化简类型&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;引入了更多BUG&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;说了这么多没用的简介,那我们可以理一理实现了,从代数层面上&lt;/p&gt;&lt;p&gt;一个标准的类型,函数类型,顶类型,底类型定义为&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau+%3A%3A%3D+%5Cbot+%7C+%5Ctau+%5Crightarrow+%5Ctau+%7C+%5Ctop&quot; alt=&quot;\tau ::= \bot | \tau \rightarrow \tau | \top&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;对于任意类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%2C%5Ctau_2&quot; alt=&quot;\tau_1,\tau_2&quot; eeimg=&quot;1&quot;/&gt; ,有他们的上限是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Csqcup+%5Ctau_2&quot; alt=&quot;\tau_1 \sqcup \tau_2&quot; eeimg=&quot;1&quot;/&gt; ,他们最大的下限是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Csqcap+%5Ctau_2&quot; alt=&quot;\tau_1 \sqcap \tau_2&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;然后,我们发现好像不太对&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28E%29%3A%5Cquad%28%5Cbot+%5Crightarrow+%5Ctop%29%5Crightarrow+%5Cbot+%5Cleq+%28%5Calpha+%5Crightarrow+%5Cbot%29+%5Csqcup+%5Calpha&quot; alt=&quot;(E):\quad(\bot \rightarrow \top)\rightarrow \bot \leq (\alpha \rightarrow \bot) \sqcup \alpha&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;MLsub&lt;/b&gt;就是为了避免这个的发生,使用了更加复杂的语法和直接添加的类型而不是使用一个&lt;b&gt;Ground Type&lt;/b&gt;慢慢往上搭屎山.&lt;/p&gt;&lt;p&gt;其次呢,他们使用了一种词法叫&lt;b&gt;分配格&lt;/b&gt;,确保了构建类型的时候仅少量的出现相同的&lt;b&gt;subtype&lt;/b&gt;. 但是问题又来了,加入我们有一个类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_f&quot; alt=&quot;\tau_f&quot; eeimg=&quot;1&quot;/&gt;用来描述函数和一个类型 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_r&quot; alt=&quot;\tau_r&quot; eeimg=&quot;1&quot;/&gt;用来描述一个记录(record),那么下面公式成立&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_f%5Csqcap%5Ctau_r+%3D+%5Cbot+&quot; alt=&quot;\tau_f\sqcap\tau_r = \bot &quot; eeimg=&quot;1&quot;/&gt;虽然第一眼看起来没有任何问题&lt;/p&gt;&lt;p&gt;给没看出问题的你一点时间......&lt;/p&gt;&lt;p&gt;我们可以推导出 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_f%5Csqcap%5Ctau_r+%5Cleq+bool&quot; alt=&quot;\tau_f\sqcap\tau_r \leq bool&quot; eeimg=&quot;1&quot;/&gt; 蛤?! 这是什么?! 为什么?!     因为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_f%5Csqcap%5Ctau_r+%3D+%5Cbot&quot; alt=&quot;\tau_f\sqcap\tau_r = \bot&quot; eeimg=&quot;1&quot;/&gt;这个公式成立啊! &lt;/p&gt;&lt;p&gt;这个非常的反直觉,但是,毕竟定义上合情合理 &amp;lt;del&amp;gt;所以这个编译器就必须能处理这个东西(一个函数和记录作为布尔值)......&amp;lt;/del&amp;gt;&lt;/p&gt;&lt;p&gt;下面是&lt;b&gt;MLsub&lt;/b&gt;的类型推导&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28VAR-%5Clambda%29%5Cquad%5Cfrac%7B%7D%7B%5CGamma%5Cvdash+x%3A%5Ctau%7D%5CGamma%28x%29%3D%5Ctau%5C%5C+%5C%5C+%28VAR-%5Cforall%29%5Cquad%5Cfrac%7B%7D%7B%5CGamma+%5Cvdash+%5Chat+x+%3A+%5Ctau%5B%5Cvec+%5Ctau+%2F+%5Cvec+%5Calpha%5D%7D+%5CGamma%28%5Chat+x%29+%3D+%5Cforall+%5Cvec+%5Calpha+.+%5Ctau%5C%5C+%28ABS%29%5Cquad+%5Cfrac%7B%5CGamma%2Cx%3A%5Ctau_1+%5Cvdash+e+%3A%5Ctau_2%7D%7B%5CGamma+%5Cvdash+%5Clambda+x.e+%3A+%5Ctau_1+%5Crightarrow+%5Ctau_2%7D%5C%5C+%28APP%29+%5Cquad+%5Cfrac%7B%5CGamma+%5Cvdash+e_1+%3A+%5Ctau_1+%5Crightarrow+%5Ctau_2+%5Cquad+%5CGamma+%5Cvdash+e_2+%3A+%5Ctau_1%7D%7B%5CGamma+%5Cvdash+e_1+e_2+%3A+%5Ctau_2%7D%5C%5C+%28LET%29+%5Cfrac%7B%5CGamma+%5Cvdash+e_1%3A%5Ctau_1+%5Cquad+%5CGamma%2Cx%3A%5Cforall+%5Cvec+a+.%5Ctau_1+%5Cvdash+e_2+%3A+%5Ctau_2%7D%7B%5CGamma+%5Cvdash+let+%5C++%5Chat%7Bx%7D+%3D+e_1%5C++in%5C++e_2+%3A+%5Ctau_2%7D%5C%5C+%28PROJ%29+%5Cquad+%5Cfrac%7B%5CGamma%5Cvdash+e%3A+%5C%7B+l+%3A+%5Ctau%2C...%5C%7D%7D%7B%5CGamma+%5Cvdash+e.l+%3A+%5Ctau%7D%5C%5C+%28SUB%29+%5Cquad+%5Cfrac%7B%5CGamma+%5Cvdash+e%3A%5Ctau%7D%7B%5CGamma+%5Cvdash+e%3A%5Ctau%27%7D+%5Ctau+%5Cleq+%5Ctau%27%5C%5C&quot; alt=&quot;(VAR-\lambda)\quad\frac{}{\Gamma\vdash x:\tau}\Gamma(x)=\tau\\ \\ (VAR-\forall)\quad\frac{}{\Gamma \vdash \hat x : \tau[\vec \tau / \vec \alpha]} \Gamma(\hat x) = \forall \vec \alpha . \tau\\ (ABS)\quad \frac{\Gamma,x:\tau_1 \vdash e :\tau_2}{\Gamma \vdash \lambda x.e : \tau_1 \rightarrow \tau_2}\\ (APP) \quad \frac{\Gamma \vdash e_1 : \tau_1 \rightarrow \tau_2 \quad \Gamma \vdash e_2 : \tau_1}{\Gamma \vdash e_1 e_2 : \tau_2}\\ (LET) \frac{\Gamma \vdash e_1:\tau_1 \quad \Gamma,x:\forall \vec a .\tau_1 \vdash e_2 : \tau_2}{\Gamma \vdash let \  \hat{x} = e_1\  in\  e_2 : \tau_2}\\ (PROJ) \quad \frac{\Gamma\vdash e: \{ l : \tau,...\}}{\Gamma \vdash e.l : \tau}\\ (SUB) \quad \frac{\Gamma \vdash e:\tau}{\Gamma \vdash e:\tau&amp;#39;} \tau \leq \tau&amp;#39;\\&quot; eeimg=&quot;1&quot;/&gt;&lt;/p&gt;&lt;p&gt;最后我们可以得出,如果 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1+%5Csqcap%5Ctau_2+%5Cleq+%5Ctau_3&quot; alt=&quot;\tau_1 \sqcap\tau_2 \leq \tau_3&quot; eeimg=&quot;1&quot;/&gt; 那么 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%27+%5Csqcap%5Ctau_2%27+%3D+%5Ctau_3&quot; alt=&quot;\tau_1&amp;#39; \sqcap\tau_2&amp;#39; = \tau_3&quot; eeimg=&quot;1&quot;/&gt;所以 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ctau_1%27%5Cleq%5Ctau_3%2C%5Ctau_2%27%5Cleq%5Ctau_3&quot; alt=&quot;\tau_1&amp;#39;\leq\tau_3,\tau_2&amp;#39;\leq\tau_3&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;很好,锅居多,作者表态,嗯,下章我们要用更加科学的方法去修补.&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;第一次写关于这个的文章,其实这是我这个垃圾的笔记,完全是按照自己易懂的方法写的,看不懂属于正常现象,大佬要是发现了我的理解错误随时评论区指正&lt;/p&gt;</description>
<author>柠檬浣熊</author>
<guid isPermaLink="false">2019-06-18-69565293</guid>
<pubDate>Tue, 18 Jun 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Encode Extensible Tuple In λ-Calculus</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-10-68506839.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/68506839&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-89a92d224f91a0df1cd674752eacfa96_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;在λ-calculus中我们可以通过scott encoding来对所有常见的ADT进行直观的encode，但是对于一些其他的数据结构却不尽如此。例如本文中要实现的数据结构便是用church encoding的natural number来作为tuple的arity来实现extensible tuple，此数据结构便无法简单的用scott encoding来进行encode。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;前置知识&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;对函数式编程及相关编程语言的知识&lt;/li&gt;&lt;li&gt;对λ-calculus的相关知识&lt;/li&gt;&lt;li&gt;对church number的相关知识&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;分析&lt;/h2&gt;&lt;p&gt;首先对于非extensible的tuple，我们可以使用scott encoding来进行encode，例如以下例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;tuple0 := λt.t

tuple1 := λx.λt.t x
tuple1_0th := λx.x

tuple2 := λx.λy.λt.t x y
tuple2_0th := λx.λy.x
tuple2_1th := λx.λy.y

tuple3 := λx.λy.λz.λt.t x y z
tuple3_0th := λx.λy.λz.x
tuple3_1th := λx.λy.λz.y
tuple3_2th := λx.λy.λz.z&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;能够发现明显的规律，因此，我们需要对这些constructor和pattern match函数进行generalize写出tuple和nth这两个函数。&lt;/p&gt;&lt;h2&gt;实现&lt;/h2&gt;&lt;p&gt;对于constructor tuple来说，可以注意到是由n个argument以及1个进行pattern match的higher order function作为参数传入，并给这个function依次apply n个argument。此时应用church number的性质，一个church number相当于对一个x，以及一个函数f，将x apply n次f，那么x就应该是tuple0，因为要将一个参数传入其内部，所以将其变换为：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;λu.λt.u t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后最后apply一个id，但由于实际上变换前和变换后的lambda term是eta equivalent的，所以这一步不是必须的，现在得到如下的lambda term：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;λn.n f (λu.λt.u t) id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于f，相当于将一个argument加在之前的tuple constructor上，那么就应该是：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;λf.λu.λx.f (λt.u t x)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将其合并起来组成extensible tuple的constructor：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;λn.n (λf.λu.λx.f (λt.u t x)) (λu.λt.u t) id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后进行简化就得到了extensible tuple的constructor：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;tuple := λn.n (λf.λu.λx.f (λt.u t x)) (λu.u) (λx.x)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于pattern match函数，需要2个church number，n作为tuple的大小，m作为第m的element。同样应用church number的性质，先生成n - m个arity的const function：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;(m pred n) (λf.λx.f)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在外部加m个constant argument，组成extensible tuple的pattern match函数nth：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;nth := λn.λm.m (λf.λx.f) ((m pred n) (λf.λx.f))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中pred定义为：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pred := λn.λf.λx.n (λg.λh.h (g f)) (λu.x) (λu.u)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果需要测试相关代码，可以直接使用我写的λ-calculus在线测试工具：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//yuxuanchiadm.github.io/hyperlambda/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Hyper Lambda&lt;/a&gt;&lt;h2&gt;相关文章&lt;/h2&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36081360&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-fc94609d676b4704ccfce8b67fd56e62_180x120.jpg&quot; data-image-width=&quot;1440&quot; data-image-height=&quot;816&quot; class=&quot;internal&quot;&gt;非构造性雨轩菌：lambda演算与数据类型&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>非构造性雨轩菌</author>
<guid isPermaLink="false">2019-06-10-68506839</guid>
<pubDate>Mon, 10 Jun 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>某不知名的 Lambda Calculus Calculator 实现 吃人了~！</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-06-05-68084517.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/68084517&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6765c36a65c96091e2d1fb5522da91a0_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;先放链接吧！&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//yuxuanchiadm.github.io/hyperlambda/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Hyper Lambda&lt;/a&gt;&lt;p&gt;最近突然想把以前用scala写的一个叫做lamcalcj的东西翻出来玩一玩，然后想想9102年已经完全是web的时代了，javascript都成为21st century assembly language了（雾&lt;/p&gt;&lt;p&gt;所以去一个造web版的lambda calculus的计算器、REPL那岂不是能获得双倍的快乐了？&lt;/p&gt;&lt;p&gt;然后就开始弄起来了，花了2天时间目前已经用scalajs把lamcalcj给cross compile到了js上，然后用element-ui简单的做了一波前端（不要在意目前的排版www），最终目标是做一个完整的online IDE性质的东西出来，然后再考虑加一下奇怪的东西上去。&lt;/p&gt;&lt;p&gt;那么欢迎对这东西有兴趣的同学来找我摸鱼、划水、闲聊、发PR！（真的能吃到人么？&lt;/p&gt;&lt;p&gt;相关项目：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/yuxuanchiadm/hyperlambda&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-b81dd42e0396d4444d0d5c2ec0b9973a_ipico.jpg&quot; data-image-width=&quot;400&quot; data-image-height=&quot;400&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;yuxuanchiadm/hyperlambda&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/yuxuanchiadm/lamcalcj&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-b81dd42e0396d4444d0d5c2ec0b9973a_ipico.jpg&quot; data-image-width=&quot;400&quot; data-image-height=&quot;400&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;yuxuanchiadm/lamcalcj&lt;/a&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/yuxuanchiadm/lambdacore&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-b81dd42e0396d4444d0d5c2ec0b9973a_ipico.jpg&quot; data-image-width=&quot;400&quot; data-image-height=&quot;400&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;yuxuanchiadm/lambdacore&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>非构造性雨轩菌</author>
<guid isPermaLink="false">2019-06-05-68084517</guid>
<pubDate>Wed, 05 Jun 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
