<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>迷思</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/</link>
<description>我的博客及微信公众号里的精华内容都会放在这里。 我的博客及微信公众号里的精华内容都会放在这里。</description>
<language>zh-cn</language>
<lastBuildDate>Sat, 15 Jun 2019 16:36:58 +0800</lastBuildDate>
<item>
<title>沅有芷兮：类型系统的数学之美</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-06-15-69223872.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/69223872&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3717ea2eee51cd779e0a6a582cc9afe2_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;最近两周在给 team 培训 rust。虽然去年汉东给我们北京的 team 做过一次 rust 讲座，我的好友旭东也跟我布道过不少 rust 的美妙之处，但我真正开始系统性学习 rust，也就是三周之前。对大多数人而言，rust 最令人兴奋的是所有权的概念，零成本抽象的能力，以及通过合适的约束巧妙解决内存安全和线程安全两大难题的优雅 —— 记得看过一个统计，linux kernel 里面这两类 bug 占据了 1/2 强。也就是说，你只要学会了 rust，就躺着消弭了 50% 的难啃的让 kernel developer 都闻之变色的 bug。&lt;/p&gt;&lt;p&gt;但对我来说，rust 的美妙之处在于其为如此底层的语言注入了如此高级的吸收了大量 Haskell 精髓的类型系统。如果你接触过 Haskell / F# / Scala，你大概能了解我的兴奋之处。我们所处的世界往往是鱼与熊掌不可兼得 —— Haskell 长于类型系统，但让程序员失去了对数据在内存中如何排布的控制；C 长于对数据在内存中的精确控制，但没有一个像样的类型系统。rust 几乎做到了二者兼得。虽然我的 haskell 之旅最终从入门走向了放弃，但就像冰火岛上对武功秘籍懵懵懂懂的无忌，那些 monad，monoid，senigroup，sum type，product type 等概念还是烙在我的脑海里，它们尘封着，等待一个契机，让自己重见天日。这个契机，便是 rust。&lt;/p&gt;&lt;p&gt;本文借用 rust，谈谈我对类型系统的一知半解。文章本身和 rust 并不太大，有其它编程语言经验的朋友想必也能读懂。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;primitive type&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;primitive type，基本类型。基本上每种编程语言都有 —— integer，string，bool，array，list/vector 等。它们就像元素周期表里的一个个元素，不多，但构成了我们这个花花世界。&lt;/p&gt;&lt;p&gt;基本类型没有什么好讲的，不过在我们深入下面的话提前，我们需要问自己一个问题：什么是类型？&lt;/p&gt;&lt;p&gt;对于 u8 来说，它是 [0, 255] 之间的一个整数，是一个集合，可以这么表述：&lt;code&gt;{ x | x ∈ [0, 255]}&lt;/code&gt;。 对于 String 来说，它是任意字符串的一个集合，&lt;code&gt;{x | x ∈ [&amp;#34;&amp;#34;, &amp;#34;a&amp;#34;, ..., &amp;#34;War and Pease&amp;#34;, ...]}&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;所以，类型在数学上的意义是集合。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;product type&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;product type 是几乎我们所知道的编程语言都有的数据类型 —— 在某些语言中它被称作 record (delphi, erlang)，另一些语言中被称作 struct (elixir, rust, go) 或者 object (javascript)。我们平时在软件开发中，最离不开的数据类型就是 product type，就像分子把不同元素的原子组合起来一样，product type 大大丰富了类型的可能性，从而很好地辅助我们做 DDD (Domain Driven Design)。&lt;/p&gt;&lt;p&gt;我们看 product type 数学上的意义。product type，顾名思义，是不同类型的乘积。类型的乘积究竟是什么东西呢？ 假设 x 的定义域是集合 int，y 的定义域是集合 string，x * y 展开便是 (…, -2, -1, 0, 1, 2, …) * (“”, “a”, “ab”, “hello world”, …)，也就是说对于 int 里的任意一个值，都有 string 里的任意一个值与其配对，看起来有些眼熟对不对？这就是笛卡尔积 (Cartesian product)。如图所示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9de4e21697eb1282f8dd93a32a7931cb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1947&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-9de4e21697eb1282f8dd93a32a7931cb_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9de4e21697eb1282f8dd93a32a7931cb_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2560&quot; data-rawheight=&quot;1947&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2560&quot; data-original=&quot;https://pic4.zhimg.com/v2-9de4e21697eb1282f8dd93a32a7931cb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-9de4e21697eb1282f8dd93a32a7931cb_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;比如在 rust 里，我们可以这样为一个 user 建模：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email_verified&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 User 类型的集合的取值范围，就是它内部的所有类型的笛卡尔积。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;sum type&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;笛卡尔积固然能帮助我们构建各式各样的复合类型，但它无法描述这样的场景：我们想为 User 添加一个 payment 的类型，它可以是信用卡，现金，微信，以及 ABT 其中的一种。自然，我们可以这样描述：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Creditcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wechat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这样的类型并不完备 —— 如果用户选择了信用卡，那么需要信用卡号，过期时间，持卡人等信息，而选择 ABT，则需要钱包地址及其公钥。这该怎么办？我们需要类似于这样的类型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;n&quot;&gt;Creditcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreditcardType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WalletType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在集合论中，这被称作 disjoint union（不相交集），表述为 A + B。 如图：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a307eefe209832b7da86e60f5eb7cc23_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1920&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-a307eefe209832b7da86e60f5eb7cc23_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a307eefe209832b7da86e60f5eb7cc23_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1920&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/v2-a307eefe209832b7da86e60f5eb7cc23_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a307eefe209832b7da86e60f5eb7cc23_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;不相交集在数据类型中往往被称作 tagged union (C++) 或者 sum type (haskell, rust)，和 product type 相反的是，大部分编程语言没有 sum type。我们看 rust 是如何使用 sum type 来解决上面的问题的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreditcardInfo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expiration&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;chrono&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;NaiveDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WalletType&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreditcardType&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Creditcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreditcardInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wechat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WalletType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sum type 的美妙之处是它解决了类型系统中基本类型和复合类型潜在的不够严谨的问题，比如说这样一个函数：&lt;/p&gt;&lt;p&gt;&lt;b&gt; href=&amp;#34;&amp;#34;&amp;gt;fn div(x: f64, y: f64) -&amp;amp;gt; f64 { x / y }&lt;/b&gt;&lt;/p&gt;&lt;p&gt;从 type signature 上看，似乎没有问题，但在实现层面上，我们很快发现 &lt;code&gt;x / y&lt;/code&gt; 有约束条件：y 不能是 0。我们要么设计一种新的数据类型 non_zero_f64 把零从中排除出去（这在大多数语言里都很困难），从输入的角度让这个函数的 type signature 完备；要么让返回的结果是一种特殊的类型，它可能是 f64，可能为空。&lt;/p&gt;&lt;p&gt;由于大多数语言不支持 sum type，这种情况就只好用两种方式来解决：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;函数的返回值可能是 f64，可能是 null。如果一门语言不支持异常，那么就只好检查一下输入，当为 0 时返回 null。&lt;/li&gt;&lt;li&gt;函数的返回值依旧是 f64，但除零的时候会抛出异常。对于支持异常的语言，除了上一种方式，我们还可以抛出异常。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;第一种方式损害了类型的完备性，因为 type signature 不再有权威 —— 调用者不敢肯定自己一定会拿回一个 f64，所以只好也做相应的条件判断，把这种对于类型的泄露一层层传递出去。第二种方式也是对类型完备性的一种损伤，因为调用者需要知道并且选择处理或者不处理那些「意外」。因为意外不是返回类型的一部分，所以，额外的逻辑是必不可少的。&lt;/p&gt;&lt;p&gt;上面 div 函数的问题只是冰山的一角。我们除了学习写代码和写 PoC 的代码外，其余的时刻都不可能只为 happy ending 写代码，毕竟我们面对的不是童话世界。错误和意外几乎伴随着任何一次互动 —— 和 IO 的互动，和类库（别人的代码）的互动，和系统调用的互动等。Scott Wlaschin 在他著名的 Railway Oriented Programming 里把一个又一个这样的情况拎出来寻求解决之道，而 sum type，就是最佳的选择。&lt;/p&gt;&lt;p&gt;在 Rust 里，我们有类似于 Maybe Monad 的 Option：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于上面的函数，我们可以用 &lt;code&gt;Option&amp;lt;f64&amp;gt;&lt;/code&gt; 来完善其 type signature:&lt;/p&gt;&lt;p&gt;href=&amp;#34;&amp;#34;&amp;gt;fn div(x: f64, y: f64) -&amp;gt; Option&amp;lt;f64&amp;gt;;&lt;/p&gt;&lt;p&gt;当 y 为零，返回 None；不为零，返回 Some(x / y)。表面上看它似乎和上面第一种方式没有区别，但一个形式化完备的类型让很多事情变成了可能。这个函数可以被 pipe，被 compose，调用者不必担心类型的泄露 —— 所有信息都已经在 type signature 里面了，编译器可以做更合适更严格的检查，也可以适当优化 —— 更重要的是，围绕着这个类型，我们可以把一堆原本不断出现在用户代码中的对结果判断的 if else / try catch 抽象出来，成为 Option 类型的一组 behavior，这样让用户代码变得清晰。&lt;/p&gt;&lt;p&gt;同样的思路，在 Rust 里，exception 被抛弃，取而代之的是是 Result，也是一个 sum type:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和 IO 的互动，和别人家的代码的互动，大家都可以通过 Result 来完成。围绕着 Result，也有一组标准的 behavior 和宏，处理其结果。&lt;/p&gt;&lt;p&gt;围绕着编程语言是否需要 exception，exception 是良药还是毒药，有诸多争议，java / python 是建制派，C++ / haskell 是骑墙派，rust / go 是反对派，erlang / elixir 是无政府主义者，这里便不展开。你问我支持谁？我喜欢尤达大师对卢克说的那句经典台词：do or do not, there’s no try。这句话也蕴含了 erlang 的哲理：let it crash。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;generics type&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Generics type，或者说泛型，是让人又爱又恨的类型。它简化了代码，提升了抽象程度，但程序员为之付出的代价是陡升的学习曲线。抛开泛型的好坏不提，我们先看看泛型的数学意义是什么。还是以 Option 类型来说事：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;T 代表任意类型，Option 是 T 映射到这个 enum 的结果。所以换个角度，我们可以认为泛型是作用在类型上的一种特殊的函数，它接受一种或者多种类型，返回一种新的类型。我们知道，编译器在处理具体的数据时会将泛型展开，比如说 &lt;code&gt;Option&amp;lt;u8&amp;gt;&lt;/code&gt; 展开后就是：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种展开可以无限制延伸下去，但彼此又并不想交，就好像 sum type：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VectorU8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VectorU16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个结果就很有意思了。我们知道 sum type 的数学意义是类型之和，我们把 primitive type 记作 X，那么这里就有 n 个 X，&lt;code&gt;Vector&amp;lt;T&amp;gt;&lt;/code&gt; 可以是 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 的一种类型，因而 &lt;code&gt;Vector&amp;lt;T&amp;gt;&lt;/code&gt; 可以展开成 nX，类似 &lt;code&gt;Vector&amp;lt;T&amp;gt;&lt;/code&gt; 这样的类型也有 n 个，那么到现在为止展开的 Options 可以记作 nX + n _ nX，同理 HashMap&amp;lt;T, E&amp;gt; 是 n _ nX，而 n 个类似 HashMap&amp;lt;T, E&amp;gt; 展开的选项为 n _ n _ nX，以此类推我们可以得出泛型代表着：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;n + n^2 + n^3 + n^4 + ....&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;种数据类型的集合。这是一个等比级数，其结果是 &lt;code&gt;n(1 - n^n) / (1 - n)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;以上。&lt;br/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;我们 ArcBlock 还在招募 iOS 工程师和后端工程师，如果你对技术有热情，欢迎发送简历给我，tyr at &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//arcblock.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;arcblock.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;。想了解更多关于 ArcBlock 和区块链的信息，可以戳：&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828178%26idx%3D1%26sn%3Dc5d0120098f2e51f12b16a05af4bd18b%26chksm%3D8704a94eb0732058916b6b04c20611bb5dd7fda3bf4bb0ff91ac14fc595f8ba5fd2ed79a5ba7%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ArcBlock 一周年&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828161%26idx%3D1%26sn%3Dba80c0212ecdd4e23c16263fb1cb8bb1%26chksm%3D8704a95db073204b3947117d1ea77d4ceb6650c0ae9279f0ce45fb2b706e7534e62847d42810%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ABT network 部署记&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828088%26idx%3D1%26sn%3D3fd4d3c48dde5aaf6c0d70848d945af0%26chksm%3D8704a8e4b07321f21a73393a16a874d0f5c3cb9deae88f611a6af15e39ac55b3a1aff593c33a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在程序中时间旅行&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828078%26idx%3D1%26sn%3D5a16285e2cd2253be306e14229e58254%26chksm%3D8704a8f2b07321e48b60aba5b07a3b065564efeb4f9a9113183691c2684d0c8c2090fc0da04b%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;区块链和数据库：致虚极，守静笃&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-06-15-69223872</guid>
<pubDate>Sat, 15 Jun 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>至暗时刻</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-05-23-66802111.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/66802111&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-93c4c58400414fb678288e0b4375a200_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;那美克星上，悟空在经历了游走生死边缘的地狱般严苛的训练后，终于以二十倍界王拳的力量直面弗利萨。然而，实力差距过分悬殊，悟空唯有兵行险着 —— 集全部力量于一体，发出了超级龟波气功。这几乎是他最后的希望。可惜，全力一搏并没有什么效果，反而狠狠激怒了弗利萨。力量耗尽，悟空几乎动弹不得，像一只待宰的羔羊：那是他的至暗时刻，甚至是整部《龙珠》的至暗时刻。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8ddb75c356314c6249b10c3c13b586ff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;397&quot; data-rawheight=&quot;370&quot; class=&quot;content_image&quot; width=&quot;397&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8ddb75c356314c6249b10c3c13b586ff_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;397&quot; data-rawheight=&quot;370&quot; class=&quot;content_image lazy&quot; width=&quot;397&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8ddb75c356314c6249b10c3c13b586ff_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;同样的情形，贝吉塔在不久前才遭遇过：高傲的赛亚人王子携死而复生后倍增的战斗力，信心爆棚。然而在和弗利萨缠斗一番后，他绝望地发现自己的力量相对于弗利萨的力量而言，就像江河之于大海。什么都完了，希望就像一只五彩缤纷的肥皂泡，嘭的一下在眼前破灭 —— 他那被恐惧牢牢占据的脑子里，只剩下一个悲哀的叹号。所以贝吉塔之后没有任何抵抗，呆若木鸡，任凭对方将自己肆意蹂躏践踏。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-5d2fc7d5755e2db3d957d1f6fe56d1aa_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;298&quot; data-rawheight=&quot;169&quot; class=&quot;content_image&quot; width=&quot;298&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-5d2fc7d5755e2db3d957d1f6fe56d1aa_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;298&quot; data-rawheight=&quot;169&quot; class=&quot;content_image lazy&quot; width=&quot;298&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-5d2fc7d5755e2db3d957d1f6fe56d1aa_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;好在悟空不是贝吉塔。面对让人窒息的黑暗，贝吉塔（以及大部分人）的勇气是一瞬间的闪念，而悟空是一辈子的执念。不管面对多么强大的敌人，他的心境还是第一次面对他那意欲消灭地球的哥哥拉提兹时一样：有点害怕，却又莫名兴奋。对悟空来说，&lt;b&gt;一个人可以被毁灭，但不能被打败&lt;/b&gt;。放弃从来不在他的字典中 —— 他用残存的一点点力量，勉力忍受着弗利萨一波又一波的打击，只求集中精神收集够那美克星和附近的星星上的元气，做最后的努力。最终，在界王看来足以毁灭这颗行星的元气弹制作完成，并成功击中弗利萨。尽管结局依旧惨烈 —— 几乎是全宇宙最后一丝希望的元气弹也未能击败弗利萨，但如果没有这份坚韧，悟空便无法熬到让人热血沸腾的，可能是《龙珠》里最高光的时刻：变身成为 &lt;b&gt;超级赛亚人&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;（二）&lt;/p&gt;&lt;p&gt;《指环王》三部曲里，有很多动人的时刻 —— 弗罗多和山姆登上摩多的坚毅果敢，阿拉贡对骷髅军团的谨守诺言，甘道夫大战炎魔后的起死回生。但最令我难忘的是圣盔谷内外一整夜的血腥鏖战。人族和精灵族一道浴血奋战，殚精竭虑，依然扛不住数万半兽人大军的前赴后继。外城破了，随后瓮城失守，接着内城也毫无悬念地被肆虐。城里幸存的老弱病残，拿得动武器的男子被分配了各式各样的，大多甚至不能称之为兵器的武器，瑟瑟发抖中准备最后的抵抗；而妇孺们在绝望地抽泣。宫殿内的诸位主角们，整饬好了盔甲，舒缓一下战斗了一整夜的筋骨，跨上战马，犹如《亮剑》里的骑兵连孙连长，悲壮地准备最后的，飞蛾扑火般的冲刺 —— 那是中土世界正义一方的至暗时刻。&lt;/p&gt;&lt;p&gt;在那一刻，谁也不知道，「希望」，是个什么东西。&lt;/p&gt;&lt;p&gt;直到 —— 承诺过「五天后第一缕阳光初现时回来」的甘道夫如期而至，身后是三千曾经被放逐的洛汗精骑。终于，光明刺穿黑暗；终于，白衣骑士们如潮水般冲垮半兽人大军。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ece8a9ef49150ab357c63968b4e5e16b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2548&quot; data-rawheight=&quot;1040&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2548&quot; data-original=&quot;https://pic4.zhimg.com/v2-ece8a9ef49150ab357c63968b4e5e16b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ece8a9ef49150ab357c63968b4e5e16b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2548&quot; data-rawheight=&quot;1040&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2548&quot; data-original=&quot;https://pic4.zhimg.com/v2-ece8a9ef49150ab357c63968b4e5e16b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-ece8a9ef49150ab357c63968b4e5e16b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;（三）&lt;/p&gt;&lt;blockquote&gt;文王拘而演《周易》；仲尼厄而作《春秋》；屈原放逐，乃赋《离骚》；左丘失明，厥有《国语》；孙子膑脚，《兵法》修列；不韦迁蜀，世传《吕览》；韩非囚秦，《说难》《孤愤》。&lt;br/&gt;&lt;br/&gt;—— 司马迁《报任安书》&lt;/blockquote&gt;&lt;p&gt;为李陵辩护而惨遭宫刑，自己的老朋友因为巫蛊之祸被判腰斩，向他求援他却无能为力。这是司马迁的至暗时刻。为了回复任安老友的请求，阐述他见死不救的苦衷，司马迁写下了这封情怀慷慨，跌宕奇伟，冠绝古今的书信。其中，他罗列了一堆先贤们的典故来阐述自己的心志：人固有一死，命运如此作贱，自己还隐忍苟活，是为了「&lt;b&gt;将以有为也&lt;/b&gt;」。&lt;/p&gt;&lt;p&gt;将以有为。老俞说「从绝望中寻找希望」，大抵是这个意思。而《至暗时刻》的主人公丘吉尔便深谙此道。&lt;/p&gt;&lt;p&gt;《至暗时刻》这部电影让我印象最深刻的是丘吉尔在地铁里和伦敦的居民们聊天的那个桥段 —— 虽然，大概率这是影视作品的虚构。丘吉尔对着嘴上满满 “confidence” 心头却七上八下的群众们说：&lt;b&gt;Lost causes… Lost causes are the only ones worth fighting for.&lt;/b&gt; 翻译过来就是：（面对纳粹的铁骑）有人说我们会注定失败。但 &lt;b&gt;注定失败才值得放手一搏&lt;/b&gt;。相比于那著名的 we shall never surrender 的下院演讲，这个片段更令人动容：这是镁光灯外，一个老人的掏心窝子的肺腑之言。&lt;/p&gt;&lt;p&gt;嗯，注定失败才值得放手一搏。等死，死国可乎？&lt;/p&gt;&lt;p&gt;最近有一个另一个老人以及他一手打造的伟大公司也在经历至暗时刻。人生七十古来稀，他却在此等高龄之际因为政治的原因先是爱女被拘，随后公司被「莫须有」地放进了黑名单，真真是前路茫茫，举步维艰 —— 欲渡黄河冰塞川，将登太行雪满山。面对激动的网民，唯恐天下不乱的媒体，老人冷静客观，心胸宽广，却又意志坚定，让人动容。他的这份平和的自信，让我相信，他和他的家人，他的公司能够熬过这至暗时刻，破茧成蝶，最终扶摇直上九万里。&lt;/p&gt;&lt;p&gt;和他相比，我们那微渺的「至暗时刻」又算得了什么呢？&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;谨以此文献给那些经历过，正在经历，或者未来将要经历至暗时刻的朋友们。pain is inevitable, suffering is optional。没有过不去的坎儿。&lt;/p&gt;&lt;p&gt;关于地铁里的对话，有条件上油管的可以看这个：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//youtu.be/Ts8WRHAQvk4%3Ft%3D41&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;youtu.be/Ts8WRHAQvk4?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;t=41&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;。嫌长的可以直接跳到 41s 处。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-05-23-66802111</guid>
<pubDate>Thu, 23 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>先知的选择</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-05-23-66801008.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/66801008&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-14bd4a4ef3213c6e34b7e09ff6b47188_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;五月十二日的公众号文章。忘记放在专栏了。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;Oracle，不单是甲骨文，它还有先知的意思。在 Matrix 里，当 Neo 第一次见到先知，想确认自己是不是救世主 (the one) 时，先知并没有直接回答他的问题，而是抛给他一个新的问题：Morpheus 深信你是救世主，所以会赌上性命为了救你而牺牲，而无情的现实是你和 Morpheus 只有一个人能活下来，你该怎么选择？&lt;/p&gt;&lt;p&gt;Matrix 2 里，Neo 再一次找到先知来解决自己该做何种选择的困惑，先知却笃定：你不是来做选择的，你已经做出了选择；你来是为了了解，你为何这么选择。&lt;/p&gt;&lt;p&gt;在先知一次又一次的引导下，Neo 做了一次又一次选择。这些选择最终将 Neo 一步步引向救世主。因而当 Neo 排除万难，见到造物主时，他幡然醒悟：choice, the problem is choice!&lt;/p&gt;&lt;p&gt;选择似乎是我们生命中无可避免的事情 —— 每天从睁眼的那一刻起，我们就在不停地面临选择和做出选择，有些容易（去哪吃饭），有些艰难（要不要换工作），有些是倾尽一生的选择（选择自己的另一半，要几个孩子等）。&lt;/p&gt;&lt;p&gt;我的大女儿，聪慧绝伦，却常常纠结于如何选择。我们刻意用各种方式训练她做出自己的选择 —— 比如说，妈妈给她买个包作为礼物，同一款式不同花色，她喜欢的花色要比她并不那么喜欢的贵十元。如果她选便宜的，妈妈就全额帮她付讫；否则，她需要自己支付额外的十元 —— 这意味着，她小小的债务会继续累加。小丫头在商场里痛苦撕号让人于心不忍，但我们知道，这是让她成长的绝佳机会 —— 她必须学会鱼和熊掌不可兼得 —— 就像《星际穿越》里 Cooper 在摆脱黑洞的关键时刻做出选择时戏谑的：Newton’s third law. You got to leave something behind。&lt;/p&gt;&lt;p&gt;作为事后诸葛亮，我可以这么说，曾经的 “先知” Oracle 在 cloud computing 时代到来之际，在互联网公司纷纷去 IOE (IBM / Oracle / EMC) 化时，在 Amazon 用 DynamoDB，Aurora，Redshift 疯狂圈地之际，患得患失，并没有正确选择。如果你看看微软变革 windows 的坚决，拥抱 cloud computing 的果断，你就会为 Oracle 畏手畏脚，在 licensing 和 cloud computing 两边下注的优柔寡断而惋惜不已。&lt;/p&gt;&lt;p&gt;与之同病相怜的是即将被裁的上千名 Oracle 中国的工程师。裁员这事一个月前媒体已经放出风来，连我这种不太凑热闹的人，都赶了个场谈：&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828168%26idx%3D1%26sn%3D9cf299a6a9ad33d5ad169dbbd4fb6dd9%26chksm%3D8704a954b073204230a37c7ba07025f2266785f0e7079c58cfded57316b7269b9bb791ec6cbe%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Oracle  裁员，与其哀怨，不若放下&lt;/a&gt;。但是身在其中的人还是会心怀侥幸，甚至，更多地是不甘 —— 主动离开，万一 Oracle 中国随后裁员，拿不到离职补偿啊！当暴风真正来临的时候，当丰厚的离职补偿（据说是 N+6，N 是符合劳动法的 N，6 是员工实际工资）摆在桌上的时候，同一批人还是会心有不甘：N 为什么不是实际工资的 N 倍，我的马上到期的期权，RSU 怎么办？我再也找不到那么好的福利待遇了，怎么办？&lt;/p&gt;&lt;p&gt;这世界往往就是这么残酷，可是在残酷中不断选择，是成长的必经之路：&lt;/p&gt;&lt;p&gt;Ray Dalio 在回顾他的人生时说：&lt;/p&gt;&lt;blockquote&gt;Looking back on my own journey, I now see that time is like a river that carries us forward into encounters with reality that require us to make decisions. We can’t stop our movement down this river, and we can’t avoid the encounters. We can only approach them in the best possible way.&lt;/blockquote&gt;&lt;p&gt;其实看看 Oracle 美国给出的卑微的补偿和无情的做法：&lt;/p&gt;&lt;blockquote&gt;I spent 20 years with Sun/Oracle. When the hammer came down they called all engineering staff into the board room and we were told at 9:05 am. “Your jobs as you know then no longer exist”. We were then given our paperwork. &lt;br/&gt;Told to be at an hr appointment with someone we didn’t know and told of our payout. Most of us had spent 20+++ years there and where just about to enter retirement. I’m 60. Oh and they hired 4 people in India to replace every one of us at a fraction of the cost.&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.thelayoff.com/t/YfnpR8c&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;thelayoff.com/t/YfnpR8c&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Oracle 中国已经算得上良心 —— 当然站在被裁者的立场上，再良心也是丧尽天良。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;再多的补偿，再好的 package 可以补得了一时，能补得了一世么？失望，惊讶以及愤怒之余，真得该好好思考一下，下一步该怎么选。毕竟三十多岁，人生才启动了三分之一。&lt;/p&gt;&lt;p&gt;乌龟大师在阿宝彷徨无措不知道是走是留的时候说：quit. don’t quit. noodles. don’t noodles. you’re too concerned with what was and what would be. There’s a saying - yesterday is a history, tomorrow is a mystery, but today is a gift, that is why it is called present.&lt;/p&gt;&lt;p&gt;别拉横幅了，该翻篇了，人生又不是只有一次 &lt;b&gt;危机&lt;/b&gt;。上次 Adobe 大裁员时，朋友圈还对拉横幅的满是同情，现在，一水的谴责。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;随笔一篇。对工作和职业生涯迷茫的同学请戳：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828034%26idx%3D1%26sn%3D53044f7df0d285383e9ab37eed30435d%26chksm%3D8704a8deb07321c815e0a8db23a9175fe959889dcb7f291dcf2522be81e32cc863f402cab82c%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;银河系跳槽指南&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827812%26idx%3D1%26sn%3D8b2389d4c7221cb439ab0e705dd6e8e9%26chksm%3D8704abf8b07322eee8aecb3bd6ad6f71f2673072feb0ed5b6f2f2fee97f0b0d11411526cc8ef%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;程序员的好日子什么时候才到头？&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827713%26idx%3D2%26sn%3Dd744af9c02ebac9bfb1fd2114c5cc6a5%26chksm%3D8704ab9db073228bb3403f8b750e0d25946130c053bf09f5ff1569c91e23a1312f02bc502e78%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;如何选择工作&lt;/a&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-05-23-66801008</guid>
<pubDate>Thu, 23 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>ArcBlock 一周年</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-05-05-64684140.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/64684140&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1a42c3c91ff6356c60675e7f2190fea5_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;（一）&lt;/p&gt;&lt;blockquote&gt;这是我开过的最艰难的一次长途了。从家到 springfield（中转站）570 英里，我早上 8:30 出发，下午 4:50 到。进入 Oregon 之后，天就跟漏了似的，一路时断时续的暴雨，有的山路已经形成洪流，车驶过的时候，轮胎被水流带着，方向盘都有些不听使唤。好在一路车少，有惊无险。 - 程序君 04/28/2018&lt;/blockquote&gt;&lt;p&gt;岁月如梭，光阴似箭，湾区的生活似乎就在昨天，而我成为华州的居民已经一年零一天了。这一年过得跌宕起伏，就像我只身驱车前往华州的旅途一样，前半程傲睨自若，势如破竹；后半程战战兢兢，如履薄冰。好在，最后一切安然。&lt;/p&gt;&lt;p&gt;三月份回湾区参加 Code BEAM 大会，重回 Tubi，见了很多老朋友。Tubi 一片欣欣向荣，全方位不断刷新自己的记录 —— 17 年底搬入的新办公室，仅仅一年多时光，便已已经捉襟见肘，整层楼明显超载；而北京办公室那边，更是不得了，趁着国内互联网公司一片哀嚎从高大上的 Wework 纷纷撤离之际又扩充了大片工位。我跟 haofei 调侃，Tubi 赶紧上市，我好在 Bellevue 买套房，结束租房生涯。回到家跟老婆聊种种往事，老婆打趣，从 Tubi 离开，你后悔过么？我笑笑，不后悔啊，虽然整个加密货币市场一地鸡毛，但是我们离一年前的初心，已经无比接近了。&lt;/p&gt;&lt;p&gt;是的，无比接近。&lt;/p&gt;&lt;p&gt;去年这个时候，我踌躇满志地写下了《&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827999%26idx%3D1%26sn%3D5374d71f1baa677ffe6805d36fac2af0%26chksm%3D8704a883b07321953c6e713bb86a08ca546a18f661522bbbf89a8832fbdb897f82babdc7a11e%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;欢迎来到区块链的世界&lt;/a&gt;》，其中谈到了 ArcBlock 看到的机会：&lt;/p&gt;&lt;blockquote&gt;第一个方向，是围绕着数字资产的持有者和创造者的产品和应用 —— 已有的大饼如何切。有以下机遇：&lt;br/&gt;1. cryptocurrency 交易所。这目前是属于币安们的舞台，很快也会迎来纳斯达克等传统交易所。也许未来 DEX（去中心化交易所）会成为重要甚至主要的力量。&lt;br/&gt;2. 数字投行。谁来做区块链时代的高盛？摩根斯坦利？&lt;br/&gt;3. 数字投资。如果把 token 看做资产，那么，谁是区块链时代的富达，桥水？谁来帮用户管理数字资产，打造合适的 cryptocurrency portfolio，让其保值和增值？&lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;币安每天 $10B 的体量，已经可以和中小国家的证券交易所匹敌，足以说明问题。而若能做成区块链时代的桥水和高盛，想想都能流口水。&lt;br/&gt;第二个方向，用区块链取代现有的解决方案。有几个机遇：&lt;br/&gt;&lt;br/&gt;1. 去中心化金融科技。Fintech 领域也许是目前除了交易所外最成熟的应用领域，如 Ripple。&lt;br/&gt;2. 反欺诈。在电商，p2p lending，crowdfunding 等方向有很多机会。&lt;br/&gt;3. 数据保全。在知识产权，证书，身份（identity），供应链，以及用户的积分体系等等都有产生高质量用户的机会。&lt;br/&gt;4. 智能合约（smart contract）和分布式应用（Dapps）。这是吵得最凶，最滥，关注点最高的领域，但目前除了以太猫（crypto kitty）外，似乎没有太多实质的应用。这个领域需要足够好的思考和最够完善的基础设施才更容易出成果。&lt;br/&gt;5. 小额支付/点对点支付。这是一个很重要的方向，目前以我有限的想象力还很难看出有什么需要用区块链取代微信支付的小额支付场景。&lt;/blockquote&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;第三个方向，打造更好的，技术更领先，更快，更容易构建应用的公链，以取代「缓慢」，「buggy」的以太坊。这个方向市场巨大，成则雄霸天下；却也是异常拥挤的红海，几乎 90% 的区块链公司都把自己定位于一个更好的公链，最终的结果是一将功成万骨枯。&lt;br/&gt;第四个方向，是围绕打破区块链只是为技术极客设计的樊篱，让这个技术有更大的普惠性 —— 如何扩展这个大饼的边界。这是 ArcBlock 看中的方向。它有以下机遇：&lt;br/&gt;&lt;br/&gt;1. 打造能够给菜场大妈使用的区块链产品（首当其冲的必然是钱包应用），让「旧时王谢堂前燕，飞入寻常百姓家」。&lt;br/&gt;2. 打造产品为第一个和第二个方向的公司服务，成为淘金者身边的李维斯。&lt;br/&gt;3. 打造产品以及构建生态，桥接 real world 和 blockchain world —— 让 app 开发者可以简单嵌入一个 SDK 或者调用一些 API，使用 blockchain 的各种能力 —— app 开发者甚至不需要知道 blockchain tech 的存在。就像 app 开发者基本上都会使用 HTTP 来承载网络上的数据，有哪个 app developer 需要读 RFC2616 / RFC7540 呢？blockchain tech 终将需要发展到这一步。&lt;br/&gt;这里面的 2 和 3，就是 ArcBlock 的机会。ArcBlock 选择这个方向，是完完全全从用户的角度出发，因为历史一再证明，要想一门有使用场景的技术进入主流市场，简单易理解体验好是起码的要求，而对用户的简单则是对开发者的难题，有时甚至是难以逾越的天堑。ArcBlock 的壁垒将是对 2 和 3 的用户的需求的深刻理解，我们内部的服务提供能力，我们的 node 快速部署的能力，我们的 Blocklet 的 auto scaling 的能力，以及我们在追求正确方向和正确道路上打造出来的创新和学习能力 —— 这些都是冰山下面的部分，是风停了之后我们依旧能够前行的能力。&lt;/blockquote&gt;&lt;p&gt;一年过去了，同行者大多已经不知所踪，而我们依旧在这条路上深耕 —— 更重要的是，我们一步步，从技术上，从产品上，从思想上对链，对应用，对用户体验有了自己独特的洞见，并且将其付诸于产品之上。我们追求的不是大一统的公链，而是万链齐发的应用链，也就是我们提出的链网的概念，因而，我们费尽心思赋予每个应用构建自己的链的能力。我逢人便说，我们的 forge framework 之于区块链，就像 Ruby on Rails 之于 Web 2.0，它终将开启潘多拉魔盒，让区块链成为每个开发者触手可及的，去打造合适的应用的工具，而非币圈先行者们用于圈钱的禁脔。&lt;/p&gt;&lt;p&gt;（二）&lt;/p&gt;&lt;p&gt;这条路并非坦途。一年前，所谓的 dapp（decentralized app）大多就是一些简单的 smart contract，而这些 dapp 的极致代表是 cryptokitties，Fomo 3D 这样出奇制胜的游戏。真正和大家工作生活息息相关的应用，一个也没有。对于 dapp，我们心心念念的是，如何提供基础平台用区块链重塑 taobao，ebay，eventbrite 这样的交易相关的应用（区块链的强项），甚至 wordpress，discuz! 这样内容相关的应用。&lt;/p&gt;&lt;p&gt;这在当时是一个没有人可以（用技术 / 产品）回答的问题。以太坊及其继任者之所以无法回答这个问题，是因为 1) 公链把全网所有的数据糅杂在一起，不但拖累应用的表现，还严重影响应用的开发测试和部署。2) 以太坊的基础设施及 smart contract 的能力，还不足以高效完成足够复杂的业务逻辑。3) 开发者体验太差。&lt;/p&gt;&lt;p&gt;当然，饭要一口口吃，路要一步步走。比特币和以太坊作为最成功的两个区块链项目，值得我们深度学习和研究。我们并未像同期绝大多数项目那样，fork 一个以太坊，改头换面，宣称是自己的项目；相反，我们走了一条艰难的路：通过打造一个跨链的中间层，我们深入比特币和以太坊的奇妙的状态世界，理解他们的运行机理，为我们自己的框架做技术储备；同时，我们运营多条链的节点，学习他们的运作方式，从开发者的角度和节点用户的角度，找出其中的痛点和产品上可以精进的地方。&lt;/p&gt;&lt;p&gt;在这个过程中，我们做了大量的准备工作，有些甚至看上去和链毫无关系。比如我们做的一个代码自动化的项目 Goldorin，可以把 yaml 格式的 schema 描述转换成 GraphQL / Database 相关的代码（见我之前的文章：&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828040%26idx%3D1%26sn%3Df92d9e17f993668b05bc1ab1c84e153b%26chksm%3D8704a8d4b07321c24ea7947680432a99d43da4f5d0c6dadd941bc244bdeef2ae3ec75fac753b%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;如何在几十个 Repo 中游刃有余？&lt;/a&gt;），它的诞生仅仅是为了提高我们 API 的开发效率，却不料后来被应用到了我们的 ABT Chain Node 上，为 protobuf 接口自动生成 GraphQL 接口立下了汗马功劳。&lt;/p&gt;&lt;p&gt;再比如说，我们在边做边学的过程中，每周有一到数次的团队内部和外部的分享，一年下来，不知不觉已经累积了一百多次分享的素材（单单是对外的分享我们就做了二十多期，见：&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.arcblock.io/zh/learning&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;arcblock.io/zh/learning&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;），内容涵盖之广，外人可能很难想象：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a933dfaa0df1a018a5382c9c7c03fa1a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3094&quot; data-rawheight=&quot;1786&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3094&quot; data-original=&quot;https://pic3.zhimg.com/v2-a933dfaa0df1a018a5382c9c7c03fa1a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a933dfaa0df1a018a5382c9c7c03fa1a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3094&quot; data-rawheight=&quot;1786&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3094&quot; data-original=&quot;https://pic3.zhimg.com/v2-a933dfaa0df1a018a5382c9c7c03fa1a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-a933dfaa0df1a018a5382c9c7c03fa1a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这就好像柳传志所说的：撒一层土，夯实，再撒一层。&lt;/p&gt;&lt;p&gt;当我们的技术储备和对区块链的理解到达一定层次后，我们也并未立即撸起袖子开干。我们在 tendermint 上做了一个 ex_abci，提供 elixir 的 ABCI 的支持。tendermint 作为一个优秀的 p2p / PBFT consensus layer，定义了一套完善的接口，把区块链的实现和 p2p / consensus 分隔开，这和我们分层处理，屏蔽细节的思路不谋而合。在 ex_abci 的基础上，我们做了一个非常原始的区块链开发框架 —— 使用以太坊的 MPT（Merkle Patricia Tree）的思路管理链上的 state，使用 protobuf 定义 state 和 transaction，用 gRPC 提供对外的 RPC 服务。框架本身只提供最基础的 transaction 支持，比如 transfer，而更加丰富的 transaction 的支持交由 dapp 来完成。因为这个框架的目标是帮助开发者 &lt;b&gt;锻造&lt;/b&gt; 他们的应用 &lt;b&gt;链&lt;/b&gt;，因而取名 Forge：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5ab4e0f25513b44c9b600de28c15da1c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1366&quot; data-rawheight=&quot;768&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1366&quot; data-original=&quot;https://pic1.zhimg.com/v2-5ab4e0f25513b44c9b600de28c15da1c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5ab4e0f25513b44c9b600de28c15da1c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1366&quot; data-rawheight=&quot;768&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1366&quot; data-original=&quot;https://pic1.zhimg.com/v2-5ab4e0f25513b44c9b600de28c15da1c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5ab4e0f25513b44c9b600de28c15da1c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;就着新鲜出炉的 Forge，我们尝试着构建了一个 PoC app —— 一个去中心化的 wordpress。我管它叫 Final Chapter。用户可以在 Final Chapter 里创建文章，endorse（顶）或者 repel（踩）一篇文章。正如你所猜到的那样，create_post / update_post / endorse / repel 都是自定义的 transaction。Final Chapter 前端使用 phoenix，后端使用 Forge，尽管仅仅是一个很原始的 PoC，但它验证了 Forge 的方向的正确性，以及其具备的无穷潜力。我们还意外地发现，巧妙使用 MPT，可以实现区块链世界的时间旅行 —— 一个用户可以在 Final Chapter 的时间轴上自由地翱翔 —— 就像《星际穿越》中，Cooper 在黑洞中进入的四维空间。。&lt;/p&gt;&lt;p&gt;于是，用户发表的文章有了自己的生命线，时间轴上经历的任何一次 update_post，都是一个不可磨灭的版本，同理，每个用户也有他们自己的，一步步迭代的版本，甚至，整个应用的全网数据，在每个 tick（一个区块产生的时间）里，都有独一无二的版本（想了解更多请参阅：&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828088%26idx%3D1%26sn%3D3fd4d3c48dde5aaf6c0d70848d945af0%26chksm%3D8704a8e4b07321f21a73393a16a874d0f5c3cb9deae88f611a6af15e39ac55b3a1aff593c33a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在程序中时间旅行&lt;/a&gt;）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0e4d539b90750f54de2fcec37aa85e65_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1400&quot; data-rawheight=&quot;1448&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1400&quot; data-original=&quot;https://pic2.zhimg.com/v2-0e4d539b90750f54de2fcec37aa85e65_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0e4d539b90750f54de2fcec37aa85e65_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1400&quot; data-rawheight=&quot;1448&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1400&quot; data-original=&quot;https://pic2.zhimg.com/v2-0e4d539b90750f54de2fcec37aa85e65_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-0e4d539b90750f54de2fcec37aa85e65_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Forge 的 PoC 看上去是可行的，接下来我们便为其提供更加丰富的功能 ——&lt;/p&gt;&lt;p&gt;为了支持丰富的钱包类型，我们开发了 Mcrypto，开发者，甚至用户可以决定她在链上使用什么类型的钱包 —— 用 Secp256k1 还是 ED25519 算法制作密钥？用 sha2，sha3 还是以太坊使用的 keccak f1600 来做哈希？&lt;/p&gt;&lt;p&gt;为了让钱包的密钥可以像账户的密码一样为了安全起见不断更新，我们提供了 account migration 的能力。这样，当你的私钥有潜在泄露的风险时，你可以使用 account migration 把旧的密钥迁移到新的密钥 —— 你的朋友们依旧可以给你的旧的钱包地址发送交易，而相关的交易会自动转向新的地址。&lt;/p&gt;&lt;p&gt;为了让节点的升级可以像普通软件的升级一样无缝，我们提供了 auto upgrade node 的能力。当 upgrade 在网络中达成共识后，所有节点会在指定的高度一起停下来，自动更新为新的版本，并重新启动。&lt;/p&gt;&lt;p&gt;为了提供足够丰富的，开发者开箱可用的 transaction，我们开发了丰富的 transaction protocol，从账户的管理到资产的创建和管理，从链上的治理到跨链的支持，从简单的交易形态到非常复杂的交易方式。举个例子，如果你要开发一个应用来销售电影票，每张电影票都是一个 none fungible 的 token（在 Forge 里，我们称之为 asset），影院的管理者可以从销售电影票的过程中获得 token，而购票者付出了 token，得到了 ticket asset。之后这个 ticket asset 作为一个凭证可以在影院入口消费。这整个流程如果用区块链解决，非常具有挑战性（想想你怎么在以太坊上搞？）。类似的场景有很多，比如签证，比如门禁，都是一个机构可以发行 asset，用户可以通过付费或者一些前置条件来获取这些 asset，并且在合适的场合消费。对此，我们提供了类似自动售货机一样的 asset factory 来解决这一类问题。&lt;/p&gt;&lt;p&gt;不仅如此，我们的 transaction protocol 还可以 hot upgrade —— 也就是说，节点不必重启，一个新版本的 protocol 就可以部署至全网。&lt;/p&gt;&lt;p&gt;最后，我们力图让这一切都尽可能简单。我们提供了 forge-cli，两三条命令就可以让开发者运行自己的节点；我们提供了多种语言的 SDK，尽可能扫清开发者开发的障碍；我们的 ABT Chain Node，提供链上数据的可视化服务，对于节点的大部分操作都可以在 web 界面中完成；为了降低开发者大规模部署链上节点以及运营成本，我们开发了 forge-deploy 脚本，可以用两条命令在数分钟左右（取决于节点的数量）在 AWS 全球大部分 region 部署大量 spot instance；对于小白用户，我们还提供了 ABT Chain Node Desktop，可以直接安装使用。&lt;/p&gt;&lt;p&gt;所有这些，都绝非易事，我们需要在和时间赛跑的同时，解决一个又一个没有先例，解空间完全未知的问题，就像出塞三千里追击匈奴的窦将军，或者历经十七载西行求法的陈玄奘，全靠一个坚定的目标和初心，以及百折不挠的坚韧，才在迷途中杀出一条路。&lt;/p&gt;&lt;p&gt;（三）&lt;/p&gt;&lt;p&gt;记得在某一期的《朗读者》里，董卿说过：我们成为什么样的人，可能不在于我们的能力，而在于我们的选择。选择是一次又一次自我重塑的过程，让我们不断成长，不断完善 —— 如果说人生是一次不断选择的旅程，那么千帆阅尽，最终留下的，是一片属于自己的独一无二的风景。&lt;/p&gt;&lt;p&gt;我发现自己似乎在面对选择时，总是做出旁人看来最艰险的决定。&lt;/p&gt;&lt;p&gt;2010 年底，我在 Juniper 顺风顺水，本可在 engineering manager 的位置上一点点向上爬到养老，不用再面对诸如「35 岁的程序员还能不能写得动代码」的问题，我却选择了搭上移动互联网的班车去创业 —— 更确切的说，我把自己的人生赛道从通讯行业切换到了互联网行业。&lt;/p&gt;&lt;p&gt;两年后创业失败，面对很多新的机会，我没有立刻进入到下一个项目，而是选择重回 Juniper，一方面为赴美工作铺垫，另一方面也是停下来反思和复盘。尽管看上去我又重新回到了通讯行业，但我清楚地知道，我的未来还在于互联网，我的下一次创业也必然在互联网而非通讯领域。于是在 Juniper 略显悠闲（和创业相比）的工作生活中，我没有选择养生，而是写书来复盘创业的过程，总结经验教训；写公众号来扩大自己的个人品牌的影响力，从而某种程度上弥补我之前创业的一个痛点：影响力不够，进而很难招到合适的人。&lt;/p&gt;&lt;p&gt;2014 年底到了美国之后，面对更加悠闲的美国大公司养老式工作，我每天不到 7 点左右就奔赴公司，七小时工作之余（别笑，我觉得大部分老美每天能正儿八经工作五小时就不错了），我硬生生挤出来差不多另外七个小时去探索各种领域；没过多久，我便主动要求调到旧金山的 web security 的团队，尽管从汇报级别上来看，我从汇报给 Sr. Director，变成汇报给 Sr. Manager，很不符合常理，但 web security 贴近我中意的互联网。&lt;/p&gt;&lt;p&gt;2015 年底，Tubi 的机会出现，尽管降薪（不算 option，因为那时 Tubi 的 option 还几乎没有任何价值），并且放弃大量的 RSU，在扫清身份的障碍后，我还是义无反顾地加入了 Tubi。互联网，创业公司，已经验证过的商业模式，糟糕的工程能力，使得当时的 Tubi 对我来说，是天赐良缘（见我的文章：《&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D400531816%26idx%3D1%26sn%3D029b1ef56ebd3ad7fdaa643913ba2513%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;缘分天注定&lt;/a&gt;》），是桑德伯格口中的 rocket ship —— 我一直很青睐桑德伯格的那句话：If you’re offered a seat on a rocket ship, don’t ask what seat. Just get on。&lt;/p&gt;&lt;p&gt;去年，同样的剧本发生 —— 经历了一番对未来趋势的详细研究，我深深地感到自己未来的赛道在于区块链，或者说，区块链背后的 web 3.0。于是，便有了我的 ArcBlock 一周年，以及这篇文章。&lt;/p&gt;&lt;p&gt;我不知道在另一个平行宇宙的自己，在每次面临人生的十字路口时，都放弃那条「少有人走的路」，而选择理性的 SWOT 分析下来更「正确」的路，将会是什么样。但肯定不会像我这样，以三十七岁高龄（在程序员的世界里，这已经算得上耆耆之年了），每天还花费五六个小时伏案疾书，写就千八百行代码。&lt;/p&gt;&lt;p&gt;当然不可避免的，也会少了很多很多可以给儿孙们讲睡前故事的素材。&lt;/p&gt;&lt;hr/&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;打个广告，我们的北京团队在招资深前端工程师，要求具备良好的 react 开发经验，对区块链技术感兴趣，能够快速学习。有意者请将简历发至：career at &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//arcblock.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;arcblock.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;，标题注明你的名字，想申请的职位，以及来自程序人生（e.g. subject: 李雷 - 前端工程师 - 程序人生）。我们会优先处理。&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;另外，北京时间下周三中午 1:00 我会详细介绍和演示用 Forge SDK 创建区块链应用，欢迎大家参与，报名请戳：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-47fc40cd8dbd09a4aec5c12212044d8c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;300&quot; class=&quot;content_image&quot; width=&quot;300&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-47fc40cd8dbd09a4aec5c12212044d8c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;300&quot; class=&quot;content_image lazy&quot; width=&quot;300&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-47fc40cd8dbd09a4aec5c12212044d8c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-05-05-64684140</guid>
<pubDate>Sun, 05 May 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>2018：春来秋去，往事知何处（上）</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-01-18-55222322.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55222322&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f90fba54ab210f596c2afc24a10d2ae0_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;去年 12 月的某个夜晚，在部署服务的无聊时光里，我突然想翻看自己一年来的朋友圈，看看有哪些有趣的事情。结果那夜一发不可收拾，扫了半年的朋友圈，一直读到凌晨三点半还意犹未尽（毕竟五点半就要起床了，觉还是要象征性地睡一下）。我把一些有意思的内容摘录了下来，没事的时候，就补两句评语，就像在跟去年的自己对话 —— 这可能也算程序员级宅男的恶趣味了。&lt;/p&gt;&lt;p&gt;过去的一年，尤其是刚刚过去的十二月，我那不叫忙，那叫相当的忙。忙到上厕所都精确控制次数，走路都是 Dijkstra 算法。有诗为证，啊不对，有图为证：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-de9759fb3c8036930266e651114d83dc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;564&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-de9759fb3c8036930266e651114d83dc_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-de9759fb3c8036930266e651114d83dc_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;564&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic1.zhimg.com/v2-de9759fb3c8036930266e651114d83dc_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-de9759fb3c8036930266e651114d83dc_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-49b352aa89e766577a3c37025306e432_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;780&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic3.zhimg.com/v2-49b352aa89e766577a3c37025306e432_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-49b352aa89e766577a3c37025306e432_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;780&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic3.zhimg.com/v2-49b352aa89e766577a3c37025306e432_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-49b352aa89e766577a3c37025306e432_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;希望熬过了 Q1，一切都会好起来。&lt;/p&gt;&lt;p&gt;下面是一些零零散散的碎碎念，大家感兴趣可以扫一扫。今年就不做去年的文章的大串烧了。如果感觉这样的内容有意思，我会把下半年的碎碎念也放上来。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/04&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;在北航群里一直潜水，才看到这篇文章，署名支持罗茜茜学姐！&lt;/blockquote&gt;&lt;p&gt;这是对《&lt;b&gt;请别辜负我们的勇气和期待&lt;/b&gt;》的回应。可惜，原文 404 了。。。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/10&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;过去一年数据，收入，品牌都突飞猛进！&lt;/blockquote&gt;&lt;p&gt;转发 Fobes 的文章：“&lt;b&gt;With $35M Investments, Tubi TV has established iteself as a leading free streaming service&lt;/b&gt;”。朋友圈纷纷发来贺电：苟富贵无相忘。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/12&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;九百人抽九十个名额，好学校大家都挤破头皮。抽上了就让小宝上这家公立学校。&lt;/blockquote&gt;&lt;p&gt;之前小宝上湾区穷人版私校 Stratford，今年尝试抽签加州前十的 Murdock-Portal 小学，当时觉得肯定抽不上。。。结果抽到了，然后，上了一个多月，转学来了华州。人生就是这样&lt;b&gt;跌宕起伏&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/14&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;2018 第一篇，迟到了半个月。&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827875%26idx%3D1%26sn%3D521cf6157084541573f837b05ff7b0e0%26chksm%3D8704a83fb07321299c3dc5e6afea71e92dc6284aa5c7a6201d35a4e09bae9d7d960beef608d4%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2017，程序人生大串烧&lt;/a&gt;。感兴趣的可以戳。净是好文章。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/20&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天在 Stanford 上了一整天课，好充实，好有收获。最让我意外的是，二十多个学生，从二十出头的小妹妹到七十来岁的老爷爷老奶奶，年龄跨度非常大。美国人这种对 life learning 的态度，值得我们学习。&lt;/blockquote&gt;&lt;p&gt;2018 年的新年愿望之一是成为湾区两大学府 Stanford 和 Berkeley 的学生。于是我在 Stanford 学了写作（拿了一个学分），在 Berkeley 学了统计（出差没参加考试，没拿到学分，555）。很幸运的是，我在年初就立刻行动，没有拖到年末 —— 当时并没有意料到自己突然就移居西雅图了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/22&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;朋友来湾区介绍 blockchain 以及他的创业公司 ArcBlock，对 blockchain 感兴趣的小伙伴赶紧报名吧，我也会去。&lt;/blockquote&gt;&lt;p&gt;嗯，「朋友」就是老冒，「我也会去」一语成真（注意不是一语成谶 ^_^）。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/23&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;Code Beam 竟然把我跟两个大佬 Robert Virding 和 Joe Armstrong 放在一起，我该用什么头像呢？&lt;/blockquote&gt;&lt;p&gt;三月份我的 talk 被 Code Beam 选中。于是我有了第一次用英文对外公开演讲的机会。这也是我 2018 新年愿望之一。原始的愿望是：12 场公开演讲，4 场英文，8 场中文。这个目标中文的我已经达成，英文的还差一场。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/27&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;小七是小宝的最爱，我本说腾讯体育搞个这么让人尴尬癌都犯了的花瓶有啥意思，结果人家年轻人就是喜欢。。。之前的比赛小宝全都希望勇士赢，因为是家附近的球队。但今天她坚定地站在了凯尔特人这边，很简单。。。这队球衣是绿色的。。。&lt;/blockquote&gt;&lt;p&gt;到了西雅图，我还是坚定地支持库里和他的勇士 —— 因为我喜欢那种「&lt;b&gt;生活纵使千辛万苦，也可以苦中求乐&lt;/b&gt;」的感觉。不过，现在几乎没时间看球了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/28&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;二十冠！我牛威武！世界第一近在咫尺，职业生涯暮年继续传奇！真希望他不要心愿达成就早早挂拍，再多打几年。&lt;/blockquote&gt;&lt;p&gt;作为同时代的人，老牛就是我的&lt;b&gt;灯塔&lt;/b&gt;。以前对他的失利总是耿耿于怀，澳网之后只要他还在打球，哪怕输给我，我也不会苛责。&lt;/p&gt;&lt;blockquote&gt;参加完活动，跟朋友喝咖啡期间，发篇文章。&lt;/blockquote&gt;&lt;p&gt;这里「朋友」还是老冒。哈哈。发的文章是：《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827885%26idx%3D1%26sn%3D619120f508c2750c9b7bdd7da69182e4%26chksm%3D8704a831b0732127bad66cdbf0eb55f46a3071d458581a4ac191ae522b67a5dd24428664e5f6%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;当我谈 scheduling 时我在谈什么？&lt;/a&gt;》，端的是好文章！有时候我都为自己感到羞愧 —— 别人的文章都是越写越好，我的怎么。。。每一篇都辣么好呢。。。有朋友留言说：有空写篇 k8s scheduler，我说，好，有空的。我没有食言。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/30&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;系列文章之二。这个月旬更目标达成！真不容易！&lt;/blockquote&gt;&lt;p&gt;这是《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827890%26idx%3D1%26sn%3Dad5ca96ccf61550a12d456aea441de86%26chksm%3D8704a82eb0732138f2cf964473c3a29f7545060f905871d3c44f57b260c8c19ef478b5800d3e%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;谈谈调度 - Linux O(1)&lt;/a&gt;》。bitarray + priority queue，有同学说第一次看到时兴奋地合不拢嘴。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;01/31&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;晚上在 Berkeley Extension 上完课回家，刚出旧金山高速，就堵得一塌糊涂。走走停停二十分钟后，发现惨烈的车祸现场 —— 警察封路，救护车，消防车，警车集体开趴。&lt;/blockquote&gt;&lt;p&gt;Ray Dalio 在他的最新的 Principles 动画短片中说 Five-step process，其中第一步就是 Goal。有一个明确的目标生活真的是&lt;b&gt;截然不同&lt;/b&gt; —— 在 Berkeley 上课的期间，每周三晚 6:30 - 10:00 我都要赶去 Google SF 办公室附近的 Berkeley Extension 听一个德国老爷爷讲 Statistics，老爷爷时不时拖堂到 10:30。上完课步行十分钟到附近的车库取车，然后开回家，经常就 11:30 了，然后我第二天早上还要 5 点半起来，赶 6:07 的 Caltrain。这天，101 上的车祸让我在晚上 23:07 时还堵在路上，到家已经是 12 左右了 —— 然而，整个上课（大约 10 周）的过程我非常享受，并没有觉得很累。&lt;/p&gt;&lt;p&gt;所以，要想过不一样的生活，&lt;b&gt;没事找事很重要&lt;/b&gt;。就像小布什悼念老布什说的：&lt;b&gt;die young as late as possible&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/01&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;程苓峰的反思。人以修身为本，才有可能齐家治国。我们这些活着的人，要从这上面学会教训。&lt;/blockquote&gt;&lt;p&gt;转发《&lt;b&gt;一个记者对一个亡者的交代&lt;/b&gt;》。程通过《&lt;b&gt;生于 80 年代&lt;/b&gt;》引爆了「80后」概念，见证了这批年轻人的爆红，又见证了茅侃侃的自杀。他说：把时间拉得足够长，很多&lt;b&gt;功业&lt;/b&gt;会显得&lt;b&gt;荒唐&lt;/b&gt;，很多&lt;b&gt;骄傲&lt;/b&gt;会变成&lt;b&gt;惶恐&lt;/b&gt;。媒体是是照明灯，也是杀人器。德不近佛者不可为医，这句话对媒体也是如此。&lt;/p&gt;&lt;blockquote&gt;老婆的批注：文写得真好。作为记者他的反思是良心之举，但对于侃侃自杀他并不该付多大责任。文中提到两处：1. 内因还是最重要的 2. 一个更冷的事实是，茅侃侃身边也没有长辈朋友看透以及改变这一点。所以家庭教育和由此塑造出来的个人修养才最重要。林妙可和艾玛沃森的对比可见一斑。&lt;/blockquote&gt;&lt;p&gt;你看，老婆大人的意思很明确了，我是贤内助，好妈妈，夸我，快夸我！&lt;/p&gt;&lt;p&gt;我后来跟朋友的对话：&lt;/p&gt;&lt;blockquote&gt;身处其中，滋味是不一样的。我身边也有创业的朋友差一点点自杀成功。这四个人曾是我的&lt;b&gt;图腾&lt;/b&gt;（我爸还把从报纸上剪下来的文章压在我书桌的玻璃下），我和其中两人还有一杯咖啡之缘。茅出事后有很多文章，这篇我最有共鸣。拿得起容易，放得下很难。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;02/03&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天写了 700 行代码（500行测试和辅助代码），搞了个 loader，可以把一个 erlang release 加载到某个 remote node 上。整理好文档后开源。&lt;/blockquote&gt;&lt;p&gt;嗯，这个是 ex_loader。我后来又做了 overseer，可以 spawn 一个 fleet of spot instances，然后像 supervisor 管理一个个 process 那样管理一个个 node。这两个 lib 很久没更新了。不过，世界终究会往 fully distributed 的方向发展，因而很快，我会重新拾起它们。&lt;/p&gt;&lt;p&gt;&lt;b&gt;写代码是一个非线性的过程&lt;/b&gt;，很多时候，想明白了，写，只不过是把思路翻译成某种具体的语言上的实现而已。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/04&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;真是日了狗了，重启个电脑，发现我的 test 出现莫名其妙的问题，说 inet_tcp 无法连接，后来发现 epmd 没起来，然后发现系统里包括 postgres 在内的一堆服务都启动失败。postgres log 说无法解析 localhost。最近 mbp 每次升个级都这么扎心。&lt;/blockquote&gt;&lt;p&gt;唉，苹果爸爸，怎么说你呢。累觉不爱啊。如果某个 PC 厂商能出一个硬件体验可以媲美 mbp 的，我要果断转 ubuntu 了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/10&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;Bardessono 的房间，骚的可以（带全景窗户的大按摩浴缸和放在室外院子里的 shower）。立个小目标：明年夏天带老婆孩子来耍耍。&lt;/blockquote&gt;&lt;p&gt;在这样一个&lt;b&gt;特殊&lt;/b&gt;的日子里，Tubi 的管理团队来到 napa 的杨特维尔小镇 offsite，思考公司未来三年的伟大目标。然鹅，我的小目标估计大概率实现不了了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/12&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;这篇文章只写了火车上 45 分钟和哄完孩子睡觉后不到一小时，算是难得的高效了。&lt;/blockquote&gt;&lt;p&gt;这是写完《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827903%26idx%3D1%26sn%3D9eb4fafb66771cc90869145f74885464%26chksm%3D8704a823b0732135fb0a9602759d7d699afbd354986bc1fc8efe75d69e38f47ce624220dc3aa%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;分布式系统的监工：Overseer&lt;/a&gt;》后的踌躇满志。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/13&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;去年的文章。。。这一年就这么过去了&lt;/blockquote&gt;&lt;p&gt;二月份我三十六，生日后几天本来打算写点什么，狗血一下我的本命年，无意中翻到了去年没写完的《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827907%26idx%3D1%26sn%3D99d4831e6ef80c4d50f9d2d5481cdadd%26chksm%3D8704a85fb0732149c53c459df3b98f49498a5e91fa70909d1fffc97d134dc6c2571bbdc11470%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;猿来三十五&lt;/a&gt;》，于是润色一下发出。池老师淡淡地抛出一句：嗯，快四十了。我和 jiangming 同感：想想就恐怖。&lt;/p&gt;&lt;p&gt;三十六岁的程序员，竟然还活蹦乱跳地写代码，你说奇迹不？我要是老布什，活到八十五岁的时候肯定不是在开飞机，而是给重外孙女用 L&amp;amp;R 语言展示如何写 hello world。&lt;/p&gt;&lt;blockquote&gt;一个人拥有&lt;b&gt;热情&lt;/b&gt;就不怕下跌，也不拍倾轧排挤，可以保持天真，成其自然，潜心一志地完成自己能做的事情。 # 36 岁生日过去几天，我却愈发迷茫&lt;/blockquote&gt;&lt;p&gt;这话是杨绛先生说的。原话是「不想&lt;b&gt;攀高&lt;/b&gt;就不怕下跌」我不知道为啥当时自己将其改成了「拥有热情」。&lt;/p&gt;&lt;p&gt;Chiyuan 用马克吐温的名言给我大保健：&lt;/p&gt;&lt;blockquote&gt;时光荏苒，生命短暂。别将时间浪费在争吵、道歉、伤心和责备上。用时间去爱吧，哪怕只有一瞬间，也不要辜负。&lt;/blockquote&gt;&lt;p&gt;我跟他握了爪，说：&lt;/p&gt;&lt;blockquote&gt;咱们都是美的(de)搬运工&lt;/blockquote&gt;&lt;p&gt;老婆也来抢镜，像绿竹巷的老婆婆那样语重心长告诫我：&lt;/p&gt;&lt;blockquote&gt;use your brain and follow your heart&lt;/blockquote&gt;&lt;p&gt;前同事看出了我的惆怅，问：&lt;/p&gt;&lt;blockquote&gt;有没有回来发展的想法？&lt;/blockquote&gt;&lt;p&gt;我戏谑：&lt;/p&gt;&lt;blockquote&gt;多谢问候，年轻人还想在外多闯荡一阵子。&lt;/blockquote&gt;&lt;p&gt;嗯，&lt;b&gt;竹外桃花三两枝&lt;/b&gt;，我惆怅个啥？我惆怅要不要去区块链的世界里看看？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/14&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;写了六页答案，期中考试 1 终于过去了。今晚后面的课不上了。满街的手捧鲜花的小姐姐，让我十分想念家中的三个妹子。&lt;/blockquote&gt;&lt;p&gt;嗯，这还是 Berkeley 的统计课。德国老爷爷钢铁直男，安排中国农历春节前考试我就罢了，但安排&lt;b&gt;情人节期中考试&lt;/b&gt;真是让人醉得五体投地。这次考试我得了 A，没给生产数学小王子小公主的祖国丢脸。可惜这课后来因为出差的缘故，没拿到学分。不过福祸相依，我是不是可以吹一把自己是 &lt;b&gt;Berkeley dropout&lt;/b&gt;？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/15&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;不能免俗地祝贺一下新年。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fc600f6ba78e286b21512ca6db0bbd03_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;570&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-fc600f6ba78e286b21512ca6db0bbd03_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fc600f6ba78e286b21512ca6db0bbd03_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;570&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1080&quot; data-original=&quot;https://pic4.zhimg.com/v2-fc600f6ba78e286b21512ca6db0bbd03_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-fc600f6ba78e286b21512ca6db0bbd03_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/16&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;下周，最年长的世界第一，首次和最后一次夺世界第一间隔最长两个记录又将归他。36 岁的老男人，顽强逆风飞扬。#坐等张公子的文章&lt;/blockquote&gt;&lt;p&gt;我的&lt;b&gt;图腾&lt;/b&gt;。我的&lt;b&gt;爱豆&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/17&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;小宝果然是临场型选手，大心脏，蜜汁自信，现场表演比在家里弹得好不少，歌唱得也很洪亮，还和主持人谈笑风生。&lt;/blockquote&gt;&lt;p&gt;在北航湾区校友会潜水许久，第一次全家参加北航校友会春晚。小宝贡献了钢琴曲。和主持人对话的时候，牙尖嘴利，把主持人都给绕蒙了。我觉得前世她是我的&lt;b&gt;蓉儿&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;有朋友留言戏谑我前世说不定是&lt;b&gt;华筝&lt;/b&gt;呢。。。话说到这份上了，只能友尽。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/20&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;前同事老严创业一年来的感悟&lt;/blockquote&gt;&lt;p&gt;我在 Juniper 的前同事们，创办了好些成功且低调的企业。比如说 panabit，webray 等。严大师的《&lt;b&gt;三得三失 —— 我创业这一年&lt;/b&gt;》深度总结了他创办蔷薇灵动这一年的旅程。内容好，文笔也好 —— 你会发现程序君只不过是能干又能写的众多程序员的沧海一粟而已。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/21&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;明天 BBL 打算讲 blockchain。现在越来越感觉 08 年的中本聪是来自未来的人，太太太 genius 了。&lt;/blockquote&gt;&lt;p&gt;嗯，虽然那时号称入坑，现在看来，肤浅得一逼。当然，从另外一个角度来看，哥对自己这半年来的成长很满足，很享受。我记得当时这个 BBL tubi 几乎一半的人都参加了，大家都对 blockchain 充满了好奇。当时有个小哥私下问我：That’s an inspiring talk. Are we going to do something around blockchain? 我的笑容尴尬地挂在嘴角，半天挤出一句：I don’t know. Let’s see what could happen.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/22&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;昨晚写的 slides，可以在：&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//github.com/tyrchen/unchained&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/tyrchen/unch&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ained&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt; 下载。&lt;/blockquote&gt;&lt;p&gt;我在文中这么说：「blockchain 可能是网工最好的翻身仗。上不上车不重要，先入坑吧，搞些技术储备总归是好的。没准，就相当于 44 年入党了呢？」&lt;/p&gt;&lt;p&gt;xg 调侃道：&lt;/p&gt;&lt;blockquote&gt;1944 年入&lt;b&gt;党&lt;/b&gt;。。。千万别选错了&lt;b&gt;阵营&lt;/b&gt;啊&lt;/blockquote&gt;&lt;p&gt;dongdong 说：&lt;/p&gt;&lt;blockquote&gt;还记得第一次和你提起 Bitcoin 应该是 &lt;b&gt;2013 年 8 月&lt;/b&gt;左右，在出差印度的飞机上&lt;/blockquote&gt;&lt;p&gt;我懊悔地回：&lt;/p&gt;&lt;blockquote&gt;感觉我们俩错过了买下&lt;b&gt;紫禁城&lt;/b&gt;的机会&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;02/23&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;新学期就要开始了，想到斯坦福受洗的小伙伴们不要错过哦，三月五号可以注册了。&lt;/blockquote&gt;&lt;p&gt;自从我一月份发了在斯坦福上课的朋友圈，很多人就问我怎么报名。我便告知了下一季入学注册的时间。当时好些人说要去上一门课。一年过去了，&lt;b&gt;are you OK？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Ray Dalio 说时间像一条永不停歇的河流：&lt;/p&gt;&lt;blockquote&gt;Looking back on my own journey, I now see that time is like a river that carries us forward into encounters with reality that require us to &lt;b&gt;make decisions&lt;/b&gt;. We can’t stop our movement down this river, and we can’t avoid the encounters. We can only approach them in the best possible way.&lt;/blockquote&gt;&lt;p&gt;向左走，还是向右走，是每一个交叉路口我们都要面临的抉择。我们对生活的追求，我们的价值观决定了我们的&lt;b&gt;选择&lt;/b&gt;，它无关&lt;b&gt;对错&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/25&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;昨天整了一天的 ansible 和 packer，终于 overseer 的 ec2 spot instance adapter OK 了。。。启动 spot instance，建立连接，远程为其注入一个 erlang release 运行指定任务，pairing，发送和接受 telemetry，spot instance 终止后 clean up。&lt;/blockquote&gt;&lt;p&gt;做程序员最大的成就感就是：&lt;b&gt;我来，我见，我征服&lt;/b&gt;。当然，这也反映了程序员们的自大。知道程序员最佩服的职业是什么嘛？rocket science。因为我们的口头禅是：Come on, surely we can do it. This is definitely NOT rocket science!&lt;/p&gt;&lt;blockquote&gt;老婆随手画的。最近她在朝着艺术家的方向前进，家里借的，买的书都是 water color 这样美术类的。&lt;/blockquote&gt;&lt;p&gt;我们的周末不是在&lt;b&gt;图书馆&lt;/b&gt;，就是在&lt;b&gt;博物馆&lt;/b&gt;。如果在这两地都找不到。那么大概率是在&lt;b&gt;斯坦福&lt;/b&gt;。午后的斯坦福，最适合作画。老婆带着闺女写生，我坐在草坪上读&lt;b&gt;毛选&lt;/b&gt;。有时中午游荡在 Bellevue 的街上，心会飞向斯坦福的午后。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/27&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;微信外卡支付受限，提示可以提高限额。点进去是一个英文页面，没有任何有效提示，看着是出自实习生之手。不管那么多，上传要求的照片。前两次弹出的窗口都是左边cancel，右边ok，到第三个就左边ok，右边close webview，结果我试了两次都莫名退出（习惯性点绿色按钮），第三次终于发现蹊跷。上传完毕满心欢喜submit，结果发现那个按钮是假的。。。根本无法submit。。。不解，我这是特么在玩智障大冲关的小游戏么？&lt;/blockquote&gt;&lt;p&gt;我早 7 点在朋友圈吐了个槽，微信的美女产品经理就迅速跟进处理，晚上 18 点就修复了。不得不感慨微信团队的反应速度。腾讯的产品好，是有其原因的。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;02/28&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;刚过完本命年生日，今早就差点车祸。在101路上，听着邓丽君，我习惯性陷入思考。结果道路施工，前车的前车的前车突然急刹，整条线都紧急制动，等我反应过来只能下意识稍微看眼镜子，都来不及回头就强行并线，刹车。我原来lane上的后车差点追我前车的尾，我新lane上的后车差点追我的尾，我刹在前车几乎贴屁股的位置。等到我缓缓经过拥堵路段时，发现我原来的lane上两车追尾，还好不太严重。庆幸自己躲过一劫&lt;/blockquote&gt;&lt;p&gt;朋友调侃：&lt;/p&gt;&lt;blockquote&gt;本命年，邓丽君，好多信息&lt;/blockquote&gt;&lt;p&gt;长辈提点：&lt;/p&gt;&lt;blockquote&gt;你买车要选带测距雷达自动刹车功能的汽车，如遇上你今天的情况就轻而易举避免了。&lt;/blockquote&gt;&lt;p&gt;我自己一个人开车的时候有个坏毛病，容易陷入沉思。有时候开到家了，有种记忆被狗吃了的感觉，会一拍大腿：鸭，这么快到家了！&lt;/p&gt;&lt;blockquote&gt;是不是该感谢一下旧金山遍地都是的 homeless，我家小妞 “为长大以后不会要饭而努力读书”&lt;/blockquote&gt;&lt;p&gt;老婆告诉我她和小宝的对话。她问小宝是不是妈妈给你压力太大，报的兴趣班太多，要不要减少一些。小宝害羞地说：&lt;b&gt;妈妈，我是有一些累。但是这样我以后就不会去要饭了。。。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这觉悟真是厉害了，我竟无言以对。&lt;/p&gt;&lt;blockquote&gt;赞菜头叔。区块链是对此钻研的技术人，以及场内人士，以及为所有参与者提供服务的人的盛宴，因为他们为此思考，为此有金钱以外的付出。其他听风就是雨的参与者，仅仅花费时间在盯盘看盘讨论涨跌的人都是韭菜。大小而已。&lt;/blockquote&gt;&lt;p&gt;看了和菜头的《&lt;b&gt;韭菜席地而坐&lt;/b&gt;》有感。值此大跌之际，我们再回顾一下自己的「信仰」：&lt;/p&gt;&lt;blockquote&gt;在一个新兴的场子里，如何做出正确的判断？答案是有真正的信息，然后你才能做出正确的判断。真正的信息在谁手里？谁知道具体的某个区块链项目是做什么的？有多少可行性？或者知道它是准备真的在市场上运营下去，还是准备打个短线抢一把转身就走？我并不知道，我只知道现在流行谈信仰：比特币是一种信仰，XX币是一种信仰，区块链是一种信仰，相信未来是一种信仰。哪儿来的那么多信仰？什么时候信仰变成了一种取巧的方法？对一个市场的运行无法理解其中机制，也无法获取有效信息，最后居然能够靠信仰做出判断，这真是一种轻省的办法。那么两手空空，只有“信仰”的人，不是韭菜还能是什么呢？&lt;/blockquote&gt;&lt;p&gt;有人问我对区块链的信仰，我说：&lt;/p&gt;&lt;blockquote&gt;我的信仰植根于 ECDSA，植根于 Sha3，植根于 Zero-knowledge proof，植根于 Shamir’s secret sharing / reed-solomon erasure codes 这些数学基础，就像已故的张首晟教授所说的 “in math we trust”；还植根于 gossip / DHT / plumtree / ghost / WebRTC 等一系列 p2p 协议；当然也植根于 nakamoto / ghost / cuckoo 以及姚教授团队最新出炉的 conflux 这样的 PoW 的共识算法，植根于 tendermint / cardano / hashgraph 这样的 PoS 的共识算法，还有 merkle tree，merkle DAG，persistent data structure，Merkle Patricia Tree，CRDT 等一系列数据结构，以及 event sourcing / CQRS 的思想，CAP 理论，植根于前人在 distributed system 领域自六七十年代一直以来的研究：argus，emerald，linda，erlang，akka，bloom，lasp。这些工作终将将我们引领至一个时代：内容和程序都公开可验证，并且以公开可验证的方式链接起来，成为下一代的互联网。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;03/01&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;昨天终于把它开源了。这代码断断续续写了几周，基本都是周末才有空写一写。还不稳定，慎用。&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//github.com/tubitv/overseer&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/tubitv/overs&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;eer&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;。&lt;/blockquote&gt;&lt;p&gt;嗯，我写的一个管理节点，对标 supervisor 的 lib。现在想想，可以用 horde (distributed supervisor and registry backed by deltaCRDT) 作为底层实现，效果可能更好。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/02&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;好久没周末发文章，走一个&lt;/blockquote&gt;&lt;p&gt;写了篇《&lt;b&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827927%26idx%3D1%26sn%3Dff4a4b7f61a62ebc1c91d7e9eb2b7aeb%26chksm%3D8704a84bb073215de3f8e8b521b1745e61988d56bacdcc25927f78b81e794da099bd68049e2c%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;谈谈分布式系统&lt;/a&gt;&lt;/b&gt;》，非常赞，也许 2019 年我会撰写他的姊妹篇：《当我谈分布式系统时，我在谈什么？》&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/03&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天花了一天时间做了个 elixir 的 bitcoin RPC library。社区做的没有可用的，写的还都挺啰嗦。我的思路是爬下来现成的 bitcoin API 文档，生成包含函数名，参数格式的 json 文件，然后用 macro 生成所有的 RPC client 代码。总共写了三百多行代码，支持了所有官方 API，还包含了详尽的文档。目前还很糙，做好了再发布。&lt;/blockquote&gt;&lt;p&gt;乔帮主所谓 connecting the dots，在我身上不断应验。当时写来觉得好玩，用来学习 bitcoin 的工具，在 ArcBlock 里面，成就了 ocap-rpc，类似的思路也奠定了我们创造 goldorin，用 DSL 来简化 API 层开发的思想。&lt;/p&gt;&lt;p&gt;有意思的是，老冒留言：&lt;/p&gt;&lt;blockquote&gt;依稀感觉 elixir 要在区块链领域大获粉丝啊…&lt;/blockquote&gt;&lt;p&gt;然后有个朋友留言：&lt;/p&gt;&lt;blockquote&gt;这是要 all-in 区块链的节奏么？&lt;/blockquote&gt;&lt;p&gt;我说：&lt;/p&gt;&lt;blockquote&gt;周末 all-in.&lt;br&gt;小贝是个爱读书的好孩子，只要我闲着，往沙发一坐，她就哼哼哈哈的捧着书过来让我读。昨晚晚饭前一口气读了三本，晚饭后我上楼工作，她又捧着一本书拽住我的衣角，让我给读。我不得已把她代理给她娘，才仓皇逃进书房。&lt;/blockquote&gt;&lt;p&gt;我经常和老婆拿科勒龙头的建一座房子，要配得上科勒龙头的广告感慨：&lt;b&gt;做一对父母，要配得上小宝小贝&lt;/b&gt;。我们很担心自己成为「好白菜，可惜让猪拱了」的那头猪。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/04&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天在飞机上看白皮书，突然想到区块链的 O2O，OMO 概念：On chain to off chain, on chain merge off chain。拿走不谢。我是活雷锋。&lt;/blockquote&gt;&lt;p&gt;这条朋友圈意味深长，随后发生的事情改变我今年的计划和生活。我看的白皮书是 &lt;b&gt;ArcBlock&lt;/b&gt; 的白皮书；我坐的飞机是 alaska airline 从 San Jose 到 &lt;b&gt;Seattle&lt;/b&gt; 的航班。我的目的地是：&lt;b&gt;500 NE 108th Ave, Bellevue WA 98004&lt;/b&gt;。未来的两天多时间里，我和老冒在我们未来的 office 里快意而激烈地讨论。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/06&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;Amazon go go go! 感谢小伙伴的款待！太惊艳了！更加坚定了我每个月定投两千元的信心。&lt;/blockquote&gt;&lt;p&gt;这是参观完 Amazon 两个大球的观后感。直到现在，我每个月还在定投亚麻。最低 1400 左右，最高 1980 左右，都买过亚麻。雷打不动，&lt;b&gt;真爱粉&lt;/b&gt;。（现在已经买了不少了，持仓成本在 1640，哭）&lt;/p&gt;&lt;blockquote&gt;前天早上失眠时写的，终于收了个尾。&lt;/blockquote&gt;&lt;p&gt;我写的《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827936%26idx%3D1%26sn%3Dd7609ad48ac2553eaf9c19923634c9ed%26chksm%3D8704a87cb073216a91bea583af762de2bd8872a338cee0ffc80dba6d85c4330984ccaef18a56%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;谈谈如何做研究&lt;/a&gt;》。绝对好文章，吐血推荐。&lt;/p&gt;&lt;p&gt;朋友的眼光很犀利，搞得我都无言以对：&lt;/p&gt;&lt;blockquote&gt;感觉快要跳槽去 blockchain 公司了？&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;03/07&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;朱说得很在理。落地到应用场景，落地到用户身上，user experience，data analytics，growth hack 这些该做的事情，都不应该少。&lt;/blockquote&gt;&lt;p&gt;这是读了《&lt;b&gt;王峰十问朱啸虎：等区块链经历死亡谷再进也不迟&lt;/b&gt;》的感受。朱说：&lt;b&gt;即使是个真风口，也不用着急，任何创新都是要经历死亡谷的&lt;/b&gt;。投资人可以在死亡谷右侧进入，千万不要着急，被焦虑赶着入场。革命还很长，大家保重身体。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/09&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;昨天做的 personal color profile。跟差不多十年前在Juniper 做的一样，还是 red/blue（juniper 那次是 orange/green，但意思和这里的red/blue一致）。我的性格十年没有变化。然而，在大家眼中的我，更多是 blue/green，很有意思的是，十年前大家也是这么认为的。Instructor 说，这是因为我平时的 energy 大量用在了提高green的部分（见图一preference flow）。图三是我们leadership的分布，我是3号。我的key weakness 是 may appear unsociable… 嗯，本我。&lt;/blockquote&gt;&lt;p&gt;颜色性格和 MBTI 这类的测试，可以帮助自己更好地发现自我。&lt;/p&gt;&lt;blockquote&gt;“我们那会儿也丧，但就蹲在田里墙角发呆，自己抽颗烟，眨眨眼，叹口气，也就过去了；丧，也没人知道。等见了人，那就不好意思丧了，那不就得装乐呵吗？”&lt;/blockquote&gt;&lt;p&gt;读张佳玮的《&lt;b&gt;是只有我一个人丧，还是这时代每个人都很丧？&lt;/b&gt;》。许多前辈们的丧，或者说，&lt;b&gt;没有互联网的人们的丧，是薛定谔的丧&lt;/b&gt;：他们丧时，我们看不见；看见了，他们就不丧，是无法被看见被感受的。&lt;/p&gt;&lt;p&gt;天龙八部说，&lt;b&gt;众生皆苦&lt;/b&gt;。就是这个意思。林夕最懂。所以说&lt;b&gt;参一生参不透这条难题&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/10&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;下午在图书馆干完正经事，一看，离闭馆还有一个半小时，干脆来篇写起来简单的。&lt;/blockquote&gt;&lt;p&gt;嗯，这篇是《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827944%26idx%3D1%26sn%3Db44dbb5c2c844721b9221735c674a9d2%26chksm%3D8704a874b0732162d79be1e17b154db9ad6637e2da8b2822e631b414c5c78936079fca107569%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;量子计算对 bitcoin 的威胁&lt;/a&gt;》。莫非调侃我：&lt;/p&gt;&lt;blockquote&gt;为了不回家带孩子你也是拼了&lt;/blockquote&gt;&lt;p&gt;唉，这么大的秘密被发现了。回想我的整个职业生涯：没孩子的时候周末带老婆在&lt;b&gt;五道口工作&lt;/b&gt;，周末带老婆在&lt;b&gt;国图看书&lt;/b&gt;；到湾区后就是周末去 &lt;b&gt;Cupertino 图书馆自习&lt;/b&gt;；到西雅图后就是，周末到&lt;b&gt;公司写代码&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;为了不回家带孩子我真的很&lt;b&gt;拼&lt;/b&gt;。^_^ 记得在 Juniper 时，我都是为了避开下班高峰期所以晚上 7 点多走，有时候跟 Cliff 聊，说你坐地铁为啥还走这么晚。他说：回去就只能陪孩子玩了，没办法静下心看点什么。&lt;/p&gt;&lt;p&gt;程序员的世界，就这么点追求：给我一个&lt;b&gt;安静&lt;/b&gt;的空间，我好去某 &lt;b&gt;hub&lt;/b&gt; 看点什么。&lt;/p&gt;&lt;blockquote&gt;大局观，价值观，好奇心，想象力，以及忍耐力&lt;/blockquote&gt;&lt;p&gt;这是我看《&lt;b&gt;张一鸣：为什么 BAT 挖不走我们的人才&lt;/b&gt;》的一点点想法。未必和文章思想完全一致。朋友圈的看法惊人一致：&lt;/p&gt;&lt;blockquote&gt;关键是&lt;b&gt;钱和股份&lt;/b&gt;给够了&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;03/11&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天在 gilroy 为一件小事跟老婆大吵了一架，不过很快冰释前嫌。我常常忽略她的感受，低估了她的付出，尤其是牺牲自己的事业，跟着我&lt;b&gt;如浮萍般漂泊&lt;/b&gt;。我们一周周和同事有不少的1:1，花不少精力，甚至培训，以及通过 team building 来互相了解，可是却往往忽视自己身边最亲密的人，很少去探索对方的委屈和苦楚。&lt;/blockquote&gt;&lt;p&gt;朋友们的留言：&lt;/p&gt;&lt;blockquote&gt;这是公开检讨书啊&lt;br&gt;码农都需要这样提升&lt;br&gt;需要一周跟老婆 1:1 两次（这个&lt;b&gt;内涵&lt;/b&gt;了）&lt;br&gt;买个暖气片回家吧，&lt;br&gt;朋友圈是帮不到你的&lt;br&gt;应该每个季度来次 performance review&lt;br&gt;朋友一家临走时，老婆抱了一下他家的小妹妹，小贝顿时感到了深深的危机感，抱着妈妈腿不放。送走他们，这小妞后立刻围着妈妈献媚求安慰 #女孩的心思你永远猜不透&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;03/13&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天 Lawrence 死堵，6点开始的节目，去晚了十分钟，妞刚表演完。她们分组做了个实验。她所在组是让 gummy bear 变大。过去一周实验，今晚 demo。有意思。墙上贴着她们平日的作品，其中有篇作文长大了做什么，其他小朋友都是医生，飞行员，工程师，消防员，老师等。俺妞就是要当公主。而且当公主拿到 first paycheck 就买吃的。。。&lt;/blockquote&gt;&lt;p&gt;因为在文末放了两个笑哭了的表情，朋友们纷纷打抱不平：&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;燕雀&lt;/b&gt;安知&lt;b&gt;鸿鹄&lt;/b&gt;之志&lt;br&gt;人要是没有理想，和&lt;b&gt;咸鱼&lt;/b&gt;有什么分别？&lt;/blockquote&gt;&lt;p&gt;于是我一会被指责成了&lt;b&gt;燕雀&lt;/b&gt;，一会成了&lt;b&gt;咸鱼&lt;/b&gt;。明明我小时候也是有&lt;b&gt;志向&lt;/b&gt;的好不啦？我要做&lt;b&gt;天文学家&lt;/b&gt;！然而理想是骨感的，就像李若彤的小龙女，现实是丰满的，就像包子脸的小龙女。熬了三十多年后，我干的事情总算有一点点和天文学沾边 —— &lt;b&gt;InterPlanetary File System&lt;/b&gt;…（感谢 Juan Benet 起了这么吊的名字）&lt;/p&gt;&lt;blockquote&gt;朋友把我的文章发给 Joe 老爷子，老爷子说 this guy knows erlang, can’t wait to see him! #今年要不是手头这个项目这么紧，我真想飞去会场聆听老爷子 1:1 教诲。&lt;/blockquote&gt;&lt;p&gt;嗯，老爷子看得文章是《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827691%26idx%3D1%26sn%3D8d6854f91bb9d16470ef6eed9d3ad8ec%26chksm%3D8704ab77b0732261eb63217ad03740a3433cde4491826eeec020f4bbebb8b18837c27ac3e74d%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;上帝说，要有一门语言，于是有了 erlang&lt;/a&gt;》，朋友是小山，现在是&lt;b&gt;同事&lt;/b&gt;。:)&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/14&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;现在为了 GDPR 也是焦头烂额，周周讨论&lt;/blockquote&gt;&lt;p&gt;对《&lt;b&gt;GDPR 生效在即，您的应对之策准备好了么？&lt;/b&gt;》的感慨。btw，我个人非常支持 GDPR。是时候拿回属于我们自己的隐私权了。&lt;/p&gt;&lt;blockquote&gt;We chat, he face time.&lt;/blockquote&gt;&lt;p&gt;王左中右的《&lt;b&gt;一张图总结霍金的一生&lt;/b&gt;》。突然想到，2018 年这个戊戌年怎么了？为什么这么多伟人都在这一年&lt;b&gt;罹难&lt;/b&gt;？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/15&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;笑得无比开心。很久没有为了见一个人我还&lt;b&gt;专门刮了胡子&lt;/b&gt;，&lt;b&gt;换了身衣裳&lt;/b&gt;。&lt;/blockquote&gt;&lt;p&gt;写于我和 Joe 老爷子 1:1 后。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/16&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;终于完成了我2018的又一个新年愿望。我精心穿的 tubi 的T恤不显眼啊。今天很幸运，老大 Francesco 给我站台主持，介绍我。结尾本以为不会有太多问题，结果一个接一个，还好我的 topic 之后是 coffee break，无所谓拖堂。感谢公司里陪我 rehearsal 的小伙伴，感谢 Joe 老爷子提醒我多谈谈 why。我第一次做 speaker，自认为可以打 80 分。YouTube 应该一周内有 link。&lt;/blockquote&gt;&lt;p&gt;这是我第一次用英文在世界级的行业大会上做讲座。题目是：&lt;b&gt;Release, Deploy, Upgrade and Monitor Elixir Services in Real World&lt;/b&gt;。感兴趣的同学可以去 youtube 上搜。&lt;b&gt;如果你想看看一个人，在一年的时间里究竟会发生多大的变化，那么，今年二月底的 Code Beam，可以听听我的新的讲座：Forge (Ruby on Rails for blockchain)&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;送走了丈母娘，接下来半年照顾两妞的重担就只能我俩自己&lt;b&gt;扛&lt;/b&gt;了。&lt;/blockquote&gt;&lt;p&gt;这话说的&lt;b&gt;冠冕堂皇&lt;/b&gt;的，连我都要信了。真实的情况是，&lt;b&gt;生活&lt;/b&gt;上，老婆负责抗；&lt;b&gt;朋友圈&lt;/b&gt;里，我抗。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/17&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;280 上我最喜欢的 Vista Point。适合开累了醒神。现在一年也就来个一两次。#&lt;b&gt;今宵离别后，何日君再来&lt;/b&gt;&lt;/blockquote&gt;&lt;p&gt;因为知道自己已经要离开 SF，奔向西雅图，所以趁着开车的机会，到 Vista Point 上浪一下，告个别。&lt;/p&gt;&lt;blockquote&gt;午餐和 Erik 聊起 aeternity，他说他是 consultant，给 aeternity 做 smart contract 的 compiler。看了看 epoch repo，Erik 的贡献确实主要在 aebytecode。有功夫要好好看看这个项目的源码&lt;/blockquote&gt;&lt;p&gt;Erik 在博士时代为 Erlang 搞了 HiPE (Beam Native Compiler)，博后为 Scala 写了第一版 compiler。牛人。&lt;/p&gt;&lt;blockquote&gt;Epoch 还挺靠谱的。aeternity 团队干了不少事情。PoW 用 cuckoo，讲究。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;03/18&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天一大早开车去水族馆。在 17 号公路上，老婆说这路太难走，以后你不在的时候，我没法带她们去玩。我说可以绕道 101 啊。这时候坐在后面的小宝发话了：妈妈你这是 &lt;b&gt;fixed mindset&lt;/b&gt;，你要想 &lt;b&gt;I will try it, I can learn it.&lt;/b&gt;. 这孩子，本来是她妈妈教育她的话，活学活用，反过来将了她妈妈一军。&lt;/blockquote&gt;&lt;p&gt;孩子们总是比我们想象地要&lt;b&gt;成熟&lt;/b&gt;。开车的时候，遇到不守规矩的车，我 8 年北京驾龄累积的邪火就上来了，嘴里说些不干不净的骂人的词，比如说「卧槽」。往往这个时候从后座就回飘来一句话，爸爸，什么是「卧槽」。于是我和老婆合计，要把我这个坏毛病改过来。方法很简单：说一个脏字，我就扇自己一耳光。这样让孩子的注意力被吸引到耳光上而不是脏话上，同时祖先传下来的趋利避害的基因可以帮助我减少脏话 —— 痛得多了也就长记性了。于是每次去一号公路的路上，我跟小宝的对话总是这样：&lt;/p&gt;&lt;blockquote&gt;爸爸，你为什么打自己的脸？&lt;br&gt;有蚊子。&lt;br&gt;爸爸，又有蚊子了？&lt;br&gt;嗯。&lt;br&gt;爸爸，为什么蚊子总往你脸上飞？&lt;br&gt;因为你爸长得太&lt;b&gt;帅&lt;/b&gt;了&lt;/blockquote&gt;&lt;p&gt;每次到达目的地，我的脸总是&lt;b&gt;红肿红肿&lt;/b&gt;的，这时候，黑的好处就体现出来了。&lt;b&gt;黑夜给了我黑色的脸&lt;/b&gt;，我可以把自己扇成&lt;b&gt;猪头&lt;/b&gt;而无人&lt;b&gt;侧目&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/19&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;周日晚把笔记整理好，今早火车上一气呵成。略糙，其实可以写得更好。有功夫我该报一门撰写人物特稿的课程好好学学。&lt;/blockquote&gt;&lt;p&gt;这是说我写的《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827948%26idx%3D1%26sn%3Dd4ded0f9cf84328546eb1f31ef5064ff%26chksm%3D8704a870b0732166d04ce8ef9ee73ee63c32619ae31678dceec0205d811b824a18bea513d64a%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Joe Armstrong 面对面&lt;/a&gt;》。看着过去的自己，真心好。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/20&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;早上贝妈要上美术课，我第一次独自带贝。为了避免我工作入定而她爬上钢琴向后翻腾两周半转体一周半屈体摔下来，我只好和她一起窝在小屋子里。在书房，她爬上我的书桌发表演讲；在卧室，她把所有妈妈叠好的衣服翻出来一件件扔到地上；在姐姐卧室，她玩起转椅来没完。所以我根本没法干活。还好临出门前，老婆给我准备好三个锦囊：牛奶，菜泥，水果泥。还云某事某刻，打开某个锦囊。好容易熬到八点半，打开第一个锦囊，上牛奶。用三粒瓜子把她骗上了行刑桌捆起来后，十大酷刑都快招呼齐了她就是不喝一口。没法子，我跟审八路似的，问了一堆跟食物有关的东西，终于在草莓这里她松了口。喂上，一口气吃了四个，吃饱了就跟我翻脸，就是哭，不听我指挥。唉，12点老婆才回来，我已经望穿秋水，度秒如年了。&lt;/blockquote&gt;&lt;p&gt;爹坑娃，娃坑爹，大家互相伤害。父亲独自带娃的后果请参考电影：&lt;b&gt;Incredibles 2&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;下午 Erlang solutions 的老大 Francesco 来我司参观，聊 Hive 和 overseer，我介绍完后信心满满给他demo，结果发现我用来实验的机器被小伙伴停了，启动后，security group 可能不对，start child 创建出来的 labor node，始终没有连过来，我的老脸啊。Murphy 就是这么讨厌。谈到 hive，他说正在找 funding，我问多少，他说几十万，我一激动问他支持 crowdfunding 么，tubi 可以赞助些，人家淡定地说我们是在争取&lt;b&gt;瑞典科学院&lt;/b&gt;的funding。。。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;03/22&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;总算可以小小舒一口气，看看凌晨四点的旧金山。 五年来，第一次为上线刷夜。。。&lt;/blockquote&gt;&lt;p&gt;这是我在 Tubi 的最后一个项目：&lt;b&gt;Move to Oregon&lt;/b&gt;。做完后，我就交接着，准备 &lt;b&gt;Move to Washington &lt;/b&gt;了。^_^&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/23&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天比熬夜的那晚还要累。我有时候对事情的坚持不够&lt;b&gt;强硬&lt;/b&gt;，种下些恶果。经常性不作为或者负输出的人应该尽早layoff。不然他们会分享掉本该属于好员工的资源：merit，training，attention 以及其他。&lt;/blockquote&gt;&lt;p&gt;和小伙伴 performance review 后的自责。也许是过分紧张的项目使我失去了对其他事情的判断力，也许是即将离任让我失掉了责任心，跟 HR 聊过后，我改变了主意，把已经标记为建议 layoff 的工程师留下来还加了薪。&lt;b&gt;对不该交代的人有了交代，便意味着对该交代的人失了交代。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/24&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;早餐，给宝贝用鸡蛋煎的鱼。&lt;/blockquote&gt;&lt;p&gt;我最享受的，就是生活中的这种&lt;b&gt;自得其乐&lt;/b&gt;。就像离别是痛苦的，但离别前煎个别样的蛋，还是可以非常欢乐。小布什在悼念老布什时，整个悼词的基调是&lt;b&gt;快乐的痛苦&lt;/b&gt;，就像 die young as late as possible 那样，&lt;b&gt;在时间击垮我们之前，我们总是能找到乐子的&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;登机时，叫到我的group我就凑到前面去。一个本来跟周围人愉快中文对话的阿姨用英文跟我说别插队，我撇了眼她的票，用中文说还没到你的group，阿姨竟然还用英文说：doesn’t matter. But you can’t jump the queue. 我无语。这种明明会讲中文不讲的是什么毛病。后来她被空姐拦住等她的group时，我看没人再进了，就走过去，向她杨扬票，我先进去啦。。。&lt;/blockquote&gt;&lt;p&gt;语言是用来交流的，不是用来秀优越的。我们家的家训就是在家里，家人之间交流必须用中文。当我们带着一种文化到异国他乡时，朋友圈里总有两派观点：要么抛弃自己的文化去拥抱西式思维，就像奴隶社会里连载的《硅谷是个什么谷》里的王佳佳；要么是有限度的接触，关起门来跟在北上广深过日子无二。文化的融合是个很大的话题，它不应该是谁取代谁，谁主谁次，而是&lt;b&gt;像太极那样，你中有我，我中有你&lt;/b&gt;。我希望我的孩子们有东方的&lt;b&gt;睿智&lt;/b&gt;，也有西方的&lt;b&gt;幽默&lt;/b&gt;；有东方的&lt;b&gt;涵养&lt;/b&gt;，也有西方的&lt;b&gt;勇于表达&lt;/b&gt;；她们欣赏得来「庭院深深深几许」，也能为 I like for you to be still 产生共鸣。&lt;/p&gt;&lt;p&gt;就像，&lt;b&gt;无状态的 kubernetes 遇上状态无处不在的 OTP application 一样&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/25&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;飞机上看完 AE 和 Loom 的白皮书，又 get 一个 proof of history。间隙里看了《正义联盟》，才知道超人死过，也才知道超人秒其它侠。。。好累。&lt;/blockquote&gt;&lt;p&gt;然并卵，秒任何侠的超人，在&lt;b&gt;老婆&lt;/b&gt;面前还是怂了。龙珠里悟空怼神怼魔怼宇宙人，却轻易被琪琪的狮吼功震服。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/26&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;晚上去nebulas 和CTO Robin 聊了聊我读白皮书中的困惑。Nebulas 团队非常努力，主网上线在即，团队紧锣密鼓开发测试。币圈三点不眠群在吹牛逼的时候，他们凌晨三点还在实现吹出去的牛逼（平日里也是十点不打烊）。这是吹牛逼应有的态度。不过得悠着点，毕竟创业是马拉松，不是冲刺。#为nebulas打call&lt;/blockquote&gt;&lt;p&gt;唉，大概两个月前朋友圈惊闻 Robin 已经离开 Nebulas 了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;03/30&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;所谓勤能补拙，父母带给孩子最好的就是价值观和做事的态度。我离开前，这首曲子小宝还弹得磕磕绊绊，现在，一分半钟的完整曲子已经很是流畅。我得向她学习，今天闷头五个小时，把下午讲座的ppt攒完&lt;/blockquote&gt;&lt;p&gt;小宝越努力，我们越惶恐，怕配不上她。&lt;/p&gt;&lt;blockquote&gt;竟然讲了 5 个小时。。。又一个里程碑达成。&lt;/blockquote&gt;&lt;p&gt;利用回国出差的周六，做了一次 blockchain 的讲座，基本都是技术内容，讲了 5 个小时，也是很佩服自己了。不过 11 月份回国做的讲座，虽然绝对时间上没有超越，但从对技术的理解上，融会贯通上，全面碾压三月底这一次。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/01&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;十四年前，为了神州数码金马奖十佳技术的颁奖典礼，我专门买了人生第一件西服。十一年前，去德国玩，买了套 hugo boss，一次没穿。没想到如今娃都能打酱油了，这两西服我还能穿上。 # 论锻炼身体的重要性&lt;br&gt;&lt;br&gt;终于回到旧金山。看了一路的毛选，主要看完了实践论和矛盾论。想姑娘们了。&lt;/blockquote&gt;&lt;p&gt;这个阶段的我，还能靠每天 7-10km 的跑步维持身材。到了西雅图，懒了，在成&lt;b&gt;球&lt;/b&gt;的路上一去不复还。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/02&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;嗯，这个三月，累得脱去一层皮，但我算是挺过来啦，整个人也进化不少。&lt;/blockquote&gt;&lt;p&gt;发表了篇文章：《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827968%26idx%3D1%26sn%3D45ffa0f955e624bcf9ebf6db3ce3e552%26chksm%3D8704a89cb073218a20da2b5a62a41577216ef0fad34062b21188af1f07806a5a0df95e1b37b5%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2018年3月过去了，我收获到了什么？&lt;/a&gt;》。三月份在 Code BEAM 做了演讲，在国内做了 Blockchain 的技术讲座，和 Joe 老爷子面对面，聆听他的耳提命面。不过，成就过去了，就可以放下了。对我而言，最重要的还是，修炼自己的心性：当一件事情做成，「&lt;b&gt;举世誉之&lt;/b&gt;」之时，不要沉湎其中，静静走开，追逐下一个目标。就像我的爱豆老牛那样，第十九个大满贯奖杯到手，觥筹交错之后，就成了他孩子们的玩具。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/05&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;这周跑了 28km，配速稳定在 5’30 内。我觉得应该好好考虑下今年十月七号的波特兰马拉松了。&lt;/blockquote&gt;&lt;p&gt;然并卵，这个新年愿望被我亲手&lt;b&gt;埋葬&lt;/b&gt;了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/06&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天休假。给车做保养回来的路上去 costco 找黄桃罐头，没找到，买了瓶芒果的。回家吃，老婆说这味道跟黄桃罐头怎么一样，根本吃不出是芒果。我说，你要这么想，这不就是&lt;b&gt;福尔马林泡的植物尸体&lt;/b&gt;么，那味可不就一样么。结果老婆放下叉子再也不吃了。 #技术上说没错吧&lt;/blockquote&gt;&lt;p&gt;这是我的「墙都不扶就服你」系列。想想我老婆也是不容易，替我天天怼两个前世小情人也就算了，还要面对我这样的一本正经的恶趣味。朋友圈里，有借题发挥的：&lt;/p&gt;&lt;blockquote&gt;那么说的话，冰箱就是太平间&lt;br&gt;送女朋友一束美丽的玫瑰花，然后说这是用大粪养出来的，跟你一样漂亮&lt;/blockquote&gt;&lt;p&gt;也有阴谋论的：&lt;/p&gt;&lt;blockquote&gt;想独吞用这么狠的招数&lt;/blockquote&gt;&lt;p&gt;还有裹紧了自己的小棉袄的：&lt;/p&gt;&lt;blockquote&gt;你可千万不能去我们销售部门啊&lt;/blockquote&gt;&lt;p&gt;还有一本正经探讨什么能吃什么不能吃的：&lt;/p&gt;&lt;blockquote&gt;有些偷换概念，福尔马林和尸体都是不可以吃的&lt;br&gt;早上问小宝好几道加法，比如说 9+6，7+8 什么的，基本秒回。妈妈问 8+4，小宝说，这个没学。妈妈说：算。小宝开始她的算法：8个 quarter 是两元，加上4个 quarter，一共三元。妈妈问：那是多少个quarter？小宝说12！所以8+4=12。这个算法简直和Proof of Work有得一拼，硬是把一个加法变成两个除法，一个加法和一个乘法。厉害了！#think differently&lt;/blockquote&gt;&lt;p&gt;有了孩子之后，你会深深地感受到，她们是上天派来让你 &lt;b&gt;stay hungry stay foolish&lt;/b&gt; 的天使。毛主席说：三天不学习，赶不上刘少奇。我们家里是：三天不学习，赶不上陈小宝。我现在已经对朋友圈里有些爸爸妈妈发的初中的平面几何做辅助线的那种题快要绝望了，智商不仅被&lt;b&gt;碾压&lt;/b&gt;，还被&lt;b&gt;凌辱&lt;/b&gt;。这时我感到深深得庆幸 —— &lt;b&gt;还好我有五六年的时间，在四十一岁之前，追上一十四岁的自己&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/07&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;清明前写的，写一篇是一篇了。。。&lt;/blockquote&gt;&lt;p&gt;这是在广告《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827973%26idx%3D1%26sn%3D036f24baa873485c4ffa25263f83e70e%26chksm%3D8704a899b073218f98161d9d1d49867374ab2a3ff504e41012ca15153c27baccd2210cb218f2%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;管理是什么（一）&lt;/a&gt;》。在我看来，无论团队大小，管理者的主要任务是建立 &lt;b&gt;信任&lt;/b&gt;，输出 &lt;b&gt;文化&lt;/b&gt;，确定 &lt;b&gt;目标和战略（策略）&lt;/b&gt;，有效 &lt;b&gt;执行&lt;/b&gt;，并且和团队不断 &lt;b&gt;学习和成长&lt;/b&gt;。这篇讲了信任和文化，写的非常好，再读一遍，我也有了孔夫子那「&lt;b&gt;朝闻道，夕死可矣&lt;/b&gt;」的高潮感。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/11&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;可惜了我的尤文。该出局的是皇马。平行宇宙中的布冯应该再冷静一些，像小贝这样，给裁判鼓鼓掌嘲弄一下，然后扑出C罗的点球，成就又一个大逆转。&lt;/blockquote&gt;&lt;p&gt;世事无常，谁能料到当时被我恨得牙痒痒的总裁，也成了我大尤文的人。今年尤文两条线上神挡杀神，佛挡杀佛，总裁功不可没。羞羞地说一句，总裁也是我&lt;b&gt;爱豆&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/12&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;睡前故事&lt;/blockquote&gt;&lt;p&gt;这是《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827983%26idx%3D1%26sn%3D2a484ef76354f9ca10f7a49c28594bc4%26chksm%3D8704a893b073218560be4b52bd6431cbb8c17b004e3d55a2296c89af09f901ed842ebd81da7b%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;告别 Tubi: 我讲了三个故事&lt;/a&gt;》，它关于奇妙的&lt;b&gt;邂逅 &lt;/b&gt;—— 我们每个人和周遭的人或事，都是邂逅；关于&lt;b&gt;信念&lt;/b&gt; —— belief is self-fulfilling prophecy；关于时间 —— 当一件事情看上去很&lt;b&gt;稀有&lt;/b&gt;，你才会格外珍惜它，从而好好利用它。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/17&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;Robinhood 里已经可以买 bitcoin 和 ethereum 了！我原以为排队要排很久呢！&lt;/blockquote&gt;&lt;p&gt;于是在这一天，我购买了价值 $10, 000 的比特币和以太坊。在 2018 年年底，这笔钱差不多还能买一个 &lt;b&gt;mbp&lt;/b&gt;。苦涩黑人脸&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/18&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;Tubi 中国团队出差专用大 house，超级牛逼。这次头一周没定上，定了个普通老美 house。所谓没有对比就没有伤害，新同学昨夜搬过去，一见倾心，感觉要飞起来，再不想回家了。咋办？&lt;/blockquote&gt;&lt;p&gt;这个屋子是国内某知名互联网公司的老板的备胎。挂在 airbnb 收租子用滴。&lt;/p&gt;&lt;blockquote&gt;上周末，和中国团队一起去Yosemite 看水。这是临行前最后一次远途出行，宝贝们表示很开心。小贝和叔叔阿姨们也混熟了，不再害怕被别人抱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;04/20&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天全公司team building 庆祝 tubiversary，我从家里直接出发，所以没去公司。小宝说，爸爸，今天你送我上学吧。我说好。然后才意识到我连娃是哪个班都不记得，学校大门的密码更是忘得一干二净。。。&lt;/blockquote&gt;&lt;p&gt;一次又一次血淋淋的事实教育我们，如果自身不努力，爹只有在娃问：「&lt;b&gt;爸，我妈呢？&lt;/b&gt;」才有丁点存在的价值。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/23&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;一个忙碌的周末。去了两趟 1 号公路，一趟带中国的同事，一趟带家人。&lt;/blockquote&gt;&lt;p&gt;临走之前，一号公路还是要再回顾一次的。听着&lt;b&gt;邓丽君&lt;/b&gt;，赏花赏海赏秋香。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/25&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;临别前的礼物：&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827992%26idx%3D1%26sn%3De204b070931dd52759cf98c3f23a1b97%26chksm%3D8704a884b07321922ce407f62b655d6cf8263055a3127b6ce29cbc907a6d71b330516be1247c%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tubi 为什么？&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;恬不知耻地自我夸耀一番：又是一篇好文章。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;04/26&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;中国革命战争的战略问题，在毛选第一卷里占据了七十多页的篇幅，非常精彩，值得反复阅读。两周前的all ands meeting，有同事问我都在读什么书，我说最近在看原则和毛选。老美听到chairman mao 似乎更听到萨达姆一个反应，我说毛是一个&lt;b&gt;大哲学家和思想家&lt;/b&gt;。后来有人感兴趣还专门跟我私聊。我说你要把毛看成产品经理，他对当时的中国人做了详尽的persona，知道哪些是核心用户，哪些用户该争取，他知道产品的killing feature是什么，并且贯彻执行到底。他坚持产品方向，知道处于弱势时如何和强大的对手对垒，在清晰的目标和战略下知道隐忍退让，为了全局舍弃局部，为了进攻而防御。&lt;/blockquote&gt;&lt;p&gt;毛选，我至今还只读到第二卷。&lt;/p&gt;&lt;blockquote&gt;中午去airbnb和老朋友们告个别，得到了安姐的赠书。在uber上读了所有的序，惊喜地发现安姐的新书上有我的名字，受之有愧。&lt;/blockquote&gt;&lt;p&gt;嗯，安姐也去了区块链公司，著名的 &lt;b&gt;coinbase&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;ATT park 这一年，每天早上 7:10-7:15拍的。我的caltrain生涯暂告一段落。刚才脑残突然想提前回家，就去跟一些同事告别，Jessalyn 疑惑问我，你不参加我们给你准备的farewell party 了么？我才想起今天还不能去赶四点的火车&lt;br&gt;Best farewell party I’ve had. 在打开礼物，拿出雨衣那一刻，我几乎不能自己。好贴心的老板，好用心的礼物。一个MIT的理工男竟然如此细腻。突然好期待西雅图的雨。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;04/27&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天做了一早真·园丁，把院子收拾了，还把半年前买的橙子树移到了土里，了却老婆心头一件大事。#挥汗如雨，咋我就挖不出个比特币什么的呢&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;04/28&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;这是我开的最艰难的一次长途了。从家到 springfield（中转站）570 mile，我早上8：30出发，下午4：50到。进入oregon后，天就跟漏了似的，一路时断时续的暴雨，有的山路已经形成洪流，车驶过的时候，轮胎被水流带着，方向盘都有些不听使唤。好在好在一路车少，有惊无险。#move to oregon&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;04/29&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;今天比预想的要累，虽然只剩二百多miles，一半是暴雨，一半是堵车。。。好在，就像一诺说的那样：“&lt;b&gt;你要相信，无论发生什么，一切都会过去的啊&lt;/b&gt;。” #move to washington&lt;/blockquote&gt;&lt;p&gt;我非常敬佩一诺，也很喜欢她的《奴隶社会》。最近忙归忙，每周六的《&lt;b&gt;硅谷是个什么谷&lt;/b&gt;》会扫上一下。我上一次读小说还是五年前或者六年前，拜读《&lt;b&gt;银河系漫游指南&lt;/b&gt;》。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/03&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;一年前 vs 现在。朋友说，趁着现在她还傻乎乎愿意让你抱，赶紧多抱抱，否则，再过几年，你即便抱得动，人家也嫌你厌比不想让你抱了[捂脸]&lt;/blockquote&gt;&lt;p&gt;孩子长大的速度总是超乎我们的想象。现在，想要亲亲小宝，只能&lt;b&gt;拱&lt;/b&gt;着嘴等她睡前 goodbye kiss。其他时间她都嫌我胡子扎 —— 哪怕我把脸刮得光洁如&lt;b&gt;鹿晗&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;中午去办了下ID，彻底爱上大华州政府。按照加州dmv的效率，我预计排队加等位怎么着都要两小时，结果从进门到出门，没用五分钟。排号，叫号，处理，测试视力，色弱色盲，拍照，付款，出临时驾照，销毁旧驾照如庖丁解牛般一气呵成，一切麻利得像是做梦。看来zootopia只是讽刺大加州DMV而已 #轻轻的我走了&lt;/blockquote&gt;&lt;p&gt;政府效率方面，广东 &amp;gt; 北京 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 华州 &amp;gt;&amp;gt; 加州。这么比没毛病吧。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/04&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;三国名臣序传略读一二，感觉不错，有空细细品味。#居上者不以至公理物，为下者必以私路期荣；御圆者不以信诚率众，执方者必以权谋自显&lt;br&gt;第一层是什么样的风口是风口？第二层则是你赌对了风口，风口来了，鸡犬升天后为何你升得最快？第三层则是风停了，你为何不掉下来，你的核心业务和核心壁垒到底是什么？好风凭借力，送我上青云的境遇人人心中都有，但又为何落在你头上。&lt;/blockquote&gt;&lt;p&gt;读《&lt;b&gt;雷军和他的飞猪十年&lt;/b&gt;》&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/05&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;当全职妈妈真心不容易。放弃事业依然要没日没夜地干活，承担着世间最重要的育人的工作，却每天都是重复机械的劳动，成就感时高时低，精神压力大到常常被熊孩子逼到崩溃的边缘，没有职场社交朋友圈收窄因而除了老公外无人每日倾诉，还可能被突如其来的外遇毁掉生活。这些问题无法回避，不但需要两个人&lt;b&gt;互相扶持&lt;/b&gt;，&lt;b&gt;互相倾诉&lt;/b&gt;，&lt;b&gt;相濡以沫&lt;/b&gt;，还需要定期&lt;b&gt;约会&lt;/b&gt;重拾爱情的&lt;b&gt;浪漫&lt;/b&gt;，以及制定合理的计划尽快让妈妈的身心重回生育前的轨道。&lt;/blockquote&gt;&lt;p&gt;读《&lt;b&gt;那些嫁好老公的女孩后来怎样了&lt;/b&gt;》有感。&lt;/p&gt;&lt;blockquote&gt;吸取在tubi的经验，我把 tf 分解到一个个service的级别这样部署很快。开源的modules很好用，十行代码搞定一个vpc，我们当时竟然没用，全部自己写，走了很多弯路。另外，inquirer 做交互ui还是很不错，写了一个简单的ui，infra 的架子就起来了 #摸着石头过河&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;05/06&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;饶是我自己，也没能估计准确行文的时间。这文章我原本计划早上到公司三个小时写就，结果写了一天。北上广的同学，我们六月上旬见！&lt;/blockquote&gt;&lt;p&gt;这是篇雄文：《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649827999%26idx%3D1%26sn%3D5374d71f1baa677ffe6805d36fac2af0%26chksm%3D8704a883b07321953c6e713bb86a08ca546a18f661522bbbf89a8832fbdb897f82babdc7a11e%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;欢迎来到区块链的世界&lt;/a&gt;》&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/11&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;我 lead 的今年Q1的重头戏终于正式上线了。这项目也是命运多舛，12月底bd达成共识，1月底我们就基本做完了，然后赶上hulu换CEO，然后就拖拖拖到现在。。。&lt;/blockquote&gt;&lt;p&gt;跟大公司合作，就是这样，大家约好了 1 月 dev complete，我们 ok 了，他们还优哉游哉，一件事要经历无数的 email thread，无数的 zoom meeting。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/12&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;每次都在吼与不吼间犹豫，每次都在吼完后深深的自责反醒，重复这扭曲的生活。青春就是这样消磨殆尽了[可怜]&lt;/blockquote&gt;&lt;p&gt;读《&lt;b&gt;四旬老母的塑料友谊&lt;/b&gt;》。当妈不容易。当爹总是可以用一句话搪塞：爸爸马上要&lt;b&gt;开会&lt;/b&gt;了。。。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/13&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;我筛简历有个习惯，求职者的网站我会看看，工作的公司和产品也会看看，如果是app，还会试用一下。刚才一个hr小姐姐的简历看到上家公司是&lt;b&gt;stockroom&lt;/b&gt;，就点进去看了下，结果画风异常辣眼睛[捂脸][捂脸][捂脸] 在这样的公司工作是不是整天鸭梨山大啊&lt;/blockquote&gt;&lt;p&gt;发完之后，朋友圈都震惊了，电商还可以做得这么&lt;b&gt;直白&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/14&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;和阮老师相识是因为我的书的推荐序。我战战兢兢地联系了他，他让我把书稿发过去，他要通读，才决定是否给我写推荐序。大概一两周，他读完了，指出书中的一些问题，给我做了推荐。他很认真，很较真。我是读着他的博客和翻译的书成长起来的，受了他不少的影响。看了这篇文章的后半段，感到可气可笑，国内的圈子这么能diss，借diss别人来捧高自己。有首诗说的好：两个人从铁牢的窗外望去，一个看到了地上的泥土，一个看到了天上的星星。大家都不去摘星星而啃泥巴。我相信阮老师不会在意这些没有意义的非议。所谓&lt;b&gt;举世誉之不加劝，举世非之不加沮，定乎内外之分，辩乎荣辱之境&lt;/b&gt;。&lt;/blockquote&gt;&lt;p&gt;读《&lt;b&gt;阮一峰，加油！&lt;/b&gt;》有感&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/15&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;来围观我们怎么做事情[呲牙]&lt;/blockquote&gt;&lt;p&gt;发表了文章：《&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA3NDM0ODQwMw%3D%3D%26mid%3D2649828010%26idx%3D1%26sn%3Ddd9ab4fc624dde5a0b43134758e8f95c%26chksm%3D8704a8b6b07321a0789c66aa18c4941798949518309283a27d0af66fd2016b460e8ab189bb97%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Code is Law&lt;/a&gt;》。2018 我低产得&lt;b&gt;令人发指&lt;/b&gt;，但一篇篇都是好文。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/16&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;美版的“&lt;b&gt;少壮不努力，老大徒伤悲&lt;/b&gt;”。而且是至尊加强版 – 不读书，你的&lt;b&gt;基因&lt;/b&gt;直接就灭绝了:scream:[捂脸] #cupertino lib 让孩子们多读书也是操碎了心&lt;/blockquote&gt;&lt;p&gt;这是 Cupertino lib 里面的一个作品：一只霸王龙脖子上挂着牌子说：Dinosaurs didn’t &lt;b&gt;read&lt;/b&gt; and look what happened to them!! 妈蛋我最近就书读得少。怎么破？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/17&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;前几天小宝表演结束后换衣服需要帮忙，而宝妈要看住到处乱跑的小贝无法帮忙，于是她就大哭大闹（我不在有很大关系）。回去的路上宝妈一脸黑线，训斥小宝说：小宝，妈妈觉得你真是太难以相处了。没想到小宝怼回来：妈妈，我觉得你也很难相处。宝妈的无名业火蹭地就窜起来，吼道：你要是嫌我难相处，你就别当我女儿了。结果小宝不咸不淡地怼回来：&lt;b&gt;妈妈，可是虽然你难相处，我也没有不让你不当我妈妈呀&lt;/b&gt;。然后，宝妈乐了。#别惹蚂蚁 #造一座房子，得配得上科勒龙头&lt;/blockquote&gt;&lt;p&gt;那段异地分居的日子，每天的视频&lt;b&gt;苦涩&lt;/b&gt;而&lt;b&gt;甜蜜&lt;/b&gt;。一诺的 “你要相信，无论发生什么，一切都会过去的啊” 成了支撑我们前进的动力。好在去年十月结束了西雅图圣何塞的双城记，一家人在一起了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/18&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;很赞的视频。我觉得真的是要心如止水，要有自己的原则。即所谓：&lt;b&gt;居，善地；心，善渊；与，善仁；言，善信；正，善治；事，善能；动，善时&lt;/b&gt;。&lt;/blockquote&gt;&lt;p&gt;看 TED 演讲：&lt;b&gt;别让任何人打乱你的人生节奏&lt;/b&gt;，有感。&lt;/p&gt;&lt;blockquote&gt;晚上收拾屋子时，小宝跟妈妈说：妈妈，今晚爸爸回来，我们让他也睡大床好不好，他自己一个人睡我的小屋太可怜了。这娃，才两月，已经默认自己是主卧的主人了 #这位置，我不给，你不能抢[捂脸]&lt;/blockquote&gt;&lt;p&gt;离开三周，我已经俨然是小宝的客人了 [苦涩黑人脸]&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/19&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;一大早，在厨房忙活早餐，丫头拉着我给我讲解她做这幅画的来龙去脉，我煎蛋中，有一搭没一搭听着。最后她问我有没有什么问题。我问：为什么 daddy 的 d 是后来补上的，丫头敲黑板，爸爸你没有认真听。这个 d 飞走了，现在才飞回来，所以不在一起。&lt;/blockquote&gt;&lt;p&gt;小宝为了迎接我回家，做了一幅画，内容是 welcome home, daddy。daddy 的 d 飞走了。那一刻，我想起了电影：the pursuit of &lt;b&gt;happyness&lt;/b&gt;。there’s no &lt;b&gt;why&lt;/b&gt; in happiness, there’s&lt;b&gt; I&lt;/b&gt;.&lt;/p&gt;&lt;h2&gt;&lt;b&gt;05/20&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;早上进 stanford 时妈妈说，小宝你要好好学习，以后就可以像哥哥姐姐们一样上 stanford 了。小宝说好的妈妈。&lt;b&gt;那妈妈你小时候是不是不好好学习，所以没上成 stanford 啊 &lt;/b&gt; #&lt;b&gt;想君小时，必当了了&lt;/b&gt;&lt;/blockquote&gt;&lt;p&gt;现在的小朋友都成精了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;06/07&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;昨晚睡前给小宝讲了三顾茅庐的故事，光是解释顾和茅庐就花了好多时间。讲完后我说这个故事告诉我们如果你想别人帮你，要有耐心，要诚恳，要好好说话，这样才能打动别人。小宝说爸爸我懂了，妈妈每天晚上哄贝贝是不是就是三顾茅楼(她把茅庐总叫成茅楼）啊&lt;/blockquote&gt;&lt;p&gt;（未完待续）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-01-18-55222322</guid>
<pubDate>Fri, 18 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>数学之美</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2019-01-18-55222212.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55222212&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fbfa53033f58c0fc1f0f936271147fe6_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;把数学的美妙绝伦传递给一个六岁的女孩儿并不是件容易的事情。我们可以轻而易举地心算出任何一个 100 以内的数乘以 3 的结果，也可以道出「乘法是加法的累进」这样的总结，但六岁的孩子并不理解其中的奥秘。前两天我老婆许是受了数独的启发，在白纸上画了十乘十的格子，给小宝演示 100 以内任意一个数乘三，乘七，乘十一的结果（因为除法是乘法的逆运算，你也可以理解为可以被三，七，十一整除的数字），当枯燥的数字化作了图形，并且这图形展现出统计意义的规律，小宝本来对数学的好感被大大激发了，从这些图形中发现了很多有趣的事情。老婆便让我做个「简单」的应用，让小宝能够更好地了解数字及其背后的运算。&lt;/p&gt;&lt;p&gt;这是个宏大的命题 —— 我只能以小宝刚刚可以理解的乘法除法开始。代码写完之后随便调了几个数字一运行，我都不敢相信自己的眼睛 —— 原来那些简单的运算，还有如此美妙的分布：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b740a8ce5485a632468c3bdd115c9745_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;996&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1000&quot; data-original=&quot;https://pic2.zhimg.com/v2-b740a8ce5485a632468c3bdd115c9745_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b740a8ce5485a632468c3bdd115c9745_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;996&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1000&quot; data-original=&quot;https://pic2.zhimg.com/v2-b740a8ce5485a632468c3bdd115c9745_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-b740a8ce5485a632468c3bdd115c9745_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;注意绿色数字从右上到左下个位数字的 9，8，7 … 3，2，1 和十位数字的 1，2，3，4，5 …&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9fbbc8feea88f2a43357af02fc4d6553_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;993&quot; data-rawheight=&quot;997&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;993&quot; data-original=&quot;https://pic4.zhimg.com/v2-9fbbc8feea88f2a43357af02fc4d6553_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9fbbc8feea88f2a43357af02fc4d6553_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;993&quot; data-rawheight=&quot;997&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;993&quot; data-original=&quot;https://pic4.zhimg.com/v2-9fbbc8feea88f2a43357af02fc4d6553_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-9fbbc8feea88f2a43357af02fc4d6553_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;左上到右下个位数字的 1，2，3，4，…，十位数字隔行 2，4，6 …，1，3，5 …&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8c45429e018e4302a4ccee645c616694_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;801&quot; data-rawheight=&quot;1438&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;801&quot; data-original=&quot;https://pic1.zhimg.com/v2-8c45429e018e4302a4ccee645c616694_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8c45429e018e4302a4ccee645c616694_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;801&quot; data-rawheight=&quot;1438&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;801&quot; data-original=&quot;https://pic1.zhimg.com/v2-8c45429e018e4302a4ccee645c616694_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-8c45429e018e4302a4ccee645c616694_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;右上到左下也是个位数字9，8，7 … 3，2，1 和十位数字的 1，2，3，4，5 …，更齐整&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0a31ede5d17ec670223254b1692273d8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;668&quot; data-rawheight=&quot;1463&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;668&quot; data-original=&quot;https://pic1.zhimg.com/v2-0a31ede5d17ec670223254b1692273d8_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0a31ede5d17ec670223254b1692273d8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;668&quot; data-rawheight=&quot;1463&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;668&quot; data-original=&quot;https://pic1.zhimg.com/v2-0a31ede5d17ec670223254b1692273d8_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0a31ede5d17ec670223254b1692273d8_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;左上到右下个位和十位都以一递增，上百位之后个位数 1，2，3，4，5，…，十位数 2，3，4，5，… 齐整漂亮&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-520cd913775c70ce53b8c42d83270838_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;498&quot; data-rawheight=&quot;1444&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;498&quot; data-original=&quot;https://pic1.zhimg.com/v2-520cd913775c70ce53b8c42d83270838_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-520cd913775c70ce53b8c42d83270838_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;498&quot; data-rawheight=&quot;1444&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;498&quot; data-original=&quot;https://pic1.zhimg.com/v2-520cd913775c70ce53b8c42d83270838_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-520cd913775c70ce53b8c42d83270838_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;左上到右下十位数以一递增，逢三跳一，右上到左下，个位数又是 9，8，7，6，5，… 的规律&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-086ec90fe79f99d5f32ad9bfc6b128f8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;339&quot; data-rawheight=&quot;1220&quot; class=&quot;content_image&quot; width=&quot;339&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-086ec90fe79f99d5f32ad9bfc6b128f8_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;339&quot; data-rawheight=&quot;1220&quot; class=&quot;content_image lazy&quot; width=&quot;339&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-086ec90fe79f99d5f32ad9bfc6b128f8_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;右上到左下个位数9，8，7，6，…，十位数重复两次交替 1，3，5，7，9，和 0，2，4，6，8&lt;/p&gt;&lt;p&gt;这些规律是小宝和我在玩的过程中一点点发现的，大部分要归功于她，我只是做一点小小的总结和启发。&lt;/p&gt;&lt;p&gt;当然，本文的重点不在于这些对你而言过于简单的四则运算。我们是程序员，数学给了我们穿越时空的眼睛，我们要用它探究程序的奥义。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;幂等（idempotent）&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;幂等是很多程序员的装逼利器。在 code review 大家激烈撕逼的当口，你淡定而优雅地吐出一个烟圈，缓缓掐灭手头的烟蒂，清一清喉咙，嘶哑地来一句：这个 API 幂等么？绝对秒杀现场 99% 的格子衫。如果你还能够正确地拼对并且读对 idempotent，基本可以一战封候，不愁找不到女朋友。&lt;/p&gt;&lt;p&gt;那么究竟什么是幂等？&lt;/p&gt;&lt;blockquote&gt;Idempotent is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the result beyond the initial application. - wikipedia&lt;/blockquote&gt;&lt;p&gt;说白话就是：幂等是指被自己重复运算，结果还等于自己。说人话就是：f x f = f。这个规则放在计算机世界里，稍微弱化成一个函数 f(x) 可以被调用任意多次，其副作用保持不变。注意，这里的不变并不意味着没有副作用 —— 比如删除数据库里的一条主键为 k 的记录，无论调用多少次，其副作用都是 k 这条记录不存在。从这个意义上讲，没有副作用的纯函数（pure function）一定是幂等的，幂等函数不一定是纯函数。&lt;/p&gt;&lt;p&gt;&lt;b&gt;幂等的好处是带来（副作用的）确定性&lt;/b&gt;。HTTP GET / PUT / DELETE 被设计成幂等的，是因为资源的获取，替换和删除无论被调用一次还是多次，资源的状态保持不变。这样，调用者可以多次调用（刷新页面）而不必担心引发错误。&lt;/p&gt;&lt;p&gt;在一个分布式的世界里，幂等是皇冠上的钻石。我们要尽可能（或者说不得不）将系统设计为幂等，来应对各种各样的不确定性。比如郭靖通过互联网给华筝转账 10 个金叶子，华筝可能没收到，也可能收到了但是给靖哥哥的回复在网络上丢了，两种情况郭靖都需要重传这笔交易，然而重传导致的后果可能是郭靖明明只需要给华筝转 10 个金叶子，却转了 20 个。如果设计成为幂等，我们可以在转账交易中加入一个唯一标识，这样重复的转账就会被丢弃，从而保证一致的副作用。&lt;/p&gt;&lt;p&gt;我们把这个例子稍微抽象一下。在一个消息处理的系统里，如果我们能有以幂等的方式处理消息 —— 就是说同一个消息，我收到 (1, n) 次，其副作用是不变的 —— 那么很多复杂的事务性的问题就迎刃而解了，同时我们也可以降低消息系统的复杂性 —— 我们知道，在一个消息系统里，消息送达的模式有：&lt;b&gt;at least once&lt;/b&gt; 或者 &lt;b&gt;at most once&lt;/b&gt;。这两种都很好实现，但要想能够达到 &lt;b&gt;exactly once&lt;/b&gt; 则几乎是 mission impossible。&lt;/p&gt;&lt;p&gt;这中消息处理的幂等能力在网络协议中很多见，主要用作 anti replay；以太坊的世界里，transaction nonce 就是这个作用。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;交换律（commutative）&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;和幂等不同的是，交换律及下面要谈到的结合律都是小学数学就会涉及的范畴（虽然 &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;x&lt;/i&gt;) = &lt;i&gt;x&lt;/i&gt; * 1, &lt;i&gt;g&lt;/i&gt;(&lt;i&gt;x&lt;/i&gt;) = &lt;i&gt;x&lt;/i&gt;/1, &lt;i&gt;h&lt;/i&gt;(&lt;i&gt;x&lt;/i&gt;) = &lt;i&gt;x&lt;/i&gt; + 0 这些显然也是幂等的范畴，但小学不会引入幂等的概念），不到特殊场合，拿出来装逼只能贻笑大方。&lt;/p&gt;&lt;p&gt;交换律是说给定任意 x, y，对于运算 “*“，如果 &lt;i&gt;x&lt;/i&gt; * &lt;i&gt;y&lt;/i&gt; = &lt;i&gt;y&lt;/i&gt; * &lt;i&gt;x&lt;/i&gt;，那么我们就认为这个运算是可交换的。拿人话来说就是我们可以改变处理的事件的顺序而不影响其最终的结果。对我女儿来说，她很容易理解（加法的）交换律：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4a2a8eff22caf8103d2139d5a778917e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;533&quot; data-rawheight=&quot;281&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;533&quot; data-original=&quot;https://pic3.zhimg.com/v2-4a2a8eff22caf8103d2139d5a778917e_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4a2a8eff22caf8103d2139d5a778917e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;533&quot; data-rawheight=&quot;281&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;533&quot; data-original=&quot;https://pic3.zhimg.com/v2-4a2a8eff22caf8103d2139d5a778917e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-4a2a8eff22caf8103d2139d5a778917e_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在计算机的世界里，&lt;b&gt;交换律意味着我们可以打算指令（或者消息）的顺序，进行乱序执行&lt;/b&gt;。在我们这个热力学第二定律统治的宇宙下，乱序执行一定比顺序执行更有能效。在一个消息系统里，如果消息要按照发送的序列严格处理，就意味着在接收端需要使用队列来存储和排序已经收到的消息，前一个消息没有处理，不能处理下一个消息，那么，这样的系统效率比较低；如果我们能够将其改进成为消息可以按照收到的顺序处理，也就是满足了交换律，那么，效率可以成量级地提高。&lt;/p&gt;&lt;p&gt;假设我们要计算从网络另一端传输过来的一到一百的数字之和，传输过来顺序可能是：&lt;/p&gt;&lt;blockquote&gt;2 7 3 8 1 9 6 5 4 …&lt;/blockquote&gt;&lt;p&gt;如果我们的算法不满足交换律，那么它需要花 O(&lt;i&gt;nlogn&lt;/i&gt;) 到 O(&lt;i&gt;n&lt;/i&gt;2) 的时间维护有序列表，同时需要 O(n) 的空间来维护等待处理的队列（比如：收到 1 之前的，排好序的 2 3 7 8）。系统最坏的延迟是 &lt;i&gt;na&lt;/i&gt; + &lt;i&gt;nb&lt;/i&gt; + &lt;i&gt;n&lt;/i&gt;2&lt;i&gt;c&lt;/i&gt;（假设 a 是传输一个元素的延时，b 是一次加法所需要的时间，c 是在列表中移动一次并比较的时间）。&lt;/p&gt;&lt;p&gt;如果满足交换律，那么就意味着我收到 2，就可以计算 0 + 2 = 2，收到 7，计算 2 + 7 = 9，一路下来，不需要花时间和空间维护列表，同时系统的延时只有 &lt;i&gt;na&lt;/i&gt; + &lt;i&gt;b&lt;/i&gt;（假设 a &amp;gt; b，在等待收下一个元素的时间 a 里，当前的元素累加所花的时间 b 已经被包含进去）。&lt;/p&gt;&lt;p&gt;从上面的讨论可以看到，在一个消息系统里，如果一个算法能够满足交换律，那么，其大大降低了系统的复杂性，也大大缩减了系统的延迟。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;结合律（associative）&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;结合律是说给定任意的 x, y, z，对于运算 “*“，如果 (&lt;i&gt;x&lt;/i&gt; * &lt;i&gt;y&lt;/i&gt;) * &lt;i&gt;z&lt;/i&gt; = &lt;i&gt;x&lt;/i&gt; * (&lt;i&gt;y&lt;/i&gt; * &lt;i&gt;z&lt;/i&gt;)，那么我们就说这个运算是可结合的。拿人话来说就是，只要参与计算的元素的顺序不变，我可以随意改变运算的顺序，而不会影响最终的结果。在初等数学里，实数的加法和乘法都是可结合的，比如 (1 + 2) + 3 = 1 + (2 + 3)。&lt;/p&gt;&lt;p&gt;注意，满足交换律并不意味着满足结合律，比如运算 “*&quot; 的定义是 f(x, y) = &lt;i&gt;x&lt;/i&gt;2 + &lt;i&gt;y&lt;/i&gt;2，&lt;i&gt;f&lt;/i&gt;(&lt;i&gt;f&lt;/i&gt;(&lt;i&gt;x&lt;/i&gt;, &lt;i&gt;y&lt;/i&gt;), &lt;i&gt;z&lt;/i&gt;) = &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;z&lt;/i&gt;, &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;y&lt;/i&gt;, &lt;i&gt;x&lt;/i&gt;))，即 (&lt;i&gt;x&lt;/i&gt;2 + &lt;i&gt;y&lt;/i&gt;2)2 + &lt;i&gt;z&lt;/i&gt;2 = &lt;i&gt;z&lt;/i&gt;2 + (&lt;i&gt;y&lt;/i&gt;2 + &lt;i&gt;x&lt;/i&gt;2)2，显然满足交换律，但：&lt;/p&gt;&lt;p&gt;&lt;i&gt;f&lt;/i&gt;(&lt;i&gt;f&lt;/i&gt;(&lt;i&gt;x&lt;/i&gt;, &lt;i&gt;y&lt;/i&gt;), &lt;i&gt;z&lt;/i&gt;)! = &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;f&lt;/i&gt;(&lt;i&gt;x&lt;/i&gt;), &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;y&lt;/i&gt;, &lt;i&gt;z&lt;/i&gt;))，即 (&lt;i&gt;x&lt;/i&gt;2 + &lt;i&gt;y&lt;/i&gt;2)2 + &lt;i&gt;z&lt;/i&gt;2! = &lt;i&gt;x&lt;/i&gt;2 + (&lt;i&gt;y&lt;/i&gt;2 + &lt;i&gt;z&lt;/i&gt;2)2。显然不满足结合律。&lt;/p&gt;&lt;p&gt;在计算机的世界里，&lt;b&gt;结合律意味着计算的顺序可以发生变化&lt;/b&gt;。比如快排算法，在 partition 之后，先处理小于基准点的数组，还是先处理大于基准点的数组，并没有关系，所以它是满足结合律的。&lt;/p&gt;&lt;p&gt;我们进一步思考，可以发现，满足结合律意味着处理过程中的局部状态并不受全局状态的影响，或者说独立于全局状态，于是，&lt;b&gt;结合律还意味着并发处理&lt;/b&gt; —— 对于一个给定的列表，如果处理列表的算法是满足结合律的，那么就意味着我们可以对列表中的子列表进行并发计算，而并不影响最终的结果。反过来表述，一切可以分治的算法，都满足结合律。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;幂等 x 交换律 x 结合律：？？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在一个分布式网络里，消息的传递是不确定的，这种不确定性有二：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;消息可能丢失。丢失是件很讨厌的事情，于是我们加入重传，这样引入新的不确定性：消息有可能重复。接收方可能收到 (1, n) 次。&lt;/li&gt;&lt;li&gt;消息可能乱序。乱系意味着同一个网络中的 n 个节点，他们最终收到的消息序列的顺序可能互不相等，并且不可预测。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;假设两个节点 (A, B) 的网络，收到三个消息 (x, y, z)，它们看到的结果可能是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A: xzzyzy&lt;/li&gt;&lt;li&gt;B: yyzzxxxzy&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果 A 和 B 肯定能收全所有消息，并且根据这些消息，可以推导出一致的状态 S，那么我们就称这个系统具备一致性。&lt;/p&gt;&lt;p&gt;一般而言，我们可以引入某种同步机制让所有人看到顺序一致的消息 —— 比如数据库系统会使用 leader election 选出主节点，由主节点来确定顺序；而区块链中会使用算力或者投票权通过某种共识算法选择出某一时刻的主节点，所有节点接受主节点确定的消息顺序。&lt;/p&gt;&lt;p&gt;然而，我们也可以在数据结构和对数据结构的处理上，同时引入幂等，交换律和结合律。这样，从数学的角度，我们可以计算出 A 和 B 的最终状态都会收敛在 x * y * z 上。&lt;/p&gt;&lt;p&gt;我们先不看怎么设计数据结构和算法，如果我们达到这个效果，那么就意味着网络中的所有节点可以各自独立地推导出一致的状态，不需要任何的同步，那么，网络本身运行的效率将会非常高效，且能够不付出太多代价的前提下满足 Crash Fault Tolerance (CFT)，甚至，经过一些改进，满足 Byzantine Fault Tolerance（BFT）。&lt;/p&gt;&lt;p&gt;如果你觉得有意思，以后我们可以讲讲实现这个理想的数据结构 CRDT（Conflict-free Replicated Data Types）。&lt;/p&gt;&lt;p&gt;欢迎回到数学的世界！&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2019-01-18-55222212</guid>
<pubDate>Fri, 18 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>数据：逍遥游</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-11-15-49915113.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/49915113&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7ad6ea6f456b42e2c4e41de3d30b9812_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;天之苍苍，其正色邪？其远而无所至极邪？其视下也，亦若是则已矣。 - 《逍遥游》&lt;/blockquote&gt;&lt;p&gt;对程序员来说，数据是我们时刻都在打交道的东西。我们的代码如同一台机器，把进入的数据转换或者映射成出来的数据。数学上，不过是：&lt;code class=&quot;inline&quot;&gt;y = f(x)&lt;/code&gt; 而已。数据就像庄子口中的鱼，在代码的作用下，一会化身为文件，在文件系统里「沉潜」，一会化身为变量，在内存中「浮动」，一会又扶摇直上，化身为字节流，在网络中「翱翔」。&lt;/p&gt;&lt;p&gt;周易里说：简易，变易，不易。数据再变化多端，复杂深奥，我们只要厘清了它的概念，摸清了它的脾性，就能掌控它，驾驭它；再从它的千变万化之中，找到一些固定的规律，就能成为它的主人。倒时差睡不着觉，突然想到了这个话题，便欲与诸君聊聊。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;概念&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;概念是事物的本元。含混不清的概念会导致含混不清的关系，进而把思维拖入含混不清的泥潭。工欲善其事，必先正其名。我们看看，围绕着数据，都有哪些概念。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;标识&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;标识是唯一能够代表数据本身的「名字」。这里有两重含义：1）唯一 2）代表。很多时候我们把标识和名字混淆。我的公众号的名字叫「程序人生」，但这个名字并不代表这个公号，任何公号都可以取名「程序人生」。所以标识必须唯一。在实际的工作中，我们往往只是关注到了标识的唯一性，却忽视了它的代表性。想想看，ID 是否是一个标识？99.999% 的情况下我们都会说 ID 等同于标识。我们通过王小二的身份证号可以精准找到王小二这个人，但是身份证号和王小二之间的联系是脆弱的单向连接关系。我找到了王小二，但单独从王小二身上我们并不能推演出他的身份证。80后大概还记得，大概十几年前，我们的身份证号码经历了 15 位到 18 位的更迭，旧的号码依旧唯一，但它失去了和它联系在一起的数据。标识既然能够代表数据，那么，数据理应也能够使用某种算法确定地推导出其标识；同样的，数据的标识不可能改变，也不应该改变。&lt;/p&gt;&lt;p&gt;符合这个条件的标识，对于人来说，是虹膜，指纹，DNA，哪怕王小二改名叫王小三，身份证从中国的换成泰国的，她还是那个他。对数据而言，符合这个条件的标识，是数据的 md5，sha1，sha2，sha3 等。&lt;/p&gt;&lt;p&gt;注意，标识唯一代表数据，但数据的标识可以并不唯一，这个不矛盾。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;地址&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们剥茧抽丝，把标识从与其纠缠的诸多概念中分离，有利于我们对后续内容的阐述。搞清楚标识后，地址就容易理解多了。地址是用来定位和寻找数据的，它是单向连接的，也是唯一的。从这个角度来说，地址是标识的超集，标识是地址的子集。上文提到的身份证号，就是一个地址。其它常见的地址还有数据库中一条记录的 ID，当然，更准确地说，数据库主机名 + 数据库名 + 表名 + ID，是这条记录的地址。包含完整路径的文件名是文件内容的地址。一个包含 IP 地址和端口的五元组（src ip, src port, dest ip, dest port, protocol）是一个 socket 连接的地址。&lt;/p&gt;&lt;p&gt;地址和地址对应的内容其实构成了一个逻辑上的 kv store。所以一个文件系统，本质上是一个 kv store，给我一个文件名（key），我就可以找到并且给你它的内容（value）。&lt;/p&gt;&lt;p&gt;我们说标识是地址的子集，那么如果我们就用数据的标识来寻址数据呢？这打开了一个奇妙的世界 —— 我们标识指向了数据，而数据本身又能推倒出来标识，从而证明 &lt;b&gt;我要寻址的内容，的确是我要寻址的内容&lt;/b&gt;。仔细咂摸这句话的威力。举个例子，夜深人静，你猥琐地带上耳机，颤巍巍的右手点开了 苍井空.avi，打开却是「般若波罗蜜多心经」。。。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;引用&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;搞懂了地址，那么引用是什么？我们为什么需要引用？引用是一个中间人（middleware），它把数据的地址和处理数据的上下文联系起来。人的名字就是一个最重要的引用。有了名字，人们便不必费力地记忆 9527，而是使用「华安」来指代 9527。在华府的上下文里，9527 是华安，出了华府，就是伯虎。所以我们说引用把数据的地址和上下文联系起来。从这个意义上讲，引用是一种隔离（indirection），它让被它隔离的上下两层可以互相不知道对方的存在。计算机世界里有句名言：Any problem in computer science can be solved with another layer of indirection。由此可见引用的巨大威力。Clojure 之父 Rich Hickey 在他的演讲 Simple made easy 中说：引用让我们避免糟糕的 PLOP - PLace Oriented Programming。&lt;/p&gt;&lt;p&gt;有了引用，你可以使用变量名来指代变量的内存地址，从而对数据进行读写，避免了代码被锁死在某种 CPU 的寻址能力上；你可以使用 &lt;code class=&quot;inline&quot;&gt;git reset HEAD~1&lt;/code&gt; 而不用关心当前的 &lt;code class=&quot;inline&quot;&gt;HEAD&lt;/code&gt; 究竟指向阿猫还是阿狗；你也可以 symbol link 让 current.log 指向系统中当前的日志文件，从而程序不用关心当前日志文件的具体位置。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;特性&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;区分清楚数据的标识，地址和引用后，我们接着讲数据应该具备的特性。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;不变&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;数据最重要的一个特性是：数据本质上是不可变的。这个论点很反大家的直觉，但如果我们加上时空的维度，就好理解一些。假设我们有数据 D0，在 t1 时刻，发生了事件 E1，导致这个数据迁移到 D1。这是数据发生变化的基本模式。我们目前的处理方式是：in-place update —— 直接把 D0 指向的内存地址或者文件位置写入 D1 的内容。数据 D0 变成了 D1，所以，我们认为它是可变的。然而，在 t0 时刻，数据依旧是 D0，这个事实是无法改变的。如果我们认清了这一点，不要做 in-place update，就能大大简化我们处理问题的方法。&lt;/p&gt;&lt;p&gt;比如在多线程的上下文，线程 alice，bob 和 tyr 都拿到了 t0 时刻的数据 D0 的引用。alice 使用她的引用，把 D0 迁移到 D1，并不会影响到 bob 和 tyr 对 D0 的使用，在他们各自的世界里，他们依旧看到的是 D0。这样，bob 和 tyr 不必担心 alice 的写入行为导致他们的代码崩溃，因而无所谓关键区的保护和上锁了，也就意味着 alice，bob 和 tyr 尽管作用于同一个数据之上，它们并不需要知道彼此的存在。从这个意义上讲，数据的不可变可以大大降低代码的上下文依赖。&lt;/p&gt;&lt;p&gt;多线程的这个例子放在 git 上，alice，bob 和 tyr 就是从同一个 master 分离出来的几个分支。它们可以独立完成它们的工作，互不干扰。只有当 alice 要把自身的工作合并到 master 时，她才需要看看 master 在最新的时刻和自己从 master 分离出来的时刻发生了哪些变化，自己能否适应这些变化：是 rebase，merge 还是 resolve conflict。&lt;/p&gt;&lt;p&gt;「数据不可变」这种看待数据的方式有着弥足珍贵的价值。&lt;/p&gt;&lt;p&gt;数据在内存中不可变，可以高效解决并发问题。大部分函数式编程语言使用了这一特性，让简洁可并发的代码易如反掌。不可变并不意味着数据不可修改，而是修改之后的状态并不影响修改之前的状态。要达到这样的效果，最直白的方法是只要有修改，就进行内存复制，但这种方式低效。persistent data structure 的发明和使用，让数据的不可变在性能上和效率上具备可操作性。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-549bac965615d1604b3a2affb69cb926_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;762&quot; data-rawheight=&quot;452&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-549bac965615d1604b3a2affb69cb926&quot; data-watermark-src=&quot;v2-9f9d2d576b22038225e955ec2698ab18&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;数据在持久化存储（比如硬盘）上不可变，可以用于追踪版本的变化。git 通过这种方式打造了一个极为特别的文件系统，在 VCS（Version Control System）领域舍我其谁。&lt;/p&gt;&lt;p&gt;不变意味着数据可以用其标识进行寻址，这样数据便和位置无关，可以放在任何地方：可以在远端的自己并不拥有主权的服务器上，也可能在本地的某个角落。它可以被缓存，可以被验真，可以被高效地保存（无损压缩），可以衍生出新的数据并且追踪和验证这些衍生数据。&lt;/p&gt;&lt;p&gt;解释一下数据的衍生。比如说一张 3200x1800 的照片 —— 我们将其衍生出 800x450 的缩略图。照片的寻址使用 sha2，在衍生出来的缩略图中我们携带原图的 sha2 以及衍生过程所使用的算法。假设原图的 sha2 地址是 abcd，缩略图是 efgh，那么，我们可以从衍生出来的缩略图中找到原图的地址 abcd，并且进而拿到原图的内容。之后我们可以用相同的算法算出缩略图，然后计算其地址，如果是 efgh，那么可以证明这个缩略图衍生自原图。&lt;/p&gt;&lt;p&gt;稍稍多说两句 git。&lt;/p&gt;&lt;p&gt;git 对自己的定位是 content-addressable file system。VCS 只是 git 能力的一种体现而已（而代码管理仅仅是 VCS 的一种应用而已，看看，我们就这么暴殄天物）。所谓 content-addressable，就是上文中我们说可以用数据本身的标识来寻址数据。用数据的标识来寻址数据，其先决条件一定是是数据不可变，二者相辅相成。因为唯有数据不可变，数据的标识才不变，才能够用作寻址的手段。git 使用这种方式把一个个文件组织成一棵树，再生成一个指向这棵树的 commit。之后，数据内容的变化导致新的树的产生，最终形成一个庞杂的 DAG（有向无环图）：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9604f6401f74f057e2481aac8be0ae8b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;358&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9604f6401f74f057e2481aac8be0ae8b&quot; data-watermark-src=&quot;v2-10bbef7e1139c4a7a4e17f86744e0de5&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;然而，我们知道，光有地址还无法无法方便使用数据，我们需要引用，于是有了 head / tag / branch，让我们可以给一个个枯燥难懂的 sha1 地址起名，比如默认的 master branch，某个 release 的 tag，它们都是对一个个 commit 地址的引用：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f6b0ac738f521b6ce451405aed0a83bc_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;533&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f6b0ac738f521b6ce451405aed0a83bc&quot; data-watermark-src=&quot;v2-9ca0fbc80ed4dead97227c114fded33f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;IPFS（Inter-Planetary File System）进一步把 git 用来描述文件和目录树的 DAG 和 p2p 网络结合起来，打造了一个去中心化的文件系统。我们先抛开 p2p 这部分不谈，看看把整个文件系统用 content-addressable 的方式来描述有什么好处？首先，寻址到的文件能够自证其白，你想要找的 QmarHSr9（苍井空.avi 的 content-address），就是你想要的 avi，一帧不多，一帧不少。其次，你可以在文件的不同版本中漫游。由于每次改动都会导致产生新的标识，从而生成了一个新的树，所以任意时刻的改动都可以很方便地被找到。&lt;/p&gt;&lt;p&gt;和现有的文件系统相比，你也许会担心这种文件系统对资源的额外消耗。的确多了不少，但这是值得的。就跟函数式编程语言的 persistent data structure，浪费了一些内存，但收获到的好处远比这种浪费要多得多。文件现在有了版本，可以恢复到任意状态； 可以自证 —— 地址的的确确代表了内容；由于这种寻址方式和具体的位置无关，我们还可以把文件的不同部分分散到不同的机器上 —— 因为文件的每个部分都可以自证，所以我们不担心恶意的机器上篡改文件内容。让文件的访问和文件在互联网或者局域网上的位置无关，同样的内容全网只会逻辑（物理上还是会有冗余）上存在一份（因为地址相同），可以大大减少存储（想想 江南 style 全网有多少份拷贝），同时提高访问效率 —— 想象一下，5G 时代，网络的速度高于磁盘访问的速度，文件的不同部分存在不同的地方能够更快地获取文件。&lt;/p&gt;&lt;p&gt;5G 时代会大大改变我们获取数据的方式：1) 网络的速度高于磁盘访问的速度，因而数据从本地读取和从网络读取几乎没有差异 2) 本地的存储容量在很短时间内被网络数据塞满（假设 5G 速度达到 10Gbps，你的 1T 硬盘也就能装 20 分钟的流量承载的数据），在这样的环境下，数据的分布式存储是是唯一选择。所以，IPFS 背后的技术，在 5G 到来后会有非常广阔的前景。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;连接&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;所谓聚沙成堆，集腋成裘，数据与数据产生连接会有量变到质变的效果。1个字节的数据仅能容纳 256 个状态，而 1GB 数据可以承载王者荣耀。一个文件描述了伏尔加河畔的一个生活场景，而一组文件可以构成恢弘的「战争与和平」。World Wide Web 对人类世界的巨大贡献是数据通过 URI 有了唯一的地址，这些地址进而通过超文本链接的形式被连接起来。于是，原本零零散散于 FTP 之上的文件以一种网状的结构被重新组织 —— 信息不再是孤零零宅着，而是以某种顺序构成一个个鲜活的有机体。&lt;/p&gt;&lt;p&gt;数据的连接大大拓展了数据的边界和数据本身的意义，然而，web 最大的问题也源自于它的组织方式：URI。URI 是 Rich 口中典型的 PLOP，它混淆了地址和标识。URI 背后的网站可能会消失，URI 映射到的内容可能会损坏，因此，你消费一个 URI 是一件不确定的事情：它可能 404，可能 500，可能两小时前和两小时后拿到的内容完全不同。这种不确定性使得我们在处理连接时需要耗费很多额外的精力去处理各种异常。&lt;/p&gt;&lt;p&gt;我们上面讲到，git 通过一棵不可变的树来管理内容。如果内容变化，会产生新的树。如果把一个网站看成是一个 git repo 组成的小树林，那么 web 就是千千万万个小树林交织成的亚马逊。网站 A 连接网站 B 的数据，并不会因为网站 B 修改该数据而失效，因为在 git 的世界里，一个对 commit hash 的引用永远有效（假设 git push -f 被禁用）。&lt;/p&gt;&lt;p&gt;在不远的将来，我们的 web 会以 git 的方式去连接。当这种连接形成后，web 不再仅仅是一种「空间」上的连接，还是一种「时间」上的连接。到那时，就没有 internet archive 什么事了，因为，一切过去，现在，以及未来都会以一种不可变的方式被记录和连接起来。&lt;/p&gt;&lt;p&gt;以上。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;继续预告一下我们这次区块链漫游指南北京站的活动，机不可失，欢迎大家翘班来听：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bae6dbb56567a6a3f898631b50c69afe_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;2000&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-bae6dbb56567a6a3f898631b50c69afe&quot; data-watermark-src=&quot;v2-b7bbf896f9d34823476b1f2780814fed&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;12:30-13:00: 签到
13:00-13:50: 公开可验证：去中心化的必经之路
13:55-14:15: 场景一：去中心化账本 - 比特币
14:15-14:35: 场景二：去中心化计算 - 以太坊
14:35-14:55: 场景三：去中心化文件系统 - IPFS
15:00-15:45: 入门指南：如何在以太坊上构建 dApps
15:50-16:30: 入门指南：如何使用 ArcBlock Forge 锻造你自己的区块链&lt;/code&gt;&lt;p&gt;这次活动我们和承办方微软创新车库一起，献上一场长达四个小时的饕餮盛宴。时间上对上班族可能不那么友好，但内容绝对精彩，不容错过！&lt;/p&gt;&lt;hr&gt;&lt;p&gt;好看的皮囊千篇一律，有趣的灵魂万里挑一。欢迎大家多多关注「程序人生」，在这里你能接触到不一样的思考，不一样的人生。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-11-15-49915113</guid>
<pubDate>Thu, 15 Nov 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>在程序中时间旅行</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-11-07-48822123.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/48822123&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7cb4eda0a2d2711fad3a337d335e0d71_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;Nor Time, nor Place, nor Chance, nor Death can bow. My least desires unto the least remove. - “The Time Traveler’s Wife”&lt;/blockquote&gt;&lt;p&gt;三年前，当我写下那篇青涩的『&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=206436214&amp;amp;idx=1&amp;amp;sn=2140cf7b2894c4fdeb49ad4458d0fb3e&amp;amp;scene=21#wechat_redirect&quot;&gt;永恒不变的魅力&lt;/a&gt;』的文章时，我刚刚是 elixir 和 clojure 的入门者。我如饥似渴地从 Bret Victor，Rich Hickey 等人身上吸取思想和力量，来浇筑我对函数式编程的信仰。函数式编程语言中有诸多让人赞不绝口的设计思想，但 immutability（不可变）显然是皇冠上的明珠。它让我们可以肆无忌惮地使用并发，不必考虑 lock，因为没有 critical section 可言；它让我们不必再终日在野指针造成的 segment fault，坏引用导致的 exception 中彷徨哀怨甚至自戕。当我们用一个产品的时候，确定性让我们感到安全和愉悦 —— 你使用微信，发给朋友的信息如果代表发送的小菊花停了没有惊叹号，那就一定成功了，这就是确定性；immutable 给程序员带来的确定性是：我给你一个引用，只要你拿着，就算到了天荒地老，海枯石烂它也能够访问，且还守候着原来的值。&lt;/p&gt;&lt;p&gt;有没有想过，这么好的东西，为什么前辈们不使用呢？&lt;/p&gt;&lt;p&gt;非不为也，实不能也。immutable 是好，但是「浪费」内存啊。&lt;/p&gt;&lt;p&gt;当机器的内存以 KB 为单位时，描述复杂状态的程序都力不从心，自然只能尽可能地重复利用每一个 bit，以期它能发挥最大的作用。什么 “copy on write”，一边去。&lt;/p&gt;&lt;p&gt;八九十年代，内存虽然到了 MB 级别，但 DOS 受限于实模式的寻址能力，还是把内存分成了五环内（低 1M）和五环外（超过 1M 的 expanded memory），所以那时的程序员依旧以扣内存闻名。&lt;/p&gt;&lt;p&gt;千禧年后，内存在亚 GB 级别往 GB 级别过渡，操作系统早已完全采用 32 位保护模式，正往 64 位过渡。大部分应用程序开发者渐渐无需考虑内存的天花板，就算一不小心把物理内存用超了，还有 swap 兜底，管够。但是，牛顿告诉我们，程序员是懒惰的，没有外力作用的时候，会产生惯性，也就是路径依赖。&lt;/p&gt;&lt;p&gt;路径依赖导致 immutable 的思想人人叫好，但依旧只是用在少量的场合，比如 git，docker，react，当然，还有区块链。&lt;/p&gt;&lt;p&gt;还有一个原因。看待世界的方式。我们所运行的世界究竟是一个可变系统（mutable system）还是一个不可变系统（immutable system）？我们先来研究自己的大脑。大多数人第一反应可能会觉得大脑是个可变系统，然而仔细想想，它是不可变的。我们的记忆就像洋葱圈一样，不断叠加，而不会修改。拿我家的电话号码来说，我脑袋里能立刻蹦出来好几个号码，有四位数的，那是小时候家里安装的第一部电话，有广东的，北京的，圣何塞的，西雅图的，等等。所以大脑是个不可变系统，数据一旦产生，大脑只会将其连接起来，并不会修改。我们再看日常发生的各种事件 —— 今天的气温，世界各地的新闻，楼下弹钢琴的孩子，所有这一切都是不可变的。气温看上去在变化，但这取决于建模的方式，如果气温不是一个值而是一个以时间为刻度的 vector 呢？&lt;/p&gt;&lt;p&gt;所以当我们把世界看成一个个只有最终状态的点的时候，它是不断变化的；然而加上时间的维度，它是不可变的 —— 在一个初值 (genesis state) 下，发生了一系列不可变的事件（event），最终导致了当下这个状态（state）。这是我们这个世界运作的方式，可惜，在大部分时间，不是我们撰写程序的方式 —— 即使我们的程序要么和现实世界打交道，要么在模拟现实世界。&lt;/p&gt;&lt;p&gt;Bret Victor 在他著名的讲座 Inventing on principle，展示了改变认识如何让我们拥有一个又一个 voila moment，比如这个截图，游戏中的时间旅行：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1dcb90b1ec67b04f06f1a0d0c6d666c8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;986&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-1dcb90b1ec67b04f06f1a0d0c6d666c8&quot; data-watermark-src=&quot;v2-036c8aeffa6bf5cb32d5ca4bb80548cf&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在程序中做时间旅行并不是件新鲜事，我们每天使用的 git 就可以让我们自如地在历史上发生的任何一个 commit / tag / branch 上切换：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f6b0ac738f521b6ce451405aed0a83bc_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;533&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f6b0ac738f521b6ce451405aed0a83bc&quot; data-watermark-src=&quot;v2-9ca0fbc80ed4dead97227c114fded33f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;而 clojure 的一个 pixel editor，Goya，也用时间旅行的方式来做 undo / redo，非常简单：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d016e32cbeb0e4971d0d9e9ae5dd2223_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;266&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d016e32cbeb0e4971d0d9e9ae5dd2223&quot; data-watermark-src=&quot;v2-c9fd1990d659cf413ac6196cace9b225&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;而要做到这一切，首先我们要使用 genesis state + events 的方式来描述应用程序里的世界。在 git 里，一个个 commit 就是一个个 event；在 goya 中，画笔的每一次动作，就是一个 event。&lt;/p&gt;&lt;p&gt;然后，我们需要用一个合适的数据结构来保存 state - Chris Okasaki 的 Purely Functional Data Structures 向我们揭示了 persistent data structure 的神奇魔力 —— erlang 的发明者，Robert Verding 据说就是照着 PFDS 这本书的例子写出了 erlang 的数据结构的支持：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-549bac965615d1604b3a2affb69cb926_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;762&quot; data-rawheight=&quot;452&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-549bac965615d1604b3a2affb69cb926&quot; data-watermark-src=&quot;v2-9f9d2d576b22038225e955ec2698ab18&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在这里，数据保存在叶子节点上，然后以数据的索引为基础构建出来一棵树。当整个结构的某些数据变更时，我们只需要产生新的数据，然后产生索引该数据和未改变数据的一棵新的树，从而在空间上避免 immutable 产生的拷贝。在函数式编程语言中，旧的树如果没有人用了，GC 就回将其回收，但如果我们把每个 event 产生出来的新的树和旧的树链接起来，或者记录下来，就具备了时间旅行的能力。&lt;/p&gt;&lt;p&gt;git 使用了 Merkle tree（更准确地说 Merkle DAG）来存储所有 commit 的所有 object。和 persistent data structure 思路类似，数据（commit 里的 objects）在叶子节点上，只不过连接叶子节点的索引是其 hash，而非普通的 key。Merkle DAG 的使用非常广泛，从 Plan 9 OS 到 BitTorrent，从 git 到 bitcoin / ethereum，等：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-227537aaed9cfeff6bcc73fe4e64571e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;616&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-227537aaed9cfeff6bcc73fe4e64571e&quot; data-watermark-src=&quot;v2-d10eba245c83aec0725e1de9335bebde&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;我们知道，通过初始的 genesis state，不断顺序叠加 event，可以构成任意时刻的 state，这样的设计思路是 event sourcing。而使用 event sourcing，把当前的 state 用 Merkle DAG 管理并保存下来，再使用公钥加密算法使所有的 event 和 state 都 public verifiable，就构成了我们所熟知的以太坊。&lt;/p&gt;&lt;p&gt;在以太坊里，其 event 是 transaction，state 使用 Merkle Patricia Tree 保存。如果把以太坊看成是一个自给自足的世界，那么其 fork 就是这个世界在平行宇宙中的另一个世界，而我们人类就像『星际穿越』中的五维人，可以在以太坊世界中进行时间旅行 —— 比如，我要回到 2017 年 1 月 13 日，去探索那个时间点这个世界里所有账户的状态，只需要找到 4904084 这个块里的 state root，找到这个 hash 下面对应的数，然后从这棵树一路往下挖掘信息。&lt;/p&gt;&lt;p&gt;那么，如果我们需要以太坊任意一个时刻的状态呢？回答这个问题之前，我们先来回答，在以太坊的世界内，时间究竟是什么？时间是区块的高度。所以，在以太坊内进行时间旅行，就是在获取不同块高下的&lt;b&gt;状态&lt;/b&gt;。然而，以太坊自己的时间对人类来说是晦涩的（1 eth second ~= 12s），所以我们需要先将人类社会的时间映射到以太坊上的块高，然后找到给定的人类时间下最接近的块高，就得到了以太坊下的任意时间内的时间旅行。&lt;/p&gt;&lt;p&gt;以上。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;我下周一回国，会在上海参加 kubeconf；在深圳出席 techrunch 的黑客马拉松，代表 arcblock 负责区块链方向；以及在微软做一次区块链的深度技术讲座，欢迎参加活动的读者们勾搭。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-11-07-48822123</guid>
<pubDate>Wed, 07 Nov 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>区块链和数据库：致虚极，守静笃</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-11-07-48821686.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/48821686&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4aac8e0cb7e3c9e25167fc7abef19e0a_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;如果说牛顿的经典物理是爱因斯坦相对论在低速环境下的一种体现的话，我们所熟知的数据库技术，可以认为是区块链技术在弱分布式环境下的一个特例。&lt;/p&gt;&lt;p&gt;「弱分布式」环境是我胡扯的一个词，你可以将其理解为节点数量极其有限，运行环境高度可控的一种分布式环境。一个数据库集群运行在同一数据中心，或者不同数据中心，只要是同一个管理者，那么这就是可控的运行环境。在可控的运行环境下，默认不存在「作恶」的节点，也就无所谓 BFT（Byzantine Fault Tolerance），因此我们不需要复杂的共识算法（consensus algorithm），一般两阶段提交（two phase commit）或者 paxos / raft 就能收敛共识，满足需要。所以，数据库的共识算法是区块链共识算法的特例。&lt;/p&gt;&lt;p&gt;在区块链的世界里，交易（transaction）和交易产生的状态（state）是严格分离的。若干交易由被共识算法选择出来的矿工验证并打包成为区块（block）并广播出去，然后网络里其他参与者验证区块中每个交易的合法性，并写入自己的 state db。在 bitcoin 里，state db 是 UTXO，在 ethereum 里，则是其 world state。&lt;/p&gt;&lt;p&gt;数据库的世界里仿佛没有类似于区块链的交易记录（数据库中的 transaction 是另一个概念），但仔细想想，它的交易历史其实就是 WAL（Write-Ahead Logging）。从外界接收到的请求，数据库会先将其写入 WAL，确保其进入持久化存储，才会往它自己的 “states” 里面写入。从这个角度，我们可以认为 WAL 里的每一个记录，就对应区块链里的一个交易，它是区块链交易的特例（当然你也可以 argue 两个 checkpoint 之间可以算作一个区块）。&lt;/p&gt;&lt;p&gt;如果你再认真思考一下，WAL，blockchain，以及 Martin Fowler 很早就提倡的 CQRS（Command Query Responsibility Segregation）在这个层面上其实都是「一中各表」：大家都强调「事件」和「状态」的分离，通过前一个状态 + 当前事件，可以推演出当前状态。这样，我们只要有一个初始的「状态」，然后记录系统发生过的所有的「事件」，就可以复原任意一个时刻的「状态」。&lt;/p&gt;&lt;p&gt;我们回到交易和容纳交易的「区块」。你会发现，「区块」是一个怪怪的存在，为什么数据库不需要「区块」这样的概念作为容器装载「交易」，而区块链却需要呢？我们知道，在区块链的世界里，不确定性和确定性仿佛一对孪生兄弟，确定的是规则，不确定的是规则的执行者。所谓矿工轮流做，下回到我家，那怎么定义一个「回合」呢？为了回答这个问题，我们需要某种机制明确一个回合矿工地位的起止 —— 这个起止就是一个「区块」。不仅如此，在一个物理时钟并不一致的分布式环境下，「区块」还承载着全局时钟的功能，滴答滴答将整个网络往前推进。「区块」的概念是如此重要，以至于它当仁不让地成为共识算法的基础 —— 大家先得对下一个要出的区块序号达成共识，否则这个游戏无法进行。反观数据库系统，在一个数据库集群中，master（等价于矿工）是固定的，master 令旗一挥，slave 就迅速跟进，指哪打哪，不存在轮流坐庄，也就无所谓回合，所以其实每个「交易」就是一个「区块」。所以在数据库的世界里，逻辑上每个交易，或者说 WAL 的每个记录，自成一个隐性的「区块」。&lt;/p&gt;&lt;p&gt;我们从另一个角度来探讨这个结论。「区块」的另一个重要的作用是 crash recovery。在一个区块链网路中，某个节点无论是断网还是崩溃，其状态和网络中达成共识的状态必不一致，那么，如何从这种不一致的状态恢复同步的状态呢？答案是「区块」，因为它是唯一明确的共识的产物。节点总是能够找到最近的 commit 的和网络中一致的区块高度，然后从这个高度往后一个区块一个区块同步，依次运行区块中包含的所有交易并更新本地的状态，最终可以保证和网络中的状态达成一致。在这里，「区块」就是检测和达成状态一致的最小单元。而在数据库系统中，在崩溃发生后，系统会从其他节点同步最新的 WAL，并从上次 commit 的 WAL 的位置往后一个记录一个记录执行命令，直到所有记录运行完毕，这时数据库状态恢复到集群的当前状态。在这里，WAL 的记录是检测和达成一致的最小单元，所以我们称其为隐性的「区块」，没毛病。&lt;/p&gt;&lt;p&gt;在区块链的世界里，一笔交易需要被验证。这里的验证有两重含义：1) 身份验证 —— 交易是由其发起人正确签名的；2) 完整性验证 —— 交易对状态的变更是合法的。身份验证好理解，你用自己钱包的私钥签名给我转 1 个 ABT 的交易，系统会验证你的确是你；完整性验证则是指在 states db 里，你的账号下的确有超过 1 个 ABT 的 token，才能发起这个交易。在数据库的世界里，身份验证直接赤果果用诸如 RBAC（Role Based Access Control）的访问控制系统解决了，而完整性验证和区块链类似。&lt;/p&gt;&lt;p&gt;接下来我们看看确定性（deterministic）。所谓确定性，就是在同一个状态 Sn-1 下，大家拿着同样一笔交易，不依赖任何第三方信息独立执行，执行的结果完全一致。这一点仅就纯粹的从交易到 states db 的处理来说，区块链和数据库是完全一致的，大家都能保证确定性。然而，如果某个区块链要支持交易中携带额外信息，这些信息触发某些链上部署好的代码的执行（比如说，smart contract），那么，我们就得注意代码本身需要具备确定性。所谓确定性，无非是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;代码中不要使用不确定的随机数生成器 —— 比如使用计算机的时钟作为种子生成随机数，这就是不确定的。因为交易在被执行的那一刻，我们无法保证所有参与者的时钟是精确同步的。&lt;/li&gt;&lt;li&gt;代码避免使用多线程。多线程引发的 race condition 具有不确定性。&lt;/li&gt;&lt;li&gt;不要使用系统时钟。不解释。&lt;/li&gt;&lt;li&gt;不要使用未初始化的内存。鬼知道上面是陈冠希还是诸子百家。&lt;/li&gt;&lt;li&gt;不要使用浮点数 —— 这个很奇葩，因为不同的 CPU arch，编译器，甚至不同 CPU 型号间，由于支持的浮点数指令集不同，会导致结果不同。&lt;/li&gt;&lt;li&gt;不要使用编程语言的可能有随机行为的数据结构。比如遍历一个 map&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;基本上避免了这些，代码就具备了确定性，可以在区块链上执行。那么，为什么数据库中的存储过程可以允许没有确定性的代码的执行？比如，一个存储过程里可以使用当前时间插入一条记录？我们如果再回归本源，从「交易」的角度看待问题，可以发现，存储过程类似于 “off-chain” 执行的代码，它虽然植根于数据库之中，但其实是「交易」的源头，存储过程的执行产生真正的交易，也就是 WAL 记录，然后同步给其它节点。所以存储过程可以 non-deterministic，因为其产生的 WAL 记录已经是 deterministic 的 —— 添加一条带当前时间的记录这件事情，在 master 执行时，已经将取「当前时间」这个动作完成并得到一个确定的值，携带于 WAL 之中。这跟区块链的 smart contract 的概念有本质的区别，这也是为什么存储过程可以不必具备确定性，而 “on-chain” 执行的 smart contract 需要确定性。从这个角度来讲，数据库系统也是一个弱化的区块链系统。&lt;/p&gt;&lt;p&gt;既然区块链和数据库存储的对象都是数据，那么，提过了数据的完整性和确定性，接下来就是数据的一致性。区块链显然是最终一致性的典范 —— 网络越大，参与的节点越多，区块的扩散就越慢，任何时刻在不同的节点上读取状态就很大几率出现不一致的情况。然而，只要节点能同步到最新的区块，整个网络的状态是收敛的，最终大家能够得到一个一致的状态数据。其实，按照这个道理，所有使用 WAL，CQRS 思想的分布式系统，其数据的状态都是最终一致的 —— 这似乎和我们对经典数据库强一致性的印象不匹配。然而，如果我们把视角拉到数据库内部，可以发现，强一致性只不过是最终一致性之上添加了一些条件，是个特例。如果我们假定一个区块链满足下面的条件：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;任何节点收到新的区块，必须在交易执行完成，写入 states db 中之后，给矿工节点（其实就是当前的 master）发送确认&lt;/li&gt;&lt;li&gt;矿工节点在收到所有确认之后广播给网络中所有节点这个区块大家已经 commit 成功&lt;/li&gt;&lt;li&gt;在一个区块没有收到矿工节点的上述广播之前（写入完成之前），客户端发送来的查询进入队列排队（其实就是 read-write lock）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么在外界看来，它也是强一致性。当然，第三点有些过于苛刻，一般的数据库实现都会采用 MVCC（Multiversion concurrency control），让每个 client 看到当前状态的一个 snapshot，因而存在一个很小的窗口，大家看到的数据是不一致的。如果较真，MVCC 不算强一致性，当然没人会这么认为。&lt;/p&gt;&lt;p&gt;通过上面的规则，数据库可以通过牺牲一些性能来打造对外而言的强一致性。但有时候，为了一些崇(wo)高(chuo)的理想，数据库系统也可以打破这些规则来号称更高的性能。mongdb 可以在 cluster 的环境下，写操作不需要节点确认即可返回，于是有了美其名曰的，如薛定谔的猫一般的「弱一致性」。&lt;/p&gt;&lt;p&gt;一个区块链网络理论上可以通过上述规则把自己营造成对外强一致性的感觉，但这实际上没有可操作性。能力越大，责任越大网络越大，延迟越大，所以，实际可操作的强一致性只能发生在节点数量很少，且节点都在同一个 data center 的环境下。从数据一致性的角度来说，数据库也是区块链在特殊场景下的一个特例。&lt;/p&gt;&lt;p&gt;最后说说性能。性能这事，和网络规模成反比。两个主要原因：1) 节点越多，达成共识的难度就越大。2) 节点越多，「交易」在网络中传播所需的时间就越长。那想要达到宇宙无敌的 TPS（Transactions Per Second） 怎么办？其实不难 —— 既然数据库是一个弱分布式环境下的特例，那么，咱就把区块链往数据库的方向退化就好。PoW 说「王侯将相，宁有种乎」，让全网参与铁王座的竞争，PoS 就让「一小部分人先富起来」，DPoS 再进一步，「让领导先走」，也许不久的将来，有人会则憋出终极大招，全网就一个九五之尊，把数据库里能用的招数，replicaSet（总还得 HA 一下嘛），Sharding 等等统统用上，再使用兵法中不战而屈人之兵之术：「今治水军八十万众，方与将军会猎于吴」…于是，可以名正言顺地抢下性能的桂冠。&lt;/p&gt;&lt;p&gt;只不过…就像非诚勿扰里车晓问葛优：那事儿，就那么有意思吗？&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-11-07-48821686</guid>
<pubDate>Wed, 07 Nov 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>使用 Tendermint 开发自己的链</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-11-07-48821038.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/48821038&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f49d42ebdfbf142db1b350bd7fd1ba7e_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;（这是 1024 节写的文章，时间线以 1024 前后为准）&lt;/p&gt;&lt;p&gt;前两周上线了我们为 Cybermiles 提供的 supernode，因为 Cybermiles 主网使用了 Tendermint，于是上周便研究了一下 Tendermint，边学边写了个 slides 介绍 Tendermint。&lt;/p&gt;&lt;p&gt;Tendermint 是一个脱胎于 PBFT 的 consensus engine，并在此之上构建了一个 Appliation BlockChain Interface (ABCI)，让 blockchain 的开发者可以关注于如何提供服务，以及维系服务的状态，而把如何达成共识，如何管理 mempool，如何进行安全的 p2p 通讯这样的琐事交给 Tendermint 来处理。Tendermint 自身是 golang 撰写的，其 ABCI 接口用 protobuf 实现，并使用 raw TCP 或者 http2 (gRPC) 和 application layer 通讯。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7a34bf6c6882df480118044dd4f282ba_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;910&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7a34bf6c6882df480118044dd4f282ba&quot; data-watermark-src=&quot;v2-2d5156ad3d668a756accafabefba34d6&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;周日，闲来无事，想用 tendermint 做点东西。无奈 tendermint 没有提供 elixir 的 ABCI 实现，社区的 erlang 实现又缺失一些东西，且我很不喜欢 erlang 下用 Record 来描述 protobuf 的方式，于是用 Tony 的 protobuf 库，写了个 elixir 的 ABCI 实现，放在 github.com/arcblock/ex_abci 上，并随后实现了 Tendermint 自身提供的 counter example app - 用区块链的不可篡改性来维护一个全网唯一的计数器。&lt;/p&gt;&lt;p&gt;使用 ex_abci，counter app 的核心代码也就几十行，就是实现 info，check_tx，deliver_tx 几个接口即可：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ac8401876804a94f7ca99c97f9c3f8dc_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1033&quot; data-rawheight=&quot;1015&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ac8401876804a94f7ca99c97f9c3f8dc&quot; data-watermark-src=&quot;v2-0b09e0d77e071c5a128b59966766fff0&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这样的 app 当 hello world 还可以，用来验证 Tendermint 是否靠谱，本身并不靠谱。Tendermint 还提供了一个 kv store 的 example，也没有 get 到区块链的核心要素，于是我便萌生了搞一个足够简单，最好能在几百行内演示区块链技术的 Simple Chain。那什么算是区块链的核心要素呢，我觉得是这幅图 - Merkle Patricia Tree (MPT)：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8bd68bc480907702264be223b7be41d7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;763&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8bd68bc480907702264be223b7be41d7&quot; data-watermark-src=&quot;v2-70b4756d4121554ffdb40baf1a9557eb&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这是以太坊保存其 World State 的核心 - 我相信我的读者们了解 patricia tree (prefix tree, radix tree, 或者叫 trie)，有一些区块链知识的读者应该知道 merkle tree，MPT 结合二者，组织出一个自带验证的 persistent data structure（函数式编程语言保存 list / map 的方式），关于 MPT 和以及上图，我们的工程师丁沛灵同学在上次北京 Hackathon 有一个精彩的讲座，感兴趣的同学可以去 youtube arcblock channel 上找：ArcBlock’s Introduction to Blockchain，在 37 分钟附近开始讲 MPT，大约 10 分钟，非常之深入浅出。篇幅有限，我这里就不详细展开。&lt;/p&gt;&lt;p&gt;关于 Simple Chain，产品上我是这么考虑的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;账号系统兼容以太坊&lt;/li&gt;&lt;li&gt;完整使用 Tendermint 的全部接口，并探索它们的意义&lt;/li&gt;&lt;li&gt;chain 的状态使用 MPT 保存，并将每个 block commit 后的 state root 提交给 Tendermint&lt;/li&gt;&lt;li&gt;chain 能够具有基本的容错 - 比如 tx 执行到一半，crash 了，可以恢复到上一个 block 的 state 继续往下执行&lt;/li&gt;&lt;li&gt;Transaction 使用简化版本的 Ethereum tx，一个 TX 只包含 from, to, nonce, total 和 pub key&lt;/li&gt;&lt;li&gt;MPT 里保存类似 Ethereum 的 account，每个 account 有自己的 balance，nonce 和 num_txs&lt;/li&gt;&lt;li&gt;client RPC 直接整合在 Wallet 模块里，方便演示&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;花了两天的功夫，一个粗糙的，未经过多节点测试的版本终于实现了，源码见：ex_abci/examples/simple_chain。我们谈谈其主要对外接口：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Wallet.new: 生成离线账号&lt;/li&gt;&lt;li&gt;Wallet.declare: 每个 Wallet 第一次可以让系统给自己打 10000 个 token，这个主要方便测试&lt;/li&gt;&lt;li&gt;Wallet.transfer：一个账户给另一个账户打钱。两方的 address 对应的 account 会在 chain 的 MPT 里更新，每个 block commit 之后，MPT root，也就是 app state 会写入 block header。&lt;/li&gt;&lt;li&gt;Wallet.info / Wallet.chain_info：访问 account 的信息 / chain 的信息&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面是运行时的整个过程。&lt;/p&gt;&lt;p&gt;初始化：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6b7bef4eaaab05d89ceee14925245b44_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;399&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6b7bef4eaaab05d89ceee14925245b44&quot; data-watermark-src=&quot;v2-958e75aa1074a94bafdb8c9b291f435a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Wallet 状态：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3e684a14ebef8c4500a7f840c121872_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;425&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b3e684a14ebef8c4500a7f840c121872&quot; data-watermark-src=&quot;v2-eff42e9aba2e7b0cf43b5346c7eb5cdc&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;转账：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-452de83ffae5efe7552e8ccbe66730b5_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;638&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-452de83ffae5efe7552e8ccbe66730b5&quot; data-watermark-src=&quot;v2-c5131ce9e0538611afdda9f9a3af4c77&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ef5828e115f07797008b3f08f4b635a7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1070&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ef5828e115f07797008b3f08f4b635a7&quot; data-watermark-src=&quot;v2-5190c6a0db69ba1e7a205943d3345456&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b70278b546420f6935120f614efd829a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;623&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b70278b546420f6935120f614efd829a&quot; data-watermark-src=&quot;v2-56354152c62f15c9b02cf24e82fc8359&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Tendermint block:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-93b2be74e5c2cab7d74ae49ab15e02b1_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1022&quot; data-rawheight=&quot;642&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-93b2be74e5c2cab7d74ae49ab15e02b1&quot; data-watermark-src=&quot;v2-563feca3eb32540d3d1df202f20ac9bc&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;转账结束后的状态：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-52ea92306e747934f53b6bff70c43ee4_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;715&quot; data-rawheight=&quot;112&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这个 Simple Chain 主要使用到的技术：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Tendermint 和 ex_abci，这是自然&lt;/li&gt;&lt;li&gt;Elixir 下的 MPT 实现：merkle_patricia_tree&lt;/li&gt;&lt;li&gt;Tony 的 protobuf 实现。我们在 MPT 里存储 account，其 value 也是用 protobuf 定义的&lt;/li&gt;&lt;li&gt;keccakf1600：ethereum 的 sha3 的实现，用来产生 account address 和各种需要 hash 的场合（注意，我们这里并没有使用 double hash）&lt;/li&gt;&lt;li&gt;libsecp256k1：ECDSA 的实现，主要用来生成 wallet，以及 transaction 的 sign 和 verify&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;目前代码量在 400 行内，基本上一目了然，用来理解 Tendermint 和区块链技术的基本逻辑再好不过。感兴趣的读者可以安装 tendermint，下载 &lt;a href=&quot;http://github.com/arcblock/ex_abci&quot;&gt;github.com/arcblock/ex_abci&lt;/a&gt; 尝试。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-11-07-48821038</guid>
<pubDate>Wed, 07 Nov 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
