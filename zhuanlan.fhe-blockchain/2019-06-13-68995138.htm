<blockquote><b>本文比较了四种常用的加密算法的性能:DES、3DES、Blowfish和AES (Rijndael)。通过运行几种加密设置来处理不同大小的数据块，以评估算法的加密/解密速度，从而进行了比较。使用c#语言进行了模拟。</b></blockquote><p><b>关键词:加密算法，性能，分析，AES, DES, Blowfish, TripleDES，密码学</b></p><p>2.4<b>对称和非对称加密</b></p><p>根据用于加密/解密安全数据的安全密钥的类型，数据加密过程主要分为两类。这两个类别是：非对称和对称加密技术。</p><p>2.4.1对称加密</p><p>在这种类型的加密中，发送方和接收方就（共享）密钥达成一致。然后他们使用这个密钥加密和解密他们发送的消息。图4显示了对称加密的过程。</p><p>节点A和B首先就通信数据的加密和解密使用的加密技术达成一致。然后，他们就双方将在这方面使用的密钥达成一致。加密设置完成后，节点A开始发送使用共享密钥加密的数据，另一端节点B使用相同的密钥解密加密的消息。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-dacd7492856965bc73ed01ea01bd2260_b.jpg" data-size="normal" data-rawwidth="239" data-rawheight="176" class="content_image" width="239"/></noscript><img src="https://pic1.zhimg.com/v2-dacd7492856965bc73ed01ea01bd2260_b.jpg" data-size="normal" data-rawwidth="239" data-rawheight="176" class="content_image lazy" width="239" data-actualsrc="https://pic1.zhimg.com/v2-dacd7492856965bc73ed01ea01bd2260_b.jpg"/><figcaption>图4：对称加密</figcaption></figure><p>对称加密背后的主要问题是如何在两个节点之间安全地共享密钥。如果密钥因为任何原因被知道，整个系统就会崩溃。这种加密类型的密钥管理是很麻烦的，特别是如果每个对等连接都使用一个惟一的密钥，那么n个节点要保存和管理的密钥总数将是n(n-1)/2。</p><p>2.4.2非对称加密</p><p>非对称加密是使用两个密钥的另一种加密类型。为了解释更多，Key1只能加密Key2可以解密，反之亦然。它也被称为公钥加密（PKC），因为用户倾向于使用两个密钥：公共的公钥和用户只知道的私钥。</p><p>下面的图5说明了在节点A和节点B之间使用两个密钥。在同意连接中使用的加密类型之后，节点B将其公钥发送到节点A.节点A使用接收到的公钥加密它的消息。然后，当加密的消息到达时，节点B使用其私钥来解密它们。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-bdc9b572f667272a44c0b43abfee1b64_b.jpg" data-size="normal" data-rawwidth="393" data-rawheight="273" class="content_image" width="393"/></noscript><img src="https://pic1.zhimg.com/v2-bdc9b572f667272a44c0b43abfee1b64_b.jpg" data-size="normal" data-rawwidth="393" data-rawheight="273" class="content_image lazy" width="393" data-actualsrc="https://pic1.zhimg.com/v2-bdc9b572f667272a44c0b43abfee1b64_b.jpg"/><figcaption>图5非对称加密</figcaption></figure><p>此功能克服了管理密钥的对称加密问题。但另一方面，公钥加密的这一独特功能使其在数学上更容易受到攻击。此外，非对称加密技术比对称技术慢近1000倍，因为它们需要更多的计算处理能力。</p><p class="ztext-empty-paragraph"><br/></p><p>为了获得这两种方法的好处，通常使用混合技术。在该技术中，非对称加密用于交换密钥，然后使用对称加密在发送方和接收方之间传输数据。</p><p class="ztext-empty-paragraph"><br/></p><h3><b>2.5比较算法</b></h3><p>本节旨在为读者提供理解比较算法之间关键差异的必要背景。</p><p>DES :(数据加密标准）是NIST（美国国家标准与技术研究院）推荐的第一个加密标准。</p><p>它基于IBM提出的名为Lucifer的算法。DES于1974年成为标准。从那时起，许多攻击和方法都利用DES的弱点，使其成为不安全的块密码。</p><p>3DES：作为DES的增强，提出了3DES（三重DES）加密标准。在该标准中，加密方法类似于原始DES中的加密方法，但是应用3次以增加加密级别。但是已知的事实是3DES比其他块密码方法慢。</p><p>AES :( 高级加密标准），是NIST推荐的替代DES的新加密标准。Rijndael（发音为Rain Doll）算法是在1997年选择最佳加密标准的竞赛后选出的。暴力攻击是已知的唯一有效的攻击，攻击者试图测试所有字符组合来解锁加密。AES和DES都是块密码。</p><p>Blowfish： 它是世界领先的密码学家之一Bruce Schneier提供的最常见的公共域加密算法之一，Bruce Schneier也是专门从事密码学和计算机安全的咨询公司Counterpane Systems的总裁。</p><p>Blowfish是一种可变长度密钥，64位分组密码。Blowfish算法于1993年首次引入。该算法虽然主要用于软件应用，但可以在硬件应用中进行优化。虽然它受到弱密钥问题的困扰，但已知没有攻击成功。</p><p>本节简要介绍了比较的加密算法。本文对每种算法的介绍是为了提供最小的信息来区分它们之间的主要区别。</p><p>03相关工作结果</p><p>为了更好地展望比较算法的性能，本节讨论从其他资源获得的结果。 </p><p>其中一个已知的加密库是Crypto ++ 。Crypto ++ Library是一个免费的C ++加密方案类库。目前，该库包含以下内容，其中一些是其他人的代码，重新打包成类。</p><p>表1包含一些最常用的加密算法的速度基准。所有这些都是用C ++编写的，用Microsoft Visual C ++ .NET 2003编译（整个程序优化，优化速度，P4代码生成），并运行在Windows XP SP 1下的奔腾4 2.1 GHz处理器上。采用386例汇编程序进行多精度加法和减法运算。采用SSE2内在函数进行多精度乘法。</p><p>从表中可以看出，并非所有模式都针对所有算法进行了尝试。尽管如此，这些结果很好地表明所呈现的比较结果应该是什么样的。</p><p>此外，它表明Blowfish和AES具有最佳性能。众所周知，两者都具有比其他两种更好的加密（即更强抵御数据攻击）。<br/> </p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-54570853e0d6a54d72778765af9b6d37_b.jpg" data-size="normal" data-rawwidth="1202" data-rawheight="1357" class="origin_image zh-lightbox-thumb" width="1202" data-original="https://pic4.zhimg.com/v2-54570853e0d6a54d72778765af9b6d37_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-54570853e0d6a54d72778765af9b6d37_b.jpg" data-size="normal" data-rawwidth="1202" data-rawheight="1357" class="origin_image zh-lightbox-thumb lazy" width="1202" data-original="https://pic4.zhimg.com/v2-54570853e0d6a54d72778765af9b6d37_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-54570853e0d6a54d72778765af9b6d37_b.jpg"/><figcaption>表1使用Crypto ++的比较结果</figcaption></figure><p>在本文中，实现了流行的密钥算法，包括DES，3DES，AES（Rijndael），Blowfish，并通过加密不同内容和大小的输入文件来比较它们的性能。算法使用统一语言（Java），使用其标准规范实现，并在两个不同的硬件平台上进行测试，以比较它们的性能。 </p><p>表2和表3显示了他们的实验结果，他们在两台不同的机器上进行了实验：P-II 266 MHz和P-4 2.4 GHz。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-e42e889e015180e129fb4a37a08de68b_b.jpg" data-size="normal" data-rawwidth="1213" data-rawheight="947" class="origin_image zh-lightbox-thumb" width="1213" data-original="https://pic4.zhimg.com/v2-e42e889e015180e129fb4a37a08de68b_r.jpg"/></noscript><img src="https://pic4.zhimg.com/v2-e42e889e015180e129fb4a37a08de68b_b.jpg" data-size="normal" data-rawwidth="1213" data-rawheight="947" class="origin_image zh-lightbox-thumb lazy" width="1213" data-original="https://pic4.zhimg.com/v2-e42e889e015180e129fb4a37a08de68b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-e42e889e015180e129fb4a37a08de68b_b.jpg"/><figcaption>表2在P-II 266 MHz机器上的ECB模式下加密算法的比较执行时间（以秒为单位） </figcaption></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-0bfa87f63f344fa42d9c6d9681690d0e_b.jpg" data-size="normal" data-rawwidth="1202" data-rawheight="923" class="origin_image zh-lightbox-thumb" width="1202" data-original="https://pic3.zhimg.com/v2-0bfa87f63f344fa42d9c6d9681690d0e_r.jpg"/></noscript><img src="https://pic3.zhimg.com/v2-0bfa87f63f344fa42d9c6d9681690d0e_b.jpg" data-size="normal" data-rawwidth="1202" data-rawheight="923" class="origin_image zh-lightbox-thumb lazy" width="1202" data-original="https://pic3.zhimg.com/v2-0bfa87f63f344fa42d9c6d9681690d0e_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-0bfa87f63f344fa42d9c6d9681690d0e_b.jpg"/><figcaption>表3在P-4 2.4 GHz机器上的ECB模式下加密算法的比较执行时间（以秒为单位） </figcaption></figure><p>从结果中可以很容易地看出，Blowfish在吞吐量方面优于其他算法。Aamer Nadeem等人也使用CBC对流模式下的算法进行了比较，但由于本文更侧重于块密码，因此省略了结果。</p><p>结果表明，与其他算法相比，Blowfish具有非常好的性能。此外，它表明AES具有比3DES和DES更好的性能。令人惊讶的是，它还表明3DES具有几乎1/3的DES吞吐量，换句话说，它需要比DES多3倍的来处理相同数量的数据。</p><p>Priya Dhawan也进行了实验，用于比较.NET框架内实现的不同加密算法的性能。他们的结果与之前显示的结果很接近（图6）。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-1d02882e99a4fc608e387854c34f7567_b.jpg" data-size="normal" data-rawwidth="359" data-rawheight="461" class="content_image" width="359"/></noscript><img src="https://pic4.zhimg.com/v2-1d02882e99a4fc608e387854c34f7567_b.jpg" data-size="normal" data-rawwidth="359" data-rawheight="461" class="content_image lazy" width="359" data-actualsrc="https://pic4.zhimg.com/v2-1d02882e99a4fc608e387854c34f7567_b.jpg"/><figcaption>图6：使用.NET实现的比较结果</figcaption></figure><p>比较在以下算法上进行：DES，3DES，RC2和AES（Rijndael）。结果表明，AES在不同用户负载的每秒请求进程数以及不同用户负载情况下的响应时间方面均优于其他算法。</p><p>本节概述了该领域其他人的比较结果。</p><a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzU3MTYzMjMzNA%3D%3D%26mid%3D2247485059%26idx%3D1%26sn%3D74cbdbbae75b74aa7c96fe7ef198e463%26chksm%3Dfcdc7922cbabf034c8d44b62e26941a36a1399cd2483b9236f455941861d206b1fa7c55e25b6%26token%3D1666345676%26lang%3Dzh_CN%23rd" data-draft-node="block" data-draft-type="link-card" class=" wrap external" target="_blank" rel="nofollow noreferrer">数据加密算法的性能分析-2</a><hr/><p><b>文章首发在微信公众号：btc201800</b><br/><b>知识星球ID：28018093</b></p><p><br/><b>音频发布在喜马拉雅上“区块链杂谈 (第2季)”</b> <b><u><a href="https://link.zhihu.com/?target=http%3A//xima.tv/Bjq4se" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">xima.tv/Bjq4se</span><span class="invisible"></span></a></u></b></p><p><b>解读区块链白皮书</b> <u><a href="https://link.zhihu.com/?target=http%3A//xima.tv/RNU1Q8" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">xima.tv/RNU1Q8</span><span class="invisible"></span></a></u></p><p><br/><b>宁波格密链网络科技有限公司，专注于区块链上的密码技术研发。</b></p>